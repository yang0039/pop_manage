// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zproto_auth_key.proto

package mtproto

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AuthKeyMetadata struct {
	Nonce       []byte `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ServerNonce []byte `protobuf:"bytes,2,opt,name=server_nonce,json=serverNonce,proto3" json:"server_nonce,omitempty"`
	NewNonce    []byte `protobuf:"bytes,3,opt,name=new_nonce,json=newNonce,proto3" json:"new_nonce,omitempty"`
	A           []byte `protobuf:"bytes,4,opt,name=a,proto3" json:"a,omitempty"`
	P           []byte `protobuf:"bytes,5,opt,name=p,proto3" json:"p,omitempty"`
	AuthKeyId   int64  `protobuf:"varint,6,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	AuthKey     []byte `protobuf:"bytes,7,opt,name=auth_key,json=authKey,proto3" json:"auth_key,omitempty"`
}

func (m *AuthKeyMetadata) Reset()         { *m = AuthKeyMetadata{} }
func (m *AuthKeyMetadata) String() string { return proto.CompactTextString(m) }
func (*AuthKeyMetadata) ProtoMessage()    {}
func (*AuthKeyMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b93c6ecbbc7bc61, []int{0}
}
func (m *AuthKeyMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthKeyMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthKeyMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthKeyMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthKeyMetadata.Merge(m, src)
}
func (m *AuthKeyMetadata) XXX_Size() int {
	return m.Size()
}
func (m *AuthKeyMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthKeyMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_AuthKeyMetadata proto.InternalMessageInfo

func (m *AuthKeyMetadata) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *AuthKeyMetadata) GetServerNonce() []byte {
	if m != nil {
		return m.ServerNonce
	}
	return nil
}

func (m *AuthKeyMetadata) GetNewNonce() []byte {
	if m != nil {
		return m.NewNonce
	}
	return nil
}

func (m *AuthKeyMetadata) GetA() []byte {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *AuthKeyMetadata) GetP() []byte {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *AuthKeyMetadata) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *AuthKeyMetadata) GetAuthKey() []byte {
	if m != nil {
		return m.AuthKey
	}
	return nil
}

type AuthKeyRequest struct {
	AuthKeyId int64 `protobuf:"varint,1,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
}

func (m *AuthKeyRequest) Reset()         { *m = AuthKeyRequest{} }
func (m *AuthKeyRequest) String() string { return proto.CompactTextString(m) }
func (*AuthKeyRequest) ProtoMessage()    {}
func (*AuthKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b93c6ecbbc7bc61, []int{1}
}
func (m *AuthKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthKeyRequest.Merge(m, src)
}
func (m *AuthKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *AuthKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthKeyRequest proto.InternalMessageInfo

func (m *AuthKeyRequest) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

type AuthKeyData struct {
	Result    int32  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	AuthKeyId int64  `protobuf:"varint,2,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	AuthKey   []byte `protobuf:"bytes,3,opt,name=auth_key,json=authKey,proto3" json:"auth_key,omitempty"`
}

func (m *AuthKeyData) Reset()         { *m = AuthKeyData{} }
func (m *AuthKeyData) String() string { return proto.CompactTextString(m) }
func (*AuthKeyData) ProtoMessage()    {}
func (*AuthKeyData) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b93c6ecbbc7bc61, []int{2}
}
func (m *AuthKeyData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthKeyData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthKeyData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthKeyData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthKeyData.Merge(m, src)
}
func (m *AuthKeyData) XXX_Size() int {
	return m.Size()
}
func (m *AuthKeyData) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthKeyData.DiscardUnknown(m)
}

var xxx_messageInfo_AuthKeyData proto.InternalMessageInfo

func (m *AuthKeyData) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *AuthKeyData) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *AuthKeyData) GetAuthKey() []byte {
	if m != nil {
		return m.AuthKey
	}
	return nil
}

// TODO(@work): remove to biz_auth service
type AuthKeyIdRequest struct {
	AuthKeyId int64 `protobuf:"varint,1,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
}

func (m *AuthKeyIdRequest) Reset()         { *m = AuthKeyIdRequest{} }
func (m *AuthKeyIdRequest) String() string { return proto.CompactTextString(m) }
func (*AuthKeyIdRequest) ProtoMessage()    {}
func (*AuthKeyIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b93c6ecbbc7bc61, []int{3}
}
func (m *AuthKeyIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthKeyIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthKeyIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthKeyIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthKeyIdRequest.Merge(m, src)
}
func (m *AuthKeyIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *AuthKeyIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthKeyIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthKeyIdRequest proto.InternalMessageInfo

func (m *AuthKeyIdRequest) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

type UserIdResponse struct {
	Result    int32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	AuthKeyId int64 `protobuf:"varint,2,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	UserId    int32 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *UserIdResponse) Reset()         { *m = UserIdResponse{} }
func (m *UserIdResponse) String() string { return proto.CompactTextString(m) }
func (*UserIdResponse) ProtoMessage()    {}
func (*UserIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b93c6ecbbc7bc61, []int{4}
}
func (m *UserIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserIdResponse.Merge(m, src)
}
func (m *UserIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *UserIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserIdResponse proto.InternalMessageInfo

func (m *UserIdResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *UserIdResponse) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *UserIdResponse) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func init() {
	proto.RegisterType((*AuthKeyMetadata)(nil), "mtproto.AuthKeyMetadata")
	proto.RegisterType((*AuthKeyRequest)(nil), "mtproto.AuthKeyRequest")
	proto.RegisterType((*AuthKeyData)(nil), "mtproto.AuthKeyData")
	proto.RegisterType((*AuthKeyIdRequest)(nil), "mtproto.AuthKeyIdRequest")
	proto.RegisterType((*UserIdResponse)(nil), "mtproto.UserIdResponse")
}

func init() { proto.RegisterFile("zproto_auth_key.proto", fileDescriptor_2b93c6ecbbc7bc61) }

var fileDescriptor_2b93c6ecbbc7bc61 = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x4f, 0x4f, 0xea, 0x40,
	0x14, 0xc5, 0x19, 0xfa, 0xa0, 0x70, 0xdb, 0xf0, 0x5e, 0x1a, 0x9e, 0x14, 0x4c, 0x1a, 0x64, 0xc5,
	0x8a, 0x18, 0x5c, 0xbb, 0x40, 0x5d, 0x68, 0x8c, 0x46, 0x9b, 0xb8, 0x71, 0x53, 0x47, 0xb9, 0x09,
	0x46, 0x6d, 0xeb, 0xfc, 0x91, 0xe0, 0x97, 0xd0, 0x4f, 0xe4, 0xda, 0x25, 0x4b, 0x97, 0x06, 0xbe,
	0x88, 0xe9, 0xcc, 0x54, 0x43, 0x17, 0xc6, 0xb8, 0xeb, 0x99, 0x73, 0xcf, 0xc9, 0xef, 0xde, 0x14,
	0xfe, 0x3f, 0xa6, 0x2c, 0x11, 0x49, 0x44, 0xa5, 0x98, 0x44, 0x37, 0x38, 0x1b, 0x28, 0xe9, 0xd9,
	0x77, 0x42, 0x7d, 0xf4, 0x5e, 0x08, 0xfc, 0x1d, 0x49, 0x31, 0x39, 0xc4, 0xd9, 0x11, 0x0a, 0x3a,
	0xa6, 0x82, 0x7a, 0x4d, 0xa8, 0xc4, 0x49, 0x7c, 0x85, 0x3e, 0xe9, 0x92, 0xbe, 0x1b, 0x6a, 0xe1,
	0x6d, 0x80, 0xcb, 0x91, 0x3d, 0x20, 0x8b, 0xb4, 0x59, 0x56, 0xa6, 0xa3, 0xdf, 0x8e, 0xd5, 0xc8,
	0x3a, 0xd4, 0x63, 0x9c, 0x1a, 0xdf, 0x52, 0x7e, 0x2d, 0xc6, 0xa9, 0x36, 0x5d, 0x20, 0xd4, 0xff,
	0xa3, 0x1e, 0x09, 0xcd, 0x54, 0xea, 0x57, 0xb4, 0x4a, 0xbd, 0x00, 0x9c, 0x1c, 0x30, 0xba, 0x1e,
	0xfb, 0xd5, 0x2e, 0xe9, 0x5b, 0x61, 0x9d, 0x6a, 0xae, 0x83, 0xb1, 0xd7, 0x86, 0x5a, 0xee, 0xfb,
	0xb6, 0x0a, 0xd9, 0xc6, 0xec, 0x6d, 0x42, 0xc3, 0xf0, 0x87, 0x78, 0x2f, 0x91, 0x8b, 0x62, 0x19,
	0x29, 0x94, 0xf5, 0x2e, 0xc0, 0x31, 0x89, 0xbd, 0x6c, 0xdb, 0x35, 0xa8, 0x32, 0xe4, 0xf2, 0x56,
	0xa8, 0xc9, 0x4a, 0x68, 0x54, 0xb1, 0xa6, 0xfc, 0x1d, 0x93, 0xb5, 0xca, 0x34, 0x84, 0x7f, 0xa3,
	0x7c, 0xee, 0xa7, 0x54, 0x14, 0x1a, 0x67, 0x1c, 0x59, 0x16, 0xe0, 0x69, 0x12, 0x73, 0xfc, 0x35,
	0x58, 0x0b, 0x6c, 0xc9, 0x91, 0x65, 0x9e, 0xa5, 0x83, 0x52, 0x15, 0x0f, 0x9f, 0x08, 0x38, 0xe7,
	0xe1, 0xc9, 0xae, 0x61, 0xf3, 0xb6, 0xc1, 0x3d, 0x95, 0xc8, 0x66, 0xb9, 0x6e, 0x0d, 0xcc, 0x5f,
	0x31, 0x58, 0xbd, 0x68, 0xa7, 0x59, 0x34, 0xd4, 0xe1, 0x46, 0xe0, 0xa8, 0xb8, 0xc6, 0xf6, 0xda,
	0xc5, 0xa1, 0xcf, 0xdd, 0x3b, 0x5f, 0xc5, 0xab, 0x2b, 0xee, 0x74, 0x5e, 0x17, 0x01, 0x99, 0x2f,
	0x02, 0xf2, 0xbe, 0x08, 0xc8, 0xf3, 0x32, 0x28, 0xcd, 0x97, 0x41, 0xe9, 0x6d, 0x19, 0x94, 0xf6,
	0xcb, 0x97, 0x55, 0x95, 0xd8, 0xfa, 0x08, 0x00, 0x00, 0xff, 0xff, 0xca, 0x98, 0x96, 0x17, 0xc2,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ZRPCAuthKeyClient is the client API for ZRPCAuthKey service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ZRPCAuthKeyClient interface {
	QueryAuthKey(ctx context.Context, in *AuthKeyRequest, opts ...grpc.CallOption) (*AuthKeyData, error)
	// TODO(@work): remove to biz_auth service
	QueryUserId(ctx context.Context, in *AuthKeyIdRequest, opts ...grpc.CallOption) (*UserIdResponse, error)
}

type zRPCAuthKeyClient struct {
	cc *grpc.ClientConn
}

func NewZRPCAuthKeyClient(cc *grpc.ClientConn) ZRPCAuthKeyClient {
	return &zRPCAuthKeyClient{cc}
}

func (c *zRPCAuthKeyClient) QueryAuthKey(ctx context.Context, in *AuthKeyRequest, opts ...grpc.CallOption) (*AuthKeyData, error) {
	out := new(AuthKeyData)
	err := c.cc.Invoke(ctx, "/mtproto.ZRPCAuthKey/QueryAuthKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zRPCAuthKeyClient) QueryUserId(ctx context.Context, in *AuthKeyIdRequest, opts ...grpc.CallOption) (*UserIdResponse, error) {
	out := new(UserIdResponse)
	err := c.cc.Invoke(ctx, "/mtproto.ZRPCAuthKey/QueryUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZRPCAuthKeyServer is the server API for ZRPCAuthKey service.
type ZRPCAuthKeyServer interface {
	QueryAuthKey(context.Context, *AuthKeyRequest) (*AuthKeyData, error)
	// TODO(@work): remove to biz_auth service
	QueryUserId(context.Context, *AuthKeyIdRequest) (*UserIdResponse, error)
}

// UnimplementedZRPCAuthKeyServer can be embedded to have forward compatible implementations.
type UnimplementedZRPCAuthKeyServer struct {
}

func (*UnimplementedZRPCAuthKeyServer) QueryAuthKey(ctx context.Context, req *AuthKeyRequest) (*AuthKeyData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAuthKey not implemented")
}
func (*UnimplementedZRPCAuthKeyServer) QueryUserId(ctx context.Context, req *AuthKeyIdRequest) (*UserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserId not implemented")
}

func RegisterZRPCAuthKeyServer(s *grpc.Server, srv ZRPCAuthKeyServer) {
	s.RegisterService(&_ZRPCAuthKey_serviceDesc, srv)
}

func _ZRPCAuthKey_QueryAuthKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZRPCAuthKeyServer).QueryAuthKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.ZRPCAuthKey/QueryAuthKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZRPCAuthKeyServer).QueryAuthKey(ctx, req.(*AuthKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZRPCAuthKey_QueryUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthKeyIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZRPCAuthKeyServer).QueryUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.ZRPCAuthKey/QueryUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZRPCAuthKeyServer).QueryUserId(ctx, req.(*AuthKeyIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ZRPCAuthKey_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.ZRPCAuthKey",
	HandlerType: (*ZRPCAuthKeyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryAuthKey",
			Handler:    _ZRPCAuthKey_QueryAuthKey_Handler,
		},
		{
			MethodName: "QueryUserId",
			Handler:    _ZRPCAuthKey_QueryUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zproto_auth_key.proto",
}

func (m *AuthKeyMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthKeyMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthKeyMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuthKey) > 0 {
		i -= len(m.AuthKey)
		copy(dAtA[i:], m.AuthKey)
		i = encodeVarintZprotoAuthKey(dAtA, i, uint64(len(m.AuthKey)))
		i--
		dAtA[i] = 0x3a
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintZprotoAuthKey(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.P) > 0 {
		i -= len(m.P)
		copy(dAtA[i:], m.P)
		i = encodeVarintZprotoAuthKey(dAtA, i, uint64(len(m.P)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.A) > 0 {
		i -= len(m.A)
		copy(dAtA[i:], m.A)
		i = encodeVarintZprotoAuthKey(dAtA, i, uint64(len(m.A)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NewNonce) > 0 {
		i -= len(m.NewNonce)
		copy(dAtA[i:], m.NewNonce)
		i = encodeVarintZprotoAuthKey(dAtA, i, uint64(len(m.NewNonce)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ServerNonce) > 0 {
		i -= len(m.ServerNonce)
		copy(dAtA[i:], m.ServerNonce)
		i = encodeVarintZprotoAuthKey(dAtA, i, uint64(len(m.ServerNonce)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintZprotoAuthKey(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuthKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuthKeyId != 0 {
		i = encodeVarintZprotoAuthKey(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AuthKeyData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthKeyData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthKeyData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuthKey) > 0 {
		i -= len(m.AuthKey)
		copy(dAtA[i:], m.AuthKey)
		i = encodeVarintZprotoAuthKey(dAtA, i, uint64(len(m.AuthKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintZprotoAuthKey(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x10
	}
	if m.Result != 0 {
		i = encodeVarintZprotoAuthKey(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AuthKeyIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthKeyIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthKeyIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuthKeyId != 0 {
		i = encodeVarintZprotoAuthKey(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		i = encodeVarintZprotoAuthKey(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x18
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintZprotoAuthKey(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x10
	}
	if m.Result != 0 {
		i = encodeVarintZprotoAuthKey(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintZprotoAuthKey(dAtA []byte, offset int, v uint64) int {
	offset -= sovZprotoAuthKey(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AuthKeyMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovZprotoAuthKey(uint64(l))
	}
	l = len(m.ServerNonce)
	if l > 0 {
		n += 1 + l + sovZprotoAuthKey(uint64(l))
	}
	l = len(m.NewNonce)
	if l > 0 {
		n += 1 + l + sovZprotoAuthKey(uint64(l))
	}
	l = len(m.A)
	if l > 0 {
		n += 1 + l + sovZprotoAuthKey(uint64(l))
	}
	l = len(m.P)
	if l > 0 {
		n += 1 + l + sovZprotoAuthKey(uint64(l))
	}
	if m.AuthKeyId != 0 {
		n += 1 + sovZprotoAuthKey(uint64(m.AuthKeyId))
	}
	l = len(m.AuthKey)
	if l > 0 {
		n += 1 + l + sovZprotoAuthKey(uint64(l))
	}
	return n
}

func (m *AuthKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthKeyId != 0 {
		n += 1 + sovZprotoAuthKey(uint64(m.AuthKeyId))
	}
	return n
}

func (m *AuthKeyData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovZprotoAuthKey(uint64(m.Result))
	}
	if m.AuthKeyId != 0 {
		n += 1 + sovZprotoAuthKey(uint64(m.AuthKeyId))
	}
	l = len(m.AuthKey)
	if l > 0 {
		n += 1 + l + sovZprotoAuthKey(uint64(l))
	}
	return n
}

func (m *AuthKeyIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthKeyId != 0 {
		n += 1 + sovZprotoAuthKey(uint64(m.AuthKeyId))
	}
	return n
}

func (m *UserIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovZprotoAuthKey(uint64(m.Result))
	}
	if m.AuthKeyId != 0 {
		n += 1 + sovZprotoAuthKey(uint64(m.AuthKeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovZprotoAuthKey(uint64(m.UserId))
	}
	return n
}

func sovZprotoAuthKey(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozZprotoAuthKey(x uint64) (n int) {
	return sovZprotoAuthKey(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AuthKeyMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZprotoAuthKey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthKeyMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthKeyMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoAuthKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZprotoAuthKey
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZprotoAuthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = append(m.Nonce[:0], dAtA[iNdEx:postIndex]...)
			if m.Nonce == nil {
				m.Nonce = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerNonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoAuthKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZprotoAuthKey
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZprotoAuthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerNonce = append(m.ServerNonce[:0], dAtA[iNdEx:postIndex]...)
			if m.ServerNonce == nil {
				m.ServerNonce = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewNonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoAuthKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZprotoAuthKey
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZprotoAuthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewNonce = append(m.NewNonce[:0], dAtA[iNdEx:postIndex]...)
			if m.NewNonce == nil {
				m.NewNonce = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoAuthKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZprotoAuthKey
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZprotoAuthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.A = append(m.A[:0], dAtA[iNdEx:postIndex]...)
			if m.A == nil {
				m.A = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field P", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoAuthKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZprotoAuthKey
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZprotoAuthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.P = append(m.P[:0], dAtA[iNdEx:postIndex]...)
			if m.P == nil {
				m.P = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoAuthKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoAuthKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZprotoAuthKey
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZprotoAuthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthKey = append(m.AuthKey[:0], dAtA[iNdEx:postIndex]...)
			if m.AuthKey == nil {
				m.AuthKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZprotoAuthKey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZprotoAuthKey
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZprotoAuthKey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZprotoAuthKey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoAuthKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZprotoAuthKey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZprotoAuthKey
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZprotoAuthKey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthKeyData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZprotoAuthKey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthKeyData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthKeyData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoAuthKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoAuthKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoAuthKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZprotoAuthKey
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZprotoAuthKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthKey = append(m.AuthKey[:0], dAtA[iNdEx:postIndex]...)
			if m.AuthKey == nil {
				m.AuthKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZprotoAuthKey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZprotoAuthKey
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZprotoAuthKey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthKeyIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZprotoAuthKey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthKeyIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthKeyIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoAuthKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZprotoAuthKey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZprotoAuthKey
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZprotoAuthKey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZprotoAuthKey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoAuthKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoAuthKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoAuthKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZprotoAuthKey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZprotoAuthKey
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZprotoAuthKey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZprotoAuthKey(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZprotoAuthKey
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZprotoAuthKey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZprotoAuthKey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthZprotoAuthKey
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupZprotoAuthKey
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthZprotoAuthKey
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthZprotoAuthKey        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZprotoAuthKey          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupZprotoAuthKey = fmt.Errorf("proto: unexpected end of group")
)
