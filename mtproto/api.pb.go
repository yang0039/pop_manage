// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package mtproto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

///////////////////////////////////////////////////////////////////////////////
// coinMessage <--
//  + TL_coinMessage
//
type CoinMessage_Data struct {
	Jsonstr string `protobuf:"bytes,1,opt,name=jsonstr,proto3" json:"jsonstr,omitempty"`
}

func (m *CoinMessage_Data) Reset()         { *m = CoinMessage_Data{} }
func (m *CoinMessage_Data) String() string { return proto.CompactTextString(m) }
func (*CoinMessage_Data) ProtoMessage()    {}
func (*CoinMessage_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *CoinMessage_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinMessage_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinMessage_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinMessage_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinMessage_Data.Merge(m, src)
}
func (m *CoinMessage_Data) XXX_Size() int {
	return m.Size()
}
func (m *CoinMessage_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinMessage_Data.DiscardUnknown(m)
}

var xxx_messageInfo_CoinMessage_Data proto.InternalMessageInfo

func (m *CoinMessage_Data) GetJsonstr() string {
	if m != nil {
		return m.Jsonstr
	}
	return ""
}

type CoinMessage struct {
	Constructor TLConstructor     `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Data2       *CoinMessage_Data `protobuf:"bytes,2,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (m *CoinMessage) Reset()         { *m = CoinMessage{} }
func (m *CoinMessage) String() string { return proto.CompactTextString(m) }
func (*CoinMessage) ProtoMessage()    {}
func (*CoinMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *CoinMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinMessage.Merge(m, src)
}
func (m *CoinMessage) XXX_Size() int {
	return m.Size()
}
func (m *CoinMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinMessage.DiscardUnknown(m)
}

var xxx_messageInfo_CoinMessage proto.InternalMessageInfo

func (m *CoinMessage) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (m *CoinMessage) GetData2() *CoinMessage_Data {
	if m != nil {
		return m.Data2
	}
	return nil
}

// coinMessage#9703c3e1 jsonstr:string = coinMessage;
type TLCoinMessage struct {
	Data2 *CoinMessage_Data `protobuf:"bytes,2,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (m *TLCoinMessage) Reset()         { *m = TLCoinMessage{} }
func (m *TLCoinMessage) String() string { return proto.CompactTextString(m) }
func (*TLCoinMessage) ProtoMessage()    {}
func (*TLCoinMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *TLCoinMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLCoinMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLCoinMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLCoinMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLCoinMessage.Merge(m, src)
}
func (m *TLCoinMessage) XXX_Size() int {
	return m.Size()
}
func (m *TLCoinMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TLCoinMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TLCoinMessage proto.InternalMessageInfo

func (m *TLCoinMessage) GetData2() *CoinMessage_Data {
	if m != nil {
		return m.Data2
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// winkConfig <--
//  + TL_winkConfig
//
type WinkConfig_Data struct {
	NewChannel *Bool `protobuf:"bytes,1,opt,name=new_channel,json=newChannel,proto3" json:"new_channel,omitempty"`
	SuperGroup *Bool `protobuf:"bytes,2,opt,name=super_group,json=superGroup,proto3" json:"super_group,omitempty"`
}

func (m *WinkConfig_Data) Reset()         { *m = WinkConfig_Data{} }
func (m *WinkConfig_Data) String() string { return proto.CompactTextString(m) }
func (*WinkConfig_Data) ProtoMessage()    {}
func (*WinkConfig_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *WinkConfig_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WinkConfig_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WinkConfig_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WinkConfig_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WinkConfig_Data.Merge(m, src)
}
func (m *WinkConfig_Data) XXX_Size() int {
	return m.Size()
}
func (m *WinkConfig_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_WinkConfig_Data.DiscardUnknown(m)
}

var xxx_messageInfo_WinkConfig_Data proto.InternalMessageInfo

func (m *WinkConfig_Data) GetNewChannel() *Bool {
	if m != nil {
		return m.NewChannel
	}
	return nil
}

func (m *WinkConfig_Data) GetSuperGroup() *Bool {
	if m != nil {
		return m.SuperGroup
	}
	return nil
}

type WinkConfig struct {
	Constructor TLConstructor    `protobuf:"varint,1,opt,name=constructor,proto3,enum=mtproto.TLConstructor" json:"constructor,omitempty"`
	Data2       *WinkConfig_Data `protobuf:"bytes,2,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (m *WinkConfig) Reset()         { *m = WinkConfig{} }
func (m *WinkConfig) String() string { return proto.CompactTextString(m) }
func (*WinkConfig) ProtoMessage()    {}
func (*WinkConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}
func (m *WinkConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WinkConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WinkConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WinkConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WinkConfig.Merge(m, src)
}
func (m *WinkConfig) XXX_Size() int {
	return m.Size()
}
func (m *WinkConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_WinkConfig.DiscardUnknown(m)
}

var xxx_messageInfo_WinkConfig proto.InternalMessageInfo

func (m *WinkConfig) GetConstructor() TLConstructor {
	if m != nil {
		return m.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (m *WinkConfig) GetData2() *WinkConfig_Data {
	if m != nil {
		return m.Data2
	}
	return nil
}

// winkConfig#1bdefe9 new_channel:Bool super_group:Bool = winkConfig;
type TLWinkConfig struct {
	Data2 *WinkConfig_Data `protobuf:"bytes,2,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (m *TLWinkConfig) Reset()         { *m = TLWinkConfig{} }
func (m *TLWinkConfig) String() string { return proto.CompactTextString(m) }
func (*TLWinkConfig) ProtoMessage()    {}
func (*TLWinkConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}
func (m *TLWinkConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLWinkConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLWinkConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLWinkConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLWinkConfig.Merge(m, src)
}
func (m *TLWinkConfig) XXX_Size() int {
	return m.Size()
}
func (m *TLWinkConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TLWinkConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TLWinkConfig proto.InternalMessageInfo

func (m *TLWinkConfig) GetData2() *WinkConfig_Data {
	if m != nil {
		return m.Data2
	}
	return nil
}

func init() {
	proto.RegisterType((*CoinMessage_Data)(nil), "mtproto.coinMessage_Data")
	proto.RegisterType((*CoinMessage)(nil), "mtproto.coinMessage")
	proto.RegisterType((*TLCoinMessage)(nil), "mtproto.TL_coinMessage")
	proto.RegisterType((*WinkConfig_Data)(nil), "mtproto.winkConfig_Data")
	proto.RegisterType((*WinkConfig)(nil), "mtproto.winkConfig")
	proto.RegisterType((*TLWinkConfig)(nil), "mtproto.TL_winkConfig")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x90, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0xeb, 0x4a, 0x50, 0xf5, 0x46, 0x2d, 0x28, 0x12, 0x28, 0x64, 0xb0, 0xaa, 0x4c, 0x1d,
	0x90, 0x91, 0xd2, 0x85, 0x0d, 0xd1, 0x22, 0xc1, 0x50, 0x96, 0xa8, 0xbb, 0x65, 0x8c, 0x69, 0x03,
	0xad, 0x1d, 0x6c, 0x97, 0xc2, 0x5b, 0xf0, 0x58, 0x8c, 0x1d, 0x19, 0x51, 0xfb, 0x22, 0x28, 0x71,
	0x7f, 0x42, 0xb7, 0x8a, 0x2d, 0x37, 0xe7, 0xbb, 0xe7, 0xdc, 0x63, 0xa8, 0xb3, 0x2c, 0x25, 0x99,
	0x56, 0x56, 0xf9, 0xb5, 0x89, 0x2d, 0x3e, 0xc2, 0x13, 0xc3, 0x47, 0x62, 0xc2, 0x88, 0x1d, 0x13,
	0xae, 0x79, 0x27, 0x76, 0x7a, 0x18, 0x96, 0x7e, 0x2b, 0x2d, 0xa8, 0xfd, 0xc8, 0x84, 0x71, 0x5a,
	0x74, 0x0e, 0xc7, 0x5c, 0xa5, 0xf2, 0x5e, 0x18, 0xc3, 0x86, 0x82, 0xde, 0x30, 0xcb, 0xfc, 0x00,
	0x6a, 0xcf, 0x46, 0x49, 0x63, 0x75, 0x80, 0x5a, 0xa8, 0x5d, 0x4f, 0xd6, 0x63, 0xf4, 0x0e, 0x5e,
	0x89, 0xf6, 0x2f, 0xf3, 0x31, 0x17, 0xa6, 0xdc, 0x2a, 0x07, 0x37, 0xe3, 0x53, 0xb2, 0x3a, 0x87,
	0x0c, 0xfa, 0xbd, 0xad, 0x9a, 0x94, 0x51, 0xff, 0x02, 0x0e, 0x1e, 0x99, 0x65, 0x71, 0x50, 0x6d,
	0xa1, 0xb6, 0x17, 0x9f, 0x6d, 0x76, 0x76, 0x8f, 0x49, 0x1c, 0x17, 0x5d, 0x43, 0x73, 0xd0, 0xa7,
	0xe5, 0xf0, 0xbd, 0x2d, 0x5e, 0xe1, 0x68, 0x96, 0xca, 0x97, 0x9e, 0x92, 0x4f, 0xe9, 0xd0, 0x35,
	0x25, 0xe0, 0x49, 0x31, 0xa3, 0x7c, 0xc4, 0xa4, 0x14, 0xe3, 0xa2, 0x80, 0x17, 0x37, 0x36, 0x4e,
	0x5d, 0xa5, 0xc6, 0x09, 0x48, 0x31, 0xeb, 0x39, 0x20, 0xe7, 0xcd, 0x34, 0x13, 0x9a, 0x0e, 0xb5,
	0x9a, 0x66, 0xab, 0xe4, 0x5d, 0xbe, 0x20, 0x6e, 0x73, 0x20, 0x7a, 0x03, 0xd8, 0x46, 0xfe, 0xe3,
	0xb9, 0xc8, 0xdf, 0xae, 0xc1, 0x66, 0x67, 0xa7, 0xd0, 0xba, 0xea, 0x15, 0x34, 0x06, 0x7d, 0x5a,
	0x8a, 0xde, 0xd3, 0xa0, 0x1b, 0x7e, 0x2d, 0x30, 0x9a, 0x2f, 0x30, 0xfa, 0x59, 0x60, 0xf4, 0xb9,
	0xc4, 0x95, 0xf9, 0x12, 0x57, 0xbe, 0x97, 0xb8, 0x72, 0x57, 0x7d, 0x38, 0x2c, 0x36, 0x3b, 0xbf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x86, 0x6e, 0x58, 0x20, 0x82, 0x02, 0x00, 0x00,
}

func (m *CoinMessage_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinMessage_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinMessage_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Jsonstr) > 0 {
		i -= len(m.Jsonstr)
		copy(dAtA[i:], m.Jsonstr)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Jsonstr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CoinMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Constructor != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLCoinMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLCoinMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLCoinMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *WinkConfig_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WinkConfig_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WinkConfig_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SuperGroup != nil {
		{
			size, err := m.SuperGroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.NewChannel != nil {
		{
			size, err := m.NewChannel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WinkConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WinkConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WinkConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Constructor != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Constructor))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLWinkConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLWinkConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLWinkConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data2 != nil {
		{
			size, err := m.Data2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CoinMessage_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Jsonstr)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *CoinMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovApi(uint64(m.Constructor))
	}
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *TLCoinMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *WinkConfig_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewChannel != nil {
		l = m.NewChannel.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SuperGroup != nil {
		l = m.SuperGroup.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *WinkConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Constructor != 0 {
		n += 1 + sovApi(uint64(m.Constructor))
	}
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *TLWinkConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data2 != nil {
		l = m.Data2.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CoinMessage_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: coinMessage_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: coinMessage_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jsonstr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jsonstr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: coinMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: coinMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &CoinMessage_Data{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLCoinMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_coinMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_coinMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &CoinMessage_Data{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WinkConfig_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: winkConfig_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: winkConfig_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewChannel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewChannel == nil {
				m.NewChannel = &Bool{}
			}
			if err := m.NewChannel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuperGroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SuperGroup == nil {
				m.SuperGroup = &Bool{}
			}
			if err := m.SuperGroup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WinkConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: winkConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: winkConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constructor", wireType)
			}
			m.Constructor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Constructor |= TLConstructor(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &WinkConfig_Data{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLWinkConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_winkConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_winkConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data2 == nil {
				m.Data2 = &WinkConfig_Data{}
			}
			if err := m.Data2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
