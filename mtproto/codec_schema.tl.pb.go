// ConstructorList
// RequestList

package mtproto

import (
    // "encoding/binary"
    "fmt"
    // "github.com/golang/protobuf/proto"
    "pop-api/baselib/logger"
)

type newTLObjectFunc func() TLObject

var registers2 = map[int32]newTLObjectFunc{
    int32(TLConstructor_CRC32_message2) : func() (TLObject) { return &TLMessage2{} },
    int32(TLConstructor_CRC32_msg_container) : func() (TLObject) { return &TLMsgContainer{} },
    int32(TLConstructor_CRC32_msg_copy) : func() (TLObject) { return &TLMsgCopy{} },
    int32(TLConstructor_CRC32_gzip_packed) : func() (TLObject) { return &TLGzipPacked{} },
    int32(TLConstructor_CRC32_rpc_result) : func() (TLObject) { return &TLRpcResult{} },
    int32(TLConstructor_CRC32_resPQ):  func() TLObject { return NewTLResPQ() },
    int32(TLConstructor_CRC32_p_q_inner_data):  func() TLObject { return NewTLPQInnerData() },
    int32(TLConstructor_CRC32_p_q_inner_data_dc):  func() TLObject { return NewTLPQInnerDataDc() },
    int32(TLConstructor_CRC32_p_q_inner_data_temp):  func() TLObject { return NewTLPQInnerDataTemp() },
    int32(TLConstructor_CRC32_p_q_inner_data_temp_dc):  func() TLObject { return NewTLPQInnerDataTempDc() },
    int32(TLConstructor_CRC32_bind_auth_key_inner):  func() TLObject { return NewTLBindAuthKeyInner() },
    int32(TLConstructor_CRC32_server_DH_params_fail):  func() TLObject { return NewTLServer_DHParamsFail() },
    int32(TLConstructor_CRC32_server_DH_params_ok):  func() TLObject { return NewTLServer_DHParamsOk() },
    int32(TLConstructor_CRC32_server_DH_inner_data):  func() TLObject { return NewTLServer_DHInnerData() },
    int32(TLConstructor_CRC32_client_DH_inner_data):  func() TLObject { return NewTLClient_DHInnerData() },
    int32(TLConstructor_CRC32_dh_gen_ok):  func() TLObject { return NewTLDhGenOk() },
    int32(TLConstructor_CRC32_dh_gen_retry):  func() TLObject { return NewTLDhGenRetry() },
    int32(TLConstructor_CRC32_dh_gen_fail):  func() TLObject { return NewTLDhGenFail() },
    int32(TLConstructor_CRC32_destroy_auth_key_ok):  func() TLObject { return NewTLDestroyAuthKeyOk() },
    int32(TLConstructor_CRC32_destroy_auth_key_none):  func() TLObject { return NewTLDestroyAuthKeyNone() },
    int32(TLConstructor_CRC32_destroy_auth_key_fail):  func() TLObject { return NewTLDestroyAuthKeyFail() },
    int32(TLConstructor_CRC32_req_pq):  func() TLObject { return NewTLReqPq() },
    int32(TLConstructor_CRC32_req_pq_multi):  func() TLObject { return NewTLReqPqMulti() },
    int32(TLConstructor_CRC32_req_DH_params):  func() TLObject { return NewTLReq_DHParams() },
    int32(TLConstructor_CRC32_set_client_DH_params):  func() TLObject { return NewTLSetClient_DHParams() },
    int32(TLConstructor_CRC32_destroy_auth_key):  func() TLObject { return NewTLDestroyAuthKey() },
    int32(TLConstructor_CRC32_msgs_ack):  func() TLObject { return NewTLMsgsAck() },
    int32(TLConstructor_CRC32_bad_msg_notification):  func() TLObject { return NewTLBadMsgNotification() },
    int32(TLConstructor_CRC32_bad_server_salt):  func() TLObject { return NewTLBadServerSalt() },
    int32(TLConstructor_CRC32_msgs_state_req):  func() TLObject { return NewTLMsgsStateReq() },
    int32(TLConstructor_CRC32_msgs_state_info):  func() TLObject { return NewTLMsgsStateInfo() },
    int32(TLConstructor_CRC32_msgs_all_info):  func() TLObject { return NewTLMsgsAllInfo() },
    int32(TLConstructor_CRC32_msg_detailed_info):  func() TLObject { return NewTLMsgDetailedInfo() },
    int32(TLConstructor_CRC32_msg_new_detailed_info):  func() TLObject { return NewTLMsgNewDetailedInfo() },
    int32(TLConstructor_CRC32_msg_resend_req):  func() TLObject { return NewTLMsgResendReq() },
    int32(TLConstructor_CRC32_rpc_error):  func() TLObject { return NewTLRpcError() },
    int32(TLConstructor_CRC32_rpc_answer_unknown):  func() TLObject { return NewTLRpcAnswerUnknown() },
    int32(TLConstructor_CRC32_rpc_answer_dropped_running):  func() TLObject { return NewTLRpcAnswerDroppedRunning() },
    int32(TLConstructor_CRC32_rpc_answer_dropped):  func() TLObject { return NewTLRpcAnswerDropped() },
    int32(TLConstructor_CRC32_future_salt):  func() TLObject { return NewTLFutureSalt() },
    int32(TLConstructor_CRC32_future_salts):  func() TLObject { return NewTLFutureSalts() },
    int32(TLConstructor_CRC32_pong):  func() TLObject { return NewTLPong() },
    int32(TLConstructor_CRC32_destroy_session_ok):  func() TLObject { return NewTLDestroySessionOk() },
    int32(TLConstructor_CRC32_destroy_session_none):  func() TLObject { return NewTLDestroySessionNone() },
    int32(TLConstructor_CRC32_new_session_created):  func() TLObject { return NewTLNewSessionCreated() },
    int32(TLConstructor_CRC32_http_wait):  func() TLObject { return NewTLHttpWait() },
    int32(TLConstructor_CRC32_ipPort):  func() TLObject { return NewTLIpPort() },
    int32(TLConstructor_CRC32_help_configSimple):  func() TLObject { return NewTLHelpConfigSimple() },
    int32(TLConstructor_CRC32_ipPortSecret):  func() TLObject { return NewTLIpPortSecret() },
    int32(TLConstructor_CRC32_accessPointRule):  func() TLObject { return NewTLAccessPointRule() },
    int32(TLConstructor_CRC32_help_configSimple114):  func() TLObject { return NewTLHelpConfigSimple114() },
    int32(TLConstructor_CRC32_tlsClientHello):  func() TLObject { return NewTLTlsClientHello() },
    int32(TLConstructor_CRC32_tlsBlockString):  func() TLObject { return NewTLTlsBlockString() },
    int32(TLConstructor_CRC32_tlsBlockRandom):  func() TLObject { return NewTLTlsBlockRandom() },
    int32(TLConstructor_CRC32_tlsBlockZero):  func() TLObject { return NewTLTlsBlockZero() },
    int32(TLConstructor_CRC32_tlsBlockDomain):  func() TLObject { return NewTLTlsBlockDomain() },
    int32(TLConstructor_CRC32_tlsBlockGrease):  func() TLObject { return NewTLTlsBlockGrease() },
    int32(TLConstructor_CRC32_tlsBlockPublicKey):  func() TLObject { return NewTLTlsBlockPublicKey() },
    int32(TLConstructor_CRC32_tlsBlockScope):  func() TLObject { return NewTLTlsBlockScope() },
    int32(TLConstructor_CRC32_rpc_drop_answer):  func() TLObject { return NewTLRpcDropAnswer() },
    int32(TLConstructor_CRC32_get_future_salts):  func() TLObject { return NewTLGetFutureSalts() },
    int32(TLConstructor_CRC32_ping):  func() TLObject { return NewTLPing() },
    int32(TLConstructor_CRC32_ping_delay_disconnect):  func() TLObject { return NewTLPingDelayDisconnect() },
    int32(TLConstructor_CRC32_destroy_session):  func() TLObject { return NewTLDestroySession() },
    int32(TLConstructor_CRC32_contest_saveDeveloperInfo):  func() TLObject { return NewTLContestSaveDeveloperInfo() },
    int32(TLConstructor_CRC32_boolFalse):  func() TLObject { return NewTLBoolFalse() },
    int32(TLConstructor_CRC32_boolTrue):  func() TLObject { return NewTLBoolTrue() },
    int32(TLConstructor_CRC32_true):  func() TLObject { return NewTLTrue() },
    int32(TLConstructor_CRC32_error):  func() TLObject { return NewTLError() },
    int32(TLConstructor_CRC32_null):  func() TLObject { return NewTLNull() },
    int32(TLConstructor_CRC32_intResult):  func() TLObject { return NewTLIntResult() },
    int32(TLConstructor_CRC32_inputPeerEmpty):  func() TLObject { return NewTLInputPeerEmpty() },
    int32(TLConstructor_CRC32_inputPeerSelf):  func() TLObject { return NewTLInputPeerSelf() },
    int32(TLConstructor_CRC32_inputPeerChat):  func() TLObject { return NewTLInputPeerChat() },
    int32(TLConstructor_CRC32_inputPeerUser):  func() TLObject { return NewTLInputPeerUser() },
    int32(TLConstructor_CRC32_inputPeerChannel):  func() TLObject { return NewTLInputPeerChannel() },
    int32(TLConstructor_CRC32_inputUserEmpty):  func() TLObject { return NewTLInputUserEmpty() },
    int32(TLConstructor_CRC32_inputUserSelf):  func() TLObject { return NewTLInputUserSelf() },
    int32(TLConstructor_CRC32_inputUser):  func() TLObject { return NewTLInputUser() },
    int32(TLConstructor_CRC32_inputPhoneContact):  func() TLObject { return NewTLInputPhoneContact() },
    int32(TLConstructor_CRC32_inputFile):  func() TLObject { return NewTLInputFile() },
    int32(TLConstructor_CRC32_inputFileBig):  func() TLObject { return NewTLInputFileBig() },
    int32(TLConstructor_CRC32_inputMediaEmpty):  func() TLObject { return NewTLInputMediaEmpty() },
    int32(TLConstructor_CRC32_inputMediaUploadedPhoto):  func() TLObject { return NewTLInputMediaUploadedPhoto() },
    int32(TLConstructor_CRC32_inputMediaPhoto):  func() TLObject { return NewTLInputMediaPhoto() },
    int32(TLConstructor_CRC32_inputMediaGeoPoint):  func() TLObject { return NewTLInputMediaGeoPoint() },
    int32(TLConstructor_CRC32_inputMediaContact):  func() TLObject { return NewTLInputMediaContact() },
    int32(TLConstructor_CRC32_inputMediaUploadedDocument):  func() TLObject { return NewTLInputMediaUploadedDocument() },
    int32(TLConstructor_CRC32_inputMediaDocument):  func() TLObject { return NewTLInputMediaDocument() },
    int32(TLConstructor_CRC32_inputMediaVenue):  func() TLObject { return NewTLInputMediaVenue() },
    int32(TLConstructor_CRC32_inputMediaGifExternal):  func() TLObject { return NewTLInputMediaGifExternal() },
    int32(TLConstructor_CRC32_inputMediaPhotoExternal):  func() TLObject { return NewTLInputMediaPhotoExternal() },
    int32(TLConstructor_CRC32_inputMediaDocumentExternal):  func() TLObject { return NewTLInputMediaDocumentExternal() },
    int32(TLConstructor_CRC32_inputMediaGame):  func() TLObject { return NewTLInputMediaGame() },
    int32(TLConstructor_CRC32_inputMediaInvoice):  func() TLObject { return NewTLInputMediaInvoice() },
    int32(TLConstructor_CRC32_inputChatPhotoEmpty):  func() TLObject { return NewTLInputChatPhotoEmpty() },
    int32(TLConstructor_CRC32_inputChatUploadedPhoto):  func() TLObject { return NewTLInputChatUploadedPhoto() },
    int32(TLConstructor_CRC32_inputChatPhoto):  func() TLObject { return NewTLInputChatPhoto() },
    int32(TLConstructor_CRC32_inputGeoPointEmpty):  func() TLObject { return NewTLInputGeoPointEmpty() },
    int32(TLConstructor_CRC32_inputGeoPoint):  func() TLObject { return NewTLInputGeoPoint() },
    int32(TLConstructor_CRC32_inputPhotoEmpty):  func() TLObject { return NewTLInputPhotoEmpty() },
    int32(TLConstructor_CRC32_inputPhoto):  func() TLObject { return NewTLInputPhoto() },
    int32(TLConstructor_CRC32_inputFileLocation):  func() TLObject { return NewTLInputFileLocation() },
    int32(TLConstructor_CRC32_inputEncryptedFileLocation):  func() TLObject { return NewTLInputEncryptedFileLocation() },
    int32(TLConstructor_CRC32_inputDocumentFileLocation):  func() TLObject { return NewTLInputDocumentFileLocation() },
    int32(TLConstructor_CRC32_inputAppEvent):  func() TLObject { return NewTLInputAppEvent() },
    int32(TLConstructor_CRC32_peerUser):  func() TLObject { return NewTLPeerUser() },
    int32(TLConstructor_CRC32_peerChat):  func() TLObject { return NewTLPeerChat() },
    int32(TLConstructor_CRC32_peerChannel):  func() TLObject { return NewTLPeerChannel() },
    int32(TLConstructor_CRC32_storage_fileUnknown):  func() TLObject { return NewTLStorageFileUnknown() },
    int32(TLConstructor_CRC32_storage_filePartial):  func() TLObject { return NewTLStorageFilePartial() },
    int32(TLConstructor_CRC32_storage_fileJpeg):  func() TLObject { return NewTLStorageFileJpeg() },
    int32(TLConstructor_CRC32_storage_fileGif):  func() TLObject { return NewTLStorageFileGif() },
    int32(TLConstructor_CRC32_storage_filePng):  func() TLObject { return NewTLStorageFilePng() },
    int32(TLConstructor_CRC32_storage_filePdf):  func() TLObject { return NewTLStorageFilePdf() },
    int32(TLConstructor_CRC32_storage_fileMp3):  func() TLObject { return NewTLStorageFileMp3() },
    int32(TLConstructor_CRC32_storage_fileMov):  func() TLObject { return NewTLStorageFileMov() },
    int32(TLConstructor_CRC32_storage_fileMp4):  func() TLObject { return NewTLStorageFileMp4() },
    int32(TLConstructor_CRC32_storage_fileWebp):  func() TLObject { return NewTLStorageFileWebp() },
    int32(TLConstructor_CRC32_fileLocationUnavailable):  func() TLObject { return NewTLFileLocationUnavailable() },
    int32(TLConstructor_CRC32_fileLocation):  func() TLObject { return NewTLFileLocation() },
    int32(TLConstructor_CRC32_userEmpty):  func() TLObject { return NewTLUserEmpty() },
    int32(TLConstructor_CRC32_user):  func() TLObject { return NewTLUser() },
    int32(TLConstructor_CRC32_userProfilePhotoEmpty):  func() TLObject { return NewTLUserProfilePhotoEmpty() },
    int32(TLConstructor_CRC32_userProfilePhoto):  func() TLObject { return NewTLUserProfilePhoto() },
    int32(TLConstructor_CRC32_userStatusEmpty):  func() TLObject { return NewTLUserStatusEmpty() },
    int32(TLConstructor_CRC32_userStatusOnline):  func() TLObject { return NewTLUserStatusOnline() },
    int32(TLConstructor_CRC32_userStatusOffline):  func() TLObject { return NewTLUserStatusOffline() },
    int32(TLConstructor_CRC32_userStatusRecently):  func() TLObject { return NewTLUserStatusRecently() },
    int32(TLConstructor_CRC32_userStatusLastWeek):  func() TLObject { return NewTLUserStatusLastWeek() },
    int32(TLConstructor_CRC32_userStatusLastMonth):  func() TLObject { return NewTLUserStatusLastMonth() },
    int32(TLConstructor_CRC32_chatEmpty):  func() TLObject { return NewTLChatEmpty() },
    int32(TLConstructor_CRC32_chat):  func() TLObject { return NewTLChat() },
    int32(TLConstructor_CRC32_chatForbidden):  func() TLObject { return NewTLChatForbidden() },
    int32(TLConstructor_CRC32_channelForbidden):  func() TLObject { return NewTLChannelForbidden() },
    int32(TLConstructor_CRC32_chatFull):  func() TLObject { return NewTLChatFull() },
    int32(TLConstructor_CRC32_channel):  func() TLObject { return NewTLChannel() },
    int32(TLConstructor_CRC32_channelFull):  func() TLObject { return NewTLChannelFull() },
    int32(TLConstructor_CRC32_chatParticipant):  func() TLObject { return NewTLChatParticipant() },
    int32(TLConstructor_CRC32_chatParticipantCreator):  func() TLObject { return NewTLChatParticipantCreator() },
    int32(TLConstructor_CRC32_chatParticipantAdmin):  func() TLObject { return NewTLChatParticipantAdmin() },
    int32(TLConstructor_CRC32_chatParticipantsForbidden):  func() TLObject { return NewTLChatParticipantsForbidden() },
    int32(TLConstructor_CRC32_chatParticipants):  func() TLObject { return NewTLChatParticipants() },
    int32(TLConstructor_CRC32_chatPhotoEmpty):  func() TLObject { return NewTLChatPhotoEmpty() },
    int32(TLConstructor_CRC32_chatPhoto):  func() TLObject { return NewTLChatPhoto() },
    int32(TLConstructor_CRC32_messageEmpty):  func() TLObject { return NewTLMessageEmpty() },
    int32(TLConstructor_CRC32_message):  func() TLObject { return NewTLMessage() },
    int32(TLConstructor_CRC32_messageService):  func() TLObject { return NewTLMessageService() },
    int32(TLConstructor_CRC32_messageMediaEmpty):  func() TLObject { return NewTLMessageMediaEmpty() },
    int32(TLConstructor_CRC32_messageMediaPhoto):  func() TLObject { return NewTLMessageMediaPhoto() },
    int32(TLConstructor_CRC32_messageMediaGeo):  func() TLObject { return NewTLMessageMediaGeo() },
    int32(TLConstructor_CRC32_messageMediaContact):  func() TLObject { return NewTLMessageMediaContact() },
    int32(TLConstructor_CRC32_messageMediaUnsupported):  func() TLObject { return NewTLMessageMediaUnsupported() },
    int32(TLConstructor_CRC32_messageMediaDocument):  func() TLObject { return NewTLMessageMediaDocument() },
    int32(TLConstructor_CRC32_messageMediaWebPage):  func() TLObject { return NewTLMessageMediaWebPage() },
    int32(TLConstructor_CRC32_messageMediaVenue):  func() TLObject { return NewTLMessageMediaVenue() },
    int32(TLConstructor_CRC32_messageMediaGame):  func() TLObject { return NewTLMessageMediaGame() },
    int32(TLConstructor_CRC32_messageMediaInvoice):  func() TLObject { return NewTLMessageMediaInvoice() },
    int32(TLConstructor_CRC32_messageActionEmpty):  func() TLObject { return NewTLMessageActionEmpty() },
    int32(TLConstructor_CRC32_messageActionChatCreate):  func() TLObject { return NewTLMessageActionChatCreate() },
    int32(TLConstructor_CRC32_messageActionChatEditTitle):  func() TLObject { return NewTLMessageActionChatEditTitle() },
    int32(TLConstructor_CRC32_messageActionChatEditPhoto):  func() TLObject { return NewTLMessageActionChatEditPhoto() },
    int32(TLConstructor_CRC32_messageActionChatDeletePhoto):  func() TLObject { return NewTLMessageActionChatDeletePhoto() },
    int32(TLConstructor_CRC32_messageActionChatAddUser):  func() TLObject { return NewTLMessageActionChatAddUser() },
    int32(TLConstructor_CRC32_messageActionChatDeleteUser):  func() TLObject { return NewTLMessageActionChatDeleteUser() },
    int32(TLConstructor_CRC32_messageActionChatJoinedByLink):  func() TLObject { return NewTLMessageActionChatJoinedByLink() },
    int32(TLConstructor_CRC32_messageActionChannelCreate):  func() TLObject { return NewTLMessageActionChannelCreate() },
    int32(TLConstructor_CRC32_messageActionChatMigrateTo):  func() TLObject { return NewTLMessageActionChatMigrateTo() },
    int32(TLConstructor_CRC32_messageActionChannelMigrateFrom):  func() TLObject { return NewTLMessageActionChannelMigrateFrom() },
    int32(TLConstructor_CRC32_messageActionPinMessage):  func() TLObject { return NewTLMessageActionPinMessage() },
    int32(TLConstructor_CRC32_messageActionHistoryClear):  func() TLObject { return NewTLMessageActionHistoryClear() },
    int32(TLConstructor_CRC32_messageActionGameScore):  func() TLObject { return NewTLMessageActionGameScore() },
    int32(TLConstructor_CRC32_messageActionPaymentSentMe):  func() TLObject { return NewTLMessageActionPaymentSentMe() },
    int32(TLConstructor_CRC32_messageActionPaymentSent):  func() TLObject { return NewTLMessageActionPaymentSent() },
    int32(TLConstructor_CRC32_messageActionPhoneCall):  func() TLObject { return NewTLMessageActionPhoneCall() },
    int32(TLConstructor_CRC32_messageActionScreenshotTaken):  func() TLObject { return NewTLMessageActionScreenshotTaken() },
    int32(TLConstructor_CRC32_dialog):  func() TLObject { return NewTLDialog() },
    int32(TLConstructor_CRC32_photoEmpty):  func() TLObject { return NewTLPhotoEmpty() },
    int32(TLConstructor_CRC32_photo):  func() TLObject { return NewTLPhoto() },
    int32(TLConstructor_CRC32_photoSizeEmpty):  func() TLObject { return NewTLPhotoSizeEmpty() },
    int32(TLConstructor_CRC32_photoSize):  func() TLObject { return NewTLPhotoSize() },
    int32(TLConstructor_CRC32_photoCachedSize):  func() TLObject { return NewTLPhotoCachedSize() },
    int32(TLConstructor_CRC32_geoPointEmpty):  func() TLObject { return NewTLGeoPointEmpty() },
    int32(TLConstructor_CRC32_geoPoint):  func() TLObject { return NewTLGeoPoint() },
    int32(TLConstructor_CRC32_auth_checkedPhone):  func() TLObject { return NewTLAuthCheckedPhone() },
    int32(TLConstructor_CRC32_auth_sentCode):  func() TLObject { return NewTLAuthSentCode() },
    int32(TLConstructor_CRC32_auth_authorization):  func() TLObject { return NewTLAuthAuthorization() },
    int32(TLConstructor_CRC32_auth_exportedAuthorization):  func() TLObject { return NewTLAuthExportedAuthorization() },
    int32(TLConstructor_CRC32_inputNotifyPeer):  func() TLObject { return NewTLInputNotifyPeer() },
    int32(TLConstructor_CRC32_inputNotifyUsers):  func() TLObject { return NewTLInputNotifyUsers() },
    int32(TLConstructor_CRC32_inputNotifyChats):  func() TLObject { return NewTLInputNotifyChats() },
    int32(TLConstructor_CRC32_inputNotifyAll):  func() TLObject { return NewTLInputNotifyAll() },
    int32(TLConstructor_CRC32_inputPeerNotifyEventsEmpty):  func() TLObject { return NewTLInputPeerNotifyEventsEmpty() },
    int32(TLConstructor_CRC32_inputPeerNotifyEventsAll):  func() TLObject { return NewTLInputPeerNotifyEventsAll() },
    int32(TLConstructor_CRC32_inputPeerNotifySettings):  func() TLObject { return NewTLInputPeerNotifySettings() },
    int32(TLConstructor_CRC32_peerNotifyEventsEmpty):  func() TLObject { return NewTLPeerNotifyEventsEmpty() },
    int32(TLConstructor_CRC32_peerNotifyEventsAll):  func() TLObject { return NewTLPeerNotifyEventsAll() },
    int32(TLConstructor_CRC32_peerNotifySettingsEmpty):  func() TLObject { return NewTLPeerNotifySettingsEmpty() },
    int32(TLConstructor_CRC32_peerNotifySettings):  func() TLObject { return NewTLPeerNotifySettings() },
    int32(TLConstructor_CRC32_peerSettings):  func() TLObject { return NewTLPeerSettings() },
    int32(TLConstructor_CRC32_wallPaper):  func() TLObject { return NewTLWallPaper() },
    int32(TLConstructor_CRC32_wallPaperSolid):  func() TLObject { return NewTLWallPaperSolid() },
    int32(TLConstructor_CRC32_inputReportReasonSpam):  func() TLObject { return NewTLInputReportReasonSpam() },
    int32(TLConstructor_CRC32_inputReportReasonViolence):  func() TLObject { return NewTLInputReportReasonViolence() },
    int32(TLConstructor_CRC32_inputReportReasonPornography):  func() TLObject { return NewTLInputReportReasonPornography() },
    int32(TLConstructor_CRC32_inputReportReasonOther):  func() TLObject { return NewTLInputReportReasonOther() },
    int32(TLConstructor_CRC32_userFull):  func() TLObject { return NewTLUserFull() },
    int32(TLConstructor_CRC32_contact):  func() TLObject { return NewTLContact() },
    int32(TLConstructor_CRC32_importedContact):  func() TLObject { return NewTLImportedContact() },
    int32(TLConstructor_CRC32_contactBlocked):  func() TLObject { return NewTLContactBlocked() },
    int32(TLConstructor_CRC32_contactStatus):  func() TLObject { return NewTLContactStatus() },
    int32(TLConstructor_CRC32_contacts_link):  func() TLObject { return NewTLContactsLink() },
    int32(TLConstructor_CRC32_contacts_contactsNotModified):  func() TLObject { return NewTLContactsContactsNotModified() },
    int32(TLConstructor_CRC32_contacts_contacts):  func() TLObject { return NewTLContactsContacts() },
    int32(TLConstructor_CRC32_contacts_importedContacts):  func() TLObject { return NewTLContactsImportedContacts() },
    int32(TLConstructor_CRC32_contacts_blocked):  func() TLObject { return NewTLContactsBlocked() },
    int32(TLConstructor_CRC32_contacts_blockedSlice):  func() TLObject { return NewTLContactsBlockedSlice() },
    int32(TLConstructor_CRC32_messages_dialogs):  func() TLObject { return NewTLMessagesDialogs() },
    int32(TLConstructor_CRC32_messages_dialogsSlice):  func() TLObject { return NewTLMessagesDialogsSlice() },
    int32(TLConstructor_CRC32_messages_messages):  func() TLObject { return NewTLMessagesMessages() },
    int32(TLConstructor_CRC32_messages_messagesSlice):  func() TLObject { return NewTLMessagesMessagesSlice() },
    int32(TLConstructor_CRC32_messages_channelMessages):  func() TLObject { return NewTLMessagesChannelMessages() },
    int32(TLConstructor_CRC32_messages_chats):  func() TLObject { return NewTLMessagesChats() },
    int32(TLConstructor_CRC32_messages_chatsSlice):  func() TLObject { return NewTLMessagesChatsSlice() },
    int32(TLConstructor_CRC32_messages_chatFull):  func() TLObject { return NewTLMessagesChatFull() },
    int32(TLConstructor_CRC32_messages_affectedHistory):  func() TLObject { return NewTLMessagesAffectedHistory() },
    int32(TLConstructor_CRC32_inputMessagesFilterEmpty):  func() TLObject { return NewTLInputMessagesFilterEmpty() },
    int32(TLConstructor_CRC32_inputMessagesFilterPhotos):  func() TLObject { return NewTLInputMessagesFilterPhotos() },
    int32(TLConstructor_CRC32_inputMessagesFilterVideo):  func() TLObject { return NewTLInputMessagesFilterVideo() },
    int32(TLConstructor_CRC32_inputMessagesFilterPhotoVideo):  func() TLObject { return NewTLInputMessagesFilterPhotoVideo() },
    int32(TLConstructor_CRC32_inputMessagesFilterPhotoVideoDocuments):  func() TLObject { return NewTLInputMessagesFilterPhotoVideoDocuments() },
    int32(TLConstructor_CRC32_inputMessagesFilterDocument):  func() TLObject { return NewTLInputMessagesFilterDocument() },
    int32(TLConstructor_CRC32_inputMessagesFilterUrl):  func() TLObject { return NewTLInputMessagesFilterUrl() },
    int32(TLConstructor_CRC32_inputMessagesFilterGif):  func() TLObject { return NewTLInputMessagesFilterGif() },
    int32(TLConstructor_CRC32_inputMessagesFilterVoice):  func() TLObject { return NewTLInputMessagesFilterVoice() },
    int32(TLConstructor_CRC32_inputMessagesFilterMusic):  func() TLObject { return NewTLInputMessagesFilterMusic() },
    int32(TLConstructor_CRC32_inputMessagesFilterChatPhotos):  func() TLObject { return NewTLInputMessagesFilterChatPhotos() },
    int32(TLConstructor_CRC32_inputMessagesFilterPhoneCalls):  func() TLObject { return NewTLInputMessagesFilterPhoneCalls() },
    int32(TLConstructor_CRC32_inputMessagesFilterRoundVoice):  func() TLObject { return NewTLInputMessagesFilterRoundVoice() },
    int32(TLConstructor_CRC32_inputMessagesFilterRoundVideo):  func() TLObject { return NewTLInputMessagesFilterRoundVideo() },
    int32(TLConstructor_CRC32_inputMessagesFilterMyMentions):  func() TLObject { return NewTLInputMessagesFilterMyMentions() },
    int32(TLConstructor_CRC32_updateNewMessage):  func() TLObject { return NewTLUpdateNewMessage() },
    int32(TLConstructor_CRC32_updateMessageID):  func() TLObject { return NewTLUpdateMessageID() },
    int32(TLConstructor_CRC32_updateDeleteMessages):  func() TLObject { return NewTLUpdateDeleteMessages() },
    int32(TLConstructor_CRC32_updateUserTyping):  func() TLObject { return NewTLUpdateUserTyping() },
    int32(TLConstructor_CRC32_updateChatUserTyping):  func() TLObject { return NewTLUpdateChatUserTyping() },
    int32(TLConstructor_CRC32_updateChatParticipants):  func() TLObject { return NewTLUpdateChatParticipants() },
    int32(TLConstructor_CRC32_updateUserStatus):  func() TLObject { return NewTLUpdateUserStatus() },
    int32(TLConstructor_CRC32_updateUserName):  func() TLObject { return NewTLUpdateUserName() },
    int32(TLConstructor_CRC32_updateUserPhoto):  func() TLObject { return NewTLUpdateUserPhoto() },
    int32(TLConstructor_CRC32_updateContactRegistered):  func() TLObject { return NewTLUpdateContactRegistered() },
    int32(TLConstructor_CRC32_updateContactLink):  func() TLObject { return NewTLUpdateContactLink() },
    int32(TLConstructor_CRC32_updateNewEncryptedMessage):  func() TLObject { return NewTLUpdateNewEncryptedMessage() },
    int32(TLConstructor_CRC32_updateEncryptedChatTyping):  func() TLObject { return NewTLUpdateEncryptedChatTyping() },
    int32(TLConstructor_CRC32_updateEncryption):  func() TLObject { return NewTLUpdateEncryption() },
    int32(TLConstructor_CRC32_updateEncryptedMessagesRead):  func() TLObject { return NewTLUpdateEncryptedMessagesRead() },
    int32(TLConstructor_CRC32_updateChatParticipantAdd):  func() TLObject { return NewTLUpdateChatParticipantAdd() },
    int32(TLConstructor_CRC32_updateChatParticipantDelete):  func() TLObject { return NewTLUpdateChatParticipantDelete() },
    int32(TLConstructor_CRC32_updateDcOptions):  func() TLObject { return NewTLUpdateDcOptions() },
    int32(TLConstructor_CRC32_updateUserBlocked):  func() TLObject { return NewTLUpdateUserBlocked() },
    int32(TLConstructor_CRC32_updateNotifySettings):  func() TLObject { return NewTLUpdateNotifySettings() },
    int32(TLConstructor_CRC32_updateServiceNotification):  func() TLObject { return NewTLUpdateServiceNotification() },
    int32(TLConstructor_CRC32_updatePrivacy):  func() TLObject { return NewTLUpdatePrivacy() },
    int32(TLConstructor_CRC32_updateUserPhone):  func() TLObject { return NewTLUpdateUserPhone() },
    int32(TLConstructor_CRC32_updateReadHistoryInbox):  func() TLObject { return NewTLUpdateReadHistoryInbox() },
    int32(TLConstructor_CRC32_updateReadHistoryOutbox):  func() TLObject { return NewTLUpdateReadHistoryOutbox() },
    int32(TLConstructor_CRC32_updateWebPage):  func() TLObject { return NewTLUpdateWebPage() },
    int32(TLConstructor_CRC32_updateReadMessagesContents):  func() TLObject { return NewTLUpdateReadMessagesContents() },
    int32(TLConstructor_CRC32_updateChannelTooLong):  func() TLObject { return NewTLUpdateChannelTooLong() },
    int32(TLConstructor_CRC32_updateChannel):  func() TLObject { return NewTLUpdateChannel() },
    int32(TLConstructor_CRC32_updateNewChannelMessage):  func() TLObject { return NewTLUpdateNewChannelMessage() },
    int32(TLConstructor_CRC32_updateReadChannelInbox):  func() TLObject { return NewTLUpdateReadChannelInbox() },
    int32(TLConstructor_CRC32_updateDeleteChannelMessages):  func() TLObject { return NewTLUpdateDeleteChannelMessages() },
    int32(TLConstructor_CRC32_updateChannelMessageViews):  func() TLObject { return NewTLUpdateChannelMessageViews() },
    int32(TLConstructor_CRC32_updateChatAdmins):  func() TLObject { return NewTLUpdateChatAdmins() },
    int32(TLConstructor_CRC32_updateChatParticipantAdmin):  func() TLObject { return NewTLUpdateChatParticipantAdmin() },
    int32(TLConstructor_CRC32_updateNewStickerSet):  func() TLObject { return NewTLUpdateNewStickerSet() },
    int32(TLConstructor_CRC32_updateStickerSetsOrder):  func() TLObject { return NewTLUpdateStickerSetsOrder() },
    int32(TLConstructor_CRC32_updateStickerSets):  func() TLObject { return NewTLUpdateStickerSets() },
    int32(TLConstructor_CRC32_updateSavedGifs):  func() TLObject { return NewTLUpdateSavedGifs() },
    int32(TLConstructor_CRC32_updateBotInlineQuery):  func() TLObject { return NewTLUpdateBotInlineQuery() },
    int32(TLConstructor_CRC32_updateBotInlineSend):  func() TLObject { return NewTLUpdateBotInlineSend() },
    int32(TLConstructor_CRC32_updateEditChannelMessage):  func() TLObject { return NewTLUpdateEditChannelMessage() },
    int32(TLConstructor_CRC32_updateChannelPinnedMessage):  func() TLObject { return NewTLUpdateChannelPinnedMessage() },
    int32(TLConstructor_CRC32_updateBotCallbackQuery):  func() TLObject { return NewTLUpdateBotCallbackQuery() },
    int32(TLConstructor_CRC32_updateEditMessage):  func() TLObject { return NewTLUpdateEditMessage() },
    int32(TLConstructor_CRC32_updateInlineBotCallbackQuery):  func() TLObject { return NewTLUpdateInlineBotCallbackQuery() },
    int32(TLConstructor_CRC32_updateReadChannelOutbox):  func() TLObject { return NewTLUpdateReadChannelOutbox() },
    int32(TLConstructor_CRC32_updateDraftMessage):  func() TLObject { return NewTLUpdateDraftMessage() },
    int32(TLConstructor_CRC32_updateReadFeaturedStickers):  func() TLObject { return NewTLUpdateReadFeaturedStickers() },
    int32(TLConstructor_CRC32_updateRecentStickers):  func() TLObject { return NewTLUpdateRecentStickers() },
    int32(TLConstructor_CRC32_updateConfig):  func() TLObject { return NewTLUpdateConfig() },
    int32(TLConstructor_CRC32_updatePtsChanged):  func() TLObject { return NewTLUpdatePtsChanged() },
    int32(TLConstructor_CRC32_updateChannelWebPage):  func() TLObject { return NewTLUpdateChannelWebPage() },
    int32(TLConstructor_CRC32_updateDialogPinned):  func() TLObject { return NewTLUpdateDialogPinned() },
    int32(TLConstructor_CRC32_updatePinnedDialogs):  func() TLObject { return NewTLUpdatePinnedDialogs() },
    int32(TLConstructor_CRC32_updateBotWebhookJSON):  func() TLObject { return NewTLUpdateBotWebhookJSON() },
    int32(TLConstructor_CRC32_updateBotWebhookJSONQuery):  func() TLObject { return NewTLUpdateBotWebhookJSONQuery() },
    int32(TLConstructor_CRC32_updateBotShippingQuery):  func() TLObject { return NewTLUpdateBotShippingQuery() },
    int32(TLConstructor_CRC32_updateBotPrecheckoutQuery):  func() TLObject { return NewTLUpdateBotPrecheckoutQuery() },
    int32(TLConstructor_CRC32_updatePhoneCall):  func() TLObject { return NewTLUpdatePhoneCall() },
    int32(TLConstructor_CRC32_updateLangPackTooLong):  func() TLObject { return NewTLUpdateLangPackTooLong() },
    int32(TLConstructor_CRC32_updateLangPack):  func() TLObject { return NewTLUpdateLangPack() },
    int32(TLConstructor_CRC32_updateFavedStickers):  func() TLObject { return NewTLUpdateFavedStickers() },
    int32(TLConstructor_CRC32_updateChannelReadMessagesContents):  func() TLObject { return NewTLUpdateChannelReadMessagesContents() },
    int32(TLConstructor_CRC32_updateContactsReset):  func() TLObject { return NewTLUpdateContactsReset() },
    int32(TLConstructor_CRC32_updateGivePoints):  func() TLObject { return NewTLUpdateGivePoints() },
    int32(TLConstructor_CRC32_updateRedTip):  func() TLObject { return NewTLUpdateRedTip() },
    int32(TLConstructor_CRC32_updateRefreshContacts):  func() TLObject { return NewTLUpdateRefreshContacts() },
    int32(TLConstructor_CRC32_updateByJson):  func() TLObject { return NewTLUpdateByJson() },
    int32(TLConstructor_CRC32_updates_state):  func() TLObject { return NewTLUpdatesState() },
    int32(TLConstructor_CRC32_updates_differenceEmpty):  func() TLObject { return NewTLUpdatesDifferenceEmpty() },
    int32(TLConstructor_CRC32_updates_difference):  func() TLObject { return NewTLUpdatesDifference() },
    int32(TLConstructor_CRC32_updates_differenceSlice):  func() TLObject { return NewTLUpdatesDifferenceSlice() },
    int32(TLConstructor_CRC32_updates_differenceTooLong):  func() TLObject { return NewTLUpdatesDifferenceTooLong() },
    int32(TLConstructor_CRC32_updatesTooLong):  func() TLObject { return NewTLUpdatesTooLong() },
    int32(TLConstructor_CRC32_updateShortMessage):  func() TLObject { return NewTLUpdateShortMessage() },
    int32(TLConstructor_CRC32_updateShortChatMessage):  func() TLObject { return NewTLUpdateShortChatMessage() },
    int32(TLConstructor_CRC32_updateShort):  func() TLObject { return NewTLUpdateShort() },
    int32(TLConstructor_CRC32_updatesCombined):  func() TLObject { return NewTLUpdatesCombined() },
    int32(TLConstructor_CRC32_updates):  func() TLObject { return NewTLUpdates() },
    int32(TLConstructor_CRC32_updateShortSentMessage):  func() TLObject { return NewTLUpdateShortSentMessage() },
    int32(TLConstructor_CRC32_photos_photos):  func() TLObject { return NewTLPhotosPhotos() },
    int32(TLConstructor_CRC32_photos_photosSlice):  func() TLObject { return NewTLPhotosPhotosSlice() },
    int32(TLConstructor_CRC32_photos_photo):  func() TLObject { return NewTLPhotosPhoto() },
    int32(TLConstructor_CRC32_upload_file):  func() TLObject { return NewTLUploadFile() },
    int32(TLConstructor_CRC32_upload_fileCdnRedirect):  func() TLObject { return NewTLUploadFileCdnRedirect() },
    int32(TLConstructor_CRC32_dcOption):  func() TLObject { return NewTLDcOption() },
    int32(TLConstructor_CRC32_config):  func() TLObject { return NewTLConfig() },
    int32(TLConstructor_CRC32_nearestDc):  func() TLObject { return NewTLNearestDc() },
    int32(TLConstructor_CRC32_help_appUpdate):  func() TLObject { return NewTLHelpAppUpdate() },
    int32(TLConstructor_CRC32_help_noAppUpdate):  func() TLObject { return NewTLHelpNoAppUpdate() },
    int32(TLConstructor_CRC32_help_inviteText):  func() TLObject { return NewTLHelpInviteText() },
    int32(TLConstructor_CRC32_encryptedChatEmpty):  func() TLObject { return NewTLEncryptedChatEmpty() },
    int32(TLConstructor_CRC32_encryptedChatWaiting):  func() TLObject { return NewTLEncryptedChatWaiting() },
    int32(TLConstructor_CRC32_encryptedChatRequested):  func() TLObject { return NewTLEncryptedChatRequested() },
    int32(TLConstructor_CRC32_encryptedChat):  func() TLObject { return NewTLEncryptedChat() },
    int32(TLConstructor_CRC32_encryptedChatDiscarded):  func() TLObject { return NewTLEncryptedChatDiscarded() },
    int32(TLConstructor_CRC32_inputEncryptedChat):  func() TLObject { return NewTLInputEncryptedChat() },
    int32(TLConstructor_CRC32_encryptedFileEmpty):  func() TLObject { return NewTLEncryptedFileEmpty() },
    int32(TLConstructor_CRC32_encryptedFile):  func() TLObject { return NewTLEncryptedFile() },
    int32(TLConstructor_CRC32_inputEncryptedFileEmpty):  func() TLObject { return NewTLInputEncryptedFileEmpty() },
    int32(TLConstructor_CRC32_inputEncryptedFileUploaded):  func() TLObject { return NewTLInputEncryptedFileUploaded() },
    int32(TLConstructor_CRC32_inputEncryptedFile):  func() TLObject { return NewTLInputEncryptedFile() },
    int32(TLConstructor_CRC32_inputEncryptedFileBigUploaded):  func() TLObject { return NewTLInputEncryptedFileBigUploaded() },
    int32(TLConstructor_CRC32_encryptedMessage):  func() TLObject { return NewTLEncryptedMessage() },
    int32(TLConstructor_CRC32_encryptedMessageService):  func() TLObject { return NewTLEncryptedMessageService() },
    int32(TLConstructor_CRC32_messages_dhConfigNotModified):  func() TLObject { return NewTLMessagesDhConfigNotModified() },
    int32(TLConstructor_CRC32_messages_dhConfig):  func() TLObject { return NewTLMessagesDhConfig() },
    int32(TLConstructor_CRC32_messages_sentEncryptedMessage):  func() TLObject { return NewTLMessagesSentEncryptedMessage() },
    int32(TLConstructor_CRC32_messages_sentEncryptedFile):  func() TLObject { return NewTLMessagesSentEncryptedFile() },
    int32(TLConstructor_CRC32_inputDocumentEmpty):  func() TLObject { return NewTLInputDocumentEmpty() },
    int32(TLConstructor_CRC32_inputDocument):  func() TLObject { return NewTLInputDocument() },
    int32(TLConstructor_CRC32_documentEmpty):  func() TLObject { return NewTLDocumentEmpty() },
    int32(TLConstructor_CRC32_document):  func() TLObject { return NewTLDocument() },
    int32(TLConstructor_CRC32_help_support):  func() TLObject { return NewTLHelpSupport() },
    int32(TLConstructor_CRC32_notifyPeer):  func() TLObject { return NewTLNotifyPeer() },
    int32(TLConstructor_CRC32_notifyUsers):  func() TLObject { return NewTLNotifyUsers() },
    int32(TLConstructor_CRC32_notifyChats):  func() TLObject { return NewTLNotifyChats() },
    int32(TLConstructor_CRC32_notifyAll):  func() TLObject { return NewTLNotifyAll() },
    int32(TLConstructor_CRC32_sendMessageTypingAction):  func() TLObject { return NewTLSendMessageTypingAction() },
    int32(TLConstructor_CRC32_sendMessageCancelAction):  func() TLObject { return NewTLSendMessageCancelAction() },
    int32(TLConstructor_CRC32_sendMessageRecordVideoAction):  func() TLObject { return NewTLSendMessageRecordVideoAction() },
    int32(TLConstructor_CRC32_sendMessageUploadVideoAction):  func() TLObject { return NewTLSendMessageUploadVideoAction() },
    int32(TLConstructor_CRC32_sendMessageRecordAudioAction):  func() TLObject { return NewTLSendMessageRecordAudioAction() },
    int32(TLConstructor_CRC32_sendMessageUploadAudioAction):  func() TLObject { return NewTLSendMessageUploadAudioAction() },
    int32(TLConstructor_CRC32_sendMessageUploadPhotoAction):  func() TLObject { return NewTLSendMessageUploadPhotoAction() },
    int32(TLConstructor_CRC32_sendMessageUploadDocumentAction):  func() TLObject { return NewTLSendMessageUploadDocumentAction() },
    int32(TLConstructor_CRC32_sendMessageGeoLocationAction):  func() TLObject { return NewTLSendMessageGeoLocationAction() },
    int32(TLConstructor_CRC32_sendMessageChooseContactAction):  func() TLObject { return NewTLSendMessageChooseContactAction() },
    int32(TLConstructor_CRC32_sendMessageGamePlayAction):  func() TLObject { return NewTLSendMessageGamePlayAction() },
    int32(TLConstructor_CRC32_sendMessageRecordRoundAction):  func() TLObject { return NewTLSendMessageRecordRoundAction() },
    int32(TLConstructor_CRC32_sendMessageUploadRoundAction):  func() TLObject { return NewTLSendMessageUploadRoundAction() },
    int32(TLConstructor_CRC32_contacts_found):  func() TLObject { return NewTLContactsFound() },
    int32(TLConstructor_CRC32_inputPrivacyKeyStatusTimestamp):  func() TLObject { return NewTLInputPrivacyKeyStatusTimestamp() },
    int32(TLConstructor_CRC32_inputPrivacyKeyChatInvite):  func() TLObject { return NewTLInputPrivacyKeyChatInvite() },
    int32(TLConstructor_CRC32_inputPrivacyKeyPhoneCall):  func() TLObject { return NewTLInputPrivacyKeyPhoneCall() },
    int32(TLConstructor_CRC32_privacyKeyStatusTimestamp):  func() TLObject { return NewTLPrivacyKeyStatusTimestamp() },
    int32(TLConstructor_CRC32_privacyKeyChatInvite):  func() TLObject { return NewTLPrivacyKeyChatInvite() },
    int32(TLConstructor_CRC32_privacyKeyPhoneCall):  func() TLObject { return NewTLPrivacyKeyPhoneCall() },
    int32(TLConstructor_CRC32_inputPrivacyValueAllowContacts):  func() TLObject { return NewTLInputPrivacyValueAllowContacts() },
    int32(TLConstructor_CRC32_inputPrivacyValueAllowAll):  func() TLObject { return NewTLInputPrivacyValueAllowAll() },
    int32(TLConstructor_CRC32_inputPrivacyValueAllowUsers):  func() TLObject { return NewTLInputPrivacyValueAllowUsers() },
    int32(TLConstructor_CRC32_inputPrivacyValueDisallowContacts):  func() TLObject { return NewTLInputPrivacyValueDisallowContacts() },
    int32(TLConstructor_CRC32_inputPrivacyValueDisallowAll):  func() TLObject { return NewTLInputPrivacyValueDisallowAll() },
    int32(TLConstructor_CRC32_inputPrivacyValueDisallowUsers):  func() TLObject { return NewTLInputPrivacyValueDisallowUsers() },
    int32(TLConstructor_CRC32_privacyValueAllowContacts):  func() TLObject { return NewTLPrivacyValueAllowContacts() },
    int32(TLConstructor_CRC32_privacyValueAllowAll):  func() TLObject { return NewTLPrivacyValueAllowAll() },
    int32(TLConstructor_CRC32_privacyValueAllowUsers):  func() TLObject { return NewTLPrivacyValueAllowUsers() },
    int32(TLConstructor_CRC32_privacyValueDisallowContacts):  func() TLObject { return NewTLPrivacyValueDisallowContacts() },
    int32(TLConstructor_CRC32_privacyValueDisallowAll):  func() TLObject { return NewTLPrivacyValueDisallowAll() },
    int32(TLConstructor_CRC32_privacyValueDisallowUsers):  func() TLObject { return NewTLPrivacyValueDisallowUsers() },
    int32(TLConstructor_CRC32_account_privacyRules):  func() TLObject { return NewTLAccountPrivacyRules() },
    int32(TLConstructor_CRC32_accountDaysTTL):  func() TLObject { return NewTLAccountDaysTTL() },
    int32(TLConstructor_CRC32_documentAttributeImageSize):  func() TLObject { return NewTLDocumentAttributeImageSize() },
    int32(TLConstructor_CRC32_documentAttributeAnimated):  func() TLObject { return NewTLDocumentAttributeAnimated() },
    int32(TLConstructor_CRC32_documentAttributeSticker):  func() TLObject { return NewTLDocumentAttributeSticker() },
    int32(TLConstructor_CRC32_documentAttributeVideo):  func() TLObject { return NewTLDocumentAttributeVideo() },
    int32(TLConstructor_CRC32_documentAttributeAudio):  func() TLObject { return NewTLDocumentAttributeAudio() },
    int32(TLConstructor_CRC32_documentAttributeFilename):  func() TLObject { return NewTLDocumentAttributeFilename() },
    int32(TLConstructor_CRC32_documentAttributeHasStickers):  func() TLObject { return NewTLDocumentAttributeHasStickers() },
    int32(TLConstructor_CRC32_messages_stickersNotModified):  func() TLObject { return NewTLMessagesStickersNotModified() },
    int32(TLConstructor_CRC32_messages_stickers):  func() TLObject { return NewTLMessagesStickers() },
    int32(TLConstructor_CRC32_stickerPack):  func() TLObject { return NewTLStickerPack() },
    int32(TLConstructor_CRC32_messages_allStickersNotModified):  func() TLObject { return NewTLMessagesAllStickersNotModified() },
    int32(TLConstructor_CRC32_messages_allStickers):  func() TLObject { return NewTLMessagesAllStickers() },
    int32(TLConstructor_CRC32_disabledFeature):  func() TLObject { return NewTLDisabledFeature() },
    int32(TLConstructor_CRC32_messages_affectedMessages):  func() TLObject { return NewTLMessagesAffectedMessages() },
    int32(TLConstructor_CRC32_contactLinkUnknown):  func() TLObject { return NewTLContactLinkUnknown() },
    int32(TLConstructor_CRC32_contactLinkNone):  func() TLObject { return NewTLContactLinkNone() },
    int32(TLConstructor_CRC32_contactLinkHasPhone):  func() TLObject { return NewTLContactLinkHasPhone() },
    int32(TLConstructor_CRC32_contactLinkContact):  func() TLObject { return NewTLContactLinkContact() },
    int32(TLConstructor_CRC32_webPageEmpty):  func() TLObject { return NewTLWebPageEmpty() },
    int32(TLConstructor_CRC32_webPagePending):  func() TLObject { return NewTLWebPagePending() },
    int32(TLConstructor_CRC32_webPage):  func() TLObject { return NewTLWebPage() },
    int32(TLConstructor_CRC32_webPageNotModified):  func() TLObject { return NewTLWebPageNotModified() },
    int32(TLConstructor_CRC32_authorization):  func() TLObject { return NewTLAuthorization() },
    int32(TLConstructor_CRC32_account_authorizations):  func() TLObject { return NewTLAccountAuthorizations() },
    int32(TLConstructor_CRC32_account_noPassword):  func() TLObject { return NewTLAccountNoPassword() },
    int32(TLConstructor_CRC32_account_password):  func() TLObject { return NewTLAccountPassword() },
    int32(TLConstructor_CRC32_account_passwordSettings):  func() TLObject { return NewTLAccountPasswordSettings() },
    int32(TLConstructor_CRC32_account_passwordInputSettings):  func() TLObject { return NewTLAccountPasswordInputSettings() },
    int32(TLConstructor_CRC32_auth_passwordRecovery):  func() TLObject { return NewTLAuthPasswordRecovery() },
    int32(TLConstructor_CRC32_receivedNotifyMessage):  func() TLObject { return NewTLReceivedNotifyMessage() },
    int32(TLConstructor_CRC32_chatInviteEmpty):  func() TLObject { return NewTLChatInviteEmpty() },
    int32(TLConstructor_CRC32_chatInviteExported):  func() TLObject { return NewTLChatInviteExported() },
    int32(TLConstructor_CRC32_chatInviteAlready):  func() TLObject { return NewTLChatInviteAlready() },
    int32(TLConstructor_CRC32_chatInvite):  func() TLObject { return NewTLChatInvite() },
    int32(TLConstructor_CRC32_inputStickerSetEmpty):  func() TLObject { return NewTLInputStickerSetEmpty() },
    int32(TLConstructor_CRC32_inputStickerSetID):  func() TLObject { return NewTLInputStickerSetID() },
    int32(TLConstructor_CRC32_inputStickerSetShortName):  func() TLObject { return NewTLInputStickerSetShortName() },
    int32(TLConstructor_CRC32_stickerSet):  func() TLObject { return NewTLStickerSet() },
    int32(TLConstructor_CRC32_messages_stickerSet):  func() TLObject { return NewTLMessagesStickerSet() },
    int32(TLConstructor_CRC32_botCommand):  func() TLObject { return NewTLBotCommand() },
    int32(TLConstructor_CRC32_botInfo):  func() TLObject { return NewTLBotInfo() },
    int32(TLConstructor_CRC32_keyboardButton):  func() TLObject { return NewTLKeyboardButton() },
    int32(TLConstructor_CRC32_keyboardButtonUrl):  func() TLObject { return NewTLKeyboardButtonUrl() },
    int32(TLConstructor_CRC32_keyboardButtonCallback):  func() TLObject { return NewTLKeyboardButtonCallback() },
    int32(TLConstructor_CRC32_keyboardButtonRequestPhone):  func() TLObject { return NewTLKeyboardButtonRequestPhone() },
    int32(TLConstructor_CRC32_keyboardButtonRequestGeoLocation):  func() TLObject { return NewTLKeyboardButtonRequestGeoLocation() },
    int32(TLConstructor_CRC32_keyboardButtonSwitchInline):  func() TLObject { return NewTLKeyboardButtonSwitchInline() },
    int32(TLConstructor_CRC32_keyboardButtonGame):  func() TLObject { return NewTLKeyboardButtonGame() },
    int32(TLConstructor_CRC32_keyboardButtonBuy):  func() TLObject { return NewTLKeyboardButtonBuy() },
    int32(TLConstructor_CRC32_keyboardButtonRow):  func() TLObject { return NewTLKeyboardButtonRow() },
    int32(TLConstructor_CRC32_replyKeyboardHide):  func() TLObject { return NewTLReplyKeyboardHide() },
    int32(TLConstructor_CRC32_replyKeyboardForceReply):  func() TLObject { return NewTLReplyKeyboardForceReply() },
    int32(TLConstructor_CRC32_replyKeyboardMarkup):  func() TLObject { return NewTLReplyKeyboardMarkup() },
    int32(TLConstructor_CRC32_replyInlineMarkup):  func() TLObject { return NewTLReplyInlineMarkup() },
    int32(TLConstructor_CRC32_messageEntityUnknown):  func() TLObject { return NewTLMessageEntityUnknown() },
    int32(TLConstructor_CRC32_messageEntityMention):  func() TLObject { return NewTLMessageEntityMention() },
    int32(TLConstructor_CRC32_messageEntityHashtag):  func() TLObject { return NewTLMessageEntityHashtag() },
    int32(TLConstructor_CRC32_messageEntityBotCommand):  func() TLObject { return NewTLMessageEntityBotCommand() },
    int32(TLConstructor_CRC32_messageEntityUrl):  func() TLObject { return NewTLMessageEntityUrl() },
    int32(TLConstructor_CRC32_messageEntityEmail):  func() TLObject { return NewTLMessageEntityEmail() },
    int32(TLConstructor_CRC32_messageEntityBold):  func() TLObject { return NewTLMessageEntityBold() },
    int32(TLConstructor_CRC32_messageEntityItalic):  func() TLObject { return NewTLMessageEntityItalic() },
    int32(TLConstructor_CRC32_messageEntityCode):  func() TLObject { return NewTLMessageEntityCode() },
    int32(TLConstructor_CRC32_messageEntityPre):  func() TLObject { return NewTLMessageEntityPre() },
    int32(TLConstructor_CRC32_messageEntityTextUrl):  func() TLObject { return NewTLMessageEntityTextUrl() },
    int32(TLConstructor_CRC32_messageEntityMentionName):  func() TLObject { return NewTLMessageEntityMentionName() },
    int32(TLConstructor_CRC32_inputMessageEntityMentionName):  func() TLObject { return NewTLInputMessageEntityMentionName() },
    int32(TLConstructor_CRC32_inputChannelEmpty):  func() TLObject { return NewTLInputChannelEmpty() },
    int32(TLConstructor_CRC32_inputChannel):  func() TLObject { return NewTLInputChannel() },
    int32(TLConstructor_CRC32_contacts_resolvedPeer):  func() TLObject { return NewTLContactsResolvedPeer() },
    int32(TLConstructor_CRC32_messageRange):  func() TLObject { return NewTLMessageRange() },
    int32(TLConstructor_CRC32_updates_channelDifferenceEmpty):  func() TLObject { return NewTLUpdatesChannelDifferenceEmpty() },
    int32(TLConstructor_CRC32_updates_channelDifferenceTooLong):  func() TLObject { return NewTLUpdatesChannelDifferenceTooLong() },
    int32(TLConstructor_CRC32_updates_channelDifference):  func() TLObject { return NewTLUpdatesChannelDifference() },
    int32(TLConstructor_CRC32_channelMessagesFilterEmpty):  func() TLObject { return NewTLChannelMessagesFilterEmpty() },
    int32(TLConstructor_CRC32_channelMessagesFilter):  func() TLObject { return NewTLChannelMessagesFilter() },
    int32(TLConstructor_CRC32_channelParticipant):  func() TLObject { return NewTLChannelParticipant() },
    int32(TLConstructor_CRC32_channelParticipantSelf):  func() TLObject { return NewTLChannelParticipantSelf() },
    int32(TLConstructor_CRC32_channelParticipantCreator):  func() TLObject { return NewTLChannelParticipantCreator() },
    int32(TLConstructor_CRC32_channelParticipantAdmin):  func() TLObject { return NewTLChannelParticipantAdmin() },
    int32(TLConstructor_CRC32_channelParticipantBanned):  func() TLObject { return NewTLChannelParticipantBanned() },
    int32(TLConstructor_CRC32_channelParticipantsRecent):  func() TLObject { return NewTLChannelParticipantsRecent() },
    int32(TLConstructor_CRC32_channelParticipantsAdmins):  func() TLObject { return NewTLChannelParticipantsAdmins() },
    int32(TLConstructor_CRC32_channelParticipantsKicked):  func() TLObject { return NewTLChannelParticipantsKicked() },
    int32(TLConstructor_CRC32_channelParticipantsBots):  func() TLObject { return NewTLChannelParticipantsBots() },
    int32(TLConstructor_CRC32_channelParticipantsBanned):  func() TLObject { return NewTLChannelParticipantsBanned() },
    int32(TLConstructor_CRC32_channelParticipantsSearch):  func() TLObject { return NewTLChannelParticipantsSearch() },
    int32(TLConstructor_CRC32_channels_channelParticipants):  func() TLObject { return NewTLChannelsChannelParticipants() },
    int32(TLConstructor_CRC32_channels_channelParticipant):  func() TLObject { return NewTLChannelsChannelParticipant() },
    int32(TLConstructor_CRC32_help_termsOfService):  func() TLObject { return NewTLHelpTermsOfService() },
    int32(TLConstructor_CRC32_foundGif):  func() TLObject { return NewTLFoundGif() },
    int32(TLConstructor_CRC32_foundGifCached):  func() TLObject { return NewTLFoundGifCached() },
    int32(TLConstructor_CRC32_messages_foundGifs):  func() TLObject { return NewTLMessagesFoundGifs() },
    int32(TLConstructor_CRC32_messages_savedGifsNotModified):  func() TLObject { return NewTLMessagesSavedGifsNotModified() },
    int32(TLConstructor_CRC32_messages_savedGifs):  func() TLObject { return NewTLMessagesSavedGifs() },
    int32(TLConstructor_CRC32_inputBotInlineMessageMediaAuto):  func() TLObject { return NewTLInputBotInlineMessageMediaAuto() },
    int32(TLConstructor_CRC32_inputBotInlineMessageText):  func() TLObject { return NewTLInputBotInlineMessageText() },
    int32(TLConstructor_CRC32_inputBotInlineMessageMediaGeo):  func() TLObject { return NewTLInputBotInlineMessageMediaGeo() },
    int32(TLConstructor_CRC32_inputBotInlineMessageMediaVenue):  func() TLObject { return NewTLInputBotInlineMessageMediaVenue() },
    int32(TLConstructor_CRC32_inputBotInlineMessageMediaContact):  func() TLObject { return NewTLInputBotInlineMessageMediaContact() },
    int32(TLConstructor_CRC32_inputBotInlineMessageGame):  func() TLObject { return NewTLInputBotInlineMessageGame() },
    int32(TLConstructor_CRC32_inputBotInlineResult):  func() TLObject { return NewTLInputBotInlineResult() },
    int32(TLConstructor_CRC32_inputBotInlineResultPhoto):  func() TLObject { return NewTLInputBotInlineResultPhoto() },
    int32(TLConstructor_CRC32_inputBotInlineResultDocument):  func() TLObject { return NewTLInputBotInlineResultDocument() },
    int32(TLConstructor_CRC32_inputBotInlineResultGame):  func() TLObject { return NewTLInputBotInlineResultGame() },
    int32(TLConstructor_CRC32_botInlineMessageMediaAuto):  func() TLObject { return NewTLBotInlineMessageMediaAuto() },
    int32(TLConstructor_CRC32_botInlineMessageText):  func() TLObject { return NewTLBotInlineMessageText() },
    int32(TLConstructor_CRC32_botInlineMessageMediaGeo):  func() TLObject { return NewTLBotInlineMessageMediaGeo() },
    int32(TLConstructor_CRC32_botInlineMessageMediaVenue):  func() TLObject { return NewTLBotInlineMessageMediaVenue() },
    int32(TLConstructor_CRC32_botInlineMessageMediaContact):  func() TLObject { return NewTLBotInlineMessageMediaContact() },
    int32(TLConstructor_CRC32_botInlineResult):  func() TLObject { return NewTLBotInlineResult() },
    int32(TLConstructor_CRC32_botInlineMediaResult):  func() TLObject { return NewTLBotInlineMediaResult() },
    int32(TLConstructor_CRC32_exportedMessageLink):  func() TLObject { return NewTLExportedMessageLink() },
    int32(TLConstructor_CRC32_messageFwdHeader):  func() TLObject { return NewTLMessageFwdHeader() },
    int32(TLConstructor_CRC32_auth_codeTypeSms):  func() TLObject { return NewTLAuthCodeTypeSms() },
    int32(TLConstructor_CRC32_auth_codeTypeCall):  func() TLObject { return NewTLAuthCodeTypeCall() },
    int32(TLConstructor_CRC32_auth_codeTypeFlashCall):  func() TLObject { return NewTLAuthCodeTypeFlashCall() },
    int32(TLConstructor_CRC32_auth_sentCodeTypeApp):  func() TLObject { return NewTLAuthSentCodeTypeApp() },
    int32(TLConstructor_CRC32_auth_sentCodeTypeSms):  func() TLObject { return NewTLAuthSentCodeTypeSms() },
    int32(TLConstructor_CRC32_auth_sentCodeTypeCall):  func() TLObject { return NewTLAuthSentCodeTypeCall() },
    int32(TLConstructor_CRC32_auth_sentCodeTypeFlashCall):  func() TLObject { return NewTLAuthSentCodeTypeFlashCall() },
    int32(TLConstructor_CRC32_messages_botCallbackAnswer):  func() TLObject { return NewTLMessagesBotCallbackAnswer() },
    int32(TLConstructor_CRC32_messages_messageEditData):  func() TLObject { return NewTLMessagesMessageEditData() },
    int32(TLConstructor_CRC32_inputBotInlineMessageID):  func() TLObject { return NewTLInputBotInlineMessageID() },
    int32(TLConstructor_CRC32_inlineBotSwitchPM):  func() TLObject { return NewTLInlineBotSwitchPM() },
    int32(TLConstructor_CRC32_messages_peerDialogs):  func() TLObject { return NewTLMessagesPeerDialogs() },
    int32(TLConstructor_CRC32_topPeer):  func() TLObject { return NewTLTopPeer() },
    int32(TLConstructor_CRC32_topPeerCategoryBotsPM):  func() TLObject { return NewTLTopPeerCategoryBotsPM() },
    int32(TLConstructor_CRC32_topPeerCategoryBotsInline):  func() TLObject { return NewTLTopPeerCategoryBotsInline() },
    int32(TLConstructor_CRC32_topPeerCategoryCorrespondents):  func() TLObject { return NewTLTopPeerCategoryCorrespondents() },
    int32(TLConstructor_CRC32_topPeerCategoryGroups):  func() TLObject { return NewTLTopPeerCategoryGroups() },
    int32(TLConstructor_CRC32_topPeerCategoryChannels):  func() TLObject { return NewTLTopPeerCategoryChannels() },
    int32(TLConstructor_CRC32_topPeerCategoryPhoneCalls):  func() TLObject { return NewTLTopPeerCategoryPhoneCalls() },
    int32(TLConstructor_CRC32_topPeerCategoryPeers):  func() TLObject { return NewTLTopPeerCategoryPeers() },
    int32(TLConstructor_CRC32_contacts_topPeersNotModified):  func() TLObject { return NewTLContactsTopPeersNotModified() },
    int32(TLConstructor_CRC32_contacts_topPeers):  func() TLObject { return NewTLContactsTopPeers() },
    int32(TLConstructor_CRC32_draftMessageEmpty):  func() TLObject { return NewTLDraftMessageEmpty() },
    int32(TLConstructor_CRC32_draftMessage):  func() TLObject { return NewTLDraftMessage() },
    int32(TLConstructor_CRC32_messages_featuredStickersNotModified):  func() TLObject { return NewTLMessagesFeaturedStickersNotModified() },
    int32(TLConstructor_CRC32_messages_featuredStickers):  func() TLObject { return NewTLMessagesFeaturedStickers() },
    int32(TLConstructor_CRC32_messages_recentStickersNotModified):  func() TLObject { return NewTLMessagesRecentStickersNotModified() },
    int32(TLConstructor_CRC32_messages_recentStickers):  func() TLObject { return NewTLMessagesRecentStickers() },
    int32(TLConstructor_CRC32_messages_archivedStickers):  func() TLObject { return NewTLMessagesArchivedStickers() },
    int32(TLConstructor_CRC32_messages_stickerSetInstallResultSuccess):  func() TLObject { return NewTLMessagesStickerSetInstallResultSuccess() },
    int32(TLConstructor_CRC32_messages_stickerSetInstallResultArchive):  func() TLObject { return NewTLMessagesStickerSetInstallResultArchive() },
    int32(TLConstructor_CRC32_stickerSetCovered):  func() TLObject { return NewTLStickerSetCovered() },
    int32(TLConstructor_CRC32_stickerSetMultiCovered):  func() TLObject { return NewTLStickerSetMultiCovered() },
    int32(TLConstructor_CRC32_maskCoords):  func() TLObject { return NewTLMaskCoords() },
    int32(TLConstructor_CRC32_inputStickeredMediaPhoto):  func() TLObject { return NewTLInputStickeredMediaPhoto() },
    int32(TLConstructor_CRC32_inputStickeredMediaDocument):  func() TLObject { return NewTLInputStickeredMediaDocument() },
    int32(TLConstructor_CRC32_game):  func() TLObject { return NewTLGame() },
    int32(TLConstructor_CRC32_inputGameID):  func() TLObject { return NewTLInputGameID() },
    int32(TLConstructor_CRC32_inputGameShortName):  func() TLObject { return NewTLInputGameShortName() },
    int32(TLConstructor_CRC32_highScore):  func() TLObject { return NewTLHighScore() },
    int32(TLConstructor_CRC32_messages_highScores):  func() TLObject { return NewTLMessagesHighScores() },
    int32(TLConstructor_CRC32_textEmpty):  func() TLObject { return NewTLTextEmpty() },
    int32(TLConstructor_CRC32_textPlain):  func() TLObject { return NewTLTextPlain() },
    int32(TLConstructor_CRC32_textBold):  func() TLObject { return NewTLTextBold() },
    int32(TLConstructor_CRC32_textItalic):  func() TLObject { return NewTLTextItalic() },
    int32(TLConstructor_CRC32_textUnderline):  func() TLObject { return NewTLTextUnderline() },
    int32(TLConstructor_CRC32_textStrike):  func() TLObject { return NewTLTextStrike() },
    int32(TLConstructor_CRC32_textFixed):  func() TLObject { return NewTLTextFixed() },
    int32(TLConstructor_CRC32_textUrl):  func() TLObject { return NewTLTextUrl() },
    int32(TLConstructor_CRC32_textEmail):  func() TLObject { return NewTLTextEmail() },
    int32(TLConstructor_CRC32_textConcat):  func() TLObject { return NewTLTextConcat() },
    int32(TLConstructor_CRC32_pageBlockUnsupported):  func() TLObject { return NewTLPageBlockUnsupported() },
    int32(TLConstructor_CRC32_pageBlockTitle):  func() TLObject { return NewTLPageBlockTitle() },
    int32(TLConstructor_CRC32_pageBlockSubtitle):  func() TLObject { return NewTLPageBlockSubtitle() },
    int32(TLConstructor_CRC32_pageBlockAuthorDate):  func() TLObject { return NewTLPageBlockAuthorDate() },
    int32(TLConstructor_CRC32_pageBlockHeader):  func() TLObject { return NewTLPageBlockHeader() },
    int32(TLConstructor_CRC32_pageBlockSubheader):  func() TLObject { return NewTLPageBlockSubheader() },
    int32(TLConstructor_CRC32_pageBlockParagraph):  func() TLObject { return NewTLPageBlockParagraph() },
    int32(TLConstructor_CRC32_pageBlockPreformatted):  func() TLObject { return NewTLPageBlockPreformatted() },
    int32(TLConstructor_CRC32_pageBlockFooter):  func() TLObject { return NewTLPageBlockFooter() },
    int32(TLConstructor_CRC32_pageBlockDivider):  func() TLObject { return NewTLPageBlockDivider() },
    int32(TLConstructor_CRC32_pageBlockAnchor):  func() TLObject { return NewTLPageBlockAnchor() },
    int32(TLConstructor_CRC32_pageBlockList):  func() TLObject { return NewTLPageBlockList() },
    int32(TLConstructor_CRC32_pageBlockBlockquote):  func() TLObject { return NewTLPageBlockBlockquote() },
    int32(TLConstructor_CRC32_pageBlockPullquote):  func() TLObject { return NewTLPageBlockPullquote() },
    int32(TLConstructor_CRC32_pageBlockPhoto):  func() TLObject { return NewTLPageBlockPhoto() },
    int32(TLConstructor_CRC32_pageBlockVideo):  func() TLObject { return NewTLPageBlockVideo() },
    int32(TLConstructor_CRC32_pageBlockCover):  func() TLObject { return NewTLPageBlockCover() },
    int32(TLConstructor_CRC32_pageBlockEmbed):  func() TLObject { return NewTLPageBlockEmbed() },
    int32(TLConstructor_CRC32_pageBlockEmbedPost):  func() TLObject { return NewTLPageBlockEmbedPost() },
    int32(TLConstructor_CRC32_pageBlockCollage):  func() TLObject { return NewTLPageBlockCollage() },
    int32(TLConstructor_CRC32_pageBlockSlideshow):  func() TLObject { return NewTLPageBlockSlideshow() },
    int32(TLConstructor_CRC32_pageBlockChannel):  func() TLObject { return NewTLPageBlockChannel() },
    int32(TLConstructor_CRC32_pageBlockAudio):  func() TLObject { return NewTLPageBlockAudio() },
    int32(TLConstructor_CRC32_pagePart):  func() TLObject { return NewTLPagePart() },
    int32(TLConstructor_CRC32_pageFull):  func() TLObject { return NewTLPageFull() },
    int32(TLConstructor_CRC32_phoneCallDiscardReasonMissed):  func() TLObject { return NewTLPhoneCallDiscardReasonMissed() },
    int32(TLConstructor_CRC32_phoneCallDiscardReasonDisconnect):  func() TLObject { return NewTLPhoneCallDiscardReasonDisconnect() },
    int32(TLConstructor_CRC32_phoneCallDiscardReasonHangup):  func() TLObject { return NewTLPhoneCallDiscardReasonHangup() },
    int32(TLConstructor_CRC32_phoneCallDiscardReasonBusy):  func() TLObject { return NewTLPhoneCallDiscardReasonBusy() },
    int32(TLConstructor_CRC32_dataJSON):  func() TLObject { return NewTLDataJSON() },
    int32(TLConstructor_CRC32_labeledPrice):  func() TLObject { return NewTLLabeledPrice() },
    int32(TLConstructor_CRC32_invoice):  func() TLObject { return NewTLInvoice() },
    int32(TLConstructor_CRC32_paymentCharge):  func() TLObject { return NewTLPaymentCharge() },
    int32(TLConstructor_CRC32_postAddress):  func() TLObject { return NewTLPostAddress() },
    int32(TLConstructor_CRC32_paymentRequestedInfo):  func() TLObject { return NewTLPaymentRequestedInfo() },
    int32(TLConstructor_CRC32_paymentSavedCredentialsCard):  func() TLObject { return NewTLPaymentSavedCredentialsCard() },
    int32(TLConstructor_CRC32_webDocument):  func() TLObject { return NewTLWebDocument() },
    int32(TLConstructor_CRC32_inputWebDocument):  func() TLObject { return NewTLInputWebDocument() },
    int32(TLConstructor_CRC32_inputWebFileLocation):  func() TLObject { return NewTLInputWebFileLocation() },
    int32(TLConstructor_CRC32_upload_webFile):  func() TLObject { return NewTLUploadWebFile() },
    int32(TLConstructor_CRC32_payments_paymentForm):  func() TLObject { return NewTLPaymentsPaymentForm() },
    int32(TLConstructor_CRC32_payments_validatedRequestedInfo):  func() TLObject { return NewTLPaymentsValidatedRequestedInfo() },
    int32(TLConstructor_CRC32_payments_paymentResult):  func() TLObject { return NewTLPaymentsPaymentResult() },
    int32(TLConstructor_CRC32_payments_paymentVerficationNeeded):  func() TLObject { return NewTLPaymentsPaymentVerficationNeeded() },
    int32(TLConstructor_CRC32_payments_paymentReceipt):  func() TLObject { return NewTLPaymentsPaymentReceipt() },
    int32(TLConstructor_CRC32_payments_savedInfo):  func() TLObject { return NewTLPaymentsSavedInfo() },
    int32(TLConstructor_CRC32_inputPaymentCredentialsSaved):  func() TLObject { return NewTLInputPaymentCredentialsSaved() },
    int32(TLConstructor_CRC32_inputPaymentCredentials):  func() TLObject { return NewTLInputPaymentCredentials() },
    int32(TLConstructor_CRC32_account_tmpPassword):  func() TLObject { return NewTLAccountTmpPassword() },
    int32(TLConstructor_CRC32_shippingOption):  func() TLObject { return NewTLShippingOption() },
    int32(TLConstructor_CRC32_inputStickerSetItem):  func() TLObject { return NewTLInputStickerSetItem() },
    int32(TLConstructor_CRC32_inputPhoneCall):  func() TLObject { return NewTLInputPhoneCall() },
    int32(TLConstructor_CRC32_phoneCallEmpty):  func() TLObject { return NewTLPhoneCallEmpty() },
    int32(TLConstructor_CRC32_phoneCallWaiting):  func() TLObject { return NewTLPhoneCallWaiting() },
    int32(TLConstructor_CRC32_phoneCallRequested):  func() TLObject { return NewTLPhoneCallRequested() },
    int32(TLConstructor_CRC32_phoneCallAccepted):  func() TLObject { return NewTLPhoneCallAccepted() },
    int32(TLConstructor_CRC32_phoneCall):  func() TLObject { return NewTLPhoneCall() },
    int32(TLConstructor_CRC32_phoneCallDiscarded):  func() TLObject { return NewTLPhoneCallDiscarded() },
    int32(TLConstructor_CRC32_phoneConnection):  func() TLObject { return NewTLPhoneConnection() },
    int32(TLConstructor_CRC32_phoneCallProtocol):  func() TLObject { return NewTLPhoneCallProtocol() },
    int32(TLConstructor_CRC32_phone_phoneCall):  func() TLObject { return NewTLPhonePhoneCall() },
    int32(TLConstructor_CRC32_upload_cdnFileReuploadNeeded):  func() TLObject { return NewTLUploadCdnFileReuploadNeeded() },
    int32(TLConstructor_CRC32_upload_cdnFile):  func() TLObject { return NewTLUploadCdnFile() },
    int32(TLConstructor_CRC32_cdnPublicKey):  func() TLObject { return NewTLCdnPublicKey() },
    int32(TLConstructor_CRC32_cdnConfig):  func() TLObject { return NewTLCdnConfig() },
    int32(TLConstructor_CRC32_langPackString):  func() TLObject { return NewTLLangPackString() },
    int32(TLConstructor_CRC32_langPackStringPluralized):  func() TLObject { return NewTLLangPackStringPluralized() },
    int32(TLConstructor_CRC32_langPackStringDeleted):  func() TLObject { return NewTLLangPackStringDeleted() },
    int32(TLConstructor_CRC32_langPackDifference):  func() TLObject { return NewTLLangPackDifference() },
    int32(TLConstructor_CRC32_langPackLanguage):  func() TLObject { return NewTLLangPackLanguage() },
    int32(TLConstructor_CRC32_channelAdminRights):  func() TLObject { return NewTLChannelAdminRights() },
    int32(TLConstructor_CRC32_channelBannedRights):  func() TLObject { return NewTLChannelBannedRights() },
    int32(TLConstructor_CRC32_channelAdminLogEventActionChangeTitle):  func() TLObject { return NewTLChannelAdminLogEventActionChangeTitle() },
    int32(TLConstructor_CRC32_channelAdminLogEventActionChangeAbout):  func() TLObject { return NewTLChannelAdminLogEventActionChangeAbout() },
    int32(TLConstructor_CRC32_channelAdminLogEventActionChangeUsername):  func() TLObject { return NewTLChannelAdminLogEventActionChangeUsername() },
    int32(TLConstructor_CRC32_channelAdminLogEventActionChangePhoto):  func() TLObject { return NewTLChannelAdminLogEventActionChangePhoto() },
    int32(TLConstructor_CRC32_channelAdminLogEventActionToggleInvites):  func() TLObject { return NewTLChannelAdminLogEventActionToggleInvites() },
    int32(TLConstructor_CRC32_channelAdminLogEventActionToggleSignatures):  func() TLObject { return NewTLChannelAdminLogEventActionToggleSignatures() },
    int32(TLConstructor_CRC32_channelAdminLogEventActionUpdatePinned):  func() TLObject { return NewTLChannelAdminLogEventActionUpdatePinned() },
    int32(TLConstructor_CRC32_channelAdminLogEventActionEditMessage):  func() TLObject { return NewTLChannelAdminLogEventActionEditMessage() },
    int32(TLConstructor_CRC32_channelAdminLogEventActionDeleteMessage):  func() TLObject { return NewTLChannelAdminLogEventActionDeleteMessage() },
    int32(TLConstructor_CRC32_channelAdminLogEventActionParticipantJoin):  func() TLObject { return NewTLChannelAdminLogEventActionParticipantJoin() },
    int32(TLConstructor_CRC32_channelAdminLogEventActionParticipantLeave):  func() TLObject { return NewTLChannelAdminLogEventActionParticipantLeave() },
    int32(TLConstructor_CRC32_channelAdminLogEventActionParticipantInvite):  func() TLObject { return NewTLChannelAdminLogEventActionParticipantInvite() },
    int32(TLConstructor_CRC32_channelAdminLogEventActionParticipantToggleBan):  func() TLObject { return NewTLChannelAdminLogEventActionParticipantToggleBan() },
    int32(TLConstructor_CRC32_channelAdminLogEventActionParticipantToggleAdmin):  func() TLObject { return NewTLChannelAdminLogEventActionParticipantToggleAdmin() },
    int32(TLConstructor_CRC32_channelAdminLogEventActionChangeStickerSet):  func() TLObject { return NewTLChannelAdminLogEventActionChangeStickerSet() },
    int32(TLConstructor_CRC32_channelAdminLogEvent):  func() TLObject { return NewTLChannelAdminLogEvent() },
    int32(TLConstructor_CRC32_channels_adminLogResults):  func() TLObject { return NewTLChannelsAdminLogResults() },
    int32(TLConstructor_CRC32_channelAdminLogEventsFilter):  func() TLObject { return NewTLChannelAdminLogEventsFilter() },
    int32(TLConstructor_CRC32_popularContact):  func() TLObject { return NewTLPopularContact() },
    int32(TLConstructor_CRC32_cdnFileHash):  func() TLObject { return NewTLCdnFileHash() },
    int32(TLConstructor_CRC32_messages_favedStickersNotModified):  func() TLObject { return NewTLMessagesFavedStickersNotModified() },
    int32(TLConstructor_CRC32_messages_favedStickers):  func() TLObject { return NewTLMessagesFavedStickers() },
    int32(TLConstructor_CRC32_userInfo):  func() TLObject { return NewTLUserInfo() },
    int32(TLConstructor_CRC32_envelopeItem):  func() TLObject { return NewTLEnvelopeItem() },
    int32(TLConstructor_CRC32_envelopeInfo):  func() TLObject { return NewTLEnvelopeInfo() },
    int32(TLConstructor_CRC32_pointsEventItem):  func() TLObject { return NewTLPointsEventItem() },
    int32(TLConstructor_CRC32_pointsRankItem):  func() TLObject { return NewTLPointsRankItem() },
    int32(TLConstructor_CRC32_pointsRankResult):  func() TLObject { return NewTLPointsRankResult() },
    int32(TLConstructor_CRC32_pointsHistoryResult):  func() TLObject { return NewTLPointsHistoryResult() },
    int32(TLConstructor_CRC32_envelopeStateGrabed):  func() TLObject { return NewTLEnvelopeStateGrabed() },
    int32(TLConstructor_CRC32_envelopeStateExpired):  func() TLObject { return NewTLEnvelopeStateExpired() },
    int32(TLConstructor_CRC32_envelopeStateDone):  func() TLObject { return NewTLEnvelopeStateDone() },
    int32(TLConstructor_CRC32_envelopeStateCanGrab):  func() TLObject { return NewTLEnvelopeStateCanGrab() },
    int32(TLConstructor_CRC32_inputDocumentFileLocation54):  func() TLObject { return NewTLInputDocumentFileLocation54() },
    int32(TLConstructor_CRC32_schemeNotModified):  func() TLObject { return NewTLSchemeNotModified() },
    int32(TLConstructor_CRC32_scheme):  func() TLObject { return NewTLScheme() },
    int32(TLConstructor_CRC32_schemeParam):  func() TLObject { return NewTLSchemeParam() },
    int32(TLConstructor_CRC32_schemeMethod):  func() TLObject { return NewTLSchemeMethod() },
    int32(TLConstructor_CRC32_schemeType):  func() TLObject { return NewTLSchemeType() },
    int32(TLConstructor_CRC32_updateChannelBannedRights):  func() TLObject { return NewTLUpdateChannelBannedRights() },
    int32(TLConstructor_CRC32_inputMediaPhoto73):  func() TLObject { return NewTLInputMediaPhoto73() },
    int32(TLConstructor_CRC32_inputMediaDocument73):  func() TLObject { return NewTLInputMediaDocument73() },
    int32(TLConstructor_CRC32_inputMediaGeoLive):  func() TLObject { return NewTLInputMediaGeoLive() },
    int32(TLConstructor_CRC32_messageMediaGeoLive):  func() TLObject { return NewTLMessageMediaGeoLive() },
    int32(TLConstructor_CRC32_messageActionCustomAction):  func() TLObject { return NewTLMessageActionCustomAction() },
    int32(TLConstructor_CRC32_wkOption):  func() TLObject { return NewTLWkOption() },
    int32(TLConstructor_CRC32_wkConfig):  func() TLObject { return NewTLWkConfig() },
    int32(TLConstructor_CRC32_config73):  func() TLObject { return NewTLConfig73() },
    int32(TLConstructor_CRC32_recentMeUrlUnknown):  func() TLObject { return NewTLRecentMeUrlUnknown() },
    int32(TLConstructor_CRC32_recentMeUrlUser):  func() TLObject { return NewTLRecentMeUrlUser() },
    int32(TLConstructor_CRC32_recentMeUrlChat):  func() TLObject { return NewTLRecentMeUrlChat() },
    int32(TLConstructor_CRC32_recentMeUrlChatInvite):  func() TLObject { return NewTLRecentMeUrlChatInvite() },
    int32(TLConstructor_CRC32_recentMeUrlStickerSet):  func() TLObject { return NewTLRecentMeUrlStickerSet() },
    int32(TLConstructor_CRC32_help_recentMeUrls):  func() TLObject { return NewTLHelpRecentMeUrls() },
    int32(TLConstructor_CRC32_inputSingleMedia):  func() TLObject { return NewTLInputSingleMedia() },
    int32(TLConstructor_CRC32_inputPhotoCropAuto):  func() TLObject { return NewTLInputPhotoCropAuto() },
    int32(TLConstructor_CRC32_inputPhotoCrop):  func() TLObject { return NewTLInputPhotoCrop() },
    int32(TLConstructor_CRC32_updateChannelAvailableMessages):  func() TLObject { return NewTLUpdateChannelAvailableMessages() },
    int32(TLConstructor_CRC32_channelAdminLogEventActionTogglePreHistoryHidden):  func() TLObject { return NewTLChannelAdminLogEventActionTogglePreHistoryHidden() },
    int32(TLConstructor_CRC32_phoneCallWebrtcOffer):  func() TLObject { return NewTLPhoneCallWebrtcOffer() },
    int32(TLConstructor_CRC32_phoneCallWebrtcAnswer):  func() TLObject { return NewTLPhoneCallWebrtcAnswer() },
    int32(TLConstructor_CRC32_phoneCallWebrtcCandidate):  func() TLObject { return NewTLPhoneCallWebrtcCandidate() },
    int32(TLConstructor_CRC32_messages_botResults):  func() TLObject { return NewTLMessagesBotResults() },
    int32(TLConstructor_CRC32_dcOption82):  func() TLObject { return NewTLDcOption82() },
    int32(TLConstructor_CRC32_config82):  func() TLObject { return NewTLConfig82() },
    int32(TLConstructor_CRC32_inputClientProxy):  func() TLObject { return NewTLInputClientProxy() },
    int32(TLConstructor_CRC32_account_noPassword82):  func() TLObject { return NewTLAccountNoPassword82() },
    int32(TLConstructor_CRC32_account_password82):  func() TLObject { return NewTLAccountPassword82() },
    int32(TLConstructor_CRC32_auth_sentCode82):  func() TLObject { return NewTLAuthSentCode82() },
    int32(TLConstructor_CRC32_inputMessageID):  func() TLObject { return NewTLInputMessageID() },
    int32(TLConstructor_CRC32_inputMessageReplyTo):  func() TLObject { return NewTLInputMessageReplyTo() },
    int32(TLConstructor_CRC32_inputMessagePinned):  func() TLObject { return NewTLInputMessagePinned() },
    int32(TLConstructor_CRC32_inputDialogPeer):  func() TLObject { return NewTLInputDialogPeer() },
    int32(TLConstructor_CRC32_dialogPeer):  func() TLObject { return NewTLDialogPeer() },
    int32(TLConstructor_CRC32_help_termsOfServiceUpdateEmpty):  func() TLObject { return NewTLHelpTermsOfServiceUpdateEmpty() },
    int32(TLConstructor_CRC32_help_termsOfServiceUpdate):  func() TLObject { return NewTLHelpTermsOfServiceUpdate() },
    int32(TLConstructor_CRC32_help_deepLinkInfoEmpty):  func() TLObject { return NewTLHelpDeepLinkInfoEmpty() },
    int32(TLConstructor_CRC32_help_deepLinkInfo):  func() TLObject { return NewTLHelpDeepLinkInfo() },
    int32(TLConstructor_CRC32_inputPeerUserFromMessage):  func() TLObject { return NewTLInputPeerUserFromMessage() },
    int32(TLConstructor_CRC32_inputPeerChannelFromMessage):  func() TLObject { return NewTLInputPeerChannelFromMessage() },
    int32(TLConstructor_CRC32_inputUserFromMessage):  func() TLObject { return NewTLInputUserFromMessage() },
    int32(TLConstructor_CRC32_inputPhoto114):  func() TLObject { return NewTLInputPhoto114() },
    int32(TLConstructor_CRC32_inputMediaUploadedPhoto114):  func() TLObject { return NewTLInputMediaUploadedPhoto114() },
    int32(TLConstructor_CRC32_inputMediaPhoto114):  func() TLObject { return NewTLInputMediaPhoto114() },
    int32(TLConstructor_CRC32_inputMediaContact114):  func() TLObject { return NewTLInputMediaContact114() },
    int32(TLConstructor_CRC32_inputMediaUploadedDocument114):  func() TLObject { return NewTLInputMediaUploadedDocument114() },
    int32(TLConstructor_CRC32_inputMediaDocument114):  func() TLObject { return NewTLInputMediaDocument114() },
    int32(TLConstructor_CRC32_inputMediaVenue114):  func() TLObject { return NewTLInputMediaVenue114() },
    int32(TLConstructor_CRC32_inputMediaPhotoExternal114):  func() TLObject { return NewTLInputMediaPhotoExternal114() },
    int32(TLConstructor_CRC32_inputMediaDocumentExternal114):  func() TLObject { return NewTLInputMediaDocumentExternal114() },
    int32(TLConstructor_CRC32_inputMediaInvoice114):  func() TLObject { return NewTLInputMediaInvoice114() },
    int32(TLConstructor_CRC32_inputMediaGeoLive114):  func() TLObject { return NewTLInputMediaGeoLive114() },
    int32(TLConstructor_CRC32_inputMediaPoll):  func() TLObject { return NewTLInputMediaPoll() },
    int32(TLConstructor_CRC32_inputMediaDice):  func() TLObject { return NewTLInputMediaDice() },
    int32(TLConstructor_CRC32_inputFileLocation114):  func() TLObject { return NewTLInputFileLocation114() },
    int32(TLConstructor_CRC32_inputDocumentFileLocation114):  func() TLObject { return NewTLInputDocumentFileLocation114() },
    int32(TLConstructor_CRC32_inputSecureFileLocation):  func() TLObject { return NewTLInputSecureFileLocation() },
    int32(TLConstructor_CRC32_inputTakeoutFileLocation):  func() TLObject { return NewTLInputTakeoutFileLocation() },
    int32(TLConstructor_CRC32_inputPhotoFileLocation):  func() TLObject { return NewTLInputPhotoFileLocation() },
    int32(TLConstructor_CRC32_inputPhotoLegacyFileLocation):  func() TLObject { return NewTLInputPhotoLegacyFileLocation() },
    int32(TLConstructor_CRC32_inputPeerPhotoFileLocation):  func() TLObject { return NewTLInputPeerPhotoFileLocation() },
    int32(TLConstructor_CRC32_inputStickerSetThumb):  func() TLObject { return NewTLInputStickerSetThumb() },
    int32(TLConstructor_CRC32_user114):  func() TLObject { return NewTLUser114() },
    int32(TLConstructor_CRC32_userProfilePhoto114):  func() TLObject { return NewTLUserProfilePhoto114() },
    int32(TLConstructor_CRC32_chat114):  func() TLObject { return NewTLChat114() },
    int32(TLConstructor_CRC32_channel114):  func() TLObject { return NewTLChannel114() },
    int32(TLConstructor_CRC32_chatFull114):  func() TLObject { return NewTLChatFull114() },
    int32(TLConstructor_CRC32_channelFull114):  func() TLObject { return NewTLChannelFull114() },
    int32(TLConstructor_CRC32_chatPhoto114):  func() TLObject { return NewTLChatPhoto114() },
    int32(TLConstructor_CRC32_message114):  func() TLObject { return NewTLMessage114() },
    int32(TLConstructor_CRC32_messageMediaPhoto114):  func() TLObject { return NewTLMessageMediaPhoto114() },
    int32(TLConstructor_CRC32_messageMediaContact114):  func() TLObject { return NewTLMessageMediaContact114() },
    int32(TLConstructor_CRC32_messageMediaDocument114):  func() TLObject { return NewTLMessageMediaDocument114() },
    int32(TLConstructor_CRC32_messageMediaVenue114):  func() TLObject { return NewTLMessageMediaVenue114() },
    int32(TLConstructor_CRC32_messageMediaPoll):  func() TLObject { return NewTLMessageMediaPoll() },
    int32(TLConstructor_CRC32_messageMediaDice):  func() TLObject { return NewTLMessageMediaDice() },
    int32(TLConstructor_CRC32_messageActionBotAllowed):  func() TLObject { return NewTLMessageActionBotAllowed() },
    int32(TLConstructor_CRC32_messageActionSecureValuesSentMe):  func() TLObject { return NewTLMessageActionSecureValuesSentMe() },
    int32(TLConstructor_CRC32_messageActionSecureValuesSent):  func() TLObject { return NewTLMessageActionSecureValuesSent() },
    int32(TLConstructor_CRC32_messageActionContactSignUp):  func() TLObject { return NewTLMessageActionContactSignUp() },
    int32(TLConstructor_CRC32_dialog114):  func() TLObject { return NewTLDialog114() },
    int32(TLConstructor_CRC32_dialogFolder):  func() TLObject { return NewTLDialogFolder() },
    int32(TLConstructor_CRC32_photo114):  func() TLObject { return NewTLPhoto114() },
    int32(TLConstructor_CRC32_photoStrippedSize):  func() TLObject { return NewTLPhotoStrippedSize() },
    int32(TLConstructor_CRC32_geoPoint114):  func() TLObject { return NewTLGeoPoint114() },
    int32(TLConstructor_CRC32_auth_authorizationSignUpRequired):  func() TLObject { return NewTLAuthAuthorizationSignUpRequired() },
    int32(TLConstructor_CRC32_inputNotifyBroadcasts):  func() TLObject { return NewTLInputNotifyBroadcasts() },
    int32(TLConstructor_CRC32_inputPeerNotifySettings114):  func() TLObject { return NewTLInputPeerNotifySettings114() },
    int32(TLConstructor_CRC32_peerNotifySettings114):  func() TLObject { return NewTLPeerNotifySettings114() },
    int32(TLConstructor_CRC32_wallPaper114):  func() TLObject { return NewTLWallPaper114() },
    int32(TLConstructor_CRC32_wallPaperNoFile):  func() TLObject { return NewTLWallPaperNoFile() },
    int32(TLConstructor_CRC32_inputReportReasonChildAbuse):  func() TLObject { return NewTLInputReportReasonChildAbuse() },
    int32(TLConstructor_CRC32_inputReportReasonCopyright):  func() TLObject { return NewTLInputReportReasonCopyright() },
    int32(TLConstructor_CRC32_inputReportReasonGeoIrrelevant):  func() TLObject { return NewTLInputReportReasonGeoIrrelevant() },
    int32(TLConstructor_CRC32_draftMessageEmpty114):  func() TLObject { return NewTLDraftMessageEmpty114() },
    int32(TLConstructor_CRC32_messages_dialogsNotModified):  func() TLObject { return NewTLMessagesDialogsNotModified() },
    int32(TLConstructor_CRC32_messages_messagesSlice114):  func() TLObject { return NewTLMessagesMessagesSlice114() },
    int32(TLConstructor_CRC32_messages_messagesNotModified):  func() TLObject { return NewTLMessagesMessagesNotModified() },
    int32(TLConstructor_CRC32_inputMessagesFilterGeo):  func() TLObject { return NewTLInputMessagesFilterGeo() },
    int32(TLConstructor_CRC32_inputMessagesFilterContacts):  func() TLObject { return NewTLInputMessagesFilterContacts() },
    int32(TLConstructor_CRC32_updateReadHistoryInbox114):  func() TLObject { return NewTLUpdateReadHistoryInbox114() },
    int32(TLConstructor_CRC32_updateReadChannelInbox114):  func() TLObject { return NewTLUpdateReadChannelInbox114() },
    int32(TLConstructor_CRC32_updateDialogPinned114):  func() TLObject { return NewTLUpdateDialogPinned114() },
    int32(TLConstructor_CRC32_updatePinnedDialogs114):  func() TLObject { return NewTLUpdatePinnedDialogs114() },
    int32(TLConstructor_CRC32_updateLangPackTooLong114):  func() TLObject { return NewTLUpdateLangPackTooLong114() },
    int32(TLConstructor_CRC32_updateDialogUnreadMark):  func() TLObject { return NewTLUpdateDialogUnreadMark() },
    int32(TLConstructor_CRC32_updateUserPinnedMessage):  func() TLObject { return NewTLUpdateUserPinnedMessage() },
    int32(TLConstructor_CRC32_updateChatPinnedMessage):  func() TLObject { return NewTLUpdateChatPinnedMessage() },
    int32(TLConstructor_CRC32_updateMessagePoll):  func() TLObject { return NewTLUpdateMessagePoll() },
    int32(TLConstructor_CRC32_updateChatDefaultBannedRights):  func() TLObject { return NewTLUpdateChatDefaultBannedRights() },
    int32(TLConstructor_CRC32_updateFolderPeers):  func() TLObject { return NewTLUpdateFolderPeers() },
    int32(TLConstructor_CRC32_updatePeerSettings):  func() TLObject { return NewTLUpdatePeerSettings() },
    int32(TLConstructor_CRC32_updatePeerLocated):  func() TLObject { return NewTLUpdatePeerLocated() },
    int32(TLConstructor_CRC32_updateNewScheduledMessage):  func() TLObject { return NewTLUpdateNewScheduledMessage() },
    int32(TLConstructor_CRC32_updateDeleteScheduledMessages):  func() TLObject { return NewTLUpdateDeleteScheduledMessages() },
    int32(TLConstructor_CRC32_updateTheme):  func() TLObject { return NewTLUpdateTheme() },
    int32(TLConstructor_CRC32_updateGeoLiveViewed):  func() TLObject { return NewTLUpdateGeoLiveViewed() },
    int32(TLConstructor_CRC32_updateLoginToken):  func() TLObject { return NewTLUpdateLoginToken() },
    int32(TLConstructor_CRC32_updateMessagePollVote):  func() TLObject { return NewTLUpdateMessagePollVote() },
    int32(TLConstructor_CRC32_updateDialogFilter):  func() TLObject { return NewTLUpdateDialogFilter() },
    int32(TLConstructor_CRC32_updateDialogFilterOrder):  func() TLObject { return NewTLUpdateDialogFilterOrder() },
    int32(TLConstructor_CRC32_updateDialogFilters):  func() TLObject { return NewTLUpdateDialogFilters() },
    int32(TLConstructor_CRC32_updatePhoneCallSignalingData):  func() TLObject { return NewTLUpdatePhoneCallSignalingData() },
    int32(TLConstructor_CRC32_upload_fileCdnRedirect114):  func() TLObject { return NewTLUploadFileCdnRedirect114() },
    int32(TLConstructor_CRC32_config114):  func() TLObject { return NewTLConfig114() },
    int32(TLConstructor_CRC32_help_appUpdate114):  func() TLObject { return NewTLHelpAppUpdate114() },
    int32(TLConstructor_CRC32_inputDocument114):  func() TLObject { return NewTLInputDocument114() },
    int32(TLConstructor_CRC32_document114):  func() TLObject { return NewTLDocument114() },
    int32(TLConstructor_CRC32_notifyBroadcasts):  func() TLObject { return NewTLNotifyBroadcasts() },
    int32(TLConstructor_CRC32_contacts_found114):  func() TLObject { return NewTLContactsFound114() },
    int32(TLConstructor_CRC32_inputPrivacyKeyPhoneP2P):  func() TLObject { return NewTLInputPrivacyKeyPhoneP2P() },
    int32(TLConstructor_CRC32_inputPrivacyKeyForwards):  func() TLObject { return NewTLInputPrivacyKeyForwards() },
    int32(TLConstructor_CRC32_inputPrivacyKeyProfilePhoto):  func() TLObject { return NewTLInputPrivacyKeyProfilePhoto() },
    int32(TLConstructor_CRC32_inputPrivacyKeyPhoneNumber):  func() TLObject { return NewTLInputPrivacyKeyPhoneNumber() },
    int32(TLConstructor_CRC32_inputPrivacyKeyAddedByPhone):  func() TLObject { return NewTLInputPrivacyKeyAddedByPhone() },
    int32(TLConstructor_CRC32_privacyKeyPhoneP2P):  func() TLObject { return NewTLPrivacyKeyPhoneP2P() },
    int32(TLConstructor_CRC32_privacyKeyForwards):  func() TLObject { return NewTLPrivacyKeyForwards() },
    int32(TLConstructor_CRC32_privacyKeyProfilePhoto):  func() TLObject { return NewTLPrivacyKeyProfilePhoto() },
    int32(TLConstructor_CRC32_privacyKeyPhoneNumber):  func() TLObject { return NewTLPrivacyKeyPhoneNumber() },
    int32(TLConstructor_CRC32_privacyKeyAddedByPhone):  func() TLObject { return NewTLPrivacyKeyAddedByPhone() },
    int32(TLConstructor_CRC32_inputPrivacyValueAllowChatParticipants):  func() TLObject { return NewTLInputPrivacyValueAllowChatParticipants() },
    int32(TLConstructor_CRC32_inputPrivacyValueDisallowChatParticipants):  func() TLObject { return NewTLInputPrivacyValueDisallowChatParticipants() },
    int32(TLConstructor_CRC32_privacyValueAllowChatParticipants):  func() TLObject { return NewTLPrivacyValueAllowChatParticipants() },
    int32(TLConstructor_CRC32_privacyValueDisallowChatParticipants):  func() TLObject { return NewTLPrivacyValueDisallowChatParticipants() },
    int32(TLConstructor_CRC32_account_privacyRules114):  func() TLObject { return NewTLAccountPrivacyRules114() },
    int32(TLConstructor_CRC32_messages_stickers114):  func() TLObject { return NewTLMessagesStickers114() },
    int32(TLConstructor_CRC32_webPage114):  func() TLObject { return NewTLWebPage114() },
    int32(TLConstructor_CRC32_webPageNotModified114):  func() TLObject { return NewTLWebPageNotModified114() },
    int32(TLConstructor_CRC32_authorization114):  func() TLObject { return NewTLAuthorization114() },
    int32(TLConstructor_CRC32_account_password114):  func() TLObject { return NewTLAccountPassword114() },
    int32(TLConstructor_CRC32_account_passwordSettings114):  func() TLObject { return NewTLAccountPasswordSettings114() },
    int32(TLConstructor_CRC32_account_passwordInputSettings114):  func() TLObject { return NewTLAccountPasswordInputSettings114() },
    int32(TLConstructor_CRC32_chatInvite114):  func() TLObject { return NewTLChatInvite114() },
    int32(TLConstructor_CRC32_inputStickerSetAnimatedEmoji):  func() TLObject { return NewTLInputStickerSetAnimatedEmoji() },
    int32(TLConstructor_CRC32_inputStickerSetDice):  func() TLObject { return NewTLInputStickerSetDice() },
    int32(TLConstructor_CRC32_stickerSet114):  func() TLObject { return NewTLStickerSet114() },
    int32(TLConstructor_CRC32_keyboardButtonUrlAuth):  func() TLObject { return NewTLKeyboardButtonUrlAuth() },
    int32(TLConstructor_CRC32_inputKeyboardButtonUrlAuth):  func() TLObject { return NewTLInputKeyboardButtonUrlAuth() },
    int32(TLConstructor_CRC32_keyboardButtonRequestPoll):  func() TLObject { return NewTLKeyboardButtonRequestPoll() },
    int32(TLConstructor_CRC32_messageEntityPhone):  func() TLObject { return NewTLMessageEntityPhone() },
    int32(TLConstructor_CRC32_messageEntityCashtag):  func() TLObject { return NewTLMessageEntityCashtag() },
    int32(TLConstructor_CRC32_messageEntityUnderline):  func() TLObject { return NewTLMessageEntityUnderline() },
    int32(TLConstructor_CRC32_messageEntityStrike):  func() TLObject { return NewTLMessageEntityStrike() },
    int32(TLConstructor_CRC32_messageEntityBlockquote):  func() TLObject { return NewTLMessageEntityBlockquote() },
    int32(TLConstructor_CRC32_messageEntityBankCard):  func() TLObject { return NewTLMessageEntityBankCard() },
    int32(TLConstructor_CRC32_inputChannelFromMessage):  func() TLObject { return NewTLInputChannelFromMessage() },
    int32(TLConstructor_CRC32_updates_channelDifferenceTooLong114):  func() TLObject { return NewTLUpdatesChannelDifferenceTooLong114() },
    int32(TLConstructor_CRC32_channelParticipantCreator114):  func() TLObject { return NewTLChannelParticipantCreator114() },
    int32(TLConstructor_CRC32_channelParticipantAdmin114):  func() TLObject { return NewTLChannelParticipantAdmin114() },
    int32(TLConstructor_CRC32_channelParticipantBanned114):  func() TLObject { return NewTLChannelParticipantBanned114() },
    int32(TLConstructor_CRC32_channelParticipantsContacts):  func() TLObject { return NewTLChannelParticipantsContacts() },
    int32(TLConstructor_CRC32_channels_channelParticipantsNotModified):  func() TLObject { return NewTLChannelsChannelParticipantsNotModified() },
    int32(TLConstructor_CRC32_help_termsOfService114):  func() TLObject { return NewTLHelpTermsOfService114() },
    int32(TLConstructor_CRC32_inputBotInlineMessageMediaAuto114):  func() TLObject { return NewTLInputBotInlineMessageMediaAuto114() },
    int32(TLConstructor_CRC32_inputBotInlineMessageMediaGeo114):  func() TLObject { return NewTLInputBotInlineMessageMediaGeo114() },
    int32(TLConstructor_CRC32_inputBotInlineMessageMediaVenue114):  func() TLObject { return NewTLInputBotInlineMessageMediaVenue114() },
    int32(TLConstructor_CRC32_inputBotInlineMessageMediaContact114):  func() TLObject { return NewTLInputBotInlineMessageMediaContact114() },
    int32(TLConstructor_CRC32_inputBotInlineResult114):  func() TLObject { return NewTLInputBotInlineResult114() },
    int32(TLConstructor_CRC32_botInlineMessageMediaAuto114):  func() TLObject { return NewTLBotInlineMessageMediaAuto114() },
    int32(TLConstructor_CRC32_botInlineMessageMediaGeo114):  func() TLObject { return NewTLBotInlineMessageMediaGeo114() },
    int32(TLConstructor_CRC32_botInlineMessageMediaVenue114):  func() TLObject { return NewTLBotInlineMessageMediaVenue114() },
    int32(TLConstructor_CRC32_botInlineMessageMediaContact114):  func() TLObject { return NewTLBotInlineMessageMediaContact114() },
    int32(TLConstructor_CRC32_botInlineResult114):  func() TLObject { return NewTLBotInlineResult114() },
    int32(TLConstructor_CRC32_exportedMessageLink114):  func() TLObject { return NewTLExportedMessageLink114() },
    int32(TLConstructor_CRC32_messageFwdHeader114):  func() TLObject { return NewTLMessageFwdHeader114() },
    int32(TLConstructor_CRC32_topPeerCategoryForwardUsers):  func() TLObject { return NewTLTopPeerCategoryForwardUsers() },
    int32(TLConstructor_CRC32_topPeerCategoryForwardChats):  func() TLObject { return NewTLTopPeerCategoryForwardChats() },
    int32(TLConstructor_CRC32_messages_featuredStickersNotModified114):  func() TLObject { return NewTLMessagesFeaturedStickersNotModified114() },
    int32(TLConstructor_CRC32_messages_featuredStickers114):  func() TLObject { return NewTLMessagesFeaturedStickers114() },
    int32(TLConstructor_CRC32_messages_recentStickers114):  func() TLObject { return NewTLMessagesRecentStickers114() },
    int32(TLConstructor_CRC32_textSubscript):  func() TLObject { return NewTLTextSubscript() },
    int32(TLConstructor_CRC32_textSuperscript):  func() TLObject { return NewTLTextSuperscript() },
    int32(TLConstructor_CRC32_textMarked):  func() TLObject { return NewTLTextMarked() },
    int32(TLConstructor_CRC32_textPhone):  func() TLObject { return NewTLTextPhone() },
    int32(TLConstructor_CRC32_textImage):  func() TLObject { return NewTLTextImage() },
    int32(TLConstructor_CRC32_textAnchor):  func() TLObject { return NewTLTextAnchor() },
    int32(TLConstructor_CRC32_pageBlockList114):  func() TLObject { return NewTLPageBlockList114() },
    int32(TLConstructor_CRC32_pageBlockPhoto114):  func() TLObject { return NewTLPageBlockPhoto114() },
    int32(TLConstructor_CRC32_pageBlockVideo114):  func() TLObject { return NewTLPageBlockVideo114() },
    int32(TLConstructor_CRC32_pageBlockEmbed114):  func() TLObject { return NewTLPageBlockEmbed114() },
    int32(TLConstructor_CRC32_pageBlockEmbedPost114):  func() TLObject { return NewTLPageBlockEmbedPost114() },
    int32(TLConstructor_CRC32_pageBlockCollage114):  func() TLObject { return NewTLPageBlockCollage114() },
    int32(TLConstructor_CRC32_pageBlockSlideshow114):  func() TLObject { return NewTLPageBlockSlideshow114() },
    int32(TLConstructor_CRC32_pageBlockAudio114):  func() TLObject { return NewTLPageBlockAudio114() },
    int32(TLConstructor_CRC32_pageBlockKicker):  func() TLObject { return NewTLPageBlockKicker() },
    int32(TLConstructor_CRC32_pageBlockTable):  func() TLObject { return NewTLPageBlockTable() },
    int32(TLConstructor_CRC32_pageBlockOrderedList):  func() TLObject { return NewTLPageBlockOrderedList() },
    int32(TLConstructor_CRC32_pageBlockDetails):  func() TLObject { return NewTLPageBlockDetails() },
    int32(TLConstructor_CRC32_pageBlockRelatedArticles):  func() TLObject { return NewTLPageBlockRelatedArticles() },
    int32(TLConstructor_CRC32_pageBlockMap):  func() TLObject { return NewTLPageBlockMap() },
    int32(TLConstructor_CRC32_webDocument114):  func() TLObject { return NewTLWebDocument114() },
    int32(TLConstructor_CRC32_webDocumentNoProxy):  func() TLObject { return NewTLWebDocumentNoProxy() },
    int32(TLConstructor_CRC32_inputWebFileGeoPointLocation):  func() TLObject { return NewTLInputWebFileGeoPointLocation() },
    int32(TLConstructor_CRC32_payments_paymentVerificationNeeded):  func() TLObject { return NewTLPaymentsPaymentVerificationNeeded() },
    int32(TLConstructor_CRC32_inputPaymentCredentialsApplePay):  func() TLObject { return NewTLInputPaymentCredentialsApplePay() },
    int32(TLConstructor_CRC32_inputPaymentCredentialsAndroidPay):  func() TLObject { return NewTLInputPaymentCredentialsAndroidPay() },
    int32(TLConstructor_CRC32_phoneCallRequested114):  func() TLObject { return NewTLPhoneCallRequested114() },
    int32(TLConstructor_CRC32_phoneCallAccepted114):  func() TLObject { return NewTLPhoneCallAccepted114() },
    int32(TLConstructor_CRC32_phoneCall114):  func() TLObject { return NewTLPhoneCall114() },
    int32(TLConstructor_CRC32_phoneCallProtocol114):  func() TLObject { return NewTLPhoneCallProtocol114() },
    int32(TLConstructor_CRC32_langPackLanguage114):  func() TLObject { return NewTLLangPackLanguage114() },
    int32(TLConstructor_CRC32_channelAdminLogEventActionChangePhoto114):  func() TLObject { return NewTLChannelAdminLogEventActionChangePhoto114() },
    int32(TLConstructor_CRC32_channelAdminLogEventActionDefaultBannedRights):  func() TLObject { return NewTLChannelAdminLogEventActionDefaultBannedRights() },
    int32(TLConstructor_CRC32_channelAdminLogEventActionStopPoll):  func() TLObject { return NewTLChannelAdminLogEventActionStopPoll() },
    int32(TLConstructor_CRC32_channelAdminLogEventActionChangeLinkedChat):  func() TLObject { return NewTLChannelAdminLogEventActionChangeLinkedChat() },
    int32(TLConstructor_CRC32_channelAdminLogEventActionChangeLocation):  func() TLObject { return NewTLChannelAdminLogEventActionChangeLocation() },
    int32(TLConstructor_CRC32_channelAdminLogEventActionToggleSlowMode):  func() TLObject { return NewTLChannelAdminLogEventActionToggleSlowMode() },
    int32(TLConstructor_CRC32_inputSingleMedia114):  func() TLObject { return NewTLInputSingleMedia114() },
    int32(TLConstructor_CRC32_webAuthorization):  func() TLObject { return NewTLWebAuthorization() },
    int32(TLConstructor_CRC32_account_webAuthorizations):  func() TLObject { return NewTLAccountWebAuthorizations() },
    int32(TLConstructor_CRC32_inputDialogPeerFolder):  func() TLObject { return NewTLInputDialogPeerFolder() },
    int32(TLConstructor_CRC32_dialogPeerFolder):  func() TLObject { return NewTLDialogPeerFolder() },
    int32(TLConstructor_CRC32_messages_foundStickerSetsNotModified):  func() TLObject { return NewTLMessagesFoundStickerSetsNotModified() },
    int32(TLConstructor_CRC32_messages_foundStickerSets):  func() TLObject { return NewTLMessagesFoundStickerSets() },
    int32(TLConstructor_CRC32_fileHash):  func() TLObject { return NewTLFileHash() },
    int32(TLConstructor_CRC32_inputSecureFileUploaded):  func() TLObject { return NewTLInputSecureFileUploaded() },
    int32(TLConstructor_CRC32_inputSecureFile):  func() TLObject { return NewTLInputSecureFile() },
    int32(TLConstructor_CRC32_secureFileEmpty):  func() TLObject { return NewTLSecureFileEmpty() },
    int32(TLConstructor_CRC32_secureFile):  func() TLObject { return NewTLSecureFile() },
    int32(TLConstructor_CRC32_secureData):  func() TLObject { return NewTLSecureData() },
    int32(TLConstructor_CRC32_securePlainPhone):  func() TLObject { return NewTLSecurePlainPhone() },
    int32(TLConstructor_CRC32_securePlainEmail):  func() TLObject { return NewTLSecurePlainEmail() },
    int32(TLConstructor_CRC32_secureValueTypePersonalDetails):  func() TLObject { return NewTLSecureValueTypePersonalDetails() },
    int32(TLConstructor_CRC32_secureValueTypePassport):  func() TLObject { return NewTLSecureValueTypePassport() },
    int32(TLConstructor_CRC32_secureValueTypeDriverLicense):  func() TLObject { return NewTLSecureValueTypeDriverLicense() },
    int32(TLConstructor_CRC32_secureValueTypeIdentityCard):  func() TLObject { return NewTLSecureValueTypeIdentityCard() },
    int32(TLConstructor_CRC32_secureValueTypeInternalPassport):  func() TLObject { return NewTLSecureValueTypeInternalPassport() },
    int32(TLConstructor_CRC32_secureValueTypeAddress):  func() TLObject { return NewTLSecureValueTypeAddress() },
    int32(TLConstructor_CRC32_secureValueTypeUtilityBill):  func() TLObject { return NewTLSecureValueTypeUtilityBill() },
    int32(TLConstructor_CRC32_secureValueTypeBankStatement):  func() TLObject { return NewTLSecureValueTypeBankStatement() },
    int32(TLConstructor_CRC32_secureValueTypeRentalAgreement):  func() TLObject { return NewTLSecureValueTypeRentalAgreement() },
    int32(TLConstructor_CRC32_secureValueTypePassportRegistration):  func() TLObject { return NewTLSecureValueTypePassportRegistration() },
    int32(TLConstructor_CRC32_secureValueTypeTemporaryRegistration):  func() TLObject { return NewTLSecureValueTypeTemporaryRegistration() },
    int32(TLConstructor_CRC32_secureValueTypePhone):  func() TLObject { return NewTLSecureValueTypePhone() },
    int32(TLConstructor_CRC32_secureValueTypeEmail):  func() TLObject { return NewTLSecureValueTypeEmail() },
    int32(TLConstructor_CRC32_secureValue):  func() TLObject { return NewTLSecureValue() },
    int32(TLConstructor_CRC32_inputSecureValue):  func() TLObject { return NewTLInputSecureValue() },
    int32(TLConstructor_CRC32_secureValueHash):  func() TLObject { return NewTLSecureValueHash() },
    int32(TLConstructor_CRC32_secureValueErrorData):  func() TLObject { return NewTLSecureValueErrorData() },
    int32(TLConstructor_CRC32_secureValueErrorFrontSide):  func() TLObject { return NewTLSecureValueErrorFrontSide() },
    int32(TLConstructor_CRC32_secureValueErrorReverseSide):  func() TLObject { return NewTLSecureValueErrorReverseSide() },
    int32(TLConstructor_CRC32_secureValueErrorSelfie):  func() TLObject { return NewTLSecureValueErrorSelfie() },
    int32(TLConstructor_CRC32_secureValueErrorFile):  func() TLObject { return NewTLSecureValueErrorFile() },
    int32(TLConstructor_CRC32_secureValueErrorFiles):  func() TLObject { return NewTLSecureValueErrorFiles() },
    int32(TLConstructor_CRC32_secureValueError):  func() TLObject { return NewTLSecureValueError() },
    int32(TLConstructor_CRC32_secureValueErrorTranslationFile):  func() TLObject { return NewTLSecureValueErrorTranslationFile() },
    int32(TLConstructor_CRC32_secureValueErrorTranslationFiles):  func() TLObject { return NewTLSecureValueErrorTranslationFiles() },
    int32(TLConstructor_CRC32_secureCredentialsEncrypted):  func() TLObject { return NewTLSecureCredentialsEncrypted() },
    int32(TLConstructor_CRC32_account_authorizationForm):  func() TLObject { return NewTLAccountAuthorizationForm() },
    int32(TLConstructor_CRC32_account_sentEmailCode):  func() TLObject { return NewTLAccountSentEmailCode() },
    int32(TLConstructor_CRC32_savedPhoneContact):  func() TLObject { return NewTLSavedPhoneContact() },
    int32(TLConstructor_CRC32_account_takeout):  func() TLObject { return NewTLAccountTakeout() },
    int32(TLConstructor_CRC32_passwordKdfAlgoUnknown):  func() TLObject { return NewTLPasswordKdfAlgoUnknown() },
    int32(TLConstructor_CRC32_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow):  func() TLObject { return NewTLPasswordKdfAlgo256() },
    int32(TLConstructor_CRC32_securePasswordKdfAlgoUnknown):  func() TLObject { return NewTLSecurePasswordKdfAlgoUnknown() },
    int32(TLConstructor_CRC32_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000):  func() TLObject { return NewTLSecurePasswordKdf512() },
    int32(TLConstructor_CRC32_securePasswordKdfAlgoSHA512):  func() TLObject { return NewTLSecurePasswordKdfAlgoSHA512() },
    int32(TLConstructor_CRC32_secureSecretSettings):  func() TLObject { return NewTLSecureSecretSettings() },
    int32(TLConstructor_CRC32_inputCheckPasswordEmpty):  func() TLObject { return NewTLInputCheckPasswordEmpty() },
    int32(TLConstructor_CRC32_inputCheckPasswordSRP):  func() TLObject { return NewTLInputCheckPasswordSRP() },
    int32(TLConstructor_CRC32_secureRequiredType):  func() TLObject { return NewTLSecureRequiredType() },
    int32(TLConstructor_CRC32_secureRequiredTypeOneOf):  func() TLObject { return NewTLSecureRequiredTypeOneOf() },
    int32(TLConstructor_CRC32_help_passportConfigNotModified):  func() TLObject { return NewTLHelpPassportConfigNotModified() },
    int32(TLConstructor_CRC32_help_passportConfig):  func() TLObject { return NewTLHelpPassportConfig() },
    int32(TLConstructor_CRC32_inputAppEvent114):  func() TLObject { return NewTLInputAppEvent114() },
    int32(TLConstructor_CRC32_jsonObjectValue):  func() TLObject { return NewTLJsonObjectValue() },
    int32(TLConstructor_CRC32_jsonNull):  func() TLObject { return NewTLJsonNull() },
    int32(TLConstructor_CRC32_jsonBool):  func() TLObject { return NewTLJsonBool() },
    int32(TLConstructor_CRC32_jsonNumber):  func() TLObject { return NewTLJsonNumber() },
    int32(TLConstructor_CRC32_jsonString):  func() TLObject { return NewTLJsonString() },
    int32(TLConstructor_CRC32_jsonArray):  func() TLObject { return NewTLJsonArray() },
    int32(TLConstructor_CRC32_jsonObject):  func() TLObject { return NewTLJsonObject() },
    int32(TLConstructor_CRC32_pageTableCell):  func() TLObject { return NewTLPageTableCell() },
    int32(TLConstructor_CRC32_pageTableRow):  func() TLObject { return NewTLPageTableRow() },
    int32(TLConstructor_CRC32_pageCaption):  func() TLObject { return NewTLPageCaption() },
    int32(TLConstructor_CRC32_pageListItemText):  func() TLObject { return NewTLPageListItemText() },
    int32(TLConstructor_CRC32_pageListItemBlocks):  func() TLObject { return NewTLPageListItemBlocks() },
    int32(TLConstructor_CRC32_pageListOrderedItemText):  func() TLObject { return NewTLPageListOrderedItemText() },
    int32(TLConstructor_CRC32_pageListOrderedItemBlocks):  func() TLObject { return NewTLPageListOrderedItemBlocks() },
    int32(TLConstructor_CRC32_pageRelatedArticle):  func() TLObject { return NewTLPageRelatedArticle() },
    int32(TLConstructor_CRC32_page):  func() TLObject { return NewTLPage() },
    int32(TLConstructor_CRC32_help_supportName):  func() TLObject { return NewTLHelpSupportName() },
    int32(TLConstructor_CRC32_help_userInfoEmpty):  func() TLObject { return NewTLHelpUserInfoEmpty() },
    int32(TLConstructor_CRC32_help_userInfo):  func() TLObject { return NewTLHelpUserInfo() },
    int32(TLConstructor_CRC32_pollAnswer):  func() TLObject { return NewTLPollAnswer() },
    int32(TLConstructor_CRC32_poll):  func() TLObject { return NewTLPoll() },
    int32(TLConstructor_CRC32_pollAnswerVoters):  func() TLObject { return NewTLPollAnswerVoters() },
    int32(TLConstructor_CRC32_pollResults):  func() TLObject { return NewTLPollResults() },
    int32(TLConstructor_CRC32_chatOnlines):  func() TLObject { return NewTLChatOnlines() },
    int32(TLConstructor_CRC32_statsURL):  func() TLObject { return NewTLStatsURL() },
    int32(TLConstructor_CRC32_chatAdminRights):  func() TLObject { return NewTLChatAdminRights() },
    int32(TLConstructor_CRC32_chatBannedRights):  func() TLObject { return NewTLChatBannedRights() },
    int32(TLConstructor_CRC32_inputWallPaper):  func() TLObject { return NewTLInputWallPaper() },
    int32(TLConstructor_CRC32_inputWallPaperSlug):  func() TLObject { return NewTLInputWallPaperSlug() },
    int32(TLConstructor_CRC32_inputWallPaperNoFile):  func() TLObject { return NewTLInputWallPaperNoFile() },
    int32(TLConstructor_CRC32_account_wallPapersNotModified):  func() TLObject { return NewTLAccountWallPapersNotModified() },
    int32(TLConstructor_CRC32_account_wallPapers):  func() TLObject { return NewTLAccountWallPapers() },
    int32(TLConstructor_CRC32_codeSettings):  func() TLObject { return NewTLCodeSettings() },
    int32(TLConstructor_CRC32_wallPaperSettings):  func() TLObject { return NewTLWallPaperSettings() },
    int32(TLConstructor_CRC32_autoDownloadSettings):  func() TLObject { return NewTLAutoDownloadSettings() },
    int32(TLConstructor_CRC32_account_autoDownloadSettings):  func() TLObject { return NewTLAccountAutoDownloadSettings() },
    int32(TLConstructor_CRC32_emojiKeyword):  func() TLObject { return NewTLEmojiKeyword() },
    int32(TLConstructor_CRC32_emojiKeywordDeleted):  func() TLObject { return NewTLEmojiKeywordDeleted() },
    int32(TLConstructor_CRC32_emojiKeywordsDifference):  func() TLObject { return NewTLEmojiKeywordsDifference() },
    int32(TLConstructor_CRC32_emojiURL):  func() TLObject { return NewTLEmojiURL() },
    int32(TLConstructor_CRC32_emojiLanguage):  func() TLObject { return NewTLEmojiLanguage() },
    int32(TLConstructor_CRC32_fileLocationToBeDeprecated):  func() TLObject { return NewTLFileLocationToBeDeprecated() },
    int32(TLConstructor_CRC32_folder):  func() TLObject { return NewTLFolder() },
    int32(TLConstructor_CRC32_inputFolderPeer):  func() TLObject { return NewTLInputFolderPeer() },
    int32(TLConstructor_CRC32_folderPeer):  func() TLObject { return NewTLFolderPeer() },
    int32(TLConstructor_CRC32_messages_SearchCounter):  func() TLObject { return NewTLMessages_SearchCounter() },
    int32(TLConstructor_CRC32_urlAuthResultRequest):  func() TLObject { return NewTLUrlAuthResultRequest() },
    int32(TLConstructor_CRC32_urlAuthResultAccepted):  func() TLObject { return NewTLUrlAuthResultAccepted() },
    int32(TLConstructor_CRC32_urlAuthResultDefault):  func() TLObject { return NewTLUrlAuthResultDefault() },
    int32(TLConstructor_CRC32_channelLocationEmpty):  func() TLObject { return NewTLChannelLocationEmpty() },
    int32(TLConstructor_CRC32_channelLocation):  func() TLObject { return NewTLChannelLocation() },
    int32(TLConstructor_CRC32_peerLocated):  func() TLObject { return NewTLPeerLocated() },
    int32(TLConstructor_CRC32_peerSelfLocated):  func() TLObject { return NewTLPeerSelfLocated() },
    int32(TLConstructor_CRC32_restrictionReason):  func() TLObject { return NewTLRestrictionReason() },
    int32(TLConstructor_CRC32_inputTheme):  func() TLObject { return NewTLInputTheme() },
    int32(TLConstructor_CRC32_inputThemeSlug):  func() TLObject { return NewTLInputThemeSlug() },
    int32(TLConstructor_CRC32_theme):  func() TLObject { return NewTLTheme() },
    int32(TLConstructor_CRC32_account_themesNotModified):  func() TLObject { return NewTLAccountThemesNotModified() },
    int32(TLConstructor_CRC32_account_themes):  func() TLObject { return NewTLAccountThemes() },
    int32(TLConstructor_CRC32_auth_loginToken):  func() TLObject { return NewTLAuthLoginToken() },
    int32(TLConstructor_CRC32_auth_loginTokenMigrateTo):  func() TLObject { return NewTLAuthLoginTokenMigrateTo() },
    int32(TLConstructor_CRC32_auth_loginTokenSuccess):  func() TLObject { return NewTLAuthLoginTokenSuccess() },
    int32(TLConstructor_CRC32_account_contentSettings):  func() TLObject { return NewTLAccountContentSettings() },
    int32(TLConstructor_CRC32_messages_inactiveChats):  func() TLObject { return NewTLMessagesInactiveChats() },
    int32(TLConstructor_CRC32_baseThemeClassic):  func() TLObject { return NewTLBaseThemeClassic() },
    int32(TLConstructor_CRC32_baseThemeDay):  func() TLObject { return NewTLBaseThemeDay() },
    int32(TLConstructor_CRC32_baseThemeNight):  func() TLObject { return NewTLBaseThemeNight() },
    int32(TLConstructor_CRC32_baseThemeTinted):  func() TLObject { return NewTLBaseThemeTinted() },
    int32(TLConstructor_CRC32_baseThemeArctic):  func() TLObject { return NewTLBaseThemeArctic() },
    int32(TLConstructor_CRC32_inputThemeSettings):  func() TLObject { return NewTLInputThemeSettings() },
    int32(TLConstructor_CRC32_themeSettings):  func() TLObject { return NewTLThemeSettings() },
    int32(TLConstructor_CRC32_webPageAttributeTheme):  func() TLObject { return NewTLWebPageAttributeTheme() },
    int32(TLConstructor_CRC32_messageUserVote):  func() TLObject { return NewTLMessageUserVote() },
    int32(TLConstructor_CRC32_messageUserVoteInputOption):  func() TLObject { return NewTLMessageUserVoteInputOption() },
    int32(TLConstructor_CRC32_messageUserVoteMultiple):  func() TLObject { return NewTLMessageUserVoteMultiple() },
    int32(TLConstructor_CRC32_messages_votesList):  func() TLObject { return NewTLMessagesVotesList() },
    int32(TLConstructor_CRC32_bankCardOpenUrl):  func() TLObject { return NewTLBankCardOpenUrl() },
    int32(TLConstructor_CRC32_payments_bankCardData):  func() TLObject { return NewTLPaymentsBankCardData() },
    int32(TLConstructor_CRC32_dialogFilter):  func() TLObject { return NewTLDialogFilter() },
    int32(TLConstructor_CRC32_dialogFilterSuggested):  func() TLObject { return NewTLDialogFilterSuggested() },
    int32(TLConstructor_CRC32_statsDateRangeDays):  func() TLObject { return NewTLStatsDateRangeDays() },
    int32(TLConstructor_CRC32_statsAbsValueAndPrev):  func() TLObject { return NewTLStatsAbsValueAndPrev() },
    int32(TLConstructor_CRC32_statsPercentValue):  func() TLObject { return NewTLStatsPercentValue() },
    int32(TLConstructor_CRC32_statsGraphAsync):  func() TLObject { return NewTLStatsGraphAsync() },
    int32(TLConstructor_CRC32_statsGraphError):  func() TLObject { return NewTLStatsGraphError() },
    int32(TLConstructor_CRC32_statsGraph):  func() TLObject { return NewTLStatsGraph() },
    int32(TLConstructor_CRC32_messageInteractionCounters):  func() TLObject { return NewTLMessageInteractionCounters() },
    int32(TLConstructor_CRC32_stats_broadcastStats):  func() TLObject { return NewTLStatsBroadcastStats() },
    int32(TLConstructor_CRC32_help_promoDataEmpty):  func() TLObject { return NewTLHelpPromoDataEmpty() },
    int32(TLConstructor_CRC32_help_promoData):  func() TLObject { return NewTLHelpPromoData() },
    int32(TLConstructor_CRC32_videoSize):  func() TLObject { return NewTLVideoSize() },
    int32(TLConstructor_CRC32_encryptedChatRequested117):  func() TLObject { return NewTLEncryptedChatRequested117() },
    int32(TLConstructor_CRC32_peerSettings117):  func() TLObject { return NewTLPeerSettings117() },
    int32(TLConstructor_CRC32_videoSize117):  func() TLObject { return NewTLVideoSize117() },
    int32(TLConstructor_CRC32_updateChannelParticipant):  func() TLObject { return NewTLUpdateChannelParticipant() },
    int32(TLConstructor_CRC32_statsGroupTopInviter):  func() TLObject { return NewTLStatsGroupTopInviter() },
    int32(TLConstructor_CRC32_inputChatUploadedPhoto117):  func() TLObject { return NewTLInputChatUploadedPhoto117() },
    int32(TLConstructor_CRC32_chatInvitePeek):  func() TLObject { return NewTLChatInvitePeek() },
    int32(TLConstructor_CRC32_statsGroupTopAdmin):  func() TLObject { return NewTLStatsGroupTopAdmin() },
    int32(TLConstructor_CRC32_globalPrivacySettings):  func() TLObject { return NewTLGlobalPrivacySettings() },
    int32(TLConstructor_CRC32_stats_megagroupStats):  func() TLObject { return NewTLStatsMegagroupStats() },
    int32(TLConstructor_CRC32_photo117):  func() TLObject { return NewTLPhoto117() },
    int32(TLConstructor_CRC32_chatPhoto117):  func() TLObject { return NewTLChatPhoto117() },
    int32(TLConstructor_CRC32_statsGroupTopPoster):  func() TLObject { return NewTLStatsGroupTopPoster() },
    int32(TLConstructor_CRC32_phoneConnectionWebrtc):  func() TLObject { return NewTLPhoneConnectionWebrtc() },
    int32(TLConstructor_CRC32_userProfilePhoto117):  func() TLObject { return NewTLUserProfilePhoto117() },
    int32(TLConstructor_CRC32_userFull117):  func() TLObject { return NewTLUserFull117() },
    int32(TLConstructor_CRC32_keyboardButtonCallback118):  func() TLObject { return NewTLKeyboardButtonCallback118() },
    int32(TLConstructor_CRC32_help_countryCode):  func() TLObject { return NewTLHelpCountryCode() },
    int32(TLConstructor_CRC32_help_country):  func() TLObject { return NewTLHelpCountry() },
    int32(TLConstructor_CRC32_help_countriesList):  func() TLObject { return NewTLHelpCountriesList() },
    int32(TLConstructor_CRC32_help_countriesListNotModified):  func() TLObject { return NewTLHelpCountriesListNotModified() },
    int32(TLConstructor_CRC32_updatePinnedChannelMessages):  func() TLObject { return NewTLUpdatePinnedChannelMessages() },
    int32(TLConstructor_CRC32_invokeAfterMsg):  func() TLObject { return NewTLInvokeAfterMsg() },
    int32(TLConstructor_CRC32_invokeAfterMsgs):  func() TLObject { return NewTLInvokeAfterMsgs() },
    int32(TLConstructor_CRC32_initConnection):  func() TLObject { return NewTLInitConnection() },
    int32(TLConstructor_CRC32_invokeWithLayer):  func() TLObject { return NewTLInvokeWithLayer() },
    int32(TLConstructor_CRC32_invokeWithoutUpdates):  func() TLObject { return NewTLInvokeWithoutUpdates() },
    int32(TLConstructor_CRC32_auth_checkPhone):  func() TLObject { return NewTLAuthCheckPhone() },
    int32(TLConstructor_CRC32_auth_sendCode):  func() TLObject { return NewTLAuthSendCode() },
    int32(TLConstructor_CRC32_auth_signUp):  func() TLObject { return NewTLAuthSignUp() },
    int32(TLConstructor_CRC32_auth_signIn):  func() TLObject { return NewTLAuthSignIn() },
    int32(TLConstructor_CRC32_auth_logOut):  func() TLObject { return NewTLAuthLogOut() },
    int32(TLConstructor_CRC32_auth_resetAuthorizations):  func() TLObject { return NewTLAuthResetAuthorizations() },
    int32(TLConstructor_CRC32_auth_sendInvites):  func() TLObject { return NewTLAuthSendInvites() },
    int32(TLConstructor_CRC32_auth_exportAuthorization):  func() TLObject { return NewTLAuthExportAuthorization() },
    int32(TLConstructor_CRC32_auth_importAuthorization):  func() TLObject { return NewTLAuthImportAuthorization() },
    int32(TLConstructor_CRC32_auth_bindTempAuthKey):  func() TLObject { return NewTLAuthBindTempAuthKey() },
    int32(TLConstructor_CRC32_auth_importBotAuthorization):  func() TLObject { return NewTLAuthImportBotAuthorization() },
    int32(TLConstructor_CRC32_auth_checkPassword):  func() TLObject { return NewTLAuthCheckPassword() },
    int32(TLConstructor_CRC32_auth_requestPasswordRecovery):  func() TLObject { return NewTLAuthRequestPasswordRecovery() },
    int32(TLConstructor_CRC32_auth_recoverPassword):  func() TLObject { return NewTLAuthRecoverPassword() },
    int32(TLConstructor_CRC32_auth_resendCode):  func() TLObject { return NewTLAuthResendCode() },
    int32(TLConstructor_CRC32_auth_cancelCode):  func() TLObject { return NewTLAuthCancelCode() },
    int32(TLConstructor_CRC32_auth_dropTempAuthKeys):  func() TLObject { return NewTLAuthDropTempAuthKeys() },
    int32(TLConstructor_CRC32_auth_checkInviteCode):  func() TLObject { return NewTLAuthCheckInviteCode() },
    int32(TLConstructor_CRC32_account_registerDevice):  func() TLObject { return NewTLAccountRegisterDevice() },
    int32(TLConstructor_CRC32_account_unregisterDevice):  func() TLObject { return NewTLAccountUnregisterDevice() },
    int32(TLConstructor_CRC32_account_updateNotifySettings):  func() TLObject { return NewTLAccountUpdateNotifySettings() },
    int32(TLConstructor_CRC32_account_getNotifySettings):  func() TLObject { return NewTLAccountGetNotifySettings() },
    int32(TLConstructor_CRC32_account_resetNotifySettings):  func() TLObject { return NewTLAccountResetNotifySettings() },
    int32(TLConstructor_CRC32_account_updateProfile):  func() TLObject { return NewTLAccountUpdateProfile() },
    int32(TLConstructor_CRC32_account_updateStatus):  func() TLObject { return NewTLAccountUpdateStatus() },
    int32(TLConstructor_CRC32_account_getWallPapers):  func() TLObject { return NewTLAccountGetWallPapers() },
    int32(TLConstructor_CRC32_account_reportPeer):  func() TLObject { return NewTLAccountReportPeer() },
    int32(TLConstructor_CRC32_account_checkUsername):  func() TLObject { return NewTLAccountCheckUsername() },
    int32(TLConstructor_CRC32_account_updateUsername):  func() TLObject { return NewTLAccountUpdateUsername() },
    int32(TLConstructor_CRC32_account_getPrivacy):  func() TLObject { return NewTLAccountGetPrivacy() },
    int32(TLConstructor_CRC32_account_setPrivacy):  func() TLObject { return NewTLAccountSetPrivacy() },
    int32(TLConstructor_CRC32_account_deleteAccount):  func() TLObject { return NewTLAccountDeleteAccount() },
    int32(TLConstructor_CRC32_account_getAccountTTL):  func() TLObject { return NewTLAccountGetAccountTTL() },
    int32(TLConstructor_CRC32_account_setAccountTTL):  func() TLObject { return NewTLAccountSetAccountTTL() },
    int32(TLConstructor_CRC32_account_sendChangePhoneCode):  func() TLObject { return NewTLAccountSendChangePhoneCode() },
    int32(TLConstructor_CRC32_account_changePhone):  func() TLObject { return NewTLAccountChangePhone() },
    int32(TLConstructor_CRC32_account_updateDeviceLocked):  func() TLObject { return NewTLAccountUpdateDeviceLocked() },
    int32(TLConstructor_CRC32_account_getAuthorizations):  func() TLObject { return NewTLAccountGetAuthorizations() },
    int32(TLConstructor_CRC32_account_resetAuthorization):  func() TLObject { return NewTLAccountResetAuthorization() },
    int32(TLConstructor_CRC32_account_getPassword):  func() TLObject { return NewTLAccountGetPassword() },
    int32(TLConstructor_CRC32_account_getPasswordSettings):  func() TLObject { return NewTLAccountGetPasswordSettings() },
    int32(TLConstructor_CRC32_account_updatePasswordSettings):  func() TLObject { return NewTLAccountUpdatePasswordSettings() },
    int32(TLConstructor_CRC32_account_sendConfirmPhoneCode):  func() TLObject { return NewTLAccountSendConfirmPhoneCode() },
    int32(TLConstructor_CRC32_account_confirmPhone):  func() TLObject { return NewTLAccountConfirmPhone() },
    int32(TLConstructor_CRC32_account_getTmpPassword):  func() TLObject { return NewTLAccountGetTmpPassword() },
    int32(TLConstructor_CRC32_users_getUsers):  func() TLObject { return NewTLUsersGetUsers() },
    int32(TLConstructor_CRC32_users_getFullUser):  func() TLObject { return NewTLUsersGetFullUser() },
    int32(TLConstructor_CRC32_users_getUserInfo):  func() TLObject { return NewTLUsersGetUserInfo() },
    int32(TLConstructor_CRC32_users_getUserInfoList):  func() TLObject { return NewTLUsersGetUserInfoList() },
    int32(TLConstructor_CRC32_users_getEnvelopeState):  func() TLObject { return NewTLUsersGetEnvelopeState() },
    int32(TLConstructor_CRC32_users_getEnvelopeInfo):  func() TLObject { return NewTLUsersGetEnvelopeInfo() },
    int32(TLConstructor_CRC32_users_getPointsHistory):  func() TLObject { return NewTLUsersGetPointsHistory() },
    int32(TLConstructor_CRC32_users_getPointsRank):  func() TLObject { return NewTLUsersGetPointsRank() },
    int32(TLConstructor_CRC32_users_setPasswd):  func() TLObject { return NewTLUsersSetPasswd() },
    int32(TLConstructor_CRC32_users_checkPasswd):  func() TLObject { return NewTLUsersCheckPasswd() },
    int32(TLConstructor_CRC32_users_checkResetPasswdPhoneCode):  func() TLObject { return NewTLUsersCheckResetPasswdPhoneCode() },
    int32(TLConstructor_CRC32_users_sendResetPasswdPhoneCode):  func() TLObject { return NewTLUsersSendResetPasswdPhoneCode() },
    int32(TLConstructor_CRC32_users_setGender):  func() TLObject { return NewTLUsersSetGender() },
    int32(TLConstructor_CRC32_users_setUserInfo):  func() TLObject { return NewTLUsersSetUserInfo() },
    int32(TLConstructor_CRC32_contacts_applyFriend):  func() TLObject { return NewTLContactsApplyFriend() },
    int32(TLConstructor_CRC32_contacts_auditApply):  func() TLObject { return NewTLContactsAuditApply() },
    int32(TLConstructor_CRC32_contacts_getApplyList):  func() TLObject { return NewTLContactsGetApplyList() },
    int32(TLConstructor_CRC32_contacts_searchUser):  func() TLObject { return NewTLContactsSearchUser() },
    int32(TLConstructor_CRC32_contacts_searchSource):  func() TLObject { return NewTLContactsSearchSource() },
    int32(TLConstructor_CRC32_contacts_getStatuses):  func() TLObject { return NewTLContactsGetStatuses() },
    int32(TLConstructor_CRC32_contacts_getContacts):  func() TLObject { return NewTLContactsGetContacts() },
    int32(TLConstructor_CRC32_contacts_importContacts):  func() TLObject { return NewTLContactsImportContacts() },
    int32(TLConstructor_CRC32_contacts_deleteContact):  func() TLObject { return NewTLContactsDeleteContact() },
    int32(TLConstructor_CRC32_contacts_deleteContacts):  func() TLObject { return NewTLContactsDeleteContacts() },
    int32(TLConstructor_CRC32_contacts_block):  func() TLObject { return NewTLContactsBlock() },
    int32(TLConstructor_CRC32_contacts_unblock):  func() TLObject { return NewTLContactsUnblock() },
    int32(TLConstructor_CRC32_contacts_getBlocked):  func() TLObject { return NewTLContactsGetBlocked() },
    int32(TLConstructor_CRC32_contacts_exportCard):  func() TLObject { return NewTLContactsExportCard() },
    int32(TLConstructor_CRC32_contacts_importCard):  func() TLObject { return NewTLContactsImportCard() },
    int32(TLConstructor_CRC32_contacts_search):  func() TLObject { return NewTLContactsSearch() },
    int32(TLConstructor_CRC32_contacts_resolveUsername):  func() TLObject { return NewTLContactsResolveUsername() },
    int32(TLConstructor_CRC32_contacts_getTopPeers):  func() TLObject { return NewTLContactsGetTopPeers() },
    int32(TLConstructor_CRC32_contacts_resetTopPeerRating):  func() TLObject { return NewTLContactsResetTopPeerRating() },
    int32(TLConstructor_CRC32_contacts_resetSaved):  func() TLObject { return NewTLContactsResetSaved() },
    int32(TLConstructor_CRC32_messages_getMessages):  func() TLObject { return NewTLMessagesGetMessages() },
    int32(TLConstructor_CRC32_messages_getDialogs):  func() TLObject { return NewTLMessagesGetDialogs() },
    int32(TLConstructor_CRC32_messages_getHistory):  func() TLObject { return NewTLMessagesGetHistory() },
    int32(TLConstructor_CRC32_messages_search):  func() TLObject { return NewTLMessagesSearch() },
    int32(TLConstructor_CRC32_messages_readHistory):  func() TLObject { return NewTLMessagesReadHistory() },
    int32(TLConstructor_CRC32_messages_deleteHistory):  func() TLObject { return NewTLMessagesDeleteHistory() },
    int32(TLConstructor_CRC32_messages_deleteMessages):  func() TLObject { return NewTLMessagesDeleteMessages() },
    int32(TLConstructor_CRC32_messages_receivedMessages):  func() TLObject { return NewTLMessagesReceivedMessages() },
    int32(TLConstructor_CRC32_messages_setTyping):  func() TLObject { return NewTLMessagesSetTyping() },
    int32(TLConstructor_CRC32_messages_sendMessage):  func() TLObject { return NewTLMessagesSendMessage() },
    int32(TLConstructor_CRC32_messages_sendMedia):  func() TLObject { return NewTLMessagesSendMedia() },
    int32(TLConstructor_CRC32_messages_forwardMessages):  func() TLObject { return NewTLMessagesForwardMessages() },
    int32(TLConstructor_CRC32_messages_reportSpam):  func() TLObject { return NewTLMessagesReportSpam() },
    int32(TLConstructor_CRC32_messages_hideReportSpam):  func() TLObject { return NewTLMessagesHideReportSpam() },
    int32(TLConstructor_CRC32_messages_getPeerSettings):  func() TLObject { return NewTLMessagesGetPeerSettings() },
    int32(TLConstructor_CRC32_messages_getChats):  func() TLObject { return NewTLMessagesGetChats() },
    int32(TLConstructor_CRC32_messages_getFullChat):  func() TLObject { return NewTLMessagesGetFullChat() },
    int32(TLConstructor_CRC32_messages_editChatTitle):  func() TLObject { return NewTLMessagesEditChatTitle() },
    int32(TLConstructor_CRC32_messages_editChatPhoto):  func() TLObject { return NewTLMessagesEditChatPhoto() },
    int32(TLConstructor_CRC32_messages_addChatUser):  func() TLObject { return NewTLMessagesAddChatUser() },
    int32(TLConstructor_CRC32_messages_deleteChatUser):  func() TLObject { return NewTLMessagesDeleteChatUser() },
    int32(TLConstructor_CRC32_messages_createChat):  func() TLObject { return NewTLMessagesCreateChat() },
    int32(TLConstructor_CRC32_messages_forwardMessage):  func() TLObject { return NewTLMessagesForwardMessage() },
    int32(TLConstructor_CRC32_messages_getDhConfig):  func() TLObject { return NewTLMessagesGetDhConfig() },
    int32(TLConstructor_CRC32_messages_requestEncryption):  func() TLObject { return NewTLMessagesRequestEncryption() },
    int32(TLConstructor_CRC32_messages_acceptEncryption):  func() TLObject { return NewTLMessagesAcceptEncryption() },
    int32(TLConstructor_CRC32_messages_discardEncryption):  func() TLObject { return NewTLMessagesDiscardEncryption() },
    int32(TLConstructor_CRC32_messages_setEncryptedTyping):  func() TLObject { return NewTLMessagesSetEncryptedTyping() },
    int32(TLConstructor_CRC32_messages_readEncryptedHistory):  func() TLObject { return NewTLMessagesReadEncryptedHistory() },
    int32(TLConstructor_CRC32_messages_sendEncrypted):  func() TLObject { return NewTLMessagesSendEncrypted() },
    int32(TLConstructor_CRC32_messages_sendEncryptedFile):  func() TLObject { return NewTLMessagesSendEncryptedFile() },
    int32(TLConstructor_CRC32_messages_sendEncryptedService):  func() TLObject { return NewTLMessagesSendEncryptedService() },
    int32(TLConstructor_CRC32_messages_receivedQueue):  func() TLObject { return NewTLMessagesReceivedQueue() },
    int32(TLConstructor_CRC32_messages_reportEncryptedSpam):  func() TLObject { return NewTLMessagesReportEncryptedSpam() },
    int32(TLConstructor_CRC32_messages_readMessageContents):  func() TLObject { return NewTLMessagesReadMessageContents() },
    int32(TLConstructor_CRC32_messages_getAllStickers):  func() TLObject { return NewTLMessagesGetAllStickers() },
    int32(TLConstructor_CRC32_messages_getWebPagePreview):  func() TLObject { return NewTLMessagesGetWebPagePreview() },
    int32(TLConstructor_CRC32_messages_exportChatInvite):  func() TLObject { return NewTLMessagesExportChatInvite() },
    int32(TLConstructor_CRC32_messages_checkChatInvite):  func() TLObject { return NewTLMessagesCheckChatInvite() },
    int32(TLConstructor_CRC32_messages_importChatInvite):  func() TLObject { return NewTLMessagesImportChatInvite() },
    int32(TLConstructor_CRC32_messages_getStickerSet):  func() TLObject { return NewTLMessagesGetStickerSet() },
    int32(TLConstructor_CRC32_messages_installStickerSet):  func() TLObject { return NewTLMessagesInstallStickerSet() },
    int32(TLConstructor_CRC32_messages_uninstallStickerSet):  func() TLObject { return NewTLMessagesUninstallStickerSet() },
    int32(TLConstructor_CRC32_messages_startBot):  func() TLObject { return NewTLMessagesStartBot() },
    int32(TLConstructor_CRC32_messages_getMessagesViews):  func() TLObject { return NewTLMessagesGetMessagesViews() },
    int32(TLConstructor_CRC32_messages_toggleChatAdmins):  func() TLObject { return NewTLMessagesToggleChatAdmins() },
    int32(TLConstructor_CRC32_messages_editChatAdmin):  func() TLObject { return NewTLMessagesEditChatAdmin() },
    int32(TLConstructor_CRC32_messages_migrateChat):  func() TLObject { return NewTLMessagesMigrateChat() },
    int32(TLConstructor_CRC32_messages_searchGlobal):  func() TLObject { return NewTLMessagesSearchGlobal() },
    int32(TLConstructor_CRC32_messages_reorderStickerSets):  func() TLObject { return NewTLMessagesReorderStickerSets() },
    int32(TLConstructor_CRC32_messages_getDocumentByHash):  func() TLObject { return NewTLMessagesGetDocumentByHash() },
    int32(TLConstructor_CRC32_messages_searchGifs):  func() TLObject { return NewTLMessagesSearchGifs() },
    int32(TLConstructor_CRC32_messages_getSavedGifs):  func() TLObject { return NewTLMessagesGetSavedGifs() },
    int32(TLConstructor_CRC32_messages_saveGif):  func() TLObject { return NewTLMessagesSaveGif() },
    int32(TLConstructor_CRC32_messages_getInlineBotResults):  func() TLObject { return NewTLMessagesGetInlineBotResults() },
    int32(TLConstructor_CRC32_messages_setInlineBotResults):  func() TLObject { return NewTLMessagesSetInlineBotResults() },
    int32(TLConstructor_CRC32_messages_sendInlineBotResult):  func() TLObject { return NewTLMessagesSendInlineBotResult() },
    int32(TLConstructor_CRC32_messages_getMessageEditData):  func() TLObject { return NewTLMessagesGetMessageEditData() },
    int32(TLConstructor_CRC32_messages_editMessage):  func() TLObject { return NewTLMessagesEditMessage() },
    int32(TLConstructor_CRC32_messages_editInlineBotMessage):  func() TLObject { return NewTLMessagesEditInlineBotMessage() },
    int32(TLConstructor_CRC32_messages_getBotCallbackAnswer):  func() TLObject { return NewTLMessagesGetBotCallbackAnswer() },
    int32(TLConstructor_CRC32_messages_setBotCallbackAnswer):  func() TLObject { return NewTLMessagesSetBotCallbackAnswer() },
    int32(TLConstructor_CRC32_messages_getPeerDialogs):  func() TLObject { return NewTLMessagesGetPeerDialogs() },
    int32(TLConstructor_CRC32_messages_saveDraft):  func() TLObject { return NewTLMessagesSaveDraft() },
    int32(TLConstructor_CRC32_messages_getAllDrafts):  func() TLObject { return NewTLMessagesGetAllDrafts() },
    int32(TLConstructor_CRC32_messages_getFeaturedStickers):  func() TLObject { return NewTLMessagesGetFeaturedStickers() },
    int32(TLConstructor_CRC32_messages_readFeaturedStickers):  func() TLObject { return NewTLMessagesReadFeaturedStickers() },
    int32(TLConstructor_CRC32_messages_getRecentStickers):  func() TLObject { return NewTLMessagesGetRecentStickers() },
    int32(TLConstructor_CRC32_messages_saveRecentSticker):  func() TLObject { return NewTLMessagesSaveRecentSticker() },
    int32(TLConstructor_CRC32_messages_clearRecentStickers):  func() TLObject { return NewTLMessagesClearRecentStickers() },
    int32(TLConstructor_CRC32_messages_getArchivedStickers):  func() TLObject { return NewTLMessagesGetArchivedStickers() },
    int32(TLConstructor_CRC32_messages_getMaskStickers):  func() TLObject { return NewTLMessagesGetMaskStickers() },
    int32(TLConstructor_CRC32_messages_getAttachedStickers):  func() TLObject { return NewTLMessagesGetAttachedStickers() },
    int32(TLConstructor_CRC32_messages_setGameScore):  func() TLObject { return NewTLMessagesSetGameScore() },
    int32(TLConstructor_CRC32_messages_setInlineGameScore):  func() TLObject { return NewTLMessagesSetInlineGameScore() },
    int32(TLConstructor_CRC32_messages_getGameHighScores):  func() TLObject { return NewTLMessagesGetGameHighScores() },
    int32(TLConstructor_CRC32_messages_getInlineGameHighScores):  func() TLObject { return NewTLMessagesGetInlineGameHighScores() },
    int32(TLConstructor_CRC32_messages_getCommonChats):  func() TLObject { return NewTLMessagesGetCommonChats() },
    int32(TLConstructor_CRC32_messages_getAllChats):  func() TLObject { return NewTLMessagesGetAllChats() },
    int32(TLConstructor_CRC32_messages_getWebPage):  func() TLObject { return NewTLMessagesGetWebPage() },
    int32(TLConstructor_CRC32_messages_toggleDialogPin):  func() TLObject { return NewTLMessagesToggleDialogPin() },
    int32(TLConstructor_CRC32_messages_reorderPinnedDialogs):  func() TLObject { return NewTLMessagesReorderPinnedDialogs() },
    int32(TLConstructor_CRC32_messages_getPinnedDialogs):  func() TLObject { return NewTLMessagesGetPinnedDialogs() },
    int32(TLConstructor_CRC32_messages_setBotShippingResults):  func() TLObject { return NewTLMessagesSetBotShippingResults() },
    int32(TLConstructor_CRC32_messages_setBotPrecheckoutResults):  func() TLObject { return NewTLMessagesSetBotPrecheckoutResults() },
    int32(TLConstructor_CRC32_messages_uploadMedia):  func() TLObject { return NewTLMessagesUploadMedia() },
    int32(TLConstructor_CRC32_messages_sendScreenshotNotification):  func() TLObject { return NewTLMessagesSendScreenshotNotification() },
    int32(TLConstructor_CRC32_messages_getFavedStickers):  func() TLObject { return NewTLMessagesGetFavedStickers() },
    int32(TLConstructor_CRC32_messages_faveSticker):  func() TLObject { return NewTLMessagesFaveSticker() },
    int32(TLConstructor_CRC32_messages_getUnreadMentions):  func() TLObject { return NewTLMessagesGetUnreadMentions() },
    int32(TLConstructor_CRC32_updates_getState):  func() TLObject { return NewTLUpdatesGetState() },
    int32(TLConstructor_CRC32_updates_getDifference):  func() TLObject { return NewTLUpdatesGetDifference() },
    int32(TLConstructor_CRC32_updates_getChannelDifference):  func() TLObject { return NewTLUpdatesGetChannelDifference() },
    int32(TLConstructor_CRC32_photos_updateProfilePhoto):  func() TLObject { return NewTLPhotosUpdateProfilePhoto() },
    int32(TLConstructor_CRC32_photos_uploadProfilePhoto):  func() TLObject { return NewTLPhotosUploadProfilePhoto() },
    int32(TLConstructor_CRC32_photos_deletePhotos):  func() TLObject { return NewTLPhotosDeletePhotos() },
    int32(TLConstructor_CRC32_photos_getUserPhotos):  func() TLObject { return NewTLPhotosGetUserPhotos() },
    int32(TLConstructor_CRC32_upload_saveFilePart):  func() TLObject { return NewTLUploadSaveFilePart() },
    int32(TLConstructor_CRC32_upload_getFile):  func() TLObject { return NewTLUploadGetFile() },
    int32(TLConstructor_CRC32_upload_saveBigFilePart):  func() TLObject { return NewTLUploadSaveBigFilePart() },
    int32(TLConstructor_CRC32_upload_getWebFile):  func() TLObject { return NewTLUploadGetWebFile() },
    int32(TLConstructor_CRC32_upload_getCdnFile):  func() TLObject { return NewTLUploadGetCdnFile() },
    int32(TLConstructor_CRC32_upload_reuploadCdnFile):  func() TLObject { return NewTLUploadReuploadCdnFile() },
    int32(TLConstructor_CRC32_upload_getCdnFileHashes):  func() TLObject { return NewTLUploadGetCdnFileHashes() },
    int32(TLConstructor_CRC32_help_getConfig):  func() TLObject { return NewTLHelpGetConfig() },
    int32(TLConstructor_CRC32_help_getNearestDc):  func() TLObject { return NewTLHelpGetNearestDc() },
    int32(TLConstructor_CRC32_help_getAppUpdate):  func() TLObject { return NewTLHelpGetAppUpdate() },
    int32(TLConstructor_CRC32_help_saveAppLog):  func() TLObject { return NewTLHelpSaveAppLog() },
    int32(TLConstructor_CRC32_help_getInviteText):  func() TLObject { return NewTLHelpGetInviteText() },
    int32(TLConstructor_CRC32_help_getSupport):  func() TLObject { return NewTLHelpGetSupport() },
    int32(TLConstructor_CRC32_help_getAppChangelog):  func() TLObject { return NewTLHelpGetAppChangelog() },
    int32(TLConstructor_CRC32_help_getTermsOfService):  func() TLObject { return NewTLHelpGetTermsOfService() },
    int32(TLConstructor_CRC32_help_setBotUpdatesStatus):  func() TLObject { return NewTLHelpSetBotUpdatesStatus() },
    int32(TLConstructor_CRC32_help_getCdnConfig):  func() TLObject { return NewTLHelpGetCdnConfig() },
    int32(TLConstructor_CRC32_channels_readHistory):  func() TLObject { return NewTLChannelsReadHistory() },
    int32(TLConstructor_CRC32_channels_deleteMessages):  func() TLObject { return NewTLChannelsDeleteMessages() },
    int32(TLConstructor_CRC32_channels_deleteUserHistory):  func() TLObject { return NewTLChannelsDeleteUserHistory() },
    int32(TLConstructor_CRC32_channels_reportSpam):  func() TLObject { return NewTLChannelsReportSpam() },
    int32(TLConstructor_CRC32_channels_getMessages):  func() TLObject { return NewTLChannelsGetMessages() },
    int32(TLConstructor_CRC32_channels_getParticipants):  func() TLObject { return NewTLChannelsGetParticipants() },
    int32(TLConstructor_CRC32_channels_getParticipant):  func() TLObject { return NewTLChannelsGetParticipant() },
    int32(TLConstructor_CRC32_channels_getChannels):  func() TLObject { return NewTLChannelsGetChannels() },
    int32(TLConstructor_CRC32_channels_getFullChannel):  func() TLObject { return NewTLChannelsGetFullChannel() },
    int32(TLConstructor_CRC32_channels_createChannel):  func() TLObject { return NewTLChannelsCreateChannel() },
    int32(TLConstructor_CRC32_channels_editAbout):  func() TLObject { return NewTLChannelsEditAbout() },
    int32(TLConstructor_CRC32_channels_editAdmin):  func() TLObject { return NewTLChannelsEditAdmin() },
    int32(TLConstructor_CRC32_channels_editTitle):  func() TLObject { return NewTLChannelsEditTitle() },
    int32(TLConstructor_CRC32_channels_editPhoto):  func() TLObject { return NewTLChannelsEditPhoto() },
    int32(TLConstructor_CRC32_channels_checkUsername):  func() TLObject { return NewTLChannelsCheckUsername() },
    int32(TLConstructor_CRC32_channels_updateUsername):  func() TLObject { return NewTLChannelsUpdateUsername() },
    int32(TLConstructor_CRC32_channels_joinChannel):  func() TLObject { return NewTLChannelsJoinChannel() },
    int32(TLConstructor_CRC32_channels_leaveChannel):  func() TLObject { return NewTLChannelsLeaveChannel() },
    int32(TLConstructor_CRC32_channels_inviteToChannel):  func() TLObject { return NewTLChannelsInviteToChannel() },
    int32(TLConstructor_CRC32_channels_exportInvite):  func() TLObject { return NewTLChannelsExportInvite() },
    int32(TLConstructor_CRC32_channels_deleteChannel):  func() TLObject { return NewTLChannelsDeleteChannel() },
    int32(TLConstructor_CRC32_channels_toggleInvites):  func() TLObject { return NewTLChannelsToggleInvites() },
    int32(TLConstructor_CRC32_channels_exportMessageLink):  func() TLObject { return NewTLChannelsExportMessageLink() },
    int32(TLConstructor_CRC32_channels_toggleSignatures):  func() TLObject { return NewTLChannelsToggleSignatures() },
    int32(TLConstructor_CRC32_channels_updatePinnedMessage):  func() TLObject { return NewTLChannelsUpdatePinnedMessage() },
    int32(TLConstructor_CRC32_channels_getAdminedPublicChannels):  func() TLObject { return NewTLChannelsGetAdminedPublicChannels() },
    int32(TLConstructor_CRC32_channels_editBanned):  func() TLObject { return NewTLChannelsEditBanned() },
    int32(TLConstructor_CRC32_channels_getAdminLog):  func() TLObject { return NewTLChannelsGetAdminLog() },
    int32(TLConstructor_CRC32_channels_setStickers):  func() TLObject { return NewTLChannelsSetStickers() },
    int32(TLConstructor_CRC32_channels_readMessageContents):  func() TLObject { return NewTLChannelsReadMessageContents() },
    int32(TLConstructor_CRC32_bots_sendCustomRequest):  func() TLObject { return NewTLBotsSendCustomRequest() },
    int32(TLConstructor_CRC32_bots_answerWebhookJSONQuery):  func() TLObject { return NewTLBotsAnswerWebhookJSONQuery() },
    int32(TLConstructor_CRC32_payments_getPaymentForm):  func() TLObject { return NewTLPaymentsGetPaymentForm() },
    int32(TLConstructor_CRC32_payments_getPaymentReceipt):  func() TLObject { return NewTLPaymentsGetPaymentReceipt() },
    int32(TLConstructor_CRC32_payments_validateRequestedInfo):  func() TLObject { return NewTLPaymentsValidateRequestedInfo() },
    int32(TLConstructor_CRC32_payments_sendPaymentForm):  func() TLObject { return NewTLPaymentsSendPaymentForm() },
    int32(TLConstructor_CRC32_payments_getSavedInfo):  func() TLObject { return NewTLPaymentsGetSavedInfo() },
    int32(TLConstructor_CRC32_payments_clearSavedInfo):  func() TLObject { return NewTLPaymentsClearSavedInfo() },
    int32(TLConstructor_CRC32_stickers_createStickerSet):  func() TLObject { return NewTLStickersCreateStickerSet() },
    int32(TLConstructor_CRC32_stickers_removeStickerFromSet):  func() TLObject { return NewTLStickersRemoveStickerFromSet() },
    int32(TLConstructor_CRC32_stickers_changeStickerPosition):  func() TLObject { return NewTLStickersChangeStickerPosition() },
    int32(TLConstructor_CRC32_stickers_addStickerToSet):  func() TLObject { return NewTLStickersAddStickerToSet() },
    int32(TLConstructor_CRC32_phone_getCallConfig):  func() TLObject { return NewTLPhoneGetCallConfig() },
    int32(TLConstructor_CRC32_phone_requestCall):  func() TLObject { return NewTLPhoneRequestCall() },
    int32(TLConstructor_CRC32_phone_acceptCall):  func() TLObject { return NewTLPhoneAcceptCall() },
    int32(TLConstructor_CRC32_phone_confirmCall):  func() TLObject { return NewTLPhoneConfirmCall() },
    int32(TLConstructor_CRC32_phone_receivedCall):  func() TLObject { return NewTLPhoneReceivedCall() },
    int32(TLConstructor_CRC32_phone_discardCall):  func() TLObject { return NewTLPhoneDiscardCall() },
    int32(TLConstructor_CRC32_phone_setCallRating):  func() TLObject { return NewTLPhoneSetCallRating() },
    int32(TLConstructor_CRC32_phone_saveCallDebug):  func() TLObject { return NewTLPhoneSaveCallDebug() },
    int32(TLConstructor_CRC32_langpack_getLangPack):  func() TLObject { return NewTLLangpackGetLangPack() },
    int32(TLConstructor_CRC32_langpack_getStrings):  func() TLObject { return NewTLLangpackGetStrings() },
    int32(TLConstructor_CRC32_langpack_getDifference):  func() TLObject { return NewTLLangpackGetDifference() },
    int32(TLConstructor_CRC32_langpack_getLanguages):  func() TLObject { return NewTLLangpackGetLanguages() },
    int32(TLConstructor_CRC32_updates_getChannelDifference57):  func() TLObject { return NewTLUpdatesGetChannelDifference57() },
    int32(TLConstructor_CRC32_auth_sendCode73):  func() TLObject { return NewTLAuthSendCode73() },
    int32(TLConstructor_CRC32_account_registerDevice73):  func() TLObject { return NewTLAccountRegisterDevice73() },
    int32(TLConstructor_CRC32_photos_updateProfilePhoto73):  func() TLObject { return NewTLPhotosUpdateProfilePhoto73() },
    int32(TLConstructor_CRC32_photos_uploadProfilePhoto73):  func() TLObject { return NewTLPhotosUploadProfilePhoto73() },
    int32(TLConstructor_CRC32_help_getWkConfig):  func() TLObject { return NewTLHelpGetWkConfig() },
    int32(TLConstructor_CRC32_help_getJsonConfig):  func() TLObject { return NewTLHelpGetJsonConfig() },
    int32(TLConstructor_CRC32_help_getScheme):  func() TLObject { return NewTLHelpGetScheme() },
    int32(TLConstructor_CRC32_help_getAppUpdate73):  func() TLObject { return NewTLHelpGetAppUpdate73() },
    int32(TLConstructor_CRC32_help_getInviteText73):  func() TLObject { return NewTLHelpGetInviteText73() },
    int32(TLConstructor_CRC32_help_getRecentMeUrls):  func() TLObject { return NewTLHelpGetRecentMeUrls() },
    int32(TLConstructor_CRC32_help_getTermsOfService73):  func() TLObject { return NewTLHelpGetTermsOfService73() },
    int32(TLConstructor_CRC32_messages_readHistory73):  func() TLObject { return NewTLMessagesReadHistory73() },
    int32(TLConstructor_CRC32_messages_editMessage73):  func() TLObject { return NewTLMessagesEditMessage73() },
    int32(TLConstructor_CRC32_messages_search73):  func() TLObject { return NewTLMessagesSearch73() },
    int32(TLConstructor_CRC32_messages_readMentions):  func() TLObject { return NewTLMessagesReadMentions() },
    int32(TLConstructor_CRC32_messages_getRecentLocations):  func() TLObject { return NewTLMessagesGetRecentLocations() },
    int32(TLConstructor_CRC32_messages_sendMultiMedia):  func() TLObject { return NewTLMessagesSendMultiMedia() },
    int32(TLConstructor_CRC32_messages_uploadEncryptedFile):  func() TLObject { return NewTLMessagesUploadEncryptedFile() },
    int32(TLConstructor_CRC32_messages_saveRecentSticker73):  func() TLObject { return NewTLMessagesSaveRecentSticker73() },
    int32(TLConstructor_CRC32_channels_deleteHistory):  func() TLObject { return NewTLChannelsDeleteHistory() },
    int32(TLConstructor_CRC32_channels_togglePreHistoryHidden):  func() TLObject { return NewTLChannelsTogglePreHistoryHidden() },
    int32(TLConstructor_CRC32_channels_getParticipants73):  func() TLObject { return NewTLChannelsGetParticipants73() },
    int32(TLConstructor_CRC32_channels_editBanned2):  func() TLObject { return NewTLChannelsEditBanned2() },
    int32(TLConstructor_CRC32_channels_getBanned2):  func() TLObject { return NewTLChannelsGetBanned2() },
    int32(TLConstructor_CRC32_phone_WebrtcCreateOffer):  func() TLObject { return NewTLPhone_WebrtcCreateOffer() },
    int32(TLConstructor_CRC32_phone_WebrtcCreateAnswer):  func() TLObject { return NewTLPhone_WebrtcCreateAnswer() },
    int32(TLConstructor_CRC32_phone_WebrtcAddCandidate):  func() TLObject { return NewTLPhone_WebrtcAddCandidate() },
    int32(TLConstructor_CRC32_initConnection82):  func() TLObject { return NewTLInitConnection82() },
    int32(TLConstructor_CRC32_help_getTermsOfServiceUpdate):  func() TLObject { return NewTLHelpGetTermsOfServiceUpdate() },
    int32(TLConstructor_CRC32_help_acceptTermsOfService):  func() TLObject { return NewTLHelpAcceptTermsOfService() },
    int32(TLConstructor_CRC32_help_getDeepLinkInfo):  func() TLObject { return NewTLHelpGetDeepLinkInfo() },
    int32(TLConstructor_CRC32_help_test):  func() TLObject { return NewTLHelpTest() },
    int32(TLConstructor_CRC32_messages_getPeerDialogs82):  func() TLObject { return NewTLMessagesGetPeerDialogs82() },
    int32(TLConstructor_CRC32_messages_getMessages82):  func() TLObject { return NewTLMessagesGetMessages82() },
    int32(TLConstructor_CRC32_messages_getDialogs82):  func() TLObject { return NewTLMessagesGetDialogs82() },
    int32(TLConstructor_CRC32_messages_getHistory82):  func() TLObject { return NewTLMessagesGetHistory82() },
    int32(TLConstructor_CRC32_messages_search82):  func() TLObject { return NewTLMessagesSearch82() },
    int32(TLConstructor_CRC32_messages_sendMedia82):  func() TLObject { return NewTLMessagesSendMedia82() },
    int32(TLConstructor_CRC32_initConnection114):  func() TLObject { return NewTLInitConnection114() },
    int32(TLConstructor_CRC32_invokeWithMessagesRange):  func() TLObject { return NewTLInvokeWithMessagesRange() },
    int32(TLConstructor_CRC32_invokeWithTakeout):  func() TLObject { return NewTLInvokeWithTakeout() },
    int32(TLConstructor_CRC32_auth_sendCode114):  func() TLObject { return NewTLAuthSendCode114() },
    int32(TLConstructor_CRC32_auth_signUp114):  func() TLObject { return NewTLAuthSignUp114() },
    int32(TLConstructor_CRC32_auth_checkPassword114):  func() TLObject { return NewTLAuthCheckPassword114() },
    int32(TLConstructor_CRC32_auth_exportLoginToken):  func() TLObject { return NewTLAuthExportLoginToken() },
    int32(TLConstructor_CRC32_auth_importLoginToken):  func() TLObject { return NewTLAuthImportLoginToken() },
    int32(TLConstructor_CRC32_auth_acceptLoginToken):  func() TLObject { return NewTLAuthAcceptLoginToken() },
    int32(TLConstructor_CRC32_account_registerDevice114):  func() TLObject { return NewTLAccountRegisterDevice114() },
    int32(TLConstructor_CRC32_account_unregisterDevice114):  func() TLObject { return NewTLAccountUnregisterDevice114() },
    int32(TLConstructor_CRC32_account_getWallPapers114):  func() TLObject { return NewTLAccountGetWallPapers114() },
    int32(TLConstructor_CRC32_account_sendChangePhoneCode114):  func() TLObject { return NewTLAccountSendChangePhoneCode114() },
    int32(TLConstructor_CRC32_account_getPasswordSettings114):  func() TLObject { return NewTLAccountGetPasswordSettings114() },
    int32(TLConstructor_CRC32_account_updatePasswordSettings114):  func() TLObject { return NewTLAccountUpdatePasswordSettings114() },
    int32(TLConstructor_CRC32_account_sendConfirmPhoneCode114):  func() TLObject { return NewTLAccountSendConfirmPhoneCode114() },
    int32(TLConstructor_CRC32_account_getTmpPassword114):  func() TLObject { return NewTLAccountGetTmpPassword114() },
    int32(TLConstructor_CRC32_account_getWebAuthorizations):  func() TLObject { return NewTLAccountGetWebAuthorizations() },
    int32(TLConstructor_CRC32_account_resetWebAuthorization):  func() TLObject { return NewTLAccountResetWebAuthorization() },
    int32(TLConstructor_CRC32_account_resetWebAuthorizations):  func() TLObject { return NewTLAccountResetWebAuthorizations() },
    int32(TLConstructor_CRC32_account_getAllSecureValues):  func() TLObject { return NewTLAccountGetAllSecureValues() },
    int32(TLConstructor_CRC32_account_getSecureValue):  func() TLObject { return NewTLAccountGetSecureValue() },
    int32(TLConstructor_CRC32_account_saveSecureValue):  func() TLObject { return NewTLAccountSaveSecureValue() },
    int32(TLConstructor_CRC32_account_deleteSecureValue):  func() TLObject { return NewTLAccountDeleteSecureValue() },
    int32(TLConstructor_CRC32_account_getAuthorizationForm):  func() TLObject { return NewTLAccountGetAuthorizationForm() },
    int32(TLConstructor_CRC32_account_acceptAuthorization):  func() TLObject { return NewTLAccountAcceptAuthorization() },
    int32(TLConstructor_CRC32_account_sendVerifyPhoneCode):  func() TLObject { return NewTLAccountSendVerifyPhoneCode() },
    int32(TLConstructor_CRC32_account_verifyPhone):  func() TLObject { return NewTLAccountVerifyPhone() },
    int32(TLConstructor_CRC32_account_sendVerifyEmailCode):  func() TLObject { return NewTLAccountSendVerifyEmailCode() },
    int32(TLConstructor_CRC32_account_verifyEmail):  func() TLObject { return NewTLAccountVerifyEmail() },
    int32(TLConstructor_CRC32_account_initTakeoutSession):  func() TLObject { return NewTLAccountInitTakeoutSession() },
    int32(TLConstructor_CRC32_account_finishTakeoutSession):  func() TLObject { return NewTLAccountFinishTakeoutSession() },
    int32(TLConstructor_CRC32_account_confirmPasswordEmail):  func() TLObject { return NewTLAccountConfirmPasswordEmail() },
    int32(TLConstructor_CRC32_account_resendPasswordEmail):  func() TLObject { return NewTLAccountResendPasswordEmail() },
    int32(TLConstructor_CRC32_account_cancelPasswordEmail):  func() TLObject { return NewTLAccountCancelPasswordEmail() },
    int32(TLConstructor_CRC32_account_getContactSignUpNotification):  func() TLObject { return NewTLAccountGetContactSignUpNotification() },
    int32(TLConstructor_CRC32_account_setContactSignUpNotification):  func() TLObject { return NewTLAccountSetContactSignUpNotification() },
    int32(TLConstructor_CRC32_account_getNotifyExceptions):  func() TLObject { return NewTLAccountGetNotifyExceptions() },
    int32(TLConstructor_CRC32_account_getWallPaper):  func() TLObject { return NewTLAccountGetWallPaper() },
    int32(TLConstructor_CRC32_account_uploadWallPaper):  func() TLObject { return NewTLAccountUploadWallPaper() },
    int32(TLConstructor_CRC32_account_saveWallPaper):  func() TLObject { return NewTLAccountSaveWallPaper() },
    int32(TLConstructor_CRC32_account_installWallPaper):  func() TLObject { return NewTLAccountInstallWallPaper() },
    int32(TLConstructor_CRC32_account_resetWallPapers):  func() TLObject { return NewTLAccountResetWallPapers() },
    int32(TLConstructor_CRC32_account_getAutoDownloadSettings):  func() TLObject { return NewTLAccountGetAutoDownloadSettings() },
    int32(TLConstructor_CRC32_account_saveAutoDownloadSettings):  func() TLObject { return NewTLAccountSaveAutoDownloadSettings() },
    int32(TLConstructor_CRC32_account_uploadTheme):  func() TLObject { return NewTLAccountUploadTheme() },
    int32(TLConstructor_CRC32_account_createTheme):  func() TLObject { return NewTLAccountCreateTheme() },
    int32(TLConstructor_CRC32_account_updateTheme):  func() TLObject { return NewTLAccountUpdateTheme() },
    int32(TLConstructor_CRC32_account_saveTheme):  func() TLObject { return NewTLAccountSaveTheme() },
    int32(TLConstructor_CRC32_account_installTheme):  func() TLObject { return NewTLAccountInstallTheme() },
    int32(TLConstructor_CRC32_account_getTheme):  func() TLObject { return NewTLAccountGetTheme() },
    int32(TLConstructor_CRC32_account_getThemes):  func() TLObject { return NewTLAccountGetThemes() },
    int32(TLConstructor_CRC32_account_setContentSettings):  func() TLObject { return NewTLAccountSetContentSettings() },
    int32(TLConstructor_CRC32_account_getContentSettings):  func() TLObject { return NewTLAccountGetContentSettings() },
    int32(TLConstructor_CRC32_account_getMultiWallPapers):  func() TLObject { return NewTLAccountGetMultiWallPapers() },
    int32(TLConstructor_CRC32_users_setSecureValueErrors):  func() TLObject { return NewTLUsersSetSecureValueErrors() },
    int32(TLConstructor_CRC32_contacts_getContactIDs):  func() TLObject { return NewTLContactsGetContactIDs() },
    int32(TLConstructor_CRC32_contacts_deleteContacts114):  func() TLObject { return NewTLContactsDeleteContacts114() },
    int32(TLConstructor_CRC32_contacts_deleteByPhones):  func() TLObject { return NewTLContactsDeleteByPhones() },
    int32(TLConstructor_CRC32_contacts_getSaved):  func() TLObject { return NewTLContactsGetSaved() },
    int32(TLConstructor_CRC32_contacts_toggleTopPeers):  func() TLObject { return NewTLContactsToggleTopPeers() },
    int32(TLConstructor_CRC32_contacts_addContact):  func() TLObject { return NewTLContactsAddContact() },
    int32(TLConstructor_CRC32_contacts_acceptContact):  func() TLObject { return NewTLContactsAcceptContact() },
    int32(TLConstructor_CRC32_contacts_getLocated):  func() TLObject { return NewTLContactsGetLocated() },
    int32(TLConstructor_CRC32_messages_getDialogs114):  func() TLObject { return NewTLMessagesGetDialogs114() },
    int32(TLConstructor_CRC32_messages_sendMessage114):  func() TLObject { return NewTLMessagesSendMessage114() },
    int32(TLConstructor_CRC32_messages_sendMedia114):  func() TLObject { return NewTLMessagesSendMedia114() },
    int32(TLConstructor_CRC32_messages_forwardMessages114):  func() TLObject { return NewTLMessagesForwardMessages114() },
    int32(TLConstructor_CRC32_messages_report):  func() TLObject { return NewTLMessagesReport() },
    int32(TLConstructor_CRC32_messages_getStickers):  func() TLObject { return NewTLMessagesGetStickers() },
    int32(TLConstructor_CRC32_messages_getWebPagePreview114):  func() TLObject { return NewTLMessagesGetWebPagePreview114() },
    int32(TLConstructor_CRC32_messages_exportChatInvite114):  func() TLObject { return NewTLMessagesExportChatInvite114() },
    int32(TLConstructor_CRC32_messages_searchGlobal114):  func() TLObject { return NewTLMessagesSearchGlobal114() },
    int32(TLConstructor_CRC32_messages_sendInlineBotResult114):  func() TLObject { return NewTLMessagesSendInlineBotResult114() },
    int32(TLConstructor_CRC32_messages_editMessage114):  func() TLObject { return NewTLMessagesEditMessage114() },
    int32(TLConstructor_CRC32_messages_editInlineBotMessage114):  func() TLObject { return NewTLMessagesEditInlineBotMessage114() },
    int32(TLConstructor_CRC32_messages_toggleDialogPin114):  func() TLObject { return NewTLMessagesToggleDialogPin114() },
    int32(TLConstructor_CRC32_messages_reorderPinnedDialogs114):  func() TLObject { return NewTLMessagesReorderPinnedDialogs114() },
    int32(TLConstructor_CRC32_messages_getPinnedDialogs114):  func() TLObject { return NewTLMessagesGetPinnedDialogs114() },
    int32(TLConstructor_CRC32_messages_getRecentLocations114):  func() TLObject { return NewTLMessagesGetRecentLocations114() },
    int32(TLConstructor_CRC32_messages_sendMultiMedia114):  func() TLObject { return NewTLMessagesSendMultiMedia114() },
    int32(TLConstructor_CRC32_messages_searchStickerSets):  func() TLObject { return NewTLMessagesSearchStickerSets() },
    int32(TLConstructor_CRC32_messages_getSplitRanges):  func() TLObject { return NewTLMessagesGetSplitRanges() },
    int32(TLConstructor_CRC32_messages_markDialogUnread):  func() TLObject { return NewTLMessagesMarkDialogUnread() },
    int32(TLConstructor_CRC32_messages_getDialogUnreadMarks):  func() TLObject { return NewTLMessagesGetDialogUnreadMarks() },
    int32(TLConstructor_CRC32_messages_clearAllDrafts):  func() TLObject { return NewTLMessagesClearAllDrafts() },
    int32(TLConstructor_CRC32_messages_updatePinnedMessage):  func() TLObject { return NewTLMessagesUpdatePinnedMessage() },
    int32(TLConstructor_CRC32_messages_sendVote):  func() TLObject { return NewTLMessagesSendVote() },
    int32(TLConstructor_CRC32_messages_getPollResults):  func() TLObject { return NewTLMessagesGetPollResults() },
    int32(TLConstructor_CRC32_messages_getOnlines):  func() TLObject { return NewTLMessagesGetOnlines() },
    int32(TLConstructor_CRC32_messages_getStatsURL):  func() TLObject { return NewTLMessagesGetStatsURL() },
    int32(TLConstructor_CRC32_messages_editChatAbout):  func() TLObject { return NewTLMessagesEditChatAbout() },
    int32(TLConstructor_CRC32_messages_editChatDefaultBannedRights):  func() TLObject { return NewTLMessagesEditChatDefaultBannedRights() },
    int32(TLConstructor_CRC32_messages_getEmojiKeywords):  func() TLObject { return NewTLMessagesGetEmojiKeywords() },
    int32(TLConstructor_CRC32_messages_getEmojiKeywordsDifference):  func() TLObject { return NewTLMessagesGetEmojiKeywordsDifference() },
    int32(TLConstructor_CRC32_messages_getEmojiKeywordsLanguages):  func() TLObject { return NewTLMessagesGetEmojiKeywordsLanguages() },
    int32(TLConstructor_CRC32_messages_getEmojiURL):  func() TLObject { return NewTLMessagesGetEmojiURL() },
    int32(TLConstructor_CRC32_messages_getSearchCounters):  func() TLObject { return NewTLMessagesGetSearchCounters() },
    int32(TLConstructor_CRC32_messages_requestUrlAuth):  func() TLObject { return NewTLMessagesRequestUrlAuth() },
    int32(TLConstructor_CRC32_messages_acceptUrlAuth):  func() TLObject { return NewTLMessagesAcceptUrlAuth() },
    int32(TLConstructor_CRC32_messages_hidePeerSettingsBar):  func() TLObject { return NewTLMessagesHidePeerSettingsBar() },
    int32(TLConstructor_CRC32_messages_getScheduledHistory):  func() TLObject { return NewTLMessagesGetScheduledHistory() },
    int32(TLConstructor_CRC32_messages_getScheduledMessages):  func() TLObject { return NewTLMessagesGetScheduledMessages() },
    int32(TLConstructor_CRC32_messages_sendScheduledMessages):  func() TLObject { return NewTLMessagesSendScheduledMessages() },
    int32(TLConstructor_CRC32_messages_deleteScheduledMessages):  func() TLObject { return NewTLMessagesDeleteScheduledMessages() },
    int32(TLConstructor_CRC32_messages_getPollVotes):  func() TLObject { return NewTLMessagesGetPollVotes() },
    int32(TLConstructor_CRC32_messages_toggleStickerSets):  func() TLObject { return NewTLMessagesToggleStickerSets() },
    int32(TLConstructor_CRC32_messages_getDialogFilters):  func() TLObject { return NewTLMessagesGetDialogFilters() },
    int32(TLConstructor_CRC32_messages_getSuggestedDialogFilters):  func() TLObject { return NewTLMessagesGetSuggestedDialogFilters() },
    int32(TLConstructor_CRC32_messages_updateDialogFilter):  func() TLObject { return NewTLMessagesUpdateDialogFilter() },
    int32(TLConstructor_CRC32_messages_updateDialogFiltersOrder):  func() TLObject { return NewTLMessagesUpdateDialogFiltersOrder() },
    int32(TLConstructor_CRC32_messages_getOldFeaturedStickers):  func() TLObject { return NewTLMessagesGetOldFeaturedStickers() },
    int32(TLConstructor_CRC32_upload_getFile114):  func() TLObject { return NewTLUploadGetFile114() },
    int32(TLConstructor_CRC32_upload_reuploadCdnFile114):  func() TLObject { return NewTLUploadReuploadCdnFile114() },
    int32(TLConstructor_CRC32_upload_getCdnFileHashes114):  func() TLObject { return NewTLUploadGetCdnFileHashes114() },
    int32(TLConstructor_CRC32_upload_getFileHashes):  func() TLObject { return NewTLUploadGetFileHashes() },
    int32(TLConstructor_CRC32_help_getAppUpdate114):  func() TLObject { return NewTLHelpGetAppUpdate114() },
    int32(TLConstructor_CRC32_help_getAppConfig):  func() TLObject { return NewTLHelpGetAppConfig() },
    int32(TLConstructor_CRC32_help_getPassportConfig):  func() TLObject { return NewTLHelpGetPassportConfig() },
    int32(TLConstructor_CRC32_help_getSupportName):  func() TLObject { return NewTLHelpGetSupportName() },
    int32(TLConstructor_CRC32_help_getUserInfo):  func() TLObject { return NewTLHelpGetUserInfo() },
    int32(TLConstructor_CRC32_help_editUserInfo):  func() TLObject { return NewTLHelpEditUserInfo() },
    int32(TLConstructor_CRC32_help_getPromoData):  func() TLObject { return NewTLHelpGetPromoData() },
    int32(TLConstructor_CRC32_help_hidePromoData):  func() TLObject { return NewTLHelpHidePromoData() },
    int32(TLConstructor_CRC32_channels_getMessages114):  func() TLObject { return NewTLChannelsGetMessages114() },
    int32(TLConstructor_CRC32_channels_createChannel114):  func() TLObject { return NewTLChannelsCreateChannel114() },
    int32(TLConstructor_CRC32_channels_editAdmin114):  func() TLObject { return NewTLChannelsEditAdmin114() },
    int32(TLConstructor_CRC32_channels_exportMessageLink114):  func() TLObject { return NewTLChannelsExportMessageLink114() },
    int32(TLConstructor_CRC32_channels_getAdminedPublicChannels114):  func() TLObject { return NewTLChannelsGetAdminedPublicChannels114() },
    int32(TLConstructor_CRC32_channels_editBanned114):  func() TLObject { return NewTLChannelsEditBanned114() },
    int32(TLConstructor_CRC32_channels_getLeftChannels):  func() TLObject { return NewTLChannelsGetLeftChannels() },
    int32(TLConstructor_CRC32_channels_getGroupsForDiscussion):  func() TLObject { return NewTLChannelsGetGroupsForDiscussion() },
    int32(TLConstructor_CRC32_channels_setDiscussionGroup):  func() TLObject { return NewTLChannelsSetDiscussionGroup() },
    int32(TLConstructor_CRC32_channels_editCreator):  func() TLObject { return NewTLChannelsEditCreator() },
    int32(TLConstructor_CRC32_channels_editLocation):  func() TLObject { return NewTLChannelsEditLocation() },
    int32(TLConstructor_CRC32_channels_toggleSlowMode):  func() TLObject { return NewTLChannelsToggleSlowMode() },
    int32(TLConstructor_CRC32_channels_getInactiveChannels):  func() TLObject { return NewTLChannelsGetInactiveChannels() },
    int32(TLConstructor_CRC32_bots_setBotCommands):  func() TLObject { return NewTLBotsSetBotCommands() },
    int32(TLConstructor_CRC32_payments_getBankCardData):  func() TLObject { return NewTLPaymentsGetBankCardData() },
    int32(TLConstructor_CRC32_stickers_createStickerSet114):  func() TLObject { return NewTLStickersCreateStickerSet114() },
    int32(TLConstructor_CRC32_stickers_setStickerSetThumb):  func() TLObject { return NewTLStickersSetStickerSetThumb() },
    int32(TLConstructor_CRC32_phone_requestCall114):  func() TLObject { return NewTLPhoneRequestCall114() },
    int32(TLConstructor_CRC32_phone_discardCall114):  func() TLObject { return NewTLPhoneDiscardCall114() },
    int32(TLConstructor_CRC32_phone_setCallRating114):  func() TLObject { return NewTLPhoneSetCallRating114() },
    int32(TLConstructor_CRC32_phone_sendSignalingData):  func() TLObject { return NewTLPhoneSendSignalingData() },
    int32(TLConstructor_CRC32_langpack_getLangPack114):  func() TLObject { return NewTLLangpackGetLangPack114() },
    int32(TLConstructor_CRC32_langpack_getStrings114):  func() TLObject { return NewTLLangpackGetStrings114() },
    int32(TLConstructor_CRC32_langpack_getDifference114):  func() TLObject { return NewTLLangpackGetDifference114() },
    int32(TLConstructor_CRC32_langpack_getLanguages114):  func() TLObject { return NewTLLangpackGetLanguages114() },
    int32(TLConstructor_CRC32_langpack_getLanguage):  func() TLObject { return NewTLLangpackGetLanguage() },
    int32(TLConstructor_CRC32_folders_editPeerFolders):  func() TLObject { return NewTLFoldersEditPeerFolders() },
    int32(TLConstructor_CRC32_folders_deleteFolder):  func() TLObject { return NewTLFoldersDeleteFolder() },
    int32(TLConstructor_CRC32_stats_getBroadcastStats):  func() TLObject { return NewTLStatsGetBroadcastStats() },
    int32(TLConstructor_CRC32_stats_loadAsyncGraph):  func() TLObject { return NewTLStatsLoadAsyncGraph() },
    int32(TLConstructor_CRC32_account_getGlobalPrivacySettings):  func() TLObject { return NewTLAccountGetGlobalPrivacySettings() },
    int32(TLConstructor_CRC32_account_setGlobalPrivacySettings):  func() TLObject { return NewTLAccountSetGlobalPrivacySettings() },
    int32(TLConstructor_CRC32_stats_getMegagroupStats):  func() TLObject { return NewTLStatsGetMegagroupStats() },
    int32(TLConstructor_CRC32_photos_uploadProfilePhoto117):  func() TLObject { return NewTLPhotosUploadProfilePhoto117() },
    int32(TLConstructor_CRC32_help_dismissSuggestion):  func() TLObject { return NewTLHelpDismissSuggestion() },
    int32(TLConstructor_CRC32_photos_updateProfilePhoto117):  func() TLObject { return NewTLPhotosUpdateProfilePhoto117() },
    int32(TLConstructor_CRC32_help_getCountriesList):  func() TLObject { return NewTLHelpGetCountriesList() },
    int32(TLConstructor_CRC32_messages_sendEncrypted118):  func() TLObject { return NewTLMessagesSendEncrypted118() },
    int32(TLConstructor_CRC32_messages_getBotCallbackAnswer118):  func() TLObject { return NewTLMessagesGetBotCallbackAnswer118() },
    int32(TLConstructor_CRC32_messages_sendEncryptedFile118):  func() TLObject { return NewTLMessagesSendEncryptedFile118() },
    int32(TLConstructor_CRC32_langpack_getDifference118):  func() TLObject { return NewTLLangpackGetDifference118() },
    int32(TLConstructor_CRC32_winkConfig):  func() TLObject { return NewTLWinkConfig() },
    int32(TLConstructor_CRC32_coinMessage):  func() TLObject { return NewTLCoinMessage() },
    int32(TLConstructor_CRC32_api_addAuthKey):  func() TLObject { return NewTLApiAddAuthKey() },
    int32(TLConstructor_CRC32_api_initConnectionLite):  func() TLObject { return NewTLApiInitConnectionLite() },
    int32(TLConstructor_CRC32_api_coinRequest):  func() TLObject { return NewTLApiCoinRequest() },

}

func NewTLObjectByClassID(classId int32) TLObject {
m, ok := registers2[classId]
if !ok {
return nil
}
return m()
}

//////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// P_QInnerData <--
//  + TL_PQInnerData
//  + TL_PQInnerDataDc
//  + TL_PQInnerDataTemp
//  + TL_PQInnerDataTempDc
//

func (m *P_QInnerData) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_p_q_inner_data:
        t := m.To_PQInnerData()
        return t.Encode()
    case TLConstructor_CRC32_p_q_inner_data_dc:
        t := m.To_PQInnerDataDc()
        return t.Encode()
    case TLConstructor_CRC32_p_q_inner_data_temp:
        t := m.To_PQInnerDataTemp()
        return t.Encode()
    case TLConstructor_CRC32_p_q_inner_data_temp_dc:
        t := m.To_PQInnerDataTempDc()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *P_QInnerData) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_p_q_inner_data:
        m2 := &TLPQInnerData{&P_QInnerData_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_p_q_inner_data_dc:
        m2 := &TLPQInnerDataDc{&P_QInnerData_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_p_q_inner_data_temp:
        m2 := &TLPQInnerDataTemp{&P_QInnerData_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_p_q_inner_data_temp_dc:
        m2 := &TLPQInnerDataTempDc{&P_QInnerData_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// p_q_inner_data#83c95aec pq:string p:string q:string nonce:int128 server_nonce:int128 new_nonce:int256 = P_Q_inner_data;
func (m *P_QInnerData) To_PQInnerData() *TLPQInnerData {
    return &TLPQInnerData{
        Data2: m.Data2,
    }
}

// p_q_inner_data_dc#a9f55f95 pq:string p:string q:string nonce:int128 server_nonce:int128 new_nonce:int256 dc:int = P_Q_inner_data;
func (m *P_QInnerData) To_PQInnerDataDc() *TLPQInnerDataDc {
    return &TLPQInnerDataDc{
        Data2: m.Data2,
    }
}

// p_q_inner_data_temp#3c6a84d4 pq:string p:string q:string nonce:int128 server_nonce:int128 new_nonce:int256 expires_in:int = P_Q_inner_data;
func (m *P_QInnerData) To_PQInnerDataTemp() *TLPQInnerDataTemp {
    return &TLPQInnerDataTemp{
        Data2: m.Data2,
    }
}

// p_q_inner_data_temp_dc#56fddf88 pq:string p:string q:string nonce:int128 server_nonce:int128 new_nonce:int256 dc:int expires_in:int = P_Q_inner_data;
func (m *P_QInnerData) To_PQInnerDataTempDc() *TLPQInnerDataTempDc {
    return &TLPQInnerDataTempDc{
        Data2: m.Data2,
    }
}



// p_q_inner_data#83c95aec pq:string p:string q:string nonce:int128 server_nonce:int128 new_nonce:int256 = P_Q_inner_data;
func (m *TLPQInnerData) To_P_QInnerData() *P_QInnerData {
    return &P_QInnerData{
        Constructor: TLConstructor_CRC32_p_q_inner_data,
        Data2: m.Data2,
    }
}


func (m *TLPQInnerData) SetPq(v string) { m.Data2.Pq = v }
func (m *TLPQInnerData) GetPq() string { return m.Data2.Pq }

func (m *TLPQInnerData) SetP(v string) { m.Data2.P = v }
func (m *TLPQInnerData) GetP() string { return m.Data2.P }

func (m *TLPQInnerData) SetQ(v string) { m.Data2.Q = v }
func (m *TLPQInnerData) GetQ() string { return m.Data2.Q }

func (m *TLPQInnerData) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLPQInnerData) GetNonce() []byte { return m.Data2.Nonce }

func (m *TLPQInnerData) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLPQInnerData) GetServerNonce() []byte { return m.Data2.ServerNonce }

func (m *TLPQInnerData) SetNewNonce(v []byte) { m.Data2.NewNonce = v }
func (m *TLPQInnerData) GetNewNonce() []byte { return m.Data2.NewNonce }


func NewTLPQInnerData() * TLPQInnerData {
    return &TLPQInnerData{ Data2: &P_QInnerData_Data{} }
}

func (m* TLPQInnerData) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_p_q_inner_data))

    x.String(m.GetPq())
    x.String(m.GetP())
    x.String(m.GetQ())
    x.Bytes(m.GetNonce())
    x.Bytes(m.GetServerNonce())
    x.Bytes(m.GetNewNonce())

    return x.buf
}

func (m* TLPQInnerData) Decode(dbuf *DecodeBuf) error {
    m.SetPq(dbuf.String())
    m.SetP(dbuf.String())
    m.SetQ(dbuf.String())
    m.SetNonce(dbuf.Bytes(16))
    m.SetServerNonce(dbuf.Bytes(16))
    m.SetNewNonce(dbuf.Bytes(32))

    return dbuf.err
}
// p_q_inner_data_dc#a9f55f95 pq:string p:string q:string nonce:int128 server_nonce:int128 new_nonce:int256 dc:int = P_Q_inner_data;
func (m *TLPQInnerDataDc) To_P_QInnerData() *P_QInnerData {
    return &P_QInnerData{
        Constructor: TLConstructor_CRC32_p_q_inner_data_dc,
        Data2: m.Data2,
    }
}


func (m *TLPQInnerDataDc) SetPq(v string) { m.Data2.Pq = v }
func (m *TLPQInnerDataDc) GetPq() string { return m.Data2.Pq }

func (m *TLPQInnerDataDc) SetP(v string) { m.Data2.P = v }
func (m *TLPQInnerDataDc) GetP() string { return m.Data2.P }

func (m *TLPQInnerDataDc) SetQ(v string) { m.Data2.Q = v }
func (m *TLPQInnerDataDc) GetQ() string { return m.Data2.Q }

func (m *TLPQInnerDataDc) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLPQInnerDataDc) GetNonce() []byte { return m.Data2.Nonce }

func (m *TLPQInnerDataDc) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLPQInnerDataDc) GetServerNonce() []byte { return m.Data2.ServerNonce }

func (m *TLPQInnerDataDc) SetNewNonce(v []byte) { m.Data2.NewNonce = v }
func (m *TLPQInnerDataDc) GetNewNonce() []byte { return m.Data2.NewNonce }

func (m *TLPQInnerDataDc) SetDc(v int32) { m.Data2.Dc = v }
func (m *TLPQInnerDataDc) GetDc() int32 { return m.Data2.Dc }


func NewTLPQInnerDataDc() * TLPQInnerDataDc {
    return &TLPQInnerDataDc{ Data2: &P_QInnerData_Data{} }
}

func (m* TLPQInnerDataDc) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_p_q_inner_data_dc))

    x.String(m.GetPq())
    x.String(m.GetP())
    x.String(m.GetQ())
    x.Bytes(m.GetNonce())
    x.Bytes(m.GetServerNonce())
    x.Bytes(m.GetNewNonce())
    x.Int(m.GetDc())

    return x.buf
}

func (m* TLPQInnerDataDc) Decode(dbuf *DecodeBuf) error {
    m.SetPq(dbuf.String())
    m.SetP(dbuf.String())
    m.SetQ(dbuf.String())
    m.SetNonce(dbuf.Bytes(16))
    m.SetServerNonce(dbuf.Bytes(16))
    m.SetNewNonce(dbuf.Bytes(32))
    m.SetDc(dbuf.Int())

    return dbuf.err
}
// p_q_inner_data_temp#3c6a84d4 pq:string p:string q:string nonce:int128 server_nonce:int128 new_nonce:int256 expires_in:int = P_Q_inner_data;
func (m *TLPQInnerDataTemp) To_P_QInnerData() *P_QInnerData {
    return &P_QInnerData{
        Constructor: TLConstructor_CRC32_p_q_inner_data_temp,
        Data2: m.Data2,
    }
}


func (m *TLPQInnerDataTemp) SetPq(v string) { m.Data2.Pq = v }
func (m *TLPQInnerDataTemp) GetPq() string { return m.Data2.Pq }

func (m *TLPQInnerDataTemp) SetP(v string) { m.Data2.P = v }
func (m *TLPQInnerDataTemp) GetP() string { return m.Data2.P }

func (m *TLPQInnerDataTemp) SetQ(v string) { m.Data2.Q = v }
func (m *TLPQInnerDataTemp) GetQ() string { return m.Data2.Q }

func (m *TLPQInnerDataTemp) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLPQInnerDataTemp) GetNonce() []byte { return m.Data2.Nonce }

func (m *TLPQInnerDataTemp) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLPQInnerDataTemp) GetServerNonce() []byte { return m.Data2.ServerNonce }

func (m *TLPQInnerDataTemp) SetNewNonce(v []byte) { m.Data2.NewNonce = v }
func (m *TLPQInnerDataTemp) GetNewNonce() []byte { return m.Data2.NewNonce }

func (m *TLPQInnerDataTemp) SetExpiresIn(v int32) { m.Data2.ExpiresIn = v }
func (m *TLPQInnerDataTemp) GetExpiresIn() int32 { return m.Data2.ExpiresIn }


func NewTLPQInnerDataTemp() * TLPQInnerDataTemp {
    return &TLPQInnerDataTemp{ Data2: &P_QInnerData_Data{} }
}

func (m* TLPQInnerDataTemp) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_p_q_inner_data_temp))

    x.String(m.GetPq())
    x.String(m.GetP())
    x.String(m.GetQ())
    x.Bytes(m.GetNonce())
    x.Bytes(m.GetServerNonce())
    x.Bytes(m.GetNewNonce())
    x.Int(m.GetExpiresIn())

    return x.buf
}

func (m* TLPQInnerDataTemp) Decode(dbuf *DecodeBuf) error {
    m.SetPq(dbuf.String())
    m.SetP(dbuf.String())
    m.SetQ(dbuf.String())
    m.SetNonce(dbuf.Bytes(16))
    m.SetServerNonce(dbuf.Bytes(16))
    m.SetNewNonce(dbuf.Bytes(32))
    m.SetExpiresIn(dbuf.Int())

    return dbuf.err
}
// p_q_inner_data_temp_dc#56fddf88 pq:string p:string q:string nonce:int128 server_nonce:int128 new_nonce:int256 dc:int expires_in:int = P_Q_inner_data;
func (m *TLPQInnerDataTempDc) To_P_QInnerData() *P_QInnerData {
    return &P_QInnerData{
        Constructor: TLConstructor_CRC32_p_q_inner_data_temp_dc,
        Data2: m.Data2,
    }
}


func (m *TLPQInnerDataTempDc) SetPq(v string) { m.Data2.Pq = v }
func (m *TLPQInnerDataTempDc) GetPq() string { return m.Data2.Pq }

func (m *TLPQInnerDataTempDc) SetP(v string) { m.Data2.P = v }
func (m *TLPQInnerDataTempDc) GetP() string { return m.Data2.P }

func (m *TLPQInnerDataTempDc) SetQ(v string) { m.Data2.Q = v }
func (m *TLPQInnerDataTempDc) GetQ() string { return m.Data2.Q }

func (m *TLPQInnerDataTempDc) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLPQInnerDataTempDc) GetNonce() []byte { return m.Data2.Nonce }

func (m *TLPQInnerDataTempDc) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLPQInnerDataTempDc) GetServerNonce() []byte { return m.Data2.ServerNonce }

func (m *TLPQInnerDataTempDc) SetNewNonce(v []byte) { m.Data2.NewNonce = v }
func (m *TLPQInnerDataTempDc) GetNewNonce() []byte { return m.Data2.NewNonce }

func (m *TLPQInnerDataTempDc) SetDc(v int32) { m.Data2.Dc = v }
func (m *TLPQInnerDataTempDc) GetDc() int32 { return m.Data2.Dc }

func (m *TLPQInnerDataTempDc) SetExpiresIn(v int32) { m.Data2.ExpiresIn = v }
func (m *TLPQInnerDataTempDc) GetExpiresIn() int32 { return m.Data2.ExpiresIn }


func NewTLPQInnerDataTempDc() * TLPQInnerDataTempDc {
    return &TLPQInnerDataTempDc{ Data2: &P_QInnerData_Data{} }
}

func (m* TLPQInnerDataTempDc) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_p_q_inner_data_temp_dc))

    x.String(m.GetPq())
    x.String(m.GetP())
    x.String(m.GetQ())
    x.Bytes(m.GetNonce())
    x.Bytes(m.GetServerNonce())
    x.Bytes(m.GetNewNonce())
    x.Int(m.GetDc())
    x.Int(m.GetExpiresIn())

    return x.buf
}

func (m* TLPQInnerDataTempDc) Decode(dbuf *DecodeBuf) error {
    m.SetPq(dbuf.String())
    m.SetP(dbuf.String())
    m.SetQ(dbuf.String())
    m.SetNonce(dbuf.Bytes(16))
    m.SetServerNonce(dbuf.Bytes(16))
    m.SetNewNonce(dbuf.Bytes(32))
    m.SetDc(dbuf.Int())
    m.SetExpiresIn(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// BindAuthKeyInner <--
//  + TL_BindAuthKeyInner
//

func (m *BindAuthKeyInner) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_bind_auth_key_inner:
        t := m.To_BindAuthKeyInner()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *BindAuthKeyInner) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_bind_auth_key_inner:
        m2 := &TLBindAuthKeyInner{&BindAuthKeyInner_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// bind_auth_key_inner#75a3f765 nonce:long temp_auth_key_id:long perm_auth_key_id:long temp_session_id:long expires_at:int = BindAuthKeyInner;
func (m *BindAuthKeyInner) To_BindAuthKeyInner() *TLBindAuthKeyInner {
    return &TLBindAuthKeyInner{
        Data2: m.Data2,
    }
}



// bind_auth_key_inner#75a3f765 nonce:long temp_auth_key_id:long perm_auth_key_id:long temp_session_id:long expires_at:int = BindAuthKeyInner;
func (m *TLBindAuthKeyInner) To_BindAuthKeyInner() *BindAuthKeyInner {
    return &BindAuthKeyInner{
        Constructor: TLConstructor_CRC32_bind_auth_key_inner,
        Data2: m.Data2,
    }
}


func (m *TLBindAuthKeyInner) SetNonce(v int64) { m.Data2.Nonce = v }
func (m *TLBindAuthKeyInner) GetNonce() int64 { return m.Data2.Nonce }

func (m *TLBindAuthKeyInner) SetTempAuthKeyId(v int64) { m.Data2.TempAuthKeyId = v }
func (m *TLBindAuthKeyInner) GetTempAuthKeyId() int64 { return m.Data2.TempAuthKeyId }

func (m *TLBindAuthKeyInner) SetPermAuthKeyId(v int64) { m.Data2.PermAuthKeyId = v }
func (m *TLBindAuthKeyInner) GetPermAuthKeyId() int64 { return m.Data2.PermAuthKeyId }

func (m *TLBindAuthKeyInner) SetTempSessionId(v int64) { m.Data2.TempSessionId = v }
func (m *TLBindAuthKeyInner) GetTempSessionId() int64 { return m.Data2.TempSessionId }

func (m *TLBindAuthKeyInner) SetExpiresAt(v int32) { m.Data2.ExpiresAt = v }
func (m *TLBindAuthKeyInner) GetExpiresAt() int32 { return m.Data2.ExpiresAt }


func NewTLBindAuthKeyInner() * TLBindAuthKeyInner {
    return &TLBindAuthKeyInner{ Data2: &BindAuthKeyInner_Data{} }
}

func (m* TLBindAuthKeyInner) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_bind_auth_key_inner))

    x.Long(m.GetNonce())
    x.Long(m.GetTempAuthKeyId())
    x.Long(m.GetPermAuthKeyId())
    x.Long(m.GetTempSessionId())
    x.Int(m.GetExpiresAt())

    return x.buf
}

func (m* TLBindAuthKeyInner) Decode(dbuf *DecodeBuf) error {
    m.SetNonce(dbuf.Long())
    m.SetTempAuthKeyId(dbuf.Long())
    m.SetPermAuthKeyId(dbuf.Long())
    m.SetTempSessionId(dbuf.Long())
    m.SetExpiresAt(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Server_DH_Params <--
//  + TL_Server_DHParamsFail
//  + TL_Server_DHParamsOk
//

func (m *Server_DH_Params) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_server_DH_params_fail:
        t := m.To_Server_DHParamsFail()
        return t.Encode()
    case TLConstructor_CRC32_server_DH_params_ok:
        t := m.To_Server_DHParamsOk()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Server_DH_Params) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_server_DH_params_fail:
        m2 := &TLServer_DHParamsFail{&Server_DH_Params_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_server_DH_params_ok:
        m2 := &TLServer_DHParamsOk{&Server_DH_Params_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// server_DH_params_fail#79cb045d nonce:int128 server_nonce:int128 new_nonce_hash:int128 = Server_DH_Params;
func (m *Server_DH_Params) To_Server_DHParamsFail() *TLServer_DHParamsFail {
    return &TLServer_DHParamsFail{
        Data2: m.Data2,
    }
}

// server_DH_params_ok#d0e8075c nonce:int128 server_nonce:int128 encrypted_answer:string = Server_DH_Params;
func (m *Server_DH_Params) To_Server_DHParamsOk() *TLServer_DHParamsOk {
    return &TLServer_DHParamsOk{
        Data2: m.Data2,
    }
}



// server_DH_params_fail#79cb045d nonce:int128 server_nonce:int128 new_nonce_hash:int128 = Server_DH_Params;
func (m *TLServer_DHParamsFail) To_Server_DH_Params() *Server_DH_Params {
    return &Server_DH_Params{
        Constructor: TLConstructor_CRC32_server_DH_params_fail,
        Data2: m.Data2,
    }
}


func (m *TLServer_DHParamsFail) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLServer_DHParamsFail) GetNonce() []byte { return m.Data2.Nonce }

func (m *TLServer_DHParamsFail) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLServer_DHParamsFail) GetServerNonce() []byte { return m.Data2.ServerNonce }

func (m *TLServer_DHParamsFail) SetNewNonceHash(v []byte) { m.Data2.NewNonceHash = v }
func (m *TLServer_DHParamsFail) GetNewNonceHash() []byte { return m.Data2.NewNonceHash }


func NewTLServer_DHParamsFail() * TLServer_DHParamsFail {
    return &TLServer_DHParamsFail{ Data2: &Server_DH_Params_Data{} }
}

func (m* TLServer_DHParamsFail) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_server_DH_params_fail))

    x.Bytes(m.GetNonce())
    x.Bytes(m.GetServerNonce())
    x.Bytes(m.GetNewNonceHash())

    return x.buf
}

func (m* TLServer_DHParamsFail) Decode(dbuf *DecodeBuf) error {
    m.SetNonce(dbuf.Bytes(16))
    m.SetServerNonce(dbuf.Bytes(16))
    m.SetNewNonceHash(dbuf.Bytes(16))

    return dbuf.err
}
// server_DH_params_ok#d0e8075c nonce:int128 server_nonce:int128 encrypted_answer:string = Server_DH_Params;
func (m *TLServer_DHParamsOk) To_Server_DH_Params() *Server_DH_Params {
    return &Server_DH_Params{
        Constructor: TLConstructor_CRC32_server_DH_params_ok,
        Data2: m.Data2,
    }
}


func (m *TLServer_DHParamsOk) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLServer_DHParamsOk) GetNonce() []byte { return m.Data2.Nonce }

func (m *TLServer_DHParamsOk) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLServer_DHParamsOk) GetServerNonce() []byte { return m.Data2.ServerNonce }

func (m *TLServer_DHParamsOk) SetEncryptedAnswer(v string) { m.Data2.EncryptedAnswer = v }
func (m *TLServer_DHParamsOk) GetEncryptedAnswer() string { return m.Data2.EncryptedAnswer }


func NewTLServer_DHParamsOk() * TLServer_DHParamsOk {
    return &TLServer_DHParamsOk{ Data2: &Server_DH_Params_Data{} }
}

func (m* TLServer_DHParamsOk) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_server_DH_params_ok))

    x.Bytes(m.GetNonce())
    x.Bytes(m.GetServerNonce())
    x.String(m.GetEncryptedAnswer())

    return x.buf
}

func (m* TLServer_DHParamsOk) Decode(dbuf *DecodeBuf) error {
    m.SetNonce(dbuf.Bytes(16))
    m.SetServerNonce(dbuf.Bytes(16))
    m.SetEncryptedAnswer(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Server_DHInnerData <--
//  + TL_Server_DHInnerData
//

func (m *Server_DHInnerData) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_server_DH_inner_data:
        t := m.To_Server_DHInnerData()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Server_DHInnerData) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_server_DH_inner_data:
        m2 := &TLServer_DHInnerData{&Server_DHInnerData_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// server_DH_inner_data#b5890dba nonce:int128 server_nonce:int128 g:int dh_prime:string g_a:string server_time:int = Server_DH_inner_data;
func (m *Server_DHInnerData) To_Server_DHInnerData() *TLServer_DHInnerData {
    return &TLServer_DHInnerData{
        Data2: m.Data2,
    }
}



// server_DH_inner_data#b5890dba nonce:int128 server_nonce:int128 g:int dh_prime:string g_a:string server_time:int = Server_DH_inner_data;
func (m *TLServer_DHInnerData) To_Server_DHInnerData() *Server_DHInnerData {
    return &Server_DHInnerData{
        Constructor: TLConstructor_CRC32_server_DH_inner_data,
        Data2: m.Data2,
    }
}


func (m *TLServer_DHInnerData) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLServer_DHInnerData) GetNonce() []byte { return m.Data2.Nonce }

func (m *TLServer_DHInnerData) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLServer_DHInnerData) GetServerNonce() []byte { return m.Data2.ServerNonce }

func (m *TLServer_DHInnerData) SetG(v int32) { m.Data2.G = v }
func (m *TLServer_DHInnerData) GetG() int32 { return m.Data2.G }

func (m *TLServer_DHInnerData) SetDhPrime(v string) { m.Data2.DhPrime = v }
func (m *TLServer_DHInnerData) GetDhPrime() string { return m.Data2.DhPrime }

func (m *TLServer_DHInnerData) SetGA(v string) { m.Data2.GA = v }
func (m *TLServer_DHInnerData) GetGA() string { return m.Data2.GA }

func (m *TLServer_DHInnerData) SetServerTime(v int32) { m.Data2.ServerTime = v }
func (m *TLServer_DHInnerData) GetServerTime() int32 { return m.Data2.ServerTime }


func NewTLServer_DHInnerData() * TLServer_DHInnerData {
    return &TLServer_DHInnerData{ Data2: &Server_DHInnerData_Data{} }
}

func (m* TLServer_DHInnerData) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_server_DH_inner_data))

    x.Bytes(m.GetNonce())
    x.Bytes(m.GetServerNonce())
    x.Int(m.GetG())
    x.String(m.GetDhPrime())
    x.String(m.GetGA())
    x.Int(m.GetServerTime())

    return x.buf
}

func (m* TLServer_DHInnerData) Decode(dbuf *DecodeBuf) error {
    m.SetNonce(dbuf.Bytes(16))
    m.SetServerNonce(dbuf.Bytes(16))
    m.SetG(dbuf.Int())
    m.SetDhPrime(dbuf.String())
    m.SetGA(dbuf.String())
    m.SetServerTime(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Client_DH_Inner_Data <--
//  + TL_Client_DHInnerData
//

func (m *Client_DH_Inner_Data) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_client_DH_inner_data:
        t := m.To_Client_DHInnerData()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Client_DH_Inner_Data) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_client_DH_inner_data:
        m2 := &TLClient_DHInnerData{&Client_DH_Inner_Data_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// client_DH_inner_data#6643b654 nonce:int128 server_nonce:int128 retry_id:long g_b:string = Client_DH_Inner_Data;
func (m *Client_DH_Inner_Data) To_Client_DHInnerData() *TLClient_DHInnerData {
    return &TLClient_DHInnerData{
        Data2: m.Data2,
    }
}



// client_DH_inner_data#6643b654 nonce:int128 server_nonce:int128 retry_id:long g_b:string = Client_DH_Inner_Data;
func (m *TLClient_DHInnerData) To_Client_DH_Inner_Data() *Client_DH_Inner_Data {
    return &Client_DH_Inner_Data{
        Constructor: TLConstructor_CRC32_client_DH_inner_data,
        Data2: m.Data2,
    }
}


func (m *TLClient_DHInnerData) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLClient_DHInnerData) GetNonce() []byte { return m.Data2.Nonce }

func (m *TLClient_DHInnerData) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLClient_DHInnerData) GetServerNonce() []byte { return m.Data2.ServerNonce }

func (m *TLClient_DHInnerData) SetRetryId(v int64) { m.Data2.RetryId = v }
func (m *TLClient_DHInnerData) GetRetryId() int64 { return m.Data2.RetryId }

func (m *TLClient_DHInnerData) SetGB(v string) { m.Data2.GB = v }
func (m *TLClient_DHInnerData) GetGB() string { return m.Data2.GB }


func NewTLClient_DHInnerData() * TLClient_DHInnerData {
    return &TLClient_DHInnerData{ Data2: &Client_DH_Inner_Data_Data{} }
}

func (m* TLClient_DHInnerData) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_client_DH_inner_data))

    x.Bytes(m.GetNonce())
    x.Bytes(m.GetServerNonce())
    x.Long(m.GetRetryId())
    x.String(m.GetGB())

    return x.buf
}

func (m* TLClient_DHInnerData) Decode(dbuf *DecodeBuf) error {
    m.SetNonce(dbuf.Bytes(16))
    m.SetServerNonce(dbuf.Bytes(16))
    m.SetRetryId(dbuf.Long())
    m.SetGB(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// SetClient_DHParamsAnswer <--
//  + TL_DhGenOk
//  + TL_DhGenRetry
//  + TL_DhGenFail
//

func (m *SetClient_DHParamsAnswer) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_dh_gen_ok:
        t := m.To_DhGenOk()
        return t.Encode()
    case TLConstructor_CRC32_dh_gen_retry:
        t := m.To_DhGenRetry()
        return t.Encode()
    case TLConstructor_CRC32_dh_gen_fail:
        t := m.To_DhGenFail()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *SetClient_DHParamsAnswer) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_dh_gen_ok:
        m2 := &TLDhGenOk{&SetClient_DHParamsAnswer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_dh_gen_retry:
        m2 := &TLDhGenRetry{&SetClient_DHParamsAnswer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_dh_gen_fail:
        m2 := &TLDhGenFail{&SetClient_DHParamsAnswer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// dh_gen_ok#3bcbf734 nonce:int128 server_nonce:int128 new_nonce_hash1:int128 = Set_client_DH_params_answer;
func (m *SetClient_DHParamsAnswer) To_DhGenOk() *TLDhGenOk {
    return &TLDhGenOk{
        Data2: m.Data2,
    }
}

// dh_gen_retry#46dc1fb9 nonce:int128 server_nonce:int128 new_nonce_hash2:int128 = Set_client_DH_params_answer;
func (m *SetClient_DHParamsAnswer) To_DhGenRetry() *TLDhGenRetry {
    return &TLDhGenRetry{
        Data2: m.Data2,
    }
}

// dh_gen_fail#a69dae02 nonce:int128 server_nonce:int128 new_nonce_hash3:int128 = Set_client_DH_params_answer;
func (m *SetClient_DHParamsAnswer) To_DhGenFail() *TLDhGenFail {
    return &TLDhGenFail{
        Data2: m.Data2,
    }
}



// dh_gen_ok#3bcbf734 nonce:int128 server_nonce:int128 new_nonce_hash1:int128 = Set_client_DH_params_answer;
func (m *TLDhGenOk) To_SetClient_DHParamsAnswer() *SetClient_DHParamsAnswer {
    return &SetClient_DHParamsAnswer{
        Constructor: TLConstructor_CRC32_dh_gen_ok,
        Data2: m.Data2,
    }
}


func (m *TLDhGenOk) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLDhGenOk) GetNonce() []byte { return m.Data2.Nonce }

func (m *TLDhGenOk) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLDhGenOk) GetServerNonce() []byte { return m.Data2.ServerNonce }

func (m *TLDhGenOk) SetNewNonceHash1(v []byte) { m.Data2.NewNonceHash1 = v }
func (m *TLDhGenOk) GetNewNonceHash1() []byte { return m.Data2.NewNonceHash1 }


func NewTLDhGenOk() * TLDhGenOk {
    return &TLDhGenOk{ Data2: &SetClient_DHParamsAnswer_Data{} }
}

func (m* TLDhGenOk) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_dh_gen_ok))

    x.Bytes(m.GetNonce())
    x.Bytes(m.GetServerNonce())
    x.Bytes(m.GetNewNonceHash1())

    return x.buf
}

func (m* TLDhGenOk) Decode(dbuf *DecodeBuf) error {
    m.SetNonce(dbuf.Bytes(16))
    m.SetServerNonce(dbuf.Bytes(16))
    m.SetNewNonceHash1(dbuf.Bytes(16))

    return dbuf.err
}
// dh_gen_retry#46dc1fb9 nonce:int128 server_nonce:int128 new_nonce_hash2:int128 = Set_client_DH_params_answer;
func (m *TLDhGenRetry) To_SetClient_DHParamsAnswer() *SetClient_DHParamsAnswer {
    return &SetClient_DHParamsAnswer{
        Constructor: TLConstructor_CRC32_dh_gen_retry,
        Data2: m.Data2,
    }
}


func (m *TLDhGenRetry) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLDhGenRetry) GetNonce() []byte { return m.Data2.Nonce }

func (m *TLDhGenRetry) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLDhGenRetry) GetServerNonce() []byte { return m.Data2.ServerNonce }

func (m *TLDhGenRetry) SetNewNonceHash2(v []byte) { m.Data2.NewNonceHash2 = v }
func (m *TLDhGenRetry) GetNewNonceHash2() []byte { return m.Data2.NewNonceHash2 }


func NewTLDhGenRetry() * TLDhGenRetry {
    return &TLDhGenRetry{ Data2: &SetClient_DHParamsAnswer_Data{} }
}

func (m* TLDhGenRetry) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_dh_gen_retry))

    x.Bytes(m.GetNonce())
    x.Bytes(m.GetServerNonce())
    x.Bytes(m.GetNewNonceHash2())

    return x.buf
}

func (m* TLDhGenRetry) Decode(dbuf *DecodeBuf) error {
    m.SetNonce(dbuf.Bytes(16))
    m.SetServerNonce(dbuf.Bytes(16))
    m.SetNewNonceHash2(dbuf.Bytes(16))

    return dbuf.err
}
// dh_gen_fail#a69dae02 nonce:int128 server_nonce:int128 new_nonce_hash3:int128 = Set_client_DH_params_answer;
func (m *TLDhGenFail) To_SetClient_DHParamsAnswer() *SetClient_DHParamsAnswer {
    return &SetClient_DHParamsAnswer{
        Constructor: TLConstructor_CRC32_dh_gen_fail,
        Data2: m.Data2,
    }
}


func (m *TLDhGenFail) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLDhGenFail) GetNonce() []byte { return m.Data2.Nonce }

func (m *TLDhGenFail) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLDhGenFail) GetServerNonce() []byte { return m.Data2.ServerNonce }

func (m *TLDhGenFail) SetNewNonceHash3(v []byte) { m.Data2.NewNonceHash3 = v }
func (m *TLDhGenFail) GetNewNonceHash3() []byte { return m.Data2.NewNonceHash3 }


func NewTLDhGenFail() * TLDhGenFail {
    return &TLDhGenFail{ Data2: &SetClient_DHParamsAnswer_Data{} }
}

func (m* TLDhGenFail) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_dh_gen_fail))

    x.Bytes(m.GetNonce())
    x.Bytes(m.GetServerNonce())
    x.Bytes(m.GetNewNonceHash3())

    return x.buf
}

func (m* TLDhGenFail) Decode(dbuf *DecodeBuf) error {
    m.SetNonce(dbuf.Bytes(16))
    m.SetServerNonce(dbuf.Bytes(16))
    m.SetNewNonceHash3(dbuf.Bytes(16))

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// DestroyAuthKeyRes <--
//  + TL_DestroyAuthKeyOk
//  + TL_DestroyAuthKeyNone
//  + TL_DestroyAuthKeyFail
//

func (m *DestroyAuthKeyRes) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_destroy_auth_key_ok:
        t := m.To_DestroyAuthKeyOk()
        return t.Encode()
    case TLConstructor_CRC32_destroy_auth_key_none:
        t := m.To_DestroyAuthKeyNone()
        return t.Encode()
    case TLConstructor_CRC32_destroy_auth_key_fail:
        t := m.To_DestroyAuthKeyFail()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *DestroyAuthKeyRes) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_destroy_auth_key_ok:
        m2 := &TLDestroyAuthKeyOk{&DestroyAuthKeyRes_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_destroy_auth_key_none:
        m2 := &TLDestroyAuthKeyNone{&DestroyAuthKeyRes_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_destroy_auth_key_fail:
        m2 := &TLDestroyAuthKeyFail{&DestroyAuthKeyRes_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// destroy_auth_key_ok#f660e1d4 = DestroyAuthKeyRes;
func (m *DestroyAuthKeyRes) To_DestroyAuthKeyOk() *TLDestroyAuthKeyOk {
    return &TLDestroyAuthKeyOk{
        Data2: m.Data2,
    }
}

// destroy_auth_key_none#0a9f2259 = DestroyAuthKeyRes;
func (m *DestroyAuthKeyRes) To_DestroyAuthKeyNone() *TLDestroyAuthKeyNone {
    return &TLDestroyAuthKeyNone{
        Data2: m.Data2,
    }
}

// destroy_auth_key_fail#ea109b13 = DestroyAuthKeyRes;
func (m *DestroyAuthKeyRes) To_DestroyAuthKeyFail() *TLDestroyAuthKeyFail {
    return &TLDestroyAuthKeyFail{
        Data2: m.Data2,
    }
}



// destroy_auth_key_ok#f660e1d4 = DestroyAuthKeyRes;
func (m *TLDestroyAuthKeyOk) To_DestroyAuthKeyRes() *DestroyAuthKeyRes {
    return &DestroyAuthKeyRes{
        Constructor: TLConstructor_CRC32_destroy_auth_key_ok,
        Data2: m.Data2,
    }
}



func NewTLDestroyAuthKeyOk() * TLDestroyAuthKeyOk {
    return &TLDestroyAuthKeyOk{ Data2: &DestroyAuthKeyRes_Data{} }
}

func (m* TLDestroyAuthKeyOk) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_destroy_auth_key_ok))


    return x.buf
}

func (m* TLDestroyAuthKeyOk) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// destroy_auth_key_none#0a9f2259 = DestroyAuthKeyRes;
func (m *TLDestroyAuthKeyNone) To_DestroyAuthKeyRes() *DestroyAuthKeyRes {
    return &DestroyAuthKeyRes{
        Constructor: TLConstructor_CRC32_destroy_auth_key_none,
        Data2: m.Data2,
    }
}



func NewTLDestroyAuthKeyNone() * TLDestroyAuthKeyNone {
    return &TLDestroyAuthKeyNone{ Data2: &DestroyAuthKeyRes_Data{} }
}

func (m* TLDestroyAuthKeyNone) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_destroy_auth_key_none))


    return x.buf
}

func (m* TLDestroyAuthKeyNone) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// destroy_auth_key_fail#ea109b13 = DestroyAuthKeyRes;
func (m *TLDestroyAuthKeyFail) To_DestroyAuthKeyRes() *DestroyAuthKeyRes {
    return &DestroyAuthKeyRes{
        Constructor: TLConstructor_CRC32_destroy_auth_key_fail,
        Data2: m.Data2,
    }
}



func NewTLDestroyAuthKeyFail() * TLDestroyAuthKeyFail {
    return &TLDestroyAuthKeyFail{ Data2: &DestroyAuthKeyRes_Data{} }
}

func (m* TLDestroyAuthKeyFail) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_destroy_auth_key_fail))


    return x.buf
}

func (m* TLDestroyAuthKeyFail) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// ResPQ <--
//  + TL_ResPQ
//

func (m *ResPQ) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_resPQ:
        t := m.To_ResPQ()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *ResPQ) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_resPQ:
        m2 := &TLResPQ{&ResPQ_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// resPQ#05162463 nonce:int128 server_nonce:int128 pq:string server_public_key_fingerprints:Vector<long> = ResPQ;
func (m *ResPQ) To_ResPQ() *TLResPQ {
    return &TLResPQ{
        Data2: m.Data2,
    }
}



// resPQ#05162463 nonce:int128 server_nonce:int128 pq:string server_public_key_fingerprints:Vector<long> = ResPQ;
func (m *TLResPQ) To_ResPQ() *ResPQ {
    return &ResPQ{
        Constructor: TLConstructor_CRC32_resPQ,
        Data2: m.Data2,
    }
}


func (m *TLResPQ) SetNonce(v []byte) { m.Data2.Nonce = v }
func (m *TLResPQ) GetNonce() []byte { return m.Data2.Nonce }

func (m *TLResPQ) SetServerNonce(v []byte) { m.Data2.ServerNonce = v }
func (m *TLResPQ) GetServerNonce() []byte { return m.Data2.ServerNonce }

func (m *TLResPQ) SetPq(v string) { m.Data2.Pq = v }
func (m *TLResPQ) GetPq() string { return m.Data2.Pq }

func (m *TLResPQ) SetServerPublicKeyFingerprints(v []int64) { m.Data2.ServerPublicKeyFingerprints = v }
func (m *TLResPQ) GetServerPublicKeyFingerprints() []int64 { return m.Data2.ServerPublicKeyFingerprints }


func NewTLResPQ() * TLResPQ {
    return &TLResPQ{ Data2: &ResPQ_Data{} }
}

func (m* TLResPQ) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_resPQ))

    x.Bytes(m.GetNonce())
    x.Bytes(m.GetServerNonce())
    x.String(m.GetPq())
    x.VectorLong(m.GetServerPublicKeyFingerprints())


    return x.buf
}

func (m* TLResPQ) Decode(dbuf *DecodeBuf) error {
    m.SetNonce(dbuf.Bytes(16))
    m.SetServerNonce(dbuf.Bytes(16))
    m.SetPq(dbuf.String())
    m.SetServerPublicKeyFingerprints(dbuf.VectorLong())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// MsgsAllInfo <--
//  + TL_MsgsAllInfo
//

func (m *MsgsAllInfo) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_msgs_all_info:
        t := m.To_MsgsAllInfo()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *MsgsAllInfo) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_msgs_all_info:
        m2 := &TLMsgsAllInfo{&MsgsAllInfo_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// msgs_all_info#8cc0d131 msg_ids:Vector<long> info:string = MsgsAllInfo;
func (m *MsgsAllInfo) To_MsgsAllInfo() *TLMsgsAllInfo {
    return &TLMsgsAllInfo{
        Data2: m.Data2,
    }
}



// msgs_all_info#8cc0d131 msg_ids:Vector<long> info:string = MsgsAllInfo;
func (m *TLMsgsAllInfo) To_MsgsAllInfo() *MsgsAllInfo {
    return &MsgsAllInfo{
        Constructor: TLConstructor_CRC32_msgs_all_info,
        Data2: m.Data2,
    }
}


func (m *TLMsgsAllInfo) SetMsgIds(v []int64) { m.Data2.MsgIds = v }
func (m *TLMsgsAllInfo) GetMsgIds() []int64 { return m.Data2.MsgIds }

func (m *TLMsgsAllInfo) SetInfo(v string) { m.Data2.Info = v }
func (m *TLMsgsAllInfo) GetInfo() string { return m.Data2.Info }


func NewTLMsgsAllInfo() * TLMsgsAllInfo {
    return &TLMsgsAllInfo{ Data2: &MsgsAllInfo_Data{} }
}

func (m* TLMsgsAllInfo) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_msgs_all_info))

    x.VectorLong(m.GetMsgIds())

    x.String(m.GetInfo())

    return x.buf
}

func (m* TLMsgsAllInfo) Decode(dbuf *DecodeBuf) error {
    m.SetMsgIds(dbuf.VectorLong())
    m.SetInfo(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// MsgResendReq <--
//  + TL_MsgResendReq
//

func (m *MsgResendReq) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_msg_resend_req:
        t := m.To_MsgResendReq()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *MsgResendReq) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_msg_resend_req:
        m2 := &TLMsgResendReq{&MsgResendReq_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// msg_resend_req#7d861a08 msg_ids:Vector<long> = MsgResendReq;
func (m *MsgResendReq) To_MsgResendReq() *TLMsgResendReq {
    return &TLMsgResendReq{
        Data2: m.Data2,
    }
}



// msg_resend_req#7d861a08 msg_ids:Vector<long> = MsgResendReq;
func (m *TLMsgResendReq) To_MsgResendReq() *MsgResendReq {
    return &MsgResendReq{
        Constructor: TLConstructor_CRC32_msg_resend_req,
        Data2: m.Data2,
    }
}


func (m *TLMsgResendReq) SetMsgIds(v []int64) { m.Data2.MsgIds = v }
func (m *TLMsgResendReq) GetMsgIds() []int64 { return m.Data2.MsgIds }


func NewTLMsgResendReq() * TLMsgResendReq {
    return &TLMsgResendReq{ Data2: &MsgResendReq_Data{} }
}

func (m* TLMsgResendReq) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_msg_resend_req))

    x.VectorLong(m.GetMsgIds())


    return x.buf
}

func (m* TLMsgResendReq) Decode(dbuf *DecodeBuf) error {
    m.SetMsgIds(dbuf.VectorLong())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// FutureSalts <--
//  + TL_FutureSalts
//

func (m *FutureSalts) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_future_salts:
        t := m.To_FutureSalts()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *FutureSalts) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_future_salts:
        m2 := &TLFutureSalts{&FutureSalts_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// future_salts#ae500895 req_msg_id:long now:int salts:vector<future_salt> = FutureSalts;
func (m *FutureSalts) To_FutureSalts() *TLFutureSalts {
    return &TLFutureSalts{
        Data2: m.Data2,
    }
}



// future_salts#ae500895 req_msg_id:long now:int salts:vector<future_salt> = FutureSalts;
func (m *TLFutureSalts) To_FutureSalts() *FutureSalts {
    return &FutureSalts{
        Constructor: TLConstructor_CRC32_future_salts,
        Data2: m.Data2,
    }
}


func (m *TLFutureSalts) SetReqMsgId(v int64) { m.Data2.ReqMsgId = v }
func (m *TLFutureSalts) GetReqMsgId() int64 { return m.Data2.ReqMsgId }

func (m *TLFutureSalts) SetNow(v int32) { m.Data2.Now = v }
func (m *TLFutureSalts) GetNow() int32 { return m.Data2.Now }

func (m *TLFutureSalts) SetSalts(v []*TLFutureSalt) { m.Data2.Salts = v }
func (m *TLFutureSalts) GetSalts() []*TLFutureSalt { return m.Data2.Salts }


func NewTLFutureSalts() * TLFutureSalts {
    return &TLFutureSalts{ Data2: &FutureSalts_Data{} }
}

func (m* TLFutureSalts) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_future_salts))

    x.Long(m.GetReqMsgId())
    x.Int(m.GetNow())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetSalts())))
for _, v := range m.GetSalts() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLFutureSalts) Decode(dbuf *DecodeBuf) error {
    m.SetReqMsgId(dbuf.Long())
    m.SetNow(dbuf.Int())
    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*TLFutureSalt, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &TLFutureSalt{Data2: &FutureSalt_Data{}}
	v3[i].Decode(dbuf)
}
m.SetSalts(v3)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// HttpWait <--
//  + TL_HttpWait
//

func (m *HttpWait) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_http_wait:
        t := m.To_HttpWait()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *HttpWait) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_http_wait:
        m2 := &TLHttpWait{&HttpWait_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// http_wait#9299359f max_delay:int wait_after:int max_wait:int = HttpWait;
func (m *HttpWait) To_HttpWait() *TLHttpWait {
    return &TLHttpWait{
        Data2: m.Data2,
    }
}



// http_wait#9299359f max_delay:int wait_after:int max_wait:int = HttpWait;
func (m *TLHttpWait) To_HttpWait() *HttpWait {
    return &HttpWait{
        Constructor: TLConstructor_CRC32_http_wait,
        Data2: m.Data2,
    }
}


func (m *TLHttpWait) SetMaxDelay(v int32) { m.Data2.MaxDelay = v }
func (m *TLHttpWait) GetMaxDelay() int32 { return m.Data2.MaxDelay }

func (m *TLHttpWait) SetWaitAfter(v int32) { m.Data2.WaitAfter = v }
func (m *TLHttpWait) GetWaitAfter() int32 { return m.Data2.WaitAfter }

func (m *TLHttpWait) SetMaxWait(v int32) { m.Data2.MaxWait = v }
func (m *TLHttpWait) GetMaxWait() int32 { return m.Data2.MaxWait }


func NewTLHttpWait() * TLHttpWait {
    return &TLHttpWait{ Data2: &HttpWait_Data{} }
}

func (m* TLHttpWait) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_http_wait))

    x.Int(m.GetMaxDelay())
    x.Int(m.GetWaitAfter())
    x.Int(m.GetMaxWait())

    return x.buf
}

func (m* TLHttpWait) Decode(dbuf *DecodeBuf) error {
    m.SetMaxDelay(dbuf.Int())
    m.SetWaitAfter(dbuf.Int())
    m.SetMaxWait(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// AccessPointRule <--
//  + TL_AccessPointRule
//

func (m *AccessPointRule) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_accessPointRule:
        t := m.To_AccessPointRule()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *AccessPointRule) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_accessPointRule:
        m2 := &TLAccessPointRule{&AccessPointRule_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// accessPointRule#20634ce phone_prefix_rules:string dc_id:int ips:vector<IpPort> = AccessPointRule;
func (m *AccessPointRule) To_AccessPointRule() *TLAccessPointRule {
    return &TLAccessPointRule{
        Data2: m.Data2,
    }
}



// accessPointRule#20634ce phone_prefix_rules:string dc_id:int ips:vector<IpPort> = AccessPointRule;
func (m *TLAccessPointRule) To_AccessPointRule() *AccessPointRule {
    return &AccessPointRule{
        Constructor: TLConstructor_CRC32_accessPointRule,
        Data2: m.Data2,
    }
}


func (m *TLAccessPointRule) SetPhonePrefixRules(v string) { m.Data2.PhonePrefixRules = v }
func (m *TLAccessPointRule) GetPhonePrefixRules() string { return m.Data2.PhonePrefixRules }

func (m *TLAccessPointRule) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLAccessPointRule) GetDcId() int32 { return m.Data2.DcId }

func (m *TLAccessPointRule) SetIps(v []*IpPort) { m.Data2.Ips = v }
func (m *TLAccessPointRule) GetIps() []*IpPort { return m.Data2.Ips }


func NewTLAccessPointRule() * TLAccessPointRule {
    return &TLAccessPointRule{ Data2: &AccessPointRule_Data{} }
}

func (m* TLAccessPointRule) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_accessPointRule))

    x.String(m.GetPhonePrefixRules())
    x.Int(m.GetDcId())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetIps())))
for _, v := range m.GetIps() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLAccessPointRule) Decode(dbuf *DecodeBuf) error {
    m.SetPhonePrefixRules(dbuf.String())
    m.SetDcId(dbuf.Int())
    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*IpPort, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &IpPort{}
	v3[i].Decode(dbuf)
}
m.SetIps(v3)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// TlsClientHello <--
//  + TL_TlsClientHello
//

func (m *TlsClientHello) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_tlsClientHello:
        t := m.To_TlsClientHello()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *TlsClientHello) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_tlsClientHello:
        m2 := &TLTlsClientHello{&TlsClientHello_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// tlsClientHello#6c52c484 blocks:vector<TlsBlock> = TlsClientHello;
func (m *TlsClientHello) To_TlsClientHello() *TLTlsClientHello {
    return &TLTlsClientHello{
        Data2: m.Data2,
    }
}



// tlsClientHello#6c52c484 blocks:vector<TlsBlock> = TlsClientHello;
func (m *TLTlsClientHello) To_TlsClientHello() *TlsClientHello {
    return &TlsClientHello{
        Constructor: TLConstructor_CRC32_tlsClientHello,
        Data2: m.Data2,
    }
}


func (m *TLTlsClientHello) SetBlocks(v []*TlsBlock) { m.Data2.Blocks = v }
func (m *TLTlsClientHello) GetBlocks() []*TlsBlock { return m.Data2.Blocks }


func NewTLTlsClientHello() * TLTlsClientHello {
    return &TLTlsClientHello{ Data2: &TlsClientHello_Data{} }
}

func (m* TLTlsClientHello) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_tlsClientHello))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetBlocks())))
for _, v := range m.GetBlocks() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLTlsClientHello) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*TlsBlock, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &TlsBlock{}
	v1[i].Decode(dbuf)
}
m.SetBlocks(v1)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// BadMsgNotification <--
//  + TL_BadMsgNotification
//  + TL_BadServerSalt
//

func (m *BadMsgNotification) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_bad_msg_notification:
        t := m.To_BadMsgNotification()
        return t.Encode()
    case TLConstructor_CRC32_bad_server_salt:
        t := m.To_BadServerSalt()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *BadMsgNotification) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_bad_msg_notification:
        m2 := &TLBadMsgNotification{&BadMsgNotification_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_bad_server_salt:
        m2 := &TLBadServerSalt{&BadMsgNotification_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// bad_msg_notification#a7eff811 bad_msg_id:long bad_msg_seqno:int error_code:int = BadMsgNotification;
func (m *BadMsgNotification) To_BadMsgNotification() *TLBadMsgNotification {
    return &TLBadMsgNotification{
        Data2: m.Data2,
    }
}

// bad_server_salt#edab447b bad_msg_id:long bad_msg_seqno:int error_code:int new_server_salt:long = BadMsgNotification;
func (m *BadMsgNotification) To_BadServerSalt() *TLBadServerSalt {
    return &TLBadServerSalt{
        Data2: m.Data2,
    }
}



// bad_msg_notification#a7eff811 bad_msg_id:long bad_msg_seqno:int error_code:int = BadMsgNotification;
func (m *TLBadMsgNotification) To_BadMsgNotification() *BadMsgNotification {
    return &BadMsgNotification{
        Constructor: TLConstructor_CRC32_bad_msg_notification,
        Data2: m.Data2,
    }
}


func (m *TLBadMsgNotification) SetBadMsgId(v int64) { m.Data2.BadMsgId = v }
func (m *TLBadMsgNotification) GetBadMsgId() int64 { return m.Data2.BadMsgId }

func (m *TLBadMsgNotification) SetBadMsgSeqno(v int32) { m.Data2.BadMsgSeqno = v }
func (m *TLBadMsgNotification) GetBadMsgSeqno() int32 { return m.Data2.BadMsgSeqno }

func (m *TLBadMsgNotification) SetErrorCode(v int32) { m.Data2.ErrorCode = v }
func (m *TLBadMsgNotification) GetErrorCode() int32 { return m.Data2.ErrorCode }


func NewTLBadMsgNotification() * TLBadMsgNotification {
    return &TLBadMsgNotification{ Data2: &BadMsgNotification_Data{} }
}

func (m* TLBadMsgNotification) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_bad_msg_notification))

    x.Long(m.GetBadMsgId())
    x.Int(m.GetBadMsgSeqno())
    x.Int(m.GetErrorCode())

    return x.buf
}

func (m* TLBadMsgNotification) Decode(dbuf *DecodeBuf) error {
    m.SetBadMsgId(dbuf.Long())
    m.SetBadMsgSeqno(dbuf.Int())
    m.SetErrorCode(dbuf.Int())

    return dbuf.err
}
// bad_server_salt#edab447b bad_msg_id:long bad_msg_seqno:int error_code:int new_server_salt:long = BadMsgNotification;
func (m *TLBadServerSalt) To_BadMsgNotification() *BadMsgNotification {
    return &BadMsgNotification{
        Constructor: TLConstructor_CRC32_bad_server_salt,
        Data2: m.Data2,
    }
}


func (m *TLBadServerSalt) SetBadMsgId(v int64) { m.Data2.BadMsgId = v }
func (m *TLBadServerSalt) GetBadMsgId() int64 { return m.Data2.BadMsgId }

func (m *TLBadServerSalt) SetBadMsgSeqno(v int32) { m.Data2.BadMsgSeqno = v }
func (m *TLBadServerSalt) GetBadMsgSeqno() int32 { return m.Data2.BadMsgSeqno }

func (m *TLBadServerSalt) SetErrorCode(v int32) { m.Data2.ErrorCode = v }
func (m *TLBadServerSalt) GetErrorCode() int32 { return m.Data2.ErrorCode }

func (m *TLBadServerSalt) SetNewServerSalt(v int64) { m.Data2.NewServerSalt = v }
func (m *TLBadServerSalt) GetNewServerSalt() int64 { return m.Data2.NewServerSalt }


func NewTLBadServerSalt() * TLBadServerSalt {
    return &TLBadServerSalt{ Data2: &BadMsgNotification_Data{} }
}

func (m* TLBadServerSalt) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_bad_server_salt))

    x.Long(m.GetBadMsgId())
    x.Int(m.GetBadMsgSeqno())
    x.Int(m.GetErrorCode())
    x.Long(m.GetNewServerSalt())

    return x.buf
}

func (m* TLBadServerSalt) Decode(dbuf *DecodeBuf) error {
    m.SetBadMsgId(dbuf.Long())
    m.SetBadMsgSeqno(dbuf.Int())
    m.SetErrorCode(dbuf.Int())
    m.SetNewServerSalt(dbuf.Long())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// MsgsStateReq <--
//  + TL_MsgsStateReq
//

func (m *MsgsStateReq) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_msgs_state_req:
        t := m.To_MsgsStateReq()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *MsgsStateReq) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_msgs_state_req:
        m2 := &TLMsgsStateReq{&MsgsStateReq_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// msgs_state_req#da69fb52 msg_ids:Vector<long> = MsgsStateReq;
func (m *MsgsStateReq) To_MsgsStateReq() *TLMsgsStateReq {
    return &TLMsgsStateReq{
        Data2: m.Data2,
    }
}



// msgs_state_req#da69fb52 msg_ids:Vector<long> = MsgsStateReq;
func (m *TLMsgsStateReq) To_MsgsStateReq() *MsgsStateReq {
    return &MsgsStateReq{
        Constructor: TLConstructor_CRC32_msgs_state_req,
        Data2: m.Data2,
    }
}


func (m *TLMsgsStateReq) SetMsgIds(v []int64) { m.Data2.MsgIds = v }
func (m *TLMsgsStateReq) GetMsgIds() []int64 { return m.Data2.MsgIds }


func NewTLMsgsStateReq() * TLMsgsStateReq {
    return &TLMsgsStateReq{ Data2: &MsgsStateReq_Data{} }
}

func (m* TLMsgsStateReq) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_msgs_state_req))

    x.VectorLong(m.GetMsgIds())


    return x.buf
}

func (m* TLMsgsStateReq) Decode(dbuf *DecodeBuf) error {
    m.SetMsgIds(dbuf.VectorLong())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// MsgsStateInfo <--
//  + TL_MsgsStateInfo
//

func (m *MsgsStateInfo) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_msgs_state_info:
        t := m.To_MsgsStateInfo()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *MsgsStateInfo) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_msgs_state_info:
        m2 := &TLMsgsStateInfo{&MsgsStateInfo_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// msgs_state_info#04deb57d req_msg_id:long info:string = MsgsStateInfo;
func (m *MsgsStateInfo) To_MsgsStateInfo() *TLMsgsStateInfo {
    return &TLMsgsStateInfo{
        Data2: m.Data2,
    }
}



// msgs_state_info#04deb57d req_msg_id:long info:string = MsgsStateInfo;
func (m *TLMsgsStateInfo) To_MsgsStateInfo() *MsgsStateInfo {
    return &MsgsStateInfo{
        Constructor: TLConstructor_CRC32_msgs_state_info,
        Data2: m.Data2,
    }
}


func (m *TLMsgsStateInfo) SetReqMsgId(v int64) { m.Data2.ReqMsgId = v }
func (m *TLMsgsStateInfo) GetReqMsgId() int64 { return m.Data2.ReqMsgId }

func (m *TLMsgsStateInfo) SetInfo(v string) { m.Data2.Info = v }
func (m *TLMsgsStateInfo) GetInfo() string { return m.Data2.Info }


func NewTLMsgsStateInfo() * TLMsgsStateInfo {
    return &TLMsgsStateInfo{ Data2: &MsgsStateInfo_Data{} }
}

func (m* TLMsgsStateInfo) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_msgs_state_info))

    x.Long(m.GetReqMsgId())
    x.String(m.GetInfo())

    return x.buf
}

func (m* TLMsgsStateInfo) Decode(dbuf *DecodeBuf) error {
    m.SetReqMsgId(dbuf.Long())
    m.SetInfo(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// RpcError <--
//  + TL_RpcError
//

func (m *RpcError) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_rpc_error:
        t := m.To_RpcError()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *RpcError) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_rpc_error:
        m2 := &TLRpcError{&RpcError_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// rpc_error#2144ca19 error_code:int error_message:string = RpcError;
func (m *RpcError) To_RpcError() *TLRpcError {
    return &TLRpcError{
        Data2: m.Data2,
    }
}



// rpc_error#2144ca19 error_code:int error_message:string = RpcError;
func (m *TLRpcError) To_RpcError() *RpcError {
    return &RpcError{
        Constructor: TLConstructor_CRC32_rpc_error,
        Data2: m.Data2,
    }
}


func (m *TLRpcError) SetErrorCode(v int32) { m.Data2.ErrorCode = v }
func (m *TLRpcError) GetErrorCode() int32 { return m.Data2.ErrorCode }

func (m *TLRpcError) SetErrorMessage(v string) { m.Data2.ErrorMessage = v }
func (m *TLRpcError) GetErrorMessage() string { return m.Data2.ErrorMessage }


func NewTLRpcError() * TLRpcError {
    return &TLRpcError{ Data2: &RpcError_Data{} }
}

func (m* TLRpcError) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_rpc_error))

    x.Int(m.GetErrorCode())
    x.String(m.GetErrorMessage())

    return x.buf
}

func (m* TLRpcError) Decode(dbuf *DecodeBuf) error {
    m.SetErrorCode(dbuf.Int())
    m.SetErrorMessage(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// RpcDropAnswer <--
//  + TL_RpcAnswerUnknown
//  + TL_RpcAnswerDroppedRunning
//  + TL_RpcAnswerDropped
//

func (m *RpcDropAnswer) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_rpc_answer_unknown:
        t := m.To_RpcAnswerUnknown()
        return t.Encode()
    case TLConstructor_CRC32_rpc_answer_dropped_running:
        t := m.To_RpcAnswerDroppedRunning()
        return t.Encode()
    case TLConstructor_CRC32_rpc_answer_dropped:
        t := m.To_RpcAnswerDropped()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *RpcDropAnswer) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_rpc_answer_unknown:
        m2 := &TLRpcAnswerUnknown{&RpcDropAnswer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_rpc_answer_dropped_running:
        m2 := &TLRpcAnswerDroppedRunning{&RpcDropAnswer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_rpc_answer_dropped:
        m2 := &TLRpcAnswerDropped{&RpcDropAnswer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// rpc_answer_unknown#5e2ad36e = RpcDropAnswer;
func (m *RpcDropAnswer) To_RpcAnswerUnknown() *TLRpcAnswerUnknown {
    return &TLRpcAnswerUnknown{
        Data2: m.Data2,
    }
}

// rpc_answer_dropped_running#cd78e586 = RpcDropAnswer;
func (m *RpcDropAnswer) To_RpcAnswerDroppedRunning() *TLRpcAnswerDroppedRunning {
    return &TLRpcAnswerDroppedRunning{
        Data2: m.Data2,
    }
}

// rpc_answer_dropped#a43ad8b7 msg_id:long seq_no:int bytes:int = RpcDropAnswer;
func (m *RpcDropAnswer) To_RpcAnswerDropped() *TLRpcAnswerDropped {
    return &TLRpcAnswerDropped{
        Data2: m.Data2,
    }
}



// rpc_answer_unknown#5e2ad36e = RpcDropAnswer;
func (m *TLRpcAnswerUnknown) To_RpcDropAnswer() *RpcDropAnswer {
    return &RpcDropAnswer{
        Constructor: TLConstructor_CRC32_rpc_answer_unknown,
        Data2: m.Data2,
    }
}



func NewTLRpcAnswerUnknown() * TLRpcAnswerUnknown {
    return &TLRpcAnswerUnknown{ Data2: &RpcDropAnswer_Data{} }
}

func (m* TLRpcAnswerUnknown) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_rpc_answer_unknown))


    return x.buf
}

func (m* TLRpcAnswerUnknown) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// rpc_answer_dropped_running#cd78e586 = RpcDropAnswer;
func (m *TLRpcAnswerDroppedRunning) To_RpcDropAnswer() *RpcDropAnswer {
    return &RpcDropAnswer{
        Constructor: TLConstructor_CRC32_rpc_answer_dropped_running,
        Data2: m.Data2,
    }
}



func NewTLRpcAnswerDroppedRunning() * TLRpcAnswerDroppedRunning {
    return &TLRpcAnswerDroppedRunning{ Data2: &RpcDropAnswer_Data{} }
}

func (m* TLRpcAnswerDroppedRunning) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_rpc_answer_dropped_running))


    return x.buf
}

func (m* TLRpcAnswerDroppedRunning) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// rpc_answer_dropped#a43ad8b7 msg_id:long seq_no:int bytes:int = RpcDropAnswer;
func (m *TLRpcAnswerDropped) To_RpcDropAnswer() *RpcDropAnswer {
    return &RpcDropAnswer{
        Constructor: TLConstructor_CRC32_rpc_answer_dropped,
        Data2: m.Data2,
    }
}


func (m *TLRpcAnswerDropped) SetMsgId(v int64) { m.Data2.MsgId = v }
func (m *TLRpcAnswerDropped) GetMsgId() int64 { return m.Data2.MsgId }

func (m *TLRpcAnswerDropped) SetSeqNo(v int32) { m.Data2.SeqNo = v }
func (m *TLRpcAnswerDropped) GetSeqNo() int32 { return m.Data2.SeqNo }

func (m *TLRpcAnswerDropped) SetBytes(v int32) { m.Data2.Bytes = v }
func (m *TLRpcAnswerDropped) GetBytes() int32 { return m.Data2.Bytes }


func NewTLRpcAnswerDropped() * TLRpcAnswerDropped {
    return &TLRpcAnswerDropped{ Data2: &RpcDropAnswer_Data{} }
}

func (m* TLRpcAnswerDropped) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_rpc_answer_dropped))

    x.Long(m.GetMsgId())
    x.Int(m.GetSeqNo())
    x.Int(m.GetBytes())

    return x.buf
}

func (m* TLRpcAnswerDropped) Decode(dbuf *DecodeBuf) error {
    m.SetMsgId(dbuf.Long())
    m.SetSeqNo(dbuf.Int())
    m.SetBytes(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// NewSession <--
//  + TL_NewSessionCreated
//

func (m *NewSession) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_new_session_created:
        t := m.To_NewSessionCreated()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *NewSession) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_new_session_created:
        m2 := &TLNewSessionCreated{&NewSession_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// new_session_created#9ec20908 first_msg_id:long unique_id:long server_salt:long = NewSession;
func (m *NewSession) To_NewSessionCreated() *TLNewSessionCreated {
    return &TLNewSessionCreated{
        Data2: m.Data2,
    }
}



// new_session_created#9ec20908 first_msg_id:long unique_id:long server_salt:long = NewSession;
func (m *TLNewSessionCreated) To_NewSession() *NewSession {
    return &NewSession{
        Constructor: TLConstructor_CRC32_new_session_created,
        Data2: m.Data2,
    }
}


func (m *TLNewSessionCreated) SetFirstMsgId(v int64) { m.Data2.FirstMsgId = v }
func (m *TLNewSessionCreated) GetFirstMsgId() int64 { return m.Data2.FirstMsgId }

func (m *TLNewSessionCreated) SetUniqueId(v int64) { m.Data2.UniqueId = v }
func (m *TLNewSessionCreated) GetUniqueId() int64 { return m.Data2.UniqueId }

func (m *TLNewSessionCreated) SetServerSalt(v int64) { m.Data2.ServerSalt = v }
func (m *TLNewSessionCreated) GetServerSalt() int64 { return m.Data2.ServerSalt }


func NewTLNewSessionCreated() * TLNewSessionCreated {
    return &TLNewSessionCreated{ Data2: &NewSession_Data{} }
}

func (m* TLNewSessionCreated) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_new_session_created))

    x.Long(m.GetFirstMsgId())
    x.Long(m.GetUniqueId())
    x.Long(m.GetServerSalt())

    return x.buf
}

func (m* TLNewSessionCreated) Decode(dbuf *DecodeBuf) error {
    m.SetFirstMsgId(dbuf.Long())
    m.SetUniqueId(dbuf.Long())
    m.SetServerSalt(dbuf.Long())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Help_ConfigSimple <--
//  + TL_HelpConfigSimple
//  + TL_HelpConfigSimple114
//

func (m *Help_ConfigSimple) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_help_configSimple:
        t := m.To_HelpConfigSimple()
        return t.Encode()
    case TLConstructor_CRC32_help_configSimple114:
        t := m.To_HelpConfigSimple114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Help_ConfigSimple) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_help_configSimple:
        m2 := &TLHelpConfigSimple{&Help_ConfigSimple_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_help_configSimple114:
        m2 := &TLHelpConfigSimple114{&Help_ConfigSimple_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// help.configSimple#d997c3c5 date:int expires:int dc_id:int ip_port_list:Vector<ipPort> = help.ConfigSimple;
func (m *Help_ConfigSimple) To_HelpConfigSimple() *TLHelpConfigSimple {
    return &TLHelpConfigSimple{
        Data2: m.Data2,
    }
}

// help.configSimple#66d2808 date:int expires:int rules:vector<AccessPointRule> = help.ConfigSimple;
func (m *Help_ConfigSimple) To_HelpConfigSimple114() *TLHelpConfigSimple114 {
    return &TLHelpConfigSimple114{
        Data2: m.Data2,
    }
}



// help.configSimple#d997c3c5 date:int expires:int dc_id:int ip_port_list:Vector<ipPort> = help.ConfigSimple;
func (m *TLHelpConfigSimple) To_Help_ConfigSimple() *Help_ConfigSimple {
    return &Help_ConfigSimple{
        Constructor: TLConstructor_CRC32_help_configSimple,
        Data2: m.Data2,
    }
}


func (m *TLHelpConfigSimple) SetDate(v int32) { m.Data2.Date = v }
func (m *TLHelpConfigSimple) GetDate() int32 { return m.Data2.Date }

func (m *TLHelpConfigSimple) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLHelpConfigSimple) GetExpires() int32 { return m.Data2.Expires }

func (m *TLHelpConfigSimple) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLHelpConfigSimple) GetDcId() int32 { return m.Data2.DcId }

func (m *TLHelpConfigSimple) SetIpPortList(v []*TLIpPort) { m.Data2.IpPortList = v }
func (m *TLHelpConfigSimple) GetIpPortList() []*TLIpPort { return m.Data2.IpPortList }


func NewTLHelpConfigSimple() * TLHelpConfigSimple {
    return &TLHelpConfigSimple{ Data2: &Help_ConfigSimple_Data{} }
}

func (m* TLHelpConfigSimple) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_help_configSimple))

    x.Int(m.GetDate())
    x.Int(m.GetExpires())
    x.Int(m.GetDcId())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetIpPortList())))
for _, v := range m.GetIpPortList() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLHelpConfigSimple) Decode(dbuf *DecodeBuf) error {
    m.SetDate(dbuf.Int())
    m.SetExpires(dbuf.Int())
    m.SetDcId(dbuf.Int())
    c4 := dbuf.Int()
if c4 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
	return dbuf.err
}
l4 := dbuf.Int()
v4 := make([]*TLIpPort, l4)
for i := int32(0); i < l4; i++ {
	v4[i] = &TLIpPort{}
	v4[i].Decode(dbuf)
}
m.SetIpPortList(v4)


    return dbuf.err
}
// help.configSimple#66d2808 date:int expires:int rules:vector<AccessPointRule> = help.ConfigSimple;
func (m *TLHelpConfigSimple114) To_Help_ConfigSimple() *Help_ConfigSimple {
    return &Help_ConfigSimple{
        Constructor: TLConstructor_CRC32_help_configSimple114,
        Data2: m.Data2,
    }
}


func (m *TLHelpConfigSimple114) SetDate(v int32) { m.Data2.Date = v }
func (m *TLHelpConfigSimple114) GetDate() int32 { return m.Data2.Date }

func (m *TLHelpConfigSimple114) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLHelpConfigSimple114) GetExpires() int32 { return m.Data2.Expires }

func (m *TLHelpConfigSimple114) SetRules(v []*AccessPointRule) { m.Data2.Rules = v }
func (m *TLHelpConfigSimple114) GetRules() []*AccessPointRule { return m.Data2.Rules }


func NewTLHelpConfigSimple114() * TLHelpConfigSimple114 {
    return &TLHelpConfigSimple114{ Data2: &Help_ConfigSimple_Data{} }
}

func (m* TLHelpConfigSimple114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_help_configSimple114))

    x.Int(m.GetDate())
    x.Int(m.GetExpires())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetRules())))
for _, v := range m.GetRules() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLHelpConfigSimple114) Decode(dbuf *DecodeBuf) error {
    m.SetDate(dbuf.Int())
    m.SetExpires(dbuf.Int())
    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*AccessPointRule, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &AccessPointRule{}
	v3[i].Decode(dbuf)
}
m.SetRules(v3)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// MsgsAck <--
//  + TL_MsgsAck
//

func (m *MsgsAck) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_msgs_ack:
        t := m.To_MsgsAck()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *MsgsAck) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_msgs_ack:
        m2 := &TLMsgsAck{&MsgsAck_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// msgs_ack#62d6b459 msg_ids:Vector<long> = MsgsAck;
func (m *MsgsAck) To_MsgsAck() *TLMsgsAck {
    return &TLMsgsAck{
        Data2: m.Data2,
    }
}



// msgs_ack#62d6b459 msg_ids:Vector<long> = MsgsAck;
func (m *TLMsgsAck) To_MsgsAck() *MsgsAck {
    return &MsgsAck{
        Constructor: TLConstructor_CRC32_msgs_ack,
        Data2: m.Data2,
    }
}


func (m *TLMsgsAck) SetMsgIds(v []int64) { m.Data2.MsgIds = v }
func (m *TLMsgsAck) GetMsgIds() []int64 { return m.Data2.MsgIds }


func NewTLMsgsAck() * TLMsgsAck {
    return &TLMsgsAck{ Data2: &MsgsAck_Data{} }
}

func (m* TLMsgsAck) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_msgs_ack))

    x.VectorLong(m.GetMsgIds())


    return x.buf
}

func (m* TLMsgsAck) Decode(dbuf *DecodeBuf) error {
    m.SetMsgIds(dbuf.VectorLong())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Pong <--
//  + TL_Pong
//

func (m *Pong) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_pong:
        t := m.To_Pong()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Pong) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_pong:
        m2 := &TLPong{&Pong_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// pong#347773c5 msg_id:long ping_id:long = Pong;
func (m *Pong) To_Pong() *TLPong {
    return &TLPong{
        Data2: m.Data2,
    }
}



// pong#347773c5 msg_id:long ping_id:long = Pong;
func (m *TLPong) To_Pong() *Pong {
    return &Pong{
        Constructor: TLConstructor_CRC32_pong,
        Data2: m.Data2,
    }
}


func (m *TLPong) SetMsgId(v int64) { m.Data2.MsgId = v }
func (m *TLPong) GetMsgId() int64 { return m.Data2.MsgId }

func (m *TLPong) SetPingId(v int64) { m.Data2.PingId = v }
func (m *TLPong) GetPingId() int64 { return m.Data2.PingId }


func NewTLPong() * TLPong {
    return &TLPong{ Data2: &Pong_Data{} }
}

func (m* TLPong) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pong))

    x.Long(m.GetMsgId())
    x.Long(m.GetPingId())

    return x.buf
}

func (m* TLPong) Decode(dbuf *DecodeBuf) error {
    m.SetMsgId(dbuf.Long())
    m.SetPingId(dbuf.Long())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// FutureSalt <--
//  + TL_FutureSalt
//

func (m *FutureSalt) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_future_salt:
        t := m.To_FutureSalt()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *FutureSalt) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_future_salt:
        m2 := &TLFutureSalt{&FutureSalt_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// future_salt#0949d9dc valid_since:int valid_until:int salt:long = FutureSalt;
func (m *FutureSalt) To_FutureSalt() *TLFutureSalt {
    return &TLFutureSalt{
        Data2: m.Data2,
    }
}



// future_salt#0949d9dc valid_since:int valid_until:int salt:long = FutureSalt;
func (m *TLFutureSalt) To_FutureSalt() *FutureSalt {
    return &FutureSalt{
        Constructor: TLConstructor_CRC32_future_salt,
        Data2: m.Data2,
    }
}


func (m *TLFutureSalt) SetValidSince(v int32) { m.Data2.ValidSince = v }
func (m *TLFutureSalt) GetValidSince() int32 { return m.Data2.ValidSince }

func (m *TLFutureSalt) SetValidUntil(v int32) { m.Data2.ValidUntil = v }
func (m *TLFutureSalt) GetValidUntil() int32 { return m.Data2.ValidUntil }

func (m *TLFutureSalt) SetSalt(v int64) { m.Data2.Salt = v }
func (m *TLFutureSalt) GetSalt() int64 { return m.Data2.Salt }


func NewTLFutureSalt() * TLFutureSalt {
    return &TLFutureSalt{ Data2: &FutureSalt_Data{} }
}

func (m* TLFutureSalt) Encode() []byte {
    x := NewEncodeBuf(512)
    //x.Int(int32(TLConstructor_CRC32_future_salt))

    x.Int(m.GetValidSince())
    x.Int(m.GetValidUntil())
    x.Long(m.GetSalt())

    return x.buf
}

func (m* TLFutureSalt) Decode(dbuf *DecodeBuf) error {
    m.SetValidSince(dbuf.Int())
    m.SetValidUntil(dbuf.Int())
    m.SetSalt(dbuf.Long())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// DestroySessionRes <--
//  + TL_DestroySessionOk
//  + TL_DestroySessionNone
//

func (m *DestroySessionRes) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_destroy_session_ok:
        t := m.To_DestroySessionOk()
        return t.Encode()
    case TLConstructor_CRC32_destroy_session_none:
        t := m.To_DestroySessionNone()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *DestroySessionRes) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_destroy_session_ok:
        m2 := &TLDestroySessionOk{&DestroySessionRes_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_destroy_session_none:
        m2 := &TLDestroySessionNone{&DestroySessionRes_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// destroy_session_ok#e22045fc session_id:long = DestroySessionRes;
func (m *DestroySessionRes) To_DestroySessionOk() *TLDestroySessionOk {
    return &TLDestroySessionOk{
        Data2: m.Data2,
    }
}

// destroy_session_none#62d350c9 session_id:long = DestroySessionRes;
func (m *DestroySessionRes) To_DestroySessionNone() *TLDestroySessionNone {
    return &TLDestroySessionNone{
        Data2: m.Data2,
    }
}



// destroy_session_ok#e22045fc session_id:long = DestroySessionRes;
func (m *TLDestroySessionOk) To_DestroySessionRes() *DestroySessionRes {
    return &DestroySessionRes{
        Constructor: TLConstructor_CRC32_destroy_session_ok,
        Data2: m.Data2,
    }
}


func (m *TLDestroySessionOk) SetSessionId(v int64) { m.Data2.SessionId = v }
func (m *TLDestroySessionOk) GetSessionId() int64 { return m.Data2.SessionId }


func NewTLDestroySessionOk() * TLDestroySessionOk {
    return &TLDestroySessionOk{ Data2: &DestroySessionRes_Data{} }
}

func (m* TLDestroySessionOk) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_destroy_session_ok))

    x.Long(m.GetSessionId())

    return x.buf
}

func (m* TLDestroySessionOk) Decode(dbuf *DecodeBuf) error {
    m.SetSessionId(dbuf.Long())

    return dbuf.err
}
// destroy_session_none#62d350c9 session_id:long = DestroySessionRes;
func (m *TLDestroySessionNone) To_DestroySessionRes() *DestroySessionRes {
    return &DestroySessionRes{
        Constructor: TLConstructor_CRC32_destroy_session_none,
        Data2: m.Data2,
    }
}


func (m *TLDestroySessionNone) SetSessionId(v int64) { m.Data2.SessionId = v }
func (m *TLDestroySessionNone) GetSessionId() int64 { return m.Data2.SessionId }


func NewTLDestroySessionNone() * TLDestroySessionNone {
    return &TLDestroySessionNone{ Data2: &DestroySessionRes_Data{} }
}

func (m* TLDestroySessionNone) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_destroy_session_none))

    x.Long(m.GetSessionId())

    return x.buf
}

func (m* TLDestroySessionNone) Decode(dbuf *DecodeBuf) error {
    m.SetSessionId(dbuf.Long())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// IpPort <--
//  + TL_IpPort
//  + TL_IpPortSecret
//

func (m *IpPort) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_ipPort:
        t := m.To_IpPort()
        return t.Encode()
    case TLConstructor_CRC32_ipPortSecret:
        t := m.To_IpPortSecret()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *IpPort) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_ipPort:
        m2 := &TLIpPort{&IpPort_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_ipPortSecret:
        m2 := &TLIpPortSecret{&IpPort_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// ipPort#d433ad73 ipv4:int port:int = IpPort;
func (m *IpPort) To_IpPort() *TLIpPort {
    return &TLIpPort{
        Data2: m.Data2,
    }
}

// ipPortSecret#402d9b47 ipv4:int port:int secret:bytes = IpPort;
func (m *IpPort) To_IpPortSecret() *TLIpPortSecret {
    return &TLIpPortSecret{
        Data2: m.Data2,
    }
}



// ipPort#d433ad73 ipv4:int port:int = IpPort;
func (m *TLIpPort) To_IpPort() *IpPort {
    return &IpPort{
        Constructor: TLConstructor_CRC32_ipPort,
        Data2: m.Data2,
    }
}


func (m *TLIpPort) SetIpv4(v int32) { m.Data2.Ipv4 = v }
func (m *TLIpPort) GetIpv4() int32 { return m.Data2.Ipv4 }

func (m *TLIpPort) SetPort(v int32) { m.Data2.Port = v }
func (m *TLIpPort) GetPort() int32 { return m.Data2.Port }


func NewTLIpPort() * TLIpPort {
    return &TLIpPort{ Data2: &IpPort_Data{} }
}

func (m* TLIpPort) Encode() []byte {
    x := NewEncodeBuf(512)
    //x.Int(int32(TLConstructor_CRC32_ipPort))

    x.Int(m.GetIpv4())
    x.Int(m.GetPort())

    return x.buf
}

func (m* TLIpPort) Decode(dbuf *DecodeBuf) error {
    m.SetIpv4(dbuf.Int())
    m.SetPort(dbuf.Int())

    return dbuf.err
}
// ipPortSecret#402d9b47 ipv4:int port:int secret:bytes = IpPort;
func (m *TLIpPortSecret) To_IpPort() *IpPort {
    return &IpPort{
        Constructor: TLConstructor_CRC32_ipPortSecret,
        Data2: m.Data2,
    }
}


func (m *TLIpPortSecret) SetIpv4(v int32) { m.Data2.Ipv4 = v }
func (m *TLIpPortSecret) GetIpv4() int32 { return m.Data2.Ipv4 }

func (m *TLIpPortSecret) SetPort(v int32) { m.Data2.Port = v }
func (m *TLIpPortSecret) GetPort() int32 { return m.Data2.Port }

func (m *TLIpPortSecret) SetSecret(v []byte) { m.Data2.Secret = v }
func (m *TLIpPortSecret) GetSecret() []byte { return m.Data2.Secret }


func NewTLIpPortSecret() * TLIpPortSecret {
    return &TLIpPortSecret{ Data2: &IpPort_Data{} }
}

func (m* TLIpPortSecret) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_ipPortSecret))

    x.Int(m.GetIpv4())
    x.Int(m.GetPort())
    x.StringBytes(m.GetSecret())

    return x.buf
}

func (m* TLIpPortSecret) Decode(dbuf *DecodeBuf) error {
    m.SetIpv4(dbuf.Int())
    m.SetPort(dbuf.Int())
    m.SetSecret(dbuf.StringBytes())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// TlsBlock <--
//  + TL_TlsBlockString
//  + TL_TlsBlockRandom
//  + TL_TlsBlockZero
//  + TL_TlsBlockDomain
//  + TL_TlsBlockGrease
//  + TL_TlsBlockPublicKey
//  + TL_TlsBlockScope
//

func (m *TlsBlock) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_tlsBlockString:
        t := m.To_TlsBlockString()
        return t.Encode()
    case TLConstructor_CRC32_tlsBlockRandom:
        t := m.To_TlsBlockRandom()
        return t.Encode()
    case TLConstructor_CRC32_tlsBlockZero:
        t := m.To_TlsBlockZero()
        return t.Encode()
    case TLConstructor_CRC32_tlsBlockDomain:
        t := m.To_TlsBlockDomain()
        return t.Encode()
    case TLConstructor_CRC32_tlsBlockGrease:
        t := m.To_TlsBlockGrease()
        return t.Encode()
    case TLConstructor_CRC32_tlsBlockPublicKey:
        t := m.To_TlsBlockPublicKey()
        return t.Encode()
    case TLConstructor_CRC32_tlsBlockScope:
        t := m.To_TlsBlockScope()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *TlsBlock) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_tlsBlockString:
        m2 := &TLTlsBlockString{&TlsBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_tlsBlockRandom:
        m2 := &TLTlsBlockRandom{&TlsBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_tlsBlockZero:
        m2 := &TLTlsBlockZero{&TlsBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_tlsBlockDomain:
        m2 := &TLTlsBlockDomain{&TlsBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_tlsBlockGrease:
        m2 := &TLTlsBlockGrease{&TlsBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_tlsBlockPublicKey:
        m2 := &TLTlsBlockPublicKey{&TlsBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_tlsBlockScope:
        m2 := &TLTlsBlockScope{&TlsBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// tlsBlockString#4218a164 data:string = TlsBlock;
func (m *TlsBlock) To_TlsBlockString() *TLTlsBlockString {
    return &TLTlsBlockString{
        Data2: m.Data2,
    }
}

// tlsBlockRandom#4d4dc41e length:int = TlsBlock;
func (m *TlsBlock) To_TlsBlockRandom() *TLTlsBlockRandom {
    return &TLTlsBlockRandom{
        Data2: m.Data2,
    }
}

// tlsBlockZero#9333afb length:int = TlsBlock;
func (m *TlsBlock) To_TlsBlockZero() *TLTlsBlockZero {
    return &TLTlsBlockZero{
        Data2: m.Data2,
    }
}

// tlsBlockDomain#10e8636f = TlsBlock;
func (m *TlsBlock) To_TlsBlockDomain() *TLTlsBlockDomain {
    return &TLTlsBlockDomain{
        Data2: m.Data2,
    }
}

// tlsBlockGrease#e675a1c1 seed:int = TlsBlock;
func (m *TlsBlock) To_TlsBlockGrease() *TLTlsBlockGrease {
    return &TLTlsBlockGrease{
        Data2: m.Data2,
    }
}

// tlsBlockPublicKey#9eb95b5c = TlsBlock;
func (m *TlsBlock) To_TlsBlockPublicKey() *TLTlsBlockPublicKey {
    return &TLTlsBlockPublicKey{
        Data2: m.Data2,
    }
}

// tlsBlockScope#e725d44f entries:Vector<TlsBlock> = TlsBlock;
func (m *TlsBlock) To_TlsBlockScope() *TLTlsBlockScope {
    return &TLTlsBlockScope{
        Data2: m.Data2,
    }
}



// tlsBlockString#4218a164 data:string = TlsBlock;
func (m *TLTlsBlockString) To_TlsBlock() *TlsBlock {
    return &TlsBlock{
        Constructor: TLConstructor_CRC32_tlsBlockString,
        Data2: m.Data2,
    }
}


func (m *TLTlsBlockString) SetData(v string) { m.Data2.Data = v }
func (m *TLTlsBlockString) GetData() string { return m.Data2.Data }


func NewTLTlsBlockString() * TLTlsBlockString {
    return &TLTlsBlockString{ Data2: &TlsBlock_Data{} }
}

func (m* TLTlsBlockString) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_tlsBlockString))

    x.String(m.GetData())

    return x.buf
}

func (m* TLTlsBlockString) Decode(dbuf *DecodeBuf) error {
    m.SetData(dbuf.String())

    return dbuf.err
}
// tlsBlockRandom#4d4dc41e length:int = TlsBlock;
func (m *TLTlsBlockRandom) To_TlsBlock() *TlsBlock {
    return &TlsBlock{
        Constructor: TLConstructor_CRC32_tlsBlockRandom,
        Data2: m.Data2,
    }
}


func (m *TLTlsBlockRandom) SetLength(v int32) { m.Data2.Length = v }
func (m *TLTlsBlockRandom) GetLength() int32 { return m.Data2.Length }


func NewTLTlsBlockRandom() * TLTlsBlockRandom {
    return &TLTlsBlockRandom{ Data2: &TlsBlock_Data{} }
}

func (m* TLTlsBlockRandom) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_tlsBlockRandom))

    x.Int(m.GetLength())

    return x.buf
}

func (m* TLTlsBlockRandom) Decode(dbuf *DecodeBuf) error {
    m.SetLength(dbuf.Int())

    return dbuf.err
}
// tlsBlockZero#9333afb length:int = TlsBlock;
func (m *TLTlsBlockZero) To_TlsBlock() *TlsBlock {
    return &TlsBlock{
        Constructor: TLConstructor_CRC32_tlsBlockZero,
        Data2: m.Data2,
    }
}


func (m *TLTlsBlockZero) SetLength(v int32) { m.Data2.Length = v }
func (m *TLTlsBlockZero) GetLength() int32 { return m.Data2.Length }


func NewTLTlsBlockZero() * TLTlsBlockZero {
    return &TLTlsBlockZero{ Data2: &TlsBlock_Data{} }
}

func (m* TLTlsBlockZero) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_tlsBlockZero))

    x.Int(m.GetLength())

    return x.buf
}

func (m* TLTlsBlockZero) Decode(dbuf *DecodeBuf) error {
    m.SetLength(dbuf.Int())

    return dbuf.err
}
// tlsBlockDomain#10e8636f = TlsBlock;
func (m *TLTlsBlockDomain) To_TlsBlock() *TlsBlock {
    return &TlsBlock{
        Constructor: TLConstructor_CRC32_tlsBlockDomain,
        Data2: m.Data2,
    }
}



func NewTLTlsBlockDomain() * TLTlsBlockDomain {
    return &TLTlsBlockDomain{ Data2: &TlsBlock_Data{} }
}

func (m* TLTlsBlockDomain) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_tlsBlockDomain))


    return x.buf
}

func (m* TLTlsBlockDomain) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// tlsBlockGrease#e675a1c1 seed:int = TlsBlock;
func (m *TLTlsBlockGrease) To_TlsBlock() *TlsBlock {
    return &TlsBlock{
        Constructor: TLConstructor_CRC32_tlsBlockGrease,
        Data2: m.Data2,
    }
}


func (m *TLTlsBlockGrease) SetSeed(v int32) { m.Data2.Seed = v }
func (m *TLTlsBlockGrease) GetSeed() int32 { return m.Data2.Seed }


func NewTLTlsBlockGrease() * TLTlsBlockGrease {
    return &TLTlsBlockGrease{ Data2: &TlsBlock_Data{} }
}

func (m* TLTlsBlockGrease) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_tlsBlockGrease))

    x.Int(m.GetSeed())

    return x.buf
}

func (m* TLTlsBlockGrease) Decode(dbuf *DecodeBuf) error {
    m.SetSeed(dbuf.Int())

    return dbuf.err
}
// tlsBlockPublicKey#9eb95b5c = TlsBlock;
func (m *TLTlsBlockPublicKey) To_TlsBlock() *TlsBlock {
    return &TlsBlock{
        Constructor: TLConstructor_CRC32_tlsBlockPublicKey,
        Data2: m.Data2,
    }
}



func NewTLTlsBlockPublicKey() * TLTlsBlockPublicKey {
    return &TLTlsBlockPublicKey{ Data2: &TlsBlock_Data{} }
}

func (m* TLTlsBlockPublicKey) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_tlsBlockPublicKey))


    return x.buf
}

func (m* TLTlsBlockPublicKey) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// tlsBlockScope#e725d44f entries:Vector<TlsBlock> = TlsBlock;
func (m *TLTlsBlockScope) To_TlsBlock() *TlsBlock {
    return &TlsBlock{
        Constructor: TLConstructor_CRC32_tlsBlockScope,
        Data2: m.Data2,
    }
}


func (m *TLTlsBlockScope) SetEntries(v []*TlsBlock) { m.Data2.Entries = v }
func (m *TLTlsBlockScope) GetEntries() []*TlsBlock { return m.Data2.Entries }


func NewTLTlsBlockScope() * TLTlsBlockScope {
    return &TLTlsBlockScope{ Data2: &TlsBlock_Data{} }
}

func (m* TLTlsBlockScope) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_tlsBlockScope))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetEntries())))
for _, v := range m.GetEntries() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLTlsBlockScope) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*TlsBlock, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &TlsBlock{}
	v1[i].Decode(dbuf)
}
m.SetEntries(v1)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// MsgDetailedInfo <--
//  + TL_MsgDetailedInfo
//  + TL_MsgNewDetailedInfo
//

func (m *MsgDetailedInfo) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_msg_detailed_info:
        t := m.To_MsgDetailedInfo()
        return t.Encode()
    case TLConstructor_CRC32_msg_new_detailed_info:
        t := m.To_MsgNewDetailedInfo()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *MsgDetailedInfo) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_msg_detailed_info:
        m2 := &TLMsgDetailedInfo{&MsgDetailedInfo_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_msg_new_detailed_info:
        m2 := &TLMsgNewDetailedInfo{&MsgDetailedInfo_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// msg_detailed_info#276d3ec6 msg_id:long answer_msg_id:long bytes:int status:int = MsgDetailedInfo;
func (m *MsgDetailedInfo) To_MsgDetailedInfo() *TLMsgDetailedInfo {
    return &TLMsgDetailedInfo{
        Data2: m.Data2,
    }
}

// msg_new_detailed_info#809db6df answer_msg_id:long bytes:int status:int = MsgDetailedInfo;
func (m *MsgDetailedInfo) To_MsgNewDetailedInfo() *TLMsgNewDetailedInfo {
    return &TLMsgNewDetailedInfo{
        Data2: m.Data2,
    }
}



// msg_detailed_info#276d3ec6 msg_id:long answer_msg_id:long bytes:int status:int = MsgDetailedInfo;
func (m *TLMsgDetailedInfo) To_MsgDetailedInfo() *MsgDetailedInfo {
    return &MsgDetailedInfo{
        Constructor: TLConstructor_CRC32_msg_detailed_info,
        Data2: m.Data2,
    }
}


func (m *TLMsgDetailedInfo) SetMsgId(v int64) { m.Data2.MsgId = v }
func (m *TLMsgDetailedInfo) GetMsgId() int64 { return m.Data2.MsgId }

func (m *TLMsgDetailedInfo) SetAnswerMsgId(v int64) { m.Data2.AnswerMsgId = v }
func (m *TLMsgDetailedInfo) GetAnswerMsgId() int64 { return m.Data2.AnswerMsgId }

func (m *TLMsgDetailedInfo) SetBytes(v int32) { m.Data2.Bytes = v }
func (m *TLMsgDetailedInfo) GetBytes() int32 { return m.Data2.Bytes }

func (m *TLMsgDetailedInfo) SetStatus(v int32) { m.Data2.Status = v }
func (m *TLMsgDetailedInfo) GetStatus() int32 { return m.Data2.Status }


func NewTLMsgDetailedInfo() * TLMsgDetailedInfo {
    return &TLMsgDetailedInfo{ Data2: &MsgDetailedInfo_Data{} }
}

func (m* TLMsgDetailedInfo) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_msg_detailed_info))

    x.Long(m.GetMsgId())
    x.Long(m.GetAnswerMsgId())
    x.Int(m.GetBytes())
    x.Int(m.GetStatus())

    return x.buf
}

func (m* TLMsgDetailedInfo) Decode(dbuf *DecodeBuf) error {
    m.SetMsgId(dbuf.Long())
    m.SetAnswerMsgId(dbuf.Long())
    m.SetBytes(dbuf.Int())
    m.SetStatus(dbuf.Int())

    return dbuf.err
}
// msg_new_detailed_info#809db6df answer_msg_id:long bytes:int status:int = MsgDetailedInfo;
func (m *TLMsgNewDetailedInfo) To_MsgDetailedInfo() *MsgDetailedInfo {
    return &MsgDetailedInfo{
        Constructor: TLConstructor_CRC32_msg_new_detailed_info,
        Data2: m.Data2,
    }
}


func (m *TLMsgNewDetailedInfo) SetAnswerMsgId(v int64) { m.Data2.AnswerMsgId = v }
func (m *TLMsgNewDetailedInfo) GetAnswerMsgId() int64 { return m.Data2.AnswerMsgId }

func (m *TLMsgNewDetailedInfo) SetBytes(v int32) { m.Data2.Bytes = v }
func (m *TLMsgNewDetailedInfo) GetBytes() int32 { return m.Data2.Bytes }

func (m *TLMsgNewDetailedInfo) SetStatus(v int32) { m.Data2.Status = v }
func (m *TLMsgNewDetailedInfo) GetStatus() int32 { return m.Data2.Status }


func NewTLMsgNewDetailedInfo() * TLMsgNewDetailedInfo {
    return &TLMsgNewDetailedInfo{ Data2: &MsgDetailedInfo_Data{} }
}

func (m* TLMsgNewDetailedInfo) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_msg_new_detailed_info))

    x.Long(m.GetAnswerMsgId())
    x.Int(m.GetBytes())
    x.Int(m.GetStatus())

    return x.buf
}

func (m* TLMsgNewDetailedInfo) Decode(dbuf *DecodeBuf) error {
    m.SetAnswerMsgId(dbuf.Long())
    m.SetBytes(dbuf.Int())
    m.SetStatus(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputStickerSet <--
//  + TL_InputStickerSetEmpty
//  + TL_InputStickerSetID
//  + TL_InputStickerSetShortName
//  + TL_InputStickerSetAnimatedEmoji
//  + TL_InputStickerSetDice
//

func (m *InputStickerSet) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputStickerSetEmpty:
        t := m.To_InputStickerSetEmpty()
        return t.Encode()
    case TLConstructor_CRC32_inputStickerSetID:
        t := m.To_InputStickerSetID()
        return t.Encode()
    case TLConstructor_CRC32_inputStickerSetShortName:
        t := m.To_InputStickerSetShortName()
        return t.Encode()
    case TLConstructor_CRC32_inputStickerSetAnimatedEmoji:
        t := m.To_InputStickerSetAnimatedEmoji()
        return t.Encode()
    case TLConstructor_CRC32_inputStickerSetDice:
        t := m.To_InputStickerSetDice()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputStickerSet) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputStickerSetEmpty:
        m2 := &TLInputStickerSetEmpty{&InputStickerSet_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputStickerSetID:
        m2 := &TLInputStickerSetID{&InputStickerSet_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputStickerSetShortName:
        m2 := &TLInputStickerSetShortName{&InputStickerSet_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputStickerSetAnimatedEmoji:
        m2 := &TLInputStickerSetAnimatedEmoji{&InputStickerSet_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputStickerSetDice:
        m2 := &TLInputStickerSetDice{&InputStickerSet_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputStickerSetEmpty#ffb62b95 = InputStickerSet;
func (m *InputStickerSet) To_InputStickerSetEmpty() *TLInputStickerSetEmpty {
    return &TLInputStickerSetEmpty{
        Data2: m.Data2,
    }
}

// inputStickerSetID#9de7a269 id:long access_hash:long = InputStickerSet;
func (m *InputStickerSet) To_InputStickerSetID() *TLInputStickerSetID {
    return &TLInputStickerSetID{
        Data2: m.Data2,
    }
}

// inputStickerSetShortName#861cc8a0 short_name:string = InputStickerSet;
func (m *InputStickerSet) To_InputStickerSetShortName() *TLInputStickerSetShortName {
    return &TLInputStickerSetShortName{
        Data2: m.Data2,
    }
}

// inputStickerSetAnimatedEmoji#28703c8 = InputStickerSet;
func (m *InputStickerSet) To_InputStickerSetAnimatedEmoji() *TLInputStickerSetAnimatedEmoji {
    return &TLInputStickerSetAnimatedEmoji{
        Data2: m.Data2,
    }
}

// inputStickerSetDice#e67f520e emoticon:string = InputStickerSet;
func (m *InputStickerSet) To_InputStickerSetDice() *TLInputStickerSetDice {
    return &TLInputStickerSetDice{
        Data2: m.Data2,
    }
}



// inputStickerSetEmpty#ffb62b95 = InputStickerSet;
func (m *TLInputStickerSetEmpty) To_InputStickerSet() *InputStickerSet {
    return &InputStickerSet{
        Constructor: TLConstructor_CRC32_inputStickerSetEmpty,
        Data2: m.Data2,
    }
}



func NewTLInputStickerSetEmpty() * TLInputStickerSetEmpty {
    return &TLInputStickerSetEmpty{ Data2: &InputStickerSet_Data{} }
}

func (m* TLInputStickerSetEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputStickerSetEmpty))


    return x.buf
}

func (m* TLInputStickerSetEmpty) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputStickerSetID#9de7a269 id:long access_hash:long = InputStickerSet;
func (m *TLInputStickerSetID) To_InputStickerSet() *InputStickerSet {
    return &InputStickerSet{
        Constructor: TLConstructor_CRC32_inputStickerSetID,
        Data2: m.Data2,
    }
}


func (m *TLInputStickerSetID) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputStickerSetID) GetId() int64 { return m.Data2.Id }

func (m *TLInputStickerSetID) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputStickerSetID) GetAccessHash() int64 { return m.Data2.AccessHash }


func NewTLInputStickerSetID() * TLInputStickerSetID {
    return &TLInputStickerSetID{ Data2: &InputStickerSet_Data{} }
}

func (m* TLInputStickerSetID) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputStickerSetID))

    x.Long(m.GetId())
    x.Long(m.GetAccessHash())

    return x.buf
}

func (m* TLInputStickerSetID) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())

    return dbuf.err
}
// inputStickerSetShortName#861cc8a0 short_name:string = InputStickerSet;
func (m *TLInputStickerSetShortName) To_InputStickerSet() *InputStickerSet {
    return &InputStickerSet{
        Constructor: TLConstructor_CRC32_inputStickerSetShortName,
        Data2: m.Data2,
    }
}


func (m *TLInputStickerSetShortName) SetShortName(v string) { m.Data2.ShortName = v }
func (m *TLInputStickerSetShortName) GetShortName() string { return m.Data2.ShortName }


func NewTLInputStickerSetShortName() * TLInputStickerSetShortName {
    return &TLInputStickerSetShortName{ Data2: &InputStickerSet_Data{} }
}

func (m* TLInputStickerSetShortName) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputStickerSetShortName))

    x.String(m.GetShortName())

    return x.buf
}

func (m* TLInputStickerSetShortName) Decode(dbuf *DecodeBuf) error {
    m.SetShortName(dbuf.String())

    return dbuf.err
}
// inputStickerSetAnimatedEmoji#28703c8 = InputStickerSet;
func (m *TLInputStickerSetAnimatedEmoji) To_InputStickerSet() *InputStickerSet {
    return &InputStickerSet{
        Constructor: TLConstructor_CRC32_inputStickerSetAnimatedEmoji,
        Data2: m.Data2,
    }
}



func NewTLInputStickerSetAnimatedEmoji() * TLInputStickerSetAnimatedEmoji {
    return &TLInputStickerSetAnimatedEmoji{ Data2: &InputStickerSet_Data{} }
}

func (m* TLInputStickerSetAnimatedEmoji) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputStickerSetAnimatedEmoji))


    return x.buf
}

func (m* TLInputStickerSetAnimatedEmoji) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputStickerSetDice#e67f520e emoticon:string = InputStickerSet;
func (m *TLInputStickerSetDice) To_InputStickerSet() *InputStickerSet {
    return &InputStickerSet{
        Constructor: TLConstructor_CRC32_inputStickerSetDice,
        Data2: m.Data2,
    }
}


func (m *TLInputStickerSetDice) SetEmoticon(v string) { m.Data2.Emoticon = v }
func (m *TLInputStickerSetDice) GetEmoticon() string { return m.Data2.Emoticon }


func NewTLInputStickerSetDice() * TLInputStickerSetDice {
    return &TLInputStickerSetDice{ Data2: &InputStickerSet_Data{} }
}

func (m* TLInputStickerSetDice) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputStickerSetDice))

    x.String(m.GetEmoticon())

    return x.buf
}

func (m* TLInputStickerSetDice) Decode(dbuf *DecodeBuf) error {
    m.SetEmoticon(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// PostAddress <--
//  + TL_PostAddress
//

func (m *PostAddress) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_postAddress:
        t := m.To_PostAddress()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *PostAddress) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_postAddress:
        m2 := &TLPostAddress{&PostAddress_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// postAddress#1e8caaeb street_line1:string street_line2:string city:string state:string country_iso2:string post_code:string = PostAddress;
func (m *PostAddress) To_PostAddress() *TLPostAddress {
    return &TLPostAddress{
        Data2: m.Data2,
    }
}



// postAddress#1e8caaeb street_line1:string street_line2:string city:string state:string country_iso2:string post_code:string = PostAddress;
func (m *TLPostAddress) To_PostAddress() *PostAddress {
    return &PostAddress{
        Constructor: TLConstructor_CRC32_postAddress,
        Data2: m.Data2,
    }
}


func (m *TLPostAddress) SetStreetLine1(v string) { m.Data2.StreetLine1 = v }
func (m *TLPostAddress) GetStreetLine1() string { return m.Data2.StreetLine1 }

func (m *TLPostAddress) SetStreetLine2(v string) { m.Data2.StreetLine2 = v }
func (m *TLPostAddress) GetStreetLine2() string { return m.Data2.StreetLine2 }

func (m *TLPostAddress) SetCity(v string) { m.Data2.City = v }
func (m *TLPostAddress) GetCity() string { return m.Data2.City }

func (m *TLPostAddress) SetState(v string) { m.Data2.State = v }
func (m *TLPostAddress) GetState() string { return m.Data2.State }

func (m *TLPostAddress) SetCountryIso2(v string) { m.Data2.CountryIso2 = v }
func (m *TLPostAddress) GetCountryIso2() string { return m.Data2.CountryIso2 }

func (m *TLPostAddress) SetPostCode(v string) { m.Data2.PostCode = v }
func (m *TLPostAddress) GetPostCode() string { return m.Data2.PostCode }


func NewTLPostAddress() * TLPostAddress {
    return &TLPostAddress{ Data2: &PostAddress_Data{} }
}

func (m* TLPostAddress) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_postAddress))

    x.String(m.GetStreetLine1())
    x.String(m.GetStreetLine2())
    x.String(m.GetCity())
    x.String(m.GetState())
    x.String(m.GetCountryIso2())
    x.String(m.GetPostCode())

    return x.buf
}

func (m* TLPostAddress) Decode(dbuf *DecodeBuf) error {
    m.SetStreetLine1(dbuf.String())
    m.SetStreetLine2(dbuf.String())
    m.SetCity(dbuf.String())
    m.SetState(dbuf.String())
    m.SetCountryIso2(dbuf.String())
    m.SetPostCode(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// WebDocument <--
//  + TL_WebDocument
//  + TL_WebDocument114
//  + TL_WebDocumentNoProxy
//

func (m *WebDocument) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_webDocument:
        t := m.To_WebDocument()
        return t.Encode()
    case TLConstructor_CRC32_webDocument114:
        t := m.To_WebDocument114()
        return t.Encode()
    case TLConstructor_CRC32_webDocumentNoProxy:
        t := m.To_WebDocumentNoProxy()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *WebDocument) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_webDocument:
        m2 := &TLWebDocument{&WebDocument_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_webDocument114:
        m2 := &TLWebDocument114{&WebDocument_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_webDocumentNoProxy:
        m2 := &TLWebDocumentNoProxy{&WebDocument_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// webDocument#c61acbd8 url:string access_hash:long size:int mime_type:string attributes:Vector<DocumentAttribute> dc_id:int = WebDocument;
func (m *WebDocument) To_WebDocument() *TLWebDocument {
    return &TLWebDocument{
        Data2: m.Data2,
    }
}

// webDocument#1c570ed1 url:string access_hash:long size:int mime_type:string attributes:Vector<DocumentAttribute> = WebDocument;
func (m *WebDocument) To_WebDocument114() *TLWebDocument114 {
    return &TLWebDocument114{
        Data2: m.Data2,
    }
}

// webDocumentNoProxy#f9c8bcc6 url:string size:int mime_type:string attributes:Vector<DocumentAttribute> = WebDocument;
func (m *WebDocument) To_WebDocumentNoProxy() *TLWebDocumentNoProxy {
    return &TLWebDocumentNoProxy{
        Data2: m.Data2,
    }
}



// webDocument#c61acbd8 url:string access_hash:long size:int mime_type:string attributes:Vector<DocumentAttribute> dc_id:int = WebDocument;
func (m *TLWebDocument) To_WebDocument() *WebDocument {
    return &WebDocument{
        Constructor: TLConstructor_CRC32_webDocument,
        Data2: m.Data2,
    }
}


func (m *TLWebDocument) SetUrl(v string) { m.Data2.Url = v }
func (m *TLWebDocument) GetUrl() string { return m.Data2.Url }

func (m *TLWebDocument) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLWebDocument) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLWebDocument) SetSize(v int32) { m.Data2.Size_ = v }
func (m *TLWebDocument) GetSize() int32 { return m.Data2.Size_ }

func (m *TLWebDocument) SetMimeType(v string) { m.Data2.MimeType = v }
func (m *TLWebDocument) GetMimeType() string { return m.Data2.MimeType }

func (m *TLWebDocument) SetAttributes(v []*DocumentAttribute) { m.Data2.Attributes = v }
func (m *TLWebDocument) GetAttributes() []*DocumentAttribute { return m.Data2.Attributes }

func (m *TLWebDocument) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLWebDocument) GetDcId() int32 { return m.Data2.DcId }


func NewTLWebDocument() * TLWebDocument {
    return &TLWebDocument{ Data2: &WebDocument_Data{} }
}

func (m* TLWebDocument) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_webDocument))

    x.String(m.GetUrl())
    x.Long(m.GetAccessHash())
    x.Int(m.GetSize())
    x.String(m.GetMimeType())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetAttributes())))
for _, v := range m.GetAttributes() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(m.GetDcId())

    return x.buf
}

func (m* TLWebDocument) Decode(dbuf *DecodeBuf) error {
    m.SetUrl(dbuf.String())
    m.SetAccessHash(dbuf.Long())
    m.SetSize(dbuf.Int())
    m.SetMimeType(dbuf.String())
    c5 := dbuf.Int()
if c5 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 5, c5)
	return dbuf.err
}
l5 := dbuf.Int()
v5 := make([]*DocumentAttribute, l5)
for i := int32(0); i < l5; i++ {
	v5[i] = &DocumentAttribute{}
	v5[i].Decode(dbuf)
}
m.SetAttributes(v5)

    m.SetDcId(dbuf.Int())

    return dbuf.err
}
// webDocument#1c570ed1 url:string access_hash:long size:int mime_type:string attributes:Vector<DocumentAttribute> = WebDocument;
func (m *TLWebDocument114) To_WebDocument() *WebDocument {
    return &WebDocument{
        Constructor: TLConstructor_CRC32_webDocument114,
        Data2: m.Data2,
    }
}


func (m *TLWebDocument114) SetUrl(v string) { m.Data2.Url = v }
func (m *TLWebDocument114) GetUrl() string { return m.Data2.Url }

func (m *TLWebDocument114) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLWebDocument114) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLWebDocument114) SetSize(v int32) { m.Data2.Size_ = v }
func (m *TLWebDocument114) GetSize() int32 { return m.Data2.Size_ }

func (m *TLWebDocument114) SetMimeType(v string) { m.Data2.MimeType = v }
func (m *TLWebDocument114) GetMimeType() string { return m.Data2.MimeType }

func (m *TLWebDocument114) SetAttributes(v []*DocumentAttribute) { m.Data2.Attributes = v }
func (m *TLWebDocument114) GetAttributes() []*DocumentAttribute { return m.Data2.Attributes }


func NewTLWebDocument114() * TLWebDocument114 {
    return &TLWebDocument114{ Data2: &WebDocument_Data{} }
}

func (m* TLWebDocument114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_webDocument114))

    x.String(m.GetUrl())
    x.Long(m.GetAccessHash())
    x.Int(m.GetSize())
    x.String(m.GetMimeType())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetAttributes())))
for _, v := range m.GetAttributes() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLWebDocument114) Decode(dbuf *DecodeBuf) error {
    m.SetUrl(dbuf.String())
    m.SetAccessHash(dbuf.Long())
    m.SetSize(dbuf.Int())
    m.SetMimeType(dbuf.String())
    c5 := dbuf.Int()
if c5 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 5, c5)
	return dbuf.err
}
l5 := dbuf.Int()
v5 := make([]*DocumentAttribute, l5)
for i := int32(0); i < l5; i++ {
	v5[i] = &DocumentAttribute{}
	v5[i].Decode(dbuf)
}
m.SetAttributes(v5)


    return dbuf.err
}
// webDocumentNoProxy#f9c8bcc6 url:string size:int mime_type:string attributes:Vector<DocumentAttribute> = WebDocument;
func (m *TLWebDocumentNoProxy) To_WebDocument() *WebDocument {
    return &WebDocument{
        Constructor: TLConstructor_CRC32_webDocumentNoProxy,
        Data2: m.Data2,
    }
}


func (m *TLWebDocumentNoProxy) SetUrl(v string) { m.Data2.Url = v }
func (m *TLWebDocumentNoProxy) GetUrl() string { return m.Data2.Url }

func (m *TLWebDocumentNoProxy) SetSize(v int32) { m.Data2.Size_ = v }
func (m *TLWebDocumentNoProxy) GetSize() int32 { return m.Data2.Size_ }

func (m *TLWebDocumentNoProxy) SetMimeType(v string) { m.Data2.MimeType = v }
func (m *TLWebDocumentNoProxy) GetMimeType() string { return m.Data2.MimeType }

func (m *TLWebDocumentNoProxy) SetAttributes(v []*DocumentAttribute) { m.Data2.Attributes = v }
func (m *TLWebDocumentNoProxy) GetAttributes() []*DocumentAttribute { return m.Data2.Attributes }


func NewTLWebDocumentNoProxy() * TLWebDocumentNoProxy {
    return &TLWebDocumentNoProxy{ Data2: &WebDocument_Data{} }
}

func (m* TLWebDocumentNoProxy) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_webDocumentNoProxy))

    x.String(m.GetUrl())
    x.Int(m.GetSize())
    x.String(m.GetMimeType())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetAttributes())))
for _, v := range m.GetAttributes() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLWebDocumentNoProxy) Decode(dbuf *DecodeBuf) error {
    m.SetUrl(dbuf.String())
    m.SetSize(dbuf.Int())
    m.SetMimeType(dbuf.String())
    c4 := dbuf.Int()
if c4 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
	return dbuf.err
}
l4 := dbuf.Int()
v4 := make([]*DocumentAttribute, l4)
for i := int32(0); i < l4; i++ {
	v4[i] = &DocumentAttribute{}
	v4[i].Decode(dbuf)
}
m.SetAttributes(v4)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Photos_Photos <--
//  + TL_PhotosPhotos
//  + TL_PhotosPhotosSlice
//

func (m *Photos_Photos) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_photos_photos:
        t := m.To_PhotosPhotos()
        return t.Encode()
    case TLConstructor_CRC32_photos_photosSlice:
        t := m.To_PhotosPhotosSlice()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Photos_Photos) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_photos_photos:
        m2 := &TLPhotosPhotos{&Photos_Photos_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_photos_photosSlice:
        m2 := &TLPhotosPhotosSlice{&Photos_Photos_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// photos.photos#8dca6aa5 photos:Vector<Photo> users:Vector<User> = photos.Photos;
func (m *Photos_Photos) To_PhotosPhotos() *TLPhotosPhotos {
    return &TLPhotosPhotos{
        Data2: m.Data2,
    }
}

// photos.photosSlice#15051f54 count:int photos:Vector<Photo> users:Vector<User> = photos.Photos;
func (m *Photos_Photos) To_PhotosPhotosSlice() *TLPhotosPhotosSlice {
    return &TLPhotosPhotosSlice{
        Data2: m.Data2,
    }
}



// photos.photos#8dca6aa5 photos:Vector<Photo> users:Vector<User> = photos.Photos;
func (m *TLPhotosPhotos) To_Photos_Photos() *Photos_Photos {
    return &Photos_Photos{
        Constructor: TLConstructor_CRC32_photos_photos,
        Data2: m.Data2,
    }
}


func (m *TLPhotosPhotos) SetPhotos(v []*Photo) { m.Data2.Photos = v }
func (m *TLPhotosPhotos) GetPhotos() []*Photo { return m.Data2.Photos }

func (m *TLPhotosPhotos) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLPhotosPhotos) GetUsers() []*User { return m.Data2.Users }


func NewTLPhotosPhotos() * TLPhotosPhotos {
    return &TLPhotosPhotos{ Data2: &Photos_Photos_Data{} }
}

func (m* TLPhotosPhotos) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_photos_photos))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetPhotos())))
for _, v := range m.GetPhotos() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLPhotosPhotos) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*Photo, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &Photo{}
	v1[i].Decode(dbuf)
}
m.SetPhotos(v1)

    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*User, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &User{}
	v2[i].Decode(dbuf)
}
m.SetUsers(v2)


    return dbuf.err
}
// photos.photosSlice#15051f54 count:int photos:Vector<Photo> users:Vector<User> = photos.Photos;
func (m *TLPhotosPhotosSlice) To_Photos_Photos() *Photos_Photos {
    return &Photos_Photos{
        Constructor: TLConstructor_CRC32_photos_photosSlice,
        Data2: m.Data2,
    }
}


func (m *TLPhotosPhotosSlice) SetCount(v int32) { m.Data2.Count = v }
func (m *TLPhotosPhotosSlice) GetCount() int32 { return m.Data2.Count }

func (m *TLPhotosPhotosSlice) SetPhotos(v []*Photo) { m.Data2.Photos = v }
func (m *TLPhotosPhotosSlice) GetPhotos() []*Photo { return m.Data2.Photos }

func (m *TLPhotosPhotosSlice) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLPhotosPhotosSlice) GetUsers() []*User { return m.Data2.Users }


func NewTLPhotosPhotosSlice() * TLPhotosPhotosSlice {
    return &TLPhotosPhotosSlice{ Data2: &Photos_Photos_Data{} }
}

func (m* TLPhotosPhotosSlice) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_photos_photosSlice))

    x.Int(m.GetCount())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetPhotos())))
for _, v := range m.GetPhotos() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLPhotosPhotosSlice) Decode(dbuf *DecodeBuf) error {
    m.SetCount(dbuf.Int())
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*Photo, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &Photo{}
	v2[i].Decode(dbuf)
}
m.SetPhotos(v2)

    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*User, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &User{}
	v3[i].Decode(dbuf)
}
m.SetUsers(v3)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Messages_StickerSetInstallResult <--
//  + TL_MessagesStickerSetInstallResultSuccess
//  + TL_MessagesStickerSetInstallResultArchive
//

func (m *Messages_StickerSetInstallResult) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messages_stickerSetInstallResultSuccess:
        t := m.To_MessagesStickerSetInstallResultSuccess()
        return t.Encode()
    case TLConstructor_CRC32_messages_stickerSetInstallResultArchive:
        t := m.To_MessagesStickerSetInstallResultArchive()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Messages_StickerSetInstallResult) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messages_stickerSetInstallResultSuccess:
        m2 := &TLMessagesStickerSetInstallResultSuccess{&Messages_StickerSetInstallResult_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messages_stickerSetInstallResultArchive:
        m2 := &TLMessagesStickerSetInstallResultArchive{&Messages_StickerSetInstallResult_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messages.stickerSetInstallResultSuccess#38641628 = messages.StickerSetInstallResult;
func (m *Messages_StickerSetInstallResult) To_MessagesStickerSetInstallResultSuccess() *TLMessagesStickerSetInstallResultSuccess {
    return &TLMessagesStickerSetInstallResultSuccess{
        Data2: m.Data2,
    }
}

// messages.stickerSetInstallResultArchive#35e410a8 sets:Vector<StickerSetCovered> = messages.StickerSetInstallResult;
func (m *Messages_StickerSetInstallResult) To_MessagesStickerSetInstallResultArchive() *TLMessagesStickerSetInstallResultArchive {
    return &TLMessagesStickerSetInstallResultArchive{
        Data2: m.Data2,
    }
}



// messages.stickerSetInstallResultSuccess#38641628 = messages.StickerSetInstallResult;
func (m *TLMessagesStickerSetInstallResultSuccess) To_Messages_StickerSetInstallResult() *Messages_StickerSetInstallResult {
    return &Messages_StickerSetInstallResult{
        Constructor: TLConstructor_CRC32_messages_stickerSetInstallResultSuccess,
        Data2: m.Data2,
    }
}



func NewTLMessagesStickerSetInstallResultSuccess() * TLMessagesStickerSetInstallResultSuccess {
    return &TLMessagesStickerSetInstallResultSuccess{ Data2: &Messages_StickerSetInstallResult_Data{} }
}

func (m* TLMessagesStickerSetInstallResultSuccess) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_stickerSetInstallResultSuccess))


    return x.buf
}

func (m* TLMessagesStickerSetInstallResultSuccess) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// messages.stickerSetInstallResultArchive#35e410a8 sets:Vector<StickerSetCovered> = messages.StickerSetInstallResult;
func (m *TLMessagesStickerSetInstallResultArchive) To_Messages_StickerSetInstallResult() *Messages_StickerSetInstallResult {
    return &Messages_StickerSetInstallResult{
        Constructor: TLConstructor_CRC32_messages_stickerSetInstallResultArchive,
        Data2: m.Data2,
    }
}


func (m *TLMessagesStickerSetInstallResultArchive) SetSets(v []*StickerSetCovered) { m.Data2.Sets = v }
func (m *TLMessagesStickerSetInstallResultArchive) GetSets() []*StickerSetCovered { return m.Data2.Sets }


func NewTLMessagesStickerSetInstallResultArchive() * TLMessagesStickerSetInstallResultArchive {
    return &TLMessagesStickerSetInstallResultArchive{ Data2: &Messages_StickerSetInstallResult_Data{} }
}

func (m* TLMessagesStickerSetInstallResultArchive) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_stickerSetInstallResultArchive))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetSets())))
for _, v := range m.GetSets() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLMessagesStickerSetInstallResultArchive) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*StickerSetCovered, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &StickerSetCovered{}
	v1[i].Decode(dbuf)
}
m.SetSets(v1)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// CdnFileHash <--
//  + TL_CdnFileHash
//

func (m *CdnFileHash) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_cdnFileHash:
        t := m.To_CdnFileHash()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *CdnFileHash) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_cdnFileHash:
        m2 := &TLCdnFileHash{&CdnFileHash_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// cdnFileHash#77eec38f offset:int limit:int hash:bytes = CdnFileHash;
func (m *CdnFileHash) To_CdnFileHash() *TLCdnFileHash {
    return &TLCdnFileHash{
        Data2: m.Data2,
    }
}



// cdnFileHash#77eec38f offset:int limit:int hash:bytes = CdnFileHash;
func (m *TLCdnFileHash) To_CdnFileHash() *CdnFileHash {
    return &CdnFileHash{
        Constructor: TLConstructor_CRC32_cdnFileHash,
        Data2: m.Data2,
    }
}


func (m *TLCdnFileHash) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLCdnFileHash) GetOffset() int32 { return m.Data2.Offset }

func (m *TLCdnFileHash) SetLimit(v int32) { m.Data2.Limit = v }
func (m *TLCdnFileHash) GetLimit() int32 { return m.Data2.Limit }

func (m *TLCdnFileHash) SetHash(v []byte) { m.Data2.Hash = v }
func (m *TLCdnFileHash) GetHash() []byte { return m.Data2.Hash }


func NewTLCdnFileHash() * TLCdnFileHash {
    return &TLCdnFileHash{ Data2: &CdnFileHash_Data{} }
}

func (m* TLCdnFileHash) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_cdnFileHash))

    x.Int(m.GetOffset())
    x.Int(m.GetLimit())
    x.StringBytes(m.GetHash())

    return x.buf
}

func (m* TLCdnFileHash) Decode(dbuf *DecodeBuf) error {
    m.SetOffset(dbuf.Int())
    m.SetLimit(dbuf.Int())
    m.SetHash(dbuf.StringBytes())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// PageTableRow <--
//  + TL_PageTableRow
//

func (m *PageTableRow) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_pageTableRow:
        t := m.To_PageTableRow()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *PageTableRow) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_pageTableRow:
        m2 := &TLPageTableRow{&PageTableRow_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// pageTableRow#e0c0c5e5 cells:Vector<PageTableCell> = PageTableRow;
func (m *PageTableRow) To_PageTableRow() *TLPageTableRow {
    return &TLPageTableRow{
        Data2: m.Data2,
    }
}



// pageTableRow#e0c0c5e5 cells:Vector<PageTableCell> = PageTableRow;
func (m *TLPageTableRow) To_PageTableRow() *PageTableRow {
    return &PageTableRow{
        Constructor: TLConstructor_CRC32_pageTableRow,
        Data2: m.Data2,
    }
}


func (m *TLPageTableRow) SetCells(v []*PageTableCell) { m.Data2.Cells = v }
func (m *TLPageTableRow) GetCells() []*PageTableCell { return m.Data2.Cells }


func NewTLPageTableRow() * TLPageTableRow {
    return &TLPageTableRow{ Data2: &PageTableRow_Data{} }
}

func (m* TLPageTableRow) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageTableRow))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetCells())))
for _, v := range m.GetCells() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLPageTableRow) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*PageTableCell, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &PageTableCell{}
	v1[i].Decode(dbuf)
}
m.SetCells(v1)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// PageCaption <--
//  + TL_PageCaption
//

func (m *PageCaption) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_pageCaption:
        t := m.To_PageCaption()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *PageCaption) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_pageCaption:
        m2 := &TLPageCaption{&PageCaption_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// pageCaption#6f747657 text:RichText credit:RichText = PageCaption;
func (m *PageCaption) To_PageCaption() *TLPageCaption {
    return &TLPageCaption{
        Data2: m.Data2,
    }
}



// pageCaption#6f747657 text:RichText credit:RichText = PageCaption;
func (m *TLPageCaption) To_PageCaption() *PageCaption {
    return &PageCaption{
        Constructor: TLConstructor_CRC32_pageCaption,
        Data2: m.Data2,
    }
}


func (m *TLPageCaption) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageCaption) GetText() *RichText { return m.Data2.Text }

func (m *TLPageCaption) SetCredit(v *RichText) { m.Data2.Credit = v }
func (m *TLPageCaption) GetCredit() *RichText { return m.Data2.Credit }


func NewTLPageCaption() * TLPageCaption {
    return &TLPageCaption{ Data2: &PageCaption_Data{} }
}

func (m* TLPageCaption) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageCaption))

    x.Bytes(m.GetText().Encode())
    x.Bytes(m.GetCredit().Encode())

    return x.buf
}

func (m* TLPageCaption) Decode(dbuf *DecodeBuf) error {
    m1 := &RichText{}
    m1.Decode(dbuf)
    m.SetText(m1)
    m2 := &RichText{}
    m2.Decode(dbuf)
    m.SetCredit(m2)

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// EmojiURL <--
//  + TL_EmojiURL
//

func (m *EmojiURL) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_emojiURL:
        t := m.To_EmojiURL()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *EmojiURL) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_emojiURL:
        m2 := &TLEmojiURL{&EmojiURL_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// emojiURL#a575739d url:string = EmojiURL;
func (m *EmojiURL) To_EmojiURL() *TLEmojiURL {
    return &TLEmojiURL{
        Data2: m.Data2,
    }
}



// emojiURL#a575739d url:string = EmojiURL;
func (m *TLEmojiURL) To_EmojiURL() *EmojiURL {
    return &EmojiURL{
        Constructor: TLConstructor_CRC32_emojiURL,
        Data2: m.Data2,
    }
}


func (m *TLEmojiURL) SetUrl(v string) { m.Data2.Url = v }
func (m *TLEmojiURL) GetUrl() string { return m.Data2.Url }


func NewTLEmojiURL() * TLEmojiURL {
    return &TLEmojiURL{ Data2: &EmojiURL_Data{} }
}

func (m* TLEmojiURL) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_emojiURL))

    x.String(m.GetUrl())

    return x.buf
}

func (m* TLEmojiURL) Decode(dbuf *DecodeBuf) error {
    m.SetUrl(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputGeoPoint <--
//  + TL_InputGeoPointEmpty
//  + TL_InputGeoPoint
//

func (m *InputGeoPoint) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputGeoPointEmpty:
        t := m.To_InputGeoPointEmpty()
        return t.Encode()
    case TLConstructor_CRC32_inputGeoPoint:
        t := m.To_InputGeoPoint()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputGeoPoint) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputGeoPointEmpty:
        m2 := &TLInputGeoPointEmpty{&InputGeoPoint_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputGeoPoint:
        m2 := &TLInputGeoPoint{&InputGeoPoint_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputGeoPointEmpty#e4c123d6 = InputGeoPoint;
func (m *InputGeoPoint) To_InputGeoPointEmpty() *TLInputGeoPointEmpty {
    return &TLInputGeoPointEmpty{
        Data2: m.Data2,
    }
}

// inputGeoPoint#f3b7acc9 lat:double long:double = InputGeoPoint;
func (m *InputGeoPoint) To_InputGeoPoint() *TLInputGeoPoint {
    return &TLInputGeoPoint{
        Data2: m.Data2,
    }
}



// inputGeoPointEmpty#e4c123d6 = InputGeoPoint;
func (m *TLInputGeoPointEmpty) To_InputGeoPoint() *InputGeoPoint {
    return &InputGeoPoint{
        Constructor: TLConstructor_CRC32_inputGeoPointEmpty,
        Data2: m.Data2,
    }
}



func NewTLInputGeoPointEmpty() * TLInputGeoPointEmpty {
    return &TLInputGeoPointEmpty{ Data2: &InputGeoPoint_Data{} }
}

func (m* TLInputGeoPointEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputGeoPointEmpty))


    return x.buf
}

func (m* TLInputGeoPointEmpty) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputGeoPoint#f3b7acc9 lat:double long:double = InputGeoPoint;
func (m *TLInputGeoPoint) To_InputGeoPoint() *InputGeoPoint {
    return &InputGeoPoint{
        Constructor: TLConstructor_CRC32_inputGeoPoint,
        Data2: m.Data2,
    }
}


func (m *TLInputGeoPoint) SetLat(v float64) { m.Data2.Lat = v }
func (m *TLInputGeoPoint) GetLat() float64 { return m.Data2.Lat }

func (m *TLInputGeoPoint) SetLong(v float64) { m.Data2.Long = v }
func (m *TLInputGeoPoint) GetLong() float64 { return m.Data2.Long }


func NewTLInputGeoPoint() * TLInputGeoPoint {
    return &TLInputGeoPoint{ Data2: &InputGeoPoint_Data{} }
}

func (m* TLInputGeoPoint) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputGeoPoint))

    x.Double(m.GetLat())
    x.Double(m.GetLong())

    return x.buf
}

func (m* TLInputGeoPoint) Decode(dbuf *DecodeBuf) error {
    m.SetLat(dbuf.Double())
    m.SetLong(dbuf.Double())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// NotifyPeer <--
//  + TL_NotifyPeer
//  + TL_NotifyUsers
//  + TL_NotifyChats
//  + TL_NotifyAll
//  + TL_NotifyBroadcasts
//

func (m *NotifyPeer) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_notifyPeer:
        t := m.To_NotifyPeer()
        return t.Encode()
    case TLConstructor_CRC32_notifyUsers:
        t := m.To_NotifyUsers()
        return t.Encode()
    case TLConstructor_CRC32_notifyChats:
        t := m.To_NotifyChats()
        return t.Encode()
    case TLConstructor_CRC32_notifyAll:
        t := m.To_NotifyAll()
        return t.Encode()
    case TLConstructor_CRC32_notifyBroadcasts:
        t := m.To_NotifyBroadcasts()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *NotifyPeer) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_notifyPeer:
        m2 := &TLNotifyPeer{&NotifyPeer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_notifyUsers:
        m2 := &TLNotifyUsers{&NotifyPeer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_notifyChats:
        m2 := &TLNotifyChats{&NotifyPeer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_notifyAll:
        m2 := &TLNotifyAll{&NotifyPeer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_notifyBroadcasts:
        m2 := &TLNotifyBroadcasts{&NotifyPeer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// notifyPeer#9fd40bd8 peer:Peer = NotifyPeer;
func (m *NotifyPeer) To_NotifyPeer() *TLNotifyPeer {
    return &TLNotifyPeer{
        Data2: m.Data2,
    }
}

// notifyUsers#b4c83b4c = NotifyPeer;
func (m *NotifyPeer) To_NotifyUsers() *TLNotifyUsers {
    return &TLNotifyUsers{
        Data2: m.Data2,
    }
}

// notifyChats#c007cec3 = NotifyPeer;
func (m *NotifyPeer) To_NotifyChats() *TLNotifyChats {
    return &TLNotifyChats{
        Data2: m.Data2,
    }
}

// notifyAll#74d07c60 = NotifyPeer;
func (m *NotifyPeer) To_NotifyAll() *TLNotifyAll {
    return &TLNotifyAll{
        Data2: m.Data2,
    }
}

// notifyBroadcasts#d612e8ef = NotifyPeer;
func (m *NotifyPeer) To_NotifyBroadcasts() *TLNotifyBroadcasts {
    return &TLNotifyBroadcasts{
        Data2: m.Data2,
    }
}



// notifyPeer#9fd40bd8 peer:Peer = NotifyPeer;
func (m *TLNotifyPeer) To_NotifyPeer() *NotifyPeer {
    return &NotifyPeer{
        Constructor: TLConstructor_CRC32_notifyPeer,
        Data2: m.Data2,
    }
}


func (m *TLNotifyPeer) SetPeer(v *Peer) { m.Data2.Peer = v }
func (m *TLNotifyPeer) GetPeer() *Peer { return m.Data2.Peer }


func NewTLNotifyPeer() * TLNotifyPeer {
    return &TLNotifyPeer{ Data2: &NotifyPeer_Data{} }
}

func (m* TLNotifyPeer) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_notifyPeer))

    x.Bytes(m.GetPeer().Encode())

    return x.buf
}

func (m* TLNotifyPeer) Decode(dbuf *DecodeBuf) error {
    m1 := &Peer{}
    m1.Decode(dbuf)
    m.SetPeer(m1)

    return dbuf.err
}
// notifyUsers#b4c83b4c = NotifyPeer;
func (m *TLNotifyUsers) To_NotifyPeer() *NotifyPeer {
    return &NotifyPeer{
        Constructor: TLConstructor_CRC32_notifyUsers,
        Data2: m.Data2,
    }
}



func NewTLNotifyUsers() * TLNotifyUsers {
    return &TLNotifyUsers{ Data2: &NotifyPeer_Data{} }
}

func (m* TLNotifyUsers) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_notifyUsers))


    return x.buf
}

func (m* TLNotifyUsers) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// notifyChats#c007cec3 = NotifyPeer;
func (m *TLNotifyChats) To_NotifyPeer() *NotifyPeer {
    return &NotifyPeer{
        Constructor: TLConstructor_CRC32_notifyChats,
        Data2: m.Data2,
    }
}



func NewTLNotifyChats() * TLNotifyChats {
    return &TLNotifyChats{ Data2: &NotifyPeer_Data{} }
}

func (m* TLNotifyChats) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_notifyChats))


    return x.buf
}

func (m* TLNotifyChats) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// notifyAll#74d07c60 = NotifyPeer;
func (m *TLNotifyAll) To_NotifyPeer() *NotifyPeer {
    return &NotifyPeer{
        Constructor: TLConstructor_CRC32_notifyAll,
        Data2: m.Data2,
    }
}



func NewTLNotifyAll() * TLNotifyAll {
    return &TLNotifyAll{ Data2: &NotifyPeer_Data{} }
}

func (m* TLNotifyAll) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_notifyAll))


    return x.buf
}

func (m* TLNotifyAll) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// notifyBroadcasts#d612e8ef = NotifyPeer;
func (m *TLNotifyBroadcasts) To_NotifyPeer() *NotifyPeer {
    return &NotifyPeer{
        Constructor: TLConstructor_CRC32_notifyBroadcasts,
        Data2: m.Data2,
    }
}



func NewTLNotifyBroadcasts() * TLNotifyBroadcasts {
    return &TLNotifyBroadcasts{ Data2: &NotifyPeer_Data{} }
}

func (m* TLNotifyBroadcasts) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_notifyBroadcasts))


    return x.buf
}

func (m* TLNotifyBroadcasts) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// SendMessageAction <--
//  + TL_SendMessageTypingAction
//  + TL_SendMessageCancelAction
//  + TL_SendMessageRecordVideoAction
//  + TL_SendMessageUploadVideoAction
//  + TL_SendMessageRecordAudioAction
//  + TL_SendMessageUploadAudioAction
//  + TL_SendMessageUploadPhotoAction
//  + TL_SendMessageUploadDocumentAction
//  + TL_SendMessageGeoLocationAction
//  + TL_SendMessageChooseContactAction
//  + TL_SendMessageGamePlayAction
//  + TL_SendMessageRecordRoundAction
//  + TL_SendMessageUploadRoundAction
//

func (m *SendMessageAction) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_sendMessageTypingAction:
        t := m.To_SendMessageTypingAction()
        return t.Encode()
    case TLConstructor_CRC32_sendMessageCancelAction:
        t := m.To_SendMessageCancelAction()
        return t.Encode()
    case TLConstructor_CRC32_sendMessageRecordVideoAction:
        t := m.To_SendMessageRecordVideoAction()
        return t.Encode()
    case TLConstructor_CRC32_sendMessageUploadVideoAction:
        t := m.To_SendMessageUploadVideoAction()
        return t.Encode()
    case TLConstructor_CRC32_sendMessageRecordAudioAction:
        t := m.To_SendMessageRecordAudioAction()
        return t.Encode()
    case TLConstructor_CRC32_sendMessageUploadAudioAction:
        t := m.To_SendMessageUploadAudioAction()
        return t.Encode()
    case TLConstructor_CRC32_sendMessageUploadPhotoAction:
        t := m.To_SendMessageUploadPhotoAction()
        return t.Encode()
    case TLConstructor_CRC32_sendMessageUploadDocumentAction:
        t := m.To_SendMessageUploadDocumentAction()
        return t.Encode()
    case TLConstructor_CRC32_sendMessageGeoLocationAction:
        t := m.To_SendMessageGeoLocationAction()
        return t.Encode()
    case TLConstructor_CRC32_sendMessageChooseContactAction:
        t := m.To_SendMessageChooseContactAction()
        return t.Encode()
    case TLConstructor_CRC32_sendMessageGamePlayAction:
        t := m.To_SendMessageGamePlayAction()
        return t.Encode()
    case TLConstructor_CRC32_sendMessageRecordRoundAction:
        t := m.To_SendMessageRecordRoundAction()
        return t.Encode()
    case TLConstructor_CRC32_sendMessageUploadRoundAction:
        t := m.To_SendMessageUploadRoundAction()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *SendMessageAction) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_sendMessageTypingAction:
        m2 := &TLSendMessageTypingAction{&SendMessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_sendMessageCancelAction:
        m2 := &TLSendMessageCancelAction{&SendMessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_sendMessageRecordVideoAction:
        m2 := &TLSendMessageRecordVideoAction{&SendMessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_sendMessageUploadVideoAction:
        m2 := &TLSendMessageUploadVideoAction{&SendMessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_sendMessageRecordAudioAction:
        m2 := &TLSendMessageRecordAudioAction{&SendMessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_sendMessageUploadAudioAction:
        m2 := &TLSendMessageUploadAudioAction{&SendMessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_sendMessageUploadPhotoAction:
        m2 := &TLSendMessageUploadPhotoAction{&SendMessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_sendMessageUploadDocumentAction:
        m2 := &TLSendMessageUploadDocumentAction{&SendMessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_sendMessageGeoLocationAction:
        m2 := &TLSendMessageGeoLocationAction{&SendMessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_sendMessageChooseContactAction:
        m2 := &TLSendMessageChooseContactAction{&SendMessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_sendMessageGamePlayAction:
        m2 := &TLSendMessageGamePlayAction{&SendMessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_sendMessageRecordRoundAction:
        m2 := &TLSendMessageRecordRoundAction{&SendMessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_sendMessageUploadRoundAction:
        m2 := &TLSendMessageUploadRoundAction{&SendMessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// sendMessageTypingAction#16bf744e = SendMessageAction;
func (m *SendMessageAction) To_SendMessageTypingAction() *TLSendMessageTypingAction {
    return &TLSendMessageTypingAction{
        Data2: m.Data2,
    }
}

// sendMessageCancelAction#fd5ec8f5 = SendMessageAction;
func (m *SendMessageAction) To_SendMessageCancelAction() *TLSendMessageCancelAction {
    return &TLSendMessageCancelAction{
        Data2: m.Data2,
    }
}

// sendMessageRecordVideoAction#a187d66f = SendMessageAction;
func (m *SendMessageAction) To_SendMessageRecordVideoAction() *TLSendMessageRecordVideoAction {
    return &TLSendMessageRecordVideoAction{
        Data2: m.Data2,
    }
}

// sendMessageUploadVideoAction#e9763aec progress:int = SendMessageAction;
func (m *SendMessageAction) To_SendMessageUploadVideoAction() *TLSendMessageUploadVideoAction {
    return &TLSendMessageUploadVideoAction{
        Data2: m.Data2,
    }
}

// sendMessageRecordAudioAction#d52f73f7 = SendMessageAction;
func (m *SendMessageAction) To_SendMessageRecordAudioAction() *TLSendMessageRecordAudioAction {
    return &TLSendMessageRecordAudioAction{
        Data2: m.Data2,
    }
}

// sendMessageUploadAudioAction#f351d7ab progress:int = SendMessageAction;
func (m *SendMessageAction) To_SendMessageUploadAudioAction() *TLSendMessageUploadAudioAction {
    return &TLSendMessageUploadAudioAction{
        Data2: m.Data2,
    }
}

// sendMessageUploadPhotoAction#d1d34a26 progress:int = SendMessageAction;
func (m *SendMessageAction) To_SendMessageUploadPhotoAction() *TLSendMessageUploadPhotoAction {
    return &TLSendMessageUploadPhotoAction{
        Data2: m.Data2,
    }
}

// sendMessageUploadDocumentAction#aa0cd9e4 progress:int = SendMessageAction;
func (m *SendMessageAction) To_SendMessageUploadDocumentAction() *TLSendMessageUploadDocumentAction {
    return &TLSendMessageUploadDocumentAction{
        Data2: m.Data2,
    }
}

// sendMessageGeoLocationAction#176f8ba1 = SendMessageAction;
func (m *SendMessageAction) To_SendMessageGeoLocationAction() *TLSendMessageGeoLocationAction {
    return &TLSendMessageGeoLocationAction{
        Data2: m.Data2,
    }
}

// sendMessageChooseContactAction#628cbc6f = SendMessageAction;
func (m *SendMessageAction) To_SendMessageChooseContactAction() *TLSendMessageChooseContactAction {
    return &TLSendMessageChooseContactAction{
        Data2: m.Data2,
    }
}

// sendMessageGamePlayAction#dd6a8f48 = SendMessageAction;
func (m *SendMessageAction) To_SendMessageGamePlayAction() *TLSendMessageGamePlayAction {
    return &TLSendMessageGamePlayAction{
        Data2: m.Data2,
    }
}

// sendMessageRecordRoundAction#88f27fbc = SendMessageAction;
func (m *SendMessageAction) To_SendMessageRecordRoundAction() *TLSendMessageRecordRoundAction {
    return &TLSendMessageRecordRoundAction{
        Data2: m.Data2,
    }
}

// sendMessageUploadRoundAction#243e1c66 progress:int = SendMessageAction;
func (m *SendMessageAction) To_SendMessageUploadRoundAction() *TLSendMessageUploadRoundAction {
    return &TLSendMessageUploadRoundAction{
        Data2: m.Data2,
    }
}



// sendMessageTypingAction#16bf744e = SendMessageAction;
func (m *TLSendMessageTypingAction) To_SendMessageAction() *SendMessageAction {
    return &SendMessageAction{
        Constructor: TLConstructor_CRC32_sendMessageTypingAction,
        Data2: m.Data2,
    }
}



func NewTLSendMessageTypingAction() * TLSendMessageTypingAction {
    return &TLSendMessageTypingAction{ Data2: &SendMessageAction_Data{} }
}

func (m* TLSendMessageTypingAction) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_sendMessageTypingAction))


    return x.buf
}

func (m* TLSendMessageTypingAction) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// sendMessageCancelAction#fd5ec8f5 = SendMessageAction;
func (m *TLSendMessageCancelAction) To_SendMessageAction() *SendMessageAction {
    return &SendMessageAction{
        Constructor: TLConstructor_CRC32_sendMessageCancelAction,
        Data2: m.Data2,
    }
}



func NewTLSendMessageCancelAction() * TLSendMessageCancelAction {
    return &TLSendMessageCancelAction{ Data2: &SendMessageAction_Data{} }
}

func (m* TLSendMessageCancelAction) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_sendMessageCancelAction))


    return x.buf
}

func (m* TLSendMessageCancelAction) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// sendMessageRecordVideoAction#a187d66f = SendMessageAction;
func (m *TLSendMessageRecordVideoAction) To_SendMessageAction() *SendMessageAction {
    return &SendMessageAction{
        Constructor: TLConstructor_CRC32_sendMessageRecordVideoAction,
        Data2: m.Data2,
    }
}



func NewTLSendMessageRecordVideoAction() * TLSendMessageRecordVideoAction {
    return &TLSendMessageRecordVideoAction{ Data2: &SendMessageAction_Data{} }
}

func (m* TLSendMessageRecordVideoAction) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_sendMessageRecordVideoAction))


    return x.buf
}

func (m* TLSendMessageRecordVideoAction) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// sendMessageUploadVideoAction#e9763aec progress:int = SendMessageAction;
func (m *TLSendMessageUploadVideoAction) To_SendMessageAction() *SendMessageAction {
    return &SendMessageAction{
        Constructor: TLConstructor_CRC32_sendMessageUploadVideoAction,
        Data2: m.Data2,
    }
}


func (m *TLSendMessageUploadVideoAction) SetProgress(v int32) { m.Data2.Progress = v }
func (m *TLSendMessageUploadVideoAction) GetProgress() int32 { return m.Data2.Progress }


func NewTLSendMessageUploadVideoAction() * TLSendMessageUploadVideoAction {
    return &TLSendMessageUploadVideoAction{ Data2: &SendMessageAction_Data{} }
}

func (m* TLSendMessageUploadVideoAction) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_sendMessageUploadVideoAction))

    x.Int(m.GetProgress())

    return x.buf
}

func (m* TLSendMessageUploadVideoAction) Decode(dbuf *DecodeBuf) error {
    m.SetProgress(dbuf.Int())

    return dbuf.err
}
// sendMessageRecordAudioAction#d52f73f7 = SendMessageAction;
func (m *TLSendMessageRecordAudioAction) To_SendMessageAction() *SendMessageAction {
    return &SendMessageAction{
        Constructor: TLConstructor_CRC32_sendMessageRecordAudioAction,
        Data2: m.Data2,
    }
}



func NewTLSendMessageRecordAudioAction() * TLSendMessageRecordAudioAction {
    return &TLSendMessageRecordAudioAction{ Data2: &SendMessageAction_Data{} }
}

func (m* TLSendMessageRecordAudioAction) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_sendMessageRecordAudioAction))


    return x.buf
}

func (m* TLSendMessageRecordAudioAction) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// sendMessageUploadAudioAction#f351d7ab progress:int = SendMessageAction;
func (m *TLSendMessageUploadAudioAction) To_SendMessageAction() *SendMessageAction {
    return &SendMessageAction{
        Constructor: TLConstructor_CRC32_sendMessageUploadAudioAction,
        Data2: m.Data2,
    }
}


func (m *TLSendMessageUploadAudioAction) SetProgress(v int32) { m.Data2.Progress = v }
func (m *TLSendMessageUploadAudioAction) GetProgress() int32 { return m.Data2.Progress }


func NewTLSendMessageUploadAudioAction() * TLSendMessageUploadAudioAction {
    return &TLSendMessageUploadAudioAction{ Data2: &SendMessageAction_Data{} }
}

func (m* TLSendMessageUploadAudioAction) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_sendMessageUploadAudioAction))

    x.Int(m.GetProgress())

    return x.buf
}

func (m* TLSendMessageUploadAudioAction) Decode(dbuf *DecodeBuf) error {
    m.SetProgress(dbuf.Int())

    return dbuf.err
}
// sendMessageUploadPhotoAction#d1d34a26 progress:int = SendMessageAction;
func (m *TLSendMessageUploadPhotoAction) To_SendMessageAction() *SendMessageAction {
    return &SendMessageAction{
        Constructor: TLConstructor_CRC32_sendMessageUploadPhotoAction,
        Data2: m.Data2,
    }
}


func (m *TLSendMessageUploadPhotoAction) SetProgress(v int32) { m.Data2.Progress = v }
func (m *TLSendMessageUploadPhotoAction) GetProgress() int32 { return m.Data2.Progress }


func NewTLSendMessageUploadPhotoAction() * TLSendMessageUploadPhotoAction {
    return &TLSendMessageUploadPhotoAction{ Data2: &SendMessageAction_Data{} }
}

func (m* TLSendMessageUploadPhotoAction) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_sendMessageUploadPhotoAction))

    x.Int(m.GetProgress())

    return x.buf
}

func (m* TLSendMessageUploadPhotoAction) Decode(dbuf *DecodeBuf) error {
    m.SetProgress(dbuf.Int())

    return dbuf.err
}
// sendMessageUploadDocumentAction#aa0cd9e4 progress:int = SendMessageAction;
func (m *TLSendMessageUploadDocumentAction) To_SendMessageAction() *SendMessageAction {
    return &SendMessageAction{
        Constructor: TLConstructor_CRC32_sendMessageUploadDocumentAction,
        Data2: m.Data2,
    }
}


func (m *TLSendMessageUploadDocumentAction) SetProgress(v int32) { m.Data2.Progress = v }
func (m *TLSendMessageUploadDocumentAction) GetProgress() int32 { return m.Data2.Progress }


func NewTLSendMessageUploadDocumentAction() * TLSendMessageUploadDocumentAction {
    return &TLSendMessageUploadDocumentAction{ Data2: &SendMessageAction_Data{} }
}

func (m* TLSendMessageUploadDocumentAction) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_sendMessageUploadDocumentAction))

    x.Int(m.GetProgress())

    return x.buf
}

func (m* TLSendMessageUploadDocumentAction) Decode(dbuf *DecodeBuf) error {
    m.SetProgress(dbuf.Int())

    return dbuf.err
}
// sendMessageGeoLocationAction#176f8ba1 = SendMessageAction;
func (m *TLSendMessageGeoLocationAction) To_SendMessageAction() *SendMessageAction {
    return &SendMessageAction{
        Constructor: TLConstructor_CRC32_sendMessageGeoLocationAction,
        Data2: m.Data2,
    }
}



func NewTLSendMessageGeoLocationAction() * TLSendMessageGeoLocationAction {
    return &TLSendMessageGeoLocationAction{ Data2: &SendMessageAction_Data{} }
}

func (m* TLSendMessageGeoLocationAction) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_sendMessageGeoLocationAction))


    return x.buf
}

func (m* TLSendMessageGeoLocationAction) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// sendMessageChooseContactAction#628cbc6f = SendMessageAction;
func (m *TLSendMessageChooseContactAction) To_SendMessageAction() *SendMessageAction {
    return &SendMessageAction{
        Constructor: TLConstructor_CRC32_sendMessageChooseContactAction,
        Data2: m.Data2,
    }
}



func NewTLSendMessageChooseContactAction() * TLSendMessageChooseContactAction {
    return &TLSendMessageChooseContactAction{ Data2: &SendMessageAction_Data{} }
}

func (m* TLSendMessageChooseContactAction) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_sendMessageChooseContactAction))


    return x.buf
}

func (m* TLSendMessageChooseContactAction) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// sendMessageGamePlayAction#dd6a8f48 = SendMessageAction;
func (m *TLSendMessageGamePlayAction) To_SendMessageAction() *SendMessageAction {
    return &SendMessageAction{
        Constructor: TLConstructor_CRC32_sendMessageGamePlayAction,
        Data2: m.Data2,
    }
}



func NewTLSendMessageGamePlayAction() * TLSendMessageGamePlayAction {
    return &TLSendMessageGamePlayAction{ Data2: &SendMessageAction_Data{} }
}

func (m* TLSendMessageGamePlayAction) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_sendMessageGamePlayAction))


    return x.buf
}

func (m* TLSendMessageGamePlayAction) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// sendMessageRecordRoundAction#88f27fbc = SendMessageAction;
func (m *TLSendMessageRecordRoundAction) To_SendMessageAction() *SendMessageAction {
    return &SendMessageAction{
        Constructor: TLConstructor_CRC32_sendMessageRecordRoundAction,
        Data2: m.Data2,
    }
}



func NewTLSendMessageRecordRoundAction() * TLSendMessageRecordRoundAction {
    return &TLSendMessageRecordRoundAction{ Data2: &SendMessageAction_Data{} }
}

func (m* TLSendMessageRecordRoundAction) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_sendMessageRecordRoundAction))


    return x.buf
}

func (m* TLSendMessageRecordRoundAction) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// sendMessageUploadRoundAction#243e1c66 progress:int = SendMessageAction;
func (m *TLSendMessageUploadRoundAction) To_SendMessageAction() *SendMessageAction {
    return &SendMessageAction{
        Constructor: TLConstructor_CRC32_sendMessageUploadRoundAction,
        Data2: m.Data2,
    }
}


func (m *TLSendMessageUploadRoundAction) SetProgress(v int32) { m.Data2.Progress = v }
func (m *TLSendMessageUploadRoundAction) GetProgress() int32 { return m.Data2.Progress }


func NewTLSendMessageUploadRoundAction() * TLSendMessageUploadRoundAction {
    return &TLSendMessageUploadRoundAction{ Data2: &SendMessageAction_Data{} }
}

func (m* TLSendMessageUploadRoundAction) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_sendMessageUploadRoundAction))

    x.Int(m.GetProgress())

    return x.buf
}

func (m* TLSendMessageUploadRoundAction) Decode(dbuf *DecodeBuf) error {
    m.SetProgress(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// PhoneCallDiscardReason <--
//  + TL_PhoneCallDiscardReasonMissed
//  + TL_PhoneCallDiscardReasonDisconnect
//  + TL_PhoneCallDiscardReasonHangup
//  + TL_PhoneCallDiscardReasonBusy
//

func (m *PhoneCallDiscardReason) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_phoneCallDiscardReasonMissed:
        t := m.To_PhoneCallDiscardReasonMissed()
        return t.Encode()
    case TLConstructor_CRC32_phoneCallDiscardReasonDisconnect:
        t := m.To_PhoneCallDiscardReasonDisconnect()
        return t.Encode()
    case TLConstructor_CRC32_phoneCallDiscardReasonHangup:
        t := m.To_PhoneCallDiscardReasonHangup()
        return t.Encode()
    case TLConstructor_CRC32_phoneCallDiscardReasonBusy:
        t := m.To_PhoneCallDiscardReasonBusy()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *PhoneCallDiscardReason) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_phoneCallDiscardReasonMissed:
        m2 := &TLPhoneCallDiscardReasonMissed{&PhoneCallDiscardReason_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_phoneCallDiscardReasonDisconnect:
        m2 := &TLPhoneCallDiscardReasonDisconnect{&PhoneCallDiscardReason_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_phoneCallDiscardReasonHangup:
        m2 := &TLPhoneCallDiscardReasonHangup{&PhoneCallDiscardReason_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_phoneCallDiscardReasonBusy:
        m2 := &TLPhoneCallDiscardReasonBusy{&PhoneCallDiscardReason_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// phoneCallDiscardReasonMissed#85e42301 = PhoneCallDiscardReason;
func (m *PhoneCallDiscardReason) To_PhoneCallDiscardReasonMissed() *TLPhoneCallDiscardReasonMissed {
    return &TLPhoneCallDiscardReasonMissed{
        Data2: m.Data2,
    }
}

// phoneCallDiscardReasonDisconnect#e095c1a0 = PhoneCallDiscardReason;
func (m *PhoneCallDiscardReason) To_PhoneCallDiscardReasonDisconnect() *TLPhoneCallDiscardReasonDisconnect {
    return &TLPhoneCallDiscardReasonDisconnect{
        Data2: m.Data2,
    }
}

// phoneCallDiscardReasonHangup#57adc690 = PhoneCallDiscardReason;
func (m *PhoneCallDiscardReason) To_PhoneCallDiscardReasonHangup() *TLPhoneCallDiscardReasonHangup {
    return &TLPhoneCallDiscardReasonHangup{
        Data2: m.Data2,
    }
}

// phoneCallDiscardReasonBusy#faf7e8c9 = PhoneCallDiscardReason;
func (m *PhoneCallDiscardReason) To_PhoneCallDiscardReasonBusy() *TLPhoneCallDiscardReasonBusy {
    return &TLPhoneCallDiscardReasonBusy{
        Data2: m.Data2,
    }
}



// phoneCallDiscardReasonMissed#85e42301 = PhoneCallDiscardReason;
func (m *TLPhoneCallDiscardReasonMissed) To_PhoneCallDiscardReason() *PhoneCallDiscardReason {
    return &PhoneCallDiscardReason{
        Constructor: TLConstructor_CRC32_phoneCallDiscardReasonMissed,
        Data2: m.Data2,
    }
}



func NewTLPhoneCallDiscardReasonMissed() * TLPhoneCallDiscardReasonMissed {
    return &TLPhoneCallDiscardReasonMissed{ Data2: &PhoneCallDiscardReason_Data{} }
}

func (m* TLPhoneCallDiscardReasonMissed) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_phoneCallDiscardReasonMissed))


    return x.buf
}

func (m* TLPhoneCallDiscardReasonMissed) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// phoneCallDiscardReasonDisconnect#e095c1a0 = PhoneCallDiscardReason;
func (m *TLPhoneCallDiscardReasonDisconnect) To_PhoneCallDiscardReason() *PhoneCallDiscardReason {
    return &PhoneCallDiscardReason{
        Constructor: TLConstructor_CRC32_phoneCallDiscardReasonDisconnect,
        Data2: m.Data2,
    }
}



func NewTLPhoneCallDiscardReasonDisconnect() * TLPhoneCallDiscardReasonDisconnect {
    return &TLPhoneCallDiscardReasonDisconnect{ Data2: &PhoneCallDiscardReason_Data{} }
}

func (m* TLPhoneCallDiscardReasonDisconnect) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_phoneCallDiscardReasonDisconnect))


    return x.buf
}

func (m* TLPhoneCallDiscardReasonDisconnect) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// phoneCallDiscardReasonHangup#57adc690 = PhoneCallDiscardReason;
func (m *TLPhoneCallDiscardReasonHangup) To_PhoneCallDiscardReason() *PhoneCallDiscardReason {
    return &PhoneCallDiscardReason{
        Constructor: TLConstructor_CRC32_phoneCallDiscardReasonHangup,
        Data2: m.Data2,
    }
}



func NewTLPhoneCallDiscardReasonHangup() * TLPhoneCallDiscardReasonHangup {
    return &TLPhoneCallDiscardReasonHangup{ Data2: &PhoneCallDiscardReason_Data{} }
}

func (m* TLPhoneCallDiscardReasonHangup) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_phoneCallDiscardReasonHangup))


    return x.buf
}

func (m* TLPhoneCallDiscardReasonHangup) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// phoneCallDiscardReasonBusy#faf7e8c9 = PhoneCallDiscardReason;
func (m *TLPhoneCallDiscardReasonBusy) To_PhoneCallDiscardReason() *PhoneCallDiscardReason {
    return &PhoneCallDiscardReason{
        Constructor: TLConstructor_CRC32_phoneCallDiscardReasonBusy,
        Data2: m.Data2,
    }
}



func NewTLPhoneCallDiscardReasonBusy() * TLPhoneCallDiscardReasonBusy {
    return &TLPhoneCallDiscardReasonBusy{ Data2: &PhoneCallDiscardReason_Data{} }
}

func (m* TLPhoneCallDiscardReasonBusy) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_phoneCallDiscardReasonBusy))


    return x.buf
}

func (m* TLPhoneCallDiscardReasonBusy) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Account_AuthorizationForm <--
//  + TL_AccountAuthorizationForm
//

func (m *Account_AuthorizationForm) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_account_authorizationForm:
        t := m.To_AccountAuthorizationForm()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Account_AuthorizationForm) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_account_authorizationForm:
        m2 := &TLAccountAuthorizationForm{&Account_AuthorizationForm_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// account.authorizationForm#ad2e1cd8 flags:# required_types:Vector<SecureRequiredType> values:Vector<SecureValue> errors:Vector<SecureValueError> users:Vector<User> privacy_policy_url:flags.0?string = account.AuthorizationForm;
func (m *Account_AuthorizationForm) To_AccountAuthorizationForm() *TLAccountAuthorizationForm {
    return &TLAccountAuthorizationForm{
        Data2: m.Data2,
    }
}



// account.authorizationForm#ad2e1cd8 flags:# required_types:Vector<SecureRequiredType> values:Vector<SecureValue> errors:Vector<SecureValueError> users:Vector<User> privacy_policy_url:flags.0?string = account.AuthorizationForm;
func (m *TLAccountAuthorizationForm) To_Account_AuthorizationForm() *Account_AuthorizationForm {
    return &Account_AuthorizationForm{
        Constructor: TLConstructor_CRC32_account_authorizationForm,
        Data2: m.Data2,
    }
}


func (m *TLAccountAuthorizationForm) SetRequiredTypes(v []*SecureRequiredType) { m.Data2.RequiredTypes = v }
func (m *TLAccountAuthorizationForm) GetRequiredTypes() []*SecureRequiredType { return m.Data2.RequiredTypes }

func (m *TLAccountAuthorizationForm) SetValues(v []*SecureValue) { m.Data2.Values = v }
func (m *TLAccountAuthorizationForm) GetValues() []*SecureValue { return m.Data2.Values }

func (m *TLAccountAuthorizationForm) SetErrors(v []*SecureValueError) { m.Data2.Errors = v }
func (m *TLAccountAuthorizationForm) GetErrors() []*SecureValueError { return m.Data2.Errors }

func (m *TLAccountAuthorizationForm) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLAccountAuthorizationForm) GetUsers() []*User { return m.Data2.Users }

func (m *TLAccountAuthorizationForm) SetPrivacyPolicyUrl(v string) { m.Data2.PrivacyPolicyUrl = v }
func (m *TLAccountAuthorizationForm) GetPrivacyPolicyUrl() string { return m.Data2.PrivacyPolicyUrl }


func NewTLAccountAuthorizationForm() * TLAccountAuthorizationForm {
    return &TLAccountAuthorizationForm{ Data2: &Account_AuthorizationForm_Data{} }
}

func (m* TLAccountAuthorizationForm) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_account_authorizationForm))

    // flags
    var flags uint32 = 0
    if m.GetPrivacyPolicyUrl() != "" { flags |= 1 << 0 }
	x.UInt(flags)

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetRequiredTypes())))
for _, v := range m.GetRequiredTypes() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetValues())))
for _, v := range m.GetValues() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetErrors())))
for _, v := range m.GetErrors() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    if (flags & (1 << 0)) != 0 { x.String(m.GetPrivacyPolicyUrl()) }

    return x.buf
}

func (m* TLAccountAuthorizationForm) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*SecureRequiredType, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &SecureRequiredType{}
	v2[i].Decode(dbuf)
}
m.SetRequiredTypes(v2)

    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*SecureValue, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &SecureValue{}
	v3[i].Decode(dbuf)
}
m.SetValues(v3)

    c4 := dbuf.Int()
if c4 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
	return dbuf.err
}
l4 := dbuf.Int()
v4 := make([]*SecureValueError, l4)
for i := int32(0); i < l4; i++ {
	v4[i] = &SecureValueError{}
	v4[i].Decode(dbuf)
}
m.SetErrors(v4)

    c5 := dbuf.Int()
if c5 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 5, c5)
	return dbuf.err
}
l5 := dbuf.Int()
v5 := make([]*User, l5)
for i := int32(0); i < l5; i++ {
	v5[i] = &User{}
	v5[i].Decode(dbuf)
}
m.SetUsers(v5)

    if (flags & (1 << 0)) != 0 { m.SetPrivacyPolicyUrl(dbuf.String()) }

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Messages_InactiveChats <--
//  + TL_MessagesInactiveChats
//

func (m *Messages_InactiveChats) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messages_inactiveChats:
        t := m.To_MessagesInactiveChats()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Messages_InactiveChats) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messages_inactiveChats:
        m2 := &TLMessagesInactiveChats{&Messages_InactiveChats_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messages.inactiveChats#a927fec5 dates:Vector<int> chats:Vector<Chat> users:Vector<User> = messages.InactiveChats;
func (m *Messages_InactiveChats) To_MessagesInactiveChats() *TLMessagesInactiveChats {
    return &TLMessagesInactiveChats{
        Data2: m.Data2,
    }
}



// messages.inactiveChats#a927fec5 dates:Vector<int> chats:Vector<Chat> users:Vector<User> = messages.InactiveChats;
func (m *TLMessagesInactiveChats) To_Messages_InactiveChats() *Messages_InactiveChats {
    return &Messages_InactiveChats{
        Constructor: TLConstructor_CRC32_messages_inactiveChats,
        Data2: m.Data2,
    }
}


func (m *TLMessagesInactiveChats) SetDates(v []int32) { m.Data2.Dates = v }
func (m *TLMessagesInactiveChats) GetDates() []int32 { return m.Data2.Dates }

func (m *TLMessagesInactiveChats) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesInactiveChats) GetChats() []*Chat { return m.Data2.Chats }

func (m *TLMessagesInactiveChats) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesInactiveChats) GetUsers() []*User { return m.Data2.Users }


func NewTLMessagesInactiveChats() * TLMessagesInactiveChats {
    return &TLMessagesInactiveChats{ Data2: &Messages_InactiveChats_Data{} }
}

func (m* TLMessagesInactiveChats) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_inactiveChats))

    x.VectorInt(m.GetDates())

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetChats())))
for _, v := range m.GetChats() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLMessagesInactiveChats) Decode(dbuf *DecodeBuf) error {
    m.SetDates(dbuf.VectorInt())
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*Chat, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &Chat{}
	v2[i].Decode(dbuf)
}
m.SetChats(v2)

    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*User, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &User{}
	v3[i].Decode(dbuf)
}
m.SetUsers(v3)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Updates <--
//  + TL_UpdatesTooLong
//  + TL_UpdateShortMessage
//  + TL_UpdateShortChatMessage
//  + TL_UpdateShort
//  + TL_UpdatesCombined
//  + TL_Updates
//  + TL_UpdateShortSentMessage
//

func (m *Updates) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_updatesTooLong:
        t := m.To_UpdatesTooLong()
        return t.Encode()
    case TLConstructor_CRC32_updateShortMessage:
        t := m.To_UpdateShortMessage()
        return t.Encode()
    case TLConstructor_CRC32_updateShortChatMessage:
        t := m.To_UpdateShortChatMessage()
        return t.Encode()
    case TLConstructor_CRC32_updateShort:
        t := m.To_UpdateShort()
        return t.Encode()
    case TLConstructor_CRC32_updatesCombined:
        t := m.To_UpdatesCombined()
        return t.Encode()
    case TLConstructor_CRC32_updates:
        t := m.To_Updates()
        return t.Encode()
    case TLConstructor_CRC32_updateShortSentMessage:
        t := m.To_UpdateShortSentMessage()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Updates) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_updatesTooLong:
        m2 := &TLUpdatesTooLong{&Updates_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateShortMessage:
        m2 := &TLUpdateShortMessage{&Updates_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateShortChatMessage:
        m2 := &TLUpdateShortChatMessage{&Updates_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateShort:
        m2 := &TLUpdateShort{&Updates_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updatesCombined:
        m2 := &TLUpdatesCombined{&Updates_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updates:
        m2 := &TLUpdates{&Updates_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateShortSentMessage:
        m2 := &TLUpdateShortSentMessage{&Updates_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// updatesTooLong#e317af7e = Updates;
func (m *Updates) To_UpdatesTooLong() *TLUpdatesTooLong {
    return &TLUpdatesTooLong{
        Data2: m.Data2,
    }
}

// updateShortMessage#914fbf11 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true id:int user_id:int message:string pts:int pts_count:int date:int fwd_from:flags.2?MessageFwdHeader via_bot_id:flags.11?int reply_to_msg_id:flags.3?int entities:flags.7?Vector<MessageEntity> = Updates;
func (m *Updates) To_UpdateShortMessage() *TLUpdateShortMessage {
    return &TLUpdateShortMessage{
        Data2: m.Data2,
    }
}

// updateShortChatMessage#16812688 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true id:int from_id:int chat_id:int message:string pts:int pts_count:int date:int fwd_from:flags.2?MessageFwdHeader via_bot_id:flags.11?int reply_to_msg_id:flags.3?int entities:flags.7?Vector<MessageEntity> = Updates;
func (m *Updates) To_UpdateShortChatMessage() *TLUpdateShortChatMessage {
    return &TLUpdateShortChatMessage{
        Data2: m.Data2,
    }
}

// updateShort#78d4dec1 update:Update date:int = Updates;
func (m *Updates) To_UpdateShort() *TLUpdateShort {
    return &TLUpdateShort{
        Data2: m.Data2,
    }
}

// updatesCombined#725b04c3 updates:Vector<Update> users:Vector<User> chats:Vector<Chat> date:int seq_start:int seq:int = Updates;
func (m *Updates) To_UpdatesCombined() *TLUpdatesCombined {
    return &TLUpdatesCombined{
        Data2: m.Data2,
    }
}

// updates#74ae4240 updates:Vector<Update> users:Vector<User> chats:Vector<Chat> date:int seq:int = Updates;
func (m *Updates) To_Updates() *TLUpdates {
    return &TLUpdates{
        Data2: m.Data2,
    }
}

// updateShortSentMessage#11f1331c flags:# out:flags.1?true id:int pts:int pts_count:int date:int media:flags.9?MessageMedia entities:flags.7?Vector<MessageEntity> = Updates;
func (m *Updates) To_UpdateShortSentMessage() *TLUpdateShortSentMessage {
    return &TLUpdateShortSentMessage{
        Data2: m.Data2,
    }
}



// updatesTooLong#e317af7e = Updates;
func (m *TLUpdatesTooLong) To_Updates() *Updates {
    return &Updates{
        Constructor: TLConstructor_CRC32_updatesTooLong,
        Data2: m.Data2,
    }
}



func NewTLUpdatesTooLong() * TLUpdatesTooLong {
    return &TLUpdatesTooLong{ Data2: &Updates_Data{} }
}

func (m* TLUpdatesTooLong) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updatesTooLong))


    return x.buf
}

func (m* TLUpdatesTooLong) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// updateShortMessage#914fbf11 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true id:int user_id:int message:string pts:int pts_count:int date:int fwd_from:flags.2?MessageFwdHeader via_bot_id:flags.11?int reply_to_msg_id:flags.3?int entities:flags.7?Vector<MessageEntity> = Updates;
func (m *TLUpdateShortMessage) To_Updates() *Updates {
    return &Updates{
        Constructor: TLConstructor_CRC32_updateShortMessage,
        Data2: m.Data2,
    }
}


func (m *TLUpdateShortMessage) SetOut(v bool) { m.Data2.Out = v }
func (m *TLUpdateShortMessage) GetOut() bool { return m.Data2.Out }

func (m *TLUpdateShortMessage) SetMentioned(v bool) { m.Data2.Mentioned = v }
func (m *TLUpdateShortMessage) GetMentioned() bool { return m.Data2.Mentioned }

func (m *TLUpdateShortMessage) SetMediaUnread(v bool) { m.Data2.MediaUnread = v }
func (m *TLUpdateShortMessage) GetMediaUnread() bool { return m.Data2.MediaUnread }

func (m *TLUpdateShortMessage) SetSilent(v bool) { m.Data2.Silent = v }
func (m *TLUpdateShortMessage) GetSilent() bool { return m.Data2.Silent }

func (m *TLUpdateShortMessage) SetId(v int32) { m.Data2.Id = v }
func (m *TLUpdateShortMessage) GetId() int32 { return m.Data2.Id }

func (m *TLUpdateShortMessage) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateShortMessage) GetUserId() int32 { return m.Data2.UserId }

func (m *TLUpdateShortMessage) SetMessage(v string) { m.Data2.Message = v }
func (m *TLUpdateShortMessage) GetMessage() string { return m.Data2.Message }

func (m *TLUpdateShortMessage) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateShortMessage) GetPts() int32 { return m.Data2.Pts }

func (m *TLUpdateShortMessage) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateShortMessage) GetPtsCount() int32 { return m.Data2.PtsCount }

func (m *TLUpdateShortMessage) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdateShortMessage) GetDate() int32 { return m.Data2.Date }

func (m *TLUpdateShortMessage) SetFwdFrom(v *MessageFwdHeader) { m.Data2.FwdFrom = v }
func (m *TLUpdateShortMessage) GetFwdFrom() *MessageFwdHeader { return m.Data2.FwdFrom }

func (m *TLUpdateShortMessage) SetViaBotId(v int32) { m.Data2.ViaBotId = v }
func (m *TLUpdateShortMessage) GetViaBotId() int32 { return m.Data2.ViaBotId }

func (m *TLUpdateShortMessage) SetReplyToMsgId(v int32) { m.Data2.ReplyToMsgId = v }
func (m *TLUpdateShortMessage) GetReplyToMsgId() int32 { return m.Data2.ReplyToMsgId }

func (m *TLUpdateShortMessage) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLUpdateShortMessage) GetEntities() []*MessageEntity { return m.Data2.Entities }


func NewTLUpdateShortMessage() * TLUpdateShortMessage {
    return &TLUpdateShortMessage{ Data2: &Updates_Data{} }
}

func (m* TLUpdateShortMessage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateShortMessage))

    // flags
    var flags uint32 = 0
    if m.GetOut() == true { flags |= 1 << 1 }
    if m.GetMentioned() == true { flags |= 1 << 4 }
    if m.GetMediaUnread() == true { flags |= 1 << 5 }
    if m.GetSilent() == true { flags |= 1 << 13 }
    if m.GetFwdFrom() != nil { flags |= 1 << 2 }
    if m.GetViaBotId() != 0 { flags |= 1 << 11 }
    if m.GetReplyToMsgId() != 0 { flags |= 1 << 3 }
    if m.GetEntities() != nil { flags |= 1 << 7 }
	x.UInt(flags)

    
    
    
    
    x.Int(m.GetId())
    x.Int(m.GetUserId())
    x.String(m.GetMessage())
    x.Int(m.GetPts())
    x.Int(m.GetPtsCount())
    x.Int(m.GetDate())
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetFwdFrom().Encode()) }
    if (flags & (1 << 11)) != 0 { x.Int(m.GetViaBotId()) }
    if (flags & (1 << 3)) != 0 { x.Int(m.GetReplyToMsgId()) }
    if (flags & (1 << 7)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetEntities())))
for _, v := range m.GetEntities() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}

    return x.buf
}

func (m* TLUpdateShortMessage) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 1)) != 0 { m.SetOut(true) }
    if (flags & (1 << 4)) != 0 { m.SetMentioned(true) }
    if (flags & (1 << 5)) != 0 { m.SetMediaUnread(true) }
    if (flags & (1 << 13)) != 0 { m.SetSilent(true) }
    m.SetId(dbuf.Int())
    m.SetUserId(dbuf.Int())
    m.SetMessage(dbuf.String())
    m.SetPts(dbuf.Int())
    m.SetPtsCount(dbuf.Int())
    m.SetDate(dbuf.Int())
    if (flags & (1 << 2)) != 0 {
 m12 := &MessageFwdHeader{}
    m12.Decode(dbuf)
    m.SetFwdFrom(m12) 
}
    if (flags & (1 << 11)) != 0 { m.SetViaBotId(dbuf.Int()) }
    if (flags & (1 << 3)) != 0 { m.SetReplyToMsgId(dbuf.Int()) }
    if (flags & (1 << 7)) != 0 {
 c15 := dbuf.Int()
if c15 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 15, c15)
	return dbuf.err
}
l15 := dbuf.Int()
v15 := make([]*MessageEntity, l15)
for i := int32(0); i < l15; i++ {
	v15[i] = &MessageEntity{}
	v15[i].Decode(dbuf)
}
m.SetEntities(v15)
 
}

    return dbuf.err
}
// updateShortChatMessage#16812688 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true id:int from_id:int chat_id:int message:string pts:int pts_count:int date:int fwd_from:flags.2?MessageFwdHeader via_bot_id:flags.11?int reply_to_msg_id:flags.3?int entities:flags.7?Vector<MessageEntity> = Updates;
func (m *TLUpdateShortChatMessage) To_Updates() *Updates {
    return &Updates{
        Constructor: TLConstructor_CRC32_updateShortChatMessage,
        Data2: m.Data2,
    }
}


func (m *TLUpdateShortChatMessage) SetOut(v bool) { m.Data2.Out = v }
func (m *TLUpdateShortChatMessage) GetOut() bool { return m.Data2.Out }

func (m *TLUpdateShortChatMessage) SetMentioned(v bool) { m.Data2.Mentioned = v }
func (m *TLUpdateShortChatMessage) GetMentioned() bool { return m.Data2.Mentioned }

func (m *TLUpdateShortChatMessage) SetMediaUnread(v bool) { m.Data2.MediaUnread = v }
func (m *TLUpdateShortChatMessage) GetMediaUnread() bool { return m.Data2.MediaUnread }

func (m *TLUpdateShortChatMessage) SetSilent(v bool) { m.Data2.Silent = v }
func (m *TLUpdateShortChatMessage) GetSilent() bool { return m.Data2.Silent }

func (m *TLUpdateShortChatMessage) SetId(v int32) { m.Data2.Id = v }
func (m *TLUpdateShortChatMessage) GetId() int32 { return m.Data2.Id }

func (m *TLUpdateShortChatMessage) SetFromId(v int32) { m.Data2.FromId = v }
func (m *TLUpdateShortChatMessage) GetFromId() int32 { return m.Data2.FromId }

func (m *TLUpdateShortChatMessage) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLUpdateShortChatMessage) GetChatId() int32 { return m.Data2.ChatId }

func (m *TLUpdateShortChatMessage) SetMessage(v string) { m.Data2.Message = v }
func (m *TLUpdateShortChatMessage) GetMessage() string { return m.Data2.Message }

func (m *TLUpdateShortChatMessage) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateShortChatMessage) GetPts() int32 { return m.Data2.Pts }

func (m *TLUpdateShortChatMessage) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateShortChatMessage) GetPtsCount() int32 { return m.Data2.PtsCount }

func (m *TLUpdateShortChatMessage) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdateShortChatMessage) GetDate() int32 { return m.Data2.Date }

func (m *TLUpdateShortChatMessage) SetFwdFrom(v *MessageFwdHeader) { m.Data2.FwdFrom = v }
func (m *TLUpdateShortChatMessage) GetFwdFrom() *MessageFwdHeader { return m.Data2.FwdFrom }

func (m *TLUpdateShortChatMessage) SetViaBotId(v int32) { m.Data2.ViaBotId = v }
func (m *TLUpdateShortChatMessage) GetViaBotId() int32 { return m.Data2.ViaBotId }

func (m *TLUpdateShortChatMessage) SetReplyToMsgId(v int32) { m.Data2.ReplyToMsgId = v }
func (m *TLUpdateShortChatMessage) GetReplyToMsgId() int32 { return m.Data2.ReplyToMsgId }

func (m *TLUpdateShortChatMessage) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLUpdateShortChatMessage) GetEntities() []*MessageEntity { return m.Data2.Entities }


func NewTLUpdateShortChatMessage() * TLUpdateShortChatMessage {
    return &TLUpdateShortChatMessage{ Data2: &Updates_Data{} }
}

func (m* TLUpdateShortChatMessage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateShortChatMessage))

    // flags
    var flags uint32 = 0
    if m.GetOut() == true { flags |= 1 << 1 }
    if m.GetMentioned() == true { flags |= 1 << 4 }
    if m.GetMediaUnread() == true { flags |= 1 << 5 }
    if m.GetSilent() == true { flags |= 1 << 13 }
    if m.GetFwdFrom() != nil { flags |= 1 << 2 }
    if m.GetViaBotId() != 0 { flags |= 1 << 11 }
    if m.GetReplyToMsgId() != 0 { flags |= 1 << 3 }
    if m.GetEntities() != nil { flags |= 1 << 7 }
	x.UInt(flags)

    
    
    
    
    x.Int(m.GetId())
    x.Int(m.GetFromId())
    x.Int(m.GetChatId())
    x.String(m.GetMessage())
    x.Int(m.GetPts())
    x.Int(m.GetPtsCount())
    x.Int(m.GetDate())
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetFwdFrom().Encode()) }
    if (flags & (1 << 11)) != 0 { x.Int(m.GetViaBotId()) }
    if (flags & (1 << 3)) != 0 { x.Int(m.GetReplyToMsgId()) }
    if (flags & (1 << 7)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetEntities())))
for _, v := range m.GetEntities() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}

    return x.buf
}

func (m* TLUpdateShortChatMessage) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 1)) != 0 { m.SetOut(true) }
    if (flags & (1 << 4)) != 0 { m.SetMentioned(true) }
    if (flags & (1 << 5)) != 0 { m.SetMediaUnread(true) }
    if (flags & (1 << 13)) != 0 { m.SetSilent(true) }
    m.SetId(dbuf.Int())
    m.SetFromId(dbuf.Int())
    m.SetChatId(dbuf.Int())
    m.SetMessage(dbuf.String())
    m.SetPts(dbuf.Int())
    m.SetPtsCount(dbuf.Int())
    m.SetDate(dbuf.Int())
    if (flags & (1 << 2)) != 0 {
 m13 := &MessageFwdHeader{}
    m13.Decode(dbuf)
    m.SetFwdFrom(m13) 
}
    if (flags & (1 << 11)) != 0 { m.SetViaBotId(dbuf.Int()) }
    if (flags & (1 << 3)) != 0 { m.SetReplyToMsgId(dbuf.Int()) }
    if (flags & (1 << 7)) != 0 {
 c16 := dbuf.Int()
if c16 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 16, c16)
	return dbuf.err
}
l16 := dbuf.Int()
v16 := make([]*MessageEntity, l16)
for i := int32(0); i < l16; i++ {
	v16[i] = &MessageEntity{}
	v16[i].Decode(dbuf)
}
m.SetEntities(v16)
 
}

    return dbuf.err
}
// updateShort#78d4dec1 update:Update date:int = Updates;
func (m *TLUpdateShort) To_Updates() *Updates {
    return &Updates{
        Constructor: TLConstructor_CRC32_updateShort,
        Data2: m.Data2,
    }
}


func (m *TLUpdateShort) SetUpdate(v *Update) { m.Data2.Update = v }
func (m *TLUpdateShort) GetUpdate() *Update { return m.Data2.Update }

func (m *TLUpdateShort) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdateShort) GetDate() int32 { return m.Data2.Date }


func NewTLUpdateShort() * TLUpdateShort {
    return &TLUpdateShort{ Data2: &Updates_Data{} }
}

func (m* TLUpdateShort) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateShort))

    x.Bytes(m.GetUpdate().Encode())
    x.Int(m.GetDate())

    return x.buf
}

func (m* TLUpdateShort) Decode(dbuf *DecodeBuf) error {
    m1 := &Update{}
    m1.Decode(dbuf)
    m.SetUpdate(m1)
    m.SetDate(dbuf.Int())

    return dbuf.err
}
// updatesCombined#725b04c3 updates:Vector<Update> users:Vector<User> chats:Vector<Chat> date:int seq_start:int seq:int = Updates;
func (m *TLUpdatesCombined) To_Updates() *Updates {
    return &Updates{
        Constructor: TLConstructor_CRC32_updatesCombined,
        Data2: m.Data2,
    }
}


func (m *TLUpdatesCombined) SetUpdates(v []*Update) { m.Data2.Updates = v }
func (m *TLUpdatesCombined) GetUpdates() []*Update { return m.Data2.Updates }

func (m *TLUpdatesCombined) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLUpdatesCombined) GetUsers() []*User { return m.Data2.Users }

func (m *TLUpdatesCombined) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLUpdatesCombined) GetChats() []*Chat { return m.Data2.Chats }

func (m *TLUpdatesCombined) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdatesCombined) GetDate() int32 { return m.Data2.Date }

func (m *TLUpdatesCombined) SetSeqStart(v int32) { m.Data2.SeqStart = v }
func (m *TLUpdatesCombined) GetSeqStart() int32 { return m.Data2.SeqStart }

func (m *TLUpdatesCombined) SetSeq(v int32) { m.Data2.Seq = v }
func (m *TLUpdatesCombined) GetSeq() int32 { return m.Data2.Seq }


func NewTLUpdatesCombined() * TLUpdatesCombined {
    return &TLUpdatesCombined{ Data2: &Updates_Data{} }
}

func (m* TLUpdatesCombined) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updatesCombined))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUpdates())))
for _, v := range m.GetUpdates() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetChats())))
for _, v := range m.GetChats() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(m.GetDate())
    x.Int(m.GetSeqStart())
    x.Int(m.GetSeq())

    return x.buf
}

func (m* TLUpdatesCombined) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*Update, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &Update{}
	v1[i].Decode(dbuf)
}
m.SetUpdates(v1)

    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*User, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &User{}
	v2[i].Decode(dbuf)
}
m.SetUsers(v2)

    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*Chat, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &Chat{}
	v3[i].Decode(dbuf)
}
m.SetChats(v3)

    m.SetDate(dbuf.Int())
    m.SetSeqStart(dbuf.Int())
    m.SetSeq(dbuf.Int())

    return dbuf.err
}
// updates#74ae4240 updates:Vector<Update> users:Vector<User> chats:Vector<Chat> date:int seq:int = Updates;
func (m *TLUpdates) To_Updates() *Updates {
    return &Updates{
        Constructor: TLConstructor_CRC32_updates,
        Data2: m.Data2,
    }
}


func (m *TLUpdates) SetUpdates(v []*Update) { m.Data2.Updates = v }
func (m *TLUpdates) GetUpdates() []*Update { return m.Data2.Updates }

func (m *TLUpdates) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLUpdates) GetUsers() []*User { return m.Data2.Users }

func (m *TLUpdates) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLUpdates) GetChats() []*Chat { return m.Data2.Chats }

func (m *TLUpdates) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdates) GetDate() int32 { return m.Data2.Date }

func (m *TLUpdates) SetSeq(v int32) { m.Data2.Seq = v }
func (m *TLUpdates) GetSeq() int32 { return m.Data2.Seq }


func NewTLUpdates() * TLUpdates {
    return &TLUpdates{ Data2: &Updates_Data{} }
}

func (m* TLUpdates) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updates))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUpdates())))
for _, v := range m.GetUpdates() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetChats())))
for _, v := range m.GetChats() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(m.GetDate())
    x.Int(m.GetSeq())

    return x.buf
}

func (m* TLUpdates) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*Update, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &Update{}
	v1[i].Decode(dbuf)
}
m.SetUpdates(v1)

    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*User, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &User{}
	v2[i].Decode(dbuf)
}
m.SetUsers(v2)

    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*Chat, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &Chat{}
	v3[i].Decode(dbuf)
}
m.SetChats(v3)

    m.SetDate(dbuf.Int())
    m.SetSeq(dbuf.Int())

    return dbuf.err
}
// updateShortSentMessage#11f1331c flags:# out:flags.1?true id:int pts:int pts_count:int date:int media:flags.9?MessageMedia entities:flags.7?Vector<MessageEntity> = Updates;
func (m *TLUpdateShortSentMessage) To_Updates() *Updates {
    return &Updates{
        Constructor: TLConstructor_CRC32_updateShortSentMessage,
        Data2: m.Data2,
    }
}


func (m *TLUpdateShortSentMessage) SetOut(v bool) { m.Data2.Out = v }
func (m *TLUpdateShortSentMessage) GetOut() bool { return m.Data2.Out }

func (m *TLUpdateShortSentMessage) SetId(v int32) { m.Data2.Id = v }
func (m *TLUpdateShortSentMessage) GetId() int32 { return m.Data2.Id }

func (m *TLUpdateShortSentMessage) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateShortSentMessage) GetPts() int32 { return m.Data2.Pts }

func (m *TLUpdateShortSentMessage) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateShortSentMessage) GetPtsCount() int32 { return m.Data2.PtsCount }

func (m *TLUpdateShortSentMessage) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdateShortSentMessage) GetDate() int32 { return m.Data2.Date }

func (m *TLUpdateShortSentMessage) SetMedia(v *MessageMedia) { m.Data2.Media = v }
func (m *TLUpdateShortSentMessage) GetMedia() *MessageMedia { return m.Data2.Media }

func (m *TLUpdateShortSentMessage) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLUpdateShortSentMessage) GetEntities() []*MessageEntity { return m.Data2.Entities }


func NewTLUpdateShortSentMessage() * TLUpdateShortSentMessage {
    return &TLUpdateShortSentMessage{ Data2: &Updates_Data{} }
}

func (m* TLUpdateShortSentMessage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateShortSentMessage))

    // flags
    var flags uint32 = 0
    if m.GetOut() == true { flags |= 1 << 1 }
    if m.GetMedia() != nil { flags |= 1 << 9 }
    if m.GetEntities() != nil { flags |= 1 << 7 }
	x.UInt(flags)

    
    x.Int(m.GetId())
    x.Int(m.GetPts())
    x.Int(m.GetPtsCount())
    x.Int(m.GetDate())
    if (flags & (1 << 9)) != 0 { x.Bytes(m.GetMedia().Encode()) }
    if (flags & (1 << 7)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetEntities())))
for _, v := range m.GetEntities() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}

    return x.buf
}

func (m* TLUpdateShortSentMessage) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 1)) != 0 { m.SetOut(true) }
    m.SetId(dbuf.Int())
    m.SetPts(dbuf.Int())
    m.SetPtsCount(dbuf.Int())
    m.SetDate(dbuf.Int())
    if (flags & (1 << 9)) != 0 {
 m7 := &MessageMedia{}
    m7.Decode(dbuf)
    m.SetMedia(m7) 
}
    if (flags & (1 << 7)) != 0 {
 c8 := dbuf.Int()
if c8 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 8, c8)
	return dbuf.err
}
l8 := dbuf.Int()
v8 := make([]*MessageEntity, l8)
for i := int32(0); i < l8; i++ {
	v8[i] = &MessageEntity{}
	v8[i].Decode(dbuf)
}
m.SetEntities(v8)
 
}

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// PrivacyKey <--
//  + TL_PrivacyKeyStatusTimestamp
//  + TL_PrivacyKeyChatInvite
//  + TL_PrivacyKeyPhoneCall
//  + TL_PrivacyKeyPhoneP2P
//  + TL_PrivacyKeyForwards
//  + TL_PrivacyKeyProfilePhoto
//  + TL_PrivacyKeyPhoneNumber
//  + TL_PrivacyKeyAddedByPhone
//

func (m *PrivacyKey) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_privacyKeyStatusTimestamp:
        t := m.To_PrivacyKeyStatusTimestamp()
        return t.Encode()
    case TLConstructor_CRC32_privacyKeyChatInvite:
        t := m.To_PrivacyKeyChatInvite()
        return t.Encode()
    case TLConstructor_CRC32_privacyKeyPhoneCall:
        t := m.To_PrivacyKeyPhoneCall()
        return t.Encode()
    case TLConstructor_CRC32_privacyKeyPhoneP2P:
        t := m.To_PrivacyKeyPhoneP2P()
        return t.Encode()
    case TLConstructor_CRC32_privacyKeyForwards:
        t := m.To_PrivacyKeyForwards()
        return t.Encode()
    case TLConstructor_CRC32_privacyKeyProfilePhoto:
        t := m.To_PrivacyKeyProfilePhoto()
        return t.Encode()
    case TLConstructor_CRC32_privacyKeyPhoneNumber:
        t := m.To_PrivacyKeyPhoneNumber()
        return t.Encode()
    case TLConstructor_CRC32_privacyKeyAddedByPhone:
        t := m.To_PrivacyKeyAddedByPhone()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *PrivacyKey) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_privacyKeyStatusTimestamp:
        m2 := &TLPrivacyKeyStatusTimestamp{&PrivacyKey_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_privacyKeyChatInvite:
        m2 := &TLPrivacyKeyChatInvite{&PrivacyKey_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_privacyKeyPhoneCall:
        m2 := &TLPrivacyKeyPhoneCall{&PrivacyKey_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_privacyKeyPhoneP2P:
        m2 := &TLPrivacyKeyPhoneP2P{&PrivacyKey_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_privacyKeyForwards:
        m2 := &TLPrivacyKeyForwards{&PrivacyKey_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_privacyKeyProfilePhoto:
        m2 := &TLPrivacyKeyProfilePhoto{&PrivacyKey_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_privacyKeyPhoneNumber:
        m2 := &TLPrivacyKeyPhoneNumber{&PrivacyKey_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_privacyKeyAddedByPhone:
        m2 := &TLPrivacyKeyAddedByPhone{&PrivacyKey_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// privacyKeyStatusTimestamp#bc2eab30 = PrivacyKey;
func (m *PrivacyKey) To_PrivacyKeyStatusTimestamp() *TLPrivacyKeyStatusTimestamp {
    return &TLPrivacyKeyStatusTimestamp{
        Data2: m.Data2,
    }
}

// privacyKeyChatInvite#500e6dfa = PrivacyKey;
func (m *PrivacyKey) To_PrivacyKeyChatInvite() *TLPrivacyKeyChatInvite {
    return &TLPrivacyKeyChatInvite{
        Data2: m.Data2,
    }
}

// privacyKeyPhoneCall#3d662b7b = PrivacyKey;
func (m *PrivacyKey) To_PrivacyKeyPhoneCall() *TLPrivacyKeyPhoneCall {
    return &TLPrivacyKeyPhoneCall{
        Data2: m.Data2,
    }
}

// privacyKeyPhoneP2P#39491cc8 = PrivacyKey;
func (m *PrivacyKey) To_PrivacyKeyPhoneP2P() *TLPrivacyKeyPhoneP2P {
    return &TLPrivacyKeyPhoneP2P{
        Data2: m.Data2,
    }
}

// privacyKeyForwards#69ec56a3 = PrivacyKey;
func (m *PrivacyKey) To_PrivacyKeyForwards() *TLPrivacyKeyForwards {
    return &TLPrivacyKeyForwards{
        Data2: m.Data2,
    }
}

// privacyKeyProfilePhoto#96151fed = PrivacyKey;
func (m *PrivacyKey) To_PrivacyKeyProfilePhoto() *TLPrivacyKeyProfilePhoto {
    return &TLPrivacyKeyProfilePhoto{
        Data2: m.Data2,
    }
}

// privacyKeyPhoneNumber#d19ae46d = PrivacyKey;
func (m *PrivacyKey) To_PrivacyKeyPhoneNumber() *TLPrivacyKeyPhoneNumber {
    return &TLPrivacyKeyPhoneNumber{
        Data2: m.Data2,
    }
}

// privacyKeyAddedByPhone#42ffd42b = PrivacyKey;
func (m *PrivacyKey) To_PrivacyKeyAddedByPhone() *TLPrivacyKeyAddedByPhone {
    return &TLPrivacyKeyAddedByPhone{
        Data2: m.Data2,
    }
}



// privacyKeyStatusTimestamp#bc2eab30 = PrivacyKey;
func (m *TLPrivacyKeyStatusTimestamp) To_PrivacyKey() *PrivacyKey {
    return &PrivacyKey{
        Constructor: TLConstructor_CRC32_privacyKeyStatusTimestamp,
        Data2: m.Data2,
    }
}



func NewTLPrivacyKeyStatusTimestamp() * TLPrivacyKeyStatusTimestamp {
    return &TLPrivacyKeyStatusTimestamp{ Data2: &PrivacyKey_Data{} }
}

func (m* TLPrivacyKeyStatusTimestamp) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_privacyKeyStatusTimestamp))


    return x.buf
}

func (m* TLPrivacyKeyStatusTimestamp) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// privacyKeyChatInvite#500e6dfa = PrivacyKey;
func (m *TLPrivacyKeyChatInvite) To_PrivacyKey() *PrivacyKey {
    return &PrivacyKey{
        Constructor: TLConstructor_CRC32_privacyKeyChatInvite,
        Data2: m.Data2,
    }
}



func NewTLPrivacyKeyChatInvite() * TLPrivacyKeyChatInvite {
    return &TLPrivacyKeyChatInvite{ Data2: &PrivacyKey_Data{} }
}

func (m* TLPrivacyKeyChatInvite) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_privacyKeyChatInvite))


    return x.buf
}

func (m* TLPrivacyKeyChatInvite) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// privacyKeyPhoneCall#3d662b7b = PrivacyKey;
func (m *TLPrivacyKeyPhoneCall) To_PrivacyKey() *PrivacyKey {
    return &PrivacyKey{
        Constructor: TLConstructor_CRC32_privacyKeyPhoneCall,
        Data2: m.Data2,
    }
}



func NewTLPrivacyKeyPhoneCall() * TLPrivacyKeyPhoneCall {
    return &TLPrivacyKeyPhoneCall{ Data2: &PrivacyKey_Data{} }
}

func (m* TLPrivacyKeyPhoneCall) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_privacyKeyPhoneCall))


    return x.buf
}

func (m* TLPrivacyKeyPhoneCall) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// privacyKeyPhoneP2P#39491cc8 = PrivacyKey;
func (m *TLPrivacyKeyPhoneP2P) To_PrivacyKey() *PrivacyKey {
    return &PrivacyKey{
        Constructor: TLConstructor_CRC32_privacyKeyPhoneP2P,
        Data2: m.Data2,
    }
}



func NewTLPrivacyKeyPhoneP2P() * TLPrivacyKeyPhoneP2P {
    return &TLPrivacyKeyPhoneP2P{ Data2: &PrivacyKey_Data{} }
}

func (m* TLPrivacyKeyPhoneP2P) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_privacyKeyPhoneP2P))


    return x.buf
}

func (m* TLPrivacyKeyPhoneP2P) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// privacyKeyForwards#69ec56a3 = PrivacyKey;
func (m *TLPrivacyKeyForwards) To_PrivacyKey() *PrivacyKey {
    return &PrivacyKey{
        Constructor: TLConstructor_CRC32_privacyKeyForwards,
        Data2: m.Data2,
    }
}



func NewTLPrivacyKeyForwards() * TLPrivacyKeyForwards {
    return &TLPrivacyKeyForwards{ Data2: &PrivacyKey_Data{} }
}

func (m* TLPrivacyKeyForwards) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_privacyKeyForwards))


    return x.buf
}

func (m* TLPrivacyKeyForwards) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// privacyKeyProfilePhoto#96151fed = PrivacyKey;
func (m *TLPrivacyKeyProfilePhoto) To_PrivacyKey() *PrivacyKey {
    return &PrivacyKey{
        Constructor: TLConstructor_CRC32_privacyKeyProfilePhoto,
        Data2: m.Data2,
    }
}



func NewTLPrivacyKeyProfilePhoto() * TLPrivacyKeyProfilePhoto {
    return &TLPrivacyKeyProfilePhoto{ Data2: &PrivacyKey_Data{} }
}

func (m* TLPrivacyKeyProfilePhoto) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_privacyKeyProfilePhoto))


    return x.buf
}

func (m* TLPrivacyKeyProfilePhoto) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// privacyKeyPhoneNumber#d19ae46d = PrivacyKey;
func (m *TLPrivacyKeyPhoneNumber) To_PrivacyKey() *PrivacyKey {
    return &PrivacyKey{
        Constructor: TLConstructor_CRC32_privacyKeyPhoneNumber,
        Data2: m.Data2,
    }
}



func NewTLPrivacyKeyPhoneNumber() * TLPrivacyKeyPhoneNumber {
    return &TLPrivacyKeyPhoneNumber{ Data2: &PrivacyKey_Data{} }
}

func (m* TLPrivacyKeyPhoneNumber) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_privacyKeyPhoneNumber))


    return x.buf
}

func (m* TLPrivacyKeyPhoneNumber) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// privacyKeyAddedByPhone#42ffd42b = PrivacyKey;
func (m *TLPrivacyKeyAddedByPhone) To_PrivacyKey() *PrivacyKey {
    return &PrivacyKey{
        Constructor: TLConstructor_CRC32_privacyKeyAddedByPhone,
        Data2: m.Data2,
    }
}



func NewTLPrivacyKeyAddedByPhone() * TLPrivacyKeyAddedByPhone {
    return &TLPrivacyKeyAddedByPhone{ Data2: &PrivacyKey_Data{} }
}

func (m* TLPrivacyKeyAddedByPhone) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_privacyKeyAddedByPhone))


    return x.buf
}

func (m* TLPrivacyKeyAddedByPhone) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// UserInfo <--
//  + TL_UserInfo
//

func (m *UserInfo) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_userInfo:
        t := m.To_UserInfo()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *UserInfo) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_userInfo:
        m2 := &TLUserInfo{&UserInfo_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// userInfo#4a571d8d json_content:string = UserInfo;
func (m *UserInfo) To_UserInfo() *TLUserInfo {
    return &TLUserInfo{
        Data2: m.Data2,
    }
}



// userInfo#4a571d8d json_content:string = UserInfo;
func (m *TLUserInfo) To_UserInfo() *UserInfo {
    return &UserInfo{
        Constructor: TLConstructor_CRC32_userInfo,
        Data2: m.Data2,
    }
}


func (m *TLUserInfo) SetJsonContent(v string) { m.Data2.JsonContent = v }
func (m *TLUserInfo) GetJsonContent() string { return m.Data2.JsonContent }


func NewTLUserInfo() * TLUserInfo {
    return &TLUserInfo{ Data2: &UserInfo_Data{} }
}

func (m* TLUserInfo) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_userInfo))

    x.String(m.GetJsonContent())

    return x.buf
}

func (m* TLUserInfo) Decode(dbuf *DecodeBuf) error {
    m.SetJsonContent(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// CodeSettings <--
//  + TL_CodeSettings
//

func (m *CodeSettings) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_codeSettings:
        t := m.To_CodeSettings()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *CodeSettings) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_codeSettings:
        m2 := &TLCodeSettings{&CodeSettings_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// codeSettings#debebe83 flags:# allow_flashcall:flags.0?true current_number:flags.1?true allow_app_hash:flags.4?true = CodeSettings;
func (m *CodeSettings) To_CodeSettings() *TLCodeSettings {
    return &TLCodeSettings{
        Data2: m.Data2,
    }
}



// codeSettings#debebe83 flags:# allow_flashcall:flags.0?true current_number:flags.1?true allow_app_hash:flags.4?true = CodeSettings;
func (m *TLCodeSettings) To_CodeSettings() *CodeSettings {
    return &CodeSettings{
        Constructor: TLConstructor_CRC32_codeSettings,
        Data2: m.Data2,
    }
}


func (m *TLCodeSettings) SetAllowFlashcall(v bool) { m.Data2.AllowFlashcall = v }
func (m *TLCodeSettings) GetAllowFlashcall() bool { return m.Data2.AllowFlashcall }

func (m *TLCodeSettings) SetCurrentNumber(v bool) { m.Data2.CurrentNumber = v }
func (m *TLCodeSettings) GetCurrentNumber() bool { return m.Data2.CurrentNumber }

func (m *TLCodeSettings) SetAllowAppHash(v bool) { m.Data2.AllowAppHash = v }
func (m *TLCodeSettings) GetAllowAppHash() bool { return m.Data2.AllowAppHash }


func NewTLCodeSettings() * TLCodeSettings {
    return &TLCodeSettings{ Data2: &CodeSettings_Data{} }
}

func (m* TLCodeSettings) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_codeSettings))

    // flags
    var flags uint32 = 0
    if m.GetAllowFlashcall() == true { flags |= 1 << 0 }
    if m.GetCurrentNumber() == true { flags |= 1 << 1 }
    if m.GetAllowAppHash() == true { flags |= 1 << 4 }
	x.UInt(flags)

    
    
    

    return x.buf
}

func (m* TLCodeSettings) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetAllowFlashcall(true) }
    if (flags & (1 << 1)) != 0 { m.SetCurrentNumber(true) }
    if (flags & (1 << 4)) != 0 { m.SetAllowAppHash(true) }

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// WallPaperSettings <--
//  + TL_WallPaperSettings
//

func (m *WallPaperSettings) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_wallPaperSettings:
        t := m.To_WallPaperSettings()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *WallPaperSettings) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_wallPaperSettings:
        m2 := &TLWallPaperSettings{&WallPaperSettings_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// wallPaperSettings#5086cf8 flags:# blur:flags.1?true motion:flags.2?true background_color:flags.0?int second_background_color:flags.4?int intensity:flags.3?int rotation:flags.4?int = WallPaperSettings;
func (m *WallPaperSettings) To_WallPaperSettings() *TLWallPaperSettings {
    return &TLWallPaperSettings{
        Data2: m.Data2,
    }
}



// wallPaperSettings#5086cf8 flags:# blur:flags.1?true motion:flags.2?true background_color:flags.0?int second_background_color:flags.4?int intensity:flags.3?int rotation:flags.4?int = WallPaperSettings;
func (m *TLWallPaperSettings) To_WallPaperSettings() *WallPaperSettings {
    return &WallPaperSettings{
        Constructor: TLConstructor_CRC32_wallPaperSettings,
        Data2: m.Data2,
    }
}


func (m *TLWallPaperSettings) SetBlur(v bool) { m.Data2.Blur = v }
func (m *TLWallPaperSettings) GetBlur() bool { return m.Data2.Blur }

func (m *TLWallPaperSettings) SetMotion(v bool) { m.Data2.Motion = v }
func (m *TLWallPaperSettings) GetMotion() bool { return m.Data2.Motion }

func (m *TLWallPaperSettings) SetBackgroundColor(v int32) { m.Data2.BackgroundColor = v }
func (m *TLWallPaperSettings) GetBackgroundColor() int32 { return m.Data2.BackgroundColor }

func (m *TLWallPaperSettings) SetSecondBackgroundColor(v int32) { m.Data2.SecondBackgroundColor = v }
func (m *TLWallPaperSettings) GetSecondBackgroundColor() int32 { return m.Data2.SecondBackgroundColor }

func (m *TLWallPaperSettings) SetIntensity(v int32) { m.Data2.Intensity = v }
func (m *TLWallPaperSettings) GetIntensity() int32 { return m.Data2.Intensity }

func (m *TLWallPaperSettings) SetRotation(v int32) { m.Data2.Rotation = v }
func (m *TLWallPaperSettings) GetRotation() int32 { return m.Data2.Rotation }


func NewTLWallPaperSettings() * TLWallPaperSettings {
    return &TLWallPaperSettings{ Data2: &WallPaperSettings_Data{} }
}

func (m* TLWallPaperSettings) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_wallPaperSettings))

    // flags
    var flags uint32 = 0
    if m.GetBlur() == true { flags |= 1 << 1 }
    if m.GetMotion() == true { flags |= 1 << 2 }
    if m.GetBackgroundColor() != 0 { flags |= 1 << 0 }
    if m.GetSecondBackgroundColor() != 0 { flags |= 1 << 4 }
    if m.GetIntensity() != 0 { flags |= 1 << 3 }
    if m.GetRotation() != 0 { flags |= 1 << 4 }
	x.UInt(flags)

    
    
    if (flags & (1 << 0)) != 0 { x.Int(m.GetBackgroundColor()) }
    if (flags & (1 << 4)) != 0 { x.Int(m.GetSecondBackgroundColor()) }
    if (flags & (1 << 3)) != 0 { x.Int(m.GetIntensity()) }
    if (flags & (1 << 4)) != 0 { x.Int(m.GetRotation()) }

    return x.buf
}

func (m* TLWallPaperSettings) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 1)) != 0 { m.SetBlur(true) }
    if (flags & (1 << 2)) != 0 { m.SetMotion(true) }
    if (flags & (1 << 0)) != 0 { m.SetBackgroundColor(dbuf.Int()) }
    if (flags & (1 << 4)) != 0 { m.SetSecondBackgroundColor(dbuf.Int()) }
    if (flags & (1 << 3)) != 0 { m.SetIntensity(dbuf.Int()) }
    if (flags & (1 << 4)) != 0 { m.SetRotation(dbuf.Int()) }

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// PrivacyRule <--
//  + TL_PrivacyValueAllowContacts
//  + TL_PrivacyValueAllowAll
//  + TL_PrivacyValueAllowUsers
//  + TL_PrivacyValueDisallowContacts
//  + TL_PrivacyValueDisallowAll
//  + TL_PrivacyValueDisallowUsers
//  + TL_PrivacyValueAllowChatParticipants
//  + TL_PrivacyValueDisallowChatParticipants
//

func (m *PrivacyRule) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_privacyValueAllowContacts:
        t := m.To_PrivacyValueAllowContacts()
        return t.Encode()
    case TLConstructor_CRC32_privacyValueAllowAll:
        t := m.To_PrivacyValueAllowAll()
        return t.Encode()
    case TLConstructor_CRC32_privacyValueAllowUsers:
        t := m.To_PrivacyValueAllowUsers()
        return t.Encode()
    case TLConstructor_CRC32_privacyValueDisallowContacts:
        t := m.To_PrivacyValueDisallowContacts()
        return t.Encode()
    case TLConstructor_CRC32_privacyValueDisallowAll:
        t := m.To_PrivacyValueDisallowAll()
        return t.Encode()
    case TLConstructor_CRC32_privacyValueDisallowUsers:
        t := m.To_PrivacyValueDisallowUsers()
        return t.Encode()
    case TLConstructor_CRC32_privacyValueAllowChatParticipants:
        t := m.To_PrivacyValueAllowChatParticipants()
        return t.Encode()
    case TLConstructor_CRC32_privacyValueDisallowChatParticipants:
        t := m.To_PrivacyValueDisallowChatParticipants()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *PrivacyRule) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_privacyValueAllowContacts:
        m2 := &TLPrivacyValueAllowContacts{&PrivacyRule_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_privacyValueAllowAll:
        m2 := &TLPrivacyValueAllowAll{&PrivacyRule_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_privacyValueAllowUsers:
        m2 := &TLPrivacyValueAllowUsers{&PrivacyRule_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_privacyValueDisallowContacts:
        m2 := &TLPrivacyValueDisallowContacts{&PrivacyRule_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_privacyValueDisallowAll:
        m2 := &TLPrivacyValueDisallowAll{&PrivacyRule_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_privacyValueDisallowUsers:
        m2 := &TLPrivacyValueDisallowUsers{&PrivacyRule_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_privacyValueAllowChatParticipants:
        m2 := &TLPrivacyValueAllowChatParticipants{&PrivacyRule_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_privacyValueDisallowChatParticipants:
        m2 := &TLPrivacyValueDisallowChatParticipants{&PrivacyRule_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// privacyValueAllowContacts#fffe1bac = PrivacyRule;
func (m *PrivacyRule) To_PrivacyValueAllowContacts() *TLPrivacyValueAllowContacts {
    return &TLPrivacyValueAllowContacts{
        Data2: m.Data2,
    }
}

// privacyValueAllowAll#65427b82 = PrivacyRule;
func (m *PrivacyRule) To_PrivacyValueAllowAll() *TLPrivacyValueAllowAll {
    return &TLPrivacyValueAllowAll{
        Data2: m.Data2,
    }
}

// privacyValueAllowUsers#4d5bbe0c users:Vector<int> = PrivacyRule;
func (m *PrivacyRule) To_PrivacyValueAllowUsers() *TLPrivacyValueAllowUsers {
    return &TLPrivacyValueAllowUsers{
        Data2: m.Data2,
    }
}

// privacyValueDisallowContacts#f888fa1a = PrivacyRule;
func (m *PrivacyRule) To_PrivacyValueDisallowContacts() *TLPrivacyValueDisallowContacts {
    return &TLPrivacyValueDisallowContacts{
        Data2: m.Data2,
    }
}

// privacyValueDisallowAll#8b73e763 = PrivacyRule;
func (m *PrivacyRule) To_PrivacyValueDisallowAll() *TLPrivacyValueDisallowAll {
    return &TLPrivacyValueDisallowAll{
        Data2: m.Data2,
    }
}

// privacyValueDisallowUsers#c7f49b7 users:Vector<int> = PrivacyRule;
func (m *PrivacyRule) To_PrivacyValueDisallowUsers() *TLPrivacyValueDisallowUsers {
    return &TLPrivacyValueDisallowUsers{
        Data2: m.Data2,
    }
}

// privacyValueAllowChatParticipants#18be796b chats:Vector<int> = PrivacyRule;
func (m *PrivacyRule) To_PrivacyValueAllowChatParticipants() *TLPrivacyValueAllowChatParticipants {
    return &TLPrivacyValueAllowChatParticipants{
        Data2: m.Data2,
    }
}

// privacyValueDisallowChatParticipants#acae0690 chats:Vector<int> = PrivacyRule;
func (m *PrivacyRule) To_PrivacyValueDisallowChatParticipants() *TLPrivacyValueDisallowChatParticipants {
    return &TLPrivacyValueDisallowChatParticipants{
        Data2: m.Data2,
    }
}



// privacyValueAllowContacts#fffe1bac = PrivacyRule;
func (m *TLPrivacyValueAllowContacts) To_PrivacyRule() *PrivacyRule {
    return &PrivacyRule{
        Constructor: TLConstructor_CRC32_privacyValueAllowContacts,
        Data2: m.Data2,
    }
}



func NewTLPrivacyValueAllowContacts() * TLPrivacyValueAllowContacts {
    return &TLPrivacyValueAllowContacts{ Data2: &PrivacyRule_Data{} }
}

func (m* TLPrivacyValueAllowContacts) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_privacyValueAllowContacts))


    return x.buf
}

func (m* TLPrivacyValueAllowContacts) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// privacyValueAllowAll#65427b82 = PrivacyRule;
func (m *TLPrivacyValueAllowAll) To_PrivacyRule() *PrivacyRule {
    return &PrivacyRule{
        Constructor: TLConstructor_CRC32_privacyValueAllowAll,
        Data2: m.Data2,
    }
}



func NewTLPrivacyValueAllowAll() * TLPrivacyValueAllowAll {
    return &TLPrivacyValueAllowAll{ Data2: &PrivacyRule_Data{} }
}

func (m* TLPrivacyValueAllowAll) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_privacyValueAllowAll))


    return x.buf
}

func (m* TLPrivacyValueAllowAll) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// privacyValueAllowUsers#4d5bbe0c users:Vector<int> = PrivacyRule;
func (m *TLPrivacyValueAllowUsers) To_PrivacyRule() *PrivacyRule {
    return &PrivacyRule{
        Constructor: TLConstructor_CRC32_privacyValueAllowUsers,
        Data2: m.Data2,
    }
}


func (m *TLPrivacyValueAllowUsers) SetUsers(v []int32) { m.Data2.Users = v }
func (m *TLPrivacyValueAllowUsers) GetUsers() []int32 { return m.Data2.Users }


func NewTLPrivacyValueAllowUsers() * TLPrivacyValueAllowUsers {
    return &TLPrivacyValueAllowUsers{ Data2: &PrivacyRule_Data{} }
}

func (m* TLPrivacyValueAllowUsers) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_privacyValueAllowUsers))

    x.VectorInt(m.GetUsers())


    return x.buf
}

func (m* TLPrivacyValueAllowUsers) Decode(dbuf *DecodeBuf) error {
    m.SetUsers(dbuf.VectorInt())

    return dbuf.err
}
// privacyValueDisallowContacts#f888fa1a = PrivacyRule;
func (m *TLPrivacyValueDisallowContacts) To_PrivacyRule() *PrivacyRule {
    return &PrivacyRule{
        Constructor: TLConstructor_CRC32_privacyValueDisallowContacts,
        Data2: m.Data2,
    }
}



func NewTLPrivacyValueDisallowContacts() * TLPrivacyValueDisallowContacts {
    return &TLPrivacyValueDisallowContacts{ Data2: &PrivacyRule_Data{} }
}

func (m* TLPrivacyValueDisallowContacts) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_privacyValueDisallowContacts))


    return x.buf
}

func (m* TLPrivacyValueDisallowContacts) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// privacyValueDisallowAll#8b73e763 = PrivacyRule;
func (m *TLPrivacyValueDisallowAll) To_PrivacyRule() *PrivacyRule {
    return &PrivacyRule{
        Constructor: TLConstructor_CRC32_privacyValueDisallowAll,
        Data2: m.Data2,
    }
}



func NewTLPrivacyValueDisallowAll() * TLPrivacyValueDisallowAll {
    return &TLPrivacyValueDisallowAll{ Data2: &PrivacyRule_Data{} }
}

func (m* TLPrivacyValueDisallowAll) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_privacyValueDisallowAll))


    return x.buf
}

func (m* TLPrivacyValueDisallowAll) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// privacyValueDisallowUsers#c7f49b7 users:Vector<int> = PrivacyRule;
func (m *TLPrivacyValueDisallowUsers) To_PrivacyRule() *PrivacyRule {
    return &PrivacyRule{
        Constructor: TLConstructor_CRC32_privacyValueDisallowUsers,
        Data2: m.Data2,
    }
}


func (m *TLPrivacyValueDisallowUsers) SetUsers(v []int32) { m.Data2.Users = v }
func (m *TLPrivacyValueDisallowUsers) GetUsers() []int32 { return m.Data2.Users }


func NewTLPrivacyValueDisallowUsers() * TLPrivacyValueDisallowUsers {
    return &TLPrivacyValueDisallowUsers{ Data2: &PrivacyRule_Data{} }
}

func (m* TLPrivacyValueDisallowUsers) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_privacyValueDisallowUsers))

    x.VectorInt(m.GetUsers())


    return x.buf
}

func (m* TLPrivacyValueDisallowUsers) Decode(dbuf *DecodeBuf) error {
    m.SetUsers(dbuf.VectorInt())

    return dbuf.err
}
// privacyValueAllowChatParticipants#18be796b chats:Vector<int> = PrivacyRule;
func (m *TLPrivacyValueAllowChatParticipants) To_PrivacyRule() *PrivacyRule {
    return &PrivacyRule{
        Constructor: TLConstructor_CRC32_privacyValueAllowChatParticipants,
        Data2: m.Data2,
    }
}


func (m *TLPrivacyValueAllowChatParticipants) SetChats(v []int32) { m.Data2.Chats = v }
func (m *TLPrivacyValueAllowChatParticipants) GetChats() []int32 { return m.Data2.Chats }


func NewTLPrivacyValueAllowChatParticipants() * TLPrivacyValueAllowChatParticipants {
    return &TLPrivacyValueAllowChatParticipants{ Data2: &PrivacyRule_Data{} }
}

func (m* TLPrivacyValueAllowChatParticipants) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_privacyValueAllowChatParticipants))

    x.VectorInt(m.GetChats())


    return x.buf
}

func (m* TLPrivacyValueAllowChatParticipants) Decode(dbuf *DecodeBuf) error {
    m.SetChats(dbuf.VectorInt())

    return dbuf.err
}
// privacyValueDisallowChatParticipants#acae0690 chats:Vector<int> = PrivacyRule;
func (m *TLPrivacyValueDisallowChatParticipants) To_PrivacyRule() *PrivacyRule {
    return &PrivacyRule{
        Constructor: TLConstructor_CRC32_privacyValueDisallowChatParticipants,
        Data2: m.Data2,
    }
}


func (m *TLPrivacyValueDisallowChatParticipants) SetChats(v []int32) { m.Data2.Chats = v }
func (m *TLPrivacyValueDisallowChatParticipants) GetChats() []int32 { return m.Data2.Chats }


func NewTLPrivacyValueDisallowChatParticipants() * TLPrivacyValueDisallowChatParticipants {
    return &TLPrivacyValueDisallowChatParticipants{ Data2: &PrivacyRule_Data{} }
}

func (m* TLPrivacyValueDisallowChatParticipants) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_privacyValueDisallowChatParticipants))

    x.VectorInt(m.GetChats())


    return x.buf
}

func (m* TLPrivacyValueDisallowChatParticipants) Decode(dbuf *DecodeBuf) error {
    m.SetChats(dbuf.VectorInt())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// EmojiKeyword <--
//  + TL_EmojiKeyword
//  + TL_EmojiKeywordDeleted
//

func (m *EmojiKeyword) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_emojiKeyword:
        t := m.To_EmojiKeyword()
        return t.Encode()
    case TLConstructor_CRC32_emojiKeywordDeleted:
        t := m.To_EmojiKeywordDeleted()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *EmojiKeyword) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_emojiKeyword:
        m2 := &TLEmojiKeyword{&EmojiKeyword_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_emojiKeywordDeleted:
        m2 := &TLEmojiKeywordDeleted{&EmojiKeyword_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// emojiKeyword#d5b3b9f9 keyword:string emoticons:Vector<string> = EmojiKeyword;
func (m *EmojiKeyword) To_EmojiKeyword() *TLEmojiKeyword {
    return &TLEmojiKeyword{
        Data2: m.Data2,
    }
}

// emojiKeywordDeleted#236df622 keyword:string emoticons:Vector<string> = EmojiKeyword;
func (m *EmojiKeyword) To_EmojiKeywordDeleted() *TLEmojiKeywordDeleted {
    return &TLEmojiKeywordDeleted{
        Data2: m.Data2,
    }
}



// emojiKeyword#d5b3b9f9 keyword:string emoticons:Vector<string> = EmojiKeyword;
func (m *TLEmojiKeyword) To_EmojiKeyword() *EmojiKeyword {
    return &EmojiKeyword{
        Constructor: TLConstructor_CRC32_emojiKeyword,
        Data2: m.Data2,
    }
}


func (m *TLEmojiKeyword) SetKeyword(v string) { m.Data2.Keyword = v }
func (m *TLEmojiKeyword) GetKeyword() string { return m.Data2.Keyword }

func (m *TLEmojiKeyword) SetEmoticons(v []string) { m.Data2.Emoticons = v }
func (m *TLEmojiKeyword) GetEmoticons() []string { return m.Data2.Emoticons }


func NewTLEmojiKeyword() * TLEmojiKeyword {
    return &TLEmojiKeyword{ Data2: &EmojiKeyword_Data{} }
}

func (m* TLEmojiKeyword) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_emojiKeyword))

    x.String(m.GetKeyword())
    x.VectorString(m.GetEmoticons())


    return x.buf
}

func (m* TLEmojiKeyword) Decode(dbuf *DecodeBuf) error {
    m.SetKeyword(dbuf.String())
    m.SetEmoticons(dbuf.VectorString())

    return dbuf.err
}
// emojiKeywordDeleted#236df622 keyword:string emoticons:Vector<string> = EmojiKeyword;
func (m *TLEmojiKeywordDeleted) To_EmojiKeyword() *EmojiKeyword {
    return &EmojiKeyword{
        Constructor: TLConstructor_CRC32_emojiKeywordDeleted,
        Data2: m.Data2,
    }
}


func (m *TLEmojiKeywordDeleted) SetKeyword(v string) { m.Data2.Keyword = v }
func (m *TLEmojiKeywordDeleted) GetKeyword() string { return m.Data2.Keyword }

func (m *TLEmojiKeywordDeleted) SetEmoticons(v []string) { m.Data2.Emoticons = v }
func (m *TLEmojiKeywordDeleted) GetEmoticons() []string { return m.Data2.Emoticons }


func NewTLEmojiKeywordDeleted() * TLEmojiKeywordDeleted {
    return &TLEmojiKeywordDeleted{ Data2: &EmojiKeyword_Data{} }
}

func (m* TLEmojiKeywordDeleted) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_emojiKeywordDeleted))

    x.String(m.GetKeyword())
    x.VectorString(m.GetEmoticons())


    return x.buf
}

func (m* TLEmojiKeywordDeleted) Decode(dbuf *DecodeBuf) error {
    m.SetKeyword(dbuf.String())
    m.SetEmoticons(dbuf.VectorString())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// PageRelatedArticle <--
//  + TL_PageRelatedArticle
//

func (m *PageRelatedArticle) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_pageRelatedArticle:
        t := m.To_PageRelatedArticle()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *PageRelatedArticle) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_pageRelatedArticle:
        m2 := &TLPageRelatedArticle{&PageRelatedArticle_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// pageRelatedArticle#b390dc08 flags:# url:string webpage_id:long title:flags.0?string description:flags.1?string photo_id:flags.2?long author:flags.3?string published_date:flags.4?int = PageRelatedArticle;
func (m *PageRelatedArticle) To_PageRelatedArticle() *TLPageRelatedArticle {
    return &TLPageRelatedArticle{
        Data2: m.Data2,
    }
}



// pageRelatedArticle#b390dc08 flags:# url:string webpage_id:long title:flags.0?string description:flags.1?string photo_id:flags.2?long author:flags.3?string published_date:flags.4?int = PageRelatedArticle;
func (m *TLPageRelatedArticle) To_PageRelatedArticle() *PageRelatedArticle {
    return &PageRelatedArticle{
        Constructor: TLConstructor_CRC32_pageRelatedArticle,
        Data2: m.Data2,
    }
}


func (m *TLPageRelatedArticle) SetUrl(v string) { m.Data2.Url = v }
func (m *TLPageRelatedArticle) GetUrl() string { return m.Data2.Url }

func (m *TLPageRelatedArticle) SetWebpageId(v int64) { m.Data2.WebpageId = v }
func (m *TLPageRelatedArticle) GetWebpageId() int64 { return m.Data2.WebpageId }

func (m *TLPageRelatedArticle) SetTitle(v string) { m.Data2.Title = v }
func (m *TLPageRelatedArticle) GetTitle() string { return m.Data2.Title }

func (m *TLPageRelatedArticle) SetDescription(v string) { m.Data2.Description = v }
func (m *TLPageRelatedArticle) GetDescription() string { return m.Data2.Description }

func (m *TLPageRelatedArticle) SetPhotoId(v int64) { m.Data2.PhotoId = v }
func (m *TLPageRelatedArticle) GetPhotoId() int64 { return m.Data2.PhotoId }

func (m *TLPageRelatedArticle) SetAuthor(v string) { m.Data2.Author = v }
func (m *TLPageRelatedArticle) GetAuthor() string { return m.Data2.Author }

func (m *TLPageRelatedArticle) SetPublishedDate(v int32) { m.Data2.PublishedDate = v }
func (m *TLPageRelatedArticle) GetPublishedDate() int32 { return m.Data2.PublishedDate }


func NewTLPageRelatedArticle() * TLPageRelatedArticle {
    return &TLPageRelatedArticle{ Data2: &PageRelatedArticle_Data{} }
}

func (m* TLPageRelatedArticle) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageRelatedArticle))

    // flags
    var flags uint32 = 0
    if m.GetTitle() != "" { flags |= 1 << 0 }
    if m.GetDescription() != "" { flags |= 1 << 1 }
    if m.GetPhotoId() != 0 { flags |= 1 << 2 }
    if m.GetAuthor() != "" { flags |= 1 << 3 }
    if m.GetPublishedDate() != 0 { flags |= 1 << 4 }
	x.UInt(flags)

    x.String(m.GetUrl())
    x.Long(m.GetWebpageId())
    if (flags & (1 << 0)) != 0 { x.String(m.GetTitle()) }
    if (flags & (1 << 1)) != 0 { x.String(m.GetDescription()) }
    if (flags & (1 << 2)) != 0 { x.Long(m.GetPhotoId()) }
    if (flags & (1 << 3)) != 0 { x.String(m.GetAuthor()) }
    if (flags & (1 << 4)) != 0 { x.Int(m.GetPublishedDate()) }

    return x.buf
}

func (m* TLPageRelatedArticle) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetUrl(dbuf.String())
    m.SetWebpageId(dbuf.Long())
    if (flags & (1 << 0)) != 0 { m.SetTitle(dbuf.String()) }
    if (flags & (1 << 1)) != 0 { m.SetDescription(dbuf.String()) }
    if (flags & (1 << 2)) != 0 { m.SetPhotoId(dbuf.Long()) }
    if (flags & (1 << 3)) != 0 { m.SetAuthor(dbuf.String()) }
    if (flags & (1 << 4)) != 0 { m.SetPublishedDate(dbuf.Int()) }

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Photo <--
//  + TL_PhotoEmpty
//  + TL_Photo
//  + TL_Photo114
//  + TL_Photo117
//

func (m *Photo) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_photoEmpty:
        t := m.To_PhotoEmpty()
        return t.Encode()
    case TLConstructor_CRC32_photo:
        t := m.To_Photo()
        return t.Encode()
    case TLConstructor_CRC32_photo114:
        t := m.To_Photo114()
        return t.Encode()
    case TLConstructor_CRC32_photo117:
        t := m.To_Photo117()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Photo) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_photoEmpty:
        m2 := &TLPhotoEmpty{&Photo_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_photo:
        m2 := &TLPhoto{&Photo_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_photo114:
        m2 := &TLPhoto114{&Photo_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_photo117:
        m2 := &TLPhoto117{&Photo_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// photoEmpty#2331b22d id:long = Photo;
func (m *Photo) To_PhotoEmpty() *TLPhotoEmpty {
    return &TLPhotoEmpty{
        Data2: m.Data2,
    }
}

// photo#9288dd29 flags:# has_stickers:flags.0?true id:long access_hash:long date:int sizes:Vector<PhotoSize> = Photo;
func (m *Photo) To_Photo() *TLPhoto {
    return &TLPhoto{
        Data2: m.Data2,
    }
}

// photo#d07504a5 flags:# has_stickers:flags.0?true id:long access_hash:long file_reference:bytes date:int sizes:Vector<PhotoSize> dc_id:int = Photo;
func (m *Photo) To_Photo114() *TLPhoto114 {
    return &TLPhoto114{
        Data2: m.Data2,
    }
}

// photo#fb197a65 flags:# has_stickers:flags.0?true id:long access_hash:long file_reference:bytes date:int sizes:Vector<PhotoSize> video_sizes:flags.1?Vector<VideoSize> dc_id:int = Photo;
func (m *Photo) To_Photo117() *TLPhoto117 {
    return &TLPhoto117{
        Data2: m.Data2,
    }
}



// photoEmpty#2331b22d id:long = Photo;
func (m *TLPhotoEmpty) To_Photo() *Photo {
    return &Photo{
        Constructor: TLConstructor_CRC32_photoEmpty,
        Data2: m.Data2,
    }
}


func (m *TLPhotoEmpty) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhotoEmpty) GetId() int64 { return m.Data2.Id }


func NewTLPhotoEmpty() * TLPhotoEmpty {
    return &TLPhotoEmpty{ Data2: &Photo_Data{} }
}

func (m* TLPhotoEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_photoEmpty))

    x.Long(m.GetId())

    return x.buf
}

func (m* TLPhotoEmpty) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())

    return dbuf.err
}
// photo#9288dd29 flags:# has_stickers:flags.0?true id:long access_hash:long date:int sizes:Vector<PhotoSize> = Photo;
func (m *TLPhoto) To_Photo() *Photo {
    return &Photo{
        Constructor: TLConstructor_CRC32_photo,
        Data2: m.Data2,
    }
}


func (m *TLPhoto) SetHasStickers(v bool) { m.Data2.HasStickers = v }
func (m *TLPhoto) GetHasStickers() bool { return m.Data2.HasStickers }

func (m *TLPhoto) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoto) GetId() int64 { return m.Data2.Id }

func (m *TLPhoto) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLPhoto) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLPhoto) SetDate(v int32) { m.Data2.Date = v }
func (m *TLPhoto) GetDate() int32 { return m.Data2.Date }

func (m *TLPhoto) SetSizes(v []*PhotoSize) { m.Data2.Sizes = v }
func (m *TLPhoto) GetSizes() []*PhotoSize { return m.Data2.Sizes }


func NewTLPhoto() * TLPhoto {
    return &TLPhoto{ Data2: &Photo_Data{} }
}

func (m* TLPhoto) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_photo))

    // flags
    var flags uint32 = 0
    if m.GetHasStickers() == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Long(m.GetId())
    x.Long(m.GetAccessHash())
    x.Int(m.GetDate())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetSizes())))
for _, v := range m.GetSizes() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLPhoto) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetHasStickers(true) }
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())
    m.SetDate(dbuf.Int())
    c6 := dbuf.Int()
if c6 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 6, c6)
	return dbuf.err
}
l6 := dbuf.Int()
v6 := make([]*PhotoSize, l6)
for i := int32(0); i < l6; i++ {
	v6[i] = &PhotoSize{}
	v6[i].Decode(dbuf)
}
m.SetSizes(v6)


    return dbuf.err
}
// photo#d07504a5 flags:# has_stickers:flags.0?true id:long access_hash:long file_reference:bytes date:int sizes:Vector<PhotoSize> dc_id:int = Photo;
func (m *TLPhoto114) To_Photo() *Photo {
    return &Photo{
        Constructor: TLConstructor_CRC32_photo114,
        Data2: m.Data2,
    }
}


func (m *TLPhoto114) SetHasStickers(v bool) { m.Data2.HasStickers = v }
func (m *TLPhoto114) GetHasStickers() bool { return m.Data2.HasStickers }

func (m *TLPhoto114) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoto114) GetId() int64 { return m.Data2.Id }

func (m *TLPhoto114) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLPhoto114) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLPhoto114) SetFileReference(v []byte) { m.Data2.FileReference = v }
func (m *TLPhoto114) GetFileReference() []byte { return m.Data2.FileReference }

func (m *TLPhoto114) SetDate(v int32) { m.Data2.Date = v }
func (m *TLPhoto114) GetDate() int32 { return m.Data2.Date }

func (m *TLPhoto114) SetSizes(v []*PhotoSize) { m.Data2.Sizes = v }
func (m *TLPhoto114) GetSizes() []*PhotoSize { return m.Data2.Sizes }

func (m *TLPhoto114) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLPhoto114) GetDcId() int32 { return m.Data2.DcId }


func NewTLPhoto114() * TLPhoto114 {
    return &TLPhoto114{ Data2: &Photo_Data{} }
}

func (m* TLPhoto114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_photo114))

    // flags
    var flags uint32 = 0
    if m.GetHasStickers() == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Long(m.GetId())
    x.Long(m.GetAccessHash())
    x.StringBytes(m.GetFileReference())
    x.Int(m.GetDate())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetSizes())))
for _, v := range m.GetSizes() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(m.GetDcId())

    return x.buf
}

func (m* TLPhoto114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetHasStickers(true) }
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())
    m.SetFileReference(dbuf.StringBytes())
    m.SetDate(dbuf.Int())
    c7 := dbuf.Int()
if c7 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 7, c7)
	return dbuf.err
}
l7 := dbuf.Int()
v7 := make([]*PhotoSize, l7)
for i := int32(0); i < l7; i++ {
	v7[i] = &PhotoSize{}
	v7[i].Decode(dbuf)
}
m.SetSizes(v7)

    m.SetDcId(dbuf.Int())

    return dbuf.err
}
// photo#fb197a65 flags:# has_stickers:flags.0?true id:long access_hash:long file_reference:bytes date:int sizes:Vector<PhotoSize> video_sizes:flags.1?Vector<VideoSize> dc_id:int = Photo;
func (m *TLPhoto117) To_Photo() *Photo {
    return &Photo{
        Constructor: TLConstructor_CRC32_photo117,
        Data2: m.Data2,
    }
}


func (m *TLPhoto117) SetHasStickers(v bool) { m.Data2.HasStickers = v }
func (m *TLPhoto117) GetHasStickers() bool { return m.Data2.HasStickers }

func (m *TLPhoto117) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoto117) GetId() int64 { return m.Data2.Id }

func (m *TLPhoto117) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLPhoto117) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLPhoto117) SetFileReference(v []byte) { m.Data2.FileReference = v }
func (m *TLPhoto117) GetFileReference() []byte { return m.Data2.FileReference }

func (m *TLPhoto117) SetDate(v int32) { m.Data2.Date = v }
func (m *TLPhoto117) GetDate() int32 { return m.Data2.Date }

func (m *TLPhoto117) SetSizes(v []*PhotoSize) { m.Data2.Sizes = v }
func (m *TLPhoto117) GetSizes() []*PhotoSize { return m.Data2.Sizes }

func (m *TLPhoto117) SetVideoSizes(v []*VideoSize) { m.Data2.VideoSizes = v }
func (m *TLPhoto117) GetVideoSizes() []*VideoSize { return m.Data2.VideoSizes }

func (m *TLPhoto117) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLPhoto117) GetDcId() int32 { return m.Data2.DcId }


func NewTLPhoto117() * TLPhoto117 {
    return &TLPhoto117{ Data2: &Photo_Data{} }
}

func (m* TLPhoto117) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_photo117))

    // flags
    var flags uint32 = 0
    if m.GetHasStickers() == true { flags |= 1 << 0 }
    if m.GetVideoSizes() != nil { flags |= 1 << 1 }
	x.UInt(flags)

    
    x.Long(m.GetId())
    x.Long(m.GetAccessHash())
    x.StringBytes(m.GetFileReference())
    x.Int(m.GetDate())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetSizes())))
for _, v := range m.GetSizes() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    if (flags & (1 << 1)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetVideoSizes())))
for _, v := range m.GetVideoSizes() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}
    x.Int(m.GetDcId())

    return x.buf
}

func (m* TLPhoto117) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetHasStickers(true) }
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())
    m.SetFileReference(dbuf.StringBytes())
    m.SetDate(dbuf.Int())
    c7 := dbuf.Int()
if c7 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 7, c7)
	return dbuf.err
}
l7 := dbuf.Int()
v7 := make([]*PhotoSize, l7)
for i := int32(0); i < l7; i++ {
	v7[i] = &PhotoSize{}
	v7[i].Decode(dbuf)
}
m.SetSizes(v7)

    if (flags & (1 << 1)) != 0 {
 c8 := dbuf.Int()
if c8 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 8, c8)
	return dbuf.err
}
l8 := dbuf.Int()
v8 := make([]*VideoSize, l8)
for i := int32(0); i < l8; i++ {
	v8[i] = &VideoSize{}
	v8[i].Decode(dbuf)
}
m.SetVideoSizes(v8)
 
}
    m.SetDcId(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Messages_Chats <--
//  + TL_MessagesChats
//  + TL_MessagesChatsSlice
//

func (m *Messages_Chats) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messages_chats:
        t := m.To_MessagesChats()
        return t.Encode()
    case TLConstructor_CRC32_messages_chatsSlice:
        t := m.To_MessagesChatsSlice()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Messages_Chats) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messages_chats:
        m2 := &TLMessagesChats{&Messages_Chats_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messages_chatsSlice:
        m2 := &TLMessagesChatsSlice{&Messages_Chats_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messages.chats#64ff9fd5 chats:Vector<Chat> = messages.Chats;
func (m *Messages_Chats) To_MessagesChats() *TLMessagesChats {
    return &TLMessagesChats{
        Data2: m.Data2,
    }
}

// messages.chatsSlice#9cd81144 count:int chats:Vector<Chat> = messages.Chats;
func (m *Messages_Chats) To_MessagesChatsSlice() *TLMessagesChatsSlice {
    return &TLMessagesChatsSlice{
        Data2: m.Data2,
    }
}



// messages.chats#64ff9fd5 chats:Vector<Chat> = messages.Chats;
func (m *TLMessagesChats) To_Messages_Chats() *Messages_Chats {
    return &Messages_Chats{
        Constructor: TLConstructor_CRC32_messages_chats,
        Data2: m.Data2,
    }
}


func (m *TLMessagesChats) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesChats) GetChats() []*Chat { return m.Data2.Chats }


func NewTLMessagesChats() * TLMessagesChats {
    return &TLMessagesChats{ Data2: &Messages_Chats_Data{} }
}

func (m* TLMessagesChats) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_chats))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetChats())))
for _, v := range m.GetChats() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLMessagesChats) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*Chat, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &Chat{}
	v1[i].Decode(dbuf)
}
m.SetChats(v1)


    return dbuf.err
}
// messages.chatsSlice#9cd81144 count:int chats:Vector<Chat> = messages.Chats;
func (m *TLMessagesChatsSlice) To_Messages_Chats() *Messages_Chats {
    return &Messages_Chats{
        Constructor: TLConstructor_CRC32_messages_chatsSlice,
        Data2: m.Data2,
    }
}


func (m *TLMessagesChatsSlice) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesChatsSlice) GetCount() int32 { return m.Data2.Count }

func (m *TLMessagesChatsSlice) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesChatsSlice) GetChats() []*Chat { return m.Data2.Chats }


func NewTLMessagesChatsSlice() * TLMessagesChatsSlice {
    return &TLMessagesChatsSlice{ Data2: &Messages_Chats_Data{} }
}

func (m* TLMessagesChatsSlice) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_chatsSlice))

    x.Int(m.GetCount())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetChats())))
for _, v := range m.GetChats() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLMessagesChatsSlice) Decode(dbuf *DecodeBuf) error {
    m.SetCount(dbuf.Int())
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*Chat, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &Chat{}
	v2[i].Decode(dbuf)
}
m.SetChats(v2)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Channels_ChannelParticipant <--
//  + TL_ChannelsChannelParticipant
//

func (m *Channels_ChannelParticipant) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_channels_channelParticipant:
        t := m.To_ChannelsChannelParticipant()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Channels_ChannelParticipant) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_channels_channelParticipant:
        m2 := &TLChannelsChannelParticipant{&Channels_ChannelParticipant_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// channels.channelParticipant#d0d9b163 participant:ChannelParticipant users:Vector<User> = channels.ChannelParticipant;
func (m *Channels_ChannelParticipant) To_ChannelsChannelParticipant() *TLChannelsChannelParticipant {
    return &TLChannelsChannelParticipant{
        Data2: m.Data2,
    }
}



// channels.channelParticipant#d0d9b163 participant:ChannelParticipant users:Vector<User> = channels.ChannelParticipant;
func (m *TLChannelsChannelParticipant) To_Channels_ChannelParticipant() *Channels_ChannelParticipant {
    return &Channels_ChannelParticipant{
        Constructor: TLConstructor_CRC32_channels_channelParticipant,
        Data2: m.Data2,
    }
}


func (m *TLChannelsChannelParticipant) SetParticipant(v *ChannelParticipant) { m.Data2.Participant = v }
func (m *TLChannelsChannelParticipant) GetParticipant() *ChannelParticipant { return m.Data2.Participant }

func (m *TLChannelsChannelParticipant) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLChannelsChannelParticipant) GetUsers() []*User { return m.Data2.Users }


func NewTLChannelsChannelParticipant() * TLChannelsChannelParticipant {
    return &TLChannelsChannelParticipant{ Data2: &Channels_ChannelParticipant_Data{} }
}

func (m* TLChannelsChannelParticipant) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channels_channelParticipant))

    x.Bytes(m.GetParticipant().Encode())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLChannelsChannelParticipant) Decode(dbuf *DecodeBuf) error {
    m1 := &ChannelParticipant{}
    m1.Decode(dbuf)
    m.SetParticipant(m1)
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*User, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &User{}
	v2[i].Decode(dbuf)
}
m.SetUsers(v2)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Messages_HighScores <--
//  + TL_MessagesHighScores
//

func (m *Messages_HighScores) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messages_highScores:
        t := m.To_MessagesHighScores()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Messages_HighScores) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messages_highScores:
        m2 := &TLMessagesHighScores{&Messages_HighScores_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messages.highScores#9a3bfd99 scores:Vector<HighScore> users:Vector<User> = messages.HighScores;
func (m *Messages_HighScores) To_MessagesHighScores() *TLMessagesHighScores {
    return &TLMessagesHighScores{
        Data2: m.Data2,
    }
}



// messages.highScores#9a3bfd99 scores:Vector<HighScore> users:Vector<User> = messages.HighScores;
func (m *TLMessagesHighScores) To_Messages_HighScores() *Messages_HighScores {
    return &Messages_HighScores{
        Constructor: TLConstructor_CRC32_messages_highScores,
        Data2: m.Data2,
    }
}


func (m *TLMessagesHighScores) SetScores(v []*HighScore) { m.Data2.Scores = v }
func (m *TLMessagesHighScores) GetScores() []*HighScore { return m.Data2.Scores }

func (m *TLMessagesHighScores) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesHighScores) GetUsers() []*User { return m.Data2.Users }


func NewTLMessagesHighScores() * TLMessagesHighScores {
    return &TLMessagesHighScores{ Data2: &Messages_HighScores_Data{} }
}

func (m* TLMessagesHighScores) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_highScores))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetScores())))
for _, v := range m.GetScores() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLMessagesHighScores) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*HighScore, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &HighScore{}
	v1[i].Decode(dbuf)
}
m.SetScores(v1)

    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*User, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &User{}
	v2[i].Decode(dbuf)
}
m.SetUsers(v2)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Payments_ValidatedRequestedInfo <--
//  + TL_PaymentsValidatedRequestedInfo
//

func (m *Payments_ValidatedRequestedInfo) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_payments_validatedRequestedInfo:
        t := m.To_PaymentsValidatedRequestedInfo()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Payments_ValidatedRequestedInfo) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_payments_validatedRequestedInfo:
        m2 := &TLPaymentsValidatedRequestedInfo{&Payments_ValidatedRequestedInfo_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// payments.validatedRequestedInfo#d1451883 flags:# id:flags.0?string shipping_options:flags.1?Vector<ShippingOption> = payments.ValidatedRequestedInfo;
func (m *Payments_ValidatedRequestedInfo) To_PaymentsValidatedRequestedInfo() *TLPaymentsValidatedRequestedInfo {
    return &TLPaymentsValidatedRequestedInfo{
        Data2: m.Data2,
    }
}



// payments.validatedRequestedInfo#d1451883 flags:# id:flags.0?string shipping_options:flags.1?Vector<ShippingOption> = payments.ValidatedRequestedInfo;
func (m *TLPaymentsValidatedRequestedInfo) To_Payments_ValidatedRequestedInfo() *Payments_ValidatedRequestedInfo {
    return &Payments_ValidatedRequestedInfo{
        Constructor: TLConstructor_CRC32_payments_validatedRequestedInfo,
        Data2: m.Data2,
    }
}


func (m *TLPaymentsValidatedRequestedInfo) SetId(v string) { m.Data2.Id = v }
func (m *TLPaymentsValidatedRequestedInfo) GetId() string { return m.Data2.Id }

func (m *TLPaymentsValidatedRequestedInfo) SetShippingOptions(v []*ShippingOption) { m.Data2.ShippingOptions = v }
func (m *TLPaymentsValidatedRequestedInfo) GetShippingOptions() []*ShippingOption { return m.Data2.ShippingOptions }


func NewTLPaymentsValidatedRequestedInfo() * TLPaymentsValidatedRequestedInfo {
    return &TLPaymentsValidatedRequestedInfo{ Data2: &Payments_ValidatedRequestedInfo_Data{} }
}

func (m* TLPaymentsValidatedRequestedInfo) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_payments_validatedRequestedInfo))

    // flags
    var flags uint32 = 0
    if m.GetId() != "" { flags |= 1 << 0 }
    if m.GetShippingOptions() != nil { flags |= 1 << 1 }
	x.UInt(flags)

    if (flags & (1 << 0)) != 0 { x.String(m.GetId()) }
    if (flags & (1 << 1)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetShippingOptions())))
for _, v := range m.GetShippingOptions() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}

    return x.buf
}

func (m* TLPaymentsValidatedRequestedInfo) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetId(dbuf.String()) }
    if (flags & (1 << 1)) != 0 {
 c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*ShippingOption, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &ShippingOption{}
	v3[i].Decode(dbuf)
}
m.SetShippingOptions(v3)
 
}

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// EnvelopeInfo <--
//  + TL_EnvelopeInfo
//

func (m *EnvelopeInfo) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_envelopeInfo:
        t := m.To_EnvelopeInfo()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *EnvelopeInfo) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_envelopeInfo:
        m2 := &TLEnvelopeInfo{&EnvelopeInfo_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// envelopeInfo#e7f9e063 eid:long access_hash:long from_uid:int type:int total_count:int total_points:int remain_count:int remain_points:int created_at:int lastpickeded_at:int back_points:int expired_at:int grab_list:Vector<EnvelopeItem>  = EnvelopeInfo;
func (m *EnvelopeInfo) To_EnvelopeInfo() *TLEnvelopeInfo {
    return &TLEnvelopeInfo{
        Data2: m.Data2,
    }
}



// envelopeInfo#e7f9e063 eid:long access_hash:long from_uid:int type:int total_count:int total_points:int remain_count:int remain_points:int created_at:int lastpickeded_at:int back_points:int expired_at:int grab_list:Vector<EnvelopeItem>  = EnvelopeInfo;
func (m *TLEnvelopeInfo) To_EnvelopeInfo() *EnvelopeInfo {
    return &EnvelopeInfo{
        Constructor: TLConstructor_CRC32_envelopeInfo,
        Data2: m.Data2,
    }
}


func (m *TLEnvelopeInfo) SetEid(v int64) { m.Data2.Eid = v }
func (m *TLEnvelopeInfo) GetEid() int64 { return m.Data2.Eid }

func (m *TLEnvelopeInfo) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLEnvelopeInfo) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLEnvelopeInfo) SetFromUid(v int32) { m.Data2.FromUid = v }
func (m *TLEnvelopeInfo) GetFromUid() int32 { return m.Data2.FromUid }

func (m *TLEnvelopeInfo) SetType(v int32) { m.Data2.Type = v }
func (m *TLEnvelopeInfo) GetType() int32 { return m.Data2.Type }

func (m *TLEnvelopeInfo) SetTotalCount(v int32) { m.Data2.TotalCount = v }
func (m *TLEnvelopeInfo) GetTotalCount() int32 { return m.Data2.TotalCount }

func (m *TLEnvelopeInfo) SetTotalPoints(v int32) { m.Data2.TotalPoints = v }
func (m *TLEnvelopeInfo) GetTotalPoints() int32 { return m.Data2.TotalPoints }

func (m *TLEnvelopeInfo) SetRemainCount(v int32) { m.Data2.RemainCount = v }
func (m *TLEnvelopeInfo) GetRemainCount() int32 { return m.Data2.RemainCount }

func (m *TLEnvelopeInfo) SetRemainPoints(v int32) { m.Data2.RemainPoints = v }
func (m *TLEnvelopeInfo) GetRemainPoints() int32 { return m.Data2.RemainPoints }

func (m *TLEnvelopeInfo) SetCreatedAt(v int32) { m.Data2.CreatedAt = v }
func (m *TLEnvelopeInfo) GetCreatedAt() int32 { return m.Data2.CreatedAt }

func (m *TLEnvelopeInfo) SetLastpickededAt(v int32) { m.Data2.LastpickededAt = v }
func (m *TLEnvelopeInfo) GetLastpickededAt() int32 { return m.Data2.LastpickededAt }

func (m *TLEnvelopeInfo) SetBackPoints(v int32) { m.Data2.BackPoints = v }
func (m *TLEnvelopeInfo) GetBackPoints() int32 { return m.Data2.BackPoints }

func (m *TLEnvelopeInfo) SetExpiredAt(v int32) { m.Data2.ExpiredAt = v }
func (m *TLEnvelopeInfo) GetExpiredAt() int32 { return m.Data2.ExpiredAt }

func (m *TLEnvelopeInfo) SetGrabList(v []*EnvelopeItem) { m.Data2.GrabList = v }
func (m *TLEnvelopeInfo) GetGrabList() []*EnvelopeItem { return m.Data2.GrabList }


func NewTLEnvelopeInfo() * TLEnvelopeInfo {
    return &TLEnvelopeInfo{ Data2: &EnvelopeInfo_Data{} }
}

func (m* TLEnvelopeInfo) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_envelopeInfo))

    x.Long(m.GetEid())
    x.Long(m.GetAccessHash())
    x.Int(m.GetFromUid())
    x.Int(m.GetType())
    x.Int(m.GetTotalCount())
    x.Int(m.GetTotalPoints())
    x.Int(m.GetRemainCount())
    x.Int(m.GetRemainPoints())
    x.Int(m.GetCreatedAt())
    x.Int(m.GetLastpickededAt())
    x.Int(m.GetBackPoints())
    x.Int(m.GetExpiredAt())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetGrabList())))
for _, v := range m.GetGrabList() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLEnvelopeInfo) Decode(dbuf *DecodeBuf) error {
    m.SetEid(dbuf.Long())
    m.SetAccessHash(dbuf.Long())
    m.SetFromUid(dbuf.Int())
    m.SetType(dbuf.Int())
    m.SetTotalCount(dbuf.Int())
    m.SetTotalPoints(dbuf.Int())
    m.SetRemainCount(dbuf.Int())
    m.SetRemainPoints(dbuf.Int())
    m.SetCreatedAt(dbuf.Int())
    m.SetLastpickededAt(dbuf.Int())
    m.SetBackPoints(dbuf.Int())
    m.SetExpiredAt(dbuf.Int())
    c13 := dbuf.Int()
if c13 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 13, c13)
	return dbuf.err
}
l13 := dbuf.Int()
v13 := make([]*EnvelopeItem, l13)
for i := int32(0); i < l13; i++ {
	v13[i] = &EnvelopeItem{}
	v13[i].Decode(dbuf)
}
m.SetGrabList(v13)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// DialogPeer <--
//  + TL_DialogPeer
//  + TL_DialogPeerFolder
//

func (m *DialogPeer) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_dialogPeer:
        t := m.To_DialogPeer()
        return t.Encode()
    case TLConstructor_CRC32_dialogPeerFolder:
        t := m.To_DialogPeerFolder()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *DialogPeer) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_dialogPeer:
        m2 := &TLDialogPeer{&DialogPeer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_dialogPeerFolder:
        m2 := &TLDialogPeerFolder{&DialogPeer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// dialogPeer#e56dbf05 peer:Peer = DialogPeer;
func (m *DialogPeer) To_DialogPeer() *TLDialogPeer {
    return &TLDialogPeer{
        Data2: m.Data2,
    }
}

// dialogPeerFolder#514519e2 folder_id:int = DialogPeer;
func (m *DialogPeer) To_DialogPeerFolder() *TLDialogPeerFolder {
    return &TLDialogPeerFolder{
        Data2: m.Data2,
    }
}



// dialogPeer#e56dbf05 peer:Peer = DialogPeer;
func (m *TLDialogPeer) To_DialogPeer() *DialogPeer {
    return &DialogPeer{
        Constructor: TLConstructor_CRC32_dialogPeer,
        Data2: m.Data2,
    }
}


func (m *TLDialogPeer) SetPeer(v *Peer) { m.Data2.Peer = v }
func (m *TLDialogPeer) GetPeer() *Peer { return m.Data2.Peer }


func NewTLDialogPeer() * TLDialogPeer {
    return &TLDialogPeer{ Data2: &DialogPeer_Data{} }
}

func (m* TLDialogPeer) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_dialogPeer))

    x.Bytes(m.GetPeer().Encode())

    return x.buf
}

func (m* TLDialogPeer) Decode(dbuf *DecodeBuf) error {
    m1 := &Peer{}
    m1.Decode(dbuf)
    m.SetPeer(m1)

    return dbuf.err
}
// dialogPeerFolder#514519e2 folder_id:int = DialogPeer;
func (m *TLDialogPeerFolder) To_DialogPeer() *DialogPeer {
    return &DialogPeer{
        Constructor: TLConstructor_CRC32_dialogPeerFolder,
        Data2: m.Data2,
    }
}


func (m *TLDialogPeerFolder) SetFolderId(v int32) { m.Data2.FolderId = v }
func (m *TLDialogPeerFolder) GetFolderId() int32 { return m.Data2.FolderId }


func NewTLDialogPeerFolder() * TLDialogPeerFolder {
    return &TLDialogPeerFolder{ Data2: &DialogPeer_Data{} }
}

func (m* TLDialogPeerFolder) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_dialogPeerFolder))

    x.Int(m.GetFolderId())

    return x.buf
}

func (m* TLDialogPeerFolder) Decode(dbuf *DecodeBuf) error {
    m.SetFolderId(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// StatsGroupTopAdmin <--
//  + TL_StatsGroupTopAdmin
//

func (m *StatsGroupTopAdmin) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_statsGroupTopAdmin:
        t := m.To_StatsGroupTopAdmin()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *StatsGroupTopAdmin) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_statsGroupTopAdmin:
        m2 := &TLStatsGroupTopAdmin{&StatsGroupTopAdmin_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// statsGroupTopAdmin#6014f412 user_id:int deleted:int kicked:int banned:int = StatsGroupTopAdmin;
func (m *StatsGroupTopAdmin) To_StatsGroupTopAdmin() *TLStatsGroupTopAdmin {
    return &TLStatsGroupTopAdmin{
        Data2: m.Data2,
    }
}



// statsGroupTopAdmin#6014f412 user_id:int deleted:int kicked:int banned:int = StatsGroupTopAdmin;
func (m *TLStatsGroupTopAdmin) To_StatsGroupTopAdmin() *StatsGroupTopAdmin {
    return &StatsGroupTopAdmin{
        Constructor: TLConstructor_CRC32_statsGroupTopAdmin,
        Data2: m.Data2,
    }
}


func (m *TLStatsGroupTopAdmin) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLStatsGroupTopAdmin) GetUserId() int32 { return m.Data2.UserId }

func (m *TLStatsGroupTopAdmin) SetDeleted(v int32) { m.Data2.Deleted = v }
func (m *TLStatsGroupTopAdmin) GetDeleted() int32 { return m.Data2.Deleted }

func (m *TLStatsGroupTopAdmin) SetKicked(v int32) { m.Data2.Kicked = v }
func (m *TLStatsGroupTopAdmin) GetKicked() int32 { return m.Data2.Kicked }

func (m *TLStatsGroupTopAdmin) SetBanned(v int32) { m.Data2.Banned = v }
func (m *TLStatsGroupTopAdmin) GetBanned() int32 { return m.Data2.Banned }


func NewTLStatsGroupTopAdmin() * TLStatsGroupTopAdmin {
    return &TLStatsGroupTopAdmin{ Data2: &StatsGroupTopAdmin_Data{} }
}

func (m* TLStatsGroupTopAdmin) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_statsGroupTopAdmin))

    x.Int(m.GetUserId())
    x.Int(m.GetDeleted())
    x.Int(m.GetKicked())
    x.Int(m.GetBanned())

    return x.buf
}

func (m* TLStatsGroupTopAdmin) Decode(dbuf *DecodeBuf) error {
    m.SetUserId(dbuf.Int())
    m.SetDeleted(dbuf.Int())
    m.SetKicked(dbuf.Int())
    m.SetBanned(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Null <--
//  + TL_Null
//

func (m *Null) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_null:
        t := m.To_Null()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Null) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_null:
        m2 := &TLNull{&Null_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// null#56730bcc = Null;
func (m *Null) To_Null() *TLNull {
    return &TLNull{
        Data2: m.Data2,
    }
}



// null#56730bcc = Null;
func (m *TLNull) To_Null() *Null {
    return &Null{
        Constructor: TLConstructor_CRC32_null,
        Data2: m.Data2,
    }
}



func NewTLNull() * TLNull {
    return &TLNull{ Data2: &Null_Data{} }
}

func (m* TLNull) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_null))


    return x.buf
}

func (m* TLNull) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// PeerNotifySettings <--
//  + TL_PeerNotifySettingsEmpty
//  + TL_PeerNotifySettings
//  + TL_PeerNotifySettings114
//

func (m *PeerNotifySettings) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_peerNotifySettingsEmpty:
        t := m.To_PeerNotifySettingsEmpty()
        return t.Encode()
    case TLConstructor_CRC32_peerNotifySettings:
        t := m.To_PeerNotifySettings()
        return t.Encode()
    case TLConstructor_CRC32_peerNotifySettings114:
        t := m.To_PeerNotifySettings114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *PeerNotifySettings) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_peerNotifySettingsEmpty:
        m2 := &TLPeerNotifySettingsEmpty{&PeerNotifySettings_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_peerNotifySettings:
        m2 := &TLPeerNotifySettings{&PeerNotifySettings_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_peerNotifySettings114:
        m2 := &TLPeerNotifySettings114{&PeerNotifySettings_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// peerNotifySettingsEmpty#70a68512 = PeerNotifySettings;
func (m *PeerNotifySettings) To_PeerNotifySettingsEmpty() *TLPeerNotifySettingsEmpty {
    return &TLPeerNotifySettingsEmpty{
        Data2: m.Data2,
    }
}

// peerNotifySettings#9acda4c0 flags:# show_previews:flags.0?true silent:flags.1?true mute_until:int sound:string = PeerNotifySettings;
func (m *PeerNotifySettings) To_PeerNotifySettings() *TLPeerNotifySettings {
    return &TLPeerNotifySettings{
        Data2: m.Data2,
    }
}

// peerNotifySettings#af509d20 flags:# show_previews:flags.0?Bool silent:flags.1?Bool mute_until:flags.2?int sound:flags.3?string = PeerNotifySettings;
func (m *PeerNotifySettings) To_PeerNotifySettings114() *TLPeerNotifySettings114 {
    return &TLPeerNotifySettings114{
        Data2: m.Data2,
    }
}



// peerNotifySettingsEmpty#70a68512 = PeerNotifySettings;
func (m *TLPeerNotifySettingsEmpty) To_PeerNotifySettings() *PeerNotifySettings {
    return &PeerNotifySettings{
        Constructor: TLConstructor_CRC32_peerNotifySettingsEmpty,
        Data2: m.Data2,
    }
}



func NewTLPeerNotifySettingsEmpty() * TLPeerNotifySettingsEmpty {
    return &TLPeerNotifySettingsEmpty{ Data2: &PeerNotifySettings_Data{} }
}

func (m* TLPeerNotifySettingsEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_peerNotifySettingsEmpty))


    return x.buf
}

func (m* TLPeerNotifySettingsEmpty) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// peerNotifySettings#9acda4c0 flags:# show_previews:flags.0?true silent:flags.1?true mute_until:int sound:string = PeerNotifySettings;
func (m *TLPeerNotifySettings) To_PeerNotifySettings() *PeerNotifySettings {
    return &PeerNotifySettings{
        Constructor: TLConstructor_CRC32_peerNotifySettings,
        Data2: m.Data2,
    }
}


func (m *TLPeerNotifySettings) SetShowPreviews(v bool) { m.Data2.ShowPreviews_1 = v }
func (m *TLPeerNotifySettings) GetShowPreviews() bool { return m.Data2.ShowPreviews_1 }

func (m *TLPeerNotifySettings) SetSilent(v bool) { m.Data2.Silent_2 = v }
func (m *TLPeerNotifySettings) GetSilent() bool { return m.Data2.Silent_2 }

func (m *TLPeerNotifySettings) SetMuteUntil(v int32) { m.Data2.MuteUntil = v }
func (m *TLPeerNotifySettings) GetMuteUntil() int32 { return m.Data2.MuteUntil }

func (m *TLPeerNotifySettings) SetSound(v string) { m.Data2.Sound = v }
func (m *TLPeerNotifySettings) GetSound() string { return m.Data2.Sound }


func NewTLPeerNotifySettings() * TLPeerNotifySettings {
    return &TLPeerNotifySettings{ Data2: &PeerNotifySettings_Data{} }
}

func (m* TLPeerNotifySettings) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_peerNotifySettings))

    // flags
    var flags uint32 = 0
    if m.GetShowPreviews() == true { flags |= 1 << 0 }
    if m.GetSilent() == true { flags |= 1 << 1 }
	x.UInt(flags)

    
    
    x.Int(m.GetMuteUntil())
    x.String(m.GetSound())

    return x.buf
}

func (m* TLPeerNotifySettings) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetShowPreviews(true) }
    if (flags & (1 << 1)) != 0 { m.SetSilent(true) }
    m.SetMuteUntil(dbuf.Int())
    m.SetSound(dbuf.String())

    return dbuf.err
}
// peerNotifySettings#af509d20 flags:# show_previews:flags.0?Bool silent:flags.1?Bool mute_until:flags.2?int sound:flags.3?string = PeerNotifySettings;
func (m *TLPeerNotifySettings114) To_PeerNotifySettings() *PeerNotifySettings {
    return &PeerNotifySettings{
        Constructor: TLConstructor_CRC32_peerNotifySettings114,
        Data2: m.Data2,
    }
}


func (m *TLPeerNotifySettings114) SetShowPreviews(v *Bool) { m.Data2.ShowPreviews_5 = v }
func (m *TLPeerNotifySettings114) GetShowPreviews() *Bool { return m.Data2.ShowPreviews_5 }

func (m *TLPeerNotifySettings114) SetSilent(v *Bool) { m.Data2.Silent_6 = v }
func (m *TLPeerNotifySettings114) GetSilent() *Bool { return m.Data2.Silent_6 }

func (m *TLPeerNotifySettings114) SetMuteUntil(v int32) { m.Data2.MuteUntil = v }
func (m *TLPeerNotifySettings114) GetMuteUntil() int32 { return m.Data2.MuteUntil }

func (m *TLPeerNotifySettings114) SetSound(v string) { m.Data2.Sound = v }
func (m *TLPeerNotifySettings114) GetSound() string { return m.Data2.Sound }


func NewTLPeerNotifySettings114() * TLPeerNotifySettings114 {
    return &TLPeerNotifySettings114{ Data2: &PeerNotifySettings_Data{} }
}

func (m* TLPeerNotifySettings114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_peerNotifySettings114))

    // flags
    var flags uint32 = 0
    if m.GetShowPreviews() != nil { flags |= 1 << 0 }
    if m.GetSilent() != nil { flags |= 1 << 1 }
    if m.GetMuteUntil() != 0 { flags |= 1 << 2 }
    if m.GetSound() != "" { flags |= 1 << 3 }
	x.UInt(flags)

    if (flags & (1 << 0)) != 0 { x.Bytes(m.GetShowPreviews().Encode()) }
    if (flags & (1 << 1)) != 0 { x.Bytes(m.GetSilent().Encode()) }
    if (flags & (1 << 2)) != 0 { x.Int(m.GetMuteUntil()) }
    if (flags & (1 << 3)) != 0 { x.String(m.GetSound()) }

    return x.buf
}

func (m* TLPeerNotifySettings114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 {
 m2 := &Bool{}
    m2.Decode(dbuf)
    m.SetShowPreviews(m2) 
}
    if (flags & (1 << 1)) != 0 {
 m3 := &Bool{}
    m3.Decode(dbuf)
    m.SetSilent(m3) 
}
    if (flags & (1 << 2)) != 0 { m.SetMuteUntil(dbuf.Int()) }
    if (flags & (1 << 3)) != 0 { m.SetSound(dbuf.String()) }

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// CdnConfig <--
//  + TL_CdnConfig
//

func (m *CdnConfig) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_cdnConfig:
        t := m.To_CdnConfig()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *CdnConfig) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_cdnConfig:
        m2 := &TLCdnConfig{&CdnConfig_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// cdnConfig#5725e40a public_keys:Vector<CdnPublicKey> = CdnConfig;
func (m *CdnConfig) To_CdnConfig() *TLCdnConfig {
    return &TLCdnConfig{
        Data2: m.Data2,
    }
}



// cdnConfig#5725e40a public_keys:Vector<CdnPublicKey> = CdnConfig;
func (m *TLCdnConfig) To_CdnConfig() *CdnConfig {
    return &CdnConfig{
        Constructor: TLConstructor_CRC32_cdnConfig,
        Data2: m.Data2,
    }
}


func (m *TLCdnConfig) SetPublicKeys(v []*CdnPublicKey) { m.Data2.PublicKeys = v }
func (m *TLCdnConfig) GetPublicKeys() []*CdnPublicKey { return m.Data2.PublicKeys }


func NewTLCdnConfig() * TLCdnConfig {
    return &TLCdnConfig{ Data2: &CdnConfig_Data{} }
}

func (m* TLCdnConfig) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_cdnConfig))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetPublicKeys())))
for _, v := range m.GetPublicKeys() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLCdnConfig) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*CdnPublicKey, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &CdnPublicKey{}
	v1[i].Decode(dbuf)
}
m.SetPublicKeys(v1)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// FileHash <--
//  + TL_FileHash
//

func (m *FileHash) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_fileHash:
        t := m.To_FileHash()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *FileHash) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_fileHash:
        m2 := &TLFileHash{&FileHash_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// fileHash#6242c773 offset:int limit:int hash:bytes = FileHash;
func (m *FileHash) To_FileHash() *TLFileHash {
    return &TLFileHash{
        Data2: m.Data2,
    }
}



// fileHash#6242c773 offset:int limit:int hash:bytes = FileHash;
func (m *TLFileHash) To_FileHash() *FileHash {
    return &FileHash{
        Constructor: TLConstructor_CRC32_fileHash,
        Data2: m.Data2,
    }
}


func (m *TLFileHash) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLFileHash) GetOffset() int32 { return m.Data2.Offset }

func (m *TLFileHash) SetLimit(v int32) { m.Data2.Limit = v }
func (m *TLFileHash) GetLimit() int32 { return m.Data2.Limit }

func (m *TLFileHash) SetHash(v []byte) { m.Data2.Hash = v }
func (m *TLFileHash) GetHash() []byte { return m.Data2.Hash }


func NewTLFileHash() * TLFileHash {
    return &TLFileHash{ Data2: &FileHash_Data{} }
}

func (m* TLFileHash) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_fileHash))

    x.Int(m.GetOffset())
    x.Int(m.GetLimit())
    x.StringBytes(m.GetHash())

    return x.buf
}

func (m* TLFileHash) Decode(dbuf *DecodeBuf) error {
    m.SetOffset(dbuf.Int())
    m.SetLimit(dbuf.Int())
    m.SetHash(dbuf.StringBytes())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// PageListOrderedItem <--
//  + TL_PageListOrderedItemText
//  + TL_PageListOrderedItemBlocks
//

func (m *PageListOrderedItem) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_pageListOrderedItemText:
        t := m.To_PageListOrderedItemText()
        return t.Encode()
    case TLConstructor_CRC32_pageListOrderedItemBlocks:
        t := m.To_PageListOrderedItemBlocks()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *PageListOrderedItem) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_pageListOrderedItemText:
        m2 := &TLPageListOrderedItemText{&PageListOrderedItem_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageListOrderedItemBlocks:
        m2 := &TLPageListOrderedItemBlocks{&PageListOrderedItem_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// pageListOrderedItemText#5e068047 num:string text:RichText = PageListOrderedItem;
func (m *PageListOrderedItem) To_PageListOrderedItemText() *TLPageListOrderedItemText {
    return &TLPageListOrderedItemText{
        Data2: m.Data2,
    }
}

// pageListOrderedItemBlocks#98dd8936 num:string blocks:Vector<PageBlock> = PageListOrderedItem;
func (m *PageListOrderedItem) To_PageListOrderedItemBlocks() *TLPageListOrderedItemBlocks {
    return &TLPageListOrderedItemBlocks{
        Data2: m.Data2,
    }
}



// pageListOrderedItemText#5e068047 num:string text:RichText = PageListOrderedItem;
func (m *TLPageListOrderedItemText) To_PageListOrderedItem() *PageListOrderedItem {
    return &PageListOrderedItem{
        Constructor: TLConstructor_CRC32_pageListOrderedItemText,
        Data2: m.Data2,
    }
}


func (m *TLPageListOrderedItemText) SetNum(v string) { m.Data2.Num = v }
func (m *TLPageListOrderedItemText) GetNum() string { return m.Data2.Num }

func (m *TLPageListOrderedItemText) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageListOrderedItemText) GetText() *RichText { return m.Data2.Text }


func NewTLPageListOrderedItemText() * TLPageListOrderedItemText {
    return &TLPageListOrderedItemText{ Data2: &PageListOrderedItem_Data{} }
}

func (m* TLPageListOrderedItemText) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageListOrderedItemText))

    x.String(m.GetNum())
    x.Bytes(m.GetText().Encode())

    return x.buf
}

func (m* TLPageListOrderedItemText) Decode(dbuf *DecodeBuf) error {
    m.SetNum(dbuf.String())
    m2 := &RichText{}
    m2.Decode(dbuf)
    m.SetText(m2)

    return dbuf.err
}
// pageListOrderedItemBlocks#98dd8936 num:string blocks:Vector<PageBlock> = PageListOrderedItem;
func (m *TLPageListOrderedItemBlocks) To_PageListOrderedItem() *PageListOrderedItem {
    return &PageListOrderedItem{
        Constructor: TLConstructor_CRC32_pageListOrderedItemBlocks,
        Data2: m.Data2,
    }
}


func (m *TLPageListOrderedItemBlocks) SetNum(v string) { m.Data2.Num = v }
func (m *TLPageListOrderedItemBlocks) GetNum() string { return m.Data2.Num }

func (m *TLPageListOrderedItemBlocks) SetBlocks(v []*PageBlock) { m.Data2.Blocks = v }
func (m *TLPageListOrderedItemBlocks) GetBlocks() []*PageBlock { return m.Data2.Blocks }


func NewTLPageListOrderedItemBlocks() * TLPageListOrderedItemBlocks {
    return &TLPageListOrderedItemBlocks{ Data2: &PageListOrderedItem_Data{} }
}

func (m* TLPageListOrderedItemBlocks) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageListOrderedItemBlocks))

    x.String(m.GetNum())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetBlocks())))
for _, v := range m.GetBlocks() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLPageListOrderedItemBlocks) Decode(dbuf *DecodeBuf) error {
    m.SetNum(dbuf.String())
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*PageBlock, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &PageBlock{}
	v2[i].Decode(dbuf)
}
m.SetBlocks(v2)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputChatPhoto <--
//  + TL_InputChatPhotoEmpty
//  + TL_InputChatUploadedPhoto
//  + TL_InputChatPhoto
//  + TL_InputChatUploadedPhoto117
//

func (m *InputChatPhoto) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputChatPhotoEmpty:
        t := m.To_InputChatPhotoEmpty()
        return t.Encode()
    case TLConstructor_CRC32_inputChatUploadedPhoto:
        t := m.To_InputChatUploadedPhoto()
        return t.Encode()
    case TLConstructor_CRC32_inputChatPhoto:
        t := m.To_InputChatPhoto()
        return t.Encode()
    case TLConstructor_CRC32_inputChatUploadedPhoto117:
        t := m.To_InputChatUploadedPhoto117()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputChatPhoto) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputChatPhotoEmpty:
        m2 := &TLInputChatPhotoEmpty{&InputChatPhoto_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputChatUploadedPhoto:
        m2 := &TLInputChatUploadedPhoto{&InputChatPhoto_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputChatPhoto:
        m2 := &TLInputChatPhoto{&InputChatPhoto_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputChatUploadedPhoto117:
        m2 := &TLInputChatUploadedPhoto117{&InputChatPhoto_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputChatPhotoEmpty#1ca48f57 = InputChatPhoto;
func (m *InputChatPhoto) To_InputChatPhotoEmpty() *TLInputChatPhotoEmpty {
    return &TLInputChatPhotoEmpty{
        Data2: m.Data2,
    }
}

// inputChatUploadedPhoto#927c55b4 file:InputFile = InputChatPhoto;
func (m *InputChatPhoto) To_InputChatUploadedPhoto() *TLInputChatUploadedPhoto {
    return &TLInputChatUploadedPhoto{
        Data2: m.Data2,
    }
}

// inputChatPhoto#8953ad37 id:InputPhoto = InputChatPhoto;
func (m *InputChatPhoto) To_InputChatPhoto() *TLInputChatPhoto {
    return &TLInputChatPhoto{
        Data2: m.Data2,
    }
}

// inputChatUploadedPhoto#c642724e flags:# file:flags.0?InputFile video:flags.1?InputFile video_start_ts:flags.2?double = InputChatPhoto;
func (m *InputChatPhoto) To_InputChatUploadedPhoto117() *TLInputChatUploadedPhoto117 {
    return &TLInputChatUploadedPhoto117{
        Data2: m.Data2,
    }
}



// inputChatPhotoEmpty#1ca48f57 = InputChatPhoto;
func (m *TLInputChatPhotoEmpty) To_InputChatPhoto() *InputChatPhoto {
    return &InputChatPhoto{
        Constructor: TLConstructor_CRC32_inputChatPhotoEmpty,
        Data2: m.Data2,
    }
}



func NewTLInputChatPhotoEmpty() * TLInputChatPhotoEmpty {
    return &TLInputChatPhotoEmpty{ Data2: &InputChatPhoto_Data{} }
}

func (m* TLInputChatPhotoEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputChatPhotoEmpty))


    return x.buf
}

func (m* TLInputChatPhotoEmpty) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputChatUploadedPhoto#927c55b4 file:InputFile = InputChatPhoto;
func (m *TLInputChatUploadedPhoto) To_InputChatPhoto() *InputChatPhoto {
    return &InputChatPhoto{
        Constructor: TLConstructor_CRC32_inputChatUploadedPhoto,
        Data2: m.Data2,
    }
}


func (m *TLInputChatUploadedPhoto) SetFile(v *InputFile) { m.Data2.File = v }
func (m *TLInputChatUploadedPhoto) GetFile() *InputFile { return m.Data2.File }


func NewTLInputChatUploadedPhoto() * TLInputChatUploadedPhoto {
    return &TLInputChatUploadedPhoto{ Data2: &InputChatPhoto_Data{} }
}

func (m* TLInputChatUploadedPhoto) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputChatUploadedPhoto))

    x.Bytes(m.GetFile().Encode())

    return x.buf
}

func (m* TLInputChatUploadedPhoto) Decode(dbuf *DecodeBuf) error {
    m1 := &InputFile{}
    m1.Decode(dbuf)
    m.SetFile(m1)

    return dbuf.err
}
// inputChatPhoto#8953ad37 id:InputPhoto = InputChatPhoto;
func (m *TLInputChatPhoto) To_InputChatPhoto() *InputChatPhoto {
    return &InputChatPhoto{
        Constructor: TLConstructor_CRC32_inputChatPhoto,
        Data2: m.Data2,
    }
}


func (m *TLInputChatPhoto) SetId(v *InputPhoto) { m.Data2.Id = v }
func (m *TLInputChatPhoto) GetId() *InputPhoto { return m.Data2.Id }


func NewTLInputChatPhoto() * TLInputChatPhoto {
    return &TLInputChatPhoto{ Data2: &InputChatPhoto_Data{} }
}

func (m* TLInputChatPhoto) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputChatPhoto))

    x.Bytes(m.GetId().Encode())

    return x.buf
}

func (m* TLInputChatPhoto) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPhoto{}
    m1.Decode(dbuf)
    m.SetId(m1)

    return dbuf.err
}
// inputChatUploadedPhoto#c642724e flags:# file:flags.0?InputFile video:flags.1?InputFile video_start_ts:flags.2?double = InputChatPhoto;
func (m *TLInputChatUploadedPhoto117) To_InputChatPhoto() *InputChatPhoto {
    return &InputChatPhoto{
        Constructor: TLConstructor_CRC32_inputChatUploadedPhoto117,
        Data2: m.Data2,
    }
}


func (m *TLInputChatUploadedPhoto117) SetFile(v *InputFile) { m.Data2.File = v }
func (m *TLInputChatUploadedPhoto117) GetFile() *InputFile { return m.Data2.File }

func (m *TLInputChatUploadedPhoto117) SetVideo(v *InputFile) { m.Data2.Video = v }
func (m *TLInputChatUploadedPhoto117) GetVideo() *InputFile { return m.Data2.Video }

func (m *TLInputChatUploadedPhoto117) SetVideoStartTs(v float64) { m.Data2.VideoStartTs = v }
func (m *TLInputChatUploadedPhoto117) GetVideoStartTs() float64 { return m.Data2.VideoStartTs }


func NewTLInputChatUploadedPhoto117() * TLInputChatUploadedPhoto117 {
    return &TLInputChatUploadedPhoto117{ Data2: &InputChatPhoto_Data{} }
}

func (m* TLInputChatUploadedPhoto117) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputChatUploadedPhoto117))

    // flags
    var flags uint32 = 0
    if m.GetFile() != nil { flags |= 1 << 0 }
    if m.GetVideo() != nil { flags |= 1 << 1 }
    if m.GetVideoStartTs() != 0 { flags |= 1 << 2 }
	x.UInt(flags)

    if (flags & (1 << 0)) != 0 { x.Bytes(m.GetFile().Encode()) }
    if (flags & (1 << 1)) != 0 { x.Bytes(m.GetVideo().Encode()) }
    

    return x.buf
}

func (m* TLInputChatUploadedPhoto117) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 {
 m2 := &InputFile{}
    m2.Decode(dbuf)
    m.SetFile(m2) 
}
    if (flags & (1 << 1)) != 0 {
 m3 := &InputFile{}
    m3.Decode(dbuf)
    m.SetVideo(m3) 
}
    

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Messages_Stickers <--
//  + TL_MessagesStickersNotModified
//  + TL_MessagesStickers
//  + TL_MessagesStickers114
//

func (m *Messages_Stickers) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messages_stickersNotModified:
        t := m.To_MessagesStickersNotModified()
        return t.Encode()
    case TLConstructor_CRC32_messages_stickers:
        t := m.To_MessagesStickers()
        return t.Encode()
    case TLConstructor_CRC32_messages_stickers114:
        t := m.To_MessagesStickers114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Messages_Stickers) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messages_stickersNotModified:
        m2 := &TLMessagesStickersNotModified{&Messages_Stickers_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messages_stickers:
        m2 := &TLMessagesStickers{&Messages_Stickers_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messages_stickers114:
        m2 := &TLMessagesStickers114{&Messages_Stickers_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messages.stickersNotModified#f1749a22 = messages.Stickers;
func (m *Messages_Stickers) To_MessagesStickersNotModified() *TLMessagesStickersNotModified {
    return &TLMessagesStickersNotModified{
        Data2: m.Data2,
    }
}

// messages.stickers#8a8ecd32 hash:string stickers:Vector<Document> = messages.Stickers;
func (m *Messages_Stickers) To_MessagesStickers() *TLMessagesStickers {
    return &TLMessagesStickers{
        Data2: m.Data2,
    }
}

// messages.stickers#e4599bbd hash:int stickers:Vector<Document> = messages.Stickers;
func (m *Messages_Stickers) To_MessagesStickers114() *TLMessagesStickers114 {
    return &TLMessagesStickers114{
        Data2: m.Data2,
    }
}



// messages.stickersNotModified#f1749a22 = messages.Stickers;
func (m *TLMessagesStickersNotModified) To_Messages_Stickers() *Messages_Stickers {
    return &Messages_Stickers{
        Constructor: TLConstructor_CRC32_messages_stickersNotModified,
        Data2: m.Data2,
    }
}



func NewTLMessagesStickersNotModified() * TLMessagesStickersNotModified {
    return &TLMessagesStickersNotModified{ Data2: &Messages_Stickers_Data{} }
}

func (m* TLMessagesStickersNotModified) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_stickersNotModified))


    return x.buf
}

func (m* TLMessagesStickersNotModified) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// messages.stickers#8a8ecd32 hash:string stickers:Vector<Document> = messages.Stickers;
func (m *TLMessagesStickers) To_Messages_Stickers() *Messages_Stickers {
    return &Messages_Stickers{
        Constructor: TLConstructor_CRC32_messages_stickers,
        Data2: m.Data2,
    }
}


func (m *TLMessagesStickers) SetHash(v string) { m.Data2.Hash_1 = v }
func (m *TLMessagesStickers) GetHash() string { return m.Data2.Hash_1 }

func (m *TLMessagesStickers) SetStickers(v []*Document) { m.Data2.Stickers = v }
func (m *TLMessagesStickers) GetStickers() []*Document { return m.Data2.Stickers }


func NewTLMessagesStickers() * TLMessagesStickers {
    return &TLMessagesStickers{ Data2: &Messages_Stickers_Data{} }
}

func (m* TLMessagesStickers) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_stickers))

    x.String(m.GetHash())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetStickers())))
for _, v := range m.GetStickers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLMessagesStickers) Decode(dbuf *DecodeBuf) error {
    m.SetHash(dbuf.String())
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*Document, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &Document{}
	v2[i].Decode(dbuf)
}
m.SetStickers(v2)


    return dbuf.err
}
// messages.stickers#e4599bbd hash:int stickers:Vector<Document> = messages.Stickers;
func (m *TLMessagesStickers114) To_Messages_Stickers() *Messages_Stickers {
    return &Messages_Stickers{
        Constructor: TLConstructor_CRC32_messages_stickers114,
        Data2: m.Data2,
    }
}


func (m *TLMessagesStickers114) SetHash(v int32) { m.Data2.Hash_3 = v }
func (m *TLMessagesStickers114) GetHash() int32 { return m.Data2.Hash_3 }

func (m *TLMessagesStickers114) SetStickers(v []*Document) { m.Data2.Stickers = v }
func (m *TLMessagesStickers114) GetStickers() []*Document { return m.Data2.Stickers }


func NewTLMessagesStickers114() * TLMessagesStickers114 {
    return &TLMessagesStickers114{ Data2: &Messages_Stickers_Data{} }
}

func (m* TLMessagesStickers114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_stickers114))

    x.Int(m.GetHash())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetStickers())))
for _, v := range m.GetStickers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLMessagesStickers114) Decode(dbuf *DecodeBuf) error {
    m.SetHash(dbuf.Int())
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*Document, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &Document{}
	v2[i].Decode(dbuf)
}
m.SetStickers(v2)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Auth_SentCodeType <--
//  + TL_AuthSentCodeTypeApp
//  + TL_AuthSentCodeTypeSms
//  + TL_AuthSentCodeTypeCall
//  + TL_AuthSentCodeTypeFlashCall
//

func (m *Auth_SentCodeType) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_auth_sentCodeTypeApp:
        t := m.To_AuthSentCodeTypeApp()
        return t.Encode()
    case TLConstructor_CRC32_auth_sentCodeTypeSms:
        t := m.To_AuthSentCodeTypeSms()
        return t.Encode()
    case TLConstructor_CRC32_auth_sentCodeTypeCall:
        t := m.To_AuthSentCodeTypeCall()
        return t.Encode()
    case TLConstructor_CRC32_auth_sentCodeTypeFlashCall:
        t := m.To_AuthSentCodeTypeFlashCall()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Auth_SentCodeType) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_auth_sentCodeTypeApp:
        m2 := &TLAuthSentCodeTypeApp{&Auth_SentCodeType_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_auth_sentCodeTypeSms:
        m2 := &TLAuthSentCodeTypeSms{&Auth_SentCodeType_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_auth_sentCodeTypeCall:
        m2 := &TLAuthSentCodeTypeCall{&Auth_SentCodeType_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_auth_sentCodeTypeFlashCall:
        m2 := &TLAuthSentCodeTypeFlashCall{&Auth_SentCodeType_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// auth.sentCodeTypeApp#3dbb5986 length:int = auth.SentCodeType;
func (m *Auth_SentCodeType) To_AuthSentCodeTypeApp() *TLAuthSentCodeTypeApp {
    return &TLAuthSentCodeTypeApp{
        Data2: m.Data2,
    }
}

// auth.sentCodeTypeSms#c000bba2 length:int = auth.SentCodeType;
func (m *Auth_SentCodeType) To_AuthSentCodeTypeSms() *TLAuthSentCodeTypeSms {
    return &TLAuthSentCodeTypeSms{
        Data2: m.Data2,
    }
}

// auth.sentCodeTypeCall#5353e5a7 length:int = auth.SentCodeType;
func (m *Auth_SentCodeType) To_AuthSentCodeTypeCall() *TLAuthSentCodeTypeCall {
    return &TLAuthSentCodeTypeCall{
        Data2: m.Data2,
    }
}

// auth.sentCodeTypeFlashCall#ab03c6d9 pattern:string = auth.SentCodeType;
func (m *Auth_SentCodeType) To_AuthSentCodeTypeFlashCall() *TLAuthSentCodeTypeFlashCall {
    return &TLAuthSentCodeTypeFlashCall{
        Data2: m.Data2,
    }
}



// auth.sentCodeTypeApp#3dbb5986 length:int = auth.SentCodeType;
func (m *TLAuthSentCodeTypeApp) To_Auth_SentCodeType() *Auth_SentCodeType {
    return &Auth_SentCodeType{
        Constructor: TLConstructor_CRC32_auth_sentCodeTypeApp,
        Data2: m.Data2,
    }
}


func (m *TLAuthSentCodeTypeApp) SetLength(v int32) { m.Data2.Length = v }
func (m *TLAuthSentCodeTypeApp) GetLength() int32 { return m.Data2.Length }


func NewTLAuthSentCodeTypeApp() * TLAuthSentCodeTypeApp {
    return &TLAuthSentCodeTypeApp{ Data2: &Auth_SentCodeType_Data{} }
}

func (m* TLAuthSentCodeTypeApp) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_auth_sentCodeTypeApp))

    x.Int(m.GetLength())

    return x.buf
}

func (m* TLAuthSentCodeTypeApp) Decode(dbuf *DecodeBuf) error {
    m.SetLength(dbuf.Int())

    return dbuf.err
}
// auth.sentCodeTypeSms#c000bba2 length:int = auth.SentCodeType;
func (m *TLAuthSentCodeTypeSms) To_Auth_SentCodeType() *Auth_SentCodeType {
    return &Auth_SentCodeType{
        Constructor: TLConstructor_CRC32_auth_sentCodeTypeSms,
        Data2: m.Data2,
    }
}


func (m *TLAuthSentCodeTypeSms) SetLength(v int32) { m.Data2.Length = v }
func (m *TLAuthSentCodeTypeSms) GetLength() int32 { return m.Data2.Length }


func NewTLAuthSentCodeTypeSms() * TLAuthSentCodeTypeSms {
    return &TLAuthSentCodeTypeSms{ Data2: &Auth_SentCodeType_Data{} }
}

func (m* TLAuthSentCodeTypeSms) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_auth_sentCodeTypeSms))

    x.Int(m.GetLength())

    return x.buf
}

func (m* TLAuthSentCodeTypeSms) Decode(dbuf *DecodeBuf) error {
    m.SetLength(dbuf.Int())

    return dbuf.err
}
// auth.sentCodeTypeCall#5353e5a7 length:int = auth.SentCodeType;
func (m *TLAuthSentCodeTypeCall) To_Auth_SentCodeType() *Auth_SentCodeType {
    return &Auth_SentCodeType{
        Constructor: TLConstructor_CRC32_auth_sentCodeTypeCall,
        Data2: m.Data2,
    }
}


func (m *TLAuthSentCodeTypeCall) SetLength(v int32) { m.Data2.Length = v }
func (m *TLAuthSentCodeTypeCall) GetLength() int32 { return m.Data2.Length }


func NewTLAuthSentCodeTypeCall() * TLAuthSentCodeTypeCall {
    return &TLAuthSentCodeTypeCall{ Data2: &Auth_SentCodeType_Data{} }
}

func (m* TLAuthSentCodeTypeCall) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_auth_sentCodeTypeCall))

    x.Int(m.GetLength())

    return x.buf
}

func (m* TLAuthSentCodeTypeCall) Decode(dbuf *DecodeBuf) error {
    m.SetLength(dbuf.Int())

    return dbuf.err
}
// auth.sentCodeTypeFlashCall#ab03c6d9 pattern:string = auth.SentCodeType;
func (m *TLAuthSentCodeTypeFlashCall) To_Auth_SentCodeType() *Auth_SentCodeType {
    return &Auth_SentCodeType{
        Constructor: TLConstructor_CRC32_auth_sentCodeTypeFlashCall,
        Data2: m.Data2,
    }
}


func (m *TLAuthSentCodeTypeFlashCall) SetPattern(v string) { m.Data2.Pattern = v }
func (m *TLAuthSentCodeTypeFlashCall) GetPattern() string { return m.Data2.Pattern }


func NewTLAuthSentCodeTypeFlashCall() * TLAuthSentCodeTypeFlashCall {
    return &TLAuthSentCodeTypeFlashCall{ Data2: &Auth_SentCodeType_Data{} }
}

func (m* TLAuthSentCodeTypeFlashCall) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_auth_sentCodeTypeFlashCall))

    x.String(m.GetPattern())

    return x.buf
}

func (m* TLAuthSentCodeTypeFlashCall) Decode(dbuf *DecodeBuf) error {
    m.SetPattern(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Help_SupportName <--
//  + TL_HelpSupportName
//

func (m *Help_SupportName) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_help_supportName:
        t := m.To_HelpSupportName()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Help_SupportName) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_help_supportName:
        m2 := &TLHelpSupportName{&Help_SupportName_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// help.supportName#8c05f1c9 name:string = help.SupportName;
func (m *Help_SupportName) To_HelpSupportName() *TLHelpSupportName {
    return &TLHelpSupportName{
        Data2: m.Data2,
    }
}



// help.supportName#8c05f1c9 name:string = help.SupportName;
func (m *TLHelpSupportName) To_Help_SupportName() *Help_SupportName {
    return &Help_SupportName{
        Constructor: TLConstructor_CRC32_help_supportName,
        Data2: m.Data2,
    }
}


func (m *TLHelpSupportName) SetName(v string) { m.Data2.Name = v }
func (m *TLHelpSupportName) GetName() string { return m.Data2.Name }


func NewTLHelpSupportName() * TLHelpSupportName {
    return &TLHelpSupportName{ Data2: &Help_SupportName_Data{} }
}

func (m* TLHelpSupportName) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_help_supportName))

    x.String(m.GetName())

    return x.buf
}

func (m* TLHelpSupportName) Decode(dbuf *DecodeBuf) error {
    m.SetName(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputNotifyPeer <--
//  + TL_InputNotifyPeer
//  + TL_InputNotifyUsers
//  + TL_InputNotifyChats
//  + TL_InputNotifyAll
//  + TL_InputNotifyBroadcasts
//

func (m *InputNotifyPeer) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputNotifyPeer:
        t := m.To_InputNotifyPeer()
        return t.Encode()
    case TLConstructor_CRC32_inputNotifyUsers:
        t := m.To_InputNotifyUsers()
        return t.Encode()
    case TLConstructor_CRC32_inputNotifyChats:
        t := m.To_InputNotifyChats()
        return t.Encode()
    case TLConstructor_CRC32_inputNotifyAll:
        t := m.To_InputNotifyAll()
        return t.Encode()
    case TLConstructor_CRC32_inputNotifyBroadcasts:
        t := m.To_InputNotifyBroadcasts()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputNotifyPeer) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputNotifyPeer:
        m2 := &TLInputNotifyPeer{&InputNotifyPeer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputNotifyUsers:
        m2 := &TLInputNotifyUsers{&InputNotifyPeer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputNotifyChats:
        m2 := &TLInputNotifyChats{&InputNotifyPeer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputNotifyAll:
        m2 := &TLInputNotifyAll{&InputNotifyPeer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputNotifyBroadcasts:
        m2 := &TLInputNotifyBroadcasts{&InputNotifyPeer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputNotifyPeer#b8bc5b0c peer:InputPeer = InputNotifyPeer;
func (m *InputNotifyPeer) To_InputNotifyPeer() *TLInputNotifyPeer {
    return &TLInputNotifyPeer{
        Data2: m.Data2,
    }
}

// inputNotifyUsers#193b4417 = InputNotifyPeer;
func (m *InputNotifyPeer) To_InputNotifyUsers() *TLInputNotifyUsers {
    return &TLInputNotifyUsers{
        Data2: m.Data2,
    }
}

// inputNotifyChats#4a95e84e = InputNotifyPeer;
func (m *InputNotifyPeer) To_InputNotifyChats() *TLInputNotifyChats {
    return &TLInputNotifyChats{
        Data2: m.Data2,
    }
}

// inputNotifyAll#a429b886 = InputNotifyPeer;
func (m *InputNotifyPeer) To_InputNotifyAll() *TLInputNotifyAll {
    return &TLInputNotifyAll{
        Data2: m.Data2,
    }
}

// inputNotifyBroadcasts#b1db7c7e = InputNotifyPeer;
func (m *InputNotifyPeer) To_InputNotifyBroadcasts() *TLInputNotifyBroadcasts {
    return &TLInputNotifyBroadcasts{
        Data2: m.Data2,
    }
}



// inputNotifyPeer#b8bc5b0c peer:InputPeer = InputNotifyPeer;
func (m *TLInputNotifyPeer) To_InputNotifyPeer() *InputNotifyPeer {
    return &InputNotifyPeer{
        Constructor: TLConstructor_CRC32_inputNotifyPeer,
        Data2: m.Data2,
    }
}


func (m *TLInputNotifyPeer) SetPeer(v *InputPeer) { m.Data2.Peer = v }
func (m *TLInputNotifyPeer) GetPeer() *InputPeer { return m.Data2.Peer }


func NewTLInputNotifyPeer() * TLInputNotifyPeer {
    return &TLInputNotifyPeer{ Data2: &InputNotifyPeer_Data{} }
}

func (m* TLInputNotifyPeer) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputNotifyPeer))

    x.Bytes(m.GetPeer().Encode())

    return x.buf
}

func (m* TLInputNotifyPeer) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.SetPeer(m1)

    return dbuf.err
}
// inputNotifyUsers#193b4417 = InputNotifyPeer;
func (m *TLInputNotifyUsers) To_InputNotifyPeer() *InputNotifyPeer {
    return &InputNotifyPeer{
        Constructor: TLConstructor_CRC32_inputNotifyUsers,
        Data2: m.Data2,
    }
}



func NewTLInputNotifyUsers() * TLInputNotifyUsers {
    return &TLInputNotifyUsers{ Data2: &InputNotifyPeer_Data{} }
}

func (m* TLInputNotifyUsers) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputNotifyUsers))


    return x.buf
}

func (m* TLInputNotifyUsers) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputNotifyChats#4a95e84e = InputNotifyPeer;
func (m *TLInputNotifyChats) To_InputNotifyPeer() *InputNotifyPeer {
    return &InputNotifyPeer{
        Constructor: TLConstructor_CRC32_inputNotifyChats,
        Data2: m.Data2,
    }
}



func NewTLInputNotifyChats() * TLInputNotifyChats {
    return &TLInputNotifyChats{ Data2: &InputNotifyPeer_Data{} }
}

func (m* TLInputNotifyChats) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputNotifyChats))


    return x.buf
}

func (m* TLInputNotifyChats) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputNotifyAll#a429b886 = InputNotifyPeer;
func (m *TLInputNotifyAll) To_InputNotifyPeer() *InputNotifyPeer {
    return &InputNotifyPeer{
        Constructor: TLConstructor_CRC32_inputNotifyAll,
        Data2: m.Data2,
    }
}



func NewTLInputNotifyAll() * TLInputNotifyAll {
    return &TLInputNotifyAll{ Data2: &InputNotifyPeer_Data{} }
}

func (m* TLInputNotifyAll) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputNotifyAll))


    return x.buf
}

func (m* TLInputNotifyAll) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputNotifyBroadcasts#b1db7c7e = InputNotifyPeer;
func (m *TLInputNotifyBroadcasts) To_InputNotifyPeer() *InputNotifyPeer {
    return &InputNotifyPeer{
        Constructor: TLConstructor_CRC32_inputNotifyBroadcasts,
        Data2: m.Data2,
    }
}



func NewTLInputNotifyBroadcasts() * TLInputNotifyBroadcasts {
    return &TLInputNotifyBroadcasts{ Data2: &InputNotifyPeer_Data{} }
}

func (m* TLInputNotifyBroadcasts) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputNotifyBroadcasts))


    return x.buf
}

func (m* TLInputNotifyBroadcasts) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InlineBotSwitchPM <--
//  + TL_InlineBotSwitchPM
//

func (m *InlineBotSwitchPM) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inlineBotSwitchPM:
        t := m.To_InlineBotSwitchPM()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InlineBotSwitchPM) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inlineBotSwitchPM:
        m2 := &TLInlineBotSwitchPM{&InlineBotSwitchPM_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inlineBotSwitchPM#3c20629f text:string start_param:string = InlineBotSwitchPM;
func (m *InlineBotSwitchPM) To_InlineBotSwitchPM() *TLInlineBotSwitchPM {
    return &TLInlineBotSwitchPM{
        Data2: m.Data2,
    }
}



// inlineBotSwitchPM#3c20629f text:string start_param:string = InlineBotSwitchPM;
func (m *TLInlineBotSwitchPM) To_InlineBotSwitchPM() *InlineBotSwitchPM {
    return &InlineBotSwitchPM{
        Constructor: TLConstructor_CRC32_inlineBotSwitchPM,
        Data2: m.Data2,
    }
}


func (m *TLInlineBotSwitchPM) SetText(v string) { m.Data2.Text = v }
func (m *TLInlineBotSwitchPM) GetText() string { return m.Data2.Text }

func (m *TLInlineBotSwitchPM) SetStartParam(v string) { m.Data2.StartParam = v }
func (m *TLInlineBotSwitchPM) GetStartParam() string { return m.Data2.StartParam }


func NewTLInlineBotSwitchPM() * TLInlineBotSwitchPM {
    return &TLInlineBotSwitchPM{ Data2: &InlineBotSwitchPM_Data{} }
}

func (m* TLInlineBotSwitchPM) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inlineBotSwitchPM))

    x.String(m.GetText())
    x.String(m.GetStartParam())

    return x.buf
}

func (m* TLInlineBotSwitchPM) Decode(dbuf *DecodeBuf) error {
    m.SetText(dbuf.String())
    m.SetStartParam(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Contacts_TopPeers <--
//  + TL_ContactsTopPeersNotModified
//  + TL_ContactsTopPeers
//

func (m *Contacts_TopPeers) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_contacts_topPeersNotModified:
        t := m.To_ContactsTopPeersNotModified()
        return t.Encode()
    case TLConstructor_CRC32_contacts_topPeers:
        t := m.To_ContactsTopPeers()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Contacts_TopPeers) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_contacts_topPeersNotModified:
        m2 := &TLContactsTopPeersNotModified{&Contacts_TopPeers_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_contacts_topPeers:
        m2 := &TLContactsTopPeers{&Contacts_TopPeers_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// contacts.topPeersNotModified#de266ef5 = contacts.TopPeers;
func (m *Contacts_TopPeers) To_ContactsTopPeersNotModified() *TLContactsTopPeersNotModified {
    return &TLContactsTopPeersNotModified{
        Data2: m.Data2,
    }
}

// contacts.topPeers#70b772a8 categories:Vector<TopPeerCategoryPeers> chats:Vector<Chat> users:Vector<User> = contacts.TopPeers;
func (m *Contacts_TopPeers) To_ContactsTopPeers() *TLContactsTopPeers {
    return &TLContactsTopPeers{
        Data2: m.Data2,
    }
}



// contacts.topPeersNotModified#de266ef5 = contacts.TopPeers;
func (m *TLContactsTopPeersNotModified) To_Contacts_TopPeers() *Contacts_TopPeers {
    return &Contacts_TopPeers{
        Constructor: TLConstructor_CRC32_contacts_topPeersNotModified,
        Data2: m.Data2,
    }
}



func NewTLContactsTopPeersNotModified() * TLContactsTopPeersNotModified {
    return &TLContactsTopPeersNotModified{ Data2: &Contacts_TopPeers_Data{} }
}

func (m* TLContactsTopPeersNotModified) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_contacts_topPeersNotModified))


    return x.buf
}

func (m* TLContactsTopPeersNotModified) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// contacts.topPeers#70b772a8 categories:Vector<TopPeerCategoryPeers> chats:Vector<Chat> users:Vector<User> = contacts.TopPeers;
func (m *TLContactsTopPeers) To_Contacts_TopPeers() *Contacts_TopPeers {
    return &Contacts_TopPeers{
        Constructor: TLConstructor_CRC32_contacts_topPeers,
        Data2: m.Data2,
    }
}


func (m *TLContactsTopPeers) SetCategories(v []*TopPeerCategoryPeers) { m.Data2.Categories = v }
func (m *TLContactsTopPeers) GetCategories() []*TopPeerCategoryPeers { return m.Data2.Categories }

func (m *TLContactsTopPeers) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLContactsTopPeers) GetChats() []*Chat { return m.Data2.Chats }

func (m *TLContactsTopPeers) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLContactsTopPeers) GetUsers() []*User { return m.Data2.Users }


func NewTLContactsTopPeers() * TLContactsTopPeers {
    return &TLContactsTopPeers{ Data2: &Contacts_TopPeers_Data{} }
}

func (m* TLContactsTopPeers) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_contacts_topPeers))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetCategories())))
for _, v := range m.GetCategories() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetChats())))
for _, v := range m.GetChats() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLContactsTopPeers) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*TopPeerCategoryPeers, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &TopPeerCategoryPeers{}
	v1[i].Decode(dbuf)
}
m.SetCategories(v1)

    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*Chat, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &Chat{}
	v2[i].Decode(dbuf)
}
m.SetChats(v2)

    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*User, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &User{}
	v3[i].Decode(dbuf)
}
m.SetUsers(v3)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputPaymentCredentials <--
//  + TL_InputPaymentCredentialsSaved
//  + TL_InputPaymentCredentials
//  + TL_InputPaymentCredentialsApplePay
//  + TL_InputPaymentCredentialsAndroidPay
//

func (m *InputPaymentCredentials) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputPaymentCredentialsSaved:
        t := m.To_InputPaymentCredentialsSaved()
        return t.Encode()
    case TLConstructor_CRC32_inputPaymentCredentials:
        t := m.To_InputPaymentCredentials()
        return t.Encode()
    case TLConstructor_CRC32_inputPaymentCredentialsApplePay:
        t := m.To_InputPaymentCredentialsApplePay()
        return t.Encode()
    case TLConstructor_CRC32_inputPaymentCredentialsAndroidPay:
        t := m.To_InputPaymentCredentialsAndroidPay()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputPaymentCredentials) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputPaymentCredentialsSaved:
        m2 := &TLInputPaymentCredentialsSaved{&InputPaymentCredentials_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputPaymentCredentials:
        m2 := &TLInputPaymentCredentials{&InputPaymentCredentials_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputPaymentCredentialsApplePay:
        m2 := &TLInputPaymentCredentialsApplePay{&InputPaymentCredentials_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputPaymentCredentialsAndroidPay:
        m2 := &TLInputPaymentCredentialsAndroidPay{&InputPaymentCredentials_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputPaymentCredentialsSaved#c10eb2cf id:string tmp_password:bytes = InputPaymentCredentials;
func (m *InputPaymentCredentials) To_InputPaymentCredentialsSaved() *TLInputPaymentCredentialsSaved {
    return &TLInputPaymentCredentialsSaved{
        Data2: m.Data2,
    }
}

// inputPaymentCredentials#3417d728 flags:# save:flags.0?true data:DataJSON = InputPaymentCredentials;
func (m *InputPaymentCredentials) To_InputPaymentCredentials() *TLInputPaymentCredentials {
    return &TLInputPaymentCredentials{
        Data2: m.Data2,
    }
}

// inputPaymentCredentialsApplePay#aa1c39f payment_data:DataJSON = InputPaymentCredentials;
func (m *InputPaymentCredentials) To_InputPaymentCredentialsApplePay() *TLInputPaymentCredentialsApplePay {
    return &TLInputPaymentCredentialsApplePay{
        Data2: m.Data2,
    }
}

// inputPaymentCredentialsAndroidPay#ca05d50e payment_token:DataJSON google_transaction_id:string = InputPaymentCredentials;
func (m *InputPaymentCredentials) To_InputPaymentCredentialsAndroidPay() *TLInputPaymentCredentialsAndroidPay {
    return &TLInputPaymentCredentialsAndroidPay{
        Data2: m.Data2,
    }
}



// inputPaymentCredentialsSaved#c10eb2cf id:string tmp_password:bytes = InputPaymentCredentials;
func (m *TLInputPaymentCredentialsSaved) To_InputPaymentCredentials() *InputPaymentCredentials {
    return &InputPaymentCredentials{
        Constructor: TLConstructor_CRC32_inputPaymentCredentialsSaved,
        Data2: m.Data2,
    }
}


func (m *TLInputPaymentCredentialsSaved) SetId(v string) { m.Data2.Id = v }
func (m *TLInputPaymentCredentialsSaved) GetId() string { return m.Data2.Id }

func (m *TLInputPaymentCredentialsSaved) SetTmpPassword(v []byte) { m.Data2.TmpPassword = v }
func (m *TLInputPaymentCredentialsSaved) GetTmpPassword() []byte { return m.Data2.TmpPassword }


func NewTLInputPaymentCredentialsSaved() * TLInputPaymentCredentialsSaved {
    return &TLInputPaymentCredentialsSaved{ Data2: &InputPaymentCredentials_Data{} }
}

func (m* TLInputPaymentCredentialsSaved) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPaymentCredentialsSaved))

    x.String(m.GetId())
    x.StringBytes(m.GetTmpPassword())

    return x.buf
}

func (m* TLInputPaymentCredentialsSaved) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.String())
    m.SetTmpPassword(dbuf.StringBytes())

    return dbuf.err
}
// inputPaymentCredentials#3417d728 flags:# save:flags.0?true data:DataJSON = InputPaymentCredentials;
func (m *TLInputPaymentCredentials) To_InputPaymentCredentials() *InputPaymentCredentials {
    return &InputPaymentCredentials{
        Constructor: TLConstructor_CRC32_inputPaymentCredentials,
        Data2: m.Data2,
    }
}


func (m *TLInputPaymentCredentials) SetSave(v bool) { m.Data2.Save = v }
func (m *TLInputPaymentCredentials) GetSave() bool { return m.Data2.Save }

func (m *TLInputPaymentCredentials) SetData(v *DataJSON) { m.Data2.Data = v }
func (m *TLInputPaymentCredentials) GetData() *DataJSON { return m.Data2.Data }


func NewTLInputPaymentCredentials() * TLInputPaymentCredentials {
    return &TLInputPaymentCredentials{ Data2: &InputPaymentCredentials_Data{} }
}

func (m* TLInputPaymentCredentials) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPaymentCredentials))

    // flags
    var flags uint32 = 0
    if m.GetSave() == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Bytes(m.GetData().Encode())

    return x.buf
}

func (m* TLInputPaymentCredentials) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetSave(true) }
    m3 := &DataJSON{}
    m3.Decode(dbuf)
    m.SetData(m3)

    return dbuf.err
}
// inputPaymentCredentialsApplePay#aa1c39f payment_data:DataJSON = InputPaymentCredentials;
func (m *TLInputPaymentCredentialsApplePay) To_InputPaymentCredentials() *InputPaymentCredentials {
    return &InputPaymentCredentials{
        Constructor: TLConstructor_CRC32_inputPaymentCredentialsApplePay,
        Data2: m.Data2,
    }
}


func (m *TLInputPaymentCredentialsApplePay) SetPaymentData(v *DataJSON) { m.Data2.PaymentData = v }
func (m *TLInputPaymentCredentialsApplePay) GetPaymentData() *DataJSON { return m.Data2.PaymentData }


func NewTLInputPaymentCredentialsApplePay() * TLInputPaymentCredentialsApplePay {
    return &TLInputPaymentCredentialsApplePay{ Data2: &InputPaymentCredentials_Data{} }
}

func (m* TLInputPaymentCredentialsApplePay) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPaymentCredentialsApplePay))

    x.Bytes(m.GetPaymentData().Encode())

    return x.buf
}

func (m* TLInputPaymentCredentialsApplePay) Decode(dbuf *DecodeBuf) error {
    m1 := &DataJSON{}
    m1.Decode(dbuf)
    m.SetPaymentData(m1)

    return dbuf.err
}
// inputPaymentCredentialsAndroidPay#ca05d50e payment_token:DataJSON google_transaction_id:string = InputPaymentCredentials;
func (m *TLInputPaymentCredentialsAndroidPay) To_InputPaymentCredentials() *InputPaymentCredentials {
    return &InputPaymentCredentials{
        Constructor: TLConstructor_CRC32_inputPaymentCredentialsAndroidPay,
        Data2: m.Data2,
    }
}


func (m *TLInputPaymentCredentialsAndroidPay) SetPaymentToken(v *DataJSON) { m.Data2.PaymentToken = v }
func (m *TLInputPaymentCredentialsAndroidPay) GetPaymentToken() *DataJSON { return m.Data2.PaymentToken }

func (m *TLInputPaymentCredentialsAndroidPay) SetGoogleTransactionId(v string) { m.Data2.GoogleTransactionId = v }
func (m *TLInputPaymentCredentialsAndroidPay) GetGoogleTransactionId() string { return m.Data2.GoogleTransactionId }


func NewTLInputPaymentCredentialsAndroidPay() * TLInputPaymentCredentialsAndroidPay {
    return &TLInputPaymentCredentialsAndroidPay{ Data2: &InputPaymentCredentials_Data{} }
}

func (m* TLInputPaymentCredentialsAndroidPay) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPaymentCredentialsAndroidPay))

    x.Bytes(m.GetPaymentToken().Encode())
    x.String(m.GetGoogleTransactionId())

    return x.buf
}

func (m* TLInputPaymentCredentialsAndroidPay) Decode(dbuf *DecodeBuf) error {
    m1 := &DataJSON{}
    m1.Decode(dbuf)
    m.SetPaymentToken(m1)
    m.SetGoogleTransactionId(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputPeer <--
//  + TL_InputPeerEmpty
//  + TL_InputPeerSelf
//  + TL_InputPeerChat
//  + TL_InputPeerUser
//  + TL_InputPeerChannel
//  + TL_InputPeerUserFromMessage
//  + TL_InputPeerChannelFromMessage
//

func (m *InputPeer) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputPeerEmpty:
        t := m.To_InputPeerEmpty()
        return t.Encode()
    case TLConstructor_CRC32_inputPeerSelf:
        t := m.To_InputPeerSelf()
        return t.Encode()
    case TLConstructor_CRC32_inputPeerChat:
        t := m.To_InputPeerChat()
        return t.Encode()
    case TLConstructor_CRC32_inputPeerUser:
        t := m.To_InputPeerUser()
        return t.Encode()
    case TLConstructor_CRC32_inputPeerChannel:
        t := m.To_InputPeerChannel()
        return t.Encode()
    case TLConstructor_CRC32_inputPeerUserFromMessage:
        t := m.To_InputPeerUserFromMessage()
        return t.Encode()
    case TLConstructor_CRC32_inputPeerChannelFromMessage:
        t := m.To_InputPeerChannelFromMessage()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputPeer) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputPeerEmpty:
        m2 := &TLInputPeerEmpty{&InputPeer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputPeerSelf:
        m2 := &TLInputPeerSelf{&InputPeer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputPeerChat:
        m2 := &TLInputPeerChat{&InputPeer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputPeerUser:
        m2 := &TLInputPeerUser{&InputPeer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputPeerChannel:
        m2 := &TLInputPeerChannel{&InputPeer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputPeerUserFromMessage:
        m2 := &TLInputPeerUserFromMessage{&InputPeer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputPeerChannelFromMessage:
        m2 := &TLInputPeerChannelFromMessage{&InputPeer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputPeerEmpty#7f3b18ea = InputPeer;
func (m *InputPeer) To_InputPeerEmpty() *TLInputPeerEmpty {
    return &TLInputPeerEmpty{
        Data2: m.Data2,
    }
}

// inputPeerSelf#7da07ec9 = InputPeer;
func (m *InputPeer) To_InputPeerSelf() *TLInputPeerSelf {
    return &TLInputPeerSelf{
        Data2: m.Data2,
    }
}

// inputPeerChat#179be863 chat_id:int = InputPeer;
func (m *InputPeer) To_InputPeerChat() *TLInputPeerChat {
    return &TLInputPeerChat{
        Data2: m.Data2,
    }
}

// inputPeerUser#7b8e7de6 user_id:int access_hash:long = InputPeer;
func (m *InputPeer) To_InputPeerUser() *TLInputPeerUser {
    return &TLInputPeerUser{
        Data2: m.Data2,
    }
}

// inputPeerChannel#20adaef8 channel_id:int access_hash:long = InputPeer;
func (m *InputPeer) To_InputPeerChannel() *TLInputPeerChannel {
    return &TLInputPeerChannel{
        Data2: m.Data2,
    }
}

// inputPeerUserFromMessage#17bae2e6 peer:InputPeer msg_id:int user_id:int = InputPeer;
func (m *InputPeer) To_InputPeerUserFromMessage() *TLInputPeerUserFromMessage {
    return &TLInputPeerUserFromMessage{
        Data2: m.Data2,
    }
}

// inputPeerChannelFromMessage#9c95f7bb peer:InputPeer msg_id:int channel_id:int = InputPeer;
func (m *InputPeer) To_InputPeerChannelFromMessage() *TLInputPeerChannelFromMessage {
    return &TLInputPeerChannelFromMessage{
        Data2: m.Data2,
    }
}



// inputPeerEmpty#7f3b18ea = InputPeer;
func (m *TLInputPeerEmpty) To_InputPeer() *InputPeer {
    return &InputPeer{
        Constructor: TLConstructor_CRC32_inputPeerEmpty,
        Data2: m.Data2,
    }
}



func NewTLInputPeerEmpty() * TLInputPeerEmpty {
    return &TLInputPeerEmpty{ Data2: &InputPeer_Data{} }
}

func (m* TLInputPeerEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPeerEmpty))


    return x.buf
}

func (m* TLInputPeerEmpty) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputPeerSelf#7da07ec9 = InputPeer;
func (m *TLInputPeerSelf) To_InputPeer() *InputPeer {
    return &InputPeer{
        Constructor: TLConstructor_CRC32_inputPeerSelf,
        Data2: m.Data2,
    }
}



func NewTLInputPeerSelf() * TLInputPeerSelf {
    return &TLInputPeerSelf{ Data2: &InputPeer_Data{} }
}

func (m* TLInputPeerSelf) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPeerSelf))


    return x.buf
}

func (m* TLInputPeerSelf) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputPeerChat#179be863 chat_id:int = InputPeer;
func (m *TLInputPeerChat) To_InputPeer() *InputPeer {
    return &InputPeer{
        Constructor: TLConstructor_CRC32_inputPeerChat,
        Data2: m.Data2,
    }
}


func (m *TLInputPeerChat) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLInputPeerChat) GetChatId() int32 { return m.Data2.ChatId }


func NewTLInputPeerChat() * TLInputPeerChat {
    return &TLInputPeerChat{ Data2: &InputPeer_Data{} }
}

func (m* TLInputPeerChat) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPeerChat))

    x.Int(m.GetChatId())

    return x.buf
}

func (m* TLInputPeerChat) Decode(dbuf *DecodeBuf) error {
    m.SetChatId(dbuf.Int())

    return dbuf.err
}
// inputPeerUser#7b8e7de6 user_id:int access_hash:long = InputPeer;
func (m *TLInputPeerUser) To_InputPeer() *InputPeer {
    return &InputPeer{
        Constructor: TLConstructor_CRC32_inputPeerUser,
        Data2: m.Data2,
    }
}


func (m *TLInputPeerUser) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLInputPeerUser) GetUserId() int32 { return m.Data2.UserId }

func (m *TLInputPeerUser) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputPeerUser) GetAccessHash() int64 { return m.Data2.AccessHash }


func NewTLInputPeerUser() * TLInputPeerUser {
    return &TLInputPeerUser{ Data2: &InputPeer_Data{} }
}

func (m* TLInputPeerUser) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPeerUser))

    x.Int(m.GetUserId())
    x.Long(m.GetAccessHash())

    return x.buf
}

func (m* TLInputPeerUser) Decode(dbuf *DecodeBuf) error {
    m.SetUserId(dbuf.Int())
    m.SetAccessHash(dbuf.Long())

    return dbuf.err
}
// inputPeerChannel#20adaef8 channel_id:int access_hash:long = InputPeer;
func (m *TLInputPeerChannel) To_InputPeer() *InputPeer {
    return &InputPeer{
        Constructor: TLConstructor_CRC32_inputPeerChannel,
        Data2: m.Data2,
    }
}


func (m *TLInputPeerChannel) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLInputPeerChannel) GetChannelId() int32 { return m.Data2.ChannelId }

func (m *TLInputPeerChannel) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputPeerChannel) GetAccessHash() int64 { return m.Data2.AccessHash }


func NewTLInputPeerChannel() * TLInputPeerChannel {
    return &TLInputPeerChannel{ Data2: &InputPeer_Data{} }
}

func (m* TLInputPeerChannel) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPeerChannel))

    x.Int(m.GetChannelId())
    x.Long(m.GetAccessHash())

    return x.buf
}

func (m* TLInputPeerChannel) Decode(dbuf *DecodeBuf) error {
    m.SetChannelId(dbuf.Int())
    m.SetAccessHash(dbuf.Long())

    return dbuf.err
}
// inputPeerUserFromMessage#17bae2e6 peer:InputPeer msg_id:int user_id:int = InputPeer;
func (m *TLInputPeerUserFromMessage) To_InputPeer() *InputPeer {
    return &InputPeer{
        Constructor: TLConstructor_CRC32_inputPeerUserFromMessage,
        Data2: m.Data2,
    }
}


func (m *TLInputPeerUserFromMessage) SetPeer(v *InputPeer) { m.Data2.Peer = v }
func (m *TLInputPeerUserFromMessage) GetPeer() *InputPeer { return m.Data2.Peer }

func (m *TLInputPeerUserFromMessage) SetMsgId(v int32) { m.Data2.MsgId = v }
func (m *TLInputPeerUserFromMessage) GetMsgId() int32 { return m.Data2.MsgId }

func (m *TLInputPeerUserFromMessage) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLInputPeerUserFromMessage) GetUserId() int32 { return m.Data2.UserId }


func NewTLInputPeerUserFromMessage() * TLInputPeerUserFromMessage {
    return &TLInputPeerUserFromMessage{ Data2: &InputPeer_Data{} }
}

func (m* TLInputPeerUserFromMessage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPeerUserFromMessage))

    x.Bytes(m.GetPeer().Encode())
    x.Int(m.GetMsgId())
    x.Int(m.GetUserId())

    return x.buf
}

func (m* TLInputPeerUserFromMessage) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.SetPeer(m1)
    m.SetMsgId(dbuf.Int())
    m.SetUserId(dbuf.Int())

    return dbuf.err
}
// inputPeerChannelFromMessage#9c95f7bb peer:InputPeer msg_id:int channel_id:int = InputPeer;
func (m *TLInputPeerChannelFromMessage) To_InputPeer() *InputPeer {
    return &InputPeer{
        Constructor: TLConstructor_CRC32_inputPeerChannelFromMessage,
        Data2: m.Data2,
    }
}


func (m *TLInputPeerChannelFromMessage) SetPeer(v *InputPeer) { m.Data2.Peer = v }
func (m *TLInputPeerChannelFromMessage) GetPeer() *InputPeer { return m.Data2.Peer }

func (m *TLInputPeerChannelFromMessage) SetMsgId(v int32) { m.Data2.MsgId = v }
func (m *TLInputPeerChannelFromMessage) GetMsgId() int32 { return m.Data2.MsgId }

func (m *TLInputPeerChannelFromMessage) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLInputPeerChannelFromMessage) GetChannelId() int32 { return m.Data2.ChannelId }


func NewTLInputPeerChannelFromMessage() * TLInputPeerChannelFromMessage {
    return &TLInputPeerChannelFromMessage{ Data2: &InputPeer_Data{} }
}

func (m* TLInputPeerChannelFromMessage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPeerChannelFromMessage))

    x.Bytes(m.GetPeer().Encode())
    x.Int(m.GetMsgId())
    x.Int(m.GetChannelId())

    return x.buf
}

func (m* TLInputPeerChannelFromMessage) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.SetPeer(m1)
    m.SetMsgId(dbuf.Int())
    m.SetChannelId(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// ReplyMarkup <--
//  + TL_ReplyKeyboardHide
//  + TL_ReplyKeyboardForceReply
//  + TL_ReplyKeyboardMarkup
//  + TL_ReplyInlineMarkup
//

func (m *ReplyMarkup) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_replyKeyboardHide:
        t := m.To_ReplyKeyboardHide()
        return t.Encode()
    case TLConstructor_CRC32_replyKeyboardForceReply:
        t := m.To_ReplyKeyboardForceReply()
        return t.Encode()
    case TLConstructor_CRC32_replyKeyboardMarkup:
        t := m.To_ReplyKeyboardMarkup()
        return t.Encode()
    case TLConstructor_CRC32_replyInlineMarkup:
        t := m.To_ReplyInlineMarkup()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *ReplyMarkup) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_replyKeyboardHide:
        m2 := &TLReplyKeyboardHide{&ReplyMarkup_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_replyKeyboardForceReply:
        m2 := &TLReplyKeyboardForceReply{&ReplyMarkup_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_replyKeyboardMarkup:
        m2 := &TLReplyKeyboardMarkup{&ReplyMarkup_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_replyInlineMarkup:
        m2 := &TLReplyInlineMarkup{&ReplyMarkup_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// replyKeyboardHide#a03e5b85 flags:# selective:flags.2?true = ReplyMarkup;
func (m *ReplyMarkup) To_ReplyKeyboardHide() *TLReplyKeyboardHide {
    return &TLReplyKeyboardHide{
        Data2: m.Data2,
    }
}

// replyKeyboardForceReply#f4108aa0 flags:# single_use:flags.1?true selective:flags.2?true = ReplyMarkup;
func (m *ReplyMarkup) To_ReplyKeyboardForceReply() *TLReplyKeyboardForceReply {
    return &TLReplyKeyboardForceReply{
        Data2: m.Data2,
    }
}

// replyKeyboardMarkup#3502758c flags:# resize:flags.0?true single_use:flags.1?true selective:flags.2?true rows:Vector<KeyboardButtonRow> = ReplyMarkup;
func (m *ReplyMarkup) To_ReplyKeyboardMarkup() *TLReplyKeyboardMarkup {
    return &TLReplyKeyboardMarkup{
        Data2: m.Data2,
    }
}

// replyInlineMarkup#48a30254 rows:Vector<KeyboardButtonRow> = ReplyMarkup;
func (m *ReplyMarkup) To_ReplyInlineMarkup() *TLReplyInlineMarkup {
    return &TLReplyInlineMarkup{
        Data2: m.Data2,
    }
}



// replyKeyboardHide#a03e5b85 flags:# selective:flags.2?true = ReplyMarkup;
func (m *TLReplyKeyboardHide) To_ReplyMarkup() *ReplyMarkup {
    return &ReplyMarkup{
        Constructor: TLConstructor_CRC32_replyKeyboardHide,
        Data2: m.Data2,
    }
}


func (m *TLReplyKeyboardHide) SetSelective(v bool) { m.Data2.Selective = v }
func (m *TLReplyKeyboardHide) GetSelective() bool { return m.Data2.Selective }


func NewTLReplyKeyboardHide() * TLReplyKeyboardHide {
    return &TLReplyKeyboardHide{ Data2: &ReplyMarkup_Data{} }
}

func (m* TLReplyKeyboardHide) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_replyKeyboardHide))

    // flags
    var flags uint32 = 0
    if m.GetSelective() == true { flags |= 1 << 2 }
	x.UInt(flags)

    

    return x.buf
}

func (m* TLReplyKeyboardHide) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 2)) != 0 { m.SetSelective(true) }

    return dbuf.err
}
// replyKeyboardForceReply#f4108aa0 flags:# single_use:flags.1?true selective:flags.2?true = ReplyMarkup;
func (m *TLReplyKeyboardForceReply) To_ReplyMarkup() *ReplyMarkup {
    return &ReplyMarkup{
        Constructor: TLConstructor_CRC32_replyKeyboardForceReply,
        Data2: m.Data2,
    }
}


func (m *TLReplyKeyboardForceReply) SetSingleUse(v bool) { m.Data2.SingleUse = v }
func (m *TLReplyKeyboardForceReply) GetSingleUse() bool { return m.Data2.SingleUse }

func (m *TLReplyKeyboardForceReply) SetSelective(v bool) { m.Data2.Selective = v }
func (m *TLReplyKeyboardForceReply) GetSelective() bool { return m.Data2.Selective }


func NewTLReplyKeyboardForceReply() * TLReplyKeyboardForceReply {
    return &TLReplyKeyboardForceReply{ Data2: &ReplyMarkup_Data{} }
}

func (m* TLReplyKeyboardForceReply) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_replyKeyboardForceReply))

    // flags
    var flags uint32 = 0
    if m.GetSingleUse() == true { flags |= 1 << 1 }
    if m.GetSelective() == true { flags |= 1 << 2 }
	x.UInt(flags)

    
    

    return x.buf
}

func (m* TLReplyKeyboardForceReply) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 1)) != 0 { m.SetSingleUse(true) }
    if (flags & (1 << 2)) != 0 { m.SetSelective(true) }

    return dbuf.err
}
// replyKeyboardMarkup#3502758c flags:# resize:flags.0?true single_use:flags.1?true selective:flags.2?true rows:Vector<KeyboardButtonRow> = ReplyMarkup;
func (m *TLReplyKeyboardMarkup) To_ReplyMarkup() *ReplyMarkup {
    return &ReplyMarkup{
        Constructor: TLConstructor_CRC32_replyKeyboardMarkup,
        Data2: m.Data2,
    }
}


func (m *TLReplyKeyboardMarkup) SetResize(v bool) { m.Data2.Resize = v }
func (m *TLReplyKeyboardMarkup) GetResize() bool { return m.Data2.Resize }

func (m *TLReplyKeyboardMarkup) SetSingleUse(v bool) { m.Data2.SingleUse = v }
func (m *TLReplyKeyboardMarkup) GetSingleUse() bool { return m.Data2.SingleUse }

func (m *TLReplyKeyboardMarkup) SetSelective(v bool) { m.Data2.Selective = v }
func (m *TLReplyKeyboardMarkup) GetSelective() bool { return m.Data2.Selective }

func (m *TLReplyKeyboardMarkup) SetRows(v []*KeyboardButtonRow) { m.Data2.Rows = v }
func (m *TLReplyKeyboardMarkup) GetRows() []*KeyboardButtonRow { return m.Data2.Rows }


func NewTLReplyKeyboardMarkup() * TLReplyKeyboardMarkup {
    return &TLReplyKeyboardMarkup{ Data2: &ReplyMarkup_Data{} }
}

func (m* TLReplyKeyboardMarkup) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_replyKeyboardMarkup))

    // flags
    var flags uint32 = 0
    if m.GetResize() == true { flags |= 1 << 0 }
    if m.GetSingleUse() == true { flags |= 1 << 1 }
    if m.GetSelective() == true { flags |= 1 << 2 }
	x.UInt(flags)

    
    
    
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetRows())))
for _, v := range m.GetRows() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLReplyKeyboardMarkup) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetResize(true) }
    if (flags & (1 << 1)) != 0 { m.SetSingleUse(true) }
    if (flags & (1 << 2)) != 0 { m.SetSelective(true) }
    c5 := dbuf.Int()
if c5 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 5, c5)
	return dbuf.err
}
l5 := dbuf.Int()
v5 := make([]*KeyboardButtonRow, l5)
for i := int32(0); i < l5; i++ {
	v5[i] = &KeyboardButtonRow{}
	v5[i].Decode(dbuf)
}
m.SetRows(v5)


    return dbuf.err
}
// replyInlineMarkup#48a30254 rows:Vector<KeyboardButtonRow> = ReplyMarkup;
func (m *TLReplyInlineMarkup) To_ReplyMarkup() *ReplyMarkup {
    return &ReplyMarkup{
        Constructor: TLConstructor_CRC32_replyInlineMarkup,
        Data2: m.Data2,
    }
}


func (m *TLReplyInlineMarkup) SetRows(v []*KeyboardButtonRow) { m.Data2.Rows = v }
func (m *TLReplyInlineMarkup) GetRows() []*KeyboardButtonRow { return m.Data2.Rows }


func NewTLReplyInlineMarkup() * TLReplyInlineMarkup {
    return &TLReplyInlineMarkup{ Data2: &ReplyMarkup_Data{} }
}

func (m* TLReplyInlineMarkup) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_replyInlineMarkup))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetRows())))
for _, v := range m.GetRows() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLReplyInlineMarkup) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*KeyboardButtonRow, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &KeyboardButtonRow{}
	v1[i].Decode(dbuf)
}
m.SetRows(v1)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Upload_WebFile <--
//  + TL_UploadWebFile
//

func (m *Upload_WebFile) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_upload_webFile:
        t := m.To_UploadWebFile()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Upload_WebFile) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_upload_webFile:
        m2 := &TLUploadWebFile{&Upload_WebFile_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// upload.webFile#21e753bc size:int mime_type:string file_type:storage.FileType mtime:int bytes:bytes = upload.WebFile;
func (m *Upload_WebFile) To_UploadWebFile() *TLUploadWebFile {
    return &TLUploadWebFile{
        Data2: m.Data2,
    }
}



// upload.webFile#21e753bc size:int mime_type:string file_type:storage.FileType mtime:int bytes:bytes = upload.WebFile;
func (m *TLUploadWebFile) To_Upload_WebFile() *Upload_WebFile {
    return &Upload_WebFile{
        Constructor: TLConstructor_CRC32_upload_webFile,
        Data2: m.Data2,
    }
}


func (m *TLUploadWebFile) SetSize(v int32) { m.Data2.Size_ = v }
func (m *TLUploadWebFile) GetSize() int32 { return m.Data2.Size_ }

func (m *TLUploadWebFile) SetMimeType(v string) { m.Data2.MimeType = v }
func (m *TLUploadWebFile) GetMimeType() string { return m.Data2.MimeType }

func (m *TLUploadWebFile) SetFileType(v *Storage_FileType) { m.Data2.FileType = v }
func (m *TLUploadWebFile) GetFileType() *Storage_FileType { return m.Data2.FileType }

func (m *TLUploadWebFile) SetMtime(v int32) { m.Data2.Mtime = v }
func (m *TLUploadWebFile) GetMtime() int32 { return m.Data2.Mtime }

func (m *TLUploadWebFile) SetBytes(v []byte) { m.Data2.Bytes = v }
func (m *TLUploadWebFile) GetBytes() []byte { return m.Data2.Bytes }


func NewTLUploadWebFile() * TLUploadWebFile {
    return &TLUploadWebFile{ Data2: &Upload_WebFile_Data{} }
}

func (m* TLUploadWebFile) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_upload_webFile))

    x.Int(m.GetSize())
    x.String(m.GetMimeType())
    x.Bytes(m.GetFileType().Encode())
    x.Int(m.GetMtime())
    x.StringBytes(m.GetBytes())

    return x.buf
}

func (m* TLUploadWebFile) Decode(dbuf *DecodeBuf) error {
    m.SetSize(dbuf.Int())
    m.SetMimeType(dbuf.String())
    m3 := &Storage_FileType{}
    m3.Decode(dbuf)
    m.SetFileType(m3)
    m.SetMtime(dbuf.Int())
    m.SetBytes(dbuf.StringBytes())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// FolderPeer <--
//  + TL_FolderPeer
//

func (m *FolderPeer) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_folderPeer:
        t := m.To_FolderPeer()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *FolderPeer) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_folderPeer:
        m2 := &TLFolderPeer{&FolderPeer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// folderPeer#e9baa668 peer:Peer folder_id:int = FolderPeer;
func (m *FolderPeer) To_FolderPeer() *TLFolderPeer {
    return &TLFolderPeer{
        Data2: m.Data2,
    }
}



// folderPeer#e9baa668 peer:Peer folder_id:int = FolderPeer;
func (m *TLFolderPeer) To_FolderPeer() *FolderPeer {
    return &FolderPeer{
        Constructor: TLConstructor_CRC32_folderPeer,
        Data2: m.Data2,
    }
}


func (m *TLFolderPeer) SetPeer(v *Peer) { m.Data2.Peer = v }
func (m *TLFolderPeer) GetPeer() *Peer { return m.Data2.Peer }

func (m *TLFolderPeer) SetFolderId(v int32) { m.Data2.FolderId = v }
func (m *TLFolderPeer) GetFolderId() int32 { return m.Data2.FolderId }


func NewTLFolderPeer() * TLFolderPeer {
    return &TLFolderPeer{ Data2: &FolderPeer_Data{} }
}

func (m* TLFolderPeer) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_folderPeer))

    x.Bytes(m.GetPeer().Encode())
    x.Int(m.GetFolderId())

    return x.buf
}

func (m* TLFolderPeer) Decode(dbuf *DecodeBuf) error {
    m1 := &Peer{}
    m1.Decode(dbuf)
    m.SetPeer(m1)
    m.SetFolderId(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputTheme <--
//  + TL_InputTheme
//  + TL_InputThemeSlug
//

func (m *InputTheme) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputTheme:
        t := m.To_InputTheme()
        return t.Encode()
    case TLConstructor_CRC32_inputThemeSlug:
        t := m.To_InputThemeSlug()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputTheme) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputTheme:
        m2 := &TLInputTheme{&InputTheme_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputThemeSlug:
        m2 := &TLInputThemeSlug{&InputTheme_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputTheme#3c5693e9 id:long access_hash:long = InputTheme;
func (m *InputTheme) To_InputTheme() *TLInputTheme {
    return &TLInputTheme{
        Data2: m.Data2,
    }
}

// inputThemeSlug#f5890df1 slug:string = InputTheme;
func (m *InputTheme) To_InputThemeSlug() *TLInputThemeSlug {
    return &TLInputThemeSlug{
        Data2: m.Data2,
    }
}



// inputTheme#3c5693e9 id:long access_hash:long = InputTheme;
func (m *TLInputTheme) To_InputTheme() *InputTheme {
    return &InputTheme{
        Constructor: TLConstructor_CRC32_inputTheme,
        Data2: m.Data2,
    }
}


func (m *TLInputTheme) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputTheme) GetId() int64 { return m.Data2.Id }

func (m *TLInputTheme) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputTheme) GetAccessHash() int64 { return m.Data2.AccessHash }


func NewTLInputTheme() * TLInputTheme {
    return &TLInputTheme{ Data2: &InputTheme_Data{} }
}

func (m* TLInputTheme) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputTheme))

    x.Long(m.GetId())
    x.Long(m.GetAccessHash())

    return x.buf
}

func (m* TLInputTheme) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())

    return dbuf.err
}
// inputThemeSlug#f5890df1 slug:string = InputTheme;
func (m *TLInputThemeSlug) To_InputTheme() *InputTheme {
    return &InputTheme{
        Constructor: TLConstructor_CRC32_inputThemeSlug,
        Data2: m.Data2,
    }
}


func (m *TLInputThemeSlug) SetSlug(v string) { m.Data2.Slug = v }
func (m *TLInputThemeSlug) GetSlug() string { return m.Data2.Slug }


func NewTLInputThemeSlug() * TLInputThemeSlug {
    return &TLInputThemeSlug{ Data2: &InputTheme_Data{} }
}

func (m* TLInputThemeSlug) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputThemeSlug))

    x.String(m.GetSlug())

    return x.buf
}

func (m* TLInputThemeSlug) Decode(dbuf *DecodeBuf) error {
    m.SetSlug(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Messages_SentEncryptedMessage <--
//  + TL_MessagesSentEncryptedMessage
//  + TL_MessagesSentEncryptedFile
//

func (m *Messages_SentEncryptedMessage) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messages_sentEncryptedMessage:
        t := m.To_MessagesSentEncryptedMessage()
        return t.Encode()
    case TLConstructor_CRC32_messages_sentEncryptedFile:
        t := m.To_MessagesSentEncryptedFile()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Messages_SentEncryptedMessage) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messages_sentEncryptedMessage:
        m2 := &TLMessagesSentEncryptedMessage{&Messages_SentEncryptedMessage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messages_sentEncryptedFile:
        m2 := &TLMessagesSentEncryptedFile{&Messages_SentEncryptedMessage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messages.sentEncryptedMessage#560f8935 date:int = messages.SentEncryptedMessage;
func (m *Messages_SentEncryptedMessage) To_MessagesSentEncryptedMessage() *TLMessagesSentEncryptedMessage {
    return &TLMessagesSentEncryptedMessage{
        Data2: m.Data2,
    }
}

// messages.sentEncryptedFile#9493ff32 date:int file:EncryptedFile = messages.SentEncryptedMessage;
func (m *Messages_SentEncryptedMessage) To_MessagesSentEncryptedFile() *TLMessagesSentEncryptedFile {
    return &TLMessagesSentEncryptedFile{
        Data2: m.Data2,
    }
}



// messages.sentEncryptedMessage#560f8935 date:int = messages.SentEncryptedMessage;
func (m *TLMessagesSentEncryptedMessage) To_Messages_SentEncryptedMessage() *Messages_SentEncryptedMessage {
    return &Messages_SentEncryptedMessage{
        Constructor: TLConstructor_CRC32_messages_sentEncryptedMessage,
        Data2: m.Data2,
    }
}


func (m *TLMessagesSentEncryptedMessage) SetDate(v int32) { m.Data2.Date = v }
func (m *TLMessagesSentEncryptedMessage) GetDate() int32 { return m.Data2.Date }


func NewTLMessagesSentEncryptedMessage() * TLMessagesSentEncryptedMessage {
    return &TLMessagesSentEncryptedMessage{ Data2: &Messages_SentEncryptedMessage_Data{} }
}

func (m* TLMessagesSentEncryptedMessage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_sentEncryptedMessage))

    x.Int(m.GetDate())

    return x.buf
}

func (m* TLMessagesSentEncryptedMessage) Decode(dbuf *DecodeBuf) error {
    m.SetDate(dbuf.Int())

    return dbuf.err
}
// messages.sentEncryptedFile#9493ff32 date:int file:EncryptedFile = messages.SentEncryptedMessage;
func (m *TLMessagesSentEncryptedFile) To_Messages_SentEncryptedMessage() *Messages_SentEncryptedMessage {
    return &Messages_SentEncryptedMessage{
        Constructor: TLConstructor_CRC32_messages_sentEncryptedFile,
        Data2: m.Data2,
    }
}


func (m *TLMessagesSentEncryptedFile) SetDate(v int32) { m.Data2.Date = v }
func (m *TLMessagesSentEncryptedFile) GetDate() int32 { return m.Data2.Date }

func (m *TLMessagesSentEncryptedFile) SetFile(v *EncryptedFile) { m.Data2.File = v }
func (m *TLMessagesSentEncryptedFile) GetFile() *EncryptedFile { return m.Data2.File }


func NewTLMessagesSentEncryptedFile() * TLMessagesSentEncryptedFile {
    return &TLMessagesSentEncryptedFile{ Data2: &Messages_SentEncryptedMessage_Data{} }
}

func (m* TLMessagesSentEncryptedFile) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_sentEncryptedFile))

    x.Int(m.GetDate())
    x.Bytes(m.GetFile().Encode())

    return x.buf
}

func (m* TLMessagesSentEncryptedFile) Decode(dbuf *DecodeBuf) error {
    m.SetDate(dbuf.Int())
    m2 := &EncryptedFile{}
    m2.Decode(dbuf)
    m.SetFile(m2)

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// BotInfo <--
//  + TL_BotInfo
//

func (m *BotInfo) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_botInfo:
        t := m.To_BotInfo()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *BotInfo) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_botInfo:
        m2 := &TLBotInfo{&BotInfo_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// botInfo#98e81d3a user_id:int description:string commands:Vector<BotCommand> = BotInfo;
func (m *BotInfo) To_BotInfo() *TLBotInfo {
    return &TLBotInfo{
        Data2: m.Data2,
    }
}



// botInfo#98e81d3a user_id:int description:string commands:Vector<BotCommand> = BotInfo;
func (m *TLBotInfo) To_BotInfo() *BotInfo {
    return &BotInfo{
        Constructor: TLConstructor_CRC32_botInfo,
        Data2: m.Data2,
    }
}


func (m *TLBotInfo) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLBotInfo) GetUserId() int32 { return m.Data2.UserId }

func (m *TLBotInfo) SetDescription(v string) { m.Data2.Description = v }
func (m *TLBotInfo) GetDescription() string { return m.Data2.Description }

func (m *TLBotInfo) SetCommands(v []*BotCommand) { m.Data2.Commands = v }
func (m *TLBotInfo) GetCommands() []*BotCommand { return m.Data2.Commands }


func NewTLBotInfo() * TLBotInfo {
    return &TLBotInfo{ Data2: &BotInfo_Data{} }
}

func (m* TLBotInfo) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_botInfo))

    x.Int(m.GetUserId())
    x.String(m.GetDescription())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetCommands())))
for _, v := range m.GetCommands() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLBotInfo) Decode(dbuf *DecodeBuf) error {
    m.SetUserId(dbuf.Int())
    m.SetDescription(dbuf.String())
    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*BotCommand, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &BotCommand{}
	v3[i].Decode(dbuf)
}
m.SetCommands(v3)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// SchemeMethod <--
//  + TL_SchemeMethod
//

func (m *SchemeMethod) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_schemeMethod:
        t := m.To_SchemeMethod()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *SchemeMethod) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_schemeMethod:
        m2 := &TLSchemeMethod{&SchemeMethod_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// schemeMethod#479357c0 id:int method:string params:Vector<SchemeParam> type:string = SchemeMethod;
func (m *SchemeMethod) To_SchemeMethod() *TLSchemeMethod {
    return &TLSchemeMethod{
        Data2: m.Data2,
    }
}



// schemeMethod#479357c0 id:int method:string params:Vector<SchemeParam> type:string = SchemeMethod;
func (m *TLSchemeMethod) To_SchemeMethod() *SchemeMethod {
    return &SchemeMethod{
        Constructor: TLConstructor_CRC32_schemeMethod,
        Data2: m.Data2,
    }
}


func (m *TLSchemeMethod) SetId(v int32) { m.Data2.Id = v }
func (m *TLSchemeMethod) GetId() int32 { return m.Data2.Id }

func (m *TLSchemeMethod) SetMethod(v string) { m.Data2.Method = v }
func (m *TLSchemeMethod) GetMethod() string { return m.Data2.Method }

func (m *TLSchemeMethod) SetParams(v []*SchemeParam) { m.Data2.Params = v }
func (m *TLSchemeMethod) GetParams() []*SchemeParam { return m.Data2.Params }

func (m *TLSchemeMethod) SetType(v string) { m.Data2.Type = v }
func (m *TLSchemeMethod) GetType() string { return m.Data2.Type }


func NewTLSchemeMethod() * TLSchemeMethod {
    return &TLSchemeMethod{ Data2: &SchemeMethod_Data{} }
}

func (m* TLSchemeMethod) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_schemeMethod))

    x.Int(m.GetId())
    x.String(m.GetMethod())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetParams())))
for _, v := range m.GetParams() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.String(m.GetType())

    return x.buf
}

func (m* TLSchemeMethod) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Int())
    m.SetMethod(dbuf.String())
    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*SchemeParam, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &SchemeParam{}
	v3[i].Decode(dbuf)
}
m.SetParams(v3)

    m.SetType(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputClientProxy <--
//  + TL_InputClientProxy
//

func (m *InputClientProxy) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputClientProxy:
        t := m.To_InputClientProxy()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputClientProxy) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputClientProxy:
        m2 := &TLInputClientProxy{&InputClientProxy_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputClientProxy#75588b3f address:string port:int = InputClientProxy;
func (m *InputClientProxy) To_InputClientProxy() *TLInputClientProxy {
    return &TLInputClientProxy{
        Data2: m.Data2,
    }
}



// inputClientProxy#75588b3f address:string port:int = InputClientProxy;
func (m *TLInputClientProxy) To_InputClientProxy() *InputClientProxy {
    return &InputClientProxy{
        Constructor: TLConstructor_CRC32_inputClientProxy,
        Data2: m.Data2,
    }
}


func (m *TLInputClientProxy) SetAddress(v string) { m.Data2.Address = v }
func (m *TLInputClientProxy) GetAddress() string { return m.Data2.Address }

func (m *TLInputClientProxy) SetPort(v int32) { m.Data2.Port = v }
func (m *TLInputClientProxy) GetPort() int32 { return m.Data2.Port }


func NewTLInputClientProxy() * TLInputClientProxy {
    return &TLInputClientProxy{ Data2: &InputClientProxy_Data{} }
}

func (m* TLInputClientProxy) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputClientProxy))

    x.String(m.GetAddress())
    x.Int(m.GetPort())

    return x.buf
}

func (m* TLInputClientProxy) Decode(dbuf *DecodeBuf) error {
    m.SetAddress(dbuf.String())
    m.SetPort(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Help_TermsOfServiceUpdate <--
//  + TL_HelpTermsOfServiceUpdateEmpty
//  + TL_HelpTermsOfServiceUpdate
//

func (m *Help_TermsOfServiceUpdate) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_help_termsOfServiceUpdateEmpty:
        t := m.To_HelpTermsOfServiceUpdateEmpty()
        return t.Encode()
    case TLConstructor_CRC32_help_termsOfServiceUpdate:
        t := m.To_HelpTermsOfServiceUpdate()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Help_TermsOfServiceUpdate) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_help_termsOfServiceUpdateEmpty:
        m2 := &TLHelpTermsOfServiceUpdateEmpty{&Help_TermsOfServiceUpdate_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_help_termsOfServiceUpdate:
        m2 := &TLHelpTermsOfServiceUpdate{&Help_TermsOfServiceUpdate_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// help.termsOfServiceUpdateEmpty#e3309f7f expires:int = help.TermsOfServiceUpdate;
func (m *Help_TermsOfServiceUpdate) To_HelpTermsOfServiceUpdateEmpty() *TLHelpTermsOfServiceUpdateEmpty {
    return &TLHelpTermsOfServiceUpdateEmpty{
        Data2: m.Data2,
    }
}

// help.termsOfServiceUpdate#28ecf961 expires:int terms_of_service:help.TermsOfService = help.TermsOfServiceUpdate;
func (m *Help_TermsOfServiceUpdate) To_HelpTermsOfServiceUpdate() *TLHelpTermsOfServiceUpdate {
    return &TLHelpTermsOfServiceUpdate{
        Data2: m.Data2,
    }
}



// help.termsOfServiceUpdateEmpty#e3309f7f expires:int = help.TermsOfServiceUpdate;
func (m *TLHelpTermsOfServiceUpdateEmpty) To_Help_TermsOfServiceUpdate() *Help_TermsOfServiceUpdate {
    return &Help_TermsOfServiceUpdate{
        Constructor: TLConstructor_CRC32_help_termsOfServiceUpdateEmpty,
        Data2: m.Data2,
    }
}


func (m *TLHelpTermsOfServiceUpdateEmpty) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLHelpTermsOfServiceUpdateEmpty) GetExpires() int32 { return m.Data2.Expires }


func NewTLHelpTermsOfServiceUpdateEmpty() * TLHelpTermsOfServiceUpdateEmpty {
    return &TLHelpTermsOfServiceUpdateEmpty{ Data2: &Help_TermsOfServiceUpdate_Data{} }
}

func (m* TLHelpTermsOfServiceUpdateEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_help_termsOfServiceUpdateEmpty))

    x.Int(m.GetExpires())

    return x.buf
}

func (m* TLHelpTermsOfServiceUpdateEmpty) Decode(dbuf *DecodeBuf) error {
    m.SetExpires(dbuf.Int())

    return dbuf.err
}
// help.termsOfServiceUpdate#28ecf961 expires:int terms_of_service:help.TermsOfService = help.TermsOfServiceUpdate;
func (m *TLHelpTermsOfServiceUpdate) To_Help_TermsOfServiceUpdate() *Help_TermsOfServiceUpdate {
    return &Help_TermsOfServiceUpdate{
        Constructor: TLConstructor_CRC32_help_termsOfServiceUpdate,
        Data2: m.Data2,
    }
}


func (m *TLHelpTermsOfServiceUpdate) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLHelpTermsOfServiceUpdate) GetExpires() int32 { return m.Data2.Expires }

func (m *TLHelpTermsOfServiceUpdate) SetTermsOfService(v *Help_TermsOfService) { m.Data2.TermsOfService = v }
func (m *TLHelpTermsOfServiceUpdate) GetTermsOfService() *Help_TermsOfService { return m.Data2.TermsOfService }


func NewTLHelpTermsOfServiceUpdate() * TLHelpTermsOfServiceUpdate {
    return &TLHelpTermsOfServiceUpdate{ Data2: &Help_TermsOfServiceUpdate_Data{} }
}

func (m* TLHelpTermsOfServiceUpdate) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_help_termsOfServiceUpdate))

    x.Int(m.GetExpires())
    x.Bytes(m.GetTermsOfService().Encode())

    return x.buf
}

func (m* TLHelpTermsOfServiceUpdate) Decode(dbuf *DecodeBuf) error {
    m.SetExpires(dbuf.Int())
    m2 := &Help_TermsOfService{}
    m2.Decode(dbuf)
    m.SetTermsOfService(m2)

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// DataJSON <--
//  + TL_DataJSON
//

func (m *DataJSON) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_dataJSON:
        t := m.To_DataJSON()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *DataJSON) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_dataJSON:
        m2 := &TLDataJSON{&DataJSON_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// dataJSON#7d748d04 data:string = DataJSON;
func (m *DataJSON) To_DataJSON() *TLDataJSON {
    return &TLDataJSON{
        Data2: m.Data2,
    }
}



// dataJSON#7d748d04 data:string = DataJSON;
func (m *TLDataJSON) To_DataJSON() *DataJSON {
    return &DataJSON{
        Constructor: TLConstructor_CRC32_dataJSON,
        Data2: m.Data2,
    }
}


func (m *TLDataJSON) SetData(v string) { m.Data2.Data = v }
func (m *TLDataJSON) GetData() string { return m.Data2.Data }


func NewTLDataJSON() * TLDataJSON {
    return &TLDataJSON{ Data2: &DataJSON_Data{} }
}

func (m* TLDataJSON) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_dataJSON))

    x.String(m.GetData())

    return x.buf
}

func (m* TLDataJSON) Decode(dbuf *DecodeBuf) error {
    m.SetData(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// PaymentCharge <--
//  + TL_PaymentCharge
//

func (m *PaymentCharge) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_paymentCharge:
        t := m.To_PaymentCharge()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *PaymentCharge) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_paymentCharge:
        m2 := &TLPaymentCharge{&PaymentCharge_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// paymentCharge#ea02c27e id:string provider_charge_id:string = PaymentCharge;
func (m *PaymentCharge) To_PaymentCharge() *TLPaymentCharge {
    return &TLPaymentCharge{
        Data2: m.Data2,
    }
}



// paymentCharge#ea02c27e id:string provider_charge_id:string = PaymentCharge;
func (m *TLPaymentCharge) To_PaymentCharge() *PaymentCharge {
    return &PaymentCharge{
        Constructor: TLConstructor_CRC32_paymentCharge,
        Data2: m.Data2,
    }
}


func (m *TLPaymentCharge) SetId(v string) { m.Data2.Id = v }
func (m *TLPaymentCharge) GetId() string { return m.Data2.Id }

func (m *TLPaymentCharge) SetProviderChargeId(v string) { m.Data2.ProviderChargeId = v }
func (m *TLPaymentCharge) GetProviderChargeId() string { return m.Data2.ProviderChargeId }


func NewTLPaymentCharge() * TLPaymentCharge {
    return &TLPaymentCharge{ Data2: &PaymentCharge_Data{} }
}

func (m* TLPaymentCharge) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_paymentCharge))

    x.String(m.GetId())
    x.String(m.GetProviderChargeId())

    return x.buf
}

func (m* TLPaymentCharge) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.String())
    m.SetProviderChargeId(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// LangPackString <--
//  + TL_LangPackString
//  + TL_LangPackStringPluralized
//  + TL_LangPackStringDeleted
//

func (m *LangPackString) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_langPackString:
        t := m.To_LangPackString()
        return t.Encode()
    case TLConstructor_CRC32_langPackStringPluralized:
        t := m.To_LangPackStringPluralized()
        return t.Encode()
    case TLConstructor_CRC32_langPackStringDeleted:
        t := m.To_LangPackStringDeleted()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *LangPackString) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_langPackString:
        m2 := &TLLangPackString{&LangPackString_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_langPackStringPluralized:
        m2 := &TLLangPackStringPluralized{&LangPackString_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_langPackStringDeleted:
        m2 := &TLLangPackStringDeleted{&LangPackString_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// langPackString#cad181f6 key:string value:string = LangPackString;
func (m *LangPackString) To_LangPackString() *TLLangPackString {
    return &TLLangPackString{
        Data2: m.Data2,
    }
}

// langPackStringPluralized#6c47ac9f flags:# key:string zero_value:flags.0?string one_value:flags.1?string two_value:flags.2?string few_value:flags.3?string many_value:flags.4?string other_value:string = LangPackString;
func (m *LangPackString) To_LangPackStringPluralized() *TLLangPackStringPluralized {
    return &TLLangPackStringPluralized{
        Data2: m.Data2,
    }
}

// langPackStringDeleted#2979eeb2 key:string = LangPackString;
func (m *LangPackString) To_LangPackStringDeleted() *TLLangPackStringDeleted {
    return &TLLangPackStringDeleted{
        Data2: m.Data2,
    }
}



// langPackString#cad181f6 key:string value:string = LangPackString;
func (m *TLLangPackString) To_LangPackString() *LangPackString {
    return &LangPackString{
        Constructor: TLConstructor_CRC32_langPackString,
        Data2: m.Data2,
    }
}


func (m *TLLangPackString) SetKey(v string) { m.Data2.Key = v }
func (m *TLLangPackString) GetKey() string { return m.Data2.Key }

func (m *TLLangPackString) SetValue(v string) { m.Data2.Value = v }
func (m *TLLangPackString) GetValue() string { return m.Data2.Value }


func NewTLLangPackString() * TLLangPackString {
    return &TLLangPackString{ Data2: &LangPackString_Data{} }
}

func (m* TLLangPackString) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_langPackString))

    x.String(m.GetKey())
    x.String(m.GetValue())

    return x.buf
}

func (m* TLLangPackString) Decode(dbuf *DecodeBuf) error {
    m.SetKey(dbuf.String())
    m.SetValue(dbuf.String())

    return dbuf.err
}
// langPackStringPluralized#6c47ac9f flags:# key:string zero_value:flags.0?string one_value:flags.1?string two_value:flags.2?string few_value:flags.3?string many_value:flags.4?string other_value:string = LangPackString;
func (m *TLLangPackStringPluralized) To_LangPackString() *LangPackString {
    return &LangPackString{
        Constructor: TLConstructor_CRC32_langPackStringPluralized,
        Data2: m.Data2,
    }
}


func (m *TLLangPackStringPluralized) SetKey(v string) { m.Data2.Key = v }
func (m *TLLangPackStringPluralized) GetKey() string { return m.Data2.Key }

func (m *TLLangPackStringPluralized) SetZeroValue(v string) { m.Data2.ZeroValue = v }
func (m *TLLangPackStringPluralized) GetZeroValue() string { return m.Data2.ZeroValue }

func (m *TLLangPackStringPluralized) SetOneValue(v string) { m.Data2.OneValue = v }
func (m *TLLangPackStringPluralized) GetOneValue() string { return m.Data2.OneValue }

func (m *TLLangPackStringPluralized) SetTwoValue(v string) { m.Data2.TwoValue = v }
func (m *TLLangPackStringPluralized) GetTwoValue() string { return m.Data2.TwoValue }

func (m *TLLangPackStringPluralized) SetFewValue(v string) { m.Data2.FewValue = v }
func (m *TLLangPackStringPluralized) GetFewValue() string { return m.Data2.FewValue }

func (m *TLLangPackStringPluralized) SetManyValue(v string) { m.Data2.ManyValue = v }
func (m *TLLangPackStringPluralized) GetManyValue() string { return m.Data2.ManyValue }

func (m *TLLangPackStringPluralized) SetOtherValue(v string) { m.Data2.OtherValue = v }
func (m *TLLangPackStringPluralized) GetOtherValue() string { return m.Data2.OtherValue }


func NewTLLangPackStringPluralized() * TLLangPackStringPluralized {
    return &TLLangPackStringPluralized{ Data2: &LangPackString_Data{} }
}

func (m* TLLangPackStringPluralized) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_langPackStringPluralized))

    // flags
    var flags uint32 = 0
    if m.GetZeroValue() != "" { flags |= 1 << 0 }
    if m.GetOneValue() != "" { flags |= 1 << 1 }
    if m.GetTwoValue() != "" { flags |= 1 << 2 }
    if m.GetFewValue() != "" { flags |= 1 << 3 }
    if m.GetManyValue() != "" { flags |= 1 << 4 }
	x.UInt(flags)

    x.String(m.GetKey())
    if (flags & (1 << 0)) != 0 { x.String(m.GetZeroValue()) }
    if (flags & (1 << 1)) != 0 { x.String(m.GetOneValue()) }
    if (flags & (1 << 2)) != 0 { x.String(m.GetTwoValue()) }
    if (flags & (1 << 3)) != 0 { x.String(m.GetFewValue()) }
    if (flags & (1 << 4)) != 0 { x.String(m.GetManyValue()) }
    x.String(m.GetOtherValue())

    return x.buf
}

func (m* TLLangPackStringPluralized) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetKey(dbuf.String())
    if (flags & (1 << 0)) != 0 { m.SetZeroValue(dbuf.String()) }
    if (flags & (1 << 1)) != 0 { m.SetOneValue(dbuf.String()) }
    if (flags & (1 << 2)) != 0 { m.SetTwoValue(dbuf.String()) }
    if (flags & (1 << 3)) != 0 { m.SetFewValue(dbuf.String()) }
    if (flags & (1 << 4)) != 0 { m.SetManyValue(dbuf.String()) }
    m.SetOtherValue(dbuf.String())

    return dbuf.err
}
// langPackStringDeleted#2979eeb2 key:string = LangPackString;
func (m *TLLangPackStringDeleted) To_LangPackString() *LangPackString {
    return &LangPackString{
        Constructor: TLConstructor_CRC32_langPackStringDeleted,
        Data2: m.Data2,
    }
}


func (m *TLLangPackStringDeleted) SetKey(v string) { m.Data2.Key = v }
func (m *TLLangPackStringDeleted) GetKey() string { return m.Data2.Key }


func NewTLLangPackStringDeleted() * TLLangPackStringDeleted {
    return &TLLangPackStringDeleted{ Data2: &LangPackString_Data{} }
}

func (m* TLLangPackStringDeleted) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_langPackStringDeleted))

    x.String(m.GetKey())

    return x.buf
}

func (m* TLLangPackStringDeleted) Decode(dbuf *DecodeBuf) error {
    m.SetKey(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Auth_SentCode82 <--
//  + TL_AuthSentCode82
//

func (m *Auth_SentCode82) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_auth_sentCode82:
        t := m.To_AuthSentCode82()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Auth_SentCode82) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_auth_sentCode82:
        m2 := &TLAuthSentCode82{&Auth_SentCode82_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// auth.sentCode#38faab5f flags:# phone_registered:flags.0?true type:auth.SentCodeType phone_code_hash:string next_type:flags.1?auth.CodeType timeout:flags.2?int terms_of_service:flags.3?help.TermsOfService = auth.SentCode;
func (m *Auth_SentCode82) To_AuthSentCode82() *TLAuthSentCode82 {
    return &TLAuthSentCode82{
        Data2: m.Data2,
    }
}



// auth.sentCode#38faab5f flags:# phone_registered:flags.0?true type:auth.SentCodeType phone_code_hash:string next_type:flags.1?auth.CodeType timeout:flags.2?int terms_of_service:flags.3?help.TermsOfService = auth.SentCode;
func (m *TLAuthSentCode82) To_Auth_SentCode82() *Auth_SentCode82 {
    return &Auth_SentCode82{
        Constructor: TLConstructor_CRC32_auth_sentCode82,
        Data2: m.Data2,
    }
}


func (m *TLAuthSentCode82) SetPhoneRegistered(v bool) { m.Data2.PhoneRegistered = v }
func (m *TLAuthSentCode82) GetPhoneRegistered() bool { return m.Data2.PhoneRegistered }

func (m *TLAuthSentCode82) SetType(v *Auth_SentCodeType) { m.Data2.Type = v }
func (m *TLAuthSentCode82) GetType() *Auth_SentCodeType { return m.Data2.Type }

func (m *TLAuthSentCode82) SetPhoneCodeHash(v string) { m.Data2.PhoneCodeHash = v }
func (m *TLAuthSentCode82) GetPhoneCodeHash() string { return m.Data2.PhoneCodeHash }

func (m *TLAuthSentCode82) SetNextType(v *Auth_CodeType) { m.Data2.NextType = v }
func (m *TLAuthSentCode82) GetNextType() *Auth_CodeType { return m.Data2.NextType }

func (m *TLAuthSentCode82) SetTimeout(v int32) { m.Data2.Timeout = v }
func (m *TLAuthSentCode82) GetTimeout() int32 { return m.Data2.Timeout }

func (m *TLAuthSentCode82) SetTermsOfService(v *Help_TermsOfService) { m.Data2.TermsOfService = v }
func (m *TLAuthSentCode82) GetTermsOfService() *Help_TermsOfService { return m.Data2.TermsOfService }


func NewTLAuthSentCode82() * TLAuthSentCode82 {
    return &TLAuthSentCode82{ Data2: &Auth_SentCode82_Data{} }
}

func (m* TLAuthSentCode82) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_auth_sentCode82))

    // flags
    var flags uint32 = 0
    if m.GetPhoneRegistered() == true { flags |= 1 << 0 }
    if m.GetNextType() != nil { flags |= 1 << 1 }
    if m.GetTimeout() != 0 { flags |= 1 << 2 }
    if m.GetTermsOfService() != nil { flags |= 1 << 3 }
	x.UInt(flags)

    
    x.Bytes(m.GetType().Encode())
    x.String(m.GetPhoneCodeHash())
    if (flags & (1 << 1)) != 0 { x.Bytes(m.GetNextType().Encode()) }
    if (flags & (1 << 2)) != 0 { x.Int(m.GetTimeout()) }
    if (flags & (1 << 3)) != 0 { x.Bytes(m.GetTermsOfService().Encode()) }

    return x.buf
}

func (m* TLAuthSentCode82) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetPhoneRegistered(true) }
    m3 := &Auth_SentCodeType{}
    m3.Decode(dbuf)
    m.SetType(m3)
    m.SetPhoneCodeHash(dbuf.String())
    if (flags & (1 << 1)) != 0 {
 m5 := &Auth_CodeType{}
    m5.Decode(dbuf)
    m.SetNextType(m5) 
}
    if (flags & (1 << 2)) != 0 { m.SetTimeout(dbuf.Int()) }
    if (flags & (1 << 3)) != 0 {
 m7 := &Help_TermsOfService{}
    m7.Decode(dbuf)
    m.SetTermsOfService(m7) 
}

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputUser <--
//  + TL_InputUserEmpty
//  + TL_InputUserSelf
//  + TL_InputUser
//  + TL_InputUserFromMessage
//

func (m *InputUser) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputUserEmpty:
        t := m.To_InputUserEmpty()
        return t.Encode()
    case TLConstructor_CRC32_inputUserSelf:
        t := m.To_InputUserSelf()
        return t.Encode()
    case TLConstructor_CRC32_inputUser:
        t := m.To_InputUser()
        return t.Encode()
    case TLConstructor_CRC32_inputUserFromMessage:
        t := m.To_InputUserFromMessage()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputUser) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputUserEmpty:
        m2 := &TLInputUserEmpty{&InputUser_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputUserSelf:
        m2 := &TLInputUserSelf{&InputUser_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputUser:
        m2 := &TLInputUser{&InputUser_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputUserFromMessage:
        m2 := &TLInputUserFromMessage{&InputUser_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputUserEmpty#b98886cf = InputUser;
func (m *InputUser) To_InputUserEmpty() *TLInputUserEmpty {
    return &TLInputUserEmpty{
        Data2: m.Data2,
    }
}

// inputUserSelf#f7c1b13f = InputUser;
func (m *InputUser) To_InputUserSelf() *TLInputUserSelf {
    return &TLInputUserSelf{
        Data2: m.Data2,
    }
}

// inputUser#d8292816 user_id:int access_hash:long = InputUser;
func (m *InputUser) To_InputUser() *TLInputUser {
    return &TLInputUser{
        Data2: m.Data2,
    }
}

// inputUserFromMessage#2d117597 peer:InputPeer msg_id:int user_id:int = InputUser;
func (m *InputUser) To_InputUserFromMessage() *TLInputUserFromMessage {
    return &TLInputUserFromMessage{
        Data2: m.Data2,
    }
}



// inputUserEmpty#b98886cf = InputUser;
func (m *TLInputUserEmpty) To_InputUser() *InputUser {
    return &InputUser{
        Constructor: TLConstructor_CRC32_inputUserEmpty,
        Data2: m.Data2,
    }
}



func NewTLInputUserEmpty() * TLInputUserEmpty {
    return &TLInputUserEmpty{ Data2: &InputUser_Data{} }
}

func (m* TLInputUserEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputUserEmpty))


    return x.buf
}

func (m* TLInputUserEmpty) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputUserSelf#f7c1b13f = InputUser;
func (m *TLInputUserSelf) To_InputUser() *InputUser {
    return &InputUser{
        Constructor: TLConstructor_CRC32_inputUserSelf,
        Data2: m.Data2,
    }
}



func NewTLInputUserSelf() * TLInputUserSelf {
    return &TLInputUserSelf{ Data2: &InputUser_Data{} }
}

func (m* TLInputUserSelf) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputUserSelf))


    return x.buf
}

func (m* TLInputUserSelf) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputUser#d8292816 user_id:int access_hash:long = InputUser;
func (m *TLInputUser) To_InputUser() *InputUser {
    return &InputUser{
        Constructor: TLConstructor_CRC32_inputUser,
        Data2: m.Data2,
    }
}


func (m *TLInputUser) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLInputUser) GetUserId() int32 { return m.Data2.UserId }

func (m *TLInputUser) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputUser) GetAccessHash() int64 { return m.Data2.AccessHash }


func NewTLInputUser() * TLInputUser {
    return &TLInputUser{ Data2: &InputUser_Data{} }
}

func (m* TLInputUser) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputUser))

    x.Int(m.GetUserId())
    x.Long(m.GetAccessHash())

    return x.buf
}

func (m* TLInputUser) Decode(dbuf *DecodeBuf) error {
    m.SetUserId(dbuf.Int())
    m.SetAccessHash(dbuf.Long())

    return dbuf.err
}
// inputUserFromMessage#2d117597 peer:InputPeer msg_id:int user_id:int = InputUser;
func (m *TLInputUserFromMessage) To_InputUser() *InputUser {
    return &InputUser{
        Constructor: TLConstructor_CRC32_inputUserFromMessage,
        Data2: m.Data2,
    }
}


func (m *TLInputUserFromMessage) SetPeer(v *InputPeer) { m.Data2.Peer = v }
func (m *TLInputUserFromMessage) GetPeer() *InputPeer { return m.Data2.Peer }

func (m *TLInputUserFromMessage) SetMsgId(v int32) { m.Data2.MsgId = v }
func (m *TLInputUserFromMessage) GetMsgId() int32 { return m.Data2.MsgId }

func (m *TLInputUserFromMessage) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLInputUserFromMessage) GetUserId() int32 { return m.Data2.UserId }


func NewTLInputUserFromMessage() * TLInputUserFromMessage {
    return &TLInputUserFromMessage{ Data2: &InputUser_Data{} }
}

func (m* TLInputUserFromMessage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputUserFromMessage))

    x.Bytes(m.GetPeer().Encode())
    x.Int(m.GetMsgId())
    x.Int(m.GetUserId())

    return x.buf
}

func (m* TLInputUserFromMessage) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.SetPeer(m1)
    m.SetMsgId(dbuf.Int())
    m.SetUserId(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// ExportedMessageLink <--
//  + TL_ExportedMessageLink
//  + TL_ExportedMessageLink114
//

func (m *ExportedMessageLink) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_exportedMessageLink:
        t := m.To_ExportedMessageLink()
        return t.Encode()
    case TLConstructor_CRC32_exportedMessageLink114:
        t := m.To_ExportedMessageLink114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *ExportedMessageLink) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_exportedMessageLink:
        m2 := &TLExportedMessageLink{&ExportedMessageLink_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_exportedMessageLink114:
        m2 := &TLExportedMessageLink114{&ExportedMessageLink_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// exportedMessageLink#1f486803 link:string = ExportedMessageLink;
func (m *ExportedMessageLink) To_ExportedMessageLink() *TLExportedMessageLink {
    return &TLExportedMessageLink{
        Data2: m.Data2,
    }
}

// exportedMessageLink#5dab1af4 link:string html:string = ExportedMessageLink;
func (m *ExportedMessageLink) To_ExportedMessageLink114() *TLExportedMessageLink114 {
    return &TLExportedMessageLink114{
        Data2: m.Data2,
    }
}



// exportedMessageLink#1f486803 link:string = ExportedMessageLink;
func (m *TLExportedMessageLink) To_ExportedMessageLink() *ExportedMessageLink {
    return &ExportedMessageLink{
        Constructor: TLConstructor_CRC32_exportedMessageLink,
        Data2: m.Data2,
    }
}


func (m *TLExportedMessageLink) SetLink(v string) { m.Data2.Link = v }
func (m *TLExportedMessageLink) GetLink() string { return m.Data2.Link }


func NewTLExportedMessageLink() * TLExportedMessageLink {
    return &TLExportedMessageLink{ Data2: &ExportedMessageLink_Data{} }
}

func (m* TLExportedMessageLink) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_exportedMessageLink))

    x.String(m.GetLink())

    return x.buf
}

func (m* TLExportedMessageLink) Decode(dbuf *DecodeBuf) error {
    m.SetLink(dbuf.String())

    return dbuf.err
}
// exportedMessageLink#5dab1af4 link:string html:string = ExportedMessageLink;
func (m *TLExportedMessageLink114) To_ExportedMessageLink() *ExportedMessageLink {
    return &ExportedMessageLink{
        Constructor: TLConstructor_CRC32_exportedMessageLink114,
        Data2: m.Data2,
    }
}


func (m *TLExportedMessageLink114) SetLink(v string) { m.Data2.Link = v }
func (m *TLExportedMessageLink114) GetLink() string { return m.Data2.Link }

func (m *TLExportedMessageLink114) SetHtml(v string) { m.Data2.Html = v }
func (m *TLExportedMessageLink114) GetHtml() string { return m.Data2.Html }


func NewTLExportedMessageLink114() * TLExportedMessageLink114 {
    return &TLExportedMessageLink114{ Data2: &ExportedMessageLink_Data{} }
}

func (m* TLExportedMessageLink114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_exportedMessageLink114))

    x.String(m.GetLink())
    x.String(m.GetHtml())

    return x.buf
}

func (m* TLExportedMessageLink114) Decode(dbuf *DecodeBuf) error {
    m.SetLink(dbuf.String())
    m.SetHtml(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// LabeledPrice <--
//  + TL_LabeledPrice
//

func (m *LabeledPrice) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_labeledPrice:
        t := m.To_LabeledPrice()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *LabeledPrice) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_labeledPrice:
        m2 := &TLLabeledPrice{&LabeledPrice_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// labeledPrice#cb296bf8 label:string amount:long = LabeledPrice;
func (m *LabeledPrice) To_LabeledPrice() *TLLabeledPrice {
    return &TLLabeledPrice{
        Data2: m.Data2,
    }
}



// labeledPrice#cb296bf8 label:string amount:long = LabeledPrice;
func (m *TLLabeledPrice) To_LabeledPrice() *LabeledPrice {
    return &LabeledPrice{
        Constructor: TLConstructor_CRC32_labeledPrice,
        Data2: m.Data2,
    }
}


func (m *TLLabeledPrice) SetLabel(v string) { m.Data2.Label = v }
func (m *TLLabeledPrice) GetLabel() string { return m.Data2.Label }

func (m *TLLabeledPrice) SetAmount(v int64) { m.Data2.Amount = v }
func (m *TLLabeledPrice) GetAmount() int64 { return m.Data2.Amount }


func NewTLLabeledPrice() * TLLabeledPrice {
    return &TLLabeledPrice{ Data2: &LabeledPrice_Data{} }
}

func (m* TLLabeledPrice) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_labeledPrice))

    x.String(m.GetLabel())
    x.Long(m.GetAmount())

    return x.buf
}

func (m* TLLabeledPrice) Decode(dbuf *DecodeBuf) error {
    m.SetLabel(dbuf.String())
    m.SetAmount(dbuf.Long())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// LangPackDifference <--
//  + TL_LangPackDifference
//

func (m *LangPackDifference) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_langPackDifference:
        t := m.To_LangPackDifference()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *LangPackDifference) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_langPackDifference:
        m2 := &TLLangPackDifference{&LangPackDifference_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// langPackDifference#f385c1f6 lang_code:string from_version:int version:int strings:Vector<LangPackString> = LangPackDifference;
func (m *LangPackDifference) To_LangPackDifference() *TLLangPackDifference {
    return &TLLangPackDifference{
        Data2: m.Data2,
    }
}



// langPackDifference#f385c1f6 lang_code:string from_version:int version:int strings:Vector<LangPackString> = LangPackDifference;
func (m *TLLangPackDifference) To_LangPackDifference() *LangPackDifference {
    return &LangPackDifference{
        Constructor: TLConstructor_CRC32_langPackDifference,
        Data2: m.Data2,
    }
}


func (m *TLLangPackDifference) SetLangCode(v string) { m.Data2.LangCode = v }
func (m *TLLangPackDifference) GetLangCode() string { return m.Data2.LangCode }

func (m *TLLangPackDifference) SetFromVersion(v int32) { m.Data2.FromVersion = v }
func (m *TLLangPackDifference) GetFromVersion() int32 { return m.Data2.FromVersion }

func (m *TLLangPackDifference) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLLangPackDifference) GetVersion() int32 { return m.Data2.Version }

func (m *TLLangPackDifference) SetStrings(v []*LangPackString) { m.Data2.Strings = v }
func (m *TLLangPackDifference) GetStrings() []*LangPackString { return m.Data2.Strings }


func NewTLLangPackDifference() * TLLangPackDifference {
    return &TLLangPackDifference{ Data2: &LangPackDifference_Data{} }
}

func (m* TLLangPackDifference) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_langPackDifference))

    x.String(m.GetLangCode())
    x.Int(m.GetFromVersion())
    x.Int(m.GetVersion())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetStrings())))
for _, v := range m.GetStrings() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLLangPackDifference) Decode(dbuf *DecodeBuf) error {
    m.SetLangCode(dbuf.String())
    m.SetFromVersion(dbuf.Int())
    m.SetVersion(dbuf.Int())
    c4 := dbuf.Int()
if c4 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
	return dbuf.err
}
l4 := dbuf.Int()
v4 := make([]*LangPackString, l4)
for i := int32(0); i < l4; i++ {
	v4[i] = &LangPackString{}
	v4[i].Decode(dbuf)
}
m.SetStrings(v4)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Config82 <--
//  + TL_Config82
//

func (m *Config82) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_config82:
        t := m.To_Config82()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Config82) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_config82:
        m2 := &TLConfig82{&Config82_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// config#3213dbba flags:# phonecalls_enabled:flags.1?true default_p2p_contacts:flags.3?true preload_featured_stickers:flags.4?true ignore_phone_entities:flags.5?true revoke_pm_inbox:flags.6?true blocked_mode:flags.8?true date:int expires:int test_mode:Bool this_dc:int dc_options:Vector<DcOption> dc_txt_domain_name:string chat_size_max:int megagroup_size_max:int forwarded_count_max:int online_update_period_ms:int offline_blur_timeout_ms:int offline_idle_timeout_ms:int online_cloud_timeout_ms:int notify_cloud_delay_ms:int notify_default_delay_ms:int push_chat_period_ms:int push_chat_limit:int saved_gifs_limit:int edit_time_limit:int revoke_time_limit:int revoke_pm_time_limit:int rating_e_decay:int stickers_recent_limit:int stickers_faved_limit:int channels_read_media_period:int tmp_sessions:flags.0?int pinned_dialogs_count_max:int call_receive_timeout_ms:int call_ring_timeout_ms:int call_connect_timeout_ms:int call_packet_timeout_ms:int me_url_prefix:string autoupdate_url_prefix:flags.7?string gif_search_username:flags.9?string venue_search_username:flags.10?string img_search_username:flags.11?string static_maps_provider:flags.12?string caption_length_max:int message_length_max:int webfile_dc_id:int suggested_lang_code:flags.2?string lang_pack_version:flags.2?int = Config;
func (m *Config82) To_Config82() *TLConfig82 {
    return &TLConfig82{
        Data2: m.Data2,
    }
}



// config#3213dbba flags:# phonecalls_enabled:flags.1?true default_p2p_contacts:flags.3?true preload_featured_stickers:flags.4?true ignore_phone_entities:flags.5?true revoke_pm_inbox:flags.6?true blocked_mode:flags.8?true date:int expires:int test_mode:Bool this_dc:int dc_options:Vector<DcOption> dc_txt_domain_name:string chat_size_max:int megagroup_size_max:int forwarded_count_max:int online_update_period_ms:int offline_blur_timeout_ms:int offline_idle_timeout_ms:int online_cloud_timeout_ms:int notify_cloud_delay_ms:int notify_default_delay_ms:int push_chat_period_ms:int push_chat_limit:int saved_gifs_limit:int edit_time_limit:int revoke_time_limit:int revoke_pm_time_limit:int rating_e_decay:int stickers_recent_limit:int stickers_faved_limit:int channels_read_media_period:int tmp_sessions:flags.0?int pinned_dialogs_count_max:int call_receive_timeout_ms:int call_ring_timeout_ms:int call_connect_timeout_ms:int call_packet_timeout_ms:int me_url_prefix:string autoupdate_url_prefix:flags.7?string gif_search_username:flags.9?string venue_search_username:flags.10?string img_search_username:flags.11?string static_maps_provider:flags.12?string caption_length_max:int message_length_max:int webfile_dc_id:int suggested_lang_code:flags.2?string lang_pack_version:flags.2?int = Config;
func (m *TLConfig82) To_Config82() *Config82 {
    return &Config82{
        Constructor: TLConstructor_CRC32_config82,
        Data2: m.Data2,
    }
}


func (m *TLConfig82) SetPhonecallsEnabled(v bool) { m.Data2.PhonecallsEnabled = v }
func (m *TLConfig82) GetPhonecallsEnabled() bool { return m.Data2.PhonecallsEnabled }

func (m *TLConfig82) SetDefaultP2pContacts(v bool) { m.Data2.DefaultP2PContacts = v }
func (m *TLConfig82) GetDefaultP2pContacts() bool { return m.Data2.DefaultP2PContacts }

func (m *TLConfig82) SetPreloadFeaturedStickers(v bool) { m.Data2.PreloadFeaturedStickers = v }
func (m *TLConfig82) GetPreloadFeaturedStickers() bool { return m.Data2.PreloadFeaturedStickers }

func (m *TLConfig82) SetIgnorePhoneEntities(v bool) { m.Data2.IgnorePhoneEntities = v }
func (m *TLConfig82) GetIgnorePhoneEntities() bool { return m.Data2.IgnorePhoneEntities }

func (m *TLConfig82) SetRevokePmInbox(v bool) { m.Data2.RevokePmInbox = v }
func (m *TLConfig82) GetRevokePmInbox() bool { return m.Data2.RevokePmInbox }

func (m *TLConfig82) SetBlockedMode(v bool) { m.Data2.BlockedMode = v }
func (m *TLConfig82) GetBlockedMode() bool { return m.Data2.BlockedMode }

func (m *TLConfig82) SetDate(v int32) { m.Data2.Date = v }
func (m *TLConfig82) GetDate() int32 { return m.Data2.Date }

func (m *TLConfig82) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLConfig82) GetExpires() int32 { return m.Data2.Expires }

func (m *TLConfig82) SetTestMode(v *Bool) { m.Data2.TestMode = v }
func (m *TLConfig82) GetTestMode() *Bool { return m.Data2.TestMode }

func (m *TLConfig82) SetThisDc(v int32) { m.Data2.ThisDc = v }
func (m *TLConfig82) GetThisDc() int32 { return m.Data2.ThisDc }

func (m *TLConfig82) SetDcOptions(v []*DcOption82) { m.Data2.DcOptions = v }
func (m *TLConfig82) GetDcOptions() []*DcOption82 { return m.Data2.DcOptions }

func (m *TLConfig82) SetDcTxtDomainName(v string) { m.Data2.DcTxtDomainName = v }
func (m *TLConfig82) GetDcTxtDomainName() string { return m.Data2.DcTxtDomainName }

func (m *TLConfig82) SetChatSizeMax(v int32) { m.Data2.ChatSizeMax = v }
func (m *TLConfig82) GetChatSizeMax() int32 { return m.Data2.ChatSizeMax }

func (m *TLConfig82) SetMegagroupSizeMax(v int32) { m.Data2.MegagroupSizeMax = v }
func (m *TLConfig82) GetMegagroupSizeMax() int32 { return m.Data2.MegagroupSizeMax }

func (m *TLConfig82) SetForwardedCountMax(v int32) { m.Data2.ForwardedCountMax = v }
func (m *TLConfig82) GetForwardedCountMax() int32 { return m.Data2.ForwardedCountMax }

func (m *TLConfig82) SetOnlineUpdatePeriodMs(v int32) { m.Data2.OnlineUpdatePeriodMs = v }
func (m *TLConfig82) GetOnlineUpdatePeriodMs() int32 { return m.Data2.OnlineUpdatePeriodMs }

func (m *TLConfig82) SetOfflineBlurTimeoutMs(v int32) { m.Data2.OfflineBlurTimeoutMs = v }
func (m *TLConfig82) GetOfflineBlurTimeoutMs() int32 { return m.Data2.OfflineBlurTimeoutMs }

func (m *TLConfig82) SetOfflineIdleTimeoutMs(v int32) { m.Data2.OfflineIdleTimeoutMs = v }
func (m *TLConfig82) GetOfflineIdleTimeoutMs() int32 { return m.Data2.OfflineIdleTimeoutMs }

func (m *TLConfig82) SetOnlineCloudTimeoutMs(v int32) { m.Data2.OnlineCloudTimeoutMs = v }
func (m *TLConfig82) GetOnlineCloudTimeoutMs() int32 { return m.Data2.OnlineCloudTimeoutMs }

func (m *TLConfig82) SetNotifyCloudDelayMs(v int32) { m.Data2.NotifyCloudDelayMs = v }
func (m *TLConfig82) GetNotifyCloudDelayMs() int32 { return m.Data2.NotifyCloudDelayMs }

func (m *TLConfig82) SetNotifyDefaultDelayMs(v int32) { m.Data2.NotifyDefaultDelayMs = v }
func (m *TLConfig82) GetNotifyDefaultDelayMs() int32 { return m.Data2.NotifyDefaultDelayMs }

func (m *TLConfig82) SetPushChatPeriodMs(v int32) { m.Data2.PushChatPeriodMs = v }
func (m *TLConfig82) GetPushChatPeriodMs() int32 { return m.Data2.PushChatPeriodMs }

func (m *TLConfig82) SetPushChatLimit(v int32) { m.Data2.PushChatLimit = v }
func (m *TLConfig82) GetPushChatLimit() int32 { return m.Data2.PushChatLimit }

func (m *TLConfig82) SetSavedGifsLimit(v int32) { m.Data2.SavedGifsLimit = v }
func (m *TLConfig82) GetSavedGifsLimit() int32 { return m.Data2.SavedGifsLimit }

func (m *TLConfig82) SetEditTimeLimit(v int32) { m.Data2.EditTimeLimit = v }
func (m *TLConfig82) GetEditTimeLimit() int32 { return m.Data2.EditTimeLimit }

func (m *TLConfig82) SetRevokeTimeLimit(v int32) { m.Data2.RevokeTimeLimit = v }
func (m *TLConfig82) GetRevokeTimeLimit() int32 { return m.Data2.RevokeTimeLimit }

func (m *TLConfig82) SetRevokePmTimeLimit(v int32) { m.Data2.RevokePmTimeLimit = v }
func (m *TLConfig82) GetRevokePmTimeLimit() int32 { return m.Data2.RevokePmTimeLimit }

func (m *TLConfig82) SetRatingEDecay(v int32) { m.Data2.RatingEDecay = v }
func (m *TLConfig82) GetRatingEDecay() int32 { return m.Data2.RatingEDecay }

func (m *TLConfig82) SetStickersRecentLimit(v int32) { m.Data2.StickersRecentLimit = v }
func (m *TLConfig82) GetStickersRecentLimit() int32 { return m.Data2.StickersRecentLimit }

func (m *TLConfig82) SetStickersFavedLimit(v int32) { m.Data2.StickersFavedLimit = v }
func (m *TLConfig82) GetStickersFavedLimit() int32 { return m.Data2.StickersFavedLimit }

func (m *TLConfig82) SetChannelsReadMediaPeriod(v int32) { m.Data2.ChannelsReadMediaPeriod = v }
func (m *TLConfig82) GetChannelsReadMediaPeriod() int32 { return m.Data2.ChannelsReadMediaPeriod }

func (m *TLConfig82) SetTmpSessions(v int32) { m.Data2.TmpSessions = v }
func (m *TLConfig82) GetTmpSessions() int32 { return m.Data2.TmpSessions }

func (m *TLConfig82) SetPinnedDialogsCountMax(v int32) { m.Data2.PinnedDialogsCountMax = v }
func (m *TLConfig82) GetPinnedDialogsCountMax() int32 { return m.Data2.PinnedDialogsCountMax }

func (m *TLConfig82) SetCallReceiveTimeoutMs(v int32) { m.Data2.CallReceiveTimeoutMs = v }
func (m *TLConfig82) GetCallReceiveTimeoutMs() int32 { return m.Data2.CallReceiveTimeoutMs }

func (m *TLConfig82) SetCallRingTimeoutMs(v int32) { m.Data2.CallRingTimeoutMs = v }
func (m *TLConfig82) GetCallRingTimeoutMs() int32 { return m.Data2.CallRingTimeoutMs }

func (m *TLConfig82) SetCallConnectTimeoutMs(v int32) { m.Data2.CallConnectTimeoutMs = v }
func (m *TLConfig82) GetCallConnectTimeoutMs() int32 { return m.Data2.CallConnectTimeoutMs }

func (m *TLConfig82) SetCallPacketTimeoutMs(v int32) { m.Data2.CallPacketTimeoutMs = v }
func (m *TLConfig82) GetCallPacketTimeoutMs() int32 { return m.Data2.CallPacketTimeoutMs }

func (m *TLConfig82) SetMeUrlPrefix(v string) { m.Data2.MeUrlPrefix = v }
func (m *TLConfig82) GetMeUrlPrefix() string { return m.Data2.MeUrlPrefix }

func (m *TLConfig82) SetAutoupdateUrlPrefix(v string) { m.Data2.AutoupdateUrlPrefix = v }
func (m *TLConfig82) GetAutoupdateUrlPrefix() string { return m.Data2.AutoupdateUrlPrefix }

func (m *TLConfig82) SetGifSearchUsername(v string) { m.Data2.GifSearchUsername = v }
func (m *TLConfig82) GetGifSearchUsername() string { return m.Data2.GifSearchUsername }

func (m *TLConfig82) SetVenueSearchUsername(v string) { m.Data2.VenueSearchUsername = v }
func (m *TLConfig82) GetVenueSearchUsername() string { return m.Data2.VenueSearchUsername }

func (m *TLConfig82) SetImgSearchUsername(v string) { m.Data2.ImgSearchUsername = v }
func (m *TLConfig82) GetImgSearchUsername() string { return m.Data2.ImgSearchUsername }

func (m *TLConfig82) SetStaticMapsProvider(v string) { m.Data2.StaticMapsProvider = v }
func (m *TLConfig82) GetStaticMapsProvider() string { return m.Data2.StaticMapsProvider }

func (m *TLConfig82) SetCaptionLengthMax(v int32) { m.Data2.CaptionLengthMax = v }
func (m *TLConfig82) GetCaptionLengthMax() int32 { return m.Data2.CaptionLengthMax }

func (m *TLConfig82) SetMessageLengthMax(v int32) { m.Data2.MessageLengthMax = v }
func (m *TLConfig82) GetMessageLengthMax() int32 { return m.Data2.MessageLengthMax }

func (m *TLConfig82) SetWebfileDcId(v int32) { m.Data2.WebfileDcId = v }
func (m *TLConfig82) GetWebfileDcId() int32 { return m.Data2.WebfileDcId }

func (m *TLConfig82) SetSuggestedLangCode(v string) { m.Data2.SuggestedLangCode = v }
func (m *TLConfig82) GetSuggestedLangCode() string { return m.Data2.SuggestedLangCode }

func (m *TLConfig82) SetLangPackVersion(v int32) { m.Data2.LangPackVersion = v }
func (m *TLConfig82) GetLangPackVersion() int32 { return m.Data2.LangPackVersion }


func NewTLConfig82() * TLConfig82 {
    return &TLConfig82{ Data2: &Config82_Data{} }
}

func (m* TLConfig82) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_config82))

    // flags
    var flags uint32 = 0
    if m.GetPhonecallsEnabled() == true { flags |= 1 << 1 }
    if m.GetDefaultP2pContacts() == true { flags |= 1 << 3 }
    if m.GetPreloadFeaturedStickers() == true { flags |= 1 << 4 }
    if m.GetIgnorePhoneEntities() == true { flags |= 1 << 5 }
    if m.GetRevokePmInbox() == true { flags |= 1 << 6 }
    if m.GetBlockedMode() == true { flags |= 1 << 8 }
    if m.GetTmpSessions() != 0 { flags |= 1 << 0 }
    if m.GetAutoupdateUrlPrefix() != "" { flags |= 1 << 7 }
    if m.GetGifSearchUsername() != "" { flags |= 1 << 9 }
    if m.GetVenueSearchUsername() != "" { flags |= 1 << 10 }
    if m.GetImgSearchUsername() != "" { flags |= 1 << 11 }
    if m.GetStaticMapsProvider() != "" { flags |= 1 << 12 }
    if m.GetSuggestedLangCode() != "" { flags |= 1 << 2 }
    if m.GetLangPackVersion() != 0 { flags |= 1 << 2 }
	x.UInt(flags)

    
    
    
    
    
    
    x.Int(m.GetDate())
    x.Int(m.GetExpires())
    x.Bytes(m.GetTestMode().Encode())
    x.Int(m.GetThisDc())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetDcOptions())))
for _, v := range m.GetDcOptions() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.String(m.GetDcTxtDomainName())
    x.Int(m.GetChatSizeMax())
    x.Int(m.GetMegagroupSizeMax())
    x.Int(m.GetForwardedCountMax())
    x.Int(m.GetOnlineUpdatePeriodMs())
    x.Int(m.GetOfflineBlurTimeoutMs())
    x.Int(m.GetOfflineIdleTimeoutMs())
    x.Int(m.GetOnlineCloudTimeoutMs())
    x.Int(m.GetNotifyCloudDelayMs())
    x.Int(m.GetNotifyDefaultDelayMs())
    x.Int(m.GetPushChatPeriodMs())
    x.Int(m.GetPushChatLimit())
    x.Int(m.GetSavedGifsLimit())
    x.Int(m.GetEditTimeLimit())
    x.Int(m.GetRevokeTimeLimit())
    x.Int(m.GetRevokePmTimeLimit())
    x.Int(m.GetRatingEDecay())
    x.Int(m.GetStickersRecentLimit())
    x.Int(m.GetStickersFavedLimit())
    x.Int(m.GetChannelsReadMediaPeriod())
    if (flags & (1 << 0)) != 0 { x.Int(m.GetTmpSessions()) }
    x.Int(m.GetPinnedDialogsCountMax())
    x.Int(m.GetCallReceiveTimeoutMs())
    x.Int(m.GetCallRingTimeoutMs())
    x.Int(m.GetCallConnectTimeoutMs())
    x.Int(m.GetCallPacketTimeoutMs())
    x.String(m.GetMeUrlPrefix())
    if (flags & (1 << 7)) != 0 { x.String(m.GetAutoupdateUrlPrefix()) }
    if (flags & (1 << 9)) != 0 { x.String(m.GetGifSearchUsername()) }
    if (flags & (1 << 10)) != 0 { x.String(m.GetVenueSearchUsername()) }
    if (flags & (1 << 11)) != 0 { x.String(m.GetImgSearchUsername()) }
    if (flags & (1 << 12)) != 0 { x.String(m.GetStaticMapsProvider()) }
    x.Int(m.GetCaptionLengthMax())
    x.Int(m.GetMessageLengthMax())
    x.Int(m.GetWebfileDcId())
    if (flags & (1 << 2)) != 0 { x.String(m.GetSuggestedLangCode()) }
    if (flags & (1 << 2)) != 0 { x.Int(m.GetLangPackVersion()) }

    return x.buf
}

func (m* TLConfig82) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 1)) != 0 { m.SetPhonecallsEnabled(true) }
    if (flags & (1 << 3)) != 0 { m.SetDefaultP2pContacts(true) }
    if (flags & (1 << 4)) != 0 { m.SetPreloadFeaturedStickers(true) }
    if (flags & (1 << 5)) != 0 { m.SetIgnorePhoneEntities(true) }
    if (flags & (1 << 6)) != 0 { m.SetRevokePmInbox(true) }
    if (flags & (1 << 8)) != 0 { m.SetBlockedMode(true) }
    m.SetDate(dbuf.Int())
    m.SetExpires(dbuf.Int())
    m10 := &Bool{}
    m10.Decode(dbuf)
    m.SetTestMode(m10)
    m.SetThisDc(dbuf.Int())
    c12 := dbuf.Int()
if c12 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 12, c12)
	return dbuf.err
}
l12 := dbuf.Int()
v12 := make([]*DcOption82, l12)
for i := int32(0); i < l12; i++ {
	v12[i] = &DcOption82{}
	v12[i].Decode(dbuf)
}
m.SetDcOptions(v12)

    m.SetDcTxtDomainName(dbuf.String())
    m.SetChatSizeMax(dbuf.Int())
    m.SetMegagroupSizeMax(dbuf.Int())
    m.SetForwardedCountMax(dbuf.Int())
    m.SetOnlineUpdatePeriodMs(dbuf.Int())
    m.SetOfflineBlurTimeoutMs(dbuf.Int())
    m.SetOfflineIdleTimeoutMs(dbuf.Int())
    m.SetOnlineCloudTimeoutMs(dbuf.Int())
    m.SetNotifyCloudDelayMs(dbuf.Int())
    m.SetNotifyDefaultDelayMs(dbuf.Int())
    m.SetPushChatPeriodMs(dbuf.Int())
    m.SetPushChatLimit(dbuf.Int())
    m.SetSavedGifsLimit(dbuf.Int())
    m.SetEditTimeLimit(dbuf.Int())
    m.SetRevokeTimeLimit(dbuf.Int())
    m.SetRevokePmTimeLimit(dbuf.Int())
    m.SetRatingEDecay(dbuf.Int())
    m.SetStickersRecentLimit(dbuf.Int())
    m.SetStickersFavedLimit(dbuf.Int())
    m.SetChannelsReadMediaPeriod(dbuf.Int())
    if (flags & (1 << 0)) != 0 { m.SetTmpSessions(dbuf.Int()) }
    m.SetPinnedDialogsCountMax(dbuf.Int())
    m.SetCallReceiveTimeoutMs(dbuf.Int())
    m.SetCallRingTimeoutMs(dbuf.Int())
    m.SetCallConnectTimeoutMs(dbuf.Int())
    m.SetCallPacketTimeoutMs(dbuf.Int())
    m.SetMeUrlPrefix(dbuf.String())
    if (flags & (1 << 7)) != 0 { m.SetAutoupdateUrlPrefix(dbuf.String()) }
    if (flags & (1 << 9)) != 0 { m.SetGifSearchUsername(dbuf.String()) }
    if (flags & (1 << 10)) != 0 { m.SetVenueSearchUsername(dbuf.String()) }
    if (flags & (1 << 11)) != 0 { m.SetImgSearchUsername(dbuf.String()) }
    if (flags & (1 << 12)) != 0 { m.SetStaticMapsProvider(dbuf.String()) }
    m.SetCaptionLengthMax(dbuf.Int())
    m.SetMessageLengthMax(dbuf.Int())
    m.SetWebfileDcId(dbuf.Int())
    if (flags & (1 << 2)) != 0 { m.SetSuggestedLangCode(dbuf.String()) }
    if (flags & (1 << 2)) != 0 { m.SetLangPackVersion(dbuf.Int()) }

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputDialogPeer <--
//  + TL_InputDialogPeer
//  + TL_InputDialogPeerFolder
//

func (m *InputDialogPeer) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputDialogPeer:
        t := m.To_InputDialogPeer()
        return t.Encode()
    case TLConstructor_CRC32_inputDialogPeerFolder:
        t := m.To_InputDialogPeerFolder()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputDialogPeer) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputDialogPeer:
        m2 := &TLInputDialogPeer{&InputDialogPeer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputDialogPeerFolder:
        m2 := &TLInputDialogPeerFolder{&InputDialogPeer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputDialogPeer#fcaafeb7 peer:InputPeer = InputDialogPeer;
func (m *InputDialogPeer) To_InputDialogPeer() *TLInputDialogPeer {
    return &TLInputDialogPeer{
        Data2: m.Data2,
    }
}

// inputDialogPeerFolder#64600527 folder_id:int = InputDialogPeer;
func (m *InputDialogPeer) To_InputDialogPeerFolder() *TLInputDialogPeerFolder {
    return &TLInputDialogPeerFolder{
        Data2: m.Data2,
    }
}



// inputDialogPeer#fcaafeb7 peer:InputPeer = InputDialogPeer;
func (m *TLInputDialogPeer) To_InputDialogPeer() *InputDialogPeer {
    return &InputDialogPeer{
        Constructor: TLConstructor_CRC32_inputDialogPeer,
        Data2: m.Data2,
    }
}


func (m *TLInputDialogPeer) SetPeer(v *InputPeer) { m.Data2.Peer = v }
func (m *TLInputDialogPeer) GetPeer() *InputPeer { return m.Data2.Peer }


func NewTLInputDialogPeer() * TLInputDialogPeer {
    return &TLInputDialogPeer{ Data2: &InputDialogPeer_Data{} }
}

func (m* TLInputDialogPeer) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputDialogPeer))

    x.Bytes(m.GetPeer().Encode())

    return x.buf
}

func (m* TLInputDialogPeer) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.SetPeer(m1)

    return dbuf.err
}
// inputDialogPeerFolder#64600527 folder_id:int = InputDialogPeer;
func (m *TLInputDialogPeerFolder) To_InputDialogPeer() *InputDialogPeer {
    return &InputDialogPeer{
        Constructor: TLConstructor_CRC32_inputDialogPeerFolder,
        Data2: m.Data2,
    }
}


func (m *TLInputDialogPeerFolder) SetFolderId(v int32) { m.Data2.FolderId = v }
func (m *TLInputDialogPeerFolder) GetFolderId() int32 { return m.Data2.FolderId }


func NewTLInputDialogPeerFolder() * TLInputDialogPeerFolder {
    return &TLInputDialogPeerFolder{ Data2: &InputDialogPeer_Data{} }
}

func (m* TLInputDialogPeerFolder) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputDialogPeerFolder))

    x.Int(m.GetFolderId())

    return x.buf
}

func (m* TLInputDialogPeerFolder) Decode(dbuf *DecodeBuf) error {
    m.SetFolderId(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// EncryptedChat <--
//  + TL_EncryptedChatEmpty
//  + TL_EncryptedChatWaiting
//  + TL_EncryptedChatRequested
//  + TL_EncryptedChat
//  + TL_EncryptedChatDiscarded
//  + TL_EncryptedChatRequested117
//

func (m *EncryptedChat) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_encryptedChatEmpty:
        t := m.To_EncryptedChatEmpty()
        return t.Encode()
    case TLConstructor_CRC32_encryptedChatWaiting:
        t := m.To_EncryptedChatWaiting()
        return t.Encode()
    case TLConstructor_CRC32_encryptedChatRequested:
        t := m.To_EncryptedChatRequested()
        return t.Encode()
    case TLConstructor_CRC32_encryptedChat:
        t := m.To_EncryptedChat()
        return t.Encode()
    case TLConstructor_CRC32_encryptedChatDiscarded:
        t := m.To_EncryptedChatDiscarded()
        return t.Encode()
    case TLConstructor_CRC32_encryptedChatRequested117:
        t := m.To_EncryptedChatRequested117()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *EncryptedChat) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_encryptedChatEmpty:
        m2 := &TLEncryptedChatEmpty{&EncryptedChat_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_encryptedChatWaiting:
        m2 := &TLEncryptedChatWaiting{&EncryptedChat_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_encryptedChatRequested:
        m2 := &TLEncryptedChatRequested{&EncryptedChat_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_encryptedChat:
        m2 := &TLEncryptedChat{&EncryptedChat_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_encryptedChatDiscarded:
        m2 := &TLEncryptedChatDiscarded{&EncryptedChat_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_encryptedChatRequested117:
        m2 := &TLEncryptedChatRequested117{&EncryptedChat_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// encryptedChatEmpty#ab7ec0a0 id:int = EncryptedChat;
func (m *EncryptedChat) To_EncryptedChatEmpty() *TLEncryptedChatEmpty {
    return &TLEncryptedChatEmpty{
        Data2: m.Data2,
    }
}

// encryptedChatWaiting#3bf703dc id:int access_hash:long date:int admin_id:int participant_id:int = EncryptedChat;
func (m *EncryptedChat) To_EncryptedChatWaiting() *TLEncryptedChatWaiting {
    return &TLEncryptedChatWaiting{
        Data2: m.Data2,
    }
}

// encryptedChatRequested#c878527e id:int access_hash:long date:int admin_id:int participant_id:int g_a:bytes = EncryptedChat;
func (m *EncryptedChat) To_EncryptedChatRequested() *TLEncryptedChatRequested {
    return &TLEncryptedChatRequested{
        Data2: m.Data2,
    }
}

// encryptedChat#fa56ce36 id:int access_hash:long date:int admin_id:int participant_id:int g_a_or_b:bytes key_fingerprint:long = EncryptedChat;
func (m *EncryptedChat) To_EncryptedChat() *TLEncryptedChat {
    return &TLEncryptedChat{
        Data2: m.Data2,
    }
}

// encryptedChatDiscarded#13d6dd27 id:int = EncryptedChat;
func (m *EncryptedChat) To_EncryptedChatDiscarded() *TLEncryptedChatDiscarded {
    return &TLEncryptedChatDiscarded{
        Data2: m.Data2,
    }
}

// encryptedChatRequested#62718a82 flags:# folder_id:flags.0?int id:int access_hash:long date:int admin_id:int participant_id:int g_a:bytes = EncryptedChat;
func (m *EncryptedChat) To_EncryptedChatRequested117() *TLEncryptedChatRequested117 {
    return &TLEncryptedChatRequested117{
        Data2: m.Data2,
    }
}



// encryptedChatEmpty#ab7ec0a0 id:int = EncryptedChat;
func (m *TLEncryptedChatEmpty) To_EncryptedChat() *EncryptedChat {
    return &EncryptedChat{
        Constructor: TLConstructor_CRC32_encryptedChatEmpty,
        Data2: m.Data2,
    }
}


func (m *TLEncryptedChatEmpty) SetId(v int32) { m.Data2.Id = v }
func (m *TLEncryptedChatEmpty) GetId() int32 { return m.Data2.Id }


func NewTLEncryptedChatEmpty() * TLEncryptedChatEmpty {
    return &TLEncryptedChatEmpty{ Data2: &EncryptedChat_Data{} }
}

func (m* TLEncryptedChatEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_encryptedChatEmpty))

    x.Int(m.GetId())

    return x.buf
}

func (m* TLEncryptedChatEmpty) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Int())

    return dbuf.err
}
// encryptedChatWaiting#3bf703dc id:int access_hash:long date:int admin_id:int participant_id:int = EncryptedChat;
func (m *TLEncryptedChatWaiting) To_EncryptedChat() *EncryptedChat {
    return &EncryptedChat{
        Constructor: TLConstructor_CRC32_encryptedChatWaiting,
        Data2: m.Data2,
    }
}


func (m *TLEncryptedChatWaiting) SetId(v int32) { m.Data2.Id = v }
func (m *TLEncryptedChatWaiting) GetId() int32 { return m.Data2.Id }

func (m *TLEncryptedChatWaiting) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLEncryptedChatWaiting) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLEncryptedChatWaiting) SetDate(v int32) { m.Data2.Date = v }
func (m *TLEncryptedChatWaiting) GetDate() int32 { return m.Data2.Date }

func (m *TLEncryptedChatWaiting) SetAdminId(v int32) { m.Data2.AdminId = v }
func (m *TLEncryptedChatWaiting) GetAdminId() int32 { return m.Data2.AdminId }

func (m *TLEncryptedChatWaiting) SetParticipantId(v int32) { m.Data2.ParticipantId = v }
func (m *TLEncryptedChatWaiting) GetParticipantId() int32 { return m.Data2.ParticipantId }


func NewTLEncryptedChatWaiting() * TLEncryptedChatWaiting {
    return &TLEncryptedChatWaiting{ Data2: &EncryptedChat_Data{} }
}

func (m* TLEncryptedChatWaiting) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_encryptedChatWaiting))

    x.Int(m.GetId())
    x.Long(m.GetAccessHash())
    x.Int(m.GetDate())
    x.Int(m.GetAdminId())
    x.Int(m.GetParticipantId())

    return x.buf
}

func (m* TLEncryptedChatWaiting) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Int())
    m.SetAccessHash(dbuf.Long())
    m.SetDate(dbuf.Int())
    m.SetAdminId(dbuf.Int())
    m.SetParticipantId(dbuf.Int())

    return dbuf.err
}
// encryptedChatRequested#c878527e id:int access_hash:long date:int admin_id:int participant_id:int g_a:bytes = EncryptedChat;
func (m *TLEncryptedChatRequested) To_EncryptedChat() *EncryptedChat {
    return &EncryptedChat{
        Constructor: TLConstructor_CRC32_encryptedChatRequested,
        Data2: m.Data2,
    }
}


func (m *TLEncryptedChatRequested) SetId(v int32) { m.Data2.Id = v }
func (m *TLEncryptedChatRequested) GetId() int32 { return m.Data2.Id }

func (m *TLEncryptedChatRequested) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLEncryptedChatRequested) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLEncryptedChatRequested) SetDate(v int32) { m.Data2.Date = v }
func (m *TLEncryptedChatRequested) GetDate() int32 { return m.Data2.Date }

func (m *TLEncryptedChatRequested) SetAdminId(v int32) { m.Data2.AdminId = v }
func (m *TLEncryptedChatRequested) GetAdminId() int32 { return m.Data2.AdminId }

func (m *TLEncryptedChatRequested) SetParticipantId(v int32) { m.Data2.ParticipantId = v }
func (m *TLEncryptedChatRequested) GetParticipantId() int32 { return m.Data2.ParticipantId }

func (m *TLEncryptedChatRequested) SetGA(v []byte) { m.Data2.GA = v }
func (m *TLEncryptedChatRequested) GetGA() []byte { return m.Data2.GA }


func NewTLEncryptedChatRequested() * TLEncryptedChatRequested {
    return &TLEncryptedChatRequested{ Data2: &EncryptedChat_Data{} }
}

func (m* TLEncryptedChatRequested) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_encryptedChatRequested))

    x.Int(m.GetId())
    x.Long(m.GetAccessHash())
    x.Int(m.GetDate())
    x.Int(m.GetAdminId())
    x.Int(m.GetParticipantId())
    x.StringBytes(m.GetGA())

    return x.buf
}

func (m* TLEncryptedChatRequested) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Int())
    m.SetAccessHash(dbuf.Long())
    m.SetDate(dbuf.Int())
    m.SetAdminId(dbuf.Int())
    m.SetParticipantId(dbuf.Int())
    m.SetGA(dbuf.StringBytes())

    return dbuf.err
}
// encryptedChat#fa56ce36 id:int access_hash:long date:int admin_id:int participant_id:int g_a_or_b:bytes key_fingerprint:long = EncryptedChat;
func (m *TLEncryptedChat) To_EncryptedChat() *EncryptedChat {
    return &EncryptedChat{
        Constructor: TLConstructor_CRC32_encryptedChat,
        Data2: m.Data2,
    }
}


func (m *TLEncryptedChat) SetId(v int32) { m.Data2.Id = v }
func (m *TLEncryptedChat) GetId() int32 { return m.Data2.Id }

func (m *TLEncryptedChat) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLEncryptedChat) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLEncryptedChat) SetDate(v int32) { m.Data2.Date = v }
func (m *TLEncryptedChat) GetDate() int32 { return m.Data2.Date }

func (m *TLEncryptedChat) SetAdminId(v int32) { m.Data2.AdminId = v }
func (m *TLEncryptedChat) GetAdminId() int32 { return m.Data2.AdminId }

func (m *TLEncryptedChat) SetParticipantId(v int32) { m.Data2.ParticipantId = v }
func (m *TLEncryptedChat) GetParticipantId() int32 { return m.Data2.ParticipantId }

func (m *TLEncryptedChat) SetGAOrB(v []byte) { m.Data2.GAOrB = v }
func (m *TLEncryptedChat) GetGAOrB() []byte { return m.Data2.GAOrB }

func (m *TLEncryptedChat) SetKeyFingerprint(v int64) { m.Data2.KeyFingerprint = v }
func (m *TLEncryptedChat) GetKeyFingerprint() int64 { return m.Data2.KeyFingerprint }


func NewTLEncryptedChat() * TLEncryptedChat {
    return &TLEncryptedChat{ Data2: &EncryptedChat_Data{} }
}

func (m* TLEncryptedChat) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_encryptedChat))

    x.Int(m.GetId())
    x.Long(m.GetAccessHash())
    x.Int(m.GetDate())
    x.Int(m.GetAdminId())
    x.Int(m.GetParticipantId())
    x.StringBytes(m.GetGAOrB())
    x.Long(m.GetKeyFingerprint())

    return x.buf
}

func (m* TLEncryptedChat) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Int())
    m.SetAccessHash(dbuf.Long())
    m.SetDate(dbuf.Int())
    m.SetAdminId(dbuf.Int())
    m.SetParticipantId(dbuf.Int())
    m.SetGAOrB(dbuf.StringBytes())
    m.SetKeyFingerprint(dbuf.Long())

    return dbuf.err
}
// encryptedChatDiscarded#13d6dd27 id:int = EncryptedChat;
func (m *TLEncryptedChatDiscarded) To_EncryptedChat() *EncryptedChat {
    return &EncryptedChat{
        Constructor: TLConstructor_CRC32_encryptedChatDiscarded,
        Data2: m.Data2,
    }
}


func (m *TLEncryptedChatDiscarded) SetId(v int32) { m.Data2.Id = v }
func (m *TLEncryptedChatDiscarded) GetId() int32 { return m.Data2.Id }


func NewTLEncryptedChatDiscarded() * TLEncryptedChatDiscarded {
    return &TLEncryptedChatDiscarded{ Data2: &EncryptedChat_Data{} }
}

func (m* TLEncryptedChatDiscarded) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_encryptedChatDiscarded))

    x.Int(m.GetId())

    return x.buf
}

func (m* TLEncryptedChatDiscarded) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Int())

    return dbuf.err
}
// encryptedChatRequested#62718a82 flags:# folder_id:flags.0?int id:int access_hash:long date:int admin_id:int participant_id:int g_a:bytes = EncryptedChat;
func (m *TLEncryptedChatRequested117) To_EncryptedChat() *EncryptedChat {
    return &EncryptedChat{
        Constructor: TLConstructor_CRC32_encryptedChatRequested117,
        Data2: m.Data2,
    }
}


func (m *TLEncryptedChatRequested117) SetFolderId(v int32) { m.Data2.FolderId = v }
func (m *TLEncryptedChatRequested117) GetFolderId() int32 { return m.Data2.FolderId }

func (m *TLEncryptedChatRequested117) SetId(v int32) { m.Data2.Id = v }
func (m *TLEncryptedChatRequested117) GetId() int32 { return m.Data2.Id }

func (m *TLEncryptedChatRequested117) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLEncryptedChatRequested117) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLEncryptedChatRequested117) SetDate(v int32) { m.Data2.Date = v }
func (m *TLEncryptedChatRequested117) GetDate() int32 { return m.Data2.Date }

func (m *TLEncryptedChatRequested117) SetAdminId(v int32) { m.Data2.AdminId = v }
func (m *TLEncryptedChatRequested117) GetAdminId() int32 { return m.Data2.AdminId }

func (m *TLEncryptedChatRequested117) SetParticipantId(v int32) { m.Data2.ParticipantId = v }
func (m *TLEncryptedChatRequested117) GetParticipantId() int32 { return m.Data2.ParticipantId }

func (m *TLEncryptedChatRequested117) SetGA(v []byte) { m.Data2.GA = v }
func (m *TLEncryptedChatRequested117) GetGA() []byte { return m.Data2.GA }


func NewTLEncryptedChatRequested117() * TLEncryptedChatRequested117 {
    return &TLEncryptedChatRequested117{ Data2: &EncryptedChat_Data{} }
}

func (m* TLEncryptedChatRequested117) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_encryptedChatRequested117))

    // flags
    var flags uint32 = 0
    if m.GetFolderId() != 0 { flags |= 1 << 0 }
	x.UInt(flags)

    if (flags & (1 << 0)) != 0 { x.Int(m.GetFolderId()) }
    x.Int(m.GetId())
    x.Long(m.GetAccessHash())
    x.Int(m.GetDate())
    x.Int(m.GetAdminId())
    x.Int(m.GetParticipantId())
    x.StringBytes(m.GetGA())

    return x.buf
}

func (m* TLEncryptedChatRequested117) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetFolderId(dbuf.Int()) }
    m.SetId(dbuf.Int())
    m.SetAccessHash(dbuf.Long())
    m.SetDate(dbuf.Int())
    m.SetAdminId(dbuf.Int())
    m.SetParticipantId(dbuf.Int())
    m.SetGA(dbuf.StringBytes())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// ChannelAdminLogEventAction <--
//  + TL_ChannelAdminLogEventActionChangeTitle
//  + TL_ChannelAdminLogEventActionChangeAbout
//  + TL_ChannelAdminLogEventActionChangeUsername
//  + TL_ChannelAdminLogEventActionChangePhoto
//  + TL_ChannelAdminLogEventActionToggleInvites
//  + TL_ChannelAdminLogEventActionToggleSignatures
//  + TL_ChannelAdminLogEventActionUpdatePinned
//  + TL_ChannelAdminLogEventActionEditMessage
//  + TL_ChannelAdminLogEventActionDeleteMessage
//  + TL_ChannelAdminLogEventActionParticipantJoin
//  + TL_ChannelAdminLogEventActionParticipantLeave
//  + TL_ChannelAdminLogEventActionParticipantInvite
//  + TL_ChannelAdminLogEventActionParticipantToggleBan
//  + TL_ChannelAdminLogEventActionParticipantToggleAdmin
//  + TL_ChannelAdminLogEventActionChangeStickerSet
//  + TL_ChannelAdminLogEventActionTogglePreHistoryHidden
//  + TL_ChannelAdminLogEventActionChangePhoto114
//  + TL_ChannelAdminLogEventActionDefaultBannedRights
//  + TL_ChannelAdminLogEventActionStopPoll
//  + TL_ChannelAdminLogEventActionChangeLinkedChat
//  + TL_ChannelAdminLogEventActionChangeLocation
//  + TL_ChannelAdminLogEventActionToggleSlowMode
//

func (m *ChannelAdminLogEventAction) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_channelAdminLogEventActionChangeTitle:
        t := m.To_ChannelAdminLogEventActionChangeTitle()
        return t.Encode()
    case TLConstructor_CRC32_channelAdminLogEventActionChangeAbout:
        t := m.To_ChannelAdminLogEventActionChangeAbout()
        return t.Encode()
    case TLConstructor_CRC32_channelAdminLogEventActionChangeUsername:
        t := m.To_ChannelAdminLogEventActionChangeUsername()
        return t.Encode()
    case TLConstructor_CRC32_channelAdminLogEventActionChangePhoto:
        t := m.To_ChannelAdminLogEventActionChangePhoto()
        return t.Encode()
    case TLConstructor_CRC32_channelAdminLogEventActionToggleInvites:
        t := m.To_ChannelAdminLogEventActionToggleInvites()
        return t.Encode()
    case TLConstructor_CRC32_channelAdminLogEventActionToggleSignatures:
        t := m.To_ChannelAdminLogEventActionToggleSignatures()
        return t.Encode()
    case TLConstructor_CRC32_channelAdminLogEventActionUpdatePinned:
        t := m.To_ChannelAdminLogEventActionUpdatePinned()
        return t.Encode()
    case TLConstructor_CRC32_channelAdminLogEventActionEditMessage:
        t := m.To_ChannelAdminLogEventActionEditMessage()
        return t.Encode()
    case TLConstructor_CRC32_channelAdminLogEventActionDeleteMessage:
        t := m.To_ChannelAdminLogEventActionDeleteMessage()
        return t.Encode()
    case TLConstructor_CRC32_channelAdminLogEventActionParticipantJoin:
        t := m.To_ChannelAdminLogEventActionParticipantJoin()
        return t.Encode()
    case TLConstructor_CRC32_channelAdminLogEventActionParticipantLeave:
        t := m.To_ChannelAdminLogEventActionParticipantLeave()
        return t.Encode()
    case TLConstructor_CRC32_channelAdminLogEventActionParticipantInvite:
        t := m.To_ChannelAdminLogEventActionParticipantInvite()
        return t.Encode()
    case TLConstructor_CRC32_channelAdminLogEventActionParticipantToggleBan:
        t := m.To_ChannelAdminLogEventActionParticipantToggleBan()
        return t.Encode()
    case TLConstructor_CRC32_channelAdminLogEventActionParticipantToggleAdmin:
        t := m.To_ChannelAdminLogEventActionParticipantToggleAdmin()
        return t.Encode()
    case TLConstructor_CRC32_channelAdminLogEventActionChangeStickerSet:
        t := m.To_ChannelAdminLogEventActionChangeStickerSet()
        return t.Encode()
    case TLConstructor_CRC32_channelAdminLogEventActionTogglePreHistoryHidden:
        t := m.To_ChannelAdminLogEventActionTogglePreHistoryHidden()
        return t.Encode()
    case TLConstructor_CRC32_channelAdminLogEventActionChangePhoto114:
        t := m.To_ChannelAdminLogEventActionChangePhoto114()
        return t.Encode()
    case TLConstructor_CRC32_channelAdminLogEventActionDefaultBannedRights:
        t := m.To_ChannelAdminLogEventActionDefaultBannedRights()
        return t.Encode()
    case TLConstructor_CRC32_channelAdminLogEventActionStopPoll:
        t := m.To_ChannelAdminLogEventActionStopPoll()
        return t.Encode()
    case TLConstructor_CRC32_channelAdminLogEventActionChangeLinkedChat:
        t := m.To_ChannelAdminLogEventActionChangeLinkedChat()
        return t.Encode()
    case TLConstructor_CRC32_channelAdminLogEventActionChangeLocation:
        t := m.To_ChannelAdminLogEventActionChangeLocation()
        return t.Encode()
    case TLConstructor_CRC32_channelAdminLogEventActionToggleSlowMode:
        t := m.To_ChannelAdminLogEventActionToggleSlowMode()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *ChannelAdminLogEventAction) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_channelAdminLogEventActionChangeTitle:
        m2 := &TLChannelAdminLogEventActionChangeTitle{&ChannelAdminLogEventAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelAdminLogEventActionChangeAbout:
        m2 := &TLChannelAdminLogEventActionChangeAbout{&ChannelAdminLogEventAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelAdminLogEventActionChangeUsername:
        m2 := &TLChannelAdminLogEventActionChangeUsername{&ChannelAdminLogEventAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelAdminLogEventActionChangePhoto:
        m2 := &TLChannelAdminLogEventActionChangePhoto{&ChannelAdminLogEventAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelAdminLogEventActionToggleInvites:
        m2 := &TLChannelAdminLogEventActionToggleInvites{&ChannelAdminLogEventAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelAdminLogEventActionToggleSignatures:
        m2 := &TLChannelAdminLogEventActionToggleSignatures{&ChannelAdminLogEventAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelAdminLogEventActionUpdatePinned:
        m2 := &TLChannelAdminLogEventActionUpdatePinned{&ChannelAdminLogEventAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelAdminLogEventActionEditMessage:
        m2 := &TLChannelAdminLogEventActionEditMessage{&ChannelAdminLogEventAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelAdminLogEventActionDeleteMessage:
        m2 := &TLChannelAdminLogEventActionDeleteMessage{&ChannelAdminLogEventAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelAdminLogEventActionParticipantJoin:
        m2 := &TLChannelAdminLogEventActionParticipantJoin{&ChannelAdminLogEventAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelAdminLogEventActionParticipantLeave:
        m2 := &TLChannelAdminLogEventActionParticipantLeave{&ChannelAdminLogEventAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelAdminLogEventActionParticipantInvite:
        m2 := &TLChannelAdminLogEventActionParticipantInvite{&ChannelAdminLogEventAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelAdminLogEventActionParticipantToggleBan:
        m2 := &TLChannelAdminLogEventActionParticipantToggleBan{&ChannelAdminLogEventAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelAdminLogEventActionParticipantToggleAdmin:
        m2 := &TLChannelAdminLogEventActionParticipantToggleAdmin{&ChannelAdminLogEventAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelAdminLogEventActionChangeStickerSet:
        m2 := &TLChannelAdminLogEventActionChangeStickerSet{&ChannelAdminLogEventAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelAdminLogEventActionTogglePreHistoryHidden:
        m2 := &TLChannelAdminLogEventActionTogglePreHistoryHidden{&ChannelAdminLogEventAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelAdminLogEventActionChangePhoto114:
        m2 := &TLChannelAdminLogEventActionChangePhoto114{&ChannelAdminLogEventAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelAdminLogEventActionDefaultBannedRights:
        m2 := &TLChannelAdminLogEventActionDefaultBannedRights{&ChannelAdminLogEventAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelAdminLogEventActionStopPoll:
        m2 := &TLChannelAdminLogEventActionStopPoll{&ChannelAdminLogEventAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelAdminLogEventActionChangeLinkedChat:
        m2 := &TLChannelAdminLogEventActionChangeLinkedChat{&ChannelAdminLogEventAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelAdminLogEventActionChangeLocation:
        m2 := &TLChannelAdminLogEventActionChangeLocation{&ChannelAdminLogEventAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelAdminLogEventActionToggleSlowMode:
        m2 := &TLChannelAdminLogEventActionToggleSlowMode{&ChannelAdminLogEventAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// channelAdminLogEventActionChangeTitle#e6dfb825 prev_value:string new_value:string = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionChangeTitle() *TLChannelAdminLogEventActionChangeTitle {
    return &TLChannelAdminLogEventActionChangeTitle{
        Data2: m.Data2,
    }
}

// channelAdminLogEventActionChangeAbout#55188a2e prev_value:string new_value:string = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionChangeAbout() *TLChannelAdminLogEventActionChangeAbout {
    return &TLChannelAdminLogEventActionChangeAbout{
        Data2: m.Data2,
    }
}

// channelAdminLogEventActionChangeUsername#6a4afc38 prev_value:string new_value:string = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionChangeUsername() *TLChannelAdminLogEventActionChangeUsername {
    return &TLChannelAdminLogEventActionChangeUsername{
        Data2: m.Data2,
    }
}

// channelAdminLogEventActionChangePhoto#b82f55c3 prev_photo:ChatPhoto new_photo:ChatPhoto = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionChangePhoto() *TLChannelAdminLogEventActionChangePhoto {
    return &TLChannelAdminLogEventActionChangePhoto{
        Data2: m.Data2,
    }
}

// channelAdminLogEventActionToggleInvites#1b7907ae new_value:Bool = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionToggleInvites() *TLChannelAdminLogEventActionToggleInvites {
    return &TLChannelAdminLogEventActionToggleInvites{
        Data2: m.Data2,
    }
}

// channelAdminLogEventActionToggleSignatures#26ae0971 new_value:Bool = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionToggleSignatures() *TLChannelAdminLogEventActionToggleSignatures {
    return &TLChannelAdminLogEventActionToggleSignatures{
        Data2: m.Data2,
    }
}

// channelAdminLogEventActionUpdatePinned#e9e82c18 message:Message = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionUpdatePinned() *TLChannelAdminLogEventActionUpdatePinned {
    return &TLChannelAdminLogEventActionUpdatePinned{
        Data2: m.Data2,
    }
}

// channelAdminLogEventActionEditMessage#709b2405 prev_message:Message new_message:Message = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionEditMessage() *TLChannelAdminLogEventActionEditMessage {
    return &TLChannelAdminLogEventActionEditMessage{
        Data2: m.Data2,
    }
}

// channelAdminLogEventActionDeleteMessage#42e047bb message:Message = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionDeleteMessage() *TLChannelAdminLogEventActionDeleteMessage {
    return &TLChannelAdminLogEventActionDeleteMessage{
        Data2: m.Data2,
    }
}

// channelAdminLogEventActionParticipantJoin#183040d3 = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionParticipantJoin() *TLChannelAdminLogEventActionParticipantJoin {
    return &TLChannelAdminLogEventActionParticipantJoin{
        Data2: m.Data2,
    }
}

// channelAdminLogEventActionParticipantLeave#f89777f2 = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionParticipantLeave() *TLChannelAdminLogEventActionParticipantLeave {
    return &TLChannelAdminLogEventActionParticipantLeave{
        Data2: m.Data2,
    }
}

// channelAdminLogEventActionParticipantInvite#e31c34d8 participant:ChannelParticipant = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionParticipantInvite() *TLChannelAdminLogEventActionParticipantInvite {
    return &TLChannelAdminLogEventActionParticipantInvite{
        Data2: m.Data2,
    }
}

// channelAdminLogEventActionParticipantToggleBan#e6d83d7e prev_participant:ChannelParticipant new_participant:ChannelParticipant = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionParticipantToggleBan() *TLChannelAdminLogEventActionParticipantToggleBan {
    return &TLChannelAdminLogEventActionParticipantToggleBan{
        Data2: m.Data2,
    }
}

// channelAdminLogEventActionParticipantToggleAdmin#d5676710 prev_participant:ChannelParticipant new_participant:ChannelParticipant = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionParticipantToggleAdmin() *TLChannelAdminLogEventActionParticipantToggleAdmin {
    return &TLChannelAdminLogEventActionParticipantToggleAdmin{
        Data2: m.Data2,
    }
}

// channelAdminLogEventActionChangeStickerSet#b1c3caa7 prev_stickerset:InputStickerSet new_stickerset:InputStickerSet = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionChangeStickerSet() *TLChannelAdminLogEventActionChangeStickerSet {
    return &TLChannelAdminLogEventActionChangeStickerSet{
        Data2: m.Data2,
    }
}

// channelAdminLogEventActionTogglePreHistoryHidden#5f5c95f1 new_value:Bool = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionTogglePreHistoryHidden() *TLChannelAdminLogEventActionTogglePreHistoryHidden {
    return &TLChannelAdminLogEventActionTogglePreHistoryHidden{
        Data2: m.Data2,
    }
}

// channelAdminLogEventActionChangePhoto#434bd2af prev_photo:Photo new_photo:Photo = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionChangePhoto114() *TLChannelAdminLogEventActionChangePhoto114 {
    return &TLChannelAdminLogEventActionChangePhoto114{
        Data2: m.Data2,
    }
}

// channelAdminLogEventActionDefaultBannedRights#2df5fc0a prev_banned_rights:ChatBannedRights new_banned_rights:ChatBannedRights = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionDefaultBannedRights() *TLChannelAdminLogEventActionDefaultBannedRights {
    return &TLChannelAdminLogEventActionDefaultBannedRights{
        Data2: m.Data2,
    }
}

// channelAdminLogEventActionStopPoll#8f079643 message:Message = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionStopPoll() *TLChannelAdminLogEventActionStopPoll {
    return &TLChannelAdminLogEventActionStopPoll{
        Data2: m.Data2,
    }
}

// channelAdminLogEventActionChangeLinkedChat#a26f881b prev_value:int new_value:int = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionChangeLinkedChat() *TLChannelAdminLogEventActionChangeLinkedChat {
    return &TLChannelAdminLogEventActionChangeLinkedChat{
        Data2: m.Data2,
    }
}

// channelAdminLogEventActionChangeLocation#e6b76ae prev_value:ChannelLocation new_value:ChannelLocation = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionChangeLocation() *TLChannelAdminLogEventActionChangeLocation {
    return &TLChannelAdminLogEventActionChangeLocation{
        Data2: m.Data2,
    }
}

// channelAdminLogEventActionToggleSlowMode#53909779 prev_value:int new_value:int = ChannelAdminLogEventAction;
func (m *ChannelAdminLogEventAction) To_ChannelAdminLogEventActionToggleSlowMode() *TLChannelAdminLogEventActionToggleSlowMode {
    return &TLChannelAdminLogEventActionToggleSlowMode{
        Data2: m.Data2,
    }
}



// channelAdminLogEventActionChangeTitle#e6dfb825 prev_value:string new_value:string = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionChangeTitle) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
    return &ChannelAdminLogEventAction{
        Constructor: TLConstructor_CRC32_channelAdminLogEventActionChangeTitle,
        Data2: m.Data2,
    }
}


func (m *TLChannelAdminLogEventActionChangeTitle) SetPrevValue(v string) { m.Data2.PrevValue_1 = v }
func (m *TLChannelAdminLogEventActionChangeTitle) GetPrevValue() string { return m.Data2.PrevValue_1 }

func (m *TLChannelAdminLogEventActionChangeTitle) SetNewValue(v string) { m.Data2.NewValue_2 = v }
func (m *TLChannelAdminLogEventActionChangeTitle) GetNewValue() string { return m.Data2.NewValue_2 }


func NewTLChannelAdminLogEventActionChangeTitle() * TLChannelAdminLogEventActionChangeTitle {
    return &TLChannelAdminLogEventActionChangeTitle{ Data2: &ChannelAdminLogEventAction_Data{} }
}

func (m* TLChannelAdminLogEventActionChangeTitle) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionChangeTitle))

    x.String(m.GetPrevValue())
    x.String(m.GetNewValue())

    return x.buf
}

func (m* TLChannelAdminLogEventActionChangeTitle) Decode(dbuf *DecodeBuf) error {
    m.SetPrevValue(dbuf.String())
    m.SetNewValue(dbuf.String())

    return dbuf.err
}
// channelAdminLogEventActionChangeAbout#55188a2e prev_value:string new_value:string = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionChangeAbout) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
    return &ChannelAdminLogEventAction{
        Constructor: TLConstructor_CRC32_channelAdminLogEventActionChangeAbout,
        Data2: m.Data2,
    }
}


func (m *TLChannelAdminLogEventActionChangeAbout) SetPrevValue(v string) { m.Data2.PrevValue_1 = v }
func (m *TLChannelAdminLogEventActionChangeAbout) GetPrevValue() string { return m.Data2.PrevValue_1 }

func (m *TLChannelAdminLogEventActionChangeAbout) SetNewValue(v string) { m.Data2.NewValue_2 = v }
func (m *TLChannelAdminLogEventActionChangeAbout) GetNewValue() string { return m.Data2.NewValue_2 }


func NewTLChannelAdminLogEventActionChangeAbout() * TLChannelAdminLogEventActionChangeAbout {
    return &TLChannelAdminLogEventActionChangeAbout{ Data2: &ChannelAdminLogEventAction_Data{} }
}

func (m* TLChannelAdminLogEventActionChangeAbout) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionChangeAbout))

    x.String(m.GetPrevValue())
    x.String(m.GetNewValue())

    return x.buf
}

func (m* TLChannelAdminLogEventActionChangeAbout) Decode(dbuf *DecodeBuf) error {
    m.SetPrevValue(dbuf.String())
    m.SetNewValue(dbuf.String())

    return dbuf.err
}
// channelAdminLogEventActionChangeUsername#6a4afc38 prev_value:string new_value:string = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionChangeUsername) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
    return &ChannelAdminLogEventAction{
        Constructor: TLConstructor_CRC32_channelAdminLogEventActionChangeUsername,
        Data2: m.Data2,
    }
}


func (m *TLChannelAdminLogEventActionChangeUsername) SetPrevValue(v string) { m.Data2.PrevValue_1 = v }
func (m *TLChannelAdminLogEventActionChangeUsername) GetPrevValue() string { return m.Data2.PrevValue_1 }

func (m *TLChannelAdminLogEventActionChangeUsername) SetNewValue(v string) { m.Data2.NewValue_2 = v }
func (m *TLChannelAdminLogEventActionChangeUsername) GetNewValue() string { return m.Data2.NewValue_2 }


func NewTLChannelAdminLogEventActionChangeUsername() * TLChannelAdminLogEventActionChangeUsername {
    return &TLChannelAdminLogEventActionChangeUsername{ Data2: &ChannelAdminLogEventAction_Data{} }
}

func (m* TLChannelAdminLogEventActionChangeUsername) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionChangeUsername))

    x.String(m.GetPrevValue())
    x.String(m.GetNewValue())

    return x.buf
}

func (m* TLChannelAdminLogEventActionChangeUsername) Decode(dbuf *DecodeBuf) error {
    m.SetPrevValue(dbuf.String())
    m.SetNewValue(dbuf.String())

    return dbuf.err
}
// channelAdminLogEventActionChangePhoto#b82f55c3 prev_photo:ChatPhoto new_photo:ChatPhoto = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionChangePhoto) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
    return &ChannelAdminLogEventAction{
        Constructor: TLConstructor_CRC32_channelAdminLogEventActionChangePhoto,
        Data2: m.Data2,
    }
}


func (m *TLChannelAdminLogEventActionChangePhoto) SetPrevPhoto(v *ChatPhoto) { m.Data2.PrevPhoto_3 = v }
func (m *TLChannelAdminLogEventActionChangePhoto) GetPrevPhoto() *ChatPhoto { return m.Data2.PrevPhoto_3 }

func (m *TLChannelAdminLogEventActionChangePhoto) SetNewPhoto(v *ChatPhoto) { m.Data2.NewPhoto_4 = v }
func (m *TLChannelAdminLogEventActionChangePhoto) GetNewPhoto() *ChatPhoto { return m.Data2.NewPhoto_4 }


func NewTLChannelAdminLogEventActionChangePhoto() * TLChannelAdminLogEventActionChangePhoto {
    return &TLChannelAdminLogEventActionChangePhoto{ Data2: &ChannelAdminLogEventAction_Data{} }
}

func (m* TLChannelAdminLogEventActionChangePhoto) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionChangePhoto))

    x.Bytes(m.GetPrevPhoto().Encode())
    x.Bytes(m.GetNewPhoto().Encode())

    return x.buf
}

func (m* TLChannelAdminLogEventActionChangePhoto) Decode(dbuf *DecodeBuf) error {
    m1 := &ChatPhoto{}
    m1.Decode(dbuf)
    m.SetPrevPhoto(m1)
    m2 := &ChatPhoto{}
    m2.Decode(dbuf)
    m.SetNewPhoto(m2)

    return dbuf.err
}
// channelAdminLogEventActionToggleInvites#1b7907ae new_value:Bool = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionToggleInvites) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
    return &ChannelAdminLogEventAction{
        Constructor: TLConstructor_CRC32_channelAdminLogEventActionToggleInvites,
        Data2: m.Data2,
    }
}


func (m *TLChannelAdminLogEventActionToggleInvites) SetNewValue(v *Bool) { m.Data2.NewValue_5 = v }
func (m *TLChannelAdminLogEventActionToggleInvites) GetNewValue() *Bool { return m.Data2.NewValue_5 }


func NewTLChannelAdminLogEventActionToggleInvites() * TLChannelAdminLogEventActionToggleInvites {
    return &TLChannelAdminLogEventActionToggleInvites{ Data2: &ChannelAdminLogEventAction_Data{} }
}

func (m* TLChannelAdminLogEventActionToggleInvites) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionToggleInvites))

    x.Bytes(m.GetNewValue().Encode())

    return x.buf
}

func (m* TLChannelAdminLogEventActionToggleInvites) Decode(dbuf *DecodeBuf) error {
    m1 := &Bool{}
    m1.Decode(dbuf)
    m.SetNewValue(m1)

    return dbuf.err
}
// channelAdminLogEventActionToggleSignatures#26ae0971 new_value:Bool = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionToggleSignatures) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
    return &ChannelAdminLogEventAction{
        Constructor: TLConstructor_CRC32_channelAdminLogEventActionToggleSignatures,
        Data2: m.Data2,
    }
}


func (m *TLChannelAdminLogEventActionToggleSignatures) SetNewValue(v *Bool) { m.Data2.NewValue_5 = v }
func (m *TLChannelAdminLogEventActionToggleSignatures) GetNewValue() *Bool { return m.Data2.NewValue_5 }


func NewTLChannelAdminLogEventActionToggleSignatures() * TLChannelAdminLogEventActionToggleSignatures {
    return &TLChannelAdminLogEventActionToggleSignatures{ Data2: &ChannelAdminLogEventAction_Data{} }
}

func (m* TLChannelAdminLogEventActionToggleSignatures) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionToggleSignatures))

    x.Bytes(m.GetNewValue().Encode())

    return x.buf
}

func (m* TLChannelAdminLogEventActionToggleSignatures) Decode(dbuf *DecodeBuf) error {
    m1 := &Bool{}
    m1.Decode(dbuf)
    m.SetNewValue(m1)

    return dbuf.err
}
// channelAdminLogEventActionUpdatePinned#e9e82c18 message:Message = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionUpdatePinned) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
    return &ChannelAdminLogEventAction{
        Constructor: TLConstructor_CRC32_channelAdminLogEventActionUpdatePinned,
        Data2: m.Data2,
    }
}


func (m *TLChannelAdminLogEventActionUpdatePinned) SetMessage(v *Message) { m.Data2.Message = v }
func (m *TLChannelAdminLogEventActionUpdatePinned) GetMessage() *Message { return m.Data2.Message }


func NewTLChannelAdminLogEventActionUpdatePinned() * TLChannelAdminLogEventActionUpdatePinned {
    return &TLChannelAdminLogEventActionUpdatePinned{ Data2: &ChannelAdminLogEventAction_Data{} }
}

func (m* TLChannelAdminLogEventActionUpdatePinned) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionUpdatePinned))

    x.Bytes(m.GetMessage().Encode())

    return x.buf
}

func (m* TLChannelAdminLogEventActionUpdatePinned) Decode(dbuf *DecodeBuf) error {
    m1 := &Message{}
    m1.Decode(dbuf)
    m.SetMessage(m1)

    return dbuf.err
}
// channelAdminLogEventActionEditMessage#709b2405 prev_message:Message new_message:Message = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionEditMessage) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
    return &ChannelAdminLogEventAction{
        Constructor: TLConstructor_CRC32_channelAdminLogEventActionEditMessage,
        Data2: m.Data2,
    }
}


func (m *TLChannelAdminLogEventActionEditMessage) SetPrevMessage(v *Message) { m.Data2.PrevMessage = v }
func (m *TLChannelAdminLogEventActionEditMessage) GetPrevMessage() *Message { return m.Data2.PrevMessage }

func (m *TLChannelAdminLogEventActionEditMessage) SetNewMessage(v *Message) { m.Data2.NewMessage = v }
func (m *TLChannelAdminLogEventActionEditMessage) GetNewMessage() *Message { return m.Data2.NewMessage }


func NewTLChannelAdminLogEventActionEditMessage() * TLChannelAdminLogEventActionEditMessage {
    return &TLChannelAdminLogEventActionEditMessage{ Data2: &ChannelAdminLogEventAction_Data{} }
}

func (m* TLChannelAdminLogEventActionEditMessage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionEditMessage))

    x.Bytes(m.GetPrevMessage().Encode())
    x.Bytes(m.GetNewMessage().Encode())

    return x.buf
}

func (m* TLChannelAdminLogEventActionEditMessage) Decode(dbuf *DecodeBuf) error {
    m1 := &Message{}
    m1.Decode(dbuf)
    m.SetPrevMessage(m1)
    m2 := &Message{}
    m2.Decode(dbuf)
    m.SetNewMessage(m2)

    return dbuf.err
}
// channelAdminLogEventActionDeleteMessage#42e047bb message:Message = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionDeleteMessage) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
    return &ChannelAdminLogEventAction{
        Constructor: TLConstructor_CRC32_channelAdminLogEventActionDeleteMessage,
        Data2: m.Data2,
    }
}


func (m *TLChannelAdminLogEventActionDeleteMessage) SetMessage(v *Message) { m.Data2.Message = v }
func (m *TLChannelAdminLogEventActionDeleteMessage) GetMessage() *Message { return m.Data2.Message }


func NewTLChannelAdminLogEventActionDeleteMessage() * TLChannelAdminLogEventActionDeleteMessage {
    return &TLChannelAdminLogEventActionDeleteMessage{ Data2: &ChannelAdminLogEventAction_Data{} }
}

func (m* TLChannelAdminLogEventActionDeleteMessage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionDeleteMessage))

    x.Bytes(m.GetMessage().Encode())

    return x.buf
}

func (m* TLChannelAdminLogEventActionDeleteMessage) Decode(dbuf *DecodeBuf) error {
    m1 := &Message{}
    m1.Decode(dbuf)
    m.SetMessage(m1)

    return dbuf.err
}
// channelAdminLogEventActionParticipantJoin#183040d3 = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionParticipantJoin) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
    return &ChannelAdminLogEventAction{
        Constructor: TLConstructor_CRC32_channelAdminLogEventActionParticipantJoin,
        Data2: m.Data2,
    }
}



func NewTLChannelAdminLogEventActionParticipantJoin() * TLChannelAdminLogEventActionParticipantJoin {
    return &TLChannelAdminLogEventActionParticipantJoin{ Data2: &ChannelAdminLogEventAction_Data{} }
}

func (m* TLChannelAdminLogEventActionParticipantJoin) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionParticipantJoin))


    return x.buf
}

func (m* TLChannelAdminLogEventActionParticipantJoin) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// channelAdminLogEventActionParticipantLeave#f89777f2 = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionParticipantLeave) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
    return &ChannelAdminLogEventAction{
        Constructor: TLConstructor_CRC32_channelAdminLogEventActionParticipantLeave,
        Data2: m.Data2,
    }
}



func NewTLChannelAdminLogEventActionParticipantLeave() * TLChannelAdminLogEventActionParticipantLeave {
    return &TLChannelAdminLogEventActionParticipantLeave{ Data2: &ChannelAdminLogEventAction_Data{} }
}

func (m* TLChannelAdminLogEventActionParticipantLeave) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionParticipantLeave))


    return x.buf
}

func (m* TLChannelAdminLogEventActionParticipantLeave) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// channelAdminLogEventActionParticipantInvite#e31c34d8 participant:ChannelParticipant = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionParticipantInvite) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
    return &ChannelAdminLogEventAction{
        Constructor: TLConstructor_CRC32_channelAdminLogEventActionParticipantInvite,
        Data2: m.Data2,
    }
}


func (m *TLChannelAdminLogEventActionParticipantInvite) SetParticipant(v *ChannelParticipant) { m.Data2.Participant = v }
func (m *TLChannelAdminLogEventActionParticipantInvite) GetParticipant() *ChannelParticipant { return m.Data2.Participant }


func NewTLChannelAdminLogEventActionParticipantInvite() * TLChannelAdminLogEventActionParticipantInvite {
    return &TLChannelAdminLogEventActionParticipantInvite{ Data2: &ChannelAdminLogEventAction_Data{} }
}

func (m* TLChannelAdminLogEventActionParticipantInvite) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionParticipantInvite))

    x.Bytes(m.GetParticipant().Encode())

    return x.buf
}

func (m* TLChannelAdminLogEventActionParticipantInvite) Decode(dbuf *DecodeBuf) error {
    m1 := &ChannelParticipant{}
    m1.Decode(dbuf)
    m.SetParticipant(m1)

    return dbuf.err
}
// channelAdminLogEventActionParticipantToggleBan#e6d83d7e prev_participant:ChannelParticipant new_participant:ChannelParticipant = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionParticipantToggleBan) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
    return &ChannelAdminLogEventAction{
        Constructor: TLConstructor_CRC32_channelAdminLogEventActionParticipantToggleBan,
        Data2: m.Data2,
    }
}


func (m *TLChannelAdminLogEventActionParticipantToggleBan) SetPrevParticipant(v *ChannelParticipant) { m.Data2.PrevParticipant = v }
func (m *TLChannelAdminLogEventActionParticipantToggleBan) GetPrevParticipant() *ChannelParticipant { return m.Data2.PrevParticipant }

func (m *TLChannelAdminLogEventActionParticipantToggleBan) SetNewParticipant(v *ChannelParticipant) { m.Data2.NewParticipant = v }
func (m *TLChannelAdminLogEventActionParticipantToggleBan) GetNewParticipant() *ChannelParticipant { return m.Data2.NewParticipant }


func NewTLChannelAdminLogEventActionParticipantToggleBan() * TLChannelAdminLogEventActionParticipantToggleBan {
    return &TLChannelAdminLogEventActionParticipantToggleBan{ Data2: &ChannelAdminLogEventAction_Data{} }
}

func (m* TLChannelAdminLogEventActionParticipantToggleBan) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionParticipantToggleBan))

    x.Bytes(m.GetPrevParticipant().Encode())
    x.Bytes(m.GetNewParticipant().Encode())

    return x.buf
}

func (m* TLChannelAdminLogEventActionParticipantToggleBan) Decode(dbuf *DecodeBuf) error {
    m1 := &ChannelParticipant{}
    m1.Decode(dbuf)
    m.SetPrevParticipant(m1)
    m2 := &ChannelParticipant{}
    m2.Decode(dbuf)
    m.SetNewParticipant(m2)

    return dbuf.err
}
// channelAdminLogEventActionParticipantToggleAdmin#d5676710 prev_participant:ChannelParticipant new_participant:ChannelParticipant = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionParticipantToggleAdmin) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
    return &ChannelAdminLogEventAction{
        Constructor: TLConstructor_CRC32_channelAdminLogEventActionParticipantToggleAdmin,
        Data2: m.Data2,
    }
}


func (m *TLChannelAdminLogEventActionParticipantToggleAdmin) SetPrevParticipant(v *ChannelParticipant) { m.Data2.PrevParticipant = v }
func (m *TLChannelAdminLogEventActionParticipantToggleAdmin) GetPrevParticipant() *ChannelParticipant { return m.Data2.PrevParticipant }

func (m *TLChannelAdminLogEventActionParticipantToggleAdmin) SetNewParticipant(v *ChannelParticipant) { m.Data2.NewParticipant = v }
func (m *TLChannelAdminLogEventActionParticipantToggleAdmin) GetNewParticipant() *ChannelParticipant { return m.Data2.NewParticipant }


func NewTLChannelAdminLogEventActionParticipantToggleAdmin() * TLChannelAdminLogEventActionParticipantToggleAdmin {
    return &TLChannelAdminLogEventActionParticipantToggleAdmin{ Data2: &ChannelAdminLogEventAction_Data{} }
}

func (m* TLChannelAdminLogEventActionParticipantToggleAdmin) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionParticipantToggleAdmin))

    x.Bytes(m.GetPrevParticipant().Encode())
    x.Bytes(m.GetNewParticipant().Encode())

    return x.buf
}

func (m* TLChannelAdminLogEventActionParticipantToggleAdmin) Decode(dbuf *DecodeBuf) error {
    m1 := &ChannelParticipant{}
    m1.Decode(dbuf)
    m.SetPrevParticipant(m1)
    m2 := &ChannelParticipant{}
    m2.Decode(dbuf)
    m.SetNewParticipant(m2)

    return dbuf.err
}
// channelAdminLogEventActionChangeStickerSet#b1c3caa7 prev_stickerset:InputStickerSet new_stickerset:InputStickerSet = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionChangeStickerSet) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
    return &ChannelAdminLogEventAction{
        Constructor: TLConstructor_CRC32_channelAdminLogEventActionChangeStickerSet,
        Data2: m.Data2,
    }
}


func (m *TLChannelAdminLogEventActionChangeStickerSet) SetPrevStickerset(v *InputStickerSet) { m.Data2.PrevStickerset = v }
func (m *TLChannelAdminLogEventActionChangeStickerSet) GetPrevStickerset() *InputStickerSet { return m.Data2.PrevStickerset }

func (m *TLChannelAdminLogEventActionChangeStickerSet) SetNewStickerset(v *InputStickerSet) { m.Data2.NewStickerset = v }
func (m *TLChannelAdminLogEventActionChangeStickerSet) GetNewStickerset() *InputStickerSet { return m.Data2.NewStickerset }


func NewTLChannelAdminLogEventActionChangeStickerSet() * TLChannelAdminLogEventActionChangeStickerSet {
    return &TLChannelAdminLogEventActionChangeStickerSet{ Data2: &ChannelAdminLogEventAction_Data{} }
}

func (m* TLChannelAdminLogEventActionChangeStickerSet) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionChangeStickerSet))

    x.Bytes(m.GetPrevStickerset().Encode())
    x.Bytes(m.GetNewStickerset().Encode())

    return x.buf
}

func (m* TLChannelAdminLogEventActionChangeStickerSet) Decode(dbuf *DecodeBuf) error {
    m1 := &InputStickerSet{}
    m1.Decode(dbuf)
    m.SetPrevStickerset(m1)
    m2 := &InputStickerSet{}
    m2.Decode(dbuf)
    m.SetNewStickerset(m2)

    return dbuf.err
}
// channelAdminLogEventActionTogglePreHistoryHidden#5f5c95f1 new_value:Bool = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionTogglePreHistoryHidden) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
    return &ChannelAdminLogEventAction{
        Constructor: TLConstructor_CRC32_channelAdminLogEventActionTogglePreHistoryHidden,
        Data2: m.Data2,
    }
}


func (m *TLChannelAdminLogEventActionTogglePreHistoryHidden) SetNewValue(v *Bool) { m.Data2.NewValue_5 = v }
func (m *TLChannelAdminLogEventActionTogglePreHistoryHidden) GetNewValue() *Bool { return m.Data2.NewValue_5 }


func NewTLChannelAdminLogEventActionTogglePreHistoryHidden() * TLChannelAdminLogEventActionTogglePreHistoryHidden {
    return &TLChannelAdminLogEventActionTogglePreHistoryHidden{ Data2: &ChannelAdminLogEventAction_Data{} }
}

func (m* TLChannelAdminLogEventActionTogglePreHistoryHidden) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionTogglePreHistoryHidden))

    x.Bytes(m.GetNewValue().Encode())

    return x.buf
}

func (m* TLChannelAdminLogEventActionTogglePreHistoryHidden) Decode(dbuf *DecodeBuf) error {
    m1 := &Bool{}
    m1.Decode(dbuf)
    m.SetNewValue(m1)

    return dbuf.err
}
// channelAdminLogEventActionChangePhoto#434bd2af prev_photo:Photo new_photo:Photo = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionChangePhoto114) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
    return &ChannelAdminLogEventAction{
        Constructor: TLConstructor_CRC32_channelAdminLogEventActionChangePhoto114,
        Data2: m.Data2,
    }
}


func (m *TLChannelAdminLogEventActionChangePhoto114) SetPrevPhoto(v *Photo) { m.Data2.PrevPhoto_14 = v }
func (m *TLChannelAdminLogEventActionChangePhoto114) GetPrevPhoto() *Photo { return m.Data2.PrevPhoto_14 }

func (m *TLChannelAdminLogEventActionChangePhoto114) SetNewPhoto(v *Photo) { m.Data2.NewPhoto_15 = v }
func (m *TLChannelAdminLogEventActionChangePhoto114) GetNewPhoto() *Photo { return m.Data2.NewPhoto_15 }


func NewTLChannelAdminLogEventActionChangePhoto114() * TLChannelAdminLogEventActionChangePhoto114 {
    return &TLChannelAdminLogEventActionChangePhoto114{ Data2: &ChannelAdminLogEventAction_Data{} }
}

func (m* TLChannelAdminLogEventActionChangePhoto114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionChangePhoto114))

    x.Bytes(m.GetPrevPhoto().Encode())
    x.Bytes(m.GetNewPhoto().Encode())

    return x.buf
}

func (m* TLChannelAdminLogEventActionChangePhoto114) Decode(dbuf *DecodeBuf) error {
    m1 := &Photo{}
    m1.Decode(dbuf)
    m.SetPrevPhoto(m1)
    m2 := &Photo{}
    m2.Decode(dbuf)
    m.SetNewPhoto(m2)

    return dbuf.err
}
// channelAdminLogEventActionDefaultBannedRights#2df5fc0a prev_banned_rights:ChatBannedRights new_banned_rights:ChatBannedRights = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionDefaultBannedRights) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
    return &ChannelAdminLogEventAction{
        Constructor: TLConstructor_CRC32_channelAdminLogEventActionDefaultBannedRights,
        Data2: m.Data2,
    }
}


func (m *TLChannelAdminLogEventActionDefaultBannedRights) SetPrevBannedRights(v *ChatBannedRights) { m.Data2.PrevBannedRights = v }
func (m *TLChannelAdminLogEventActionDefaultBannedRights) GetPrevBannedRights() *ChatBannedRights { return m.Data2.PrevBannedRights }

func (m *TLChannelAdminLogEventActionDefaultBannedRights) SetNewBannedRights(v *ChatBannedRights) { m.Data2.NewBannedRights = v }
func (m *TLChannelAdminLogEventActionDefaultBannedRights) GetNewBannedRights() *ChatBannedRights { return m.Data2.NewBannedRights }


func NewTLChannelAdminLogEventActionDefaultBannedRights() * TLChannelAdminLogEventActionDefaultBannedRights {
    return &TLChannelAdminLogEventActionDefaultBannedRights{ Data2: &ChannelAdminLogEventAction_Data{} }
}

func (m* TLChannelAdminLogEventActionDefaultBannedRights) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionDefaultBannedRights))

    x.Bytes(m.GetPrevBannedRights().Encode())
    x.Bytes(m.GetNewBannedRights().Encode())

    return x.buf
}

func (m* TLChannelAdminLogEventActionDefaultBannedRights) Decode(dbuf *DecodeBuf) error {
    m1 := &ChatBannedRights{}
    m1.Decode(dbuf)
    m.SetPrevBannedRights(m1)
    m2 := &ChatBannedRights{}
    m2.Decode(dbuf)
    m.SetNewBannedRights(m2)

    return dbuf.err
}
// channelAdminLogEventActionStopPoll#8f079643 message:Message = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionStopPoll) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
    return &ChannelAdminLogEventAction{
        Constructor: TLConstructor_CRC32_channelAdminLogEventActionStopPoll,
        Data2: m.Data2,
    }
}


func (m *TLChannelAdminLogEventActionStopPoll) SetMessage(v *Message) { m.Data2.Message = v }
func (m *TLChannelAdminLogEventActionStopPoll) GetMessage() *Message { return m.Data2.Message }


func NewTLChannelAdminLogEventActionStopPoll() * TLChannelAdminLogEventActionStopPoll {
    return &TLChannelAdminLogEventActionStopPoll{ Data2: &ChannelAdminLogEventAction_Data{} }
}

func (m* TLChannelAdminLogEventActionStopPoll) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionStopPoll))

    x.Bytes(m.GetMessage().Encode())

    return x.buf
}

func (m* TLChannelAdminLogEventActionStopPoll) Decode(dbuf *DecodeBuf) error {
    m1 := &Message{}
    m1.Decode(dbuf)
    m.SetMessage(m1)

    return dbuf.err
}
// channelAdminLogEventActionChangeLinkedChat#a26f881b prev_value:int new_value:int = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionChangeLinkedChat) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
    return &ChannelAdminLogEventAction{
        Constructor: TLConstructor_CRC32_channelAdminLogEventActionChangeLinkedChat,
        Data2: m.Data2,
    }
}


func (m *TLChannelAdminLogEventActionChangeLinkedChat) SetPrevValue(v int32) { m.Data2.PrevValue_18 = v }
func (m *TLChannelAdminLogEventActionChangeLinkedChat) GetPrevValue() int32 { return m.Data2.PrevValue_18 }

func (m *TLChannelAdminLogEventActionChangeLinkedChat) SetNewValue(v int32) { m.Data2.NewValue_19 = v }
func (m *TLChannelAdminLogEventActionChangeLinkedChat) GetNewValue() int32 { return m.Data2.NewValue_19 }


func NewTLChannelAdminLogEventActionChangeLinkedChat() * TLChannelAdminLogEventActionChangeLinkedChat {
    return &TLChannelAdminLogEventActionChangeLinkedChat{ Data2: &ChannelAdminLogEventAction_Data{} }
}

func (m* TLChannelAdminLogEventActionChangeLinkedChat) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionChangeLinkedChat))

    x.Int(m.GetPrevValue())
    x.Int(m.GetNewValue())

    return x.buf
}

func (m* TLChannelAdminLogEventActionChangeLinkedChat) Decode(dbuf *DecodeBuf) error {
    m.SetPrevValue(dbuf.Int())
    m.SetNewValue(dbuf.Int())

    return dbuf.err
}
// channelAdminLogEventActionChangeLocation#e6b76ae prev_value:ChannelLocation new_value:ChannelLocation = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionChangeLocation) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
    return &ChannelAdminLogEventAction{
        Constructor: TLConstructor_CRC32_channelAdminLogEventActionChangeLocation,
        Data2: m.Data2,
    }
}


func (m *TLChannelAdminLogEventActionChangeLocation) SetPrevValue(v *ChannelLocation) { m.Data2.PrevValue_20 = v }
func (m *TLChannelAdminLogEventActionChangeLocation) GetPrevValue() *ChannelLocation { return m.Data2.PrevValue_20 }

func (m *TLChannelAdminLogEventActionChangeLocation) SetNewValue(v *ChannelLocation) { m.Data2.NewValue_21 = v }
func (m *TLChannelAdminLogEventActionChangeLocation) GetNewValue() *ChannelLocation { return m.Data2.NewValue_21 }


func NewTLChannelAdminLogEventActionChangeLocation() * TLChannelAdminLogEventActionChangeLocation {
    return &TLChannelAdminLogEventActionChangeLocation{ Data2: &ChannelAdminLogEventAction_Data{} }
}

func (m* TLChannelAdminLogEventActionChangeLocation) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionChangeLocation))

    x.Bytes(m.GetPrevValue().Encode())
    x.Bytes(m.GetNewValue().Encode())

    return x.buf
}

func (m* TLChannelAdminLogEventActionChangeLocation) Decode(dbuf *DecodeBuf) error {
    m1 := &ChannelLocation{}
    m1.Decode(dbuf)
    m.SetPrevValue(m1)
    m2 := &ChannelLocation{}
    m2.Decode(dbuf)
    m.SetNewValue(m2)

    return dbuf.err
}
// channelAdminLogEventActionToggleSlowMode#53909779 prev_value:int new_value:int = ChannelAdminLogEventAction;
func (m *TLChannelAdminLogEventActionToggleSlowMode) To_ChannelAdminLogEventAction() *ChannelAdminLogEventAction {
    return &ChannelAdminLogEventAction{
        Constructor: TLConstructor_CRC32_channelAdminLogEventActionToggleSlowMode,
        Data2: m.Data2,
    }
}


func (m *TLChannelAdminLogEventActionToggleSlowMode) SetPrevValue(v int32) { m.Data2.PrevValue_18 = v }
func (m *TLChannelAdminLogEventActionToggleSlowMode) GetPrevValue() int32 { return m.Data2.PrevValue_18 }

func (m *TLChannelAdminLogEventActionToggleSlowMode) SetNewValue(v int32) { m.Data2.NewValue_19 = v }
func (m *TLChannelAdminLogEventActionToggleSlowMode) GetNewValue() int32 { return m.Data2.NewValue_19 }


func NewTLChannelAdminLogEventActionToggleSlowMode() * TLChannelAdminLogEventActionToggleSlowMode {
    return &TLChannelAdminLogEventActionToggleSlowMode{ Data2: &ChannelAdminLogEventAction_Data{} }
}

func (m* TLChannelAdminLogEventActionToggleSlowMode) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelAdminLogEventActionToggleSlowMode))

    x.Int(m.GetPrevValue())
    x.Int(m.GetNewValue())

    return x.buf
}

func (m* TLChannelAdminLogEventActionToggleSlowMode) Decode(dbuf *DecodeBuf) error {
    m.SetPrevValue(dbuf.Int())
    m.SetNewValue(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Help_CountriesList <--
//  + TL_HelpCountriesList
//  + TL_HelpCountriesListNotModified
//

func (m *Help_CountriesList) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_help_countriesList:
        t := m.To_HelpCountriesList()
        return t.Encode()
    case TLConstructor_CRC32_help_countriesListNotModified:
        t := m.To_HelpCountriesListNotModified()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Help_CountriesList) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_help_countriesList:
        m2 := &TLHelpCountriesList{&Help_CountriesList_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_help_countriesListNotModified:
        m2 := &TLHelpCountriesListNotModified{&Help_CountriesList_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// help.countriesList#87d0759e countries:Vector<help.Country> hash:int = help.CountriesList;
func (m *Help_CountriesList) To_HelpCountriesList() *TLHelpCountriesList {
    return &TLHelpCountriesList{
        Data2: m.Data2,
    }
}

// help.countriesListNotModified#93cc1f32 = help.CountriesList;
func (m *Help_CountriesList) To_HelpCountriesListNotModified() *TLHelpCountriesListNotModified {
    return &TLHelpCountriesListNotModified{
        Data2: m.Data2,
    }
}



// help.countriesList#87d0759e countries:Vector<help.Country> hash:int = help.CountriesList;
func (m *TLHelpCountriesList) To_Help_CountriesList() *Help_CountriesList {
    return &Help_CountriesList{
        Constructor: TLConstructor_CRC32_help_countriesList,
        Data2: m.Data2,
    }
}


func (m *TLHelpCountriesList) SetCountries(v []*Help_Country) { m.Data2.Countries = v }
func (m *TLHelpCountriesList) GetCountries() []*Help_Country { return m.Data2.Countries }

func (m *TLHelpCountriesList) SetHash(v int32) { m.Data2.Hash = v }
func (m *TLHelpCountriesList) GetHash() int32 { return m.Data2.Hash }


func NewTLHelpCountriesList() * TLHelpCountriesList {
    return &TLHelpCountriesList{ Data2: &Help_CountriesList_Data{} }
}

func (m* TLHelpCountriesList) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_help_countriesList))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetCountries())))
for _, v := range m.GetCountries() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(m.GetHash())

    return x.buf
}

func (m* TLHelpCountriesList) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*Help_Country, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &Help_Country{}
	v1[i].Decode(dbuf)
}
m.SetCountries(v1)

    m.SetHash(dbuf.Int())

    return dbuf.err
}
// help.countriesListNotModified#93cc1f32 = help.CountriesList;
func (m *TLHelpCountriesListNotModified) To_Help_CountriesList() *Help_CountriesList {
    return &Help_CountriesList{
        Constructor: TLConstructor_CRC32_help_countriesListNotModified,
        Data2: m.Data2,
    }
}



func NewTLHelpCountriesListNotModified() * TLHelpCountriesListNotModified {
    return &TLHelpCountriesListNotModified{ Data2: &Help_CountriesList_Data{} }
}

func (m* TLHelpCountriesListNotModified) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_help_countriesListNotModified))


    return x.buf
}

func (m* TLHelpCountriesListNotModified) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputDocument <--
//  + TL_InputDocumentEmpty
//  + TL_InputDocument
//  + TL_InputDocument114
//

func (m *InputDocument) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputDocumentEmpty:
        t := m.To_InputDocumentEmpty()
        return t.Encode()
    case TLConstructor_CRC32_inputDocument:
        t := m.To_InputDocument()
        return t.Encode()
    case TLConstructor_CRC32_inputDocument114:
        t := m.To_InputDocument114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputDocument) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputDocumentEmpty:
        m2 := &TLInputDocumentEmpty{&InputDocument_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputDocument:
        m2 := &TLInputDocument{&InputDocument_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputDocument114:
        m2 := &TLInputDocument114{&InputDocument_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputDocumentEmpty#72f0eaae = InputDocument;
func (m *InputDocument) To_InputDocumentEmpty() *TLInputDocumentEmpty {
    return &TLInputDocumentEmpty{
        Data2: m.Data2,
    }
}

// inputDocument#18798952 id:long access_hash:long = InputDocument;
func (m *InputDocument) To_InputDocument() *TLInputDocument {
    return &TLInputDocument{
        Data2: m.Data2,
    }
}

// inputDocument#1abfb575 id:long access_hash:long file_reference:bytes = InputDocument;
func (m *InputDocument) To_InputDocument114() *TLInputDocument114 {
    return &TLInputDocument114{
        Data2: m.Data2,
    }
}



// inputDocumentEmpty#72f0eaae = InputDocument;
func (m *TLInputDocumentEmpty) To_InputDocument() *InputDocument {
    return &InputDocument{
        Constructor: TLConstructor_CRC32_inputDocumentEmpty,
        Data2: m.Data2,
    }
}



func NewTLInputDocumentEmpty() * TLInputDocumentEmpty {
    return &TLInputDocumentEmpty{ Data2: &InputDocument_Data{} }
}

func (m* TLInputDocumentEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputDocumentEmpty))


    return x.buf
}

func (m* TLInputDocumentEmpty) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputDocument#18798952 id:long access_hash:long = InputDocument;
func (m *TLInputDocument) To_InputDocument() *InputDocument {
    return &InputDocument{
        Constructor: TLConstructor_CRC32_inputDocument,
        Data2: m.Data2,
    }
}


func (m *TLInputDocument) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputDocument) GetId() int64 { return m.Data2.Id }

func (m *TLInputDocument) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputDocument) GetAccessHash() int64 { return m.Data2.AccessHash }


func NewTLInputDocument() * TLInputDocument {
    return &TLInputDocument{ Data2: &InputDocument_Data{} }
}

func (m* TLInputDocument) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputDocument))

    x.Long(m.GetId())
    x.Long(m.GetAccessHash())

    return x.buf
}

func (m* TLInputDocument) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())

    return dbuf.err
}
// inputDocument#1abfb575 id:long access_hash:long file_reference:bytes = InputDocument;
func (m *TLInputDocument114) To_InputDocument() *InputDocument {
    return &InputDocument{
        Constructor: TLConstructor_CRC32_inputDocument114,
        Data2: m.Data2,
    }
}


func (m *TLInputDocument114) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputDocument114) GetId() int64 { return m.Data2.Id }

func (m *TLInputDocument114) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputDocument114) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLInputDocument114) SetFileReference(v []byte) { m.Data2.FileReference = v }
func (m *TLInputDocument114) GetFileReference() []byte { return m.Data2.FileReference }


func NewTLInputDocument114() * TLInputDocument114 {
    return &TLInputDocument114{ Data2: &InputDocument_Data{} }
}

func (m* TLInputDocument114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputDocument114))

    x.Long(m.GetId())
    x.Long(m.GetAccessHash())
    x.StringBytes(m.GetFileReference())

    return x.buf
}

func (m* TLInputDocument114) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())
    m.SetFileReference(dbuf.StringBytes())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputSingleMedia <--
//  + TL_InputSingleMedia
//  + TL_InputSingleMedia114
//

func (m *InputSingleMedia) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputSingleMedia:
        t := m.To_InputSingleMedia()
        return t.Encode()
    case TLConstructor_CRC32_inputSingleMedia114:
        t := m.To_InputSingleMedia114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputSingleMedia) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputSingleMedia:
        m2 := &TLInputSingleMedia{&InputSingleMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputSingleMedia114:
        m2 := &TLInputSingleMedia114{&InputSingleMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputSingleMedia#5eaa7809 media:InputMedia random_id:long = InputSingleMedia;
func (m *InputSingleMedia) To_InputSingleMedia() *TLInputSingleMedia {
    return &TLInputSingleMedia{
        Data2: m.Data2,
    }
}

// inputSingleMedia#1cc6e91f flags:# media:InputMedia random_id:long message:string entities:flags.0?Vector<MessageEntity> = InputSingleMedia;
func (m *InputSingleMedia) To_InputSingleMedia114() *TLInputSingleMedia114 {
    return &TLInputSingleMedia114{
        Data2: m.Data2,
    }
}



// inputSingleMedia#5eaa7809 media:InputMedia random_id:long = InputSingleMedia;
func (m *TLInputSingleMedia) To_InputSingleMedia() *InputSingleMedia {
    return &InputSingleMedia{
        Constructor: TLConstructor_CRC32_inputSingleMedia,
        Data2: m.Data2,
    }
}


func (m *TLInputSingleMedia) SetMedia(v *InputMedia) { m.Data2.Media = v }
func (m *TLInputSingleMedia) GetMedia() *InputMedia { return m.Data2.Media }

func (m *TLInputSingleMedia) SetRandomId(v int64) { m.Data2.RandomId = v }
func (m *TLInputSingleMedia) GetRandomId() int64 { return m.Data2.RandomId }


func NewTLInputSingleMedia() * TLInputSingleMedia {
    return &TLInputSingleMedia{ Data2: &InputSingleMedia_Data{} }
}

func (m* TLInputSingleMedia) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputSingleMedia))

    x.Bytes(m.GetMedia().Encode())
    x.Long(m.GetRandomId())

    return x.buf
}

func (m* TLInputSingleMedia) Decode(dbuf *DecodeBuf) error {
    m1 := &InputMedia{}
    m1.Decode(dbuf)
    m.SetMedia(m1)
    m.SetRandomId(dbuf.Long())

    return dbuf.err
}
// inputSingleMedia#1cc6e91f flags:# media:InputMedia random_id:long message:string entities:flags.0?Vector<MessageEntity> = InputSingleMedia;
func (m *TLInputSingleMedia114) To_InputSingleMedia() *InputSingleMedia {
    return &InputSingleMedia{
        Constructor: TLConstructor_CRC32_inputSingleMedia114,
        Data2: m.Data2,
    }
}


func (m *TLInputSingleMedia114) SetMedia(v *InputMedia) { m.Data2.Media = v }
func (m *TLInputSingleMedia114) GetMedia() *InputMedia { return m.Data2.Media }

func (m *TLInputSingleMedia114) SetRandomId(v int64) { m.Data2.RandomId = v }
func (m *TLInputSingleMedia114) GetRandomId() int64 { return m.Data2.RandomId }

func (m *TLInputSingleMedia114) SetMessage(v string) { m.Data2.Message = v }
func (m *TLInputSingleMedia114) GetMessage() string { return m.Data2.Message }

func (m *TLInputSingleMedia114) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLInputSingleMedia114) GetEntities() []*MessageEntity { return m.Data2.Entities }


func NewTLInputSingleMedia114() * TLInputSingleMedia114 {
    return &TLInputSingleMedia114{ Data2: &InputSingleMedia_Data{} }
}

func (m* TLInputSingleMedia114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputSingleMedia114))

    // flags
    var flags uint32 = 0
    if m.GetEntities() != nil { flags |= 1 << 0 }
	x.UInt(flags)

    x.Bytes(m.GetMedia().Encode())
    x.Long(m.GetRandomId())
    x.String(m.GetMessage())
    if (flags & (1 << 0)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetEntities())))
for _, v := range m.GetEntities() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}

    return x.buf
}

func (m* TLInputSingleMedia114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m2 := &InputMedia{}
    m2.Decode(dbuf)
    m.SetMedia(m2)
    m.SetRandomId(dbuf.Long())
    m.SetMessage(dbuf.String())
    if (flags & (1 << 0)) != 0 {
 c5 := dbuf.Int()
if c5 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 5, c5)
	return dbuf.err
}
l5 := dbuf.Int()
v5 := make([]*MessageEntity, l5)
for i := int32(0); i < l5; i++ {
	v5[i] = &MessageEntity{}
	v5[i].Decode(dbuf)
}
m.SetEntities(v5)
 
}

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// SecureRequiredType <--
//  + TL_SecureRequiredType
//  + TL_SecureRequiredTypeOneOf
//

func (m *SecureRequiredType) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_secureRequiredType:
        t := m.To_SecureRequiredType()
        return t.Encode()
    case TLConstructor_CRC32_secureRequiredTypeOneOf:
        t := m.To_SecureRequiredTypeOneOf()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *SecureRequiredType) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_secureRequiredType:
        m2 := &TLSecureRequiredType{&SecureRequiredType_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_secureRequiredTypeOneOf:
        m2 := &TLSecureRequiredTypeOneOf{&SecureRequiredType_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// secureRequiredType#829d99da flags:# native_names:flags.0?true selfie_required:flags.1?true translation_required:flags.2?true type:SecureValueType = SecureRequiredType;
func (m *SecureRequiredType) To_SecureRequiredType() *TLSecureRequiredType {
    return &TLSecureRequiredType{
        Data2: m.Data2,
    }
}

// secureRequiredTypeOneOf#27477b4 types:Vector<SecureRequiredType> = SecureRequiredType;
func (m *SecureRequiredType) To_SecureRequiredTypeOneOf() *TLSecureRequiredTypeOneOf {
    return &TLSecureRequiredTypeOneOf{
        Data2: m.Data2,
    }
}



// secureRequiredType#829d99da flags:# native_names:flags.0?true selfie_required:flags.1?true translation_required:flags.2?true type:SecureValueType = SecureRequiredType;
func (m *TLSecureRequiredType) To_SecureRequiredType() *SecureRequiredType {
    return &SecureRequiredType{
        Constructor: TLConstructor_CRC32_secureRequiredType,
        Data2: m.Data2,
    }
}


func (m *TLSecureRequiredType) SetNativeNames(v bool) { m.Data2.NativeNames = v }
func (m *TLSecureRequiredType) GetNativeNames() bool { return m.Data2.NativeNames }

func (m *TLSecureRequiredType) SetSelfieRequired(v bool) { m.Data2.SelfieRequired = v }
func (m *TLSecureRequiredType) GetSelfieRequired() bool { return m.Data2.SelfieRequired }

func (m *TLSecureRequiredType) SetTranslationRequired(v bool) { m.Data2.TranslationRequired = v }
func (m *TLSecureRequiredType) GetTranslationRequired() bool { return m.Data2.TranslationRequired }

func (m *TLSecureRequiredType) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureRequiredType) GetType() *SecureValueType { return m.Data2.Type }


func NewTLSecureRequiredType() * TLSecureRequiredType {
    return &TLSecureRequiredType{ Data2: &SecureRequiredType_Data{} }
}

func (m* TLSecureRequiredType) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_secureRequiredType))

    // flags
    var flags uint32 = 0
    if m.GetNativeNames() == true { flags |= 1 << 0 }
    if m.GetSelfieRequired() == true { flags |= 1 << 1 }
    if m.GetTranslationRequired() == true { flags |= 1 << 2 }
	x.UInt(flags)

    
    
    
    x.Bytes(m.GetType().Encode())

    return x.buf
}

func (m* TLSecureRequiredType) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetNativeNames(true) }
    if (flags & (1 << 1)) != 0 { m.SetSelfieRequired(true) }
    if (flags & (1 << 2)) != 0 { m.SetTranslationRequired(true) }
    m5 := &SecureValueType{}
    m5.Decode(dbuf)
    m.SetType(m5)

    return dbuf.err
}
// secureRequiredTypeOneOf#27477b4 types:Vector<SecureRequiredType> = SecureRequiredType;
func (m *TLSecureRequiredTypeOneOf) To_SecureRequiredType() *SecureRequiredType {
    return &SecureRequiredType{
        Constructor: TLConstructor_CRC32_secureRequiredTypeOneOf,
        Data2: m.Data2,
    }
}


func (m *TLSecureRequiredTypeOneOf) SetTypes(v []*SecureRequiredType) { m.Data2.Types = v }
func (m *TLSecureRequiredTypeOneOf) GetTypes() []*SecureRequiredType { return m.Data2.Types }


func NewTLSecureRequiredTypeOneOf() * TLSecureRequiredTypeOneOf {
    return &TLSecureRequiredTypeOneOf{ Data2: &SecureRequiredType_Data{} }
}

func (m* TLSecureRequiredTypeOneOf) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_secureRequiredTypeOneOf))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetTypes())))
for _, v := range m.GetTypes() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLSecureRequiredTypeOneOf) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*SecureRequiredType, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &SecureRequiredType{}
	v1[i].Decode(dbuf)
}
m.SetTypes(v1)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputFolderPeer <--
//  + TL_InputFolderPeer
//

func (m *InputFolderPeer) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputFolderPeer:
        t := m.To_InputFolderPeer()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputFolderPeer) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputFolderPeer:
        m2 := &TLInputFolderPeer{&InputFolderPeer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputFolderPeer#fbd2c296 peer:InputPeer folder_id:int = InputFolderPeer;
func (m *InputFolderPeer) To_InputFolderPeer() *TLInputFolderPeer {
    return &TLInputFolderPeer{
        Data2: m.Data2,
    }
}



// inputFolderPeer#fbd2c296 peer:InputPeer folder_id:int = InputFolderPeer;
func (m *TLInputFolderPeer) To_InputFolderPeer() *InputFolderPeer {
    return &InputFolderPeer{
        Constructor: TLConstructor_CRC32_inputFolderPeer,
        Data2: m.Data2,
    }
}


func (m *TLInputFolderPeer) SetPeer(v *InputPeer) { m.Data2.Peer = v }
func (m *TLInputFolderPeer) GetPeer() *InputPeer { return m.Data2.Peer }

func (m *TLInputFolderPeer) SetFolderId(v int32) { m.Data2.FolderId = v }
func (m *TLInputFolderPeer) GetFolderId() int32 { return m.Data2.FolderId }


func NewTLInputFolderPeer() * TLInputFolderPeer {
    return &TLInputFolderPeer{ Data2: &InputFolderPeer_Data{} }
}

func (m* TLInputFolderPeer) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputFolderPeer))

    x.Bytes(m.GetPeer().Encode())
    x.Int(m.GetFolderId())

    return x.buf
}

func (m* TLInputFolderPeer) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.SetPeer(m1)
    m.SetFolderId(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Messages_SearchCounter <--
//  + TL_Messages_SearchCounter
//

func (m *Messages_SearchCounter) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messages_SearchCounter:
        t := m.To_Messages_SearchCounter()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Messages_SearchCounter) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messages_SearchCounter:
        m2 := &TLMessages_SearchCounter{&Messages_SearchCounter_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messages.SearchCounter#86a5418c flags:# inexact:flags.1?true filter:MessagesFilter count:int = messages.SearchCounter;
func (m *Messages_SearchCounter) To_Messages_SearchCounter() *TLMessages_SearchCounter {
    return &TLMessages_SearchCounter{
        Data2: m.Data2,
    }
}



// messages.SearchCounter#86a5418c flags:# inexact:flags.1?true filter:MessagesFilter count:int = messages.SearchCounter;
func (m *TLMessages_SearchCounter) To_Messages_SearchCounter() *Messages_SearchCounter {
    return &Messages_SearchCounter{
        Constructor: TLConstructor_CRC32_messages_SearchCounter,
        Data2: m.Data2,
    }
}


func (m *TLMessages_SearchCounter) SetInexact(v bool) { m.Data2.Inexact = v }
func (m *TLMessages_SearchCounter) GetInexact() bool { return m.Data2.Inexact }

func (m *TLMessages_SearchCounter) SetFilter(v *MessagesFilter) { m.Data2.Filter = v }
func (m *TLMessages_SearchCounter) GetFilter() *MessagesFilter { return m.Data2.Filter }

func (m *TLMessages_SearchCounter) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessages_SearchCounter) GetCount() int32 { return m.Data2.Count }


func NewTLMessages_SearchCounter() * TLMessages_SearchCounter {
    return &TLMessages_SearchCounter{ Data2: &Messages_SearchCounter_Data{} }
}

func (m* TLMessages_SearchCounter) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_SearchCounter))

    // flags
    var flags uint32 = 0
    if m.GetInexact() == true { flags |= 1 << 1 }
	x.UInt(flags)

    
    x.Bytes(m.GetFilter().Encode())
    x.Int(m.GetCount())

    return x.buf
}

func (m* TLMessages_SearchCounter) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 1)) != 0 { m.SetInexact(true) }
    m3 := &MessagesFilter{}
    m3.Decode(dbuf)
    m.SetFilter(m3)
    m.SetCount(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// ContactStatus <--
//  + TL_ContactStatus
//

func (m *ContactStatus) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_contactStatus:
        t := m.To_ContactStatus()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *ContactStatus) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_contactStatus:
        m2 := &TLContactStatus{&ContactStatus_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// contactStatus#d3680c61 user_id:int status:UserStatus = ContactStatus;
func (m *ContactStatus) To_ContactStatus() *TLContactStatus {
    return &TLContactStatus{
        Data2: m.Data2,
    }
}



// contactStatus#d3680c61 user_id:int status:UserStatus = ContactStatus;
func (m *TLContactStatus) To_ContactStatus() *ContactStatus {
    return &ContactStatus{
        Constructor: TLConstructor_CRC32_contactStatus,
        Data2: m.Data2,
    }
}


func (m *TLContactStatus) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLContactStatus) GetUserId() int32 { return m.Data2.UserId }

func (m *TLContactStatus) SetStatus(v *UserStatus) { m.Data2.Status = v }
func (m *TLContactStatus) GetStatus() *UserStatus { return m.Data2.Status }


func NewTLContactStatus() * TLContactStatus {
    return &TLContactStatus{ Data2: &ContactStatus_Data{} }
}

func (m* TLContactStatus) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_contactStatus))

    x.Int(m.GetUserId())
    x.Bytes(m.GetStatus().Encode())

    return x.buf
}

func (m* TLContactStatus) Decode(dbuf *DecodeBuf) error {
    m.SetUserId(dbuf.Int())
    m2 := &UserStatus{}
    m2.Decode(dbuf)
    m.SetStatus(m2)

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Account_PrivacyRules <--
//  + TL_AccountPrivacyRules
//  + TL_AccountPrivacyRules114
//

func (m *Account_PrivacyRules) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_account_privacyRules:
        t := m.To_AccountPrivacyRules()
        return t.Encode()
    case TLConstructor_CRC32_account_privacyRules114:
        t := m.To_AccountPrivacyRules114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Account_PrivacyRules) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_account_privacyRules:
        m2 := &TLAccountPrivacyRules{&Account_PrivacyRules_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_account_privacyRules114:
        m2 := &TLAccountPrivacyRules114{&Account_PrivacyRules_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// account.privacyRules#554abb6f rules:Vector<PrivacyRule> users:Vector<User> = account.PrivacyRules;
func (m *Account_PrivacyRules) To_AccountPrivacyRules() *TLAccountPrivacyRules {
    return &TLAccountPrivacyRules{
        Data2: m.Data2,
    }
}

// account.privacyRules#50a04e45 rules:Vector<PrivacyRule> chats:Vector<Chat> users:Vector<User> = account.PrivacyRules;
func (m *Account_PrivacyRules) To_AccountPrivacyRules114() *TLAccountPrivacyRules114 {
    return &TLAccountPrivacyRules114{
        Data2: m.Data2,
    }
}



// account.privacyRules#554abb6f rules:Vector<PrivacyRule> users:Vector<User> = account.PrivacyRules;
func (m *TLAccountPrivacyRules) To_Account_PrivacyRules() *Account_PrivacyRules {
    return &Account_PrivacyRules{
        Constructor: TLConstructor_CRC32_account_privacyRules,
        Data2: m.Data2,
    }
}


func (m *TLAccountPrivacyRules) SetRules(v []*PrivacyRule) { m.Data2.Rules = v }
func (m *TLAccountPrivacyRules) GetRules() []*PrivacyRule { return m.Data2.Rules }

func (m *TLAccountPrivacyRules) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLAccountPrivacyRules) GetUsers() []*User { return m.Data2.Users }


func NewTLAccountPrivacyRules() * TLAccountPrivacyRules {
    return &TLAccountPrivacyRules{ Data2: &Account_PrivacyRules_Data{} }
}

func (m* TLAccountPrivacyRules) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_account_privacyRules))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetRules())))
for _, v := range m.GetRules() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLAccountPrivacyRules) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*PrivacyRule, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &PrivacyRule{}
	v1[i].Decode(dbuf)
}
m.SetRules(v1)

    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*User, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &User{}
	v2[i].Decode(dbuf)
}
m.SetUsers(v2)


    return dbuf.err
}
// account.privacyRules#50a04e45 rules:Vector<PrivacyRule> chats:Vector<Chat> users:Vector<User> = account.PrivacyRules;
func (m *TLAccountPrivacyRules114) To_Account_PrivacyRules() *Account_PrivacyRules {
    return &Account_PrivacyRules{
        Constructor: TLConstructor_CRC32_account_privacyRules114,
        Data2: m.Data2,
    }
}


func (m *TLAccountPrivacyRules114) SetRules(v []*PrivacyRule) { m.Data2.Rules = v }
func (m *TLAccountPrivacyRules114) GetRules() []*PrivacyRule { return m.Data2.Rules }

func (m *TLAccountPrivacyRules114) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLAccountPrivacyRules114) GetChats() []*Chat { return m.Data2.Chats }

func (m *TLAccountPrivacyRules114) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLAccountPrivacyRules114) GetUsers() []*User { return m.Data2.Users }


func NewTLAccountPrivacyRules114() * TLAccountPrivacyRules114 {
    return &TLAccountPrivacyRules114{ Data2: &Account_PrivacyRules_Data{} }
}

func (m* TLAccountPrivacyRules114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_account_privacyRules114))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetRules())))
for _, v := range m.GetRules() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetChats())))
for _, v := range m.GetChats() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLAccountPrivacyRules114) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*PrivacyRule, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &PrivacyRule{}
	v1[i].Decode(dbuf)
}
m.SetRules(v1)

    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*Chat, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &Chat{}
	v2[i].Decode(dbuf)
}
m.SetChats(v2)

    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*User, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &User{}
	v3[i].Decode(dbuf)
}
m.SetUsers(v3)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputBotInlineResult <--
//  + TL_InputBotInlineResult
//  + TL_InputBotInlineResultPhoto
//  + TL_InputBotInlineResultDocument
//  + TL_InputBotInlineResultGame
//  + TL_InputBotInlineResult114
//

func (m *InputBotInlineResult) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputBotInlineResult:
        t := m.To_InputBotInlineResult()
        return t.Encode()
    case TLConstructor_CRC32_inputBotInlineResultPhoto:
        t := m.To_InputBotInlineResultPhoto()
        return t.Encode()
    case TLConstructor_CRC32_inputBotInlineResultDocument:
        t := m.To_InputBotInlineResultDocument()
        return t.Encode()
    case TLConstructor_CRC32_inputBotInlineResultGame:
        t := m.To_InputBotInlineResultGame()
        return t.Encode()
    case TLConstructor_CRC32_inputBotInlineResult114:
        t := m.To_InputBotInlineResult114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputBotInlineResult) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputBotInlineResult:
        m2 := &TLInputBotInlineResult{&InputBotInlineResult_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputBotInlineResultPhoto:
        m2 := &TLInputBotInlineResultPhoto{&InputBotInlineResult_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputBotInlineResultDocument:
        m2 := &TLInputBotInlineResultDocument{&InputBotInlineResult_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputBotInlineResultGame:
        m2 := &TLInputBotInlineResultGame{&InputBotInlineResult_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputBotInlineResult114:
        m2 := &TLInputBotInlineResult114{&InputBotInlineResult_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputBotInlineResult#2cbbe15a flags:# id:string type:string title:flags.1?string description:flags.2?string url:flags.3?string thumb_url:flags.4?string content_url:flags.5?string content_type:flags.5?string w:flags.6?int h:flags.6?int duration:flags.7?int send_message:InputBotInlineMessage = InputBotInlineResult;
func (m *InputBotInlineResult) To_InputBotInlineResult() *TLInputBotInlineResult {
    return &TLInputBotInlineResult{
        Data2: m.Data2,
    }
}

// inputBotInlineResultPhoto#a8d864a7 id:string type:string photo:InputPhoto send_message:InputBotInlineMessage = InputBotInlineResult;
func (m *InputBotInlineResult) To_InputBotInlineResultPhoto() *TLInputBotInlineResultPhoto {
    return &TLInputBotInlineResultPhoto{
        Data2: m.Data2,
    }
}

// inputBotInlineResultDocument#fff8fdc4 flags:# id:string type:string title:flags.1?string description:flags.2?string document:InputDocument send_message:InputBotInlineMessage = InputBotInlineResult;
func (m *InputBotInlineResult) To_InputBotInlineResultDocument() *TLInputBotInlineResultDocument {
    return &TLInputBotInlineResultDocument{
        Data2: m.Data2,
    }
}

// inputBotInlineResultGame#4fa417f2 id:string short_name:string send_message:InputBotInlineMessage = InputBotInlineResult;
func (m *InputBotInlineResult) To_InputBotInlineResultGame() *TLInputBotInlineResultGame {
    return &TLInputBotInlineResultGame{
        Data2: m.Data2,
    }
}

// inputBotInlineResult#88bf9319 flags:# id:string type:string title:flags.1?string description:flags.2?string url:flags.3?string thumb:flags.4?InputWebDocument content:flags.5?InputWebDocument send_message:InputBotInlineMessage = InputBotInlineResult;
func (m *InputBotInlineResult) To_InputBotInlineResult114() *TLInputBotInlineResult114 {
    return &TLInputBotInlineResult114{
        Data2: m.Data2,
    }
}



// inputBotInlineResult#2cbbe15a flags:# id:string type:string title:flags.1?string description:flags.2?string url:flags.3?string thumb_url:flags.4?string content_url:flags.5?string content_type:flags.5?string w:flags.6?int h:flags.6?int duration:flags.7?int send_message:InputBotInlineMessage = InputBotInlineResult;
func (m *TLInputBotInlineResult) To_InputBotInlineResult() *InputBotInlineResult {
    return &InputBotInlineResult{
        Constructor: TLConstructor_CRC32_inputBotInlineResult,
        Data2: m.Data2,
    }
}


func (m *TLInputBotInlineResult) SetId(v string) { m.Data2.Id = v }
func (m *TLInputBotInlineResult) GetId() string { return m.Data2.Id }

func (m *TLInputBotInlineResult) SetType(v string) { m.Data2.Type = v }
func (m *TLInputBotInlineResult) GetType() string { return m.Data2.Type }

func (m *TLInputBotInlineResult) SetTitle(v string) { m.Data2.Title = v }
func (m *TLInputBotInlineResult) GetTitle() string { return m.Data2.Title }

func (m *TLInputBotInlineResult) SetDescription(v string) { m.Data2.Description = v }
func (m *TLInputBotInlineResult) GetDescription() string { return m.Data2.Description }

func (m *TLInputBotInlineResult) SetUrl(v string) { m.Data2.Url = v }
func (m *TLInputBotInlineResult) GetUrl() string { return m.Data2.Url }

func (m *TLInputBotInlineResult) SetThumbUrl(v string) { m.Data2.ThumbUrl = v }
func (m *TLInputBotInlineResult) GetThumbUrl() string { return m.Data2.ThumbUrl }

func (m *TLInputBotInlineResult) SetContentUrl(v string) { m.Data2.ContentUrl = v }
func (m *TLInputBotInlineResult) GetContentUrl() string { return m.Data2.ContentUrl }

func (m *TLInputBotInlineResult) SetContentType(v string) { m.Data2.ContentType = v }
func (m *TLInputBotInlineResult) GetContentType() string { return m.Data2.ContentType }

func (m *TLInputBotInlineResult) SetW(v int32) { m.Data2.W = v }
func (m *TLInputBotInlineResult) GetW() int32 { return m.Data2.W }

func (m *TLInputBotInlineResult) SetH(v int32) { m.Data2.H = v }
func (m *TLInputBotInlineResult) GetH() int32 { return m.Data2.H }

func (m *TLInputBotInlineResult) SetDuration(v int32) { m.Data2.Duration = v }
func (m *TLInputBotInlineResult) GetDuration() int32 { return m.Data2.Duration }

func (m *TLInputBotInlineResult) SetSendMessage(v *InputBotInlineMessage) { m.Data2.SendMessage = v }
func (m *TLInputBotInlineResult) GetSendMessage() *InputBotInlineMessage { return m.Data2.SendMessage }


func NewTLInputBotInlineResult() * TLInputBotInlineResult {
    return &TLInputBotInlineResult{ Data2: &InputBotInlineResult_Data{} }
}

func (m* TLInputBotInlineResult) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputBotInlineResult))

    // flags
    var flags uint32 = 0
    if m.GetTitle() != "" { flags |= 1 << 1 }
    if m.GetDescription() != "" { flags |= 1 << 2 }
    if m.GetUrl() != "" { flags |= 1 << 3 }
    if m.GetThumbUrl() != "" { flags |= 1 << 4 }
    if m.GetContentUrl() != "" { flags |= 1 << 5 }
    if m.GetContentType() != "" { flags |= 1 << 5 }
    if m.GetW() != 0 { flags |= 1 << 6 }
    if m.GetH() != 0 { flags |= 1 << 6 }
    if m.GetDuration() != 0 { flags |= 1 << 7 }
	x.UInt(flags)

    x.String(m.GetId())
    x.String(m.GetType())
    if (flags & (1 << 1)) != 0 { x.String(m.GetTitle()) }
    if (flags & (1 << 2)) != 0 { x.String(m.GetDescription()) }
    if (flags & (1 << 3)) != 0 { x.String(m.GetUrl()) }
    if (flags & (1 << 4)) != 0 { x.String(m.GetThumbUrl()) }
    if (flags & (1 << 5)) != 0 { x.String(m.GetContentUrl()) }
    if (flags & (1 << 5)) != 0 { x.String(m.GetContentType()) }
    if (flags & (1 << 6)) != 0 { x.Int(m.GetW()) }
    if (flags & (1 << 6)) != 0 { x.Int(m.GetH()) }
    if (flags & (1 << 7)) != 0 { x.Int(m.GetDuration()) }
    x.Bytes(m.GetSendMessage().Encode())

    return x.buf
}

func (m* TLInputBotInlineResult) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetId(dbuf.String())
    m.SetType(dbuf.String())
    if (flags & (1 << 1)) != 0 { m.SetTitle(dbuf.String()) }
    if (flags & (1 << 2)) != 0 { m.SetDescription(dbuf.String()) }
    if (flags & (1 << 3)) != 0 { m.SetUrl(dbuf.String()) }
    if (flags & (1 << 4)) != 0 { m.SetThumbUrl(dbuf.String()) }
    if (flags & (1 << 5)) != 0 { m.SetContentUrl(dbuf.String()) }
    if (flags & (1 << 5)) != 0 { m.SetContentType(dbuf.String()) }
    if (flags & (1 << 6)) != 0 { m.SetW(dbuf.Int()) }
    if (flags & (1 << 6)) != 0 { m.SetH(dbuf.Int()) }
    if (flags & (1 << 7)) != 0 { m.SetDuration(dbuf.Int()) }
    m13 := &InputBotInlineMessage{}
    m13.Decode(dbuf)
    m.SetSendMessage(m13)

    return dbuf.err
}
// inputBotInlineResultPhoto#a8d864a7 id:string type:string photo:InputPhoto send_message:InputBotInlineMessage = InputBotInlineResult;
func (m *TLInputBotInlineResultPhoto) To_InputBotInlineResult() *InputBotInlineResult {
    return &InputBotInlineResult{
        Constructor: TLConstructor_CRC32_inputBotInlineResultPhoto,
        Data2: m.Data2,
    }
}


func (m *TLInputBotInlineResultPhoto) SetId(v string) { m.Data2.Id = v }
func (m *TLInputBotInlineResultPhoto) GetId() string { return m.Data2.Id }

func (m *TLInputBotInlineResultPhoto) SetType(v string) { m.Data2.Type = v }
func (m *TLInputBotInlineResultPhoto) GetType() string { return m.Data2.Type }

func (m *TLInputBotInlineResultPhoto) SetPhoto(v *InputPhoto) { m.Data2.Photo = v }
func (m *TLInputBotInlineResultPhoto) GetPhoto() *InputPhoto { return m.Data2.Photo }

func (m *TLInputBotInlineResultPhoto) SetSendMessage(v *InputBotInlineMessage) { m.Data2.SendMessage = v }
func (m *TLInputBotInlineResultPhoto) GetSendMessage() *InputBotInlineMessage { return m.Data2.SendMessage }


func NewTLInputBotInlineResultPhoto() * TLInputBotInlineResultPhoto {
    return &TLInputBotInlineResultPhoto{ Data2: &InputBotInlineResult_Data{} }
}

func (m* TLInputBotInlineResultPhoto) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputBotInlineResultPhoto))

    x.String(m.GetId())
    x.String(m.GetType())
    x.Bytes(m.GetPhoto().Encode())
    x.Bytes(m.GetSendMessage().Encode())

    return x.buf
}

func (m* TLInputBotInlineResultPhoto) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.String())
    m.SetType(dbuf.String())
    m3 := &InputPhoto{}
    m3.Decode(dbuf)
    m.SetPhoto(m3)
    m4 := &InputBotInlineMessage{}
    m4.Decode(dbuf)
    m.SetSendMessage(m4)

    return dbuf.err
}
// inputBotInlineResultDocument#fff8fdc4 flags:# id:string type:string title:flags.1?string description:flags.2?string document:InputDocument send_message:InputBotInlineMessage = InputBotInlineResult;
func (m *TLInputBotInlineResultDocument) To_InputBotInlineResult() *InputBotInlineResult {
    return &InputBotInlineResult{
        Constructor: TLConstructor_CRC32_inputBotInlineResultDocument,
        Data2: m.Data2,
    }
}


func (m *TLInputBotInlineResultDocument) SetId(v string) { m.Data2.Id = v }
func (m *TLInputBotInlineResultDocument) GetId() string { return m.Data2.Id }

func (m *TLInputBotInlineResultDocument) SetType(v string) { m.Data2.Type = v }
func (m *TLInputBotInlineResultDocument) GetType() string { return m.Data2.Type }

func (m *TLInputBotInlineResultDocument) SetTitle(v string) { m.Data2.Title = v }
func (m *TLInputBotInlineResultDocument) GetTitle() string { return m.Data2.Title }

func (m *TLInputBotInlineResultDocument) SetDescription(v string) { m.Data2.Description = v }
func (m *TLInputBotInlineResultDocument) GetDescription() string { return m.Data2.Description }

func (m *TLInputBotInlineResultDocument) SetDocument(v *InputDocument) { m.Data2.Document = v }
func (m *TLInputBotInlineResultDocument) GetDocument() *InputDocument { return m.Data2.Document }

func (m *TLInputBotInlineResultDocument) SetSendMessage(v *InputBotInlineMessage) { m.Data2.SendMessage = v }
func (m *TLInputBotInlineResultDocument) GetSendMessage() *InputBotInlineMessage { return m.Data2.SendMessage }


func NewTLInputBotInlineResultDocument() * TLInputBotInlineResultDocument {
    return &TLInputBotInlineResultDocument{ Data2: &InputBotInlineResult_Data{} }
}

func (m* TLInputBotInlineResultDocument) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputBotInlineResultDocument))

    // flags
    var flags uint32 = 0
    if m.GetTitle() != "" { flags |= 1 << 1 }
    if m.GetDescription() != "" { flags |= 1 << 2 }
	x.UInt(flags)

    x.String(m.GetId())
    x.String(m.GetType())
    if (flags & (1 << 1)) != 0 { x.String(m.GetTitle()) }
    if (flags & (1 << 2)) != 0 { x.String(m.GetDescription()) }
    x.Bytes(m.GetDocument().Encode())
    x.Bytes(m.GetSendMessage().Encode())

    return x.buf
}

func (m* TLInputBotInlineResultDocument) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetId(dbuf.String())
    m.SetType(dbuf.String())
    if (flags & (1 << 1)) != 0 { m.SetTitle(dbuf.String()) }
    if (flags & (1 << 2)) != 0 { m.SetDescription(dbuf.String()) }
    m6 := &InputDocument{}
    m6.Decode(dbuf)
    m.SetDocument(m6)
    m7 := &InputBotInlineMessage{}
    m7.Decode(dbuf)
    m.SetSendMessage(m7)

    return dbuf.err
}
// inputBotInlineResultGame#4fa417f2 id:string short_name:string send_message:InputBotInlineMessage = InputBotInlineResult;
func (m *TLInputBotInlineResultGame) To_InputBotInlineResult() *InputBotInlineResult {
    return &InputBotInlineResult{
        Constructor: TLConstructor_CRC32_inputBotInlineResultGame,
        Data2: m.Data2,
    }
}


func (m *TLInputBotInlineResultGame) SetId(v string) { m.Data2.Id = v }
func (m *TLInputBotInlineResultGame) GetId() string { return m.Data2.Id }

func (m *TLInputBotInlineResultGame) SetShortName(v string) { m.Data2.ShortName = v }
func (m *TLInputBotInlineResultGame) GetShortName() string { return m.Data2.ShortName }

func (m *TLInputBotInlineResultGame) SetSendMessage(v *InputBotInlineMessage) { m.Data2.SendMessage = v }
func (m *TLInputBotInlineResultGame) GetSendMessage() *InputBotInlineMessage { return m.Data2.SendMessage }


func NewTLInputBotInlineResultGame() * TLInputBotInlineResultGame {
    return &TLInputBotInlineResultGame{ Data2: &InputBotInlineResult_Data{} }
}

func (m* TLInputBotInlineResultGame) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputBotInlineResultGame))

    x.String(m.GetId())
    x.String(m.GetShortName())
    x.Bytes(m.GetSendMessage().Encode())

    return x.buf
}

func (m* TLInputBotInlineResultGame) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.String())
    m.SetShortName(dbuf.String())
    m3 := &InputBotInlineMessage{}
    m3.Decode(dbuf)
    m.SetSendMessage(m3)

    return dbuf.err
}
// inputBotInlineResult#88bf9319 flags:# id:string type:string title:flags.1?string description:flags.2?string url:flags.3?string thumb:flags.4?InputWebDocument content:flags.5?InputWebDocument send_message:InputBotInlineMessage = InputBotInlineResult;
func (m *TLInputBotInlineResult114) To_InputBotInlineResult() *InputBotInlineResult {
    return &InputBotInlineResult{
        Constructor: TLConstructor_CRC32_inputBotInlineResult114,
        Data2: m.Data2,
    }
}


func (m *TLInputBotInlineResult114) SetId(v string) { m.Data2.Id = v }
func (m *TLInputBotInlineResult114) GetId() string { return m.Data2.Id }

func (m *TLInputBotInlineResult114) SetType(v string) { m.Data2.Type = v }
func (m *TLInputBotInlineResult114) GetType() string { return m.Data2.Type }

func (m *TLInputBotInlineResult114) SetTitle(v string) { m.Data2.Title = v }
func (m *TLInputBotInlineResult114) GetTitle() string { return m.Data2.Title }

func (m *TLInputBotInlineResult114) SetDescription(v string) { m.Data2.Description = v }
func (m *TLInputBotInlineResult114) GetDescription() string { return m.Data2.Description }

func (m *TLInputBotInlineResult114) SetUrl(v string) { m.Data2.Url = v }
func (m *TLInputBotInlineResult114) GetUrl() string { return m.Data2.Url }

func (m *TLInputBotInlineResult114) SetThumb(v *InputWebDocument) { m.Data2.Thumb = v }
func (m *TLInputBotInlineResult114) GetThumb() *InputWebDocument { return m.Data2.Thumb }

func (m *TLInputBotInlineResult114) SetContent(v *InputWebDocument) { m.Data2.Content = v }
func (m *TLInputBotInlineResult114) GetContent() *InputWebDocument { return m.Data2.Content }

func (m *TLInputBotInlineResult114) SetSendMessage(v *InputBotInlineMessage) { m.Data2.SendMessage = v }
func (m *TLInputBotInlineResult114) GetSendMessage() *InputBotInlineMessage { return m.Data2.SendMessage }


func NewTLInputBotInlineResult114() * TLInputBotInlineResult114 {
    return &TLInputBotInlineResult114{ Data2: &InputBotInlineResult_Data{} }
}

func (m* TLInputBotInlineResult114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputBotInlineResult114))

    // flags
    var flags uint32 = 0
    if m.GetTitle() != "" { flags |= 1 << 1 }
    if m.GetDescription() != "" { flags |= 1 << 2 }
    if m.GetUrl() != "" { flags |= 1 << 3 }
    if m.GetThumb() != nil { flags |= 1 << 4 }
    if m.GetContent() != nil { flags |= 1 << 5 }
	x.UInt(flags)

    x.String(m.GetId())
    x.String(m.GetType())
    if (flags & (1 << 1)) != 0 { x.String(m.GetTitle()) }
    if (flags & (1 << 2)) != 0 { x.String(m.GetDescription()) }
    if (flags & (1 << 3)) != 0 { x.String(m.GetUrl()) }
    if (flags & (1 << 4)) != 0 { x.Bytes(m.GetThumb().Encode()) }
    if (flags & (1 << 5)) != 0 { x.Bytes(m.GetContent().Encode()) }
    x.Bytes(m.GetSendMessage().Encode())

    return x.buf
}

func (m* TLInputBotInlineResult114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetId(dbuf.String())
    m.SetType(dbuf.String())
    if (flags & (1 << 1)) != 0 { m.SetTitle(dbuf.String()) }
    if (flags & (1 << 2)) != 0 { m.SetDescription(dbuf.String()) }
    if (flags & (1 << 3)) != 0 { m.SetUrl(dbuf.String()) }
    if (flags & (1 << 4)) != 0 {
 m7 := &InputWebDocument{}
    m7.Decode(dbuf)
    m.SetThumb(m7) 
}
    if (flags & (1 << 5)) != 0 {
 m8 := &InputWebDocument{}
    m8.Decode(dbuf)
    m.SetContent(m8) 
}
    m9 := &InputBotInlineMessage{}
    m9.Decode(dbuf)
    m.SetSendMessage(m9)

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Messages_BotCallbackAnswer <--
//  + TL_MessagesBotCallbackAnswer
//

func (m *Messages_BotCallbackAnswer) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messages_botCallbackAnswer:
        t := m.To_MessagesBotCallbackAnswer()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Messages_BotCallbackAnswer) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messages_botCallbackAnswer:
        m2 := &TLMessagesBotCallbackAnswer{&Messages_BotCallbackAnswer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messages.botCallbackAnswer#36585ea4 flags:# alert:flags.1?true has_url:flags.3?true message:flags.0?string url:flags.2?string cache_time:int = messages.BotCallbackAnswer;
func (m *Messages_BotCallbackAnswer) To_MessagesBotCallbackAnswer() *TLMessagesBotCallbackAnswer {
    return &TLMessagesBotCallbackAnswer{
        Data2: m.Data2,
    }
}



// messages.botCallbackAnswer#36585ea4 flags:# alert:flags.1?true has_url:flags.3?true message:flags.0?string url:flags.2?string cache_time:int = messages.BotCallbackAnswer;
func (m *TLMessagesBotCallbackAnswer) To_Messages_BotCallbackAnswer() *Messages_BotCallbackAnswer {
    return &Messages_BotCallbackAnswer{
        Constructor: TLConstructor_CRC32_messages_botCallbackAnswer,
        Data2: m.Data2,
    }
}


func (m *TLMessagesBotCallbackAnswer) SetAlert(v bool) { m.Data2.Alert = v }
func (m *TLMessagesBotCallbackAnswer) GetAlert() bool { return m.Data2.Alert }

func (m *TLMessagesBotCallbackAnswer) SetHasUrl(v bool) { m.Data2.HasUrl = v }
func (m *TLMessagesBotCallbackAnswer) GetHasUrl() bool { return m.Data2.HasUrl }

func (m *TLMessagesBotCallbackAnswer) SetMessage(v string) { m.Data2.Message = v }
func (m *TLMessagesBotCallbackAnswer) GetMessage() string { return m.Data2.Message }

func (m *TLMessagesBotCallbackAnswer) SetUrl(v string) { m.Data2.Url = v }
func (m *TLMessagesBotCallbackAnswer) GetUrl() string { return m.Data2.Url }

func (m *TLMessagesBotCallbackAnswer) SetCacheTime(v int32) { m.Data2.CacheTime = v }
func (m *TLMessagesBotCallbackAnswer) GetCacheTime() int32 { return m.Data2.CacheTime }


func NewTLMessagesBotCallbackAnswer() * TLMessagesBotCallbackAnswer {
    return &TLMessagesBotCallbackAnswer{ Data2: &Messages_BotCallbackAnswer_Data{} }
}

func (m* TLMessagesBotCallbackAnswer) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_botCallbackAnswer))

    // flags
    var flags uint32 = 0
    if m.GetAlert() == true { flags |= 1 << 1 }
    if m.GetHasUrl() == true { flags |= 1 << 3 }
    if m.GetMessage() != "" { flags |= 1 << 0 }
    if m.GetUrl() != "" { flags |= 1 << 2 }
	x.UInt(flags)

    
    
    if (flags & (1 << 0)) != 0 { x.String(m.GetMessage()) }
    if (flags & (1 << 2)) != 0 { x.String(m.GetUrl()) }
    x.Int(m.GetCacheTime())

    return x.buf
}

func (m* TLMessagesBotCallbackAnswer) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 1)) != 0 { m.SetAlert(true) }
    if (flags & (1 << 3)) != 0 { m.SetHasUrl(true) }
    if (flags & (1 << 0)) != 0 { m.SetMessage(dbuf.String()) }
    if (flags & (1 << 2)) != 0 { m.SetUrl(dbuf.String()) }
    m.SetCacheTime(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// RichText <--
//  + TL_TextEmpty
//  + TL_TextPlain
//  + TL_TextBold
//  + TL_TextItalic
//  + TL_TextUnderline
//  + TL_TextStrike
//  + TL_TextFixed
//  + TL_TextUrl
//  + TL_TextEmail
//  + TL_TextConcat
//  + TL_TextSubscript
//  + TL_TextSuperscript
//  + TL_TextMarked
//  + TL_TextPhone
//  + TL_TextImage
//  + TL_TextAnchor
//

func (m *RichText) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_textEmpty:
        t := m.To_TextEmpty()
        return t.Encode()
    case TLConstructor_CRC32_textPlain:
        t := m.To_TextPlain()
        return t.Encode()
    case TLConstructor_CRC32_textBold:
        t := m.To_TextBold()
        return t.Encode()
    case TLConstructor_CRC32_textItalic:
        t := m.To_TextItalic()
        return t.Encode()
    case TLConstructor_CRC32_textUnderline:
        t := m.To_TextUnderline()
        return t.Encode()
    case TLConstructor_CRC32_textStrike:
        t := m.To_TextStrike()
        return t.Encode()
    case TLConstructor_CRC32_textFixed:
        t := m.To_TextFixed()
        return t.Encode()
    case TLConstructor_CRC32_textUrl:
        t := m.To_TextUrl()
        return t.Encode()
    case TLConstructor_CRC32_textEmail:
        t := m.To_TextEmail()
        return t.Encode()
    case TLConstructor_CRC32_textConcat:
        t := m.To_TextConcat()
        return t.Encode()
    case TLConstructor_CRC32_textSubscript:
        t := m.To_TextSubscript()
        return t.Encode()
    case TLConstructor_CRC32_textSuperscript:
        t := m.To_TextSuperscript()
        return t.Encode()
    case TLConstructor_CRC32_textMarked:
        t := m.To_TextMarked()
        return t.Encode()
    case TLConstructor_CRC32_textPhone:
        t := m.To_TextPhone()
        return t.Encode()
    case TLConstructor_CRC32_textImage:
        t := m.To_TextImage()
        return t.Encode()
    case TLConstructor_CRC32_textAnchor:
        t := m.To_TextAnchor()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *RichText) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_textEmpty:
        m2 := &TLTextEmpty{&RichText_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_textPlain:
        m2 := &TLTextPlain{&RichText_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_textBold:
        m2 := &TLTextBold{&RichText_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_textItalic:
        m2 := &TLTextItalic{&RichText_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_textUnderline:
        m2 := &TLTextUnderline{&RichText_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_textStrike:
        m2 := &TLTextStrike{&RichText_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_textFixed:
        m2 := &TLTextFixed{&RichText_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_textUrl:
        m2 := &TLTextUrl{&RichText_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_textEmail:
        m2 := &TLTextEmail{&RichText_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_textConcat:
        m2 := &TLTextConcat{&RichText_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_textSubscript:
        m2 := &TLTextSubscript{&RichText_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_textSuperscript:
        m2 := &TLTextSuperscript{&RichText_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_textMarked:
        m2 := &TLTextMarked{&RichText_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_textPhone:
        m2 := &TLTextPhone{&RichText_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_textImage:
        m2 := &TLTextImage{&RichText_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_textAnchor:
        m2 := &TLTextAnchor{&RichText_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// textEmpty#dc3d824f = RichText;
func (m *RichText) To_TextEmpty() *TLTextEmpty {
    return &TLTextEmpty{
        Data2: m.Data2,
    }
}

// textPlain#744694e0 text:string = RichText;
func (m *RichText) To_TextPlain() *TLTextPlain {
    return &TLTextPlain{
        Data2: m.Data2,
    }
}

// textBold#6724abc4 text:RichText = RichText;
func (m *RichText) To_TextBold() *TLTextBold {
    return &TLTextBold{
        Data2: m.Data2,
    }
}

// textItalic#d912a59c text:RichText = RichText;
func (m *RichText) To_TextItalic() *TLTextItalic {
    return &TLTextItalic{
        Data2: m.Data2,
    }
}

// textUnderline#c12622c4 text:RichText = RichText;
func (m *RichText) To_TextUnderline() *TLTextUnderline {
    return &TLTextUnderline{
        Data2: m.Data2,
    }
}

// textStrike#9bf8bb95 text:RichText = RichText;
func (m *RichText) To_TextStrike() *TLTextStrike {
    return &TLTextStrike{
        Data2: m.Data2,
    }
}

// textFixed#6c3f19b9 text:RichText = RichText;
func (m *RichText) To_TextFixed() *TLTextFixed {
    return &TLTextFixed{
        Data2: m.Data2,
    }
}

// textUrl#3c2884c1 text:RichText url:string webpage_id:long = RichText;
func (m *RichText) To_TextUrl() *TLTextUrl {
    return &TLTextUrl{
        Data2: m.Data2,
    }
}

// textEmail#de5a0dd6 text:RichText email:string = RichText;
func (m *RichText) To_TextEmail() *TLTextEmail {
    return &TLTextEmail{
        Data2: m.Data2,
    }
}

// textConcat#7e6260d7 texts:Vector<RichText> = RichText;
func (m *RichText) To_TextConcat() *TLTextConcat {
    return &TLTextConcat{
        Data2: m.Data2,
    }
}

// textSubscript#ed6a8504 text:RichText = RichText;
func (m *RichText) To_TextSubscript() *TLTextSubscript {
    return &TLTextSubscript{
        Data2: m.Data2,
    }
}

// textSuperscript#c7fb5e01 text:RichText = RichText;
func (m *RichText) To_TextSuperscript() *TLTextSuperscript {
    return &TLTextSuperscript{
        Data2: m.Data2,
    }
}

// textMarked#34b8621 text:RichText = RichText;
func (m *RichText) To_TextMarked() *TLTextMarked {
    return &TLTextMarked{
        Data2: m.Data2,
    }
}

// textPhone#1ccb966a text:RichText phone:string = RichText;
func (m *RichText) To_TextPhone() *TLTextPhone {
    return &TLTextPhone{
        Data2: m.Data2,
    }
}

// textImage#81ccf4f document_id:long w:int h:int = RichText;
func (m *RichText) To_TextImage() *TLTextImage {
    return &TLTextImage{
        Data2: m.Data2,
    }
}

// textAnchor#35553762 text:RichText name:string = RichText;
func (m *RichText) To_TextAnchor() *TLTextAnchor {
    return &TLTextAnchor{
        Data2: m.Data2,
    }
}



// textEmpty#dc3d824f = RichText;
func (m *TLTextEmpty) To_RichText() *RichText {
    return &RichText{
        Constructor: TLConstructor_CRC32_textEmpty,
        Data2: m.Data2,
    }
}



func NewTLTextEmpty() * TLTextEmpty {
    return &TLTextEmpty{ Data2: &RichText_Data{} }
}

func (m* TLTextEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_textEmpty))


    return x.buf
}

func (m* TLTextEmpty) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// textPlain#744694e0 text:string = RichText;
func (m *TLTextPlain) To_RichText() *RichText {
    return &RichText{
        Constructor: TLConstructor_CRC32_textPlain,
        Data2: m.Data2,
    }
}


func (m *TLTextPlain) SetText(v string) { m.Data2.Text_1 = v }
func (m *TLTextPlain) GetText() string { return m.Data2.Text_1 }


func NewTLTextPlain() * TLTextPlain {
    return &TLTextPlain{ Data2: &RichText_Data{} }
}

func (m* TLTextPlain) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_textPlain))

    x.String(m.GetText())

    return x.buf
}

func (m* TLTextPlain) Decode(dbuf *DecodeBuf) error {
    m.SetText(dbuf.String())

    return dbuf.err
}
// textBold#6724abc4 text:RichText = RichText;
func (m *TLTextBold) To_RichText() *RichText {
    return &RichText{
        Constructor: TLConstructor_CRC32_textBold,
        Data2: m.Data2,
    }
}


func (m *TLTextBold) SetText(v *RichText) { m.Data2.Text_2 = v }
func (m *TLTextBold) GetText() *RichText { return m.Data2.Text_2 }


func NewTLTextBold() * TLTextBold {
    return &TLTextBold{ Data2: &RichText_Data{} }
}

func (m* TLTextBold) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_textBold))

    x.Bytes(m.GetText().Encode())

    return x.buf
}

func (m* TLTextBold) Decode(dbuf *DecodeBuf) error {
    m1 := &RichText{}
    m1.Decode(dbuf)
    m.SetText(m1)

    return dbuf.err
}
// textItalic#d912a59c text:RichText = RichText;
func (m *TLTextItalic) To_RichText() *RichText {
    return &RichText{
        Constructor: TLConstructor_CRC32_textItalic,
        Data2: m.Data2,
    }
}


func (m *TLTextItalic) SetText(v *RichText) { m.Data2.Text_2 = v }
func (m *TLTextItalic) GetText() *RichText { return m.Data2.Text_2 }


func NewTLTextItalic() * TLTextItalic {
    return &TLTextItalic{ Data2: &RichText_Data{} }
}

func (m* TLTextItalic) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_textItalic))

    x.Bytes(m.GetText().Encode())

    return x.buf
}

func (m* TLTextItalic) Decode(dbuf *DecodeBuf) error {
    m1 := &RichText{}
    m1.Decode(dbuf)
    m.SetText(m1)

    return dbuf.err
}
// textUnderline#c12622c4 text:RichText = RichText;
func (m *TLTextUnderline) To_RichText() *RichText {
    return &RichText{
        Constructor: TLConstructor_CRC32_textUnderline,
        Data2: m.Data2,
    }
}


func (m *TLTextUnderline) SetText(v *RichText) { m.Data2.Text_2 = v }
func (m *TLTextUnderline) GetText() *RichText { return m.Data2.Text_2 }


func NewTLTextUnderline() * TLTextUnderline {
    return &TLTextUnderline{ Data2: &RichText_Data{} }
}

func (m* TLTextUnderline) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_textUnderline))

    x.Bytes(m.GetText().Encode())

    return x.buf
}

func (m* TLTextUnderline) Decode(dbuf *DecodeBuf) error {
    m1 := &RichText{}
    m1.Decode(dbuf)
    m.SetText(m1)

    return dbuf.err
}
// textStrike#9bf8bb95 text:RichText = RichText;
func (m *TLTextStrike) To_RichText() *RichText {
    return &RichText{
        Constructor: TLConstructor_CRC32_textStrike,
        Data2: m.Data2,
    }
}


func (m *TLTextStrike) SetText(v *RichText) { m.Data2.Text_2 = v }
func (m *TLTextStrike) GetText() *RichText { return m.Data2.Text_2 }


func NewTLTextStrike() * TLTextStrike {
    return &TLTextStrike{ Data2: &RichText_Data{} }
}

func (m* TLTextStrike) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_textStrike))

    x.Bytes(m.GetText().Encode())

    return x.buf
}

func (m* TLTextStrike) Decode(dbuf *DecodeBuf) error {
    m1 := &RichText{}
    m1.Decode(dbuf)
    m.SetText(m1)

    return dbuf.err
}
// textFixed#6c3f19b9 text:RichText = RichText;
func (m *TLTextFixed) To_RichText() *RichText {
    return &RichText{
        Constructor: TLConstructor_CRC32_textFixed,
        Data2: m.Data2,
    }
}


func (m *TLTextFixed) SetText(v *RichText) { m.Data2.Text_2 = v }
func (m *TLTextFixed) GetText() *RichText { return m.Data2.Text_2 }


func NewTLTextFixed() * TLTextFixed {
    return &TLTextFixed{ Data2: &RichText_Data{} }
}

func (m* TLTextFixed) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_textFixed))

    x.Bytes(m.GetText().Encode())

    return x.buf
}

func (m* TLTextFixed) Decode(dbuf *DecodeBuf) error {
    m1 := &RichText{}
    m1.Decode(dbuf)
    m.SetText(m1)

    return dbuf.err
}
// textUrl#3c2884c1 text:RichText url:string webpage_id:long = RichText;
func (m *TLTextUrl) To_RichText() *RichText {
    return &RichText{
        Constructor: TLConstructor_CRC32_textUrl,
        Data2: m.Data2,
    }
}


func (m *TLTextUrl) SetText(v *RichText) { m.Data2.Text_2 = v }
func (m *TLTextUrl) GetText() *RichText { return m.Data2.Text_2 }

func (m *TLTextUrl) SetUrl(v string) { m.Data2.Url = v }
func (m *TLTextUrl) GetUrl() string { return m.Data2.Url }

func (m *TLTextUrl) SetWebpageId(v int64) { m.Data2.WebpageId = v }
func (m *TLTextUrl) GetWebpageId() int64 { return m.Data2.WebpageId }


func NewTLTextUrl() * TLTextUrl {
    return &TLTextUrl{ Data2: &RichText_Data{} }
}

func (m* TLTextUrl) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_textUrl))

    x.Bytes(m.GetText().Encode())
    x.String(m.GetUrl())
    x.Long(m.GetWebpageId())

    return x.buf
}

func (m* TLTextUrl) Decode(dbuf *DecodeBuf) error {
    m1 := &RichText{}
    m1.Decode(dbuf)
    m.SetText(m1)
    m.SetUrl(dbuf.String())
    m.SetWebpageId(dbuf.Long())

    return dbuf.err
}
// textEmail#de5a0dd6 text:RichText email:string = RichText;
func (m *TLTextEmail) To_RichText() *RichText {
    return &RichText{
        Constructor: TLConstructor_CRC32_textEmail,
        Data2: m.Data2,
    }
}


func (m *TLTextEmail) SetText(v *RichText) { m.Data2.Text_2 = v }
func (m *TLTextEmail) GetText() *RichText { return m.Data2.Text_2 }

func (m *TLTextEmail) SetEmail(v string) { m.Data2.Email = v }
func (m *TLTextEmail) GetEmail() string { return m.Data2.Email }


func NewTLTextEmail() * TLTextEmail {
    return &TLTextEmail{ Data2: &RichText_Data{} }
}

func (m* TLTextEmail) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_textEmail))

    x.Bytes(m.GetText().Encode())
    x.String(m.GetEmail())

    return x.buf
}

func (m* TLTextEmail) Decode(dbuf *DecodeBuf) error {
    m1 := &RichText{}
    m1.Decode(dbuf)
    m.SetText(m1)
    m.SetEmail(dbuf.String())

    return dbuf.err
}
// textConcat#7e6260d7 texts:Vector<RichText> = RichText;
func (m *TLTextConcat) To_RichText() *RichText {
    return &RichText{
        Constructor: TLConstructor_CRC32_textConcat,
        Data2: m.Data2,
    }
}


func (m *TLTextConcat) SetTexts(v []*RichText) { m.Data2.Texts = v }
func (m *TLTextConcat) GetTexts() []*RichText { return m.Data2.Texts }


func NewTLTextConcat() * TLTextConcat {
    return &TLTextConcat{ Data2: &RichText_Data{} }
}

func (m* TLTextConcat) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_textConcat))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetTexts())))
for _, v := range m.GetTexts() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLTextConcat) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*RichText, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &RichText{}
	v1[i].Decode(dbuf)
}
m.SetTexts(v1)


    return dbuf.err
}
// textSubscript#ed6a8504 text:RichText = RichText;
func (m *TLTextSubscript) To_RichText() *RichText {
    return &RichText{
        Constructor: TLConstructor_CRC32_textSubscript,
        Data2: m.Data2,
    }
}


func (m *TLTextSubscript) SetText(v *RichText) { m.Data2.Text_2 = v }
func (m *TLTextSubscript) GetText() *RichText { return m.Data2.Text_2 }


func NewTLTextSubscript() * TLTextSubscript {
    return &TLTextSubscript{ Data2: &RichText_Data{} }
}

func (m* TLTextSubscript) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_textSubscript))

    x.Bytes(m.GetText().Encode())

    return x.buf
}

func (m* TLTextSubscript) Decode(dbuf *DecodeBuf) error {
    m1 := &RichText{}
    m1.Decode(dbuf)
    m.SetText(m1)

    return dbuf.err
}
// textSuperscript#c7fb5e01 text:RichText = RichText;
func (m *TLTextSuperscript) To_RichText() *RichText {
    return &RichText{
        Constructor: TLConstructor_CRC32_textSuperscript,
        Data2: m.Data2,
    }
}


func (m *TLTextSuperscript) SetText(v *RichText) { m.Data2.Text_2 = v }
func (m *TLTextSuperscript) GetText() *RichText { return m.Data2.Text_2 }


func NewTLTextSuperscript() * TLTextSuperscript {
    return &TLTextSuperscript{ Data2: &RichText_Data{} }
}

func (m* TLTextSuperscript) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_textSuperscript))

    x.Bytes(m.GetText().Encode())

    return x.buf
}

func (m* TLTextSuperscript) Decode(dbuf *DecodeBuf) error {
    m1 := &RichText{}
    m1.Decode(dbuf)
    m.SetText(m1)

    return dbuf.err
}
// textMarked#34b8621 text:RichText = RichText;
func (m *TLTextMarked) To_RichText() *RichText {
    return &RichText{
        Constructor: TLConstructor_CRC32_textMarked,
        Data2: m.Data2,
    }
}


func (m *TLTextMarked) SetText(v *RichText) { m.Data2.Text_2 = v }
func (m *TLTextMarked) GetText() *RichText { return m.Data2.Text_2 }


func NewTLTextMarked() * TLTextMarked {
    return &TLTextMarked{ Data2: &RichText_Data{} }
}

func (m* TLTextMarked) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_textMarked))

    x.Bytes(m.GetText().Encode())

    return x.buf
}

func (m* TLTextMarked) Decode(dbuf *DecodeBuf) error {
    m1 := &RichText{}
    m1.Decode(dbuf)
    m.SetText(m1)

    return dbuf.err
}
// textPhone#1ccb966a text:RichText phone:string = RichText;
func (m *TLTextPhone) To_RichText() *RichText {
    return &RichText{
        Constructor: TLConstructor_CRC32_textPhone,
        Data2: m.Data2,
    }
}


func (m *TLTextPhone) SetText(v *RichText) { m.Data2.Text_2 = v }
func (m *TLTextPhone) GetText() *RichText { return m.Data2.Text_2 }

func (m *TLTextPhone) SetPhone(v string) { m.Data2.Phone = v }
func (m *TLTextPhone) GetPhone() string { return m.Data2.Phone }


func NewTLTextPhone() * TLTextPhone {
    return &TLTextPhone{ Data2: &RichText_Data{} }
}

func (m* TLTextPhone) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_textPhone))

    x.Bytes(m.GetText().Encode())
    x.String(m.GetPhone())

    return x.buf
}

func (m* TLTextPhone) Decode(dbuf *DecodeBuf) error {
    m1 := &RichText{}
    m1.Decode(dbuf)
    m.SetText(m1)
    m.SetPhone(dbuf.String())

    return dbuf.err
}
// textImage#81ccf4f document_id:long w:int h:int = RichText;
func (m *TLTextImage) To_RichText() *RichText {
    return &RichText{
        Constructor: TLConstructor_CRC32_textImage,
        Data2: m.Data2,
    }
}


func (m *TLTextImage) SetDocumentId(v int64) { m.Data2.DocumentId = v }
func (m *TLTextImage) GetDocumentId() int64 { return m.Data2.DocumentId }

func (m *TLTextImage) SetW(v int32) { m.Data2.W = v }
func (m *TLTextImage) GetW() int32 { return m.Data2.W }

func (m *TLTextImage) SetH(v int32) { m.Data2.H = v }
func (m *TLTextImage) GetH() int32 { return m.Data2.H }


func NewTLTextImage() * TLTextImage {
    return &TLTextImage{ Data2: &RichText_Data{} }
}

func (m* TLTextImage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_textImage))

    x.Long(m.GetDocumentId())
    x.Int(m.GetW())
    x.Int(m.GetH())

    return x.buf
}

func (m* TLTextImage) Decode(dbuf *DecodeBuf) error {
    m.SetDocumentId(dbuf.Long())
    m.SetW(dbuf.Int())
    m.SetH(dbuf.Int())

    return dbuf.err
}
// textAnchor#35553762 text:RichText name:string = RichText;
func (m *TLTextAnchor) To_RichText() *RichText {
    return &RichText{
        Constructor: TLConstructor_CRC32_textAnchor,
        Data2: m.Data2,
    }
}


func (m *TLTextAnchor) SetText(v *RichText) { m.Data2.Text_2 = v }
func (m *TLTextAnchor) GetText() *RichText { return m.Data2.Text_2 }

func (m *TLTextAnchor) SetName(v string) { m.Data2.Name = v }
func (m *TLTextAnchor) GetName() string { return m.Data2.Name }


func NewTLTextAnchor() * TLTextAnchor {
    return &TLTextAnchor{ Data2: &RichText_Data{} }
}

func (m* TLTextAnchor) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_textAnchor))

    x.Bytes(m.GetText().Encode())
    x.String(m.GetName())

    return x.buf
}

func (m* TLTextAnchor) Decode(dbuf *DecodeBuf) error {
    m1 := &RichText{}
    m1.Decode(dbuf)
    m.SetText(m1)
    m.SetName(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// PaymentSavedCredentials <--
//  + TL_PaymentSavedCredentialsCard
//

func (m *PaymentSavedCredentials) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_paymentSavedCredentialsCard:
        t := m.To_PaymentSavedCredentialsCard()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *PaymentSavedCredentials) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_paymentSavedCredentialsCard:
        m2 := &TLPaymentSavedCredentialsCard{&PaymentSavedCredentials_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// paymentSavedCredentialsCard#cdc27a1f id:string title:string = PaymentSavedCredentials;
func (m *PaymentSavedCredentials) To_PaymentSavedCredentialsCard() *TLPaymentSavedCredentialsCard {
    return &TLPaymentSavedCredentialsCard{
        Data2: m.Data2,
    }
}



// paymentSavedCredentialsCard#cdc27a1f id:string title:string = PaymentSavedCredentials;
func (m *TLPaymentSavedCredentialsCard) To_PaymentSavedCredentials() *PaymentSavedCredentials {
    return &PaymentSavedCredentials{
        Constructor: TLConstructor_CRC32_paymentSavedCredentialsCard,
        Data2: m.Data2,
    }
}


func (m *TLPaymentSavedCredentialsCard) SetId(v string) { m.Data2.Id = v }
func (m *TLPaymentSavedCredentialsCard) GetId() string { return m.Data2.Id }

func (m *TLPaymentSavedCredentialsCard) SetTitle(v string) { m.Data2.Title = v }
func (m *TLPaymentSavedCredentialsCard) GetTitle() string { return m.Data2.Title }


func NewTLPaymentSavedCredentialsCard() * TLPaymentSavedCredentialsCard {
    return &TLPaymentSavedCredentialsCard{ Data2: &PaymentSavedCredentials_Data{} }
}

func (m* TLPaymentSavedCredentialsCard) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_paymentSavedCredentialsCard))

    x.String(m.GetId())
    x.String(m.GetTitle())

    return x.buf
}

func (m* TLPaymentSavedCredentialsCard) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.String())
    m.SetTitle(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Messages_FoundStickerSets <--
//  + TL_MessagesFoundStickerSetsNotModified
//  + TL_MessagesFoundStickerSets
//

func (m *Messages_FoundStickerSets) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messages_foundStickerSetsNotModified:
        t := m.To_MessagesFoundStickerSetsNotModified()
        return t.Encode()
    case TLConstructor_CRC32_messages_foundStickerSets:
        t := m.To_MessagesFoundStickerSets()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Messages_FoundStickerSets) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messages_foundStickerSetsNotModified:
        m2 := &TLMessagesFoundStickerSetsNotModified{&Messages_FoundStickerSets_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messages_foundStickerSets:
        m2 := &TLMessagesFoundStickerSets{&Messages_FoundStickerSets_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messages.foundStickerSetsNotModified#d54b65d = messages.FoundStickerSets;
func (m *Messages_FoundStickerSets) To_MessagesFoundStickerSetsNotModified() *TLMessagesFoundStickerSetsNotModified {
    return &TLMessagesFoundStickerSetsNotModified{
        Data2: m.Data2,
    }
}

// messages.foundStickerSets#5108d648 hash:int sets:Vector<StickerSetCovered> = messages.FoundStickerSets;
func (m *Messages_FoundStickerSets) To_MessagesFoundStickerSets() *TLMessagesFoundStickerSets {
    return &TLMessagesFoundStickerSets{
        Data2: m.Data2,
    }
}



// messages.foundStickerSetsNotModified#d54b65d = messages.FoundStickerSets;
func (m *TLMessagesFoundStickerSetsNotModified) To_Messages_FoundStickerSets() *Messages_FoundStickerSets {
    return &Messages_FoundStickerSets{
        Constructor: TLConstructor_CRC32_messages_foundStickerSetsNotModified,
        Data2: m.Data2,
    }
}



func NewTLMessagesFoundStickerSetsNotModified() * TLMessagesFoundStickerSetsNotModified {
    return &TLMessagesFoundStickerSetsNotModified{ Data2: &Messages_FoundStickerSets_Data{} }
}

func (m* TLMessagesFoundStickerSetsNotModified) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_foundStickerSetsNotModified))


    return x.buf
}

func (m* TLMessagesFoundStickerSetsNotModified) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// messages.foundStickerSets#5108d648 hash:int sets:Vector<StickerSetCovered> = messages.FoundStickerSets;
func (m *TLMessagesFoundStickerSets) To_Messages_FoundStickerSets() *Messages_FoundStickerSets {
    return &Messages_FoundStickerSets{
        Constructor: TLConstructor_CRC32_messages_foundStickerSets,
        Data2: m.Data2,
    }
}


func (m *TLMessagesFoundStickerSets) SetHash(v int32) { m.Data2.Hash = v }
func (m *TLMessagesFoundStickerSets) GetHash() int32 { return m.Data2.Hash }

func (m *TLMessagesFoundStickerSets) SetSets(v []*StickerSetCovered) { m.Data2.Sets = v }
func (m *TLMessagesFoundStickerSets) GetSets() []*StickerSetCovered { return m.Data2.Sets }


func NewTLMessagesFoundStickerSets() * TLMessagesFoundStickerSets {
    return &TLMessagesFoundStickerSets{ Data2: &Messages_FoundStickerSets_Data{} }
}

func (m* TLMessagesFoundStickerSets) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_foundStickerSets))

    x.Int(m.GetHash())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetSets())))
for _, v := range m.GetSets() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLMessagesFoundStickerSets) Decode(dbuf *DecodeBuf) error {
    m.SetHash(dbuf.Int())
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*StickerSetCovered, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &StickerSetCovered{}
	v2[i].Decode(dbuf)
}
m.SetSets(v2)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// PointsHistoryResult <--
//  + TL_PointsHistoryResult
//

func (m *PointsHistoryResult) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_pointsHistoryResult:
        t := m.To_PointsHistoryResult()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *PointsHistoryResult) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_pointsHistoryResult:
        m2 := &TLPointsHistoryResult{&PointsHistoryResult_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// pointsHistoryResult#5ae74afa items:Vector<PointsEventItem> count:int points:long = PointsHistoryResult;
func (m *PointsHistoryResult) To_PointsHistoryResult() *TLPointsHistoryResult {
    return &TLPointsHistoryResult{
        Data2: m.Data2,
    }
}



// pointsHistoryResult#5ae74afa items:Vector<PointsEventItem> count:int points:long = PointsHistoryResult;
func (m *TLPointsHistoryResult) To_PointsHistoryResult() *PointsHistoryResult {
    return &PointsHistoryResult{
        Constructor: TLConstructor_CRC32_pointsHistoryResult,
        Data2: m.Data2,
    }
}


func (m *TLPointsHistoryResult) SetItems(v []*PointsEventItem) { m.Data2.Items = v }
func (m *TLPointsHistoryResult) GetItems() []*PointsEventItem { return m.Data2.Items }

func (m *TLPointsHistoryResult) SetCount(v int32) { m.Data2.Count = v }
func (m *TLPointsHistoryResult) GetCount() int32 { return m.Data2.Count }

func (m *TLPointsHistoryResult) SetPoints(v int64) { m.Data2.Points = v }
func (m *TLPointsHistoryResult) GetPoints() int64 { return m.Data2.Points }


func NewTLPointsHistoryResult() * TLPointsHistoryResult {
    return &TLPointsHistoryResult{ Data2: &PointsHistoryResult_Data{} }
}

func (m* TLPointsHistoryResult) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pointsHistoryResult))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetItems())))
for _, v := range m.GetItems() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(m.GetCount())
    x.Long(m.GetPoints())

    return x.buf
}

func (m* TLPointsHistoryResult) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*PointsEventItem, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &PointsEventItem{}
	v1[i].Decode(dbuf)
}
m.SetItems(v1)

    m.SetCount(dbuf.Int())
    m.SetPoints(dbuf.Long())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// IntResult <--
//  + TL_IntResult
//

func (m *IntResult) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_intResult:
        t := m.To_IntResult()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *IntResult) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_intResult:
        m2 := &TLIntResult{&IntResult_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// intResult#b1e6c6d7 value:int = IntResult;
func (m *IntResult) To_IntResult() *TLIntResult {
    return &TLIntResult{
        Data2: m.Data2,
    }
}



// intResult#b1e6c6d7 value:int = IntResult;
func (m *TLIntResult) To_IntResult() *IntResult {
    return &IntResult{
        Constructor: TLConstructor_CRC32_intResult,
        Data2: m.Data2,
    }
}


func (m *TLIntResult) SetValue(v int32) { m.Data2.Value = v }
func (m *TLIntResult) GetValue() int32 { return m.Data2.Value }


func NewTLIntResult() * TLIntResult {
    return &TLIntResult{ Data2: &IntResult_Data{} }
}

func (m* TLIntResult) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_intResult))

    x.Int(m.GetValue())

    return x.buf
}

func (m* TLIntResult) Decode(dbuf *DecodeBuf) error {
    m.SetValue(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// GeoPoint <--
//  + TL_GeoPointEmpty
//  + TL_GeoPoint
//  + TL_GeoPoint114
//

func (m *GeoPoint) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_geoPointEmpty:
        t := m.To_GeoPointEmpty()
        return t.Encode()
    case TLConstructor_CRC32_geoPoint:
        t := m.To_GeoPoint()
        return t.Encode()
    case TLConstructor_CRC32_geoPoint114:
        t := m.To_GeoPoint114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *GeoPoint) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_geoPointEmpty:
        m2 := &TLGeoPointEmpty{&GeoPoint_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_geoPoint:
        m2 := &TLGeoPoint{&GeoPoint_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_geoPoint114:
        m2 := &TLGeoPoint114{&GeoPoint_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// geoPointEmpty#1117dd5f = GeoPoint;
func (m *GeoPoint) To_GeoPointEmpty() *TLGeoPointEmpty {
    return &TLGeoPointEmpty{
        Data2: m.Data2,
    }
}

// geoPoint#2049d70c long:double lat:double = GeoPoint;
func (m *GeoPoint) To_GeoPoint() *TLGeoPoint {
    return &TLGeoPoint{
        Data2: m.Data2,
    }
}

// geoPoint#296f104 long:double lat:double access_hash:long = GeoPoint;
func (m *GeoPoint) To_GeoPoint114() *TLGeoPoint114 {
    return &TLGeoPoint114{
        Data2: m.Data2,
    }
}



// geoPointEmpty#1117dd5f = GeoPoint;
func (m *TLGeoPointEmpty) To_GeoPoint() *GeoPoint {
    return &GeoPoint{
        Constructor: TLConstructor_CRC32_geoPointEmpty,
        Data2: m.Data2,
    }
}



func NewTLGeoPointEmpty() * TLGeoPointEmpty {
    return &TLGeoPointEmpty{ Data2: &GeoPoint_Data{} }
}

func (m* TLGeoPointEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_geoPointEmpty))


    return x.buf
}

func (m* TLGeoPointEmpty) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// geoPoint#2049d70c long:double lat:double = GeoPoint;
func (m *TLGeoPoint) To_GeoPoint() *GeoPoint {
    return &GeoPoint{
        Constructor: TLConstructor_CRC32_geoPoint,
        Data2: m.Data2,
    }
}


func (m *TLGeoPoint) SetLong(v float64) { m.Data2.Long = v }
func (m *TLGeoPoint) GetLong() float64 { return m.Data2.Long }

func (m *TLGeoPoint) SetLat(v float64) { m.Data2.Lat = v }
func (m *TLGeoPoint) GetLat() float64 { return m.Data2.Lat }


func NewTLGeoPoint() * TLGeoPoint {
    return &TLGeoPoint{ Data2: &GeoPoint_Data{} }
}

func (m* TLGeoPoint) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_geoPoint))

    x.Double(m.GetLong())
    x.Double(m.GetLat())

    return x.buf
}

func (m* TLGeoPoint) Decode(dbuf *DecodeBuf) error {
    m.SetLong(dbuf.Double())
    m.SetLat(dbuf.Double())

    return dbuf.err
}
// geoPoint#296f104 long:double lat:double access_hash:long = GeoPoint;
func (m *TLGeoPoint114) To_GeoPoint() *GeoPoint {
    return &GeoPoint{
        Constructor: TLConstructor_CRC32_geoPoint114,
        Data2: m.Data2,
    }
}


func (m *TLGeoPoint114) SetLong(v float64) { m.Data2.Long = v }
func (m *TLGeoPoint114) GetLong() float64 { return m.Data2.Long }

func (m *TLGeoPoint114) SetLat(v float64) { m.Data2.Lat = v }
func (m *TLGeoPoint114) GetLat() float64 { return m.Data2.Lat }

func (m *TLGeoPoint114) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLGeoPoint114) GetAccessHash() int64 { return m.Data2.AccessHash }


func NewTLGeoPoint114() * TLGeoPoint114 {
    return &TLGeoPoint114{ Data2: &GeoPoint_Data{} }
}

func (m* TLGeoPoint114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_geoPoint114))

    x.Double(m.GetLong())
    x.Double(m.GetLat())
    x.Long(m.GetAccessHash())

    return x.buf
}

func (m* TLGeoPoint114) Decode(dbuf *DecodeBuf) error {
    m.SetLong(dbuf.Double())
    m.SetLat(dbuf.Double())
    m.SetAccessHash(dbuf.Long())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Auth_ExportedAuthorization <--
//  + TL_AuthExportedAuthorization
//

func (m *Auth_ExportedAuthorization) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_auth_exportedAuthorization:
        t := m.To_AuthExportedAuthorization()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Auth_ExportedAuthorization) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_auth_exportedAuthorization:
        m2 := &TLAuthExportedAuthorization{&Auth_ExportedAuthorization_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// auth.exportedAuthorization#df969c2d id:int bytes:bytes = auth.ExportedAuthorization;
func (m *Auth_ExportedAuthorization) To_AuthExportedAuthorization() *TLAuthExportedAuthorization {
    return &TLAuthExportedAuthorization{
        Data2: m.Data2,
    }
}



// auth.exportedAuthorization#df969c2d id:int bytes:bytes = auth.ExportedAuthorization;
func (m *TLAuthExportedAuthorization) To_Auth_ExportedAuthorization() *Auth_ExportedAuthorization {
    return &Auth_ExportedAuthorization{
        Constructor: TLConstructor_CRC32_auth_exportedAuthorization,
        Data2: m.Data2,
    }
}


func (m *TLAuthExportedAuthorization) SetId(v int32) { m.Data2.Id = v }
func (m *TLAuthExportedAuthorization) GetId() int32 { return m.Data2.Id }

func (m *TLAuthExportedAuthorization) SetBytes(v []byte) { m.Data2.Bytes = v }
func (m *TLAuthExportedAuthorization) GetBytes() []byte { return m.Data2.Bytes }


func NewTLAuthExportedAuthorization() * TLAuthExportedAuthorization {
    return &TLAuthExportedAuthorization{ Data2: &Auth_ExportedAuthorization_Data{} }
}

func (m* TLAuthExportedAuthorization) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_auth_exportedAuthorization))

    x.Int(m.GetId())
    x.StringBytes(m.GetBytes())

    return x.buf
}

func (m* TLAuthExportedAuthorization) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Int())
    m.SetBytes(dbuf.StringBytes())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// ContactBlocked <--
//  + TL_ContactBlocked
//

func (m *ContactBlocked) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_contactBlocked:
        t := m.To_ContactBlocked()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *ContactBlocked) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_contactBlocked:
        m2 := &TLContactBlocked{&ContactBlocked_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// contactBlocked#561bc879 user_id:int date:int = ContactBlocked;
func (m *ContactBlocked) To_ContactBlocked() *TLContactBlocked {
    return &TLContactBlocked{
        Data2: m.Data2,
    }
}



// contactBlocked#561bc879 user_id:int date:int = ContactBlocked;
func (m *TLContactBlocked) To_ContactBlocked() *ContactBlocked {
    return &ContactBlocked{
        Constructor: TLConstructor_CRC32_contactBlocked,
        Data2: m.Data2,
    }
}


func (m *TLContactBlocked) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLContactBlocked) GetUserId() int32 { return m.Data2.UserId }

func (m *TLContactBlocked) SetDate(v int32) { m.Data2.Date = v }
func (m *TLContactBlocked) GetDate() int32 { return m.Data2.Date }


func NewTLContactBlocked() * TLContactBlocked {
    return &TLContactBlocked{ Data2: &ContactBlocked_Data{} }
}

func (m* TLContactBlocked) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_contactBlocked))

    x.Int(m.GetUserId())
    x.Int(m.GetDate())

    return x.buf
}

func (m* TLContactBlocked) Decode(dbuf *DecodeBuf) error {
    m.SetUserId(dbuf.Int())
    m.SetDate(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// AccountDaysTTL <--
//  + TL_AccountDaysTTL
//

func (m *AccountDaysTTL) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_accountDaysTTL:
        t := m.To_AccountDaysTTL()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *AccountDaysTTL) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_accountDaysTTL:
        m2 := &TLAccountDaysTTL{&AccountDaysTTL_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// accountDaysTTL#b8d0afdf days:int = AccountDaysTTL;
func (m *AccountDaysTTL) To_AccountDaysTTL() *TLAccountDaysTTL {
    return &TLAccountDaysTTL{
        Data2: m.Data2,
    }
}



// accountDaysTTL#b8d0afdf days:int = AccountDaysTTL;
func (m *TLAccountDaysTTL) To_AccountDaysTTL() *AccountDaysTTL {
    return &AccountDaysTTL{
        Constructor: TLConstructor_CRC32_accountDaysTTL,
        Data2: m.Data2,
    }
}


func (m *TLAccountDaysTTL) SetDays(v int32) { m.Data2.Days = v }
func (m *TLAccountDaysTTL) GetDays() int32 { return m.Data2.Days }


func NewTLAccountDaysTTL() * TLAccountDaysTTL {
    return &TLAccountDaysTTL{ Data2: &AccountDaysTTL_Data{} }
}

func (m* TLAccountDaysTTL) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_accountDaysTTL))

    x.Int(m.GetDays())

    return x.buf
}

func (m* TLAccountDaysTTL) Decode(dbuf *DecodeBuf) error {
    m.SetDays(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// DisabledFeature <--
//  + TL_DisabledFeature
//

func (m *DisabledFeature) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_disabledFeature:
        t := m.To_DisabledFeature()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *DisabledFeature) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_disabledFeature:
        m2 := &TLDisabledFeature{&DisabledFeature_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// disabledFeature#ae636f24 feature:string description:string = DisabledFeature;
func (m *DisabledFeature) To_DisabledFeature() *TLDisabledFeature {
    return &TLDisabledFeature{
        Data2: m.Data2,
    }
}



// disabledFeature#ae636f24 feature:string description:string = DisabledFeature;
func (m *TLDisabledFeature) To_DisabledFeature() *DisabledFeature {
    return &DisabledFeature{
        Constructor: TLConstructor_CRC32_disabledFeature,
        Data2: m.Data2,
    }
}


func (m *TLDisabledFeature) SetFeature(v string) { m.Data2.Feature = v }
func (m *TLDisabledFeature) GetFeature() string { return m.Data2.Feature }

func (m *TLDisabledFeature) SetDescription(v string) { m.Data2.Description = v }
func (m *TLDisabledFeature) GetDescription() string { return m.Data2.Description }


func NewTLDisabledFeature() * TLDisabledFeature {
    return &TLDisabledFeature{ Data2: &DisabledFeature_Data{} }
}

func (m* TLDisabledFeature) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_disabledFeature))

    x.String(m.GetFeature())
    x.String(m.GetDescription())

    return x.buf
}

func (m* TLDisabledFeature) Decode(dbuf *DecodeBuf) error {
    m.SetFeature(dbuf.String())
    m.SetDescription(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// MessageEntity <--
//  + TL_MessageEntityUnknown
//  + TL_MessageEntityMention
//  + TL_MessageEntityHashtag
//  + TL_MessageEntityBotCommand
//  + TL_MessageEntityUrl
//  + TL_MessageEntityEmail
//  + TL_MessageEntityBold
//  + TL_MessageEntityItalic
//  + TL_MessageEntityCode
//  + TL_MessageEntityPre
//  + TL_MessageEntityTextUrl
//  + TL_MessageEntityMentionName
//  + TL_InputMessageEntityMentionName
//  + TL_MessageEntityPhone
//  + TL_MessageEntityCashtag
//  + TL_MessageEntityUnderline
//  + TL_MessageEntityStrike
//  + TL_MessageEntityBlockquote
//  + TL_MessageEntityBankCard
//

func (m *MessageEntity) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messageEntityUnknown:
        t := m.To_MessageEntityUnknown()
        return t.Encode()
    case TLConstructor_CRC32_messageEntityMention:
        t := m.To_MessageEntityMention()
        return t.Encode()
    case TLConstructor_CRC32_messageEntityHashtag:
        t := m.To_MessageEntityHashtag()
        return t.Encode()
    case TLConstructor_CRC32_messageEntityBotCommand:
        t := m.To_MessageEntityBotCommand()
        return t.Encode()
    case TLConstructor_CRC32_messageEntityUrl:
        t := m.To_MessageEntityUrl()
        return t.Encode()
    case TLConstructor_CRC32_messageEntityEmail:
        t := m.To_MessageEntityEmail()
        return t.Encode()
    case TLConstructor_CRC32_messageEntityBold:
        t := m.To_MessageEntityBold()
        return t.Encode()
    case TLConstructor_CRC32_messageEntityItalic:
        t := m.To_MessageEntityItalic()
        return t.Encode()
    case TLConstructor_CRC32_messageEntityCode:
        t := m.To_MessageEntityCode()
        return t.Encode()
    case TLConstructor_CRC32_messageEntityPre:
        t := m.To_MessageEntityPre()
        return t.Encode()
    case TLConstructor_CRC32_messageEntityTextUrl:
        t := m.To_MessageEntityTextUrl()
        return t.Encode()
    case TLConstructor_CRC32_messageEntityMentionName:
        t := m.To_MessageEntityMentionName()
        return t.Encode()
    case TLConstructor_CRC32_inputMessageEntityMentionName:
        t := m.To_InputMessageEntityMentionName()
        return t.Encode()
    case TLConstructor_CRC32_messageEntityPhone:
        t := m.To_MessageEntityPhone()
        return t.Encode()
    case TLConstructor_CRC32_messageEntityCashtag:
        t := m.To_MessageEntityCashtag()
        return t.Encode()
    case TLConstructor_CRC32_messageEntityUnderline:
        t := m.To_MessageEntityUnderline()
        return t.Encode()
    case TLConstructor_CRC32_messageEntityStrike:
        t := m.To_MessageEntityStrike()
        return t.Encode()
    case TLConstructor_CRC32_messageEntityBlockquote:
        t := m.To_MessageEntityBlockquote()
        return t.Encode()
    case TLConstructor_CRC32_messageEntityBankCard:
        t := m.To_MessageEntityBankCard()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *MessageEntity) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messageEntityUnknown:
        m2 := &TLMessageEntityUnknown{&MessageEntity_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageEntityMention:
        m2 := &TLMessageEntityMention{&MessageEntity_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageEntityHashtag:
        m2 := &TLMessageEntityHashtag{&MessageEntity_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageEntityBotCommand:
        m2 := &TLMessageEntityBotCommand{&MessageEntity_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageEntityUrl:
        m2 := &TLMessageEntityUrl{&MessageEntity_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageEntityEmail:
        m2 := &TLMessageEntityEmail{&MessageEntity_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageEntityBold:
        m2 := &TLMessageEntityBold{&MessageEntity_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageEntityItalic:
        m2 := &TLMessageEntityItalic{&MessageEntity_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageEntityCode:
        m2 := &TLMessageEntityCode{&MessageEntity_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageEntityPre:
        m2 := &TLMessageEntityPre{&MessageEntity_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageEntityTextUrl:
        m2 := &TLMessageEntityTextUrl{&MessageEntity_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageEntityMentionName:
        m2 := &TLMessageEntityMentionName{&MessageEntity_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMessageEntityMentionName:
        m2 := &TLInputMessageEntityMentionName{&MessageEntity_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageEntityPhone:
        m2 := &TLMessageEntityPhone{&MessageEntity_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageEntityCashtag:
        m2 := &TLMessageEntityCashtag{&MessageEntity_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageEntityUnderline:
        m2 := &TLMessageEntityUnderline{&MessageEntity_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageEntityStrike:
        m2 := &TLMessageEntityStrike{&MessageEntity_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageEntityBlockquote:
        m2 := &TLMessageEntityBlockquote{&MessageEntity_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageEntityBankCard:
        m2 := &TLMessageEntityBankCard{&MessageEntity_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messageEntityUnknown#bb92ba95 offset:int length:int = MessageEntity;
func (m *MessageEntity) To_MessageEntityUnknown() *TLMessageEntityUnknown {
    return &TLMessageEntityUnknown{
        Data2: m.Data2,
    }
}

// messageEntityMention#fa04579d offset:int length:int = MessageEntity;
func (m *MessageEntity) To_MessageEntityMention() *TLMessageEntityMention {
    return &TLMessageEntityMention{
        Data2: m.Data2,
    }
}

// messageEntityHashtag#6f635b0d offset:int length:int = MessageEntity;
func (m *MessageEntity) To_MessageEntityHashtag() *TLMessageEntityHashtag {
    return &TLMessageEntityHashtag{
        Data2: m.Data2,
    }
}

// messageEntityBotCommand#6cef8ac7 offset:int length:int = MessageEntity;
func (m *MessageEntity) To_MessageEntityBotCommand() *TLMessageEntityBotCommand {
    return &TLMessageEntityBotCommand{
        Data2: m.Data2,
    }
}

// messageEntityUrl#6ed02538 offset:int length:int = MessageEntity;
func (m *MessageEntity) To_MessageEntityUrl() *TLMessageEntityUrl {
    return &TLMessageEntityUrl{
        Data2: m.Data2,
    }
}

// messageEntityEmail#64e475c2 offset:int length:int = MessageEntity;
func (m *MessageEntity) To_MessageEntityEmail() *TLMessageEntityEmail {
    return &TLMessageEntityEmail{
        Data2: m.Data2,
    }
}

// messageEntityBold#bd610bc9 offset:int length:int = MessageEntity;
func (m *MessageEntity) To_MessageEntityBold() *TLMessageEntityBold {
    return &TLMessageEntityBold{
        Data2: m.Data2,
    }
}

// messageEntityItalic#826f8b60 offset:int length:int = MessageEntity;
func (m *MessageEntity) To_MessageEntityItalic() *TLMessageEntityItalic {
    return &TLMessageEntityItalic{
        Data2: m.Data2,
    }
}

// messageEntityCode#28a20571 offset:int length:int = MessageEntity;
func (m *MessageEntity) To_MessageEntityCode() *TLMessageEntityCode {
    return &TLMessageEntityCode{
        Data2: m.Data2,
    }
}

// messageEntityPre#73924be0 offset:int length:int language:string = MessageEntity;
func (m *MessageEntity) To_MessageEntityPre() *TLMessageEntityPre {
    return &TLMessageEntityPre{
        Data2: m.Data2,
    }
}

// messageEntityTextUrl#76a6d327 offset:int length:int url:string = MessageEntity;
func (m *MessageEntity) To_MessageEntityTextUrl() *TLMessageEntityTextUrl {
    return &TLMessageEntityTextUrl{
        Data2: m.Data2,
    }
}

// messageEntityMentionName#352dca58 offset:int length:int user_id:int = MessageEntity;
func (m *MessageEntity) To_MessageEntityMentionName() *TLMessageEntityMentionName {
    return &TLMessageEntityMentionName{
        Data2: m.Data2,
    }
}

// inputMessageEntityMentionName#208e68c9 offset:int length:int user_id:InputUser = MessageEntity;
func (m *MessageEntity) To_InputMessageEntityMentionName() *TLInputMessageEntityMentionName {
    return &TLInputMessageEntityMentionName{
        Data2: m.Data2,
    }
}

// messageEntityPhone#9b69e34b offset:int length:int = MessageEntity;
func (m *MessageEntity) To_MessageEntityPhone() *TLMessageEntityPhone {
    return &TLMessageEntityPhone{
        Data2: m.Data2,
    }
}

// messageEntityCashtag#4c4e743f offset:int length:int = MessageEntity;
func (m *MessageEntity) To_MessageEntityCashtag() *TLMessageEntityCashtag {
    return &TLMessageEntityCashtag{
        Data2: m.Data2,
    }
}

// messageEntityUnderline#9c4e7e8b offset:int length:int = MessageEntity;
func (m *MessageEntity) To_MessageEntityUnderline() *TLMessageEntityUnderline {
    return &TLMessageEntityUnderline{
        Data2: m.Data2,
    }
}

// messageEntityStrike#bf0693d4 offset:int length:int = MessageEntity;
func (m *MessageEntity) To_MessageEntityStrike() *TLMessageEntityStrike {
    return &TLMessageEntityStrike{
        Data2: m.Data2,
    }
}

// messageEntityBlockquote#20df5d0 offset:int length:int = MessageEntity;
func (m *MessageEntity) To_MessageEntityBlockquote() *TLMessageEntityBlockquote {
    return &TLMessageEntityBlockquote{
        Data2: m.Data2,
    }
}

// messageEntityBankCard#761e6af4 offset:int length:int = MessageEntity;
func (m *MessageEntity) To_MessageEntityBankCard() *TLMessageEntityBankCard {
    return &TLMessageEntityBankCard{
        Data2: m.Data2,
    }
}



// messageEntityUnknown#bb92ba95 offset:int length:int = MessageEntity;
func (m *TLMessageEntityUnknown) To_MessageEntity() *MessageEntity {
    return &MessageEntity{
        Constructor: TLConstructor_CRC32_messageEntityUnknown,
        Data2: m.Data2,
    }
}


func (m *TLMessageEntityUnknown) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityUnknown) GetOffset() int32 { return m.Data2.Offset }

func (m *TLMessageEntityUnknown) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityUnknown) GetLength() int32 { return m.Data2.Length }


func NewTLMessageEntityUnknown() * TLMessageEntityUnknown {
    return &TLMessageEntityUnknown{ Data2: &MessageEntity_Data{} }
}

func (m* TLMessageEntityUnknown) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageEntityUnknown))

    x.Int(m.GetOffset())
    x.Int(m.GetLength())

    return x.buf
}

func (m* TLMessageEntityUnknown) Decode(dbuf *DecodeBuf) error {
    m.SetOffset(dbuf.Int())
    m.SetLength(dbuf.Int())

    return dbuf.err
}
// messageEntityMention#fa04579d offset:int length:int = MessageEntity;
func (m *TLMessageEntityMention) To_MessageEntity() *MessageEntity {
    return &MessageEntity{
        Constructor: TLConstructor_CRC32_messageEntityMention,
        Data2: m.Data2,
    }
}


func (m *TLMessageEntityMention) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityMention) GetOffset() int32 { return m.Data2.Offset }

func (m *TLMessageEntityMention) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityMention) GetLength() int32 { return m.Data2.Length }


func NewTLMessageEntityMention() * TLMessageEntityMention {
    return &TLMessageEntityMention{ Data2: &MessageEntity_Data{} }
}

func (m* TLMessageEntityMention) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageEntityMention))

    x.Int(m.GetOffset())
    x.Int(m.GetLength())

    return x.buf
}

func (m* TLMessageEntityMention) Decode(dbuf *DecodeBuf) error {
    m.SetOffset(dbuf.Int())
    m.SetLength(dbuf.Int())

    return dbuf.err
}
// messageEntityHashtag#6f635b0d offset:int length:int = MessageEntity;
func (m *TLMessageEntityHashtag) To_MessageEntity() *MessageEntity {
    return &MessageEntity{
        Constructor: TLConstructor_CRC32_messageEntityHashtag,
        Data2: m.Data2,
    }
}


func (m *TLMessageEntityHashtag) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityHashtag) GetOffset() int32 { return m.Data2.Offset }

func (m *TLMessageEntityHashtag) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityHashtag) GetLength() int32 { return m.Data2.Length }


func NewTLMessageEntityHashtag() * TLMessageEntityHashtag {
    return &TLMessageEntityHashtag{ Data2: &MessageEntity_Data{} }
}

func (m* TLMessageEntityHashtag) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageEntityHashtag))

    x.Int(m.GetOffset())
    x.Int(m.GetLength())

    return x.buf
}

func (m* TLMessageEntityHashtag) Decode(dbuf *DecodeBuf) error {
    m.SetOffset(dbuf.Int())
    m.SetLength(dbuf.Int())

    return dbuf.err
}
// messageEntityBotCommand#6cef8ac7 offset:int length:int = MessageEntity;
func (m *TLMessageEntityBotCommand) To_MessageEntity() *MessageEntity {
    return &MessageEntity{
        Constructor: TLConstructor_CRC32_messageEntityBotCommand,
        Data2: m.Data2,
    }
}


func (m *TLMessageEntityBotCommand) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityBotCommand) GetOffset() int32 { return m.Data2.Offset }

func (m *TLMessageEntityBotCommand) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityBotCommand) GetLength() int32 { return m.Data2.Length }


func NewTLMessageEntityBotCommand() * TLMessageEntityBotCommand {
    return &TLMessageEntityBotCommand{ Data2: &MessageEntity_Data{} }
}

func (m* TLMessageEntityBotCommand) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageEntityBotCommand))

    x.Int(m.GetOffset())
    x.Int(m.GetLength())

    return x.buf
}

func (m* TLMessageEntityBotCommand) Decode(dbuf *DecodeBuf) error {
    m.SetOffset(dbuf.Int())
    m.SetLength(dbuf.Int())

    return dbuf.err
}
// messageEntityUrl#6ed02538 offset:int length:int = MessageEntity;
func (m *TLMessageEntityUrl) To_MessageEntity() *MessageEntity {
    return &MessageEntity{
        Constructor: TLConstructor_CRC32_messageEntityUrl,
        Data2: m.Data2,
    }
}


func (m *TLMessageEntityUrl) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityUrl) GetOffset() int32 { return m.Data2.Offset }

func (m *TLMessageEntityUrl) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityUrl) GetLength() int32 { return m.Data2.Length }


func NewTLMessageEntityUrl() * TLMessageEntityUrl {
    return &TLMessageEntityUrl{ Data2: &MessageEntity_Data{} }
}

func (m* TLMessageEntityUrl) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageEntityUrl))

    x.Int(m.GetOffset())
    x.Int(m.GetLength())

    return x.buf
}

func (m* TLMessageEntityUrl) Decode(dbuf *DecodeBuf) error {
    m.SetOffset(dbuf.Int())
    m.SetLength(dbuf.Int())

    return dbuf.err
}
// messageEntityEmail#64e475c2 offset:int length:int = MessageEntity;
func (m *TLMessageEntityEmail) To_MessageEntity() *MessageEntity {
    return &MessageEntity{
        Constructor: TLConstructor_CRC32_messageEntityEmail,
        Data2: m.Data2,
    }
}


func (m *TLMessageEntityEmail) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityEmail) GetOffset() int32 { return m.Data2.Offset }

func (m *TLMessageEntityEmail) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityEmail) GetLength() int32 { return m.Data2.Length }


func NewTLMessageEntityEmail() * TLMessageEntityEmail {
    return &TLMessageEntityEmail{ Data2: &MessageEntity_Data{} }
}

func (m* TLMessageEntityEmail) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageEntityEmail))

    x.Int(m.GetOffset())
    x.Int(m.GetLength())

    return x.buf
}

func (m* TLMessageEntityEmail) Decode(dbuf *DecodeBuf) error {
    m.SetOffset(dbuf.Int())
    m.SetLength(dbuf.Int())

    return dbuf.err
}
// messageEntityBold#bd610bc9 offset:int length:int = MessageEntity;
func (m *TLMessageEntityBold) To_MessageEntity() *MessageEntity {
    return &MessageEntity{
        Constructor: TLConstructor_CRC32_messageEntityBold,
        Data2: m.Data2,
    }
}


func (m *TLMessageEntityBold) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityBold) GetOffset() int32 { return m.Data2.Offset }

func (m *TLMessageEntityBold) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityBold) GetLength() int32 { return m.Data2.Length }


func NewTLMessageEntityBold() * TLMessageEntityBold {
    return &TLMessageEntityBold{ Data2: &MessageEntity_Data{} }
}

func (m* TLMessageEntityBold) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageEntityBold))

    x.Int(m.GetOffset())
    x.Int(m.GetLength())

    return x.buf
}

func (m* TLMessageEntityBold) Decode(dbuf *DecodeBuf) error {
    m.SetOffset(dbuf.Int())
    m.SetLength(dbuf.Int())

    return dbuf.err
}
// messageEntityItalic#826f8b60 offset:int length:int = MessageEntity;
func (m *TLMessageEntityItalic) To_MessageEntity() *MessageEntity {
    return &MessageEntity{
        Constructor: TLConstructor_CRC32_messageEntityItalic,
        Data2: m.Data2,
    }
}


func (m *TLMessageEntityItalic) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityItalic) GetOffset() int32 { return m.Data2.Offset }

func (m *TLMessageEntityItalic) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityItalic) GetLength() int32 { return m.Data2.Length }


func NewTLMessageEntityItalic() * TLMessageEntityItalic {
    return &TLMessageEntityItalic{ Data2: &MessageEntity_Data{} }
}

func (m* TLMessageEntityItalic) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageEntityItalic))

    x.Int(m.GetOffset())
    x.Int(m.GetLength())

    return x.buf
}

func (m* TLMessageEntityItalic) Decode(dbuf *DecodeBuf) error {
    m.SetOffset(dbuf.Int())
    m.SetLength(dbuf.Int())

    return dbuf.err
}
// messageEntityCode#28a20571 offset:int length:int = MessageEntity;
func (m *TLMessageEntityCode) To_MessageEntity() *MessageEntity {
    return &MessageEntity{
        Constructor: TLConstructor_CRC32_messageEntityCode,
        Data2: m.Data2,
    }
}


func (m *TLMessageEntityCode) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityCode) GetOffset() int32 { return m.Data2.Offset }

func (m *TLMessageEntityCode) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityCode) GetLength() int32 { return m.Data2.Length }


func NewTLMessageEntityCode() * TLMessageEntityCode {
    return &TLMessageEntityCode{ Data2: &MessageEntity_Data{} }
}

func (m* TLMessageEntityCode) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageEntityCode))

    x.Int(m.GetOffset())
    x.Int(m.GetLength())

    return x.buf
}

func (m* TLMessageEntityCode) Decode(dbuf *DecodeBuf) error {
    m.SetOffset(dbuf.Int())
    m.SetLength(dbuf.Int())

    return dbuf.err
}
// messageEntityPre#73924be0 offset:int length:int language:string = MessageEntity;
func (m *TLMessageEntityPre) To_MessageEntity() *MessageEntity {
    return &MessageEntity{
        Constructor: TLConstructor_CRC32_messageEntityPre,
        Data2: m.Data2,
    }
}


func (m *TLMessageEntityPre) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityPre) GetOffset() int32 { return m.Data2.Offset }

func (m *TLMessageEntityPre) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityPre) GetLength() int32 { return m.Data2.Length }

func (m *TLMessageEntityPre) SetLanguage(v string) { m.Data2.Language = v }
func (m *TLMessageEntityPre) GetLanguage() string { return m.Data2.Language }


func NewTLMessageEntityPre() * TLMessageEntityPre {
    return &TLMessageEntityPre{ Data2: &MessageEntity_Data{} }
}

func (m* TLMessageEntityPre) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageEntityPre))

    x.Int(m.GetOffset())
    x.Int(m.GetLength())
    x.String(m.GetLanguage())

    return x.buf
}

func (m* TLMessageEntityPre) Decode(dbuf *DecodeBuf) error {
    m.SetOffset(dbuf.Int())
    m.SetLength(dbuf.Int())
    m.SetLanguage(dbuf.String())

    return dbuf.err
}
// messageEntityTextUrl#76a6d327 offset:int length:int url:string = MessageEntity;
func (m *TLMessageEntityTextUrl) To_MessageEntity() *MessageEntity {
    return &MessageEntity{
        Constructor: TLConstructor_CRC32_messageEntityTextUrl,
        Data2: m.Data2,
    }
}


func (m *TLMessageEntityTextUrl) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityTextUrl) GetOffset() int32 { return m.Data2.Offset }

func (m *TLMessageEntityTextUrl) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityTextUrl) GetLength() int32 { return m.Data2.Length }

func (m *TLMessageEntityTextUrl) SetUrl(v string) { m.Data2.Url = v }
func (m *TLMessageEntityTextUrl) GetUrl() string { return m.Data2.Url }


func NewTLMessageEntityTextUrl() * TLMessageEntityTextUrl {
    return &TLMessageEntityTextUrl{ Data2: &MessageEntity_Data{} }
}

func (m* TLMessageEntityTextUrl) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageEntityTextUrl))

    x.Int(m.GetOffset())
    x.Int(m.GetLength())
    x.String(m.GetUrl())

    return x.buf
}

func (m* TLMessageEntityTextUrl) Decode(dbuf *DecodeBuf) error {
    m.SetOffset(dbuf.Int())
    m.SetLength(dbuf.Int())
    m.SetUrl(dbuf.String())

    return dbuf.err
}
// messageEntityMentionName#352dca58 offset:int length:int user_id:int = MessageEntity;
func (m *TLMessageEntityMentionName) To_MessageEntity() *MessageEntity {
    return &MessageEntity{
        Constructor: TLConstructor_CRC32_messageEntityMentionName,
        Data2: m.Data2,
    }
}


func (m *TLMessageEntityMentionName) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityMentionName) GetOffset() int32 { return m.Data2.Offset }

func (m *TLMessageEntityMentionName) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityMentionName) GetLength() int32 { return m.Data2.Length }

func (m *TLMessageEntityMentionName) SetUserId(v int32) { m.Data2.UserId_5 = v }
func (m *TLMessageEntityMentionName) GetUserId() int32 { return m.Data2.UserId_5 }


func NewTLMessageEntityMentionName() * TLMessageEntityMentionName {
    return &TLMessageEntityMentionName{ Data2: &MessageEntity_Data{} }
}

func (m* TLMessageEntityMentionName) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageEntityMentionName))

    x.Int(m.GetOffset())
    x.Int(m.GetLength())
    x.Int(m.GetUserId())

    return x.buf
}

func (m* TLMessageEntityMentionName) Decode(dbuf *DecodeBuf) error {
    m.SetOffset(dbuf.Int())
    m.SetLength(dbuf.Int())
    m.SetUserId(dbuf.Int())

    return dbuf.err
}
// inputMessageEntityMentionName#208e68c9 offset:int length:int user_id:InputUser = MessageEntity;
func (m *TLInputMessageEntityMentionName) To_MessageEntity() *MessageEntity {
    return &MessageEntity{
        Constructor: TLConstructor_CRC32_inputMessageEntityMentionName,
        Data2: m.Data2,
    }
}


func (m *TLInputMessageEntityMentionName) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLInputMessageEntityMentionName) GetOffset() int32 { return m.Data2.Offset }

func (m *TLInputMessageEntityMentionName) SetLength(v int32) { m.Data2.Length = v }
func (m *TLInputMessageEntityMentionName) GetLength() int32 { return m.Data2.Length }

func (m *TLInputMessageEntityMentionName) SetUserId(v *InputUser) { m.Data2.UserId_6 = v }
func (m *TLInputMessageEntityMentionName) GetUserId() *InputUser { return m.Data2.UserId_6 }


func NewTLInputMessageEntityMentionName() * TLInputMessageEntityMentionName {
    return &TLInputMessageEntityMentionName{ Data2: &MessageEntity_Data{} }
}

func (m* TLInputMessageEntityMentionName) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMessageEntityMentionName))

    x.Int(m.GetOffset())
    x.Int(m.GetLength())
    x.Bytes(m.GetUserId().Encode())

    return x.buf
}

func (m* TLInputMessageEntityMentionName) Decode(dbuf *DecodeBuf) error {
    m.SetOffset(dbuf.Int())
    m.SetLength(dbuf.Int())
    m3 := &InputUser{}
    m3.Decode(dbuf)
    m.SetUserId(m3)

    return dbuf.err
}
// messageEntityPhone#9b69e34b offset:int length:int = MessageEntity;
func (m *TLMessageEntityPhone) To_MessageEntity() *MessageEntity {
    return &MessageEntity{
        Constructor: TLConstructor_CRC32_messageEntityPhone,
        Data2: m.Data2,
    }
}


func (m *TLMessageEntityPhone) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityPhone) GetOffset() int32 { return m.Data2.Offset }

func (m *TLMessageEntityPhone) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityPhone) GetLength() int32 { return m.Data2.Length }


func NewTLMessageEntityPhone() * TLMessageEntityPhone {
    return &TLMessageEntityPhone{ Data2: &MessageEntity_Data{} }
}

func (m* TLMessageEntityPhone) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageEntityPhone))

    x.Int(m.GetOffset())
    x.Int(m.GetLength())

    return x.buf
}

func (m* TLMessageEntityPhone) Decode(dbuf *DecodeBuf) error {
    m.SetOffset(dbuf.Int())
    m.SetLength(dbuf.Int())

    return dbuf.err
}
// messageEntityCashtag#4c4e743f offset:int length:int = MessageEntity;
func (m *TLMessageEntityCashtag) To_MessageEntity() *MessageEntity {
    return &MessageEntity{
        Constructor: TLConstructor_CRC32_messageEntityCashtag,
        Data2: m.Data2,
    }
}


func (m *TLMessageEntityCashtag) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityCashtag) GetOffset() int32 { return m.Data2.Offset }

func (m *TLMessageEntityCashtag) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityCashtag) GetLength() int32 { return m.Data2.Length }


func NewTLMessageEntityCashtag() * TLMessageEntityCashtag {
    return &TLMessageEntityCashtag{ Data2: &MessageEntity_Data{} }
}

func (m* TLMessageEntityCashtag) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageEntityCashtag))

    x.Int(m.GetOffset())
    x.Int(m.GetLength())

    return x.buf
}

func (m* TLMessageEntityCashtag) Decode(dbuf *DecodeBuf) error {
    m.SetOffset(dbuf.Int())
    m.SetLength(dbuf.Int())

    return dbuf.err
}
// messageEntityUnderline#9c4e7e8b offset:int length:int = MessageEntity;
func (m *TLMessageEntityUnderline) To_MessageEntity() *MessageEntity {
    return &MessageEntity{
        Constructor: TLConstructor_CRC32_messageEntityUnderline,
        Data2: m.Data2,
    }
}


func (m *TLMessageEntityUnderline) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityUnderline) GetOffset() int32 { return m.Data2.Offset }

func (m *TLMessageEntityUnderline) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityUnderline) GetLength() int32 { return m.Data2.Length }


func NewTLMessageEntityUnderline() * TLMessageEntityUnderline {
    return &TLMessageEntityUnderline{ Data2: &MessageEntity_Data{} }
}

func (m* TLMessageEntityUnderline) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageEntityUnderline))

    x.Int(m.GetOffset())
    x.Int(m.GetLength())

    return x.buf
}

func (m* TLMessageEntityUnderline) Decode(dbuf *DecodeBuf) error {
    m.SetOffset(dbuf.Int())
    m.SetLength(dbuf.Int())

    return dbuf.err
}
// messageEntityStrike#bf0693d4 offset:int length:int = MessageEntity;
func (m *TLMessageEntityStrike) To_MessageEntity() *MessageEntity {
    return &MessageEntity{
        Constructor: TLConstructor_CRC32_messageEntityStrike,
        Data2: m.Data2,
    }
}


func (m *TLMessageEntityStrike) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityStrike) GetOffset() int32 { return m.Data2.Offset }

func (m *TLMessageEntityStrike) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityStrike) GetLength() int32 { return m.Data2.Length }


func NewTLMessageEntityStrike() * TLMessageEntityStrike {
    return &TLMessageEntityStrike{ Data2: &MessageEntity_Data{} }
}

func (m* TLMessageEntityStrike) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageEntityStrike))

    x.Int(m.GetOffset())
    x.Int(m.GetLength())

    return x.buf
}

func (m* TLMessageEntityStrike) Decode(dbuf *DecodeBuf) error {
    m.SetOffset(dbuf.Int())
    m.SetLength(dbuf.Int())

    return dbuf.err
}
// messageEntityBlockquote#20df5d0 offset:int length:int = MessageEntity;
func (m *TLMessageEntityBlockquote) To_MessageEntity() *MessageEntity {
    return &MessageEntity{
        Constructor: TLConstructor_CRC32_messageEntityBlockquote,
        Data2: m.Data2,
    }
}


func (m *TLMessageEntityBlockquote) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityBlockquote) GetOffset() int32 { return m.Data2.Offset }

func (m *TLMessageEntityBlockquote) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityBlockquote) GetLength() int32 { return m.Data2.Length }


func NewTLMessageEntityBlockquote() * TLMessageEntityBlockquote {
    return &TLMessageEntityBlockquote{ Data2: &MessageEntity_Data{} }
}

func (m* TLMessageEntityBlockquote) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageEntityBlockquote))

    x.Int(m.GetOffset())
    x.Int(m.GetLength())

    return x.buf
}

func (m* TLMessageEntityBlockquote) Decode(dbuf *DecodeBuf) error {
    m.SetOffset(dbuf.Int())
    m.SetLength(dbuf.Int())

    return dbuf.err
}
// messageEntityBankCard#761e6af4 offset:int length:int = MessageEntity;
func (m *TLMessageEntityBankCard) To_MessageEntity() *MessageEntity {
    return &MessageEntity{
        Constructor: TLConstructor_CRC32_messageEntityBankCard,
        Data2: m.Data2,
    }
}


func (m *TLMessageEntityBankCard) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessageEntityBankCard) GetOffset() int32 { return m.Data2.Offset }

func (m *TLMessageEntityBankCard) SetLength(v int32) { m.Data2.Length = v }
func (m *TLMessageEntityBankCard) GetLength() int32 { return m.Data2.Length }


func NewTLMessageEntityBankCard() * TLMessageEntityBankCard {
    return &TLMessageEntityBankCard{ Data2: &MessageEntity_Data{} }
}

func (m* TLMessageEntityBankCard) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageEntityBankCard))

    x.Int(m.GetOffset())
    x.Int(m.GetLength())

    return x.buf
}

func (m* TLMessageEntityBankCard) Decode(dbuf *DecodeBuf) error {
    m.SetOffset(dbuf.Int())
    m.SetLength(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputMessage <--
//  + TL_InputMessageID
//  + TL_InputMessageReplyTo
//  + TL_InputMessagePinned
//

func (m *InputMessage) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputMessageID:
        t := m.To_InputMessageID()
        return t.Encode()
    case TLConstructor_CRC32_inputMessageReplyTo:
        t := m.To_InputMessageReplyTo()
        return t.Encode()
    case TLConstructor_CRC32_inputMessagePinned:
        t := m.To_InputMessagePinned()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputMessage) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputMessageID:
        m2 := &TLInputMessageID{&InputMessage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMessageReplyTo:
        m2 := &TLInputMessageReplyTo{&InputMessage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMessagePinned:
        m2 := &TLInputMessagePinned{&InputMessage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputMessageID#a676a322 id:int = InputMessage;
func (m *InputMessage) To_InputMessageID() *TLInputMessageID {
    return &TLInputMessageID{
        Data2: m.Data2,
    }
}

// inputMessageReplyTo#bad88395 id:int = InputMessage;
func (m *InputMessage) To_InputMessageReplyTo() *TLInputMessageReplyTo {
    return &TLInputMessageReplyTo{
        Data2: m.Data2,
    }
}

// inputMessagePinned#86872538 = InputMessage;
func (m *InputMessage) To_InputMessagePinned() *TLInputMessagePinned {
    return &TLInputMessagePinned{
        Data2: m.Data2,
    }
}



// inputMessageID#a676a322 id:int = InputMessage;
func (m *TLInputMessageID) To_InputMessage() *InputMessage {
    return &InputMessage{
        Constructor: TLConstructor_CRC32_inputMessageID,
        Data2: m.Data2,
    }
}


func (m *TLInputMessageID) SetId(v int32) { m.Data2.Id = v }
func (m *TLInputMessageID) GetId() int32 { return m.Data2.Id }


func NewTLInputMessageID() * TLInputMessageID {
    return &TLInputMessageID{ Data2: &InputMessage_Data{} }
}

func (m* TLInputMessageID) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMessageID))

    x.Int(m.GetId())

    return x.buf
}

func (m* TLInputMessageID) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Int())

    return dbuf.err
}
// inputMessageReplyTo#bad88395 id:int = InputMessage;
func (m *TLInputMessageReplyTo) To_InputMessage() *InputMessage {
    return &InputMessage{
        Constructor: TLConstructor_CRC32_inputMessageReplyTo,
        Data2: m.Data2,
    }
}


func (m *TLInputMessageReplyTo) SetId(v int32) { m.Data2.Id = v }
func (m *TLInputMessageReplyTo) GetId() int32 { return m.Data2.Id }


func NewTLInputMessageReplyTo() * TLInputMessageReplyTo {
    return &TLInputMessageReplyTo{ Data2: &InputMessage_Data{} }
}

func (m* TLInputMessageReplyTo) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMessageReplyTo))

    x.Int(m.GetId())

    return x.buf
}

func (m* TLInputMessageReplyTo) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Int())

    return dbuf.err
}
// inputMessagePinned#86872538 = InputMessage;
func (m *TLInputMessagePinned) To_InputMessage() *InputMessage {
    return &InputMessage{
        Constructor: TLConstructor_CRC32_inputMessagePinned,
        Data2: m.Data2,
    }
}



func NewTLInputMessagePinned() * TLInputMessagePinned {
    return &TLInputMessagePinned{ Data2: &InputMessage_Data{} }
}

func (m* TLInputMessagePinned) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMessagePinned))


    return x.buf
}

func (m* TLInputMessagePinned) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Account_SentEmailCode <--
//  + TL_AccountSentEmailCode
//

func (m *Account_SentEmailCode) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_account_sentEmailCode:
        t := m.To_AccountSentEmailCode()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Account_SentEmailCode) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_account_sentEmailCode:
        m2 := &TLAccountSentEmailCode{&Account_SentEmailCode_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// account.sentEmailCode#811f854f email_pattern:string length:int = account.SentEmailCode;
func (m *Account_SentEmailCode) To_AccountSentEmailCode() *TLAccountSentEmailCode {
    return &TLAccountSentEmailCode{
        Data2: m.Data2,
    }
}



// account.sentEmailCode#811f854f email_pattern:string length:int = account.SentEmailCode;
func (m *TLAccountSentEmailCode) To_Account_SentEmailCode() *Account_SentEmailCode {
    return &Account_SentEmailCode{
        Constructor: TLConstructor_CRC32_account_sentEmailCode,
        Data2: m.Data2,
    }
}


func (m *TLAccountSentEmailCode) SetEmailPattern(v string) { m.Data2.EmailPattern = v }
func (m *TLAccountSentEmailCode) GetEmailPattern() string { return m.Data2.EmailPattern }

func (m *TLAccountSentEmailCode) SetLength(v int32) { m.Data2.Length = v }
func (m *TLAccountSentEmailCode) GetLength() int32 { return m.Data2.Length }


func NewTLAccountSentEmailCode() * TLAccountSentEmailCode {
    return &TLAccountSentEmailCode{ Data2: &Account_SentEmailCode_Data{} }
}

func (m* TLAccountSentEmailCode) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_account_sentEmailCode))

    x.String(m.GetEmailPattern())
    x.Int(m.GetLength())

    return x.buf
}

func (m* TLAccountSentEmailCode) Decode(dbuf *DecodeBuf) error {
    m.SetEmailPattern(dbuf.String())
    m.SetLength(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Folder <--
//  + TL_Folder
//

func (m *Folder) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_folder:
        t := m.To_Folder()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Folder) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_folder:
        m2 := &TLFolder{&Folder_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// folder#ff544e65 flags:# autofill_new_broadcasts:flags.0?true autofill_public_groups:flags.1?true autofill_new_correspondents:flags.2?true id:int title:string photo:flags.3?ChatPhoto = Folder;
func (m *Folder) To_Folder() *TLFolder {
    return &TLFolder{
        Data2: m.Data2,
    }
}



// folder#ff544e65 flags:# autofill_new_broadcasts:flags.0?true autofill_public_groups:flags.1?true autofill_new_correspondents:flags.2?true id:int title:string photo:flags.3?ChatPhoto = Folder;
func (m *TLFolder) To_Folder() *Folder {
    return &Folder{
        Constructor: TLConstructor_CRC32_folder,
        Data2: m.Data2,
    }
}


func (m *TLFolder) SetAutofillNewBroadcasts(v bool) { m.Data2.AutofillNewBroadcasts = v }
func (m *TLFolder) GetAutofillNewBroadcasts() bool { return m.Data2.AutofillNewBroadcasts }

func (m *TLFolder) SetAutofillPublicGroups(v bool) { m.Data2.AutofillPublicGroups = v }
func (m *TLFolder) GetAutofillPublicGroups() bool { return m.Data2.AutofillPublicGroups }

func (m *TLFolder) SetAutofillNewCorrespondents(v bool) { m.Data2.AutofillNewCorrespondents = v }
func (m *TLFolder) GetAutofillNewCorrespondents() bool { return m.Data2.AutofillNewCorrespondents }

func (m *TLFolder) SetId(v int32) { m.Data2.Id = v }
func (m *TLFolder) GetId() int32 { return m.Data2.Id }

func (m *TLFolder) SetTitle(v string) { m.Data2.Title = v }
func (m *TLFolder) GetTitle() string { return m.Data2.Title }

func (m *TLFolder) SetPhoto(v *ChatPhoto) { m.Data2.Photo = v }
func (m *TLFolder) GetPhoto() *ChatPhoto { return m.Data2.Photo }


func NewTLFolder() * TLFolder {
    return &TLFolder{ Data2: &Folder_Data{} }
}

func (m* TLFolder) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_folder))

    // flags
    var flags uint32 = 0
    if m.GetAutofillNewBroadcasts() == true { flags |= 1 << 0 }
    if m.GetAutofillPublicGroups() == true { flags |= 1 << 1 }
    if m.GetAutofillNewCorrespondents() == true { flags |= 1 << 2 }
    if m.GetPhoto() != nil { flags |= 1 << 3 }
	x.UInt(flags)

    
    
    
    x.Int(m.GetId())
    x.String(m.GetTitle())
    if (flags & (1 << 3)) != 0 { x.Bytes(m.GetPhoto().Encode()) }

    return x.buf
}

func (m* TLFolder) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetAutofillNewBroadcasts(true) }
    if (flags & (1 << 1)) != 0 { m.SetAutofillPublicGroups(true) }
    if (flags & (1 << 2)) != 0 { m.SetAutofillNewCorrespondents(true) }
    m.SetId(dbuf.Int())
    m.SetTitle(dbuf.String())
    if (flags & (1 << 3)) != 0 {
 m7 := &ChatPhoto{}
    m7.Decode(dbuf)
    m.SetPhoto(m7) 
}

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// StatsURL <--
//  + TL_StatsURL
//

func (m *StatsURL) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_statsURL:
        t := m.To_StatsURL()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *StatsURL) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_statsURL:
        m2 := &TLStatsURL{&StatsURL_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// statsURL#47a971e0 url:string = StatsURL;
func (m *StatsURL) To_StatsURL() *TLStatsURL {
    return &TLStatsURL{
        Data2: m.Data2,
    }
}



// statsURL#47a971e0 url:string = StatsURL;
func (m *TLStatsURL) To_StatsURL() *StatsURL {
    return &StatsURL{
        Constructor: TLConstructor_CRC32_statsURL,
        Data2: m.Data2,
    }
}


func (m *TLStatsURL) SetUrl(v string) { m.Data2.Url = v }
func (m *TLStatsURL) GetUrl() string { return m.Data2.Url }


func NewTLStatsURL() * TLStatsURL {
    return &TLStatsURL{ Data2: &StatsURL_Data{} }
}

func (m* TLStatsURL) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_statsURL))

    x.String(m.GetUrl())

    return x.buf
}

func (m* TLStatsURL) Decode(dbuf *DecodeBuf) error {
    m.SetUrl(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Updates_Difference <--
//  + TL_UpdatesDifferenceEmpty
//  + TL_UpdatesDifference
//  + TL_UpdatesDifferenceSlice
//  + TL_UpdatesDifferenceTooLong
//

func (m *Updates_Difference) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_updates_differenceEmpty:
        t := m.To_UpdatesDifferenceEmpty()
        return t.Encode()
    case TLConstructor_CRC32_updates_difference:
        t := m.To_UpdatesDifference()
        return t.Encode()
    case TLConstructor_CRC32_updates_differenceSlice:
        t := m.To_UpdatesDifferenceSlice()
        return t.Encode()
    case TLConstructor_CRC32_updates_differenceTooLong:
        t := m.To_UpdatesDifferenceTooLong()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Updates_Difference) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_updates_differenceEmpty:
        m2 := &TLUpdatesDifferenceEmpty{&Updates_Difference_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updates_difference:
        m2 := &TLUpdatesDifference{&Updates_Difference_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updates_differenceSlice:
        m2 := &TLUpdatesDifferenceSlice{&Updates_Difference_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updates_differenceTooLong:
        m2 := &TLUpdatesDifferenceTooLong{&Updates_Difference_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// updates.differenceEmpty#5d75a138 date:int seq:int = updates.Difference;
func (m *Updates_Difference) To_UpdatesDifferenceEmpty() *TLUpdatesDifferenceEmpty {
    return &TLUpdatesDifferenceEmpty{
        Data2: m.Data2,
    }
}

// updates.difference#f49ca0 new_messages:Vector<Message> new_encrypted_messages:Vector<EncryptedMessage> other_updates:Vector<Update> chats:Vector<Chat> users:Vector<User> state:updates.State = updates.Difference;
func (m *Updates_Difference) To_UpdatesDifference() *TLUpdatesDifference {
    return &TLUpdatesDifference{
        Data2: m.Data2,
    }
}

// updates.differenceSlice#a8fb1981 new_messages:Vector<Message> new_encrypted_messages:Vector<EncryptedMessage> other_updates:Vector<Update> chats:Vector<Chat> users:Vector<User> intermediate_state:updates.State = updates.Difference;
func (m *Updates_Difference) To_UpdatesDifferenceSlice() *TLUpdatesDifferenceSlice {
    return &TLUpdatesDifferenceSlice{
        Data2: m.Data2,
    }
}

// updates.differenceTooLong#4afe8f6d pts:int = updates.Difference;
func (m *Updates_Difference) To_UpdatesDifferenceTooLong() *TLUpdatesDifferenceTooLong {
    return &TLUpdatesDifferenceTooLong{
        Data2: m.Data2,
    }
}



// updates.differenceEmpty#5d75a138 date:int seq:int = updates.Difference;
func (m *TLUpdatesDifferenceEmpty) To_Updates_Difference() *Updates_Difference {
    return &Updates_Difference{
        Constructor: TLConstructor_CRC32_updates_differenceEmpty,
        Data2: m.Data2,
    }
}


func (m *TLUpdatesDifferenceEmpty) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdatesDifferenceEmpty) GetDate() int32 { return m.Data2.Date }

func (m *TLUpdatesDifferenceEmpty) SetSeq(v int32) { m.Data2.Seq = v }
func (m *TLUpdatesDifferenceEmpty) GetSeq() int32 { return m.Data2.Seq }


func NewTLUpdatesDifferenceEmpty() * TLUpdatesDifferenceEmpty {
    return &TLUpdatesDifferenceEmpty{ Data2: &Updates_Difference_Data{} }
}

func (m* TLUpdatesDifferenceEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updates_differenceEmpty))

    x.Int(m.GetDate())
    x.Int(m.GetSeq())

    return x.buf
}

func (m* TLUpdatesDifferenceEmpty) Decode(dbuf *DecodeBuf) error {
    m.SetDate(dbuf.Int())
    m.SetSeq(dbuf.Int())

    return dbuf.err
}
// updates.difference#f49ca0 new_messages:Vector<Message> new_encrypted_messages:Vector<EncryptedMessage> other_updates:Vector<Update> chats:Vector<Chat> users:Vector<User> state:updates.State = updates.Difference;
func (m *TLUpdatesDifference) To_Updates_Difference() *Updates_Difference {
    return &Updates_Difference{
        Constructor: TLConstructor_CRC32_updates_difference,
        Data2: m.Data2,
    }
}


func (m *TLUpdatesDifference) SetNewMessages(v []*Message) { m.Data2.NewMessages = v }
func (m *TLUpdatesDifference) GetNewMessages() []*Message { return m.Data2.NewMessages }

func (m *TLUpdatesDifference) SetNewEncryptedMessages(v []*EncryptedMessage) { m.Data2.NewEncryptedMessages = v }
func (m *TLUpdatesDifference) GetNewEncryptedMessages() []*EncryptedMessage { return m.Data2.NewEncryptedMessages }

func (m *TLUpdatesDifference) SetOtherUpdates(v []*Update) { m.Data2.OtherUpdates = v }
func (m *TLUpdatesDifference) GetOtherUpdates() []*Update { return m.Data2.OtherUpdates }

func (m *TLUpdatesDifference) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLUpdatesDifference) GetChats() []*Chat { return m.Data2.Chats }

func (m *TLUpdatesDifference) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLUpdatesDifference) GetUsers() []*User { return m.Data2.Users }

func (m *TLUpdatesDifference) SetState(v *Updates_State) { m.Data2.State = v }
func (m *TLUpdatesDifference) GetState() *Updates_State { return m.Data2.State }


func NewTLUpdatesDifference() * TLUpdatesDifference {
    return &TLUpdatesDifference{ Data2: &Updates_Difference_Data{} }
}

func (m* TLUpdatesDifference) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updates_difference))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetNewMessages())))
for _, v := range m.GetNewMessages() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetNewEncryptedMessages())))
for _, v := range m.GetNewEncryptedMessages() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetOtherUpdates())))
for _, v := range m.GetOtherUpdates() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetChats())))
for _, v := range m.GetChats() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Bytes(m.GetState().Encode())

    return x.buf
}

func (m* TLUpdatesDifference) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*Message, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &Message{}
	v1[i].Decode(dbuf)
}
m.SetNewMessages(v1)

    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*EncryptedMessage, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &EncryptedMessage{}
	v2[i].Decode(dbuf)
}
m.SetNewEncryptedMessages(v2)

    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*Update, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &Update{}
	v3[i].Decode(dbuf)
}
m.SetOtherUpdates(v3)

    c4 := dbuf.Int()
if c4 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
	return dbuf.err
}
l4 := dbuf.Int()
v4 := make([]*Chat, l4)
for i := int32(0); i < l4; i++ {
	v4[i] = &Chat{}
	v4[i].Decode(dbuf)
}
m.SetChats(v4)

    c5 := dbuf.Int()
if c5 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 5, c5)
	return dbuf.err
}
l5 := dbuf.Int()
v5 := make([]*User, l5)
for i := int32(0); i < l5; i++ {
	v5[i] = &User{}
	v5[i].Decode(dbuf)
}
m.SetUsers(v5)

    m6 := &Updates_State{}
    m6.Decode(dbuf)
    m.SetState(m6)

    return dbuf.err
}
// updates.differenceSlice#a8fb1981 new_messages:Vector<Message> new_encrypted_messages:Vector<EncryptedMessage> other_updates:Vector<Update> chats:Vector<Chat> users:Vector<User> intermediate_state:updates.State = updates.Difference;
func (m *TLUpdatesDifferenceSlice) To_Updates_Difference() *Updates_Difference {
    return &Updates_Difference{
        Constructor: TLConstructor_CRC32_updates_differenceSlice,
        Data2: m.Data2,
    }
}


func (m *TLUpdatesDifferenceSlice) SetNewMessages(v []*Message) { m.Data2.NewMessages = v }
func (m *TLUpdatesDifferenceSlice) GetNewMessages() []*Message { return m.Data2.NewMessages }

func (m *TLUpdatesDifferenceSlice) SetNewEncryptedMessages(v []*EncryptedMessage) { m.Data2.NewEncryptedMessages = v }
func (m *TLUpdatesDifferenceSlice) GetNewEncryptedMessages() []*EncryptedMessage { return m.Data2.NewEncryptedMessages }

func (m *TLUpdatesDifferenceSlice) SetOtherUpdates(v []*Update) { m.Data2.OtherUpdates = v }
func (m *TLUpdatesDifferenceSlice) GetOtherUpdates() []*Update { return m.Data2.OtherUpdates }

func (m *TLUpdatesDifferenceSlice) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLUpdatesDifferenceSlice) GetChats() []*Chat { return m.Data2.Chats }

func (m *TLUpdatesDifferenceSlice) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLUpdatesDifferenceSlice) GetUsers() []*User { return m.Data2.Users }

func (m *TLUpdatesDifferenceSlice) SetIntermediateState(v *Updates_State) { m.Data2.IntermediateState = v }
func (m *TLUpdatesDifferenceSlice) GetIntermediateState() *Updates_State { return m.Data2.IntermediateState }


func NewTLUpdatesDifferenceSlice() * TLUpdatesDifferenceSlice {
    return &TLUpdatesDifferenceSlice{ Data2: &Updates_Difference_Data{} }
}

func (m* TLUpdatesDifferenceSlice) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updates_differenceSlice))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetNewMessages())))
for _, v := range m.GetNewMessages() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetNewEncryptedMessages())))
for _, v := range m.GetNewEncryptedMessages() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetOtherUpdates())))
for _, v := range m.GetOtherUpdates() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetChats())))
for _, v := range m.GetChats() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Bytes(m.GetIntermediateState().Encode())

    return x.buf
}

func (m* TLUpdatesDifferenceSlice) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*Message, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &Message{}
	v1[i].Decode(dbuf)
}
m.SetNewMessages(v1)

    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*EncryptedMessage, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &EncryptedMessage{}
	v2[i].Decode(dbuf)
}
m.SetNewEncryptedMessages(v2)

    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*Update, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &Update{}
	v3[i].Decode(dbuf)
}
m.SetOtherUpdates(v3)

    c4 := dbuf.Int()
if c4 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
	return dbuf.err
}
l4 := dbuf.Int()
v4 := make([]*Chat, l4)
for i := int32(0); i < l4; i++ {
	v4[i] = &Chat{}
	v4[i].Decode(dbuf)
}
m.SetChats(v4)

    c5 := dbuf.Int()
if c5 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 5, c5)
	return dbuf.err
}
l5 := dbuf.Int()
v5 := make([]*User, l5)
for i := int32(0); i < l5; i++ {
	v5[i] = &User{}
	v5[i].Decode(dbuf)
}
m.SetUsers(v5)

    m6 := &Updates_State{}
    m6.Decode(dbuf)
    m.SetIntermediateState(m6)

    return dbuf.err
}
// updates.differenceTooLong#4afe8f6d pts:int = updates.Difference;
func (m *TLUpdatesDifferenceTooLong) To_Updates_Difference() *Updates_Difference {
    return &Updates_Difference{
        Constructor: TLConstructor_CRC32_updates_differenceTooLong,
        Data2: m.Data2,
    }
}


func (m *TLUpdatesDifferenceTooLong) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdatesDifferenceTooLong) GetPts() int32 { return m.Data2.Pts }


func NewTLUpdatesDifferenceTooLong() * TLUpdatesDifferenceTooLong {
    return &TLUpdatesDifferenceTooLong{ Data2: &Updates_Difference_Data{} }
}

func (m* TLUpdatesDifferenceTooLong) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updates_differenceTooLong))

    x.Int(m.GetPts())

    return x.buf
}

func (m* TLUpdatesDifferenceTooLong) Decode(dbuf *DecodeBuf) error {
    m.SetPts(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputEncryptedFile <--
//  + TL_InputEncryptedFileEmpty
//  + TL_InputEncryptedFileUploaded
//  + TL_InputEncryptedFile
//  + TL_InputEncryptedFileBigUploaded
//

func (m *InputEncryptedFile) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputEncryptedFileEmpty:
        t := m.To_InputEncryptedFileEmpty()
        return t.Encode()
    case TLConstructor_CRC32_inputEncryptedFileUploaded:
        t := m.To_InputEncryptedFileUploaded()
        return t.Encode()
    case TLConstructor_CRC32_inputEncryptedFile:
        t := m.To_InputEncryptedFile()
        return t.Encode()
    case TLConstructor_CRC32_inputEncryptedFileBigUploaded:
        t := m.To_InputEncryptedFileBigUploaded()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputEncryptedFile) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputEncryptedFileEmpty:
        m2 := &TLInputEncryptedFileEmpty{&InputEncryptedFile_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputEncryptedFileUploaded:
        m2 := &TLInputEncryptedFileUploaded{&InputEncryptedFile_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputEncryptedFile:
        m2 := &TLInputEncryptedFile{&InputEncryptedFile_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputEncryptedFileBigUploaded:
        m2 := &TLInputEncryptedFileBigUploaded{&InputEncryptedFile_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputEncryptedFileEmpty#1837c364 = InputEncryptedFile;
func (m *InputEncryptedFile) To_InputEncryptedFileEmpty() *TLInputEncryptedFileEmpty {
    return &TLInputEncryptedFileEmpty{
        Data2: m.Data2,
    }
}

// inputEncryptedFileUploaded#64bd0306 id:long parts:int md5_checksum:string key_fingerprint:int = InputEncryptedFile;
func (m *InputEncryptedFile) To_InputEncryptedFileUploaded() *TLInputEncryptedFileUploaded {
    return &TLInputEncryptedFileUploaded{
        Data2: m.Data2,
    }
}

// inputEncryptedFile#5a17b5e5 id:long access_hash:long = InputEncryptedFile;
func (m *InputEncryptedFile) To_InputEncryptedFile() *TLInputEncryptedFile {
    return &TLInputEncryptedFile{
        Data2: m.Data2,
    }
}

// inputEncryptedFileBigUploaded#2dc173c8 id:long parts:int key_fingerprint:int = InputEncryptedFile;
func (m *InputEncryptedFile) To_InputEncryptedFileBigUploaded() *TLInputEncryptedFileBigUploaded {
    return &TLInputEncryptedFileBigUploaded{
        Data2: m.Data2,
    }
}



// inputEncryptedFileEmpty#1837c364 = InputEncryptedFile;
func (m *TLInputEncryptedFileEmpty) To_InputEncryptedFile() *InputEncryptedFile {
    return &InputEncryptedFile{
        Constructor: TLConstructor_CRC32_inputEncryptedFileEmpty,
        Data2: m.Data2,
    }
}



func NewTLInputEncryptedFileEmpty() * TLInputEncryptedFileEmpty {
    return &TLInputEncryptedFileEmpty{ Data2: &InputEncryptedFile_Data{} }
}

func (m* TLInputEncryptedFileEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputEncryptedFileEmpty))


    return x.buf
}

func (m* TLInputEncryptedFileEmpty) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputEncryptedFileUploaded#64bd0306 id:long parts:int md5_checksum:string key_fingerprint:int = InputEncryptedFile;
func (m *TLInputEncryptedFileUploaded) To_InputEncryptedFile() *InputEncryptedFile {
    return &InputEncryptedFile{
        Constructor: TLConstructor_CRC32_inputEncryptedFileUploaded,
        Data2: m.Data2,
    }
}


func (m *TLInputEncryptedFileUploaded) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputEncryptedFileUploaded) GetId() int64 { return m.Data2.Id }

func (m *TLInputEncryptedFileUploaded) SetParts(v int32) { m.Data2.Parts = v }
func (m *TLInputEncryptedFileUploaded) GetParts() int32 { return m.Data2.Parts }

func (m *TLInputEncryptedFileUploaded) SetMd5Checksum(v string) { m.Data2.Md5Checksum = v }
func (m *TLInputEncryptedFileUploaded) GetMd5Checksum() string { return m.Data2.Md5Checksum }

func (m *TLInputEncryptedFileUploaded) SetKeyFingerprint(v int32) { m.Data2.KeyFingerprint = v }
func (m *TLInputEncryptedFileUploaded) GetKeyFingerprint() int32 { return m.Data2.KeyFingerprint }


func NewTLInputEncryptedFileUploaded() * TLInputEncryptedFileUploaded {
    return &TLInputEncryptedFileUploaded{ Data2: &InputEncryptedFile_Data{} }
}

func (m* TLInputEncryptedFileUploaded) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputEncryptedFileUploaded))

    x.Long(m.GetId())
    x.Int(m.GetParts())
    x.String(m.GetMd5Checksum())
    x.Int(m.GetKeyFingerprint())

    return x.buf
}

func (m* TLInputEncryptedFileUploaded) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetParts(dbuf.Int())
    m.SetMd5Checksum(dbuf.String())
    m.SetKeyFingerprint(dbuf.Int())

    return dbuf.err
}
// inputEncryptedFile#5a17b5e5 id:long access_hash:long = InputEncryptedFile;
func (m *TLInputEncryptedFile) To_InputEncryptedFile() *InputEncryptedFile {
    return &InputEncryptedFile{
        Constructor: TLConstructor_CRC32_inputEncryptedFile,
        Data2: m.Data2,
    }
}


func (m *TLInputEncryptedFile) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputEncryptedFile) GetId() int64 { return m.Data2.Id }

func (m *TLInputEncryptedFile) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputEncryptedFile) GetAccessHash() int64 { return m.Data2.AccessHash }


func NewTLInputEncryptedFile() * TLInputEncryptedFile {
    return &TLInputEncryptedFile{ Data2: &InputEncryptedFile_Data{} }
}

func (m* TLInputEncryptedFile) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputEncryptedFile))

    x.Long(m.GetId())
    x.Long(m.GetAccessHash())

    return x.buf
}

func (m* TLInputEncryptedFile) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())

    return dbuf.err
}
// inputEncryptedFileBigUploaded#2dc173c8 id:long parts:int key_fingerprint:int = InputEncryptedFile;
func (m *TLInputEncryptedFileBigUploaded) To_InputEncryptedFile() *InputEncryptedFile {
    return &InputEncryptedFile{
        Constructor: TLConstructor_CRC32_inputEncryptedFileBigUploaded,
        Data2: m.Data2,
    }
}


func (m *TLInputEncryptedFileBigUploaded) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputEncryptedFileBigUploaded) GetId() int64 { return m.Data2.Id }

func (m *TLInputEncryptedFileBigUploaded) SetParts(v int32) { m.Data2.Parts = v }
func (m *TLInputEncryptedFileBigUploaded) GetParts() int32 { return m.Data2.Parts }

func (m *TLInputEncryptedFileBigUploaded) SetKeyFingerprint(v int32) { m.Data2.KeyFingerprint = v }
func (m *TLInputEncryptedFileBigUploaded) GetKeyFingerprint() int32 { return m.Data2.KeyFingerprint }


func NewTLInputEncryptedFileBigUploaded() * TLInputEncryptedFileBigUploaded {
    return &TLInputEncryptedFileBigUploaded{ Data2: &InputEncryptedFile_Data{} }
}

func (m* TLInputEncryptedFileBigUploaded) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputEncryptedFileBigUploaded))

    x.Long(m.GetId())
    x.Int(m.GetParts())
    x.Int(m.GetKeyFingerprint())

    return x.buf
}

func (m* TLInputEncryptedFileBigUploaded) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetParts(dbuf.Int())
    m.SetKeyFingerprint(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Document <--
//  + TL_DocumentEmpty
//  + TL_Document
//  + TL_Document114
//

func (m *Document) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_documentEmpty:
        t := m.To_DocumentEmpty()
        return t.Encode()
    case TLConstructor_CRC32_document:
        t := m.To_Document()
        return t.Encode()
    case TLConstructor_CRC32_document114:
        t := m.To_Document114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Document) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_documentEmpty:
        m2 := &TLDocumentEmpty{&Document_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_document:
        m2 := &TLDocument{&Document_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_document114:
        m2 := &TLDocument114{&Document_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// documentEmpty#36f8c871 id:long = Document;
func (m *Document) To_DocumentEmpty() *TLDocumentEmpty {
    return &TLDocumentEmpty{
        Data2: m.Data2,
    }
}

// document#87232bc7 id:long access_hash:long date:int mime_type:string size:int thumb:PhotoSize dc_id:int version:int attributes:Vector<DocumentAttribute> = Document;
func (m *Document) To_Document() *TLDocument {
    return &TLDocument{
        Data2: m.Data2,
    }
}

// document#1e87342b flags:# id:long access_hash:long file_reference:bytes date:int mime_type:string size:int thumbs:flags.0?Vector<PhotoSize> video_thumbs:flags.1?Vector<VideoSize> dc_id:int attributes:Vector<DocumentAttribute> = Document;
func (m *Document) To_Document114() *TLDocument114 {
    return &TLDocument114{
        Data2: m.Data2,
    }
}



// documentEmpty#36f8c871 id:long = Document;
func (m *TLDocumentEmpty) To_Document() *Document {
    return &Document{
        Constructor: TLConstructor_CRC32_documentEmpty,
        Data2: m.Data2,
    }
}


func (m *TLDocumentEmpty) SetId(v int64) { m.Data2.Id = v }
func (m *TLDocumentEmpty) GetId() int64 { return m.Data2.Id }


func NewTLDocumentEmpty() * TLDocumentEmpty {
    return &TLDocumentEmpty{ Data2: &Document_Data{} }
}

func (m* TLDocumentEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_documentEmpty))

    x.Long(m.GetId())

    return x.buf
}

func (m* TLDocumentEmpty) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())

    return dbuf.err
}
// document#87232bc7 id:long access_hash:long date:int mime_type:string size:int thumb:PhotoSize dc_id:int version:int attributes:Vector<DocumentAttribute> = Document;
func (m *TLDocument) To_Document() *Document {
    return &Document{
        Constructor: TLConstructor_CRC32_document,
        Data2: m.Data2,
    }
}


func (m *TLDocument) SetId(v int64) { m.Data2.Id = v }
func (m *TLDocument) GetId() int64 { return m.Data2.Id }

func (m *TLDocument) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLDocument) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLDocument) SetDate(v int32) { m.Data2.Date = v }
func (m *TLDocument) GetDate() int32 { return m.Data2.Date }

func (m *TLDocument) SetMimeType(v string) { m.Data2.MimeType = v }
func (m *TLDocument) GetMimeType() string { return m.Data2.MimeType }

func (m *TLDocument) SetSize(v int32) { m.Data2.Size_ = v }
func (m *TLDocument) GetSize() int32 { return m.Data2.Size_ }

func (m *TLDocument) SetThumb(v *PhotoSize) { m.Data2.Thumb = v }
func (m *TLDocument) GetThumb() *PhotoSize { return m.Data2.Thumb }

func (m *TLDocument) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLDocument) GetDcId() int32 { return m.Data2.DcId }

func (m *TLDocument) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLDocument) GetVersion() int32 { return m.Data2.Version }

func (m *TLDocument) SetAttributes(v []*DocumentAttribute) { m.Data2.Attributes = v }
func (m *TLDocument) GetAttributes() []*DocumentAttribute { return m.Data2.Attributes }


func NewTLDocument() * TLDocument {
    return &TLDocument{ Data2: &Document_Data{} }
}

func (m* TLDocument) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_document))

    x.Long(m.GetId())
    x.Long(m.GetAccessHash())
    x.Int(m.GetDate())
    x.String(m.GetMimeType())
    x.Int(m.GetSize())
    x.Bytes(m.GetThumb().Encode())
    x.Int(m.GetDcId())
    x.Int(m.GetVersion())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetAttributes())))
for _, v := range m.GetAttributes() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLDocument) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())
    m.SetDate(dbuf.Int())
    m.SetMimeType(dbuf.String())
    m.SetSize(dbuf.Int())
    m6 := &PhotoSize{}
    m6.Decode(dbuf)
    m.SetThumb(m6)
    m.SetDcId(dbuf.Int())
    m.SetVersion(dbuf.Int())
    c9 := dbuf.Int()
if c9 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 9, c9)
	return dbuf.err
}
l9 := dbuf.Int()
v9 := make([]*DocumentAttribute, l9)
for i := int32(0); i < l9; i++ {
	v9[i] = &DocumentAttribute{}
	v9[i].Decode(dbuf)
}
m.SetAttributes(v9)


    return dbuf.err
}
// document#1e87342b flags:# id:long access_hash:long file_reference:bytes date:int mime_type:string size:int thumbs:flags.0?Vector<PhotoSize> video_thumbs:flags.1?Vector<VideoSize> dc_id:int attributes:Vector<DocumentAttribute> = Document;
func (m *TLDocument114) To_Document() *Document {
    return &Document{
        Constructor: TLConstructor_CRC32_document114,
        Data2: m.Data2,
    }
}


func (m *TLDocument114) SetId(v int64) { m.Data2.Id = v }
func (m *TLDocument114) GetId() int64 { return m.Data2.Id }

func (m *TLDocument114) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLDocument114) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLDocument114) SetFileReference(v []byte) { m.Data2.FileReference = v }
func (m *TLDocument114) GetFileReference() []byte { return m.Data2.FileReference }

func (m *TLDocument114) SetDate(v int32) { m.Data2.Date = v }
func (m *TLDocument114) GetDate() int32 { return m.Data2.Date }

func (m *TLDocument114) SetMimeType(v string) { m.Data2.MimeType = v }
func (m *TLDocument114) GetMimeType() string { return m.Data2.MimeType }

func (m *TLDocument114) SetSize(v int32) { m.Data2.Size_ = v }
func (m *TLDocument114) GetSize() int32 { return m.Data2.Size_ }

func (m *TLDocument114) SetThumbs(v []*PhotoSize) { m.Data2.Thumbs = v }
func (m *TLDocument114) GetThumbs() []*PhotoSize { return m.Data2.Thumbs }

func (m *TLDocument114) SetVideoThumbs(v []*VideoSize) { m.Data2.VideoThumbs = v }
func (m *TLDocument114) GetVideoThumbs() []*VideoSize { return m.Data2.VideoThumbs }

func (m *TLDocument114) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLDocument114) GetDcId() int32 { return m.Data2.DcId }

func (m *TLDocument114) SetAttributes(v []*DocumentAttribute) { m.Data2.Attributes = v }
func (m *TLDocument114) GetAttributes() []*DocumentAttribute { return m.Data2.Attributes }


func NewTLDocument114() * TLDocument114 {
    return &TLDocument114{ Data2: &Document_Data{} }
}

func (m* TLDocument114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_document114))

    // flags
    var flags uint32 = 0
    if m.GetThumbs() != nil { flags |= 1 << 0 }
    if m.GetVideoThumbs() != nil { flags |= 1 << 1 }
	x.UInt(flags)

    x.Long(m.GetId())
    x.Long(m.GetAccessHash())
    x.StringBytes(m.GetFileReference())
    x.Int(m.GetDate())
    x.String(m.GetMimeType())
    x.Int(m.GetSize())
    if (flags & (1 << 0)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetThumbs())))
for _, v := range m.GetThumbs() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}
    if (flags & (1 << 1)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetVideoThumbs())))
for _, v := range m.GetVideoThumbs() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}
    x.Int(m.GetDcId())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetAttributes())))
for _, v := range m.GetAttributes() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLDocument114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())
    m.SetFileReference(dbuf.StringBytes())
    m.SetDate(dbuf.Int())
    m.SetMimeType(dbuf.String())
    m.SetSize(dbuf.Int())
    if (flags & (1 << 0)) != 0 {
 c8 := dbuf.Int()
if c8 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 8, c8)
	return dbuf.err
}
l8 := dbuf.Int()
v8 := make([]*PhotoSize, l8)
for i := int32(0); i < l8; i++ {
	v8[i] = &PhotoSize{}
	v8[i].Decode(dbuf)
}
m.SetThumbs(v8)
 
}
    if (flags & (1 << 1)) != 0 {
 c9 := dbuf.Int()
if c9 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 9, c9)
	return dbuf.err
}
l9 := dbuf.Int()
v9 := make([]*VideoSize, l9)
for i := int32(0); i < l9; i++ {
	v9[i] = &VideoSize{}
	v9[i].Decode(dbuf)
}
m.SetVideoThumbs(v9)
 
}
    m.SetDcId(dbuf.Int())
    c11 := dbuf.Int()
if c11 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 11, c11)
	return dbuf.err
}
l11 := dbuf.Int()
v11 := make([]*DocumentAttribute, l11)
for i := int32(0); i < l11; i++ {
	v11[i] = &DocumentAttribute{}
	v11[i].Decode(dbuf)
}
m.SetAttributes(v11)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Contacts_Found <--
//  + TL_ContactsFound
//  + TL_ContactsFound114
//

func (m *Contacts_Found) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_contacts_found:
        t := m.To_ContactsFound()
        return t.Encode()
    case TLConstructor_CRC32_contacts_found114:
        t := m.To_ContactsFound114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Contacts_Found) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_contacts_found:
        m2 := &TLContactsFound{&Contacts_Found_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_contacts_found114:
        m2 := &TLContactsFound114{&Contacts_Found_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// contacts.found#1aa1f784 results:Vector<Peer> chats:Vector<Chat> users:Vector<User> = contacts.Found;
func (m *Contacts_Found) To_ContactsFound() *TLContactsFound {
    return &TLContactsFound{
        Data2: m.Data2,
    }
}

// contacts.found#b3134d9d my_results:Vector<Peer> results:Vector<Peer> chats:Vector<Chat> users:Vector<User> = contacts.Found;
func (m *Contacts_Found) To_ContactsFound114() *TLContactsFound114 {
    return &TLContactsFound114{
        Data2: m.Data2,
    }
}



// contacts.found#1aa1f784 results:Vector<Peer> chats:Vector<Chat> users:Vector<User> = contacts.Found;
func (m *TLContactsFound) To_Contacts_Found() *Contacts_Found {
    return &Contacts_Found{
        Constructor: TLConstructor_CRC32_contacts_found,
        Data2: m.Data2,
    }
}


func (m *TLContactsFound) SetResults(v []*Peer) { m.Data2.Results = v }
func (m *TLContactsFound) GetResults() []*Peer { return m.Data2.Results }

func (m *TLContactsFound) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLContactsFound) GetChats() []*Chat { return m.Data2.Chats }

func (m *TLContactsFound) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLContactsFound) GetUsers() []*User { return m.Data2.Users }


func NewTLContactsFound() * TLContactsFound {
    return &TLContactsFound{ Data2: &Contacts_Found_Data{} }
}

func (m* TLContactsFound) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_contacts_found))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetResults())))
for _, v := range m.GetResults() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetChats())))
for _, v := range m.GetChats() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLContactsFound) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*Peer, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &Peer{}
	v1[i].Decode(dbuf)
}
m.SetResults(v1)

    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*Chat, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &Chat{}
	v2[i].Decode(dbuf)
}
m.SetChats(v2)

    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*User, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &User{}
	v3[i].Decode(dbuf)
}
m.SetUsers(v3)


    return dbuf.err
}
// contacts.found#b3134d9d my_results:Vector<Peer> results:Vector<Peer> chats:Vector<Chat> users:Vector<User> = contacts.Found;
func (m *TLContactsFound114) To_Contacts_Found() *Contacts_Found {
    return &Contacts_Found{
        Constructor: TLConstructor_CRC32_contacts_found114,
        Data2: m.Data2,
    }
}


func (m *TLContactsFound114) SetMyResults(v []*Peer) { m.Data2.MyResults = v }
func (m *TLContactsFound114) GetMyResults() []*Peer { return m.Data2.MyResults }

func (m *TLContactsFound114) SetResults(v []*Peer) { m.Data2.Results = v }
func (m *TLContactsFound114) GetResults() []*Peer { return m.Data2.Results }

func (m *TLContactsFound114) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLContactsFound114) GetChats() []*Chat { return m.Data2.Chats }

func (m *TLContactsFound114) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLContactsFound114) GetUsers() []*User { return m.Data2.Users }


func NewTLContactsFound114() * TLContactsFound114 {
    return &TLContactsFound114{ Data2: &Contacts_Found_Data{} }
}

func (m* TLContactsFound114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_contacts_found114))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetMyResults())))
for _, v := range m.GetMyResults() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetResults())))
for _, v := range m.GetResults() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetChats())))
for _, v := range m.GetChats() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLContactsFound114) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*Peer, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &Peer{}
	v1[i].Decode(dbuf)
}
m.SetMyResults(v1)

    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*Peer, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &Peer{}
	v2[i].Decode(dbuf)
}
m.SetResults(v2)

    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*Chat, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &Chat{}
	v3[i].Decode(dbuf)
}
m.SetChats(v3)

    c4 := dbuf.Int()
if c4 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
	return dbuf.err
}
l4 := dbuf.Int()
v4 := make([]*User, l4)
for i := int32(0); i < l4; i++ {
	v4[i] = &User{}
	v4[i].Decode(dbuf)
}
m.SetUsers(v4)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Account_Password <--
//  + TL_AccountNoPassword
//  + TL_AccountPassword
//  + TL_AccountPassword114
//

func (m *Account_Password) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_account_noPassword:
        t := m.To_AccountNoPassword()
        return t.Encode()
    case TLConstructor_CRC32_account_password:
        t := m.To_AccountPassword()
        return t.Encode()
    case TLConstructor_CRC32_account_password114:
        t := m.To_AccountPassword114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Account_Password) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_account_noPassword:
        m2 := &TLAccountNoPassword{&Account_Password_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_account_password:
        m2 := &TLAccountPassword{&Account_Password_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_account_password114:
        m2 := &TLAccountPassword114{&Account_Password_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// account.noPassword#96dabc18 new_salt:bytes email_unconfirmed_pattern:string = account.Password;
func (m *Account_Password) To_AccountNoPassword() *TLAccountNoPassword {
    return &TLAccountNoPassword{
        Data2: m.Data2,
    }
}

// account.password#7c18141c current_salt:bytes new_salt:bytes hint:string has_recovery:Bool email_unconfirmed_pattern:string = account.Password;
func (m *Account_Password) To_AccountPassword() *TLAccountPassword {
    return &TLAccountPassword{
        Data2: m.Data2,
    }
}

// account.password#ad2641f8 flags:# has_recovery:flags.0?true has_secure_values:flags.1?true has_password:flags.2?true current_algo:flags.2?PasswordKdfAlgo srp_B:flags.2?bytes srp_id:flags.2?long hint:flags.3?string email_unconfirmed_pattern:flags.4?string new_algo:PasswordKdfAlgo new_secure_algo:SecurePasswordKdfAlgo secure_random:bytes = account.Password;
func (m *Account_Password) To_AccountPassword114() *TLAccountPassword114 {
    return &TLAccountPassword114{
        Data2: m.Data2,
    }
}



// account.noPassword#96dabc18 new_salt:bytes email_unconfirmed_pattern:string = account.Password;
func (m *TLAccountNoPassword) To_Account_Password() *Account_Password {
    return &Account_Password{
        Constructor: TLConstructor_CRC32_account_noPassword,
        Data2: m.Data2,
    }
}


func (m *TLAccountNoPassword) SetNewSalt(v []byte) { m.Data2.NewSalt = v }
func (m *TLAccountNoPassword) GetNewSalt() []byte { return m.Data2.NewSalt }

func (m *TLAccountNoPassword) SetEmailUnconfirmedPattern(v string) { m.Data2.EmailUnconfirmedPattern = v }
func (m *TLAccountNoPassword) GetEmailUnconfirmedPattern() string { return m.Data2.EmailUnconfirmedPattern }


func NewTLAccountNoPassword() * TLAccountNoPassword {
    return &TLAccountNoPassword{ Data2: &Account_Password_Data{} }
}

func (m* TLAccountNoPassword) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_account_noPassword))

    x.StringBytes(m.GetNewSalt())
    x.String(m.GetEmailUnconfirmedPattern())

    return x.buf
}

func (m* TLAccountNoPassword) Decode(dbuf *DecodeBuf) error {
    m.SetNewSalt(dbuf.StringBytes())
    m.SetEmailUnconfirmedPattern(dbuf.String())

    return dbuf.err
}
// account.password#7c18141c current_salt:bytes new_salt:bytes hint:string has_recovery:Bool email_unconfirmed_pattern:string = account.Password;
func (m *TLAccountPassword) To_Account_Password() *Account_Password {
    return &Account_Password{
        Constructor: TLConstructor_CRC32_account_password,
        Data2: m.Data2,
    }
}


func (m *TLAccountPassword) SetCurrentSalt(v []byte) { m.Data2.CurrentSalt = v }
func (m *TLAccountPassword) GetCurrentSalt() []byte { return m.Data2.CurrentSalt }

func (m *TLAccountPassword) SetNewSalt(v []byte) { m.Data2.NewSalt = v }
func (m *TLAccountPassword) GetNewSalt() []byte { return m.Data2.NewSalt }

func (m *TLAccountPassword) SetHint(v string) { m.Data2.Hint = v }
func (m *TLAccountPassword) GetHint() string { return m.Data2.Hint }

func (m *TLAccountPassword) SetHasRecovery(v *Bool) { m.Data2.HasRecovery_5 = v }
func (m *TLAccountPassword) GetHasRecovery() *Bool { return m.Data2.HasRecovery_5 }

func (m *TLAccountPassword) SetEmailUnconfirmedPattern(v string) { m.Data2.EmailUnconfirmedPattern = v }
func (m *TLAccountPassword) GetEmailUnconfirmedPattern() string { return m.Data2.EmailUnconfirmedPattern }


func NewTLAccountPassword() * TLAccountPassword {
    return &TLAccountPassword{ Data2: &Account_Password_Data{} }
}

func (m* TLAccountPassword) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_account_password))

    x.StringBytes(m.GetCurrentSalt())
    x.StringBytes(m.GetNewSalt())
    x.String(m.GetHint())
    x.Bytes(m.GetHasRecovery().Encode())
    x.String(m.GetEmailUnconfirmedPattern())

    return x.buf
}

func (m* TLAccountPassword) Decode(dbuf *DecodeBuf) error {
    m.SetCurrentSalt(dbuf.StringBytes())
    m.SetNewSalt(dbuf.StringBytes())
    m.SetHint(dbuf.String())
    m4 := &Bool{}
    m4.Decode(dbuf)
    m.SetHasRecovery(m4)
    m.SetEmailUnconfirmedPattern(dbuf.String())

    return dbuf.err
}
// account.password#ad2641f8 flags:# has_recovery:flags.0?true has_secure_values:flags.1?true has_password:flags.2?true current_algo:flags.2?PasswordKdfAlgo srp_B:flags.2?bytes srp_id:flags.2?long hint:flags.3?string email_unconfirmed_pattern:flags.4?string new_algo:PasswordKdfAlgo new_secure_algo:SecurePasswordKdfAlgo secure_random:bytes = account.Password;
func (m *TLAccountPassword114) To_Account_Password() *Account_Password {
    return &Account_Password{
        Constructor: TLConstructor_CRC32_account_password114,
        Data2: m.Data2,
    }
}


func (m *TLAccountPassword114) SetHasRecovery(v bool) { m.Data2.HasRecovery_6 = v }
func (m *TLAccountPassword114) GetHasRecovery() bool { return m.Data2.HasRecovery_6 }

func (m *TLAccountPassword114) SetHasSecureValues(v bool) { m.Data2.HasSecureValues = v }
func (m *TLAccountPassword114) GetHasSecureValues() bool { return m.Data2.HasSecureValues }

func (m *TLAccountPassword114) SetHasPassword(v bool) { m.Data2.HasPassword = v }
func (m *TLAccountPassword114) GetHasPassword() bool { return m.Data2.HasPassword }

func (m *TLAccountPassword114) SetCurrentAlgo(v *PasswordKdfAlgo) { m.Data2.CurrentAlgo = v }
func (m *TLAccountPassword114) GetCurrentAlgo() *PasswordKdfAlgo { return m.Data2.CurrentAlgo }

func (m *TLAccountPassword114) SetB(v []byte) { m.Data2.B = v }
func (m *TLAccountPassword114) GetB() []byte { return m.Data2.B }

func (m *TLAccountPassword114) SetSrpId(v int64) { m.Data2.SrpId = v }
func (m *TLAccountPassword114) GetSrpId() int64 { return m.Data2.SrpId }

func (m *TLAccountPassword114) SetHint(v string) { m.Data2.Hint = v }
func (m *TLAccountPassword114) GetHint() string { return m.Data2.Hint }

func (m *TLAccountPassword114) SetEmailUnconfirmedPattern(v string) { m.Data2.EmailUnconfirmedPattern = v }
func (m *TLAccountPassword114) GetEmailUnconfirmedPattern() string { return m.Data2.EmailUnconfirmedPattern }

func (m *TLAccountPassword114) SetNewAlgo(v *PasswordKdfAlgo) { m.Data2.NewAlgo = v }
func (m *TLAccountPassword114) GetNewAlgo() *PasswordKdfAlgo { return m.Data2.NewAlgo }

func (m *TLAccountPassword114) SetNewSecureAlgo(v *SecurePasswordKdfAlgo) { m.Data2.NewSecureAlgo = v }
func (m *TLAccountPassword114) GetNewSecureAlgo() *SecurePasswordKdfAlgo { return m.Data2.NewSecureAlgo }

func (m *TLAccountPassword114) SetSecureRandom(v []byte) { m.Data2.SecureRandom = v }
func (m *TLAccountPassword114) GetSecureRandom() []byte { return m.Data2.SecureRandom }


func NewTLAccountPassword114() * TLAccountPassword114 {
    return &TLAccountPassword114{ Data2: &Account_Password_Data{} }
}

func (m* TLAccountPassword114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_account_password114))

    // flags
    var flags uint32 = 0
    if m.GetHasRecovery() == true { flags |= 1 << 0 }
    if m.GetHasSecureValues() == true { flags |= 1 << 1 }
    if m.GetHasPassword() == true { flags |= 1 << 2 }
    if m.GetCurrentAlgo() != nil { flags |= 1 << 2 }
    if m.GetB() != nil { flags |= 1 << 2 }
    if m.GetSrpId() != 0 { flags |= 1 << 2 }
    if m.GetHint() != "" { flags |= 1 << 3 }
    if m.GetEmailUnconfirmedPattern() != "" { flags |= 1 << 4 }
	x.UInt(flags)

    
    
    
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetCurrentAlgo().Encode()) }
    if (flags & (1 << 2)) != 0 { x.StringBytes(m.GetB()) }
    if (flags & (1 << 2)) != 0 { x.Long(m.GetSrpId()) }
    if (flags & (1 << 3)) != 0 { x.String(m.GetHint()) }
    if (flags & (1 << 4)) != 0 { x.String(m.GetEmailUnconfirmedPattern()) }
    x.Bytes(m.GetNewAlgo().Encode())
    x.Bytes(m.GetNewSecureAlgo().Encode())
    x.StringBytes(m.GetSecureRandom())

    return x.buf
}

func (m* TLAccountPassword114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetHasRecovery(true) }
    if (flags & (1 << 1)) != 0 { m.SetHasSecureValues(true) }
    if (flags & (1 << 2)) != 0 { m.SetHasPassword(true) }
    if (flags & (1 << 2)) != 0 {
 m5 := &PasswordKdfAlgo{}
    m5.Decode(dbuf)
    m.SetCurrentAlgo(m5) 
}
    if (flags & (1 << 2)) != 0 {
 m.SetB(dbuf.StringBytes()) 
}
    if (flags & (1 << 2)) != 0 { m.SetSrpId(dbuf.Long()) }
    if (flags & (1 << 3)) != 0 { m.SetHint(dbuf.String()) }
    if (flags & (1 << 4)) != 0 { m.SetEmailUnconfirmedPattern(dbuf.String()) }
    m10 := &PasswordKdfAlgo{}
    m10.Decode(dbuf)
    m.SetNewAlgo(m10)
    m11 := &SecurePasswordKdfAlgo{}
    m11.Decode(dbuf)
    m.SetNewSecureAlgo(m11)
    m.SetSecureRandom(dbuf.StringBytes())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Game <--
//  + TL_Game
//

func (m *Game) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_game:
        t := m.To_Game()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Game) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_game:
        m2 := &TLGame{&Game_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// game#bdf9653b flags:# id:long access_hash:long short_name:string title:string description:string photo:Photo document:flags.0?Document = Game;
func (m *Game) To_Game() *TLGame {
    return &TLGame{
        Data2: m.Data2,
    }
}



// game#bdf9653b flags:# id:long access_hash:long short_name:string title:string description:string photo:Photo document:flags.0?Document = Game;
func (m *TLGame) To_Game() *Game {
    return &Game{
        Constructor: TLConstructor_CRC32_game,
        Data2: m.Data2,
    }
}


func (m *TLGame) SetId(v int64) { m.Data2.Id = v }
func (m *TLGame) GetId() int64 { return m.Data2.Id }

func (m *TLGame) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLGame) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLGame) SetShortName(v string) { m.Data2.ShortName = v }
func (m *TLGame) GetShortName() string { return m.Data2.ShortName }

func (m *TLGame) SetTitle(v string) { m.Data2.Title = v }
func (m *TLGame) GetTitle() string { return m.Data2.Title }

func (m *TLGame) SetDescription(v string) { m.Data2.Description = v }
func (m *TLGame) GetDescription() string { return m.Data2.Description }

func (m *TLGame) SetPhoto(v *Photo) { m.Data2.Photo = v }
func (m *TLGame) GetPhoto() *Photo { return m.Data2.Photo }

func (m *TLGame) SetDocument(v *Document) { m.Data2.Document = v }
func (m *TLGame) GetDocument() *Document { return m.Data2.Document }


func NewTLGame() * TLGame {
    return &TLGame{ Data2: &Game_Data{} }
}

func (m* TLGame) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_game))

    // flags
    var flags uint32 = 0
    if m.GetDocument() != nil { flags |= 1 << 0 }
	x.UInt(flags)

    x.Long(m.GetId())
    x.Long(m.GetAccessHash())
    x.String(m.GetShortName())
    x.String(m.GetTitle())
    x.String(m.GetDescription())
    x.Bytes(m.GetPhoto().Encode())
    if (flags & (1 << 0)) != 0 { x.Bytes(m.GetDocument().Encode()) }

    return x.buf
}

func (m* TLGame) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())
    m.SetShortName(dbuf.String())
    m.SetTitle(dbuf.String())
    m.SetDescription(dbuf.String())
    m7 := &Photo{}
    m7.Decode(dbuf)
    m.SetPhoto(m7)
    if (flags & (1 << 0)) != 0 {
 m8 := &Document{}
    m8.Decode(dbuf)
    m.SetDocument(m8) 
}

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Account_WebAuthorizations <--
//  + TL_AccountWebAuthorizations
//

func (m *Account_WebAuthorizations) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_account_webAuthorizations:
        t := m.To_AccountWebAuthorizations()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Account_WebAuthorizations) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_account_webAuthorizations:
        m2 := &TLAccountWebAuthorizations{&Account_WebAuthorizations_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// account.webAuthorizations#ed56c9fc authorizations:Vector<WebAuthorization> users:Vector<User> = account.WebAuthorizations;
func (m *Account_WebAuthorizations) To_AccountWebAuthorizations() *TLAccountWebAuthorizations {
    return &TLAccountWebAuthorizations{
        Data2: m.Data2,
    }
}



// account.webAuthorizations#ed56c9fc authorizations:Vector<WebAuthorization> users:Vector<User> = account.WebAuthorizations;
func (m *TLAccountWebAuthorizations) To_Account_WebAuthorizations() *Account_WebAuthorizations {
    return &Account_WebAuthorizations{
        Constructor: TLConstructor_CRC32_account_webAuthorizations,
        Data2: m.Data2,
    }
}


func (m *TLAccountWebAuthorizations) SetAuthorizations(v []*WebAuthorization) { m.Data2.Authorizations = v }
func (m *TLAccountWebAuthorizations) GetAuthorizations() []*WebAuthorization { return m.Data2.Authorizations }

func (m *TLAccountWebAuthorizations) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLAccountWebAuthorizations) GetUsers() []*User { return m.Data2.Users }


func NewTLAccountWebAuthorizations() * TLAccountWebAuthorizations {
    return &TLAccountWebAuthorizations{ Data2: &Account_WebAuthorizations_Data{} }
}

func (m* TLAccountWebAuthorizations) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_account_webAuthorizations))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetAuthorizations())))
for _, v := range m.GetAuthorizations() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLAccountWebAuthorizations) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*WebAuthorization, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &WebAuthorization{}
	v1[i].Decode(dbuf)
}
m.SetAuthorizations(v1)

    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*User, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &User{}
	v2[i].Decode(dbuf)
}
m.SetUsers(v2)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputWallPaper <--
//  + TL_InputWallPaper
//  + TL_InputWallPaperSlug
//  + TL_InputWallPaperNoFile
//

func (m *InputWallPaper) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputWallPaper:
        t := m.To_InputWallPaper()
        return t.Encode()
    case TLConstructor_CRC32_inputWallPaperSlug:
        t := m.To_InputWallPaperSlug()
        return t.Encode()
    case TLConstructor_CRC32_inputWallPaperNoFile:
        t := m.To_InputWallPaperNoFile()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputWallPaper) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputWallPaper:
        m2 := &TLInputWallPaper{&InputWallPaper_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputWallPaperSlug:
        m2 := &TLInputWallPaperSlug{&InputWallPaper_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputWallPaperNoFile:
        m2 := &TLInputWallPaperNoFile{&InputWallPaper_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputWallPaper#e630b979 id:long access_hash:long = InputWallPaper;
func (m *InputWallPaper) To_InputWallPaper() *TLInputWallPaper {
    return &TLInputWallPaper{
        Data2: m.Data2,
    }
}

// inputWallPaperSlug#72091c80 slug:string = InputWallPaper;
func (m *InputWallPaper) To_InputWallPaperSlug() *TLInputWallPaperSlug {
    return &TLInputWallPaperSlug{
        Data2: m.Data2,
    }
}

// inputWallPaperNoFile#8427bbac = InputWallPaper;
func (m *InputWallPaper) To_InputWallPaperNoFile() *TLInputWallPaperNoFile {
    return &TLInputWallPaperNoFile{
        Data2: m.Data2,
    }
}



// inputWallPaper#e630b979 id:long access_hash:long = InputWallPaper;
func (m *TLInputWallPaper) To_InputWallPaper() *InputWallPaper {
    return &InputWallPaper{
        Constructor: TLConstructor_CRC32_inputWallPaper,
        Data2: m.Data2,
    }
}


func (m *TLInputWallPaper) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputWallPaper) GetId() int64 { return m.Data2.Id }

func (m *TLInputWallPaper) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputWallPaper) GetAccessHash() int64 { return m.Data2.AccessHash }


func NewTLInputWallPaper() * TLInputWallPaper {
    return &TLInputWallPaper{ Data2: &InputWallPaper_Data{} }
}

func (m* TLInputWallPaper) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputWallPaper))

    x.Long(m.GetId())
    x.Long(m.GetAccessHash())

    return x.buf
}

func (m* TLInputWallPaper) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())

    return dbuf.err
}
// inputWallPaperSlug#72091c80 slug:string = InputWallPaper;
func (m *TLInputWallPaperSlug) To_InputWallPaper() *InputWallPaper {
    return &InputWallPaper{
        Constructor: TLConstructor_CRC32_inputWallPaperSlug,
        Data2: m.Data2,
    }
}


func (m *TLInputWallPaperSlug) SetSlug(v string) { m.Data2.Slug = v }
func (m *TLInputWallPaperSlug) GetSlug() string { return m.Data2.Slug }


func NewTLInputWallPaperSlug() * TLInputWallPaperSlug {
    return &TLInputWallPaperSlug{ Data2: &InputWallPaper_Data{} }
}

func (m* TLInputWallPaperSlug) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputWallPaperSlug))

    x.String(m.GetSlug())

    return x.buf
}

func (m* TLInputWallPaperSlug) Decode(dbuf *DecodeBuf) error {
    m.SetSlug(dbuf.String())

    return dbuf.err
}
// inputWallPaperNoFile#8427bbac = InputWallPaper;
func (m *TLInputWallPaperNoFile) To_InputWallPaper() *InputWallPaper {
    return &InputWallPaper{
        Constructor: TLConstructor_CRC32_inputWallPaperNoFile,
        Data2: m.Data2,
    }
}



func NewTLInputWallPaperNoFile() * TLInputWallPaperNoFile {
    return &TLInputWallPaperNoFile{ Data2: &InputWallPaper_Data{} }
}

func (m* TLInputWallPaperNoFile) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputWallPaperNoFile))


    return x.buf
}

func (m* TLInputWallPaperNoFile) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Messages_VotesList <--
//  + TL_MessagesVotesList
//

func (m *Messages_VotesList) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messages_votesList:
        t := m.To_MessagesVotesList()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Messages_VotesList) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messages_votesList:
        m2 := &TLMessagesVotesList{&Messages_VotesList_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messages.votesList#823f649 flags:# count:int votes:Vector<MessageUserVote> users:Vector<User> next_offset:flags.0?string = messages.VotesList;
func (m *Messages_VotesList) To_MessagesVotesList() *TLMessagesVotesList {
    return &TLMessagesVotesList{
        Data2: m.Data2,
    }
}



// messages.votesList#823f649 flags:# count:int votes:Vector<MessageUserVote> users:Vector<User> next_offset:flags.0?string = messages.VotesList;
func (m *TLMessagesVotesList) To_Messages_VotesList() *Messages_VotesList {
    return &Messages_VotesList{
        Constructor: TLConstructor_CRC32_messages_votesList,
        Data2: m.Data2,
    }
}


func (m *TLMessagesVotesList) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesVotesList) GetCount() int32 { return m.Data2.Count }

func (m *TLMessagesVotesList) SetVotes(v []*MessageUserVote) { m.Data2.Votes = v }
func (m *TLMessagesVotesList) GetVotes() []*MessageUserVote { return m.Data2.Votes }

func (m *TLMessagesVotesList) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesVotesList) GetUsers() []*User { return m.Data2.Users }

func (m *TLMessagesVotesList) SetNextOffset(v string) { m.Data2.NextOffset = v }
func (m *TLMessagesVotesList) GetNextOffset() string { return m.Data2.NextOffset }


func NewTLMessagesVotesList() * TLMessagesVotesList {
    return &TLMessagesVotesList{ Data2: &Messages_VotesList_Data{} }
}

func (m* TLMessagesVotesList) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_votesList))

    // flags
    var flags uint32 = 0
    if m.GetNextOffset() != "" { flags |= 1 << 0 }
	x.UInt(flags)

    x.Int(m.GetCount())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetVotes())))
for _, v := range m.GetVotes() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    if (flags & (1 << 0)) != 0 { x.String(m.GetNextOffset()) }

    return x.buf
}

func (m* TLMessagesVotesList) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetCount(dbuf.Int())
    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*MessageUserVote, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &MessageUserVote{}
	v3[i].Decode(dbuf)
}
m.SetVotes(v3)

    c4 := dbuf.Int()
if c4 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
	return dbuf.err
}
l4 := dbuf.Int()
v4 := make([]*User, l4)
for i := int32(0); i < l4; i++ {
	v4[i] = &User{}
	v4[i].Decode(dbuf)
}
m.SetUsers(v4)

    if (flags & (1 << 0)) != 0 { m.SetNextOffset(dbuf.String()) }

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Account_ContentSettings <--
//  + TL_AccountContentSettings
//

func (m *Account_ContentSettings) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_account_contentSettings:
        t := m.To_AccountContentSettings()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Account_ContentSettings) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_account_contentSettings:
        m2 := &TLAccountContentSettings{&Account_ContentSettings_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// account.contentSettings#57e28221 flags:# sensitive_enabled:flags.0?true sensitive_can_change:flags.1?true = account.ContentSettings;
func (m *Account_ContentSettings) To_AccountContentSettings() *TLAccountContentSettings {
    return &TLAccountContentSettings{
        Data2: m.Data2,
    }
}



// account.contentSettings#57e28221 flags:# sensitive_enabled:flags.0?true sensitive_can_change:flags.1?true = account.ContentSettings;
func (m *TLAccountContentSettings) To_Account_ContentSettings() *Account_ContentSettings {
    return &Account_ContentSettings{
        Constructor: TLConstructor_CRC32_account_contentSettings,
        Data2: m.Data2,
    }
}


func (m *TLAccountContentSettings) SetSensitiveEnabled(v bool) { m.Data2.SensitiveEnabled = v }
func (m *TLAccountContentSettings) GetSensitiveEnabled() bool { return m.Data2.SensitiveEnabled }

func (m *TLAccountContentSettings) SetSensitiveCanChange(v bool) { m.Data2.SensitiveCanChange = v }
func (m *TLAccountContentSettings) GetSensitiveCanChange() bool { return m.Data2.SensitiveCanChange }


func NewTLAccountContentSettings() * TLAccountContentSettings {
    return &TLAccountContentSettings{ Data2: &Account_ContentSettings_Data{} }
}

func (m* TLAccountContentSettings) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_account_contentSettings))

    // flags
    var flags uint32 = 0
    if m.GetSensitiveEnabled() == true { flags |= 1 << 0 }
    if m.GetSensitiveCanChange() == true { flags |= 1 << 1 }
	x.UInt(flags)

    
    

    return x.buf
}

func (m* TLAccountContentSettings) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetSensitiveEnabled(true) }
    if (flags & (1 << 1)) != 0 { m.SetSensitiveCanChange(true) }

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Messages_AllStickers <--
//  + TL_MessagesAllStickersNotModified
//  + TL_MessagesAllStickers
//

func (m *Messages_AllStickers) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messages_allStickersNotModified:
        t := m.To_MessagesAllStickersNotModified()
        return t.Encode()
    case TLConstructor_CRC32_messages_allStickers:
        t := m.To_MessagesAllStickers()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Messages_AllStickers) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messages_allStickersNotModified:
        m2 := &TLMessagesAllStickersNotModified{&Messages_AllStickers_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messages_allStickers:
        m2 := &TLMessagesAllStickers{&Messages_AllStickers_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messages.allStickersNotModified#e86602c3 = messages.AllStickers;
func (m *Messages_AllStickers) To_MessagesAllStickersNotModified() *TLMessagesAllStickersNotModified {
    return &TLMessagesAllStickersNotModified{
        Data2: m.Data2,
    }
}

// messages.allStickers#edfd405f hash:int sets:Vector<StickerSet> = messages.AllStickers;
func (m *Messages_AllStickers) To_MessagesAllStickers() *TLMessagesAllStickers {
    return &TLMessagesAllStickers{
        Data2: m.Data2,
    }
}



// messages.allStickersNotModified#e86602c3 = messages.AllStickers;
func (m *TLMessagesAllStickersNotModified) To_Messages_AllStickers() *Messages_AllStickers {
    return &Messages_AllStickers{
        Constructor: TLConstructor_CRC32_messages_allStickersNotModified,
        Data2: m.Data2,
    }
}



func NewTLMessagesAllStickersNotModified() * TLMessagesAllStickersNotModified {
    return &TLMessagesAllStickersNotModified{ Data2: &Messages_AllStickers_Data{} }
}

func (m* TLMessagesAllStickersNotModified) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_allStickersNotModified))


    return x.buf
}

func (m* TLMessagesAllStickersNotModified) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// messages.allStickers#edfd405f hash:int sets:Vector<StickerSet> = messages.AllStickers;
func (m *TLMessagesAllStickers) To_Messages_AllStickers() *Messages_AllStickers {
    return &Messages_AllStickers{
        Constructor: TLConstructor_CRC32_messages_allStickers,
        Data2: m.Data2,
    }
}


func (m *TLMessagesAllStickers) SetHash(v int32) { m.Data2.Hash = v }
func (m *TLMessagesAllStickers) GetHash() int32 { return m.Data2.Hash }

func (m *TLMessagesAllStickers) SetSets(v []*StickerSet) { m.Data2.Sets = v }
func (m *TLMessagesAllStickers) GetSets() []*StickerSet { return m.Data2.Sets }


func NewTLMessagesAllStickers() * TLMessagesAllStickers {
    return &TLMessagesAllStickers{ Data2: &Messages_AllStickers_Data{} }
}

func (m* TLMessagesAllStickers) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_allStickers))

    x.Int(m.GetHash())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetSets())))
for _, v := range m.GetSets() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLMessagesAllStickers) Decode(dbuf *DecodeBuf) error {
    m.SetHash(dbuf.Int())
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*StickerSet, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &StickerSet{}
	v2[i].Decode(dbuf)
}
m.SetSets(v2)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// ChannelParticipantsFilter <--
//  + TL_ChannelParticipantsRecent
//  + TL_ChannelParticipantsAdmins
//  + TL_ChannelParticipantsKicked
//  + TL_ChannelParticipantsBots
//  + TL_ChannelParticipantsBanned
//  + TL_ChannelParticipantsSearch
//  + TL_ChannelParticipantsContacts
//

func (m *ChannelParticipantsFilter) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_channelParticipantsRecent:
        t := m.To_ChannelParticipantsRecent()
        return t.Encode()
    case TLConstructor_CRC32_channelParticipantsAdmins:
        t := m.To_ChannelParticipantsAdmins()
        return t.Encode()
    case TLConstructor_CRC32_channelParticipantsKicked:
        t := m.To_ChannelParticipantsKicked()
        return t.Encode()
    case TLConstructor_CRC32_channelParticipantsBots:
        t := m.To_ChannelParticipantsBots()
        return t.Encode()
    case TLConstructor_CRC32_channelParticipantsBanned:
        t := m.To_ChannelParticipantsBanned()
        return t.Encode()
    case TLConstructor_CRC32_channelParticipantsSearch:
        t := m.To_ChannelParticipantsSearch()
        return t.Encode()
    case TLConstructor_CRC32_channelParticipantsContacts:
        t := m.To_ChannelParticipantsContacts()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *ChannelParticipantsFilter) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_channelParticipantsRecent:
        m2 := &TLChannelParticipantsRecent{&ChannelParticipantsFilter_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelParticipantsAdmins:
        m2 := &TLChannelParticipantsAdmins{&ChannelParticipantsFilter_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelParticipantsKicked:
        m2 := &TLChannelParticipantsKicked{&ChannelParticipantsFilter_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelParticipantsBots:
        m2 := &TLChannelParticipantsBots{&ChannelParticipantsFilter_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelParticipantsBanned:
        m2 := &TLChannelParticipantsBanned{&ChannelParticipantsFilter_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelParticipantsSearch:
        m2 := &TLChannelParticipantsSearch{&ChannelParticipantsFilter_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelParticipantsContacts:
        m2 := &TLChannelParticipantsContacts{&ChannelParticipantsFilter_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// channelParticipantsRecent#de3f3c79 = ChannelParticipantsFilter;
func (m *ChannelParticipantsFilter) To_ChannelParticipantsRecent() *TLChannelParticipantsRecent {
    return &TLChannelParticipantsRecent{
        Data2: m.Data2,
    }
}

// channelParticipantsAdmins#b4608969 = ChannelParticipantsFilter;
func (m *ChannelParticipantsFilter) To_ChannelParticipantsAdmins() *TLChannelParticipantsAdmins {
    return &TLChannelParticipantsAdmins{
        Data2: m.Data2,
    }
}

// channelParticipantsKicked#a3b54985 q:string = ChannelParticipantsFilter;
func (m *ChannelParticipantsFilter) To_ChannelParticipantsKicked() *TLChannelParticipantsKicked {
    return &TLChannelParticipantsKicked{
        Data2: m.Data2,
    }
}

// channelParticipantsBots#b0d1865b = ChannelParticipantsFilter;
func (m *ChannelParticipantsFilter) To_ChannelParticipantsBots() *TLChannelParticipantsBots {
    return &TLChannelParticipantsBots{
        Data2: m.Data2,
    }
}

// channelParticipantsBanned#1427a5e1 q:string = ChannelParticipantsFilter;
func (m *ChannelParticipantsFilter) To_ChannelParticipantsBanned() *TLChannelParticipantsBanned {
    return &TLChannelParticipantsBanned{
        Data2: m.Data2,
    }
}

// channelParticipantsSearch#656ac4b q:string = ChannelParticipantsFilter;
func (m *ChannelParticipantsFilter) To_ChannelParticipantsSearch() *TLChannelParticipantsSearch {
    return &TLChannelParticipantsSearch{
        Data2: m.Data2,
    }
}

// channelParticipantsContacts#bb6ae88d q:string = ChannelParticipantsFilter;
func (m *ChannelParticipantsFilter) To_ChannelParticipantsContacts() *TLChannelParticipantsContacts {
    return &TLChannelParticipantsContacts{
        Data2: m.Data2,
    }
}



// channelParticipantsRecent#de3f3c79 = ChannelParticipantsFilter;
func (m *TLChannelParticipantsRecent) To_ChannelParticipantsFilter() *ChannelParticipantsFilter {
    return &ChannelParticipantsFilter{
        Constructor: TLConstructor_CRC32_channelParticipantsRecent,
        Data2: m.Data2,
    }
}



func NewTLChannelParticipantsRecent() * TLChannelParticipantsRecent {
    return &TLChannelParticipantsRecent{ Data2: &ChannelParticipantsFilter_Data{} }
}

func (m* TLChannelParticipantsRecent) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelParticipantsRecent))


    return x.buf
}

func (m* TLChannelParticipantsRecent) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// channelParticipantsAdmins#b4608969 = ChannelParticipantsFilter;
func (m *TLChannelParticipantsAdmins) To_ChannelParticipantsFilter() *ChannelParticipantsFilter {
    return &ChannelParticipantsFilter{
        Constructor: TLConstructor_CRC32_channelParticipantsAdmins,
        Data2: m.Data2,
    }
}



func NewTLChannelParticipantsAdmins() * TLChannelParticipantsAdmins {
    return &TLChannelParticipantsAdmins{ Data2: &ChannelParticipantsFilter_Data{} }
}

func (m* TLChannelParticipantsAdmins) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelParticipantsAdmins))


    return x.buf
}

func (m* TLChannelParticipantsAdmins) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// channelParticipantsKicked#a3b54985 q:string = ChannelParticipantsFilter;
func (m *TLChannelParticipantsKicked) To_ChannelParticipantsFilter() *ChannelParticipantsFilter {
    return &ChannelParticipantsFilter{
        Constructor: TLConstructor_CRC32_channelParticipantsKicked,
        Data2: m.Data2,
    }
}


func (m *TLChannelParticipantsKicked) SetQ(v string) { m.Data2.Q = v }
func (m *TLChannelParticipantsKicked) GetQ() string { return m.Data2.Q }


func NewTLChannelParticipantsKicked() * TLChannelParticipantsKicked {
    return &TLChannelParticipantsKicked{ Data2: &ChannelParticipantsFilter_Data{} }
}

func (m* TLChannelParticipantsKicked) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelParticipantsKicked))

    x.String(m.GetQ())

    return x.buf
}

func (m* TLChannelParticipantsKicked) Decode(dbuf *DecodeBuf) error {
    m.SetQ(dbuf.String())

    return dbuf.err
}
// channelParticipantsBots#b0d1865b = ChannelParticipantsFilter;
func (m *TLChannelParticipantsBots) To_ChannelParticipantsFilter() *ChannelParticipantsFilter {
    return &ChannelParticipantsFilter{
        Constructor: TLConstructor_CRC32_channelParticipantsBots,
        Data2: m.Data2,
    }
}



func NewTLChannelParticipantsBots() * TLChannelParticipantsBots {
    return &TLChannelParticipantsBots{ Data2: &ChannelParticipantsFilter_Data{} }
}

func (m* TLChannelParticipantsBots) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelParticipantsBots))


    return x.buf
}

func (m* TLChannelParticipantsBots) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// channelParticipantsBanned#1427a5e1 q:string = ChannelParticipantsFilter;
func (m *TLChannelParticipantsBanned) To_ChannelParticipantsFilter() *ChannelParticipantsFilter {
    return &ChannelParticipantsFilter{
        Constructor: TLConstructor_CRC32_channelParticipantsBanned,
        Data2: m.Data2,
    }
}


func (m *TLChannelParticipantsBanned) SetQ(v string) { m.Data2.Q = v }
func (m *TLChannelParticipantsBanned) GetQ() string { return m.Data2.Q }


func NewTLChannelParticipantsBanned() * TLChannelParticipantsBanned {
    return &TLChannelParticipantsBanned{ Data2: &ChannelParticipantsFilter_Data{} }
}

func (m* TLChannelParticipantsBanned) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelParticipantsBanned))

    x.String(m.GetQ())

    return x.buf
}

func (m* TLChannelParticipantsBanned) Decode(dbuf *DecodeBuf) error {
    m.SetQ(dbuf.String())

    return dbuf.err
}
// channelParticipantsSearch#656ac4b q:string = ChannelParticipantsFilter;
func (m *TLChannelParticipantsSearch) To_ChannelParticipantsFilter() *ChannelParticipantsFilter {
    return &ChannelParticipantsFilter{
        Constructor: TLConstructor_CRC32_channelParticipantsSearch,
        Data2: m.Data2,
    }
}


func (m *TLChannelParticipantsSearch) SetQ(v string) { m.Data2.Q = v }
func (m *TLChannelParticipantsSearch) GetQ() string { return m.Data2.Q }


func NewTLChannelParticipantsSearch() * TLChannelParticipantsSearch {
    return &TLChannelParticipantsSearch{ Data2: &ChannelParticipantsFilter_Data{} }
}

func (m* TLChannelParticipantsSearch) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelParticipantsSearch))

    x.String(m.GetQ())

    return x.buf
}

func (m* TLChannelParticipantsSearch) Decode(dbuf *DecodeBuf) error {
    m.SetQ(dbuf.String())

    return dbuf.err
}
// channelParticipantsContacts#bb6ae88d q:string = ChannelParticipantsFilter;
func (m *TLChannelParticipantsContacts) To_ChannelParticipantsFilter() *ChannelParticipantsFilter {
    return &ChannelParticipantsFilter{
        Constructor: TLConstructor_CRC32_channelParticipantsContacts,
        Data2: m.Data2,
    }
}


func (m *TLChannelParticipantsContacts) SetQ(v string) { m.Data2.Q = v }
func (m *TLChannelParticipantsContacts) GetQ() string { return m.Data2.Q }


func NewTLChannelParticipantsContacts() * TLChannelParticipantsContacts {
    return &TLChannelParticipantsContacts{ Data2: &ChannelParticipantsFilter_Data{} }
}

func (m* TLChannelParticipantsContacts) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelParticipantsContacts))

    x.String(m.GetQ())

    return x.buf
}

func (m* TLChannelParticipantsContacts) Decode(dbuf *DecodeBuf) error {
    m.SetQ(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// DraftMessage <--
//  + TL_DraftMessageEmpty
//  + TL_DraftMessage
//  + TL_DraftMessageEmpty114
//

func (m *DraftMessage) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_draftMessageEmpty:
        t := m.To_DraftMessageEmpty()
        return t.Encode()
    case TLConstructor_CRC32_draftMessage:
        t := m.To_DraftMessage()
        return t.Encode()
    case TLConstructor_CRC32_draftMessageEmpty114:
        t := m.To_DraftMessageEmpty114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *DraftMessage) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_draftMessageEmpty:
        m2 := &TLDraftMessageEmpty{&DraftMessage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_draftMessage:
        m2 := &TLDraftMessage{&DraftMessage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_draftMessageEmpty114:
        m2 := &TLDraftMessageEmpty114{&DraftMessage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// draftMessageEmpty#ba4baec5 = DraftMessage;
func (m *DraftMessage) To_DraftMessageEmpty() *TLDraftMessageEmpty {
    return &TLDraftMessageEmpty{
        Data2: m.Data2,
    }
}

// draftMessage#fd8e711f flags:# no_webpage:flags.1?true reply_to_msg_id:flags.0?int message:string entities:flags.3?Vector<MessageEntity> date:int = DraftMessage;
func (m *DraftMessage) To_DraftMessage() *TLDraftMessage {
    return &TLDraftMessage{
        Data2: m.Data2,
    }
}

// draftMessageEmpty#1b0c841a flags:# date:flags.0?int = DraftMessage;
func (m *DraftMessage) To_DraftMessageEmpty114() *TLDraftMessageEmpty114 {
    return &TLDraftMessageEmpty114{
        Data2: m.Data2,
    }
}



// draftMessageEmpty#ba4baec5 = DraftMessage;
func (m *TLDraftMessageEmpty) To_DraftMessage() *DraftMessage {
    return &DraftMessage{
        Constructor: TLConstructor_CRC32_draftMessageEmpty,
        Data2: m.Data2,
    }
}



func NewTLDraftMessageEmpty() * TLDraftMessageEmpty {
    return &TLDraftMessageEmpty{ Data2: &DraftMessage_Data{} }
}

func (m* TLDraftMessageEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_draftMessageEmpty))


    return x.buf
}

func (m* TLDraftMessageEmpty) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// draftMessage#fd8e711f flags:# no_webpage:flags.1?true reply_to_msg_id:flags.0?int message:string entities:flags.3?Vector<MessageEntity> date:int = DraftMessage;
func (m *TLDraftMessage) To_DraftMessage() *DraftMessage {
    return &DraftMessage{
        Constructor: TLConstructor_CRC32_draftMessage,
        Data2: m.Data2,
    }
}


func (m *TLDraftMessage) SetNoWebpage(v bool) { m.Data2.NoWebpage = v }
func (m *TLDraftMessage) GetNoWebpage() bool { return m.Data2.NoWebpage }

func (m *TLDraftMessage) SetReplyToMsgId(v int32) { m.Data2.ReplyToMsgId = v }
func (m *TLDraftMessage) GetReplyToMsgId() int32 { return m.Data2.ReplyToMsgId }

func (m *TLDraftMessage) SetMessage(v string) { m.Data2.Message = v }
func (m *TLDraftMessage) GetMessage() string { return m.Data2.Message }

func (m *TLDraftMessage) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLDraftMessage) GetEntities() []*MessageEntity { return m.Data2.Entities }

func (m *TLDraftMessage) SetDate(v int32) { m.Data2.Date = v }
func (m *TLDraftMessage) GetDate() int32 { return m.Data2.Date }


func NewTLDraftMessage() * TLDraftMessage {
    return &TLDraftMessage{ Data2: &DraftMessage_Data{} }
}

func (m* TLDraftMessage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_draftMessage))

    // flags
    var flags uint32 = 0
    if m.GetNoWebpage() == true { flags |= 1 << 1 }
    if m.GetReplyToMsgId() != 0 { flags |= 1 << 0 }
    if m.GetEntities() != nil { flags |= 1 << 3 }
	x.UInt(flags)

    
    if (flags & (1 << 0)) != 0 { x.Int(m.GetReplyToMsgId()) }
    x.String(m.GetMessage())
    if (flags & (1 << 3)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetEntities())))
for _, v := range m.GetEntities() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}
    x.Int(m.GetDate())

    return x.buf
}

func (m* TLDraftMessage) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 1)) != 0 { m.SetNoWebpage(true) }
    if (flags & (1 << 0)) != 0 { m.SetReplyToMsgId(dbuf.Int()) }
    m.SetMessage(dbuf.String())
    if (flags & (1 << 3)) != 0 {
 c5 := dbuf.Int()
if c5 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 5, c5)
	return dbuf.err
}
l5 := dbuf.Int()
v5 := make([]*MessageEntity, l5)
for i := int32(0); i < l5; i++ {
	v5[i] = &MessageEntity{}
	v5[i].Decode(dbuf)
}
m.SetEntities(v5)
 
}
    m.SetDate(dbuf.Int())

    return dbuf.err
}
// draftMessageEmpty#1b0c841a flags:# date:flags.0?int = DraftMessage;
func (m *TLDraftMessageEmpty114) To_DraftMessage() *DraftMessage {
    return &DraftMessage{
        Constructor: TLConstructor_CRC32_draftMessageEmpty114,
        Data2: m.Data2,
    }
}


func (m *TLDraftMessageEmpty114) SetDate(v int32) { m.Data2.Date = v }
func (m *TLDraftMessageEmpty114) GetDate() int32 { return m.Data2.Date }


func NewTLDraftMessageEmpty114() * TLDraftMessageEmpty114 {
    return &TLDraftMessageEmpty114{ Data2: &DraftMessage_Data{} }
}

func (m* TLDraftMessageEmpty114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_draftMessageEmpty114))

    // flags
    var flags uint32 = 0
    if m.GetDate() != 0 { flags |= 1 << 0 }
	x.UInt(flags)

    if (flags & (1 << 0)) != 0 { x.Int(m.GetDate()) }

    return x.buf
}

func (m* TLDraftMessageEmpty114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetDate(dbuf.Int()) }

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Payments_SavedInfo <--
//  + TL_PaymentsSavedInfo
//

func (m *Payments_SavedInfo) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_payments_savedInfo:
        t := m.To_PaymentsSavedInfo()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Payments_SavedInfo) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_payments_savedInfo:
        m2 := &TLPaymentsSavedInfo{&Payments_SavedInfo_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// payments.savedInfo#fb8fe43c flags:# has_saved_credentials:flags.1?true saved_info:flags.0?PaymentRequestedInfo = payments.SavedInfo;
func (m *Payments_SavedInfo) To_PaymentsSavedInfo() *TLPaymentsSavedInfo {
    return &TLPaymentsSavedInfo{
        Data2: m.Data2,
    }
}



// payments.savedInfo#fb8fe43c flags:# has_saved_credentials:flags.1?true saved_info:flags.0?PaymentRequestedInfo = payments.SavedInfo;
func (m *TLPaymentsSavedInfo) To_Payments_SavedInfo() *Payments_SavedInfo {
    return &Payments_SavedInfo{
        Constructor: TLConstructor_CRC32_payments_savedInfo,
        Data2: m.Data2,
    }
}


func (m *TLPaymentsSavedInfo) SetHasSavedCredentials(v bool) { m.Data2.HasSavedCredentials = v }
func (m *TLPaymentsSavedInfo) GetHasSavedCredentials() bool { return m.Data2.HasSavedCredentials }

func (m *TLPaymentsSavedInfo) SetSavedInfo(v *PaymentRequestedInfo) { m.Data2.SavedInfo = v }
func (m *TLPaymentsSavedInfo) GetSavedInfo() *PaymentRequestedInfo { return m.Data2.SavedInfo }


func NewTLPaymentsSavedInfo() * TLPaymentsSavedInfo {
    return &TLPaymentsSavedInfo{ Data2: &Payments_SavedInfo_Data{} }
}

func (m* TLPaymentsSavedInfo) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_payments_savedInfo))

    // flags
    var flags uint32 = 0
    if m.GetHasSavedCredentials() == true { flags |= 1 << 1 }
    if m.GetSavedInfo() != nil { flags |= 1 << 0 }
	x.UInt(flags)

    
    if (flags & (1 << 0)) != 0 { x.Bytes(m.GetSavedInfo().Encode()) }

    return x.buf
}

func (m* TLPaymentsSavedInfo) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 1)) != 0 { m.SetHasSavedCredentials(true) }
    if (flags & (1 << 0)) != 0 {
 m3 := &PaymentRequestedInfo{}
    m3.Decode(dbuf)
    m.SetSavedInfo(m3) 
}

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// SecureData <--
//  + TL_SecureData
//

func (m *SecureData) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_secureData:
        t := m.To_SecureData()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *SecureData) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_secureData:
        m2 := &TLSecureData{&SecureData_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// secureData#8aeabec3 data:bytes data_hash:bytes secret:bytes = SecureData;
func (m *SecureData) To_SecureData() *TLSecureData {
    return &TLSecureData{
        Data2: m.Data2,
    }
}



// secureData#8aeabec3 data:bytes data_hash:bytes secret:bytes = SecureData;
func (m *TLSecureData) To_SecureData() *SecureData {
    return &SecureData{
        Constructor: TLConstructor_CRC32_secureData,
        Data2: m.Data2,
    }
}


func (m *TLSecureData) SetData(v []byte) { m.Data2.Data = v }
func (m *TLSecureData) GetData() []byte { return m.Data2.Data }

func (m *TLSecureData) SetDataHash(v []byte) { m.Data2.DataHash = v }
func (m *TLSecureData) GetDataHash() []byte { return m.Data2.DataHash }

func (m *TLSecureData) SetSecret(v []byte) { m.Data2.Secret = v }
func (m *TLSecureData) GetSecret() []byte { return m.Data2.Secret }


func NewTLSecureData() * TLSecureData {
    return &TLSecureData{ Data2: &SecureData_Data{} }
}

func (m* TLSecureData) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_secureData))

    x.StringBytes(m.GetData())
    x.StringBytes(m.GetDataHash())
    x.StringBytes(m.GetSecret())

    return x.buf
}

func (m* TLSecureData) Decode(dbuf *DecodeBuf) error {
    m.SetData(dbuf.StringBytes())
    m.SetDataHash(dbuf.StringBytes())
    m.SetSecret(dbuf.StringBytes())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// UrlAuthResult <--
//  + TL_UrlAuthResultRequest
//  + TL_UrlAuthResultAccepted
//  + TL_UrlAuthResultDefault
//

func (m *UrlAuthResult) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_urlAuthResultRequest:
        t := m.To_UrlAuthResultRequest()
        return t.Encode()
    case TLConstructor_CRC32_urlAuthResultAccepted:
        t := m.To_UrlAuthResultAccepted()
        return t.Encode()
    case TLConstructor_CRC32_urlAuthResultDefault:
        t := m.To_UrlAuthResultDefault()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *UrlAuthResult) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_urlAuthResultRequest:
        m2 := &TLUrlAuthResultRequest{&UrlAuthResult_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_urlAuthResultAccepted:
        m2 := &TLUrlAuthResultAccepted{&UrlAuthResult_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_urlAuthResultDefault:
        m2 := &TLUrlAuthResultDefault{&UrlAuthResult_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// urlAuthResultRequest#92d33a0e flags:# request_write_access:flags.0?true bot:User domain:string = UrlAuthResult;
func (m *UrlAuthResult) To_UrlAuthResultRequest() *TLUrlAuthResultRequest {
    return &TLUrlAuthResultRequest{
        Data2: m.Data2,
    }
}

// urlAuthResultAccepted#8f8c0e4e url:string = UrlAuthResult;
func (m *UrlAuthResult) To_UrlAuthResultAccepted() *TLUrlAuthResultAccepted {
    return &TLUrlAuthResultAccepted{
        Data2: m.Data2,
    }
}

// urlAuthResultDefault#a9d6db1f = UrlAuthResult;
func (m *UrlAuthResult) To_UrlAuthResultDefault() *TLUrlAuthResultDefault {
    return &TLUrlAuthResultDefault{
        Data2: m.Data2,
    }
}



// urlAuthResultRequest#92d33a0e flags:# request_write_access:flags.0?true bot:User domain:string = UrlAuthResult;
func (m *TLUrlAuthResultRequest) To_UrlAuthResult() *UrlAuthResult {
    return &UrlAuthResult{
        Constructor: TLConstructor_CRC32_urlAuthResultRequest,
        Data2: m.Data2,
    }
}


func (m *TLUrlAuthResultRequest) SetRequestWriteAccess(v bool) { m.Data2.RequestWriteAccess = v }
func (m *TLUrlAuthResultRequest) GetRequestWriteAccess() bool { return m.Data2.RequestWriteAccess }

func (m *TLUrlAuthResultRequest) SetBot(v *User) { m.Data2.Bot = v }
func (m *TLUrlAuthResultRequest) GetBot() *User { return m.Data2.Bot }

func (m *TLUrlAuthResultRequest) SetDomain(v string) { m.Data2.Domain = v }
func (m *TLUrlAuthResultRequest) GetDomain() string { return m.Data2.Domain }


func NewTLUrlAuthResultRequest() * TLUrlAuthResultRequest {
    return &TLUrlAuthResultRequest{ Data2: &UrlAuthResult_Data{} }
}

func (m* TLUrlAuthResultRequest) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_urlAuthResultRequest))

    // flags
    var flags uint32 = 0
    if m.GetRequestWriteAccess() == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Bytes(m.GetBot().Encode())
    x.String(m.GetDomain())

    return x.buf
}

func (m* TLUrlAuthResultRequest) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetRequestWriteAccess(true) }
    m3 := &User{}
    m3.Decode(dbuf)
    m.SetBot(m3)
    m.SetDomain(dbuf.String())

    return dbuf.err
}
// urlAuthResultAccepted#8f8c0e4e url:string = UrlAuthResult;
func (m *TLUrlAuthResultAccepted) To_UrlAuthResult() *UrlAuthResult {
    return &UrlAuthResult{
        Constructor: TLConstructor_CRC32_urlAuthResultAccepted,
        Data2: m.Data2,
    }
}


func (m *TLUrlAuthResultAccepted) SetUrl(v string) { m.Data2.Url = v }
func (m *TLUrlAuthResultAccepted) GetUrl() string { return m.Data2.Url }


func NewTLUrlAuthResultAccepted() * TLUrlAuthResultAccepted {
    return &TLUrlAuthResultAccepted{ Data2: &UrlAuthResult_Data{} }
}

func (m* TLUrlAuthResultAccepted) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_urlAuthResultAccepted))

    x.String(m.GetUrl())

    return x.buf
}

func (m* TLUrlAuthResultAccepted) Decode(dbuf *DecodeBuf) error {
    m.SetUrl(dbuf.String())

    return dbuf.err
}
// urlAuthResultDefault#a9d6db1f = UrlAuthResult;
func (m *TLUrlAuthResultDefault) To_UrlAuthResult() *UrlAuthResult {
    return &UrlAuthResult{
        Constructor: TLConstructor_CRC32_urlAuthResultDefault,
        Data2: m.Data2,
    }
}



func NewTLUrlAuthResultDefault() * TLUrlAuthResultDefault {
    return &TLUrlAuthResultDefault{ Data2: &UrlAuthResult_Data{} }
}

func (m* TLUrlAuthResultDefault) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_urlAuthResultDefault))


    return x.buf
}

func (m* TLUrlAuthResultDefault) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// PeerLocated <--
//  + TL_PeerLocated
//  + TL_PeerSelfLocated
//

func (m *PeerLocated) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_peerLocated:
        t := m.To_PeerLocated()
        return t.Encode()
    case TLConstructor_CRC32_peerSelfLocated:
        t := m.To_PeerSelfLocated()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *PeerLocated) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_peerLocated:
        m2 := &TLPeerLocated{&PeerLocated_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_peerSelfLocated:
        m2 := &TLPeerSelfLocated{&PeerLocated_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// peerLocated#ca461b5d peer:Peer expires:int distance:int = PeerLocated;
func (m *PeerLocated) To_PeerLocated() *TLPeerLocated {
    return &TLPeerLocated{
        Data2: m.Data2,
    }
}

// peerSelfLocated#f8ec284b expires:int = PeerLocated;
func (m *PeerLocated) To_PeerSelfLocated() *TLPeerSelfLocated {
    return &TLPeerSelfLocated{
        Data2: m.Data2,
    }
}



// peerLocated#ca461b5d peer:Peer expires:int distance:int = PeerLocated;
func (m *TLPeerLocated) To_PeerLocated() *PeerLocated {
    return &PeerLocated{
        Constructor: TLConstructor_CRC32_peerLocated,
        Data2: m.Data2,
    }
}


func (m *TLPeerLocated) SetPeer(v *Peer) { m.Data2.Peer = v }
func (m *TLPeerLocated) GetPeer() *Peer { return m.Data2.Peer }

func (m *TLPeerLocated) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLPeerLocated) GetExpires() int32 { return m.Data2.Expires }

func (m *TLPeerLocated) SetDistance(v int32) { m.Data2.Distance = v }
func (m *TLPeerLocated) GetDistance() int32 { return m.Data2.Distance }


func NewTLPeerLocated() * TLPeerLocated {
    return &TLPeerLocated{ Data2: &PeerLocated_Data{} }
}

func (m* TLPeerLocated) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_peerLocated))

    x.Bytes(m.GetPeer().Encode())
    x.Int(m.GetExpires())
    x.Int(m.GetDistance())

    return x.buf
}

func (m* TLPeerLocated) Decode(dbuf *DecodeBuf) error {
    m1 := &Peer{}
    m1.Decode(dbuf)
    m.SetPeer(m1)
    m.SetExpires(dbuf.Int())
    m.SetDistance(dbuf.Int())

    return dbuf.err
}
// peerSelfLocated#f8ec284b expires:int = PeerLocated;
func (m *TLPeerSelfLocated) To_PeerLocated() *PeerLocated {
    return &PeerLocated{
        Constructor: TLConstructor_CRC32_peerSelfLocated,
        Data2: m.Data2,
    }
}


func (m *TLPeerSelfLocated) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLPeerSelfLocated) GetExpires() int32 { return m.Data2.Expires }


func NewTLPeerSelfLocated() * TLPeerSelfLocated {
    return &TLPeerSelfLocated{ Data2: &PeerLocated_Data{} }
}

func (m* TLPeerSelfLocated) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_peerSelfLocated))

    x.Int(m.GetExpires())

    return x.buf
}

func (m* TLPeerSelfLocated) Decode(dbuf *DecodeBuf) error {
    m.SetExpires(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Stats_MegagroupStats <--
//  + TL_StatsMegagroupStats
//

func (m *Stats_MegagroupStats) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_stats_megagroupStats:
        t := m.To_StatsMegagroupStats()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Stats_MegagroupStats) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_stats_megagroupStats:
        m2 := &TLStatsMegagroupStats{&Stats_MegagroupStats_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// stats.megagroupStats#ef7ff916 period:StatsDateRangeDays members:StatsAbsValueAndPrev messages:StatsAbsValueAndPrev viewers:StatsAbsValueAndPrev posters:StatsAbsValueAndPrev growth_graph:StatsGraph members_graph:StatsGraph new_members_by_source_graph:StatsGraph languages_graph:StatsGraph messages_graph:StatsGraph actions_graph:StatsGraph top_hours_graph:StatsGraph weekdays_graph:StatsGraph top_posters:Vector<StatsGroupTopPoster> top_admins:Vector<StatsGroupTopAdmin> top_inviters:Vector<StatsGroupTopInviter> users:Vector<User> = stats.MegagroupStats;
func (m *Stats_MegagroupStats) To_StatsMegagroupStats() *TLStatsMegagroupStats {
    return &TLStatsMegagroupStats{
        Data2: m.Data2,
    }
}



// stats.megagroupStats#ef7ff916 period:StatsDateRangeDays members:StatsAbsValueAndPrev messages:StatsAbsValueAndPrev viewers:StatsAbsValueAndPrev posters:StatsAbsValueAndPrev growth_graph:StatsGraph members_graph:StatsGraph new_members_by_source_graph:StatsGraph languages_graph:StatsGraph messages_graph:StatsGraph actions_graph:StatsGraph top_hours_graph:StatsGraph weekdays_graph:StatsGraph top_posters:Vector<StatsGroupTopPoster> top_admins:Vector<StatsGroupTopAdmin> top_inviters:Vector<StatsGroupTopInviter> users:Vector<User> = stats.MegagroupStats;
func (m *TLStatsMegagroupStats) To_Stats_MegagroupStats() *Stats_MegagroupStats {
    return &Stats_MegagroupStats{
        Constructor: TLConstructor_CRC32_stats_megagroupStats,
        Data2: m.Data2,
    }
}


func (m *TLStatsMegagroupStats) SetPeriod(v *StatsDateRangeDays) { m.Data2.Period = v }
func (m *TLStatsMegagroupStats) GetPeriod() *StatsDateRangeDays { return m.Data2.Period }

func (m *TLStatsMegagroupStats) SetMembers(v *StatsAbsValueAndPrev) { m.Data2.Members = v }
func (m *TLStatsMegagroupStats) GetMembers() *StatsAbsValueAndPrev { return m.Data2.Members }

func (m *TLStatsMegagroupStats) SetMessages(v *StatsAbsValueAndPrev) { m.Data2.Messages = v }
func (m *TLStatsMegagroupStats) GetMessages() *StatsAbsValueAndPrev { return m.Data2.Messages }

func (m *TLStatsMegagroupStats) SetViewers(v *StatsAbsValueAndPrev) { m.Data2.Viewers = v }
func (m *TLStatsMegagroupStats) GetViewers() *StatsAbsValueAndPrev { return m.Data2.Viewers }

func (m *TLStatsMegagroupStats) SetPosters(v *StatsAbsValueAndPrev) { m.Data2.Posters = v }
func (m *TLStatsMegagroupStats) GetPosters() *StatsAbsValueAndPrev { return m.Data2.Posters }

func (m *TLStatsMegagroupStats) SetGrowthGraph(v *StatsGraph) { m.Data2.GrowthGraph = v }
func (m *TLStatsMegagroupStats) GetGrowthGraph() *StatsGraph { return m.Data2.GrowthGraph }

func (m *TLStatsMegagroupStats) SetMembersGraph(v *StatsGraph) { m.Data2.MembersGraph = v }
func (m *TLStatsMegagroupStats) GetMembersGraph() *StatsGraph { return m.Data2.MembersGraph }

func (m *TLStatsMegagroupStats) SetNewMembersBySourceGraph(v *StatsGraph) { m.Data2.NewMembersBySourceGraph = v }
func (m *TLStatsMegagroupStats) GetNewMembersBySourceGraph() *StatsGraph { return m.Data2.NewMembersBySourceGraph }

func (m *TLStatsMegagroupStats) SetLanguagesGraph(v *StatsGraph) { m.Data2.LanguagesGraph = v }
func (m *TLStatsMegagroupStats) GetLanguagesGraph() *StatsGraph { return m.Data2.LanguagesGraph }

func (m *TLStatsMegagroupStats) SetMessagesGraph(v *StatsGraph) { m.Data2.MessagesGraph = v }
func (m *TLStatsMegagroupStats) GetMessagesGraph() *StatsGraph { return m.Data2.MessagesGraph }

func (m *TLStatsMegagroupStats) SetActionsGraph(v *StatsGraph) { m.Data2.ActionsGraph = v }
func (m *TLStatsMegagroupStats) GetActionsGraph() *StatsGraph { return m.Data2.ActionsGraph }

func (m *TLStatsMegagroupStats) SetTopHoursGraph(v *StatsGraph) { m.Data2.TopHoursGraph = v }
func (m *TLStatsMegagroupStats) GetTopHoursGraph() *StatsGraph { return m.Data2.TopHoursGraph }

func (m *TLStatsMegagroupStats) SetWeekdaysGraph(v *StatsGraph) { m.Data2.WeekdaysGraph = v }
func (m *TLStatsMegagroupStats) GetWeekdaysGraph() *StatsGraph { return m.Data2.WeekdaysGraph }

func (m *TLStatsMegagroupStats) SetTopPosters(v []*StatsGroupTopPoster) { m.Data2.TopPosters = v }
func (m *TLStatsMegagroupStats) GetTopPosters() []*StatsGroupTopPoster { return m.Data2.TopPosters }

func (m *TLStatsMegagroupStats) SetTopAdmins(v []*StatsGroupTopAdmin) { m.Data2.TopAdmins = v }
func (m *TLStatsMegagroupStats) GetTopAdmins() []*StatsGroupTopAdmin { return m.Data2.TopAdmins }

func (m *TLStatsMegagroupStats) SetTopInviters(v []*StatsGroupTopInviter) { m.Data2.TopInviters = v }
func (m *TLStatsMegagroupStats) GetTopInviters() []*StatsGroupTopInviter { return m.Data2.TopInviters }

func (m *TLStatsMegagroupStats) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLStatsMegagroupStats) GetUsers() []*User { return m.Data2.Users }


func NewTLStatsMegagroupStats() * TLStatsMegagroupStats {
    return &TLStatsMegagroupStats{ Data2: &Stats_MegagroupStats_Data{} }
}

func (m* TLStatsMegagroupStats) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_stats_megagroupStats))

    x.Bytes(m.GetPeriod().Encode())
    x.Bytes(m.GetMembers().Encode())
    x.Bytes(m.GetMessages().Encode())
    x.Bytes(m.GetViewers().Encode())
    x.Bytes(m.GetPosters().Encode())
    x.Bytes(m.GetGrowthGraph().Encode())
    x.Bytes(m.GetMembersGraph().Encode())
    x.Bytes(m.GetNewMembersBySourceGraph().Encode())
    x.Bytes(m.GetLanguagesGraph().Encode())
    x.Bytes(m.GetMessagesGraph().Encode())
    x.Bytes(m.GetActionsGraph().Encode())
    x.Bytes(m.GetTopHoursGraph().Encode())
    x.Bytes(m.GetWeekdaysGraph().Encode())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetTopPosters())))
for _, v := range m.GetTopPosters() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetTopAdmins())))
for _, v := range m.GetTopAdmins() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetTopInviters())))
for _, v := range m.GetTopInviters() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLStatsMegagroupStats) Decode(dbuf *DecodeBuf) error {
    m1 := &StatsDateRangeDays{}
    m1.Decode(dbuf)
    m.SetPeriod(m1)
    m2 := &StatsAbsValueAndPrev{}
    m2.Decode(dbuf)
    m.SetMembers(m2)
    m3 := &StatsAbsValueAndPrev{}
    m3.Decode(dbuf)
    m.SetMessages(m3)
    m4 := &StatsAbsValueAndPrev{}
    m4.Decode(dbuf)
    m.SetViewers(m4)
    m5 := &StatsAbsValueAndPrev{}
    m5.Decode(dbuf)
    m.SetPosters(m5)
    m6 := &StatsGraph{}
    m6.Decode(dbuf)
    m.SetGrowthGraph(m6)
    m7 := &StatsGraph{}
    m7.Decode(dbuf)
    m.SetMembersGraph(m7)
    m8 := &StatsGraph{}
    m8.Decode(dbuf)
    m.SetNewMembersBySourceGraph(m8)
    m9 := &StatsGraph{}
    m9.Decode(dbuf)
    m.SetLanguagesGraph(m9)
    m10 := &StatsGraph{}
    m10.Decode(dbuf)
    m.SetMessagesGraph(m10)
    m11 := &StatsGraph{}
    m11.Decode(dbuf)
    m.SetActionsGraph(m11)
    m12 := &StatsGraph{}
    m12.Decode(dbuf)
    m.SetTopHoursGraph(m12)
    m13 := &StatsGraph{}
    m13.Decode(dbuf)
    m.SetWeekdaysGraph(m13)
    c14 := dbuf.Int()
if c14 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 14, c14)
	return dbuf.err
}
l14 := dbuf.Int()
v14 := make([]*StatsGroupTopPoster, l14)
for i := int32(0); i < l14; i++ {
	v14[i] = &StatsGroupTopPoster{}
	v14[i].Decode(dbuf)
}
m.SetTopPosters(v14)

    c15 := dbuf.Int()
if c15 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 15, c15)
	return dbuf.err
}
l15 := dbuf.Int()
v15 := make([]*StatsGroupTopAdmin, l15)
for i := int32(0); i < l15; i++ {
	v15[i] = &StatsGroupTopAdmin{}
	v15[i].Decode(dbuf)
}
m.SetTopAdmins(v15)

    c16 := dbuf.Int()
if c16 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 16, c16)
	return dbuf.err
}
l16 := dbuf.Int()
v16 := make([]*StatsGroupTopInviter, l16)
for i := int32(0); i < l16; i++ {
	v16[i] = &StatsGroupTopInviter{}
	v16[i].Decode(dbuf)
}
m.SetTopInviters(v16)

    c17 := dbuf.Int()
if c17 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 17, c17)
	return dbuf.err
}
l17 := dbuf.Int()
v17 := make([]*User, l17)
for i := int32(0); i < l17; i++ {
	v17[i] = &User{}
	v17[i].Decode(dbuf)
}
m.SetUsers(v17)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Help_CountryCode <--
//  + TL_HelpCountryCode
//

func (m *Help_CountryCode) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_help_countryCode:
        t := m.To_HelpCountryCode()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Help_CountryCode) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_help_countryCode:
        m2 := &TLHelpCountryCode{&Help_CountryCode_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// help.countryCode#4203c5ef flags:# country_code:string prefixes:flags.0?Vector<string> patterns:flags.1?Vector<string> = help.CountryCode;
func (m *Help_CountryCode) To_HelpCountryCode() *TLHelpCountryCode {
    return &TLHelpCountryCode{
        Data2: m.Data2,
    }
}



// help.countryCode#4203c5ef flags:# country_code:string prefixes:flags.0?Vector<string> patterns:flags.1?Vector<string> = help.CountryCode;
func (m *TLHelpCountryCode) To_Help_CountryCode() *Help_CountryCode {
    return &Help_CountryCode{
        Constructor: TLConstructor_CRC32_help_countryCode,
        Data2: m.Data2,
    }
}


func (m *TLHelpCountryCode) SetCountryCode(v string) { m.Data2.CountryCode = v }
func (m *TLHelpCountryCode) GetCountryCode() string { return m.Data2.CountryCode }

func (m *TLHelpCountryCode) SetPrefixes(v []string) { m.Data2.Prefixes = v }
func (m *TLHelpCountryCode) GetPrefixes() []string { return m.Data2.Prefixes }

func (m *TLHelpCountryCode) SetPatterns(v []string) { m.Data2.Patterns = v }
func (m *TLHelpCountryCode) GetPatterns() []string { return m.Data2.Patterns }


func NewTLHelpCountryCode() * TLHelpCountryCode {
    return &TLHelpCountryCode{ Data2: &Help_CountryCode_Data{} }
}

func (m* TLHelpCountryCode) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_help_countryCode))

    // flags
    var flags uint32 = 0
    if m.GetPrefixes() != nil { flags |= 1 << 0 }
    if m.GetPatterns() != nil { flags |= 1 << 1 }
	x.UInt(flags)

    x.String(m.GetCountryCode())
    if (flags & (1 << 0)) != 0 {
 x.VectorString(m.GetPrefixes())
 
}
    if (flags & (1 << 1)) != 0 {
 x.VectorString(m.GetPatterns())
 
}

    return x.buf
}

func (m* TLHelpCountryCode) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetCountryCode(dbuf.String())
    if (flags & (1 << 0)) != 0 {
 m.SetPrefixes(dbuf.VectorString()) 
}
    if (flags & (1 << 1)) != 0 {
 m.SetPatterns(dbuf.VectorString()) 
}

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// ChatPhoto <--
//  + TL_ChatPhotoEmpty
//  + TL_ChatPhoto
//  + TL_ChatPhoto114
//  + TL_ChatPhoto117
//

func (m *ChatPhoto) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_chatPhotoEmpty:
        t := m.To_ChatPhotoEmpty()
        return t.Encode()
    case TLConstructor_CRC32_chatPhoto:
        t := m.To_ChatPhoto()
        return t.Encode()
    case TLConstructor_CRC32_chatPhoto114:
        t := m.To_ChatPhoto114()
        return t.Encode()
    case TLConstructor_CRC32_chatPhoto117:
        t := m.To_ChatPhoto117()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *ChatPhoto) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_chatPhotoEmpty:
        m2 := &TLChatPhotoEmpty{&ChatPhoto_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_chatPhoto:
        m2 := &TLChatPhoto{&ChatPhoto_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_chatPhoto114:
        m2 := &TLChatPhoto114{&ChatPhoto_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_chatPhoto117:
        m2 := &TLChatPhoto117{&ChatPhoto_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// chatPhotoEmpty#37c1011c = ChatPhoto;
func (m *ChatPhoto) To_ChatPhotoEmpty() *TLChatPhotoEmpty {
    return &TLChatPhotoEmpty{
        Data2: m.Data2,
    }
}

// chatPhoto#6153276a photo_small:FileLocation photo_big:FileLocation = ChatPhoto;
func (m *ChatPhoto) To_ChatPhoto() *TLChatPhoto {
    return &TLChatPhoto{
        Data2: m.Data2,
    }
}

// chatPhoto#475cdbd5 photo_small:FileLocation photo_big:FileLocation dc_id:int = ChatPhoto;
func (m *ChatPhoto) To_ChatPhoto114() *TLChatPhoto114 {
    return &TLChatPhoto114{
        Data2: m.Data2,
    }
}

// chatPhoto#d20b9f3c flags:# has_video:flags.0?true photo_small:FileLocation photo_big:FileLocation dc_id:int = ChatPhoto;
func (m *ChatPhoto) To_ChatPhoto117() *TLChatPhoto117 {
    return &TLChatPhoto117{
        Data2: m.Data2,
    }
}



// chatPhotoEmpty#37c1011c = ChatPhoto;
func (m *TLChatPhotoEmpty) To_ChatPhoto() *ChatPhoto {
    return &ChatPhoto{
        Constructor: TLConstructor_CRC32_chatPhotoEmpty,
        Data2: m.Data2,
    }
}



func NewTLChatPhotoEmpty() * TLChatPhotoEmpty {
    return &TLChatPhotoEmpty{ Data2: &ChatPhoto_Data{} }
}

func (m* TLChatPhotoEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_chatPhotoEmpty))


    return x.buf
}

func (m* TLChatPhotoEmpty) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// chatPhoto#6153276a photo_small:FileLocation photo_big:FileLocation = ChatPhoto;
func (m *TLChatPhoto) To_ChatPhoto() *ChatPhoto {
    return &ChatPhoto{
        Constructor: TLConstructor_CRC32_chatPhoto,
        Data2: m.Data2,
    }
}


func (m *TLChatPhoto) SetPhotoSmall(v *FileLocation) { m.Data2.PhotoSmall = v }
func (m *TLChatPhoto) GetPhotoSmall() *FileLocation { return m.Data2.PhotoSmall }

func (m *TLChatPhoto) SetPhotoBig(v *FileLocation) { m.Data2.PhotoBig = v }
func (m *TLChatPhoto) GetPhotoBig() *FileLocation { return m.Data2.PhotoBig }


func NewTLChatPhoto() * TLChatPhoto {
    return &TLChatPhoto{ Data2: &ChatPhoto_Data{} }
}

func (m* TLChatPhoto) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_chatPhoto))

    x.Bytes(m.GetPhotoSmall().Encode())
    x.Bytes(m.GetPhotoBig().Encode())

    return x.buf
}

func (m* TLChatPhoto) Decode(dbuf *DecodeBuf) error {
    m1 := &FileLocation{}
    m1.Decode(dbuf)
    m.SetPhotoSmall(m1)
    m2 := &FileLocation{}
    m2.Decode(dbuf)
    m.SetPhotoBig(m2)

    return dbuf.err
}
// chatPhoto#475cdbd5 photo_small:FileLocation photo_big:FileLocation dc_id:int = ChatPhoto;
func (m *TLChatPhoto114) To_ChatPhoto() *ChatPhoto {
    return &ChatPhoto{
        Constructor: TLConstructor_CRC32_chatPhoto114,
        Data2: m.Data2,
    }
}


func (m *TLChatPhoto114) SetPhotoSmall(v *FileLocation) { m.Data2.PhotoSmall = v }
func (m *TLChatPhoto114) GetPhotoSmall() *FileLocation { return m.Data2.PhotoSmall }

func (m *TLChatPhoto114) SetPhotoBig(v *FileLocation) { m.Data2.PhotoBig = v }
func (m *TLChatPhoto114) GetPhotoBig() *FileLocation { return m.Data2.PhotoBig }

func (m *TLChatPhoto114) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLChatPhoto114) GetDcId() int32 { return m.Data2.DcId }


func NewTLChatPhoto114() * TLChatPhoto114 {
    return &TLChatPhoto114{ Data2: &ChatPhoto_Data{} }
}

func (m* TLChatPhoto114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_chatPhoto114))

    x.Bytes(m.GetPhotoSmall().Encode())
    x.Bytes(m.GetPhotoBig().Encode())
    x.Int(m.GetDcId())

    return x.buf
}

func (m* TLChatPhoto114) Decode(dbuf *DecodeBuf) error {
    m1 := &FileLocation{}
    m1.Decode(dbuf)
    m.SetPhotoSmall(m1)
    m2 := &FileLocation{}
    m2.Decode(dbuf)
    m.SetPhotoBig(m2)
    m.SetDcId(dbuf.Int())

    return dbuf.err
}
// chatPhoto#d20b9f3c flags:# has_video:flags.0?true photo_small:FileLocation photo_big:FileLocation dc_id:int = ChatPhoto;
func (m *TLChatPhoto117) To_ChatPhoto() *ChatPhoto {
    return &ChatPhoto{
        Constructor: TLConstructor_CRC32_chatPhoto117,
        Data2: m.Data2,
    }
}


func (m *TLChatPhoto117) SetHasVideo(v bool) { m.Data2.HasVideo = v }
func (m *TLChatPhoto117) GetHasVideo() bool { return m.Data2.HasVideo }

func (m *TLChatPhoto117) SetPhotoSmall(v *FileLocation) { m.Data2.PhotoSmall = v }
func (m *TLChatPhoto117) GetPhotoSmall() *FileLocation { return m.Data2.PhotoSmall }

func (m *TLChatPhoto117) SetPhotoBig(v *FileLocation) { m.Data2.PhotoBig = v }
func (m *TLChatPhoto117) GetPhotoBig() *FileLocation { return m.Data2.PhotoBig }

func (m *TLChatPhoto117) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLChatPhoto117) GetDcId() int32 { return m.Data2.DcId }


func NewTLChatPhoto117() * TLChatPhoto117 {
    return &TLChatPhoto117{ Data2: &ChatPhoto_Data{} }
}

func (m* TLChatPhoto117) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_chatPhoto117))

    // flags
    var flags uint32 = 0
    if m.GetHasVideo() == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Bytes(m.GetPhotoSmall().Encode())
    x.Bytes(m.GetPhotoBig().Encode())
    x.Int(m.GetDcId())

    return x.buf
}

func (m* TLChatPhoto117) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetHasVideo(true) }
    m3 := &FileLocation{}
    m3.Decode(dbuf)
    m.SetPhotoSmall(m3)
    m4 := &FileLocation{}
    m4.Decode(dbuf)
    m.SetPhotoBig(m4)
    m.SetDcId(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// WebPage <--
//  + TL_WebPageEmpty
//  + TL_WebPagePending
//  + TL_WebPage
//  + TL_WebPageNotModified
//  + TL_WebPage114
//  + TL_WebPageNotModified114
//

func (m *WebPage) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_webPageEmpty:
        t := m.To_WebPageEmpty()
        return t.Encode()
    case TLConstructor_CRC32_webPagePending:
        t := m.To_WebPagePending()
        return t.Encode()
    case TLConstructor_CRC32_webPage:
        t := m.To_WebPage()
        return t.Encode()
    case TLConstructor_CRC32_webPageNotModified:
        t := m.To_WebPageNotModified()
        return t.Encode()
    case TLConstructor_CRC32_webPage114:
        t := m.To_WebPage114()
        return t.Encode()
    case TLConstructor_CRC32_webPageNotModified114:
        t := m.To_WebPageNotModified114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *WebPage) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_webPageEmpty:
        m2 := &TLWebPageEmpty{&WebPage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_webPagePending:
        m2 := &TLWebPagePending{&WebPage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_webPage:
        m2 := &TLWebPage{&WebPage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_webPageNotModified:
        m2 := &TLWebPageNotModified{&WebPage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_webPage114:
        m2 := &TLWebPage114{&WebPage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_webPageNotModified114:
        m2 := &TLWebPageNotModified114{&WebPage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// webPageEmpty#eb1477e8 id:long = WebPage;
func (m *WebPage) To_WebPageEmpty() *TLWebPageEmpty {
    return &TLWebPageEmpty{
        Data2: m.Data2,
    }
}

// webPagePending#c586da1c id:long date:int = WebPage;
func (m *WebPage) To_WebPagePending() *TLWebPagePending {
    return &TLWebPagePending{
        Data2: m.Data2,
    }
}

// webPage#5f07b4bc flags:# id:long url:string display_url:string hash:int type:flags.0?string site_name:flags.1?string title:flags.2?string description:flags.3?string photo:flags.4?Photo embed_url:flags.5?string embed_type:flags.5?string embed_width:flags.6?int embed_height:flags.6?int duration:flags.7?int author:flags.8?string document:flags.9?Document cached_page:flags.10?Page = WebPage;
func (m *WebPage) To_WebPage() *TLWebPage {
    return &TLWebPage{
        Data2: m.Data2,
    }
}

// webPageNotModified#85849473 = WebPage;
func (m *WebPage) To_WebPageNotModified() *TLWebPageNotModified {
    return &TLWebPageNotModified{
        Data2: m.Data2,
    }
}

// webPage#e89c45b2 flags:# id:long url:string display_url:string hash:int type:flags.0?string site_name:flags.1?string title:flags.2?string description:flags.3?string photo:flags.4?Photo embed_url:flags.5?string embed_type:flags.5?string embed_width:flags.6?int embed_height:flags.6?int duration:flags.7?int author:flags.8?string document:flags.9?Document cached_page:flags.10?Page attributes:flags.12?Vector<WebPageAttribute> = WebPage;
func (m *WebPage) To_WebPage114() *TLWebPage114 {
    return &TLWebPage114{
        Data2: m.Data2,
    }
}

// webPageNotModified#7311ca11 flags:# cached_page_views:flags.0?int = WebPage;
func (m *WebPage) To_WebPageNotModified114() *TLWebPageNotModified114 {
    return &TLWebPageNotModified114{
        Data2: m.Data2,
    }
}



// webPageEmpty#eb1477e8 id:long = WebPage;
func (m *TLWebPageEmpty) To_WebPage() *WebPage {
    return &WebPage{
        Constructor: TLConstructor_CRC32_webPageEmpty,
        Data2: m.Data2,
    }
}


func (m *TLWebPageEmpty) SetId(v int64) { m.Data2.Id = v }
func (m *TLWebPageEmpty) GetId() int64 { return m.Data2.Id }


func NewTLWebPageEmpty() * TLWebPageEmpty {
    return &TLWebPageEmpty{ Data2: &WebPage_Data{} }
}

func (m* TLWebPageEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_webPageEmpty))

    x.Long(m.GetId())

    return x.buf
}

func (m* TLWebPageEmpty) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())

    return dbuf.err
}
// webPagePending#c586da1c id:long date:int = WebPage;
func (m *TLWebPagePending) To_WebPage() *WebPage {
    return &WebPage{
        Constructor: TLConstructor_CRC32_webPagePending,
        Data2: m.Data2,
    }
}


func (m *TLWebPagePending) SetId(v int64) { m.Data2.Id = v }
func (m *TLWebPagePending) GetId() int64 { return m.Data2.Id }

func (m *TLWebPagePending) SetDate(v int32) { m.Data2.Date = v }
func (m *TLWebPagePending) GetDate() int32 { return m.Data2.Date }


func NewTLWebPagePending() * TLWebPagePending {
    return &TLWebPagePending{ Data2: &WebPage_Data{} }
}

func (m* TLWebPagePending) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_webPagePending))

    x.Long(m.GetId())
    x.Int(m.GetDate())

    return x.buf
}

func (m* TLWebPagePending) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetDate(dbuf.Int())

    return dbuf.err
}
// webPage#5f07b4bc flags:# id:long url:string display_url:string hash:int type:flags.0?string site_name:flags.1?string title:flags.2?string description:flags.3?string photo:flags.4?Photo embed_url:flags.5?string embed_type:flags.5?string embed_width:flags.6?int embed_height:flags.6?int duration:flags.7?int author:flags.8?string document:flags.9?Document cached_page:flags.10?Page = WebPage;
func (m *TLWebPage) To_WebPage() *WebPage {
    return &WebPage{
        Constructor: TLConstructor_CRC32_webPage,
        Data2: m.Data2,
    }
}


func (m *TLWebPage) SetId(v int64) { m.Data2.Id = v }
func (m *TLWebPage) GetId() int64 { return m.Data2.Id }

func (m *TLWebPage) SetUrl(v string) { m.Data2.Url = v }
func (m *TLWebPage) GetUrl() string { return m.Data2.Url }

func (m *TLWebPage) SetDisplayUrl(v string) { m.Data2.DisplayUrl = v }
func (m *TLWebPage) GetDisplayUrl() string { return m.Data2.DisplayUrl }

func (m *TLWebPage) SetHash(v int32) { m.Data2.Hash = v }
func (m *TLWebPage) GetHash() int32 { return m.Data2.Hash }

func (m *TLWebPage) SetType(v string) { m.Data2.Type = v }
func (m *TLWebPage) GetType() string { return m.Data2.Type }

func (m *TLWebPage) SetSiteName(v string) { m.Data2.SiteName = v }
func (m *TLWebPage) GetSiteName() string { return m.Data2.SiteName }

func (m *TLWebPage) SetTitle(v string) { m.Data2.Title = v }
func (m *TLWebPage) GetTitle() string { return m.Data2.Title }

func (m *TLWebPage) SetDescription(v string) { m.Data2.Description = v }
func (m *TLWebPage) GetDescription() string { return m.Data2.Description }

func (m *TLWebPage) SetPhoto(v *Photo) { m.Data2.Photo = v }
func (m *TLWebPage) GetPhoto() *Photo { return m.Data2.Photo }

func (m *TLWebPage) SetEmbedUrl(v string) { m.Data2.EmbedUrl = v }
func (m *TLWebPage) GetEmbedUrl() string { return m.Data2.EmbedUrl }

func (m *TLWebPage) SetEmbedType(v string) { m.Data2.EmbedType = v }
func (m *TLWebPage) GetEmbedType() string { return m.Data2.EmbedType }

func (m *TLWebPage) SetEmbedWidth(v int32) { m.Data2.EmbedWidth = v }
func (m *TLWebPage) GetEmbedWidth() int32 { return m.Data2.EmbedWidth }

func (m *TLWebPage) SetEmbedHeight(v int32) { m.Data2.EmbedHeight = v }
func (m *TLWebPage) GetEmbedHeight() int32 { return m.Data2.EmbedHeight }

func (m *TLWebPage) SetDuration(v int32) { m.Data2.Duration = v }
func (m *TLWebPage) GetDuration() int32 { return m.Data2.Duration }

func (m *TLWebPage) SetAuthor(v string) { m.Data2.Author = v }
func (m *TLWebPage) GetAuthor() string { return m.Data2.Author }

func (m *TLWebPage) SetDocument(v *Document) { m.Data2.Document = v }
func (m *TLWebPage) GetDocument() *Document { return m.Data2.Document }

func (m *TLWebPage) SetCachedPage(v *Page) { m.Data2.CachedPage = v }
func (m *TLWebPage) GetCachedPage() *Page { return m.Data2.CachedPage }


func NewTLWebPage() * TLWebPage {
    return &TLWebPage{ Data2: &WebPage_Data{} }
}

func (m* TLWebPage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_webPage))

    // flags
    var flags uint32 = 0
    if m.GetType() != "" { flags |= 1 << 0 }
    if m.GetSiteName() != "" { flags |= 1 << 1 }
    if m.GetTitle() != "" { flags |= 1 << 2 }
    if m.GetDescription() != "" { flags |= 1 << 3 }
    if m.GetPhoto() != nil { flags |= 1 << 4 }
    if m.GetEmbedUrl() != "" { flags |= 1 << 5 }
    if m.GetEmbedType() != "" { flags |= 1 << 5 }
    if m.GetEmbedWidth() != 0 { flags |= 1 << 6 }
    if m.GetEmbedHeight() != 0 { flags |= 1 << 6 }
    if m.GetDuration() != 0 { flags |= 1 << 7 }
    if m.GetAuthor() != "" { flags |= 1 << 8 }
    if m.GetDocument() != nil { flags |= 1 << 9 }
    if m.GetCachedPage() != nil { flags |= 1 << 10 }
	x.UInt(flags)

    x.Long(m.GetId())
    x.String(m.GetUrl())
    x.String(m.GetDisplayUrl())
    x.Int(m.GetHash())
    if (flags & (1 << 0)) != 0 { x.String(m.GetType()) }
    if (flags & (1 << 1)) != 0 { x.String(m.GetSiteName()) }
    if (flags & (1 << 2)) != 0 { x.String(m.GetTitle()) }
    if (flags & (1 << 3)) != 0 { x.String(m.GetDescription()) }
    if (flags & (1 << 4)) != 0 { x.Bytes(m.GetPhoto().Encode()) }
    if (flags & (1 << 5)) != 0 { x.String(m.GetEmbedUrl()) }
    if (flags & (1 << 5)) != 0 { x.String(m.GetEmbedType()) }
    if (flags & (1 << 6)) != 0 { x.Int(m.GetEmbedWidth()) }
    if (flags & (1 << 6)) != 0 { x.Int(m.GetEmbedHeight()) }
    if (flags & (1 << 7)) != 0 { x.Int(m.GetDuration()) }
    if (flags & (1 << 8)) != 0 { x.String(m.GetAuthor()) }
    if (flags & (1 << 9)) != 0 { x.Bytes(m.GetDocument().Encode()) }
    if (flags & (1 << 10)) != 0 { x.Bytes(m.GetCachedPage().Encode()) }

    return x.buf
}

func (m* TLWebPage) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetId(dbuf.Long())
    m.SetUrl(dbuf.String())
    m.SetDisplayUrl(dbuf.String())
    m.SetHash(dbuf.Int())
    if (flags & (1 << 0)) != 0 { m.SetType(dbuf.String()) }
    if (flags & (1 << 1)) != 0 { m.SetSiteName(dbuf.String()) }
    if (flags & (1 << 2)) != 0 { m.SetTitle(dbuf.String()) }
    if (flags & (1 << 3)) != 0 { m.SetDescription(dbuf.String()) }
    if (flags & (1 << 4)) != 0 {
 m10 := &Photo{}
    m10.Decode(dbuf)
    m.SetPhoto(m10) 
}
    if (flags & (1 << 5)) != 0 { m.SetEmbedUrl(dbuf.String()) }
    if (flags & (1 << 5)) != 0 { m.SetEmbedType(dbuf.String()) }
    if (flags & (1 << 6)) != 0 { m.SetEmbedWidth(dbuf.Int()) }
    if (flags & (1 << 6)) != 0 { m.SetEmbedHeight(dbuf.Int()) }
    if (flags & (1 << 7)) != 0 { m.SetDuration(dbuf.Int()) }
    if (flags & (1 << 8)) != 0 { m.SetAuthor(dbuf.String()) }
    if (flags & (1 << 9)) != 0 {
 m17 := &Document{}
    m17.Decode(dbuf)
    m.SetDocument(m17) 
}
    if (flags & (1 << 10)) != 0 {
 m18 := &Page{}
    m18.Decode(dbuf)
    m.SetCachedPage(m18) 
}

    return dbuf.err
}
// webPageNotModified#85849473 = WebPage;
func (m *TLWebPageNotModified) To_WebPage() *WebPage {
    return &WebPage{
        Constructor: TLConstructor_CRC32_webPageNotModified,
        Data2: m.Data2,
    }
}



func NewTLWebPageNotModified() * TLWebPageNotModified {
    return &TLWebPageNotModified{ Data2: &WebPage_Data{} }
}

func (m* TLWebPageNotModified) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_webPageNotModified))


    return x.buf
}

func (m* TLWebPageNotModified) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// webPage#e89c45b2 flags:# id:long url:string display_url:string hash:int type:flags.0?string site_name:flags.1?string title:flags.2?string description:flags.3?string photo:flags.4?Photo embed_url:flags.5?string embed_type:flags.5?string embed_width:flags.6?int embed_height:flags.6?int duration:flags.7?int author:flags.8?string document:flags.9?Document cached_page:flags.10?Page attributes:flags.12?Vector<WebPageAttribute> = WebPage;
func (m *TLWebPage114) To_WebPage() *WebPage {
    return &WebPage{
        Constructor: TLConstructor_CRC32_webPage114,
        Data2: m.Data2,
    }
}


func (m *TLWebPage114) SetId(v int64) { m.Data2.Id = v }
func (m *TLWebPage114) GetId() int64 { return m.Data2.Id }

func (m *TLWebPage114) SetUrl(v string) { m.Data2.Url = v }
func (m *TLWebPage114) GetUrl() string { return m.Data2.Url }

func (m *TLWebPage114) SetDisplayUrl(v string) { m.Data2.DisplayUrl = v }
func (m *TLWebPage114) GetDisplayUrl() string { return m.Data2.DisplayUrl }

func (m *TLWebPage114) SetHash(v int32) { m.Data2.Hash = v }
func (m *TLWebPage114) GetHash() int32 { return m.Data2.Hash }

func (m *TLWebPage114) SetType(v string) { m.Data2.Type = v }
func (m *TLWebPage114) GetType() string { return m.Data2.Type }

func (m *TLWebPage114) SetSiteName(v string) { m.Data2.SiteName = v }
func (m *TLWebPage114) GetSiteName() string { return m.Data2.SiteName }

func (m *TLWebPage114) SetTitle(v string) { m.Data2.Title = v }
func (m *TLWebPage114) GetTitle() string { return m.Data2.Title }

func (m *TLWebPage114) SetDescription(v string) { m.Data2.Description = v }
func (m *TLWebPage114) GetDescription() string { return m.Data2.Description }

func (m *TLWebPage114) SetPhoto(v *Photo) { m.Data2.Photo = v }
func (m *TLWebPage114) GetPhoto() *Photo { return m.Data2.Photo }

func (m *TLWebPage114) SetEmbedUrl(v string) { m.Data2.EmbedUrl = v }
func (m *TLWebPage114) GetEmbedUrl() string { return m.Data2.EmbedUrl }

func (m *TLWebPage114) SetEmbedType(v string) { m.Data2.EmbedType = v }
func (m *TLWebPage114) GetEmbedType() string { return m.Data2.EmbedType }

func (m *TLWebPage114) SetEmbedWidth(v int32) { m.Data2.EmbedWidth = v }
func (m *TLWebPage114) GetEmbedWidth() int32 { return m.Data2.EmbedWidth }

func (m *TLWebPage114) SetEmbedHeight(v int32) { m.Data2.EmbedHeight = v }
func (m *TLWebPage114) GetEmbedHeight() int32 { return m.Data2.EmbedHeight }

func (m *TLWebPage114) SetDuration(v int32) { m.Data2.Duration = v }
func (m *TLWebPage114) GetDuration() int32 { return m.Data2.Duration }

func (m *TLWebPage114) SetAuthor(v string) { m.Data2.Author = v }
func (m *TLWebPage114) GetAuthor() string { return m.Data2.Author }

func (m *TLWebPage114) SetDocument(v *Document) { m.Data2.Document = v }
func (m *TLWebPage114) GetDocument() *Document { return m.Data2.Document }

func (m *TLWebPage114) SetCachedPage(v *Page) { m.Data2.CachedPage = v }
func (m *TLWebPage114) GetCachedPage() *Page { return m.Data2.CachedPage }

func (m *TLWebPage114) SetAttributes(v []*WebPageAttribute) { m.Data2.Attributes = v }
func (m *TLWebPage114) GetAttributes() []*WebPageAttribute { return m.Data2.Attributes }


func NewTLWebPage114() * TLWebPage114 {
    return &TLWebPage114{ Data2: &WebPage_Data{} }
}

func (m* TLWebPage114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_webPage114))

    // flags
    var flags uint32 = 0
    if m.GetType() != "" { flags |= 1 << 0 }
    if m.GetSiteName() != "" { flags |= 1 << 1 }
    if m.GetTitle() != "" { flags |= 1 << 2 }
    if m.GetDescription() != "" { flags |= 1 << 3 }
    if m.GetPhoto() != nil { flags |= 1 << 4 }
    if m.GetEmbedUrl() != "" { flags |= 1 << 5 }
    if m.GetEmbedType() != "" { flags |= 1 << 5 }
    if m.GetEmbedWidth() != 0 { flags |= 1 << 6 }
    if m.GetEmbedHeight() != 0 { flags |= 1 << 6 }
    if m.GetDuration() != 0 { flags |= 1 << 7 }
    if m.GetAuthor() != "" { flags |= 1 << 8 }
    if m.GetDocument() != nil { flags |= 1 << 9 }
    if m.GetCachedPage() != nil { flags |= 1 << 10 }
    if m.GetAttributes() != nil { flags |= 1 << 12 }
	x.UInt(flags)

    x.Long(m.GetId())
    x.String(m.GetUrl())
    x.String(m.GetDisplayUrl())
    x.Int(m.GetHash())
    if (flags & (1 << 0)) != 0 { x.String(m.GetType()) }
    if (flags & (1 << 1)) != 0 { x.String(m.GetSiteName()) }
    if (flags & (1 << 2)) != 0 { x.String(m.GetTitle()) }
    if (flags & (1 << 3)) != 0 { x.String(m.GetDescription()) }
    if (flags & (1 << 4)) != 0 { x.Bytes(m.GetPhoto().Encode()) }
    if (flags & (1 << 5)) != 0 { x.String(m.GetEmbedUrl()) }
    if (flags & (1 << 5)) != 0 { x.String(m.GetEmbedType()) }
    if (flags & (1 << 6)) != 0 { x.Int(m.GetEmbedWidth()) }
    if (flags & (1 << 6)) != 0 { x.Int(m.GetEmbedHeight()) }
    if (flags & (1 << 7)) != 0 { x.Int(m.GetDuration()) }
    if (flags & (1 << 8)) != 0 { x.String(m.GetAuthor()) }
    if (flags & (1 << 9)) != 0 { x.Bytes(m.GetDocument().Encode()) }
    if (flags & (1 << 10)) != 0 { x.Bytes(m.GetCachedPage().Encode()) }
    if (flags & (1 << 12)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetAttributes())))
for _, v := range m.GetAttributes() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}

    return x.buf
}

func (m* TLWebPage114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetId(dbuf.Long())
    m.SetUrl(dbuf.String())
    m.SetDisplayUrl(dbuf.String())
    m.SetHash(dbuf.Int())
    if (flags & (1 << 0)) != 0 { m.SetType(dbuf.String()) }
    if (flags & (1 << 1)) != 0 { m.SetSiteName(dbuf.String()) }
    if (flags & (1 << 2)) != 0 { m.SetTitle(dbuf.String()) }
    if (flags & (1 << 3)) != 0 { m.SetDescription(dbuf.String()) }
    if (flags & (1 << 4)) != 0 {
 m10 := &Photo{}
    m10.Decode(dbuf)
    m.SetPhoto(m10) 
}
    if (flags & (1 << 5)) != 0 { m.SetEmbedUrl(dbuf.String()) }
    if (flags & (1 << 5)) != 0 { m.SetEmbedType(dbuf.String()) }
    if (flags & (1 << 6)) != 0 { m.SetEmbedWidth(dbuf.Int()) }
    if (flags & (1 << 6)) != 0 { m.SetEmbedHeight(dbuf.Int()) }
    if (flags & (1 << 7)) != 0 { m.SetDuration(dbuf.Int()) }
    if (flags & (1 << 8)) != 0 { m.SetAuthor(dbuf.String()) }
    if (flags & (1 << 9)) != 0 {
 m17 := &Document{}
    m17.Decode(dbuf)
    m.SetDocument(m17) 
}
    if (flags & (1 << 10)) != 0 {
 m18 := &Page{}
    m18.Decode(dbuf)
    m.SetCachedPage(m18) 
}
    if (flags & (1 << 12)) != 0 {
 c19 := dbuf.Int()
if c19 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 19, c19)
	return dbuf.err
}
l19 := dbuf.Int()
v19 := make([]*WebPageAttribute, l19)
for i := int32(0); i < l19; i++ {
	v19[i] = &WebPageAttribute{}
	v19[i].Decode(dbuf)
}
m.SetAttributes(v19)
 
}

    return dbuf.err
}
// webPageNotModified#7311ca11 flags:# cached_page_views:flags.0?int = WebPage;
func (m *TLWebPageNotModified114) To_WebPage() *WebPage {
    return &WebPage{
        Constructor: TLConstructor_CRC32_webPageNotModified114,
        Data2: m.Data2,
    }
}


func (m *TLWebPageNotModified114) SetCachedPageViews(v int32) { m.Data2.CachedPageViews = v }
func (m *TLWebPageNotModified114) GetCachedPageViews() int32 { return m.Data2.CachedPageViews }


func NewTLWebPageNotModified114() * TLWebPageNotModified114 {
    return &TLWebPageNotModified114{ Data2: &WebPage_Data{} }
}

func (m* TLWebPageNotModified114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_webPageNotModified114))

    // flags
    var flags uint32 = 0
    if m.GetCachedPageViews() != 0 { flags |= 1 << 0 }
	x.UInt(flags)

    if (flags & (1 << 0)) != 0 { x.Int(m.GetCachedPageViews()) }

    return x.buf
}

func (m* TLWebPageNotModified114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetCachedPageViews(dbuf.Int()) }

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// FoundGif <--
//  + TL_FoundGif
//  + TL_FoundGifCached
//

func (m *FoundGif) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_foundGif:
        t := m.To_FoundGif()
        return t.Encode()
    case TLConstructor_CRC32_foundGifCached:
        t := m.To_FoundGifCached()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *FoundGif) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_foundGif:
        m2 := &TLFoundGif{&FoundGif_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_foundGifCached:
        m2 := &TLFoundGifCached{&FoundGif_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// foundGif#162ecc1f url:string thumb_url:string content_url:string content_type:string w:int h:int = FoundGif;
func (m *FoundGif) To_FoundGif() *TLFoundGif {
    return &TLFoundGif{
        Data2: m.Data2,
    }
}

// foundGifCached#9c750409 url:string photo:Photo document:Document = FoundGif;
func (m *FoundGif) To_FoundGifCached() *TLFoundGifCached {
    return &TLFoundGifCached{
        Data2: m.Data2,
    }
}



// foundGif#162ecc1f url:string thumb_url:string content_url:string content_type:string w:int h:int = FoundGif;
func (m *TLFoundGif) To_FoundGif() *FoundGif {
    return &FoundGif{
        Constructor: TLConstructor_CRC32_foundGif,
        Data2: m.Data2,
    }
}


func (m *TLFoundGif) SetUrl(v string) { m.Data2.Url = v }
func (m *TLFoundGif) GetUrl() string { return m.Data2.Url }

func (m *TLFoundGif) SetThumbUrl(v string) { m.Data2.ThumbUrl = v }
func (m *TLFoundGif) GetThumbUrl() string { return m.Data2.ThumbUrl }

func (m *TLFoundGif) SetContentUrl(v string) { m.Data2.ContentUrl = v }
func (m *TLFoundGif) GetContentUrl() string { return m.Data2.ContentUrl }

func (m *TLFoundGif) SetContentType(v string) { m.Data2.ContentType = v }
func (m *TLFoundGif) GetContentType() string { return m.Data2.ContentType }

func (m *TLFoundGif) SetW(v int32) { m.Data2.W = v }
func (m *TLFoundGif) GetW() int32 { return m.Data2.W }

func (m *TLFoundGif) SetH(v int32) { m.Data2.H = v }
func (m *TLFoundGif) GetH() int32 { return m.Data2.H }


func NewTLFoundGif() * TLFoundGif {
    return &TLFoundGif{ Data2: &FoundGif_Data{} }
}

func (m* TLFoundGif) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_foundGif))

    x.String(m.GetUrl())
    x.String(m.GetThumbUrl())
    x.String(m.GetContentUrl())
    x.String(m.GetContentType())
    x.Int(m.GetW())
    x.Int(m.GetH())

    return x.buf
}

func (m* TLFoundGif) Decode(dbuf *DecodeBuf) error {
    m.SetUrl(dbuf.String())
    m.SetThumbUrl(dbuf.String())
    m.SetContentUrl(dbuf.String())
    m.SetContentType(dbuf.String())
    m.SetW(dbuf.Int())
    m.SetH(dbuf.Int())

    return dbuf.err
}
// foundGifCached#9c750409 url:string photo:Photo document:Document = FoundGif;
func (m *TLFoundGifCached) To_FoundGif() *FoundGif {
    return &FoundGif{
        Constructor: TLConstructor_CRC32_foundGifCached,
        Data2: m.Data2,
    }
}


func (m *TLFoundGifCached) SetUrl(v string) { m.Data2.Url = v }
func (m *TLFoundGifCached) GetUrl() string { return m.Data2.Url }

func (m *TLFoundGifCached) SetPhoto(v *Photo) { m.Data2.Photo = v }
func (m *TLFoundGifCached) GetPhoto() *Photo { return m.Data2.Photo }

func (m *TLFoundGifCached) SetDocument(v *Document) { m.Data2.Document = v }
func (m *TLFoundGifCached) GetDocument() *Document { return m.Data2.Document }


func NewTLFoundGifCached() * TLFoundGifCached {
    return &TLFoundGifCached{ Data2: &FoundGif_Data{} }
}

func (m* TLFoundGifCached) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_foundGifCached))

    x.String(m.GetUrl())
    x.Bytes(m.GetPhoto().Encode())
    x.Bytes(m.GetDocument().Encode())

    return x.buf
}

func (m* TLFoundGifCached) Decode(dbuf *DecodeBuf) error {
    m.SetUrl(dbuf.String())
    m2 := &Photo{}
    m2.Decode(dbuf)
    m.SetPhoto(m2)
    m3 := &Document{}
    m3.Decode(dbuf)
    m.SetDocument(m3)

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// ShippingOption <--
//  + TL_ShippingOption
//

func (m *ShippingOption) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_shippingOption:
        t := m.To_ShippingOption()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *ShippingOption) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_shippingOption:
        m2 := &TLShippingOption{&ShippingOption_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// shippingOption#b6213cdf id:string title:string prices:Vector<LabeledPrice> = ShippingOption;
func (m *ShippingOption) To_ShippingOption() *TLShippingOption {
    return &TLShippingOption{
        Data2: m.Data2,
    }
}



// shippingOption#b6213cdf id:string title:string prices:Vector<LabeledPrice> = ShippingOption;
func (m *TLShippingOption) To_ShippingOption() *ShippingOption {
    return &ShippingOption{
        Constructor: TLConstructor_CRC32_shippingOption,
        Data2: m.Data2,
    }
}


func (m *TLShippingOption) SetId(v string) { m.Data2.Id = v }
func (m *TLShippingOption) GetId() string { return m.Data2.Id }

func (m *TLShippingOption) SetTitle(v string) { m.Data2.Title = v }
func (m *TLShippingOption) GetTitle() string { return m.Data2.Title }

func (m *TLShippingOption) SetPrices(v []*LabeledPrice) { m.Data2.Prices = v }
func (m *TLShippingOption) GetPrices() []*LabeledPrice { return m.Data2.Prices }


func NewTLShippingOption() * TLShippingOption {
    return &TLShippingOption{ Data2: &ShippingOption_Data{} }
}

func (m* TLShippingOption) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_shippingOption))

    x.String(m.GetId())
    x.String(m.GetTitle())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetPrices())))
for _, v := range m.GetPrices() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLShippingOption) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.String())
    m.SetTitle(dbuf.String())
    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*LabeledPrice, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &LabeledPrice{}
	v3[i].Decode(dbuf)
}
m.SetPrices(v3)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Messages_ChatFull <--
//  + TL_MessagesChatFull
//

func (m *Messages_ChatFull) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messages_chatFull:
        t := m.To_MessagesChatFull()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Messages_ChatFull) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messages_chatFull:
        m2 := &TLMessagesChatFull{&Messages_ChatFull_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messages.chatFull#e5d7d19c full_chat:ChatFull chats:Vector<Chat> users:Vector<User> = messages.ChatFull;
func (m *Messages_ChatFull) To_MessagesChatFull() *TLMessagesChatFull {
    return &TLMessagesChatFull{
        Data2: m.Data2,
    }
}



// messages.chatFull#e5d7d19c full_chat:ChatFull chats:Vector<Chat> users:Vector<User> = messages.ChatFull;
func (m *TLMessagesChatFull) To_Messages_ChatFull() *Messages_ChatFull {
    return &Messages_ChatFull{
        Constructor: TLConstructor_CRC32_messages_chatFull,
        Data2: m.Data2,
    }
}


func (m *TLMessagesChatFull) SetFullChat(v *ChatFull) { m.Data2.FullChat = v }
func (m *TLMessagesChatFull) GetFullChat() *ChatFull { return m.Data2.FullChat }

func (m *TLMessagesChatFull) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesChatFull) GetChats() []*Chat { return m.Data2.Chats }

func (m *TLMessagesChatFull) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesChatFull) GetUsers() []*User { return m.Data2.Users }


func NewTLMessagesChatFull() * TLMessagesChatFull {
    return &TLMessagesChatFull{ Data2: &Messages_ChatFull_Data{} }
}

func (m* TLMessagesChatFull) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_chatFull))

    x.Bytes(m.GetFullChat().Encode())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetChats())))
for _, v := range m.GetChats() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLMessagesChatFull) Decode(dbuf *DecodeBuf) error {
    m1 := &ChatFull{}
    m1.Decode(dbuf)
    m.SetFullChat(m1)
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*Chat, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &Chat{}
	v2[i].Decode(dbuf)
}
m.SetChats(v2)

    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*User, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &User{}
	v3[i].Decode(dbuf)
}
m.SetUsers(v3)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Channels_ChannelParticipants <--
//  + TL_ChannelsChannelParticipants
//  + TL_ChannelsChannelParticipantsNotModified
//

func (m *Channels_ChannelParticipants) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_channels_channelParticipants:
        t := m.To_ChannelsChannelParticipants()
        return t.Encode()
    case TLConstructor_CRC32_channels_channelParticipantsNotModified:
        t := m.To_ChannelsChannelParticipantsNotModified()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Channels_ChannelParticipants) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_channels_channelParticipants:
        m2 := &TLChannelsChannelParticipants{&Channels_ChannelParticipants_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channels_channelParticipantsNotModified:
        m2 := &TLChannelsChannelParticipantsNotModified{&Channels_ChannelParticipants_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// channels.channelParticipants#f56ee2a8 count:int participants:Vector<ChannelParticipant> users:Vector<User> = channels.ChannelParticipants;
func (m *Channels_ChannelParticipants) To_ChannelsChannelParticipants() *TLChannelsChannelParticipants {
    return &TLChannelsChannelParticipants{
        Data2: m.Data2,
    }
}

// channels.channelParticipantsNotModified#f0173fe9 = channels.ChannelParticipants;
func (m *Channels_ChannelParticipants) To_ChannelsChannelParticipantsNotModified() *TLChannelsChannelParticipantsNotModified {
    return &TLChannelsChannelParticipantsNotModified{
        Data2: m.Data2,
    }
}



// channels.channelParticipants#f56ee2a8 count:int participants:Vector<ChannelParticipant> users:Vector<User> = channels.ChannelParticipants;
func (m *TLChannelsChannelParticipants) To_Channels_ChannelParticipants() *Channels_ChannelParticipants {
    return &Channels_ChannelParticipants{
        Constructor: TLConstructor_CRC32_channels_channelParticipants,
        Data2: m.Data2,
    }
}


func (m *TLChannelsChannelParticipants) SetCount(v int32) { m.Data2.Count = v }
func (m *TLChannelsChannelParticipants) GetCount() int32 { return m.Data2.Count }

func (m *TLChannelsChannelParticipants) SetParticipants(v []*ChannelParticipant) { m.Data2.Participants = v }
func (m *TLChannelsChannelParticipants) GetParticipants() []*ChannelParticipant { return m.Data2.Participants }

func (m *TLChannelsChannelParticipants) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLChannelsChannelParticipants) GetUsers() []*User { return m.Data2.Users }


func NewTLChannelsChannelParticipants() * TLChannelsChannelParticipants {
    return &TLChannelsChannelParticipants{ Data2: &Channels_ChannelParticipants_Data{} }
}

func (m* TLChannelsChannelParticipants) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channels_channelParticipants))

    x.Int(m.GetCount())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetParticipants())))
for _, v := range m.GetParticipants() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLChannelsChannelParticipants) Decode(dbuf *DecodeBuf) error {
    m.SetCount(dbuf.Int())
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*ChannelParticipant, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &ChannelParticipant{}
	v2[i].Decode(dbuf)
}
m.SetParticipants(v2)

    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*User, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &User{}
	v3[i].Decode(dbuf)
}
m.SetUsers(v3)


    return dbuf.err
}
// channels.channelParticipantsNotModified#f0173fe9 = channels.ChannelParticipants;
func (m *TLChannelsChannelParticipantsNotModified) To_Channels_ChannelParticipants() *Channels_ChannelParticipants {
    return &Channels_ChannelParticipants{
        Constructor: TLConstructor_CRC32_channels_channelParticipantsNotModified,
        Data2: m.Data2,
    }
}



func NewTLChannelsChannelParticipantsNotModified() * TLChannelsChannelParticipantsNotModified {
    return &TLChannelsChannelParticipantsNotModified{ Data2: &Channels_ChannelParticipants_Data{} }
}

func (m* TLChannelsChannelParticipantsNotModified) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channels_channelParticipantsNotModified))


    return x.buf
}

func (m* TLChannelsChannelParticipantsNotModified) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Upload_CdnFile <--
//  + TL_UploadCdnFileReuploadNeeded
//  + TL_UploadCdnFile
//

func (m *Upload_CdnFile) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_upload_cdnFileReuploadNeeded:
        t := m.To_UploadCdnFileReuploadNeeded()
        return t.Encode()
    case TLConstructor_CRC32_upload_cdnFile:
        t := m.To_UploadCdnFile()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Upload_CdnFile) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_upload_cdnFileReuploadNeeded:
        m2 := &TLUploadCdnFileReuploadNeeded{&Upload_CdnFile_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_upload_cdnFile:
        m2 := &TLUploadCdnFile{&Upload_CdnFile_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// upload.cdnFileReuploadNeeded#eea8e46e request_token:bytes = upload.CdnFile;
func (m *Upload_CdnFile) To_UploadCdnFileReuploadNeeded() *TLUploadCdnFileReuploadNeeded {
    return &TLUploadCdnFileReuploadNeeded{
        Data2: m.Data2,
    }
}

// upload.cdnFile#a99fca4f bytes:bytes = upload.CdnFile;
func (m *Upload_CdnFile) To_UploadCdnFile() *TLUploadCdnFile {
    return &TLUploadCdnFile{
        Data2: m.Data2,
    }
}



// upload.cdnFileReuploadNeeded#eea8e46e request_token:bytes = upload.CdnFile;
func (m *TLUploadCdnFileReuploadNeeded) To_Upload_CdnFile() *Upload_CdnFile {
    return &Upload_CdnFile{
        Constructor: TLConstructor_CRC32_upload_cdnFileReuploadNeeded,
        Data2: m.Data2,
    }
}


func (m *TLUploadCdnFileReuploadNeeded) SetRequestToken(v []byte) { m.Data2.RequestToken = v }
func (m *TLUploadCdnFileReuploadNeeded) GetRequestToken() []byte { return m.Data2.RequestToken }


func NewTLUploadCdnFileReuploadNeeded() * TLUploadCdnFileReuploadNeeded {
    return &TLUploadCdnFileReuploadNeeded{ Data2: &Upload_CdnFile_Data{} }
}

func (m* TLUploadCdnFileReuploadNeeded) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_upload_cdnFileReuploadNeeded))

    x.StringBytes(m.GetRequestToken())

    return x.buf
}

func (m* TLUploadCdnFileReuploadNeeded) Decode(dbuf *DecodeBuf) error {
    m.SetRequestToken(dbuf.StringBytes())

    return dbuf.err
}
// upload.cdnFile#a99fca4f bytes:bytes = upload.CdnFile;
func (m *TLUploadCdnFile) To_Upload_CdnFile() *Upload_CdnFile {
    return &Upload_CdnFile{
        Constructor: TLConstructor_CRC32_upload_cdnFile,
        Data2: m.Data2,
    }
}


func (m *TLUploadCdnFile) SetBytes(v []byte) { m.Data2.Bytes = v }
func (m *TLUploadCdnFile) GetBytes() []byte { return m.Data2.Bytes }


func NewTLUploadCdnFile() * TLUploadCdnFile {
    return &TLUploadCdnFile{ Data2: &Upload_CdnFile_Data{} }
}

func (m* TLUploadCdnFile) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_upload_cdnFile))

    x.StringBytes(m.GetBytes())

    return x.buf
}

func (m* TLUploadCdnFile) Decode(dbuf *DecodeBuf) error {
    m.SetBytes(dbuf.StringBytes())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// VideoSize <--
//  + TL_VideoSize
//  + TL_VideoSize117
//

func (m *VideoSize) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_videoSize:
        t := m.To_VideoSize()
        return t.Encode()
    case TLConstructor_CRC32_videoSize117:
        t := m.To_VideoSize117()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *VideoSize) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_videoSize:
        m2 := &TLVideoSize{&VideoSize_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_videoSize117:
        m2 := &TLVideoSize117{&VideoSize_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// videoSize#435bb987 type:string location:FileLocation w:int h:int size:int = VideoSize;
func (m *VideoSize) To_VideoSize() *TLVideoSize {
    return &TLVideoSize{
        Data2: m.Data2,
    }
}

// videoSize#e831c556 flags:# type:string location:FileLocation w:int h:int size:int video_start_ts:flags.0?double = VideoSize;
func (m *VideoSize) To_VideoSize117() *TLVideoSize117 {
    return &TLVideoSize117{
        Data2: m.Data2,
    }
}



// videoSize#435bb987 type:string location:FileLocation w:int h:int size:int = VideoSize;
func (m *TLVideoSize) To_VideoSize() *VideoSize {
    return &VideoSize{
        Constructor: TLConstructor_CRC32_videoSize,
        Data2: m.Data2,
    }
}


func (m *TLVideoSize) SetType(v string) { m.Data2.Type = v }
func (m *TLVideoSize) GetType() string { return m.Data2.Type }

func (m *TLVideoSize) SetLocation(v *FileLocation) { m.Data2.Location = v }
func (m *TLVideoSize) GetLocation() *FileLocation { return m.Data2.Location }

func (m *TLVideoSize) SetW(v int32) { m.Data2.W = v }
func (m *TLVideoSize) GetW() int32 { return m.Data2.W }

func (m *TLVideoSize) SetH(v int32) { m.Data2.H = v }
func (m *TLVideoSize) GetH() int32 { return m.Data2.H }

func (m *TLVideoSize) SetSize(v int32) { m.Data2.Size_ = v }
func (m *TLVideoSize) GetSize() int32 { return m.Data2.Size_ }


func NewTLVideoSize() * TLVideoSize {
    return &TLVideoSize{ Data2: &VideoSize_Data{} }
}

func (m* TLVideoSize) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_videoSize))

    x.String(m.GetType())
    x.Bytes(m.GetLocation().Encode())
    x.Int(m.GetW())
    x.Int(m.GetH())
    x.Int(m.GetSize())

    return x.buf
}

func (m* TLVideoSize) Decode(dbuf *DecodeBuf) error {
    m.SetType(dbuf.String())
    m2 := &FileLocation{}
    m2.Decode(dbuf)
    m.SetLocation(m2)
    m.SetW(dbuf.Int())
    m.SetH(dbuf.Int())
    m.SetSize(dbuf.Int())

    return dbuf.err
}
// videoSize#e831c556 flags:# type:string location:FileLocation w:int h:int size:int video_start_ts:flags.0?double = VideoSize;
func (m *TLVideoSize117) To_VideoSize() *VideoSize {
    return &VideoSize{
        Constructor: TLConstructor_CRC32_videoSize117,
        Data2: m.Data2,
    }
}


func (m *TLVideoSize117) SetType(v string) { m.Data2.Type = v }
func (m *TLVideoSize117) GetType() string { return m.Data2.Type }

func (m *TLVideoSize117) SetLocation(v *FileLocation) { m.Data2.Location = v }
func (m *TLVideoSize117) GetLocation() *FileLocation { return m.Data2.Location }

func (m *TLVideoSize117) SetW(v int32) { m.Data2.W = v }
func (m *TLVideoSize117) GetW() int32 { return m.Data2.W }

func (m *TLVideoSize117) SetH(v int32) { m.Data2.H = v }
func (m *TLVideoSize117) GetH() int32 { return m.Data2.H }

func (m *TLVideoSize117) SetSize(v int32) { m.Data2.Size_ = v }
func (m *TLVideoSize117) GetSize() int32 { return m.Data2.Size_ }

func (m *TLVideoSize117) SetVideoStartTs(v float64) { m.Data2.VideoStartTs = v }
func (m *TLVideoSize117) GetVideoStartTs() float64 { return m.Data2.VideoStartTs }


func NewTLVideoSize117() * TLVideoSize117 {
    return &TLVideoSize117{ Data2: &VideoSize_Data{} }
}

func (m* TLVideoSize117) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_videoSize117))

    // flags
    var flags uint32 = 0
    if m.GetVideoStartTs() != 0 { flags |= 1 << 0 }
	x.UInt(flags)

    x.String(m.GetType())
    x.Bytes(m.GetLocation().Encode())
    x.Int(m.GetW())
    x.Int(m.GetH())
    x.Int(m.GetSize())
    

    return x.buf
}

func (m* TLVideoSize117) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetType(dbuf.String())
    m3 := &FileLocation{}
    m3.Decode(dbuf)
    m.SetLocation(m3)
    m.SetW(dbuf.Int())
    m.SetH(dbuf.Int())
    m.SetSize(dbuf.Int())
    

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// PasswordKdfAlgo <--
//  + TL_PasswordKdfAlgoUnknown
//  + TL_PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow
//

func (m *PasswordKdfAlgo) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_passwordKdfAlgoUnknown:
        t := m.To_PasswordKdfAlgoUnknown()
        return t.Encode()
    case TLConstructor_CRC32_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow:
        t := m.To_PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *PasswordKdfAlgo) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_passwordKdfAlgoUnknown:
        m2 := &TLPasswordKdfAlgoUnknown{&PasswordKdfAlgo_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow:
        m2 := &TLPasswordKdfAlgo256{&PasswordKdfAlgo_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// passwordKdfAlgoUnknown#d45ab096 = PasswordKdfAlgo;
func (m *PasswordKdfAlgo) To_PasswordKdfAlgoUnknown() *TLPasswordKdfAlgoUnknown {
    return &TLPasswordKdfAlgoUnknown{
        Data2: m.Data2,
    }
}

// passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow#3a912d4a salt1:bytes salt2:bytes g:int p:bytes = PasswordKdfAlgo;
func (m *PasswordKdfAlgo) To_PasswordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow() *TLPasswordKdfAlgo256 {
    return &TLPasswordKdfAlgo256{
        Data2: m.Data2,
    }
}



// passwordKdfAlgoUnknown#d45ab096 = PasswordKdfAlgo;
func (m *TLPasswordKdfAlgoUnknown) To_PasswordKdfAlgo() *PasswordKdfAlgo {
    return &PasswordKdfAlgo{
        Constructor: TLConstructor_CRC32_passwordKdfAlgoUnknown,
        Data2: m.Data2,
    }
}



func NewTLPasswordKdfAlgoUnknown() * TLPasswordKdfAlgoUnknown {
    return &TLPasswordKdfAlgoUnknown{ Data2: &PasswordKdfAlgo_Data{} }
}

func (m* TLPasswordKdfAlgoUnknown) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_passwordKdfAlgoUnknown))


    return x.buf
}

func (m* TLPasswordKdfAlgoUnknown) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow#3a912d4a salt1:bytes salt2:bytes g:int p:bytes = PasswordKdfAlgo;
func (m *TLPasswordKdfAlgo256) To_PasswordKdfAlgo() *PasswordKdfAlgo {
    return &PasswordKdfAlgo{
        Constructor: TLConstructor_CRC32_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow,
        Data2: m.Data2,
    }
}


func (m *TLPasswordKdfAlgo256) SetSalt1(v []byte) { m.Data2.Salt1 = v }
func (m *TLPasswordKdfAlgo256) GetSalt1() []byte { return m.Data2.Salt1 }

func (m *TLPasswordKdfAlgo256) SetSalt2(v []byte) { m.Data2.Salt2 = v }
func (m *TLPasswordKdfAlgo256) GetSalt2() []byte { return m.Data2.Salt2 }

func (m *TLPasswordKdfAlgo256) SetG(v int32) { m.Data2.G = v }
func (m *TLPasswordKdfAlgo256) GetG() int32 { return m.Data2.G }

func (m *TLPasswordKdfAlgo256) SetP(v []byte) { m.Data2.P = v }
func (m *TLPasswordKdfAlgo256) GetP() []byte { return m.Data2.P }


func NewTLPasswordKdfAlgo256() * TLPasswordKdfAlgo256 {
    return &TLPasswordKdfAlgo256{ Data2: &PasswordKdfAlgo_Data{} }
}

func (m* TLPasswordKdfAlgo256) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow))

    x.StringBytes(m.GetSalt1())
    x.StringBytes(m.GetSalt2())
    x.Int(m.GetG())
    x.StringBytes(m.GetP())

    return x.buf
}

func (m* TLPasswordKdfAlgo256) Decode(dbuf *DecodeBuf) error {
    m.SetSalt1(dbuf.StringBytes())
    m.SetSalt2(dbuf.StringBytes())
    m.SetG(dbuf.Int())
    m.SetP(dbuf.StringBytes())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Upload_File <--
//  + TL_UploadFile
//  + TL_UploadFileCdnRedirect
//  + TL_UploadFileCdnRedirect114
//

func (m *Upload_File) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_upload_file:
        t := m.To_UploadFile()
        return t.Encode()
    case TLConstructor_CRC32_upload_fileCdnRedirect:
        t := m.To_UploadFileCdnRedirect()
        return t.Encode()
    case TLConstructor_CRC32_upload_fileCdnRedirect114:
        t := m.To_UploadFileCdnRedirect114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Upload_File) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_upload_file:
        m2 := &TLUploadFile{&Upload_File_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_upload_fileCdnRedirect:
        m2 := &TLUploadFileCdnRedirect{&Upload_File_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_upload_fileCdnRedirect114:
        m2 := &TLUploadFileCdnRedirect114{&Upload_File_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// upload.file#96a18d5 type:storage.FileType mtime:int bytes:bytes = upload.File;
func (m *Upload_File) To_UploadFile() *TLUploadFile {
    return &TLUploadFile{
        Data2: m.Data2,
    }
}

// upload.fileCdnRedirect#ea52fe5a dc_id:int file_token:bytes encryption_key:bytes encryption_iv:bytes cdn_file_hashes:Vector<CdnFileHash> = upload.File;
func (m *Upload_File) To_UploadFileCdnRedirect() *TLUploadFileCdnRedirect {
    return &TLUploadFileCdnRedirect{
        Data2: m.Data2,
    }
}

// upload.fileCdnRedirect#f18cda44 dc_id:int file_token:bytes encryption_key:bytes encryption_iv:bytes file_hashes:Vector<FileHash> = upload.File;
func (m *Upload_File) To_UploadFileCdnRedirect114() *TLUploadFileCdnRedirect114 {
    return &TLUploadFileCdnRedirect114{
        Data2: m.Data2,
    }
}



// upload.file#96a18d5 type:storage.FileType mtime:int bytes:bytes = upload.File;
func (m *TLUploadFile) To_Upload_File() *Upload_File {
    return &Upload_File{
        Constructor: TLConstructor_CRC32_upload_file,
        Data2: m.Data2,
    }
}


func (m *TLUploadFile) SetType(v *Storage_FileType) { m.Data2.Type = v }
func (m *TLUploadFile) GetType() *Storage_FileType { return m.Data2.Type }

func (m *TLUploadFile) SetMtime(v int32) { m.Data2.Mtime = v }
func (m *TLUploadFile) GetMtime() int32 { return m.Data2.Mtime }

func (m *TLUploadFile) SetBytes(v []byte) { m.Data2.Bytes = v }
func (m *TLUploadFile) GetBytes() []byte { return m.Data2.Bytes }


func NewTLUploadFile() * TLUploadFile {
    return &TLUploadFile{ Data2: &Upload_File_Data{} }
}

func (m* TLUploadFile) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_upload_file))

    x.Bytes(m.GetType().Encode())
    x.Int(m.GetMtime())
    x.StringBytes(m.GetBytes())

    return x.buf
}

func (m* TLUploadFile) Decode(dbuf *DecodeBuf) error {
    m1 := &Storage_FileType{}
    m1.Decode(dbuf)
    m.SetType(m1)
    m.SetMtime(dbuf.Int())
    m.SetBytes(dbuf.StringBytes())

    return dbuf.err
}
// upload.fileCdnRedirect#ea52fe5a dc_id:int file_token:bytes encryption_key:bytes encryption_iv:bytes cdn_file_hashes:Vector<CdnFileHash> = upload.File;
func (m *TLUploadFileCdnRedirect) To_Upload_File() *Upload_File {
    return &Upload_File{
        Constructor: TLConstructor_CRC32_upload_fileCdnRedirect,
        Data2: m.Data2,
    }
}


func (m *TLUploadFileCdnRedirect) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLUploadFileCdnRedirect) GetDcId() int32 { return m.Data2.DcId }

func (m *TLUploadFileCdnRedirect) SetFileToken(v []byte) { m.Data2.FileToken = v }
func (m *TLUploadFileCdnRedirect) GetFileToken() []byte { return m.Data2.FileToken }

func (m *TLUploadFileCdnRedirect) SetEncryptionKey(v []byte) { m.Data2.EncryptionKey = v }
func (m *TLUploadFileCdnRedirect) GetEncryptionKey() []byte { return m.Data2.EncryptionKey }

func (m *TLUploadFileCdnRedirect) SetEncryptionIv(v []byte) { m.Data2.EncryptionIv = v }
func (m *TLUploadFileCdnRedirect) GetEncryptionIv() []byte { return m.Data2.EncryptionIv }

func (m *TLUploadFileCdnRedirect) SetCdnFileHashes(v []*CdnFileHash) { m.Data2.CdnFileHashes = v }
func (m *TLUploadFileCdnRedirect) GetCdnFileHashes() []*CdnFileHash { return m.Data2.CdnFileHashes }


func NewTLUploadFileCdnRedirect() * TLUploadFileCdnRedirect {
    return &TLUploadFileCdnRedirect{ Data2: &Upload_File_Data{} }
}

func (m* TLUploadFileCdnRedirect) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_upload_fileCdnRedirect))

    x.Int(m.GetDcId())
    x.StringBytes(m.GetFileToken())
    x.StringBytes(m.GetEncryptionKey())
    x.StringBytes(m.GetEncryptionIv())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetCdnFileHashes())))
for _, v := range m.GetCdnFileHashes() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLUploadFileCdnRedirect) Decode(dbuf *DecodeBuf) error {
    m.SetDcId(dbuf.Int())
    m.SetFileToken(dbuf.StringBytes())
    m.SetEncryptionKey(dbuf.StringBytes())
    m.SetEncryptionIv(dbuf.StringBytes())
    c5 := dbuf.Int()
if c5 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 5, c5)
	return dbuf.err
}
l5 := dbuf.Int()
v5 := make([]*CdnFileHash, l5)
for i := int32(0); i < l5; i++ {
	v5[i] = &CdnFileHash{}
	v5[i].Decode(dbuf)
}
m.SetCdnFileHashes(v5)


    return dbuf.err
}
// upload.fileCdnRedirect#f18cda44 dc_id:int file_token:bytes encryption_key:bytes encryption_iv:bytes file_hashes:Vector<FileHash> = upload.File;
func (m *TLUploadFileCdnRedirect114) To_Upload_File() *Upload_File {
    return &Upload_File{
        Constructor: TLConstructor_CRC32_upload_fileCdnRedirect114,
        Data2: m.Data2,
    }
}


func (m *TLUploadFileCdnRedirect114) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLUploadFileCdnRedirect114) GetDcId() int32 { return m.Data2.DcId }

func (m *TLUploadFileCdnRedirect114) SetFileToken(v []byte) { m.Data2.FileToken = v }
func (m *TLUploadFileCdnRedirect114) GetFileToken() []byte { return m.Data2.FileToken }

func (m *TLUploadFileCdnRedirect114) SetEncryptionKey(v []byte) { m.Data2.EncryptionKey = v }
func (m *TLUploadFileCdnRedirect114) GetEncryptionKey() []byte { return m.Data2.EncryptionKey }

func (m *TLUploadFileCdnRedirect114) SetEncryptionIv(v []byte) { m.Data2.EncryptionIv = v }
func (m *TLUploadFileCdnRedirect114) GetEncryptionIv() []byte { return m.Data2.EncryptionIv }

func (m *TLUploadFileCdnRedirect114) SetFileHashes(v []*FileHash) { m.Data2.FileHashes = v }
func (m *TLUploadFileCdnRedirect114) GetFileHashes() []*FileHash { return m.Data2.FileHashes }


func NewTLUploadFileCdnRedirect114() * TLUploadFileCdnRedirect114 {
    return &TLUploadFileCdnRedirect114{ Data2: &Upload_File_Data{} }
}

func (m* TLUploadFileCdnRedirect114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_upload_fileCdnRedirect114))

    x.Int(m.GetDcId())
    x.StringBytes(m.GetFileToken())
    x.StringBytes(m.GetEncryptionKey())
    x.StringBytes(m.GetEncryptionIv())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetFileHashes())))
for _, v := range m.GetFileHashes() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLUploadFileCdnRedirect114) Decode(dbuf *DecodeBuf) error {
    m.SetDcId(dbuf.Int())
    m.SetFileToken(dbuf.StringBytes())
    m.SetEncryptionKey(dbuf.StringBytes())
    m.SetEncryptionIv(dbuf.StringBytes())
    c5 := dbuf.Int()
if c5 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 5, c5)
	return dbuf.err
}
l5 := dbuf.Int()
v5 := make([]*FileHash, l5)
for i := int32(0); i < l5; i++ {
	v5[i] = &FileHash{}
	v5[i].Decode(dbuf)
}
m.SetFileHashes(v5)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// DcOption <--
//  + TL_DcOption
//

func (m *DcOption) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_dcOption:
        t := m.To_DcOption()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *DcOption) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_dcOption:
        m2 := &TLDcOption{&DcOption_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// dcOption#5d8c6cc flags:# ipv6:flags.0?true media_only:flags.1?true tcpo_only:flags.2?true cdn:flags.3?true static:flags.4?true id:int ip_address:string port:int = DcOption;
func (m *DcOption) To_DcOption() *TLDcOption {
    return &TLDcOption{
        Data2: m.Data2,
    }
}



// dcOption#5d8c6cc flags:# ipv6:flags.0?true media_only:flags.1?true tcpo_only:flags.2?true cdn:flags.3?true static:flags.4?true id:int ip_address:string port:int = DcOption;
func (m *TLDcOption) To_DcOption() *DcOption {
    return &DcOption{
        Constructor: TLConstructor_CRC32_dcOption,
        Data2: m.Data2,
    }
}


func (m *TLDcOption) SetIpv6(v bool) { m.Data2.Ipv6 = v }
func (m *TLDcOption) GetIpv6() bool { return m.Data2.Ipv6 }

func (m *TLDcOption) SetMediaOnly(v bool) { m.Data2.MediaOnly = v }
func (m *TLDcOption) GetMediaOnly() bool { return m.Data2.MediaOnly }

func (m *TLDcOption) SetTcpoOnly(v bool) { m.Data2.TcpoOnly = v }
func (m *TLDcOption) GetTcpoOnly() bool { return m.Data2.TcpoOnly }

func (m *TLDcOption) SetCdn(v bool) { m.Data2.Cdn = v }
func (m *TLDcOption) GetCdn() bool { return m.Data2.Cdn }

func (m *TLDcOption) SetStatic(v bool) { m.Data2.Static = v }
func (m *TLDcOption) GetStatic() bool { return m.Data2.Static }

func (m *TLDcOption) SetId(v int32) { m.Data2.Id = v }
func (m *TLDcOption) GetId() int32 { return m.Data2.Id }

func (m *TLDcOption) SetIpAddress(v string) { m.Data2.IpAddress = v }
func (m *TLDcOption) GetIpAddress() string { return m.Data2.IpAddress }

func (m *TLDcOption) SetPort(v int32) { m.Data2.Port = v }
func (m *TLDcOption) GetPort() int32 { return m.Data2.Port }


func NewTLDcOption() * TLDcOption {
    return &TLDcOption{ Data2: &DcOption_Data{} }
}

func (m* TLDcOption) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_dcOption))

    // flags
    var flags uint32 = 0
    if m.GetIpv6() == true { flags |= 1 << 0 }
    if m.GetMediaOnly() == true { flags |= 1 << 1 }
    if m.GetTcpoOnly() == true { flags |= 1 << 2 }
    if m.GetCdn() == true { flags |= 1 << 3 }
    if m.GetStatic() == true { flags |= 1 << 4 }
	x.UInt(flags)

    
    
    
    
    
    x.Int(m.GetId())
    x.String(m.GetIpAddress())
    x.Int(m.GetPort())

    return x.buf
}

func (m* TLDcOption) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetIpv6(true) }
    if (flags & (1 << 1)) != 0 { m.SetMediaOnly(true) }
    if (flags & (1 << 2)) != 0 { m.SetTcpoOnly(true) }
    if (flags & (1 << 3)) != 0 { m.SetCdn(true) }
    if (flags & (1 << 4)) != 0 { m.SetStatic(true) }
    m.SetId(dbuf.Int())
    m.SetIpAddress(dbuf.String())
    m.SetPort(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// TopPeerCategory <--
//  + TL_TopPeerCategoryBotsPM
//  + TL_TopPeerCategoryBotsInline
//  + TL_TopPeerCategoryCorrespondents
//  + TL_TopPeerCategoryGroups
//  + TL_TopPeerCategoryChannels
//  + TL_TopPeerCategoryPhoneCalls
//  + TL_TopPeerCategoryForwardUsers
//  + TL_TopPeerCategoryForwardChats
//

func (m *TopPeerCategory) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_topPeerCategoryBotsPM:
        t := m.To_TopPeerCategoryBotsPM()
        return t.Encode()
    case TLConstructor_CRC32_topPeerCategoryBotsInline:
        t := m.To_TopPeerCategoryBotsInline()
        return t.Encode()
    case TLConstructor_CRC32_topPeerCategoryCorrespondents:
        t := m.To_TopPeerCategoryCorrespondents()
        return t.Encode()
    case TLConstructor_CRC32_topPeerCategoryGroups:
        t := m.To_TopPeerCategoryGroups()
        return t.Encode()
    case TLConstructor_CRC32_topPeerCategoryChannels:
        t := m.To_TopPeerCategoryChannels()
        return t.Encode()
    case TLConstructor_CRC32_topPeerCategoryPhoneCalls:
        t := m.To_TopPeerCategoryPhoneCalls()
        return t.Encode()
    case TLConstructor_CRC32_topPeerCategoryForwardUsers:
        t := m.To_TopPeerCategoryForwardUsers()
        return t.Encode()
    case TLConstructor_CRC32_topPeerCategoryForwardChats:
        t := m.To_TopPeerCategoryForwardChats()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *TopPeerCategory) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_topPeerCategoryBotsPM:
        m2 := &TLTopPeerCategoryBotsPM{&TopPeerCategory_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_topPeerCategoryBotsInline:
        m2 := &TLTopPeerCategoryBotsInline{&TopPeerCategory_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_topPeerCategoryCorrespondents:
        m2 := &TLTopPeerCategoryCorrespondents{&TopPeerCategory_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_topPeerCategoryGroups:
        m2 := &TLTopPeerCategoryGroups{&TopPeerCategory_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_topPeerCategoryChannels:
        m2 := &TLTopPeerCategoryChannels{&TopPeerCategory_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_topPeerCategoryPhoneCalls:
        m2 := &TLTopPeerCategoryPhoneCalls{&TopPeerCategory_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_topPeerCategoryForwardUsers:
        m2 := &TLTopPeerCategoryForwardUsers{&TopPeerCategory_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_topPeerCategoryForwardChats:
        m2 := &TLTopPeerCategoryForwardChats{&TopPeerCategory_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// topPeerCategoryBotsPM#ab661b5b = TopPeerCategory;
func (m *TopPeerCategory) To_TopPeerCategoryBotsPM() *TLTopPeerCategoryBotsPM {
    return &TLTopPeerCategoryBotsPM{
        Data2: m.Data2,
    }
}

// topPeerCategoryBotsInline#148677e2 = TopPeerCategory;
func (m *TopPeerCategory) To_TopPeerCategoryBotsInline() *TLTopPeerCategoryBotsInline {
    return &TLTopPeerCategoryBotsInline{
        Data2: m.Data2,
    }
}

// topPeerCategoryCorrespondents#637b7ed = TopPeerCategory;
func (m *TopPeerCategory) To_TopPeerCategoryCorrespondents() *TLTopPeerCategoryCorrespondents {
    return &TLTopPeerCategoryCorrespondents{
        Data2: m.Data2,
    }
}

// topPeerCategoryGroups#bd17a14a = TopPeerCategory;
func (m *TopPeerCategory) To_TopPeerCategoryGroups() *TLTopPeerCategoryGroups {
    return &TLTopPeerCategoryGroups{
        Data2: m.Data2,
    }
}

// topPeerCategoryChannels#161d9628 = TopPeerCategory;
func (m *TopPeerCategory) To_TopPeerCategoryChannels() *TLTopPeerCategoryChannels {
    return &TLTopPeerCategoryChannels{
        Data2: m.Data2,
    }
}

// topPeerCategoryPhoneCalls#1e76a78c = TopPeerCategory;
func (m *TopPeerCategory) To_TopPeerCategoryPhoneCalls() *TLTopPeerCategoryPhoneCalls {
    return &TLTopPeerCategoryPhoneCalls{
        Data2: m.Data2,
    }
}

// topPeerCategoryForwardUsers#a8406ca9 = TopPeerCategory;
func (m *TopPeerCategory) To_TopPeerCategoryForwardUsers() *TLTopPeerCategoryForwardUsers {
    return &TLTopPeerCategoryForwardUsers{
        Data2: m.Data2,
    }
}

// topPeerCategoryForwardChats#fbeec0f0 = TopPeerCategory;
func (m *TopPeerCategory) To_TopPeerCategoryForwardChats() *TLTopPeerCategoryForwardChats {
    return &TLTopPeerCategoryForwardChats{
        Data2: m.Data2,
    }
}



// topPeerCategoryBotsPM#ab661b5b = TopPeerCategory;
func (m *TLTopPeerCategoryBotsPM) To_TopPeerCategory() *TopPeerCategory {
    return &TopPeerCategory{
        Constructor: TLConstructor_CRC32_topPeerCategoryBotsPM,
        Data2: m.Data2,
    }
}



func NewTLTopPeerCategoryBotsPM() * TLTopPeerCategoryBotsPM {
    return &TLTopPeerCategoryBotsPM{ Data2: &TopPeerCategory_Data{} }
}

func (m* TLTopPeerCategoryBotsPM) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_topPeerCategoryBotsPM))


    return x.buf
}

func (m* TLTopPeerCategoryBotsPM) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// topPeerCategoryBotsInline#148677e2 = TopPeerCategory;
func (m *TLTopPeerCategoryBotsInline) To_TopPeerCategory() *TopPeerCategory {
    return &TopPeerCategory{
        Constructor: TLConstructor_CRC32_topPeerCategoryBotsInline,
        Data2: m.Data2,
    }
}



func NewTLTopPeerCategoryBotsInline() * TLTopPeerCategoryBotsInline {
    return &TLTopPeerCategoryBotsInline{ Data2: &TopPeerCategory_Data{} }
}

func (m* TLTopPeerCategoryBotsInline) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_topPeerCategoryBotsInline))


    return x.buf
}

func (m* TLTopPeerCategoryBotsInline) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// topPeerCategoryCorrespondents#637b7ed = TopPeerCategory;
func (m *TLTopPeerCategoryCorrespondents) To_TopPeerCategory() *TopPeerCategory {
    return &TopPeerCategory{
        Constructor: TLConstructor_CRC32_topPeerCategoryCorrespondents,
        Data2: m.Data2,
    }
}



func NewTLTopPeerCategoryCorrespondents() * TLTopPeerCategoryCorrespondents {
    return &TLTopPeerCategoryCorrespondents{ Data2: &TopPeerCategory_Data{} }
}

func (m* TLTopPeerCategoryCorrespondents) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_topPeerCategoryCorrespondents))


    return x.buf
}

func (m* TLTopPeerCategoryCorrespondents) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// topPeerCategoryGroups#bd17a14a = TopPeerCategory;
func (m *TLTopPeerCategoryGroups) To_TopPeerCategory() *TopPeerCategory {
    return &TopPeerCategory{
        Constructor: TLConstructor_CRC32_topPeerCategoryGroups,
        Data2: m.Data2,
    }
}



func NewTLTopPeerCategoryGroups() * TLTopPeerCategoryGroups {
    return &TLTopPeerCategoryGroups{ Data2: &TopPeerCategory_Data{} }
}

func (m* TLTopPeerCategoryGroups) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_topPeerCategoryGroups))


    return x.buf
}

func (m* TLTopPeerCategoryGroups) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// topPeerCategoryChannels#161d9628 = TopPeerCategory;
func (m *TLTopPeerCategoryChannels) To_TopPeerCategory() *TopPeerCategory {
    return &TopPeerCategory{
        Constructor: TLConstructor_CRC32_topPeerCategoryChannels,
        Data2: m.Data2,
    }
}



func NewTLTopPeerCategoryChannels() * TLTopPeerCategoryChannels {
    return &TLTopPeerCategoryChannels{ Data2: &TopPeerCategory_Data{} }
}

func (m* TLTopPeerCategoryChannels) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_topPeerCategoryChannels))


    return x.buf
}

func (m* TLTopPeerCategoryChannels) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// topPeerCategoryPhoneCalls#1e76a78c = TopPeerCategory;
func (m *TLTopPeerCategoryPhoneCalls) To_TopPeerCategory() *TopPeerCategory {
    return &TopPeerCategory{
        Constructor: TLConstructor_CRC32_topPeerCategoryPhoneCalls,
        Data2: m.Data2,
    }
}



func NewTLTopPeerCategoryPhoneCalls() * TLTopPeerCategoryPhoneCalls {
    return &TLTopPeerCategoryPhoneCalls{ Data2: &TopPeerCategory_Data{} }
}

func (m* TLTopPeerCategoryPhoneCalls) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_topPeerCategoryPhoneCalls))


    return x.buf
}

func (m* TLTopPeerCategoryPhoneCalls) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// topPeerCategoryForwardUsers#a8406ca9 = TopPeerCategory;
func (m *TLTopPeerCategoryForwardUsers) To_TopPeerCategory() *TopPeerCategory {
    return &TopPeerCategory{
        Constructor: TLConstructor_CRC32_topPeerCategoryForwardUsers,
        Data2: m.Data2,
    }
}



func NewTLTopPeerCategoryForwardUsers() * TLTopPeerCategoryForwardUsers {
    return &TLTopPeerCategoryForwardUsers{ Data2: &TopPeerCategory_Data{} }
}

func (m* TLTopPeerCategoryForwardUsers) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_topPeerCategoryForwardUsers))


    return x.buf
}

func (m* TLTopPeerCategoryForwardUsers) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// topPeerCategoryForwardChats#fbeec0f0 = TopPeerCategory;
func (m *TLTopPeerCategoryForwardChats) To_TopPeerCategory() *TopPeerCategory {
    return &TopPeerCategory{
        Constructor: TLConstructor_CRC32_topPeerCategoryForwardChats,
        Data2: m.Data2,
    }
}



func NewTLTopPeerCategoryForwardChats() * TLTopPeerCategoryForwardChats {
    return &TLTopPeerCategoryForwardChats{ Data2: &TopPeerCategory_Data{} }
}

func (m* TLTopPeerCategoryForwardChats) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_topPeerCategoryForwardChats))


    return x.buf
}

func (m* TLTopPeerCategoryForwardChats) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Phone_PhoneCall <--
//  + TL_PhonePhoneCall
//

func (m *Phone_PhoneCall) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_phone_phoneCall:
        t := m.To_PhonePhoneCall()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Phone_PhoneCall) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_phone_phoneCall:
        m2 := &TLPhonePhoneCall{&Phone_PhoneCall_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// phone.phoneCall#ec82e140 phone_call:PhoneCall users:Vector<User> = phone.PhoneCall;
func (m *Phone_PhoneCall) To_PhonePhoneCall() *TLPhonePhoneCall {
    return &TLPhonePhoneCall{
        Data2: m.Data2,
    }
}



// phone.phoneCall#ec82e140 phone_call:PhoneCall users:Vector<User> = phone.PhoneCall;
func (m *TLPhonePhoneCall) To_Phone_PhoneCall() *Phone_PhoneCall {
    return &Phone_PhoneCall{
        Constructor: TLConstructor_CRC32_phone_phoneCall,
        Data2: m.Data2,
    }
}


func (m *TLPhonePhoneCall) SetPhoneCall(v *PhoneCall) { m.Data2.PhoneCall = v }
func (m *TLPhonePhoneCall) GetPhoneCall() *PhoneCall { return m.Data2.PhoneCall }

func (m *TLPhonePhoneCall) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLPhonePhoneCall) GetUsers() []*User { return m.Data2.Users }


func NewTLPhonePhoneCall() * TLPhonePhoneCall {
    return &TLPhonePhoneCall{ Data2: &Phone_PhoneCall_Data{} }
}

func (m* TLPhonePhoneCall) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_phone_phoneCall))

    x.Bytes(m.GetPhoneCall().Encode())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLPhonePhoneCall) Decode(dbuf *DecodeBuf) error {
    m1 := &PhoneCall{}
    m1.Decode(dbuf)
    m.SetPhoneCall(m1)
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*User, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &User{}
	v2[i].Decode(dbuf)
}
m.SetUsers(v2)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// SecureFile <--
//  + TL_SecureFileEmpty
//  + TL_SecureFile
//

func (m *SecureFile) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_secureFileEmpty:
        t := m.To_SecureFileEmpty()
        return t.Encode()
    case TLConstructor_CRC32_secureFile:
        t := m.To_SecureFile()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *SecureFile) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_secureFileEmpty:
        m2 := &TLSecureFileEmpty{&SecureFile_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_secureFile:
        m2 := &TLSecureFile{&SecureFile_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// secureFileEmpty#64199744 = SecureFile;
func (m *SecureFile) To_SecureFileEmpty() *TLSecureFileEmpty {
    return &TLSecureFileEmpty{
        Data2: m.Data2,
    }
}

// secureFile#e0277a62 id:long access_hash:long size:int dc_id:int date:int file_hash:bytes secret:bytes = SecureFile;
func (m *SecureFile) To_SecureFile() *TLSecureFile {
    return &TLSecureFile{
        Data2: m.Data2,
    }
}



// secureFileEmpty#64199744 = SecureFile;
func (m *TLSecureFileEmpty) To_SecureFile() *SecureFile {
    return &SecureFile{
        Constructor: TLConstructor_CRC32_secureFileEmpty,
        Data2: m.Data2,
    }
}



func NewTLSecureFileEmpty() * TLSecureFileEmpty {
    return &TLSecureFileEmpty{ Data2: &SecureFile_Data{} }
}

func (m* TLSecureFileEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_secureFileEmpty))


    return x.buf
}

func (m* TLSecureFileEmpty) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// secureFile#e0277a62 id:long access_hash:long size:int dc_id:int date:int file_hash:bytes secret:bytes = SecureFile;
func (m *TLSecureFile) To_SecureFile() *SecureFile {
    return &SecureFile{
        Constructor: TLConstructor_CRC32_secureFile,
        Data2: m.Data2,
    }
}


func (m *TLSecureFile) SetId(v int64) { m.Data2.Id = v }
func (m *TLSecureFile) GetId() int64 { return m.Data2.Id }

func (m *TLSecureFile) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLSecureFile) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLSecureFile) SetSize(v int32) { m.Data2.Size_ = v }
func (m *TLSecureFile) GetSize() int32 { return m.Data2.Size_ }

func (m *TLSecureFile) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLSecureFile) GetDcId() int32 { return m.Data2.DcId }

func (m *TLSecureFile) SetDate(v int32) { m.Data2.Date = v }
func (m *TLSecureFile) GetDate() int32 { return m.Data2.Date }

func (m *TLSecureFile) SetFileHash(v []byte) { m.Data2.FileHash = v }
func (m *TLSecureFile) GetFileHash() []byte { return m.Data2.FileHash }

func (m *TLSecureFile) SetSecret(v []byte) { m.Data2.Secret = v }
func (m *TLSecureFile) GetSecret() []byte { return m.Data2.Secret }


func NewTLSecureFile() * TLSecureFile {
    return &TLSecureFile{ Data2: &SecureFile_Data{} }
}

func (m* TLSecureFile) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_secureFile))

    x.Long(m.GetId())
    x.Long(m.GetAccessHash())
    x.Int(m.GetSize())
    x.Int(m.GetDcId())
    x.Int(m.GetDate())
    x.StringBytes(m.GetFileHash())
    x.StringBytes(m.GetSecret())

    return x.buf
}

func (m* TLSecureFile) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())
    m.SetSize(dbuf.Int())
    m.SetDcId(dbuf.Int())
    m.SetDate(dbuf.Int())
    m.SetFileHash(dbuf.StringBytes())
    m.SetSecret(dbuf.StringBytes())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// SecurePlainData <--
//  + TL_SecurePlainPhone
//  + TL_SecurePlainEmail
//

func (m *SecurePlainData) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_securePlainPhone:
        t := m.To_SecurePlainPhone()
        return t.Encode()
    case TLConstructor_CRC32_securePlainEmail:
        t := m.To_SecurePlainEmail()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *SecurePlainData) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_securePlainPhone:
        m2 := &TLSecurePlainPhone{&SecurePlainData_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_securePlainEmail:
        m2 := &TLSecurePlainEmail{&SecurePlainData_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// securePlainPhone#7d6099dd phone:string = SecurePlainData;
func (m *SecurePlainData) To_SecurePlainPhone() *TLSecurePlainPhone {
    return &TLSecurePlainPhone{
        Data2: m.Data2,
    }
}

// securePlainEmail#21ec5a5f email:string = SecurePlainData;
func (m *SecurePlainData) To_SecurePlainEmail() *TLSecurePlainEmail {
    return &TLSecurePlainEmail{
        Data2: m.Data2,
    }
}



// securePlainPhone#7d6099dd phone:string = SecurePlainData;
func (m *TLSecurePlainPhone) To_SecurePlainData() *SecurePlainData {
    return &SecurePlainData{
        Constructor: TLConstructor_CRC32_securePlainPhone,
        Data2: m.Data2,
    }
}


func (m *TLSecurePlainPhone) SetPhone(v string) { m.Data2.Phone = v }
func (m *TLSecurePlainPhone) GetPhone() string { return m.Data2.Phone }


func NewTLSecurePlainPhone() * TLSecurePlainPhone {
    return &TLSecurePlainPhone{ Data2: &SecurePlainData_Data{} }
}

func (m* TLSecurePlainPhone) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_securePlainPhone))

    x.String(m.GetPhone())

    return x.buf
}

func (m* TLSecurePlainPhone) Decode(dbuf *DecodeBuf) error {
    m.SetPhone(dbuf.String())

    return dbuf.err
}
// securePlainEmail#21ec5a5f email:string = SecurePlainData;
func (m *TLSecurePlainEmail) To_SecurePlainData() *SecurePlainData {
    return &SecurePlainData{
        Constructor: TLConstructor_CRC32_securePlainEmail,
        Data2: m.Data2,
    }
}


func (m *TLSecurePlainEmail) SetEmail(v string) { m.Data2.Email = v }
func (m *TLSecurePlainEmail) GetEmail() string { return m.Data2.Email }


func NewTLSecurePlainEmail() * TLSecurePlainEmail {
    return &TLSecurePlainEmail{ Data2: &SecurePlainData_Data{} }
}

func (m* TLSecurePlainEmail) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_securePlainEmail))

    x.String(m.GetEmail())

    return x.buf
}

func (m* TLSecurePlainEmail) Decode(dbuf *DecodeBuf) error {
    m.SetEmail(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputSecureValue <--
//  + TL_InputSecureValue
//

func (m *InputSecureValue) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputSecureValue:
        t := m.To_InputSecureValue()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputSecureValue) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputSecureValue:
        m2 := &TLInputSecureValue{&InputSecureValue_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputSecureValue#db21d0a7 flags:# type:SecureValueType data:flags.0?SecureData front_side:flags.1?InputSecureFile reverse_side:flags.2?InputSecureFile selfie:flags.3?InputSecureFile translation:flags.6?Vector<InputSecureFile> files:flags.4?Vector<InputSecureFile> plain_data:flags.5?SecurePlainData = InputSecureValue;
func (m *InputSecureValue) To_InputSecureValue() *TLInputSecureValue {
    return &TLInputSecureValue{
        Data2: m.Data2,
    }
}



// inputSecureValue#db21d0a7 flags:# type:SecureValueType data:flags.0?SecureData front_side:flags.1?InputSecureFile reverse_side:flags.2?InputSecureFile selfie:flags.3?InputSecureFile translation:flags.6?Vector<InputSecureFile> files:flags.4?Vector<InputSecureFile> plain_data:flags.5?SecurePlainData = InputSecureValue;
func (m *TLInputSecureValue) To_InputSecureValue() *InputSecureValue {
    return &InputSecureValue{
        Constructor: TLConstructor_CRC32_inputSecureValue,
        Data2: m.Data2,
    }
}


func (m *TLInputSecureValue) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLInputSecureValue) GetType() *SecureValueType { return m.Data2.Type }

func (m *TLInputSecureValue) SetData(v *SecureData) { m.Data2.Data = v }
func (m *TLInputSecureValue) GetData() *SecureData { return m.Data2.Data }

func (m *TLInputSecureValue) SetFrontSide(v *InputSecureFile) { m.Data2.FrontSide = v }
func (m *TLInputSecureValue) GetFrontSide() *InputSecureFile { return m.Data2.FrontSide }

func (m *TLInputSecureValue) SetReverseSide(v *InputSecureFile) { m.Data2.ReverseSide = v }
func (m *TLInputSecureValue) GetReverseSide() *InputSecureFile { return m.Data2.ReverseSide }

func (m *TLInputSecureValue) SetSelfie(v *InputSecureFile) { m.Data2.Selfie = v }
func (m *TLInputSecureValue) GetSelfie() *InputSecureFile { return m.Data2.Selfie }

func (m *TLInputSecureValue) SetTranslation(v []*InputSecureFile) { m.Data2.Translation = v }
func (m *TLInputSecureValue) GetTranslation() []*InputSecureFile { return m.Data2.Translation }

func (m *TLInputSecureValue) SetFiles(v []*InputSecureFile) { m.Data2.Files = v }
func (m *TLInputSecureValue) GetFiles() []*InputSecureFile { return m.Data2.Files }

func (m *TLInputSecureValue) SetPlainData(v *SecurePlainData) { m.Data2.PlainData = v }
func (m *TLInputSecureValue) GetPlainData() *SecurePlainData { return m.Data2.PlainData }


func NewTLInputSecureValue() * TLInputSecureValue {
    return &TLInputSecureValue{ Data2: &InputSecureValue_Data{} }
}

func (m* TLInputSecureValue) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputSecureValue))

    // flags
    var flags uint32 = 0
    if m.GetData() != nil { flags |= 1 << 0 }
    if m.GetFrontSide() != nil { flags |= 1 << 1 }
    if m.GetReverseSide() != nil { flags |= 1 << 2 }
    if m.GetSelfie() != nil { flags |= 1 << 3 }
    if m.GetTranslation() != nil { flags |= 1 << 6 }
    if m.GetFiles() != nil { flags |= 1 << 4 }
    if m.GetPlainData() != nil { flags |= 1 << 5 }
	x.UInt(flags)

    x.Bytes(m.GetType().Encode())
    if (flags & (1 << 0)) != 0 { x.Bytes(m.GetData().Encode()) }
    if (flags & (1 << 1)) != 0 { x.Bytes(m.GetFrontSide().Encode()) }
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetReverseSide().Encode()) }
    if (flags & (1 << 3)) != 0 { x.Bytes(m.GetSelfie().Encode()) }
    if (flags & (1 << 6)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetTranslation())))
for _, v := range m.GetTranslation() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}
    if (flags & (1 << 4)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetFiles())))
for _, v := range m.GetFiles() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}
    if (flags & (1 << 5)) != 0 { x.Bytes(m.GetPlainData().Encode()) }

    return x.buf
}

func (m* TLInputSecureValue) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m2 := &SecureValueType{}
    m2.Decode(dbuf)
    m.SetType(m2)
    if (flags & (1 << 0)) != 0 {
 m3 := &SecureData{}
    m3.Decode(dbuf)
    m.SetData(m3) 
}
    if (flags & (1 << 1)) != 0 {
 m4 := &InputSecureFile{}
    m4.Decode(dbuf)
    m.SetFrontSide(m4) 
}
    if (flags & (1 << 2)) != 0 {
 m5 := &InputSecureFile{}
    m5.Decode(dbuf)
    m.SetReverseSide(m5) 
}
    if (flags & (1 << 3)) != 0 {
 m6 := &InputSecureFile{}
    m6.Decode(dbuf)
    m.SetSelfie(m6) 
}
    if (flags & (1 << 6)) != 0 {
 c7 := dbuf.Int()
if c7 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 7, c7)
	return dbuf.err
}
l7 := dbuf.Int()
v7 := make([]*InputSecureFile, l7)
for i := int32(0); i < l7; i++ {
	v7[i] = &InputSecureFile{}
	v7[i].Decode(dbuf)
}
m.SetTranslation(v7)
 
}
    if (flags & (1 << 4)) != 0 {
 c8 := dbuf.Int()
if c8 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 8, c8)
	return dbuf.err
}
l8 := dbuf.Int()
v8 := make([]*InputSecureFile, l8)
for i := int32(0); i < l8; i++ {
	v8[i] = &InputSecureFile{}
	v8[i].Decode(dbuf)
}
m.SetFiles(v8)
 
}
    if (flags & (1 << 5)) != 0 {
 m9 := &SecurePlainData{}
    m9.Decode(dbuf)
    m.SetPlainData(m9) 
}

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// ChatParticipants <--
//  + TL_ChatParticipantsForbidden
//  + TL_ChatParticipants
//

func (m *ChatParticipants) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_chatParticipantsForbidden:
        t := m.To_ChatParticipantsForbidden()
        return t.Encode()
    case TLConstructor_CRC32_chatParticipants:
        t := m.To_ChatParticipants()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *ChatParticipants) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_chatParticipantsForbidden:
        m2 := &TLChatParticipantsForbidden{&ChatParticipants_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_chatParticipants:
        m2 := &TLChatParticipants{&ChatParticipants_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// chatParticipantsForbidden#fc900c2b flags:# chat_id:int self_participant:flags.0?ChatParticipant = ChatParticipants;
func (m *ChatParticipants) To_ChatParticipantsForbidden() *TLChatParticipantsForbidden {
    return &TLChatParticipantsForbidden{
        Data2: m.Data2,
    }
}

// chatParticipants#3f460fed chat_id:int participants:Vector<ChatParticipant> version:int = ChatParticipants;
func (m *ChatParticipants) To_ChatParticipants() *TLChatParticipants {
    return &TLChatParticipants{
        Data2: m.Data2,
    }
}



// chatParticipantsForbidden#fc900c2b flags:# chat_id:int self_participant:flags.0?ChatParticipant = ChatParticipants;
func (m *TLChatParticipantsForbidden) To_ChatParticipants() *ChatParticipants {
    return &ChatParticipants{
        Constructor: TLConstructor_CRC32_chatParticipantsForbidden,
        Data2: m.Data2,
    }
}


func (m *TLChatParticipantsForbidden) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLChatParticipantsForbidden) GetChatId() int32 { return m.Data2.ChatId }

func (m *TLChatParticipantsForbidden) SetSelfParticipant(v *ChatParticipant) { m.Data2.SelfParticipant = v }
func (m *TLChatParticipantsForbidden) GetSelfParticipant() *ChatParticipant { return m.Data2.SelfParticipant }


func NewTLChatParticipantsForbidden() * TLChatParticipantsForbidden {
    return &TLChatParticipantsForbidden{ Data2: &ChatParticipants_Data{} }
}

func (m* TLChatParticipantsForbidden) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_chatParticipantsForbidden))

    // flags
    var flags uint32 = 0
    if m.GetSelfParticipant() != nil { flags |= 1 << 0 }
	x.UInt(flags)

    x.Int(m.GetChatId())
    if (flags & (1 << 0)) != 0 { x.Bytes(m.GetSelfParticipant().Encode()) }

    return x.buf
}

func (m* TLChatParticipantsForbidden) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetChatId(dbuf.Int())
    if (flags & (1 << 0)) != 0 {
 m3 := &ChatParticipant{}
    m3.Decode(dbuf)
    m.SetSelfParticipant(m3) 
}

    return dbuf.err
}
// chatParticipants#3f460fed chat_id:int participants:Vector<ChatParticipant> version:int = ChatParticipants;
func (m *TLChatParticipants) To_ChatParticipants() *ChatParticipants {
    return &ChatParticipants{
        Constructor: TLConstructor_CRC32_chatParticipants,
        Data2: m.Data2,
    }
}


func (m *TLChatParticipants) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLChatParticipants) GetChatId() int32 { return m.Data2.ChatId }

func (m *TLChatParticipants) SetParticipants(v []*ChatParticipant) { m.Data2.Participants = v }
func (m *TLChatParticipants) GetParticipants() []*ChatParticipant { return m.Data2.Participants }

func (m *TLChatParticipants) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLChatParticipants) GetVersion() int32 { return m.Data2.Version }


func NewTLChatParticipants() * TLChatParticipants {
    return &TLChatParticipants{ Data2: &ChatParticipants_Data{} }
}

func (m* TLChatParticipants) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_chatParticipants))

    x.Int(m.GetChatId())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetParticipants())))
for _, v := range m.GetParticipants() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(m.GetVersion())

    return x.buf
}

func (m* TLChatParticipants) Decode(dbuf *DecodeBuf) error {
    m.SetChatId(dbuf.Int())
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*ChatParticipant, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &ChatParticipant{}
	v2[i].Decode(dbuf)
}
m.SetParticipants(v2)

    m.SetVersion(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputChannel <--
//  + TL_InputChannelEmpty
//  + TL_InputChannel
//  + TL_InputChannelFromMessage
//

func (m *InputChannel) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputChannelEmpty:
        t := m.To_InputChannelEmpty()
        return t.Encode()
    case TLConstructor_CRC32_inputChannel:
        t := m.To_InputChannel()
        return t.Encode()
    case TLConstructor_CRC32_inputChannelFromMessage:
        t := m.To_InputChannelFromMessage()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputChannel) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputChannelEmpty:
        m2 := &TLInputChannelEmpty{&InputChannel_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputChannel:
        m2 := &TLInputChannel{&InputChannel_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputChannelFromMessage:
        m2 := &TLInputChannelFromMessage{&InputChannel_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputChannelEmpty#ee8c1e86 = InputChannel;
func (m *InputChannel) To_InputChannelEmpty() *TLInputChannelEmpty {
    return &TLInputChannelEmpty{
        Data2: m.Data2,
    }
}

// inputChannel#afeb712e channel_id:int access_hash:long = InputChannel;
func (m *InputChannel) To_InputChannel() *TLInputChannel {
    return &TLInputChannel{
        Data2: m.Data2,
    }
}

// inputChannelFromMessage#2a286531 peer:InputPeer msg_id:int channel_id:int = InputChannel;
func (m *InputChannel) To_InputChannelFromMessage() *TLInputChannelFromMessage {
    return &TLInputChannelFromMessage{
        Data2: m.Data2,
    }
}



// inputChannelEmpty#ee8c1e86 = InputChannel;
func (m *TLInputChannelEmpty) To_InputChannel() *InputChannel {
    return &InputChannel{
        Constructor: TLConstructor_CRC32_inputChannelEmpty,
        Data2: m.Data2,
    }
}



func NewTLInputChannelEmpty() * TLInputChannelEmpty {
    return &TLInputChannelEmpty{ Data2: &InputChannel_Data{} }
}

func (m* TLInputChannelEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputChannelEmpty))


    return x.buf
}

func (m* TLInputChannelEmpty) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputChannel#afeb712e channel_id:int access_hash:long = InputChannel;
func (m *TLInputChannel) To_InputChannel() *InputChannel {
    return &InputChannel{
        Constructor: TLConstructor_CRC32_inputChannel,
        Data2: m.Data2,
    }
}


func (m *TLInputChannel) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLInputChannel) GetChannelId() int32 { return m.Data2.ChannelId }

func (m *TLInputChannel) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputChannel) GetAccessHash() int64 { return m.Data2.AccessHash }


func NewTLInputChannel() * TLInputChannel {
    return &TLInputChannel{ Data2: &InputChannel_Data{} }
}

func (m* TLInputChannel) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputChannel))

    x.Int(m.GetChannelId())
    x.Long(m.GetAccessHash())

    return x.buf
}

func (m* TLInputChannel) Decode(dbuf *DecodeBuf) error {
    m.SetChannelId(dbuf.Int())
    m.SetAccessHash(dbuf.Long())

    return dbuf.err
}
// inputChannelFromMessage#2a286531 peer:InputPeer msg_id:int channel_id:int = InputChannel;
func (m *TLInputChannelFromMessage) To_InputChannel() *InputChannel {
    return &InputChannel{
        Constructor: TLConstructor_CRC32_inputChannelFromMessage,
        Data2: m.Data2,
    }
}


func (m *TLInputChannelFromMessage) SetPeer(v *InputPeer) { m.Data2.Peer = v }
func (m *TLInputChannelFromMessage) GetPeer() *InputPeer { return m.Data2.Peer }

func (m *TLInputChannelFromMessage) SetMsgId(v int32) { m.Data2.MsgId = v }
func (m *TLInputChannelFromMessage) GetMsgId() int32 { return m.Data2.MsgId }

func (m *TLInputChannelFromMessage) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLInputChannelFromMessage) GetChannelId() int32 { return m.Data2.ChannelId }


func NewTLInputChannelFromMessage() * TLInputChannelFromMessage {
    return &TLInputChannelFromMessage{ Data2: &InputChannel_Data{} }
}

func (m* TLInputChannelFromMessage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputChannelFromMessage))

    x.Bytes(m.GetPeer().Encode())
    x.Int(m.GetMsgId())
    x.Int(m.GetChannelId())

    return x.buf
}

func (m* TLInputChannelFromMessage) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.SetPeer(m1)
    m.SetMsgId(dbuf.Int())
    m.SetChannelId(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// BankCardOpenUrl <--
//  + TL_BankCardOpenUrl
//

func (m *BankCardOpenUrl) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_bankCardOpenUrl:
        t := m.To_BankCardOpenUrl()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *BankCardOpenUrl) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_bankCardOpenUrl:
        m2 := &TLBankCardOpenUrl{&BankCardOpenUrl_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// bankCardOpenUrl#f568028a url:string name:string = BankCardOpenUrl;
func (m *BankCardOpenUrl) To_BankCardOpenUrl() *TLBankCardOpenUrl {
    return &TLBankCardOpenUrl{
        Data2: m.Data2,
    }
}



// bankCardOpenUrl#f568028a url:string name:string = BankCardOpenUrl;
func (m *TLBankCardOpenUrl) To_BankCardOpenUrl() *BankCardOpenUrl {
    return &BankCardOpenUrl{
        Constructor: TLConstructor_CRC32_bankCardOpenUrl,
        Data2: m.Data2,
    }
}


func (m *TLBankCardOpenUrl) SetUrl(v string) { m.Data2.Url = v }
func (m *TLBankCardOpenUrl) GetUrl() string { return m.Data2.Url }

func (m *TLBankCardOpenUrl) SetName(v string) { m.Data2.Name = v }
func (m *TLBankCardOpenUrl) GetName() string { return m.Data2.Name }


func NewTLBankCardOpenUrl() * TLBankCardOpenUrl {
    return &TLBankCardOpenUrl{ Data2: &BankCardOpenUrl_Data{} }
}

func (m* TLBankCardOpenUrl) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_bankCardOpenUrl))

    x.String(m.GetUrl())
    x.String(m.GetName())

    return x.buf
}

func (m* TLBankCardOpenUrl) Decode(dbuf *DecodeBuf) error {
    m.SetUrl(dbuf.String())
    m.SetName(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// UserProfilePhoto <--
//  + TL_UserProfilePhotoEmpty
//  + TL_UserProfilePhoto
//  + TL_UserProfilePhoto114
//  + TL_UserProfilePhoto117
//

func (m *UserProfilePhoto) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_userProfilePhotoEmpty:
        t := m.To_UserProfilePhotoEmpty()
        return t.Encode()
    case TLConstructor_CRC32_userProfilePhoto:
        t := m.To_UserProfilePhoto()
        return t.Encode()
    case TLConstructor_CRC32_userProfilePhoto114:
        t := m.To_UserProfilePhoto114()
        return t.Encode()
    case TLConstructor_CRC32_userProfilePhoto117:
        t := m.To_UserProfilePhoto117()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *UserProfilePhoto) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_userProfilePhotoEmpty:
        m2 := &TLUserProfilePhotoEmpty{&UserProfilePhoto_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_userProfilePhoto:
        m2 := &TLUserProfilePhoto{&UserProfilePhoto_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_userProfilePhoto114:
        m2 := &TLUserProfilePhoto114{&UserProfilePhoto_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_userProfilePhoto117:
        m2 := &TLUserProfilePhoto117{&UserProfilePhoto_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// userProfilePhotoEmpty#4f11bae1 = UserProfilePhoto;
func (m *UserProfilePhoto) To_UserProfilePhotoEmpty() *TLUserProfilePhotoEmpty {
    return &TLUserProfilePhotoEmpty{
        Data2: m.Data2,
    }
}

// userProfilePhoto#d559d8c8 photo_id:long photo_small:FileLocation photo_big:FileLocation = UserProfilePhoto;
func (m *UserProfilePhoto) To_UserProfilePhoto() *TLUserProfilePhoto {
    return &TLUserProfilePhoto{
        Data2: m.Data2,
    }
}

// userProfilePhoto#ecd75d8c photo_id:long photo_small:FileLocation photo_big:FileLocation dc_id:int = UserProfilePhoto;
func (m *UserProfilePhoto) To_UserProfilePhoto114() *TLUserProfilePhoto114 {
    return &TLUserProfilePhoto114{
        Data2: m.Data2,
    }
}

// userProfilePhoto#69d3ab26 flags:# has_video:flags.0?true photo_id:long photo_small:FileLocation photo_big:FileLocation dc_id:int = UserProfilePhoto;
func (m *UserProfilePhoto) To_UserProfilePhoto117() *TLUserProfilePhoto117 {
    return &TLUserProfilePhoto117{
        Data2: m.Data2,
    }
}



// userProfilePhotoEmpty#4f11bae1 = UserProfilePhoto;
func (m *TLUserProfilePhotoEmpty) To_UserProfilePhoto() *UserProfilePhoto {
    return &UserProfilePhoto{
        Constructor: TLConstructor_CRC32_userProfilePhotoEmpty,
        Data2: m.Data2,
    }
}



func NewTLUserProfilePhotoEmpty() * TLUserProfilePhotoEmpty {
    return &TLUserProfilePhotoEmpty{ Data2: &UserProfilePhoto_Data{} }
}

func (m* TLUserProfilePhotoEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_userProfilePhotoEmpty))


    return x.buf
}

func (m* TLUserProfilePhotoEmpty) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// userProfilePhoto#d559d8c8 photo_id:long photo_small:FileLocation photo_big:FileLocation = UserProfilePhoto;
func (m *TLUserProfilePhoto) To_UserProfilePhoto() *UserProfilePhoto {
    return &UserProfilePhoto{
        Constructor: TLConstructor_CRC32_userProfilePhoto,
        Data2: m.Data2,
    }
}


func (m *TLUserProfilePhoto) SetPhotoId(v int64) { m.Data2.PhotoId = v }
func (m *TLUserProfilePhoto) GetPhotoId() int64 { return m.Data2.PhotoId }

func (m *TLUserProfilePhoto) SetPhotoSmall(v *FileLocation) { m.Data2.PhotoSmall = v }
func (m *TLUserProfilePhoto) GetPhotoSmall() *FileLocation { return m.Data2.PhotoSmall }

func (m *TLUserProfilePhoto) SetPhotoBig(v *FileLocation) { m.Data2.PhotoBig = v }
func (m *TLUserProfilePhoto) GetPhotoBig() *FileLocation { return m.Data2.PhotoBig }


func NewTLUserProfilePhoto() * TLUserProfilePhoto {
    return &TLUserProfilePhoto{ Data2: &UserProfilePhoto_Data{} }
}

func (m* TLUserProfilePhoto) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_userProfilePhoto))

    x.Long(m.GetPhotoId())
    x.Bytes(m.GetPhotoSmall().Encode())
    x.Bytes(m.GetPhotoBig().Encode())

    return x.buf
}

func (m* TLUserProfilePhoto) Decode(dbuf *DecodeBuf) error {
    m.SetPhotoId(dbuf.Long())
    m2 := &FileLocation{}
    m2.Decode(dbuf)
    m.SetPhotoSmall(m2)
    m3 := &FileLocation{}
    m3.Decode(dbuf)
    m.SetPhotoBig(m3)

    return dbuf.err
}
// userProfilePhoto#ecd75d8c photo_id:long photo_small:FileLocation photo_big:FileLocation dc_id:int = UserProfilePhoto;
func (m *TLUserProfilePhoto114) To_UserProfilePhoto() *UserProfilePhoto {
    return &UserProfilePhoto{
        Constructor: TLConstructor_CRC32_userProfilePhoto114,
        Data2: m.Data2,
    }
}


func (m *TLUserProfilePhoto114) SetPhotoId(v int64) { m.Data2.PhotoId = v }
func (m *TLUserProfilePhoto114) GetPhotoId() int64 { return m.Data2.PhotoId }

func (m *TLUserProfilePhoto114) SetPhotoSmall(v *FileLocation) { m.Data2.PhotoSmall = v }
func (m *TLUserProfilePhoto114) GetPhotoSmall() *FileLocation { return m.Data2.PhotoSmall }

func (m *TLUserProfilePhoto114) SetPhotoBig(v *FileLocation) { m.Data2.PhotoBig = v }
func (m *TLUserProfilePhoto114) GetPhotoBig() *FileLocation { return m.Data2.PhotoBig }

func (m *TLUserProfilePhoto114) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLUserProfilePhoto114) GetDcId() int32 { return m.Data2.DcId }


func NewTLUserProfilePhoto114() * TLUserProfilePhoto114 {
    return &TLUserProfilePhoto114{ Data2: &UserProfilePhoto_Data{} }
}

func (m* TLUserProfilePhoto114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_userProfilePhoto114))

    x.Long(m.GetPhotoId())
    x.Bytes(m.GetPhotoSmall().Encode())
    x.Bytes(m.GetPhotoBig().Encode())
    x.Int(m.GetDcId())

    return x.buf
}

func (m* TLUserProfilePhoto114) Decode(dbuf *DecodeBuf) error {
    m.SetPhotoId(dbuf.Long())
    m2 := &FileLocation{}
    m2.Decode(dbuf)
    m.SetPhotoSmall(m2)
    m3 := &FileLocation{}
    m3.Decode(dbuf)
    m.SetPhotoBig(m3)
    m.SetDcId(dbuf.Int())

    return dbuf.err
}
// userProfilePhoto#69d3ab26 flags:# has_video:flags.0?true photo_id:long photo_small:FileLocation photo_big:FileLocation dc_id:int = UserProfilePhoto;
func (m *TLUserProfilePhoto117) To_UserProfilePhoto() *UserProfilePhoto {
    return &UserProfilePhoto{
        Constructor: TLConstructor_CRC32_userProfilePhoto117,
        Data2: m.Data2,
    }
}


func (m *TLUserProfilePhoto117) SetHasVideo(v bool) { m.Data2.HasVideo = v }
func (m *TLUserProfilePhoto117) GetHasVideo() bool { return m.Data2.HasVideo }

func (m *TLUserProfilePhoto117) SetPhotoId(v int64) { m.Data2.PhotoId = v }
func (m *TLUserProfilePhoto117) GetPhotoId() int64 { return m.Data2.PhotoId }

func (m *TLUserProfilePhoto117) SetPhotoSmall(v *FileLocation) { m.Data2.PhotoSmall = v }
func (m *TLUserProfilePhoto117) GetPhotoSmall() *FileLocation { return m.Data2.PhotoSmall }

func (m *TLUserProfilePhoto117) SetPhotoBig(v *FileLocation) { m.Data2.PhotoBig = v }
func (m *TLUserProfilePhoto117) GetPhotoBig() *FileLocation { return m.Data2.PhotoBig }

func (m *TLUserProfilePhoto117) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLUserProfilePhoto117) GetDcId() int32 { return m.Data2.DcId }


func NewTLUserProfilePhoto117() * TLUserProfilePhoto117 {
    return &TLUserProfilePhoto117{ Data2: &UserProfilePhoto_Data{} }
}

func (m* TLUserProfilePhoto117) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_userProfilePhoto117))

    // flags
    var flags uint32 = 0
    if m.GetHasVideo() == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Long(m.GetPhotoId())
    x.Bytes(m.GetPhotoSmall().Encode())
    x.Bytes(m.GetPhotoBig().Encode())
    x.Int(m.GetDcId())

    return x.buf
}

func (m* TLUserProfilePhoto117) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetHasVideo(true) }
    m.SetPhotoId(dbuf.Long())
    m4 := &FileLocation{}
    m4.Decode(dbuf)
    m.SetPhotoSmall(m4)
    m5 := &FileLocation{}
    m5.Decode(dbuf)
    m.SetPhotoBig(m5)
    m.SetDcId(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Auth_Authorization <--
//  + TL_AuthAuthorization
//  + TL_AuthAuthorizationSignUpRequired
//

func (m *Auth_Authorization) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_auth_authorization:
        t := m.To_AuthAuthorization()
        return t.Encode()
    case TLConstructor_CRC32_auth_authorizationSignUpRequired:
        t := m.To_AuthAuthorizationSignUpRequired()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Auth_Authorization) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_auth_authorization:
        m2 := &TLAuthAuthorization{&Auth_Authorization_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_auth_authorizationSignUpRequired:
        m2 := &TLAuthAuthorizationSignUpRequired{&Auth_Authorization_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// auth.authorization#cd050916 flags:# tmp_sessions:flags.0?int user:User = auth.Authorization;
func (m *Auth_Authorization) To_AuthAuthorization() *TLAuthAuthorization {
    return &TLAuthAuthorization{
        Data2: m.Data2,
    }
}

// auth.authorizationSignUpRequired#44747e9a flags:# terms_of_service:flags.0?help.TermsOfService = auth.Authorization;
func (m *Auth_Authorization) To_AuthAuthorizationSignUpRequired() *TLAuthAuthorizationSignUpRequired {
    return &TLAuthAuthorizationSignUpRequired{
        Data2: m.Data2,
    }
}



// auth.authorization#cd050916 flags:# tmp_sessions:flags.0?int user:User = auth.Authorization;
func (m *TLAuthAuthorization) To_Auth_Authorization() *Auth_Authorization {
    return &Auth_Authorization{
        Constructor: TLConstructor_CRC32_auth_authorization,
        Data2: m.Data2,
    }
}


func (m *TLAuthAuthorization) SetTmpSessions(v int32) { m.Data2.TmpSessions = v }
func (m *TLAuthAuthorization) GetTmpSessions() int32 { return m.Data2.TmpSessions }

func (m *TLAuthAuthorization) SetUser(v *User) { m.Data2.User = v }
func (m *TLAuthAuthorization) GetUser() *User { return m.Data2.User }


func NewTLAuthAuthorization() * TLAuthAuthorization {
    return &TLAuthAuthorization{ Data2: &Auth_Authorization_Data{} }
}

func (m* TLAuthAuthorization) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_auth_authorization))

    // flags
    var flags uint32 = 0
    if m.GetTmpSessions() != 0 { flags |= 1 << 0 }
	x.UInt(flags)

    if (flags & (1 << 0)) != 0 { x.Int(m.GetTmpSessions()) }
    x.Bytes(m.GetUser().Encode())

    return x.buf
}

func (m* TLAuthAuthorization) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetTmpSessions(dbuf.Int()) }
    m3 := &User{}
    m3.Decode(dbuf)
    m.SetUser(m3)

    return dbuf.err
}
// auth.authorizationSignUpRequired#44747e9a flags:# terms_of_service:flags.0?help.TermsOfService = auth.Authorization;
func (m *TLAuthAuthorizationSignUpRequired) To_Auth_Authorization() *Auth_Authorization {
    return &Auth_Authorization{
        Constructor: TLConstructor_CRC32_auth_authorizationSignUpRequired,
        Data2: m.Data2,
    }
}


func (m *TLAuthAuthorizationSignUpRequired) SetTermsOfService(v *Help_TermsOfService) { m.Data2.TermsOfService = v }
func (m *TLAuthAuthorizationSignUpRequired) GetTermsOfService() *Help_TermsOfService { return m.Data2.TermsOfService }


func NewTLAuthAuthorizationSignUpRequired() * TLAuthAuthorizationSignUpRequired {
    return &TLAuthAuthorizationSignUpRequired{ Data2: &Auth_Authorization_Data{} }
}

func (m* TLAuthAuthorizationSignUpRequired) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_auth_authorizationSignUpRequired))

    // flags
    var flags uint32 = 0
    if m.GetTermsOfService() != nil { flags |= 1 << 0 }
	x.UInt(flags)

    if (flags & (1 << 0)) != 0 { x.Bytes(m.GetTermsOfService().Encode()) }

    return x.buf
}

func (m* TLAuthAuthorizationSignUpRequired) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 {
 m2 := &Help_TermsOfService{}
    m2.Decode(dbuf)
    m.SetTermsOfService(m2) 
}

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Contacts_Contacts <--
//  + TL_ContactsContactsNotModified
//  + TL_ContactsContacts
//

func (m *Contacts_Contacts) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_contacts_contactsNotModified:
        t := m.To_ContactsContactsNotModified()
        return t.Encode()
    case TLConstructor_CRC32_contacts_contacts:
        t := m.To_ContactsContacts()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Contacts_Contacts) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_contacts_contactsNotModified:
        m2 := &TLContactsContactsNotModified{&Contacts_Contacts_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_contacts_contacts:
        m2 := &TLContactsContacts{&Contacts_Contacts_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// contacts.contactsNotModified#b74ba9d2 = contacts.Contacts;
func (m *Contacts_Contacts) To_ContactsContactsNotModified() *TLContactsContactsNotModified {
    return &TLContactsContactsNotModified{
        Data2: m.Data2,
    }
}

// contacts.contacts#eae87e42 contacts:Vector<Contact> saved_count:int users:Vector<User> = contacts.Contacts;
func (m *Contacts_Contacts) To_ContactsContacts() *TLContactsContacts {
    return &TLContactsContacts{
        Data2: m.Data2,
    }
}



// contacts.contactsNotModified#b74ba9d2 = contacts.Contacts;
func (m *TLContactsContactsNotModified) To_Contacts_Contacts() *Contacts_Contacts {
    return &Contacts_Contacts{
        Constructor: TLConstructor_CRC32_contacts_contactsNotModified,
        Data2: m.Data2,
    }
}



func NewTLContactsContactsNotModified() * TLContactsContactsNotModified {
    return &TLContactsContactsNotModified{ Data2: &Contacts_Contacts_Data{} }
}

func (m* TLContactsContactsNotModified) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_contacts_contactsNotModified))


    return x.buf
}

func (m* TLContactsContactsNotModified) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// contacts.contacts#eae87e42 contacts:Vector<Contact> saved_count:int users:Vector<User> = contacts.Contacts;
func (m *TLContactsContacts) To_Contacts_Contacts() *Contacts_Contacts {
    return &Contacts_Contacts{
        Constructor: TLConstructor_CRC32_contacts_contacts,
        Data2: m.Data2,
    }
}


func (m *TLContactsContacts) SetContacts(v []*Contact) { m.Data2.Contacts = v }
func (m *TLContactsContacts) GetContacts() []*Contact { return m.Data2.Contacts }

func (m *TLContactsContacts) SetSavedCount(v int32) { m.Data2.SavedCount = v }
func (m *TLContactsContacts) GetSavedCount() int32 { return m.Data2.SavedCount }

func (m *TLContactsContacts) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLContactsContacts) GetUsers() []*User { return m.Data2.Users }


func NewTLContactsContacts() * TLContactsContacts {
    return &TLContactsContacts{ Data2: &Contacts_Contacts_Data{} }
}

func (m* TLContactsContacts) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_contacts_contacts))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetContacts())))
for _, v := range m.GetContacts() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(m.GetSavedCount())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLContactsContacts) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*Contact, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &Contact{}
	v1[i].Decode(dbuf)
}
m.SetContacts(v1)

    m.SetSavedCount(dbuf.Int())
    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*User, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &User{}
	v3[i].Decode(dbuf)
}
m.SetUsers(v3)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Help_Support <--
//  + TL_HelpSupport
//

func (m *Help_Support) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_help_support:
        t := m.To_HelpSupport()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Help_Support) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_help_support:
        m2 := &TLHelpSupport{&Help_Support_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// help.support#17c6b5f6 phone_number:string user:User = help.Support;
func (m *Help_Support) To_HelpSupport() *TLHelpSupport {
    return &TLHelpSupport{
        Data2: m.Data2,
    }
}



// help.support#17c6b5f6 phone_number:string user:User = help.Support;
func (m *TLHelpSupport) To_Help_Support() *Help_Support {
    return &Help_Support{
        Constructor: TLConstructor_CRC32_help_support,
        Data2: m.Data2,
    }
}


func (m *TLHelpSupport) SetPhoneNumber(v string) { m.Data2.PhoneNumber = v }
func (m *TLHelpSupport) GetPhoneNumber() string { return m.Data2.PhoneNumber }

func (m *TLHelpSupport) SetUser(v *User) { m.Data2.User = v }
func (m *TLHelpSupport) GetUser() *User { return m.Data2.User }


func NewTLHelpSupport() * TLHelpSupport {
    return &TLHelpSupport{ Data2: &Help_Support_Data{} }
}

func (m* TLHelpSupport) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_help_support))

    x.String(m.GetPhoneNumber())
    x.Bytes(m.GetUser().Encode())

    return x.buf
}

func (m* TLHelpSupport) Decode(dbuf *DecodeBuf) error {
    m.SetPhoneNumber(dbuf.String())
    m2 := &User{}
    m2.Decode(dbuf)
    m.SetUser(m2)

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Messages_MessageEditData <--
//  + TL_MessagesMessageEditData
//

func (m *Messages_MessageEditData) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messages_messageEditData:
        t := m.To_MessagesMessageEditData()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Messages_MessageEditData) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messages_messageEditData:
        m2 := &TLMessagesMessageEditData{&Messages_MessageEditData_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messages.messageEditData#26b5dde6 flags:# caption:flags.0?true = messages.MessageEditData;
func (m *Messages_MessageEditData) To_MessagesMessageEditData() *TLMessagesMessageEditData {
    return &TLMessagesMessageEditData{
        Data2: m.Data2,
    }
}



// messages.messageEditData#26b5dde6 flags:# caption:flags.0?true = messages.MessageEditData;
func (m *TLMessagesMessageEditData) To_Messages_MessageEditData() *Messages_MessageEditData {
    return &Messages_MessageEditData{
        Constructor: TLConstructor_CRC32_messages_messageEditData,
        Data2: m.Data2,
    }
}


func (m *TLMessagesMessageEditData) SetCaption(v bool) { m.Data2.Caption = v }
func (m *TLMessagesMessageEditData) GetCaption() bool { return m.Data2.Caption }


func NewTLMessagesMessageEditData() * TLMessagesMessageEditData {
    return &TLMessagesMessageEditData{ Data2: &Messages_MessageEditData_Data{} }
}

func (m* TLMessagesMessageEditData) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_messageEditData))

    // flags
    var flags uint32 = 0
    if m.GetCaption() == true { flags |= 1 << 0 }
	x.UInt(flags)

    

    return x.buf
}

func (m* TLMessagesMessageEditData) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetCaption(true) }

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Payments_PaymentForm <--
//  + TL_PaymentsPaymentForm
//

func (m *Payments_PaymentForm) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_payments_paymentForm:
        t := m.To_PaymentsPaymentForm()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Payments_PaymentForm) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_payments_paymentForm:
        m2 := &TLPaymentsPaymentForm{&Payments_PaymentForm_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// payments.paymentForm#3f56aea3 flags:# can_save_credentials:flags.2?true password_missing:flags.3?true bot_id:int invoice:Invoice provider_id:int url:string native_provider:flags.4?string native_params:flags.4?DataJSON saved_info:flags.0?PaymentRequestedInfo saved_credentials:flags.1?PaymentSavedCredentials users:Vector<User> = payments.PaymentForm;
func (m *Payments_PaymentForm) To_PaymentsPaymentForm() *TLPaymentsPaymentForm {
    return &TLPaymentsPaymentForm{
        Data2: m.Data2,
    }
}



// payments.paymentForm#3f56aea3 flags:# can_save_credentials:flags.2?true password_missing:flags.3?true bot_id:int invoice:Invoice provider_id:int url:string native_provider:flags.4?string native_params:flags.4?DataJSON saved_info:flags.0?PaymentRequestedInfo saved_credentials:flags.1?PaymentSavedCredentials users:Vector<User> = payments.PaymentForm;
func (m *TLPaymentsPaymentForm) To_Payments_PaymentForm() *Payments_PaymentForm {
    return &Payments_PaymentForm{
        Constructor: TLConstructor_CRC32_payments_paymentForm,
        Data2: m.Data2,
    }
}


func (m *TLPaymentsPaymentForm) SetCanSaveCredentials(v bool) { m.Data2.CanSaveCredentials = v }
func (m *TLPaymentsPaymentForm) GetCanSaveCredentials() bool { return m.Data2.CanSaveCredentials }

func (m *TLPaymentsPaymentForm) SetPasswordMissing(v bool) { m.Data2.PasswordMissing = v }
func (m *TLPaymentsPaymentForm) GetPasswordMissing() bool { return m.Data2.PasswordMissing }

func (m *TLPaymentsPaymentForm) SetBotId(v int32) { m.Data2.BotId = v }
func (m *TLPaymentsPaymentForm) GetBotId() int32 { return m.Data2.BotId }

func (m *TLPaymentsPaymentForm) SetInvoice(v *Invoice) { m.Data2.Invoice = v }
func (m *TLPaymentsPaymentForm) GetInvoice() *Invoice { return m.Data2.Invoice }

func (m *TLPaymentsPaymentForm) SetProviderId(v int32) { m.Data2.ProviderId = v }
func (m *TLPaymentsPaymentForm) GetProviderId() int32 { return m.Data2.ProviderId }

func (m *TLPaymentsPaymentForm) SetUrl(v string) { m.Data2.Url = v }
func (m *TLPaymentsPaymentForm) GetUrl() string { return m.Data2.Url }

func (m *TLPaymentsPaymentForm) SetNativeProvider(v string) { m.Data2.NativeProvider = v }
func (m *TLPaymentsPaymentForm) GetNativeProvider() string { return m.Data2.NativeProvider }

func (m *TLPaymentsPaymentForm) SetNativeParams(v *DataJSON) { m.Data2.NativeParams = v }
func (m *TLPaymentsPaymentForm) GetNativeParams() *DataJSON { return m.Data2.NativeParams }

func (m *TLPaymentsPaymentForm) SetSavedInfo(v *PaymentRequestedInfo) { m.Data2.SavedInfo = v }
func (m *TLPaymentsPaymentForm) GetSavedInfo() *PaymentRequestedInfo { return m.Data2.SavedInfo }

func (m *TLPaymentsPaymentForm) SetSavedCredentials(v *PaymentSavedCredentials) { m.Data2.SavedCredentials = v }
func (m *TLPaymentsPaymentForm) GetSavedCredentials() *PaymentSavedCredentials { return m.Data2.SavedCredentials }

func (m *TLPaymentsPaymentForm) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLPaymentsPaymentForm) GetUsers() []*User { return m.Data2.Users }


func NewTLPaymentsPaymentForm() * TLPaymentsPaymentForm {
    return &TLPaymentsPaymentForm{ Data2: &Payments_PaymentForm_Data{} }
}

func (m* TLPaymentsPaymentForm) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_payments_paymentForm))

    // flags
    var flags uint32 = 0
    if m.GetCanSaveCredentials() == true { flags |= 1 << 2 }
    if m.GetPasswordMissing() == true { flags |= 1 << 3 }
    if m.GetNativeProvider() != "" { flags |= 1 << 4 }
    if m.GetNativeParams() != nil { flags |= 1 << 4 }
    if m.GetSavedInfo() != nil { flags |= 1 << 0 }
    if m.GetSavedCredentials() != nil { flags |= 1 << 1 }
	x.UInt(flags)

    
    
    x.Int(m.GetBotId())
    x.Bytes(m.GetInvoice().Encode())
    x.Int(m.GetProviderId())
    x.String(m.GetUrl())
    if (flags & (1 << 4)) != 0 { x.String(m.GetNativeProvider()) }
    if (flags & (1 << 4)) != 0 { x.Bytes(m.GetNativeParams().Encode()) }
    if (flags & (1 << 0)) != 0 { x.Bytes(m.GetSavedInfo().Encode()) }
    if (flags & (1 << 1)) != 0 { x.Bytes(m.GetSavedCredentials().Encode()) }
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLPaymentsPaymentForm) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 2)) != 0 { m.SetCanSaveCredentials(true) }
    if (flags & (1 << 3)) != 0 { m.SetPasswordMissing(true) }
    m.SetBotId(dbuf.Int())
    m5 := &Invoice{}
    m5.Decode(dbuf)
    m.SetInvoice(m5)
    m.SetProviderId(dbuf.Int())
    m.SetUrl(dbuf.String())
    if (flags & (1 << 4)) != 0 { m.SetNativeProvider(dbuf.String()) }
    if (flags & (1 << 4)) != 0 {
 m9 := &DataJSON{}
    m9.Decode(dbuf)
    m.SetNativeParams(m9) 
}
    if (flags & (1 << 0)) != 0 {
 m10 := &PaymentRequestedInfo{}
    m10.Decode(dbuf)
    m.SetSavedInfo(m10) 
}
    if (flags & (1 << 1)) != 0 {
 m11 := &PaymentSavedCredentials{}
    m11.Decode(dbuf)
    m.SetSavedCredentials(m11) 
}
    c12 := dbuf.Int()
if c12 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 12, c12)
	return dbuf.err
}
l12 := dbuf.Int()
v12 := make([]*User, l12)
for i := int32(0); i < l12; i++ {
	v12[i] = &User{}
	v12[i].Decode(dbuf)
}
m.SetUsers(v12)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Payments_PaymentResult <--
//  + TL_PaymentsPaymentResult
//  + TL_PaymentsPaymentVerficationNeeded
//  + TL_PaymentsPaymentVerificationNeeded
//

func (m *Payments_PaymentResult) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_payments_paymentResult:
        t := m.To_PaymentsPaymentResult()
        return t.Encode()
    case TLConstructor_CRC32_payments_paymentVerficationNeeded:
        t := m.To_PaymentsPaymentVerficationNeeded()
        return t.Encode()
    case TLConstructor_CRC32_payments_paymentVerificationNeeded:
        t := m.To_PaymentsPaymentVerificationNeeded()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Payments_PaymentResult) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_payments_paymentResult:
        m2 := &TLPaymentsPaymentResult{&Payments_PaymentResult_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_payments_paymentVerficationNeeded:
        m2 := &TLPaymentsPaymentVerficationNeeded{&Payments_PaymentResult_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_payments_paymentVerificationNeeded:
        m2 := &TLPaymentsPaymentVerificationNeeded{&Payments_PaymentResult_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// payments.paymentResult#4e5f810d updates:Updates = payments.PaymentResult;
func (m *Payments_PaymentResult) To_PaymentsPaymentResult() *TLPaymentsPaymentResult {
    return &TLPaymentsPaymentResult{
        Data2: m.Data2,
    }
}

// payments.paymentVerficationNeeded#6b56b921 url:string = payments.PaymentResult;
func (m *Payments_PaymentResult) To_PaymentsPaymentVerficationNeeded() *TLPaymentsPaymentVerficationNeeded {
    return &TLPaymentsPaymentVerficationNeeded{
        Data2: m.Data2,
    }
}

// payments.paymentVerificationNeeded#d8411139 url:string = payments.PaymentResult;
func (m *Payments_PaymentResult) To_PaymentsPaymentVerificationNeeded() *TLPaymentsPaymentVerificationNeeded {
    return &TLPaymentsPaymentVerificationNeeded{
        Data2: m.Data2,
    }
}



// payments.paymentResult#4e5f810d updates:Updates = payments.PaymentResult;
func (m *TLPaymentsPaymentResult) To_Payments_PaymentResult() *Payments_PaymentResult {
    return &Payments_PaymentResult{
        Constructor: TLConstructor_CRC32_payments_paymentResult,
        Data2: m.Data2,
    }
}


func (m *TLPaymentsPaymentResult) SetUpdates(v *Updates) { m.Data2.Updates = v }
func (m *TLPaymentsPaymentResult) GetUpdates() *Updates { return m.Data2.Updates }


func NewTLPaymentsPaymentResult() * TLPaymentsPaymentResult {
    return &TLPaymentsPaymentResult{ Data2: &Payments_PaymentResult_Data{} }
}

func (m* TLPaymentsPaymentResult) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_payments_paymentResult))

    x.Bytes(m.GetUpdates().Encode())

    return x.buf
}

func (m* TLPaymentsPaymentResult) Decode(dbuf *DecodeBuf) error {
    m1 := &Updates{}
    m1.Decode(dbuf)
    m.SetUpdates(m1)

    return dbuf.err
}
// payments.paymentVerficationNeeded#6b56b921 url:string = payments.PaymentResult;
func (m *TLPaymentsPaymentVerficationNeeded) To_Payments_PaymentResult() *Payments_PaymentResult {
    return &Payments_PaymentResult{
        Constructor: TLConstructor_CRC32_payments_paymentVerficationNeeded,
        Data2: m.Data2,
    }
}


func (m *TLPaymentsPaymentVerficationNeeded) SetUrl(v string) { m.Data2.Url = v }
func (m *TLPaymentsPaymentVerficationNeeded) GetUrl() string { return m.Data2.Url }


func NewTLPaymentsPaymentVerficationNeeded() * TLPaymentsPaymentVerficationNeeded {
    return &TLPaymentsPaymentVerficationNeeded{ Data2: &Payments_PaymentResult_Data{} }
}

func (m* TLPaymentsPaymentVerficationNeeded) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_payments_paymentVerficationNeeded))

    x.String(m.GetUrl())

    return x.buf
}

func (m* TLPaymentsPaymentVerficationNeeded) Decode(dbuf *DecodeBuf) error {
    m.SetUrl(dbuf.String())

    return dbuf.err
}
// payments.paymentVerificationNeeded#d8411139 url:string = payments.PaymentResult;
func (m *TLPaymentsPaymentVerificationNeeded) To_Payments_PaymentResult() *Payments_PaymentResult {
    return &Payments_PaymentResult{
        Constructor: TLConstructor_CRC32_payments_paymentVerificationNeeded,
        Data2: m.Data2,
    }
}


func (m *TLPaymentsPaymentVerificationNeeded) SetUrl(v string) { m.Data2.Url = v }
func (m *TLPaymentsPaymentVerificationNeeded) GetUrl() string { return m.Data2.Url }


func NewTLPaymentsPaymentVerificationNeeded() * TLPaymentsPaymentVerificationNeeded {
    return &TLPaymentsPaymentVerificationNeeded{ Data2: &Payments_PaymentResult_Data{} }
}

func (m* TLPaymentsPaymentVerificationNeeded) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_payments_paymentVerificationNeeded))

    x.String(m.GetUrl())

    return x.buf
}

func (m* TLPaymentsPaymentVerificationNeeded) Decode(dbuf *DecodeBuf) error {
    m.SetUrl(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Bool <--
//  + TL_BoolFalse
//  + TL_BoolTrue
//

func (m *Bool) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_boolFalse:
        t := m.To_BoolFalse()
        return t.Encode()
    case TLConstructor_CRC32_boolTrue:
        t := m.To_BoolTrue()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Bool) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_boolFalse:
        m2 := &TLBoolFalse{&Bool_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_boolTrue:
        m2 := &TLBoolTrue{&Bool_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// boolFalse#bc799737 = Bool;
func (m *Bool) To_BoolFalse() *TLBoolFalse {
    return &TLBoolFalse{
        Data2: m.Data2,
    }
}

// boolTrue#997275b5 = Bool;
func (m *Bool) To_BoolTrue() *TLBoolTrue {
    return &TLBoolTrue{
        Data2: m.Data2,
    }
}



// boolFalse#bc799737 = Bool;
func (m *TLBoolFalse) To_Bool() *Bool {
    return &Bool{
        Constructor: TLConstructor_CRC32_boolFalse,
        Data2: m.Data2,
    }
}



func NewTLBoolFalse() * TLBoolFalse {
    return &TLBoolFalse{ Data2: &Bool_Data{} }
}

func (m* TLBoolFalse) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_boolFalse))


    return x.buf
}

func (m* TLBoolFalse) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// boolTrue#997275b5 = Bool;
func (m *TLBoolTrue) To_Bool() *Bool {
    return &Bool{
        Constructor: TLConstructor_CRC32_boolTrue,
        Data2: m.Data2,
    }
}



func NewTLBoolTrue() * TLBoolTrue {
    return &TLBoolTrue{ Data2: &Bool_Data{} }
}

func (m* TLBoolTrue) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_boolTrue))


    return x.buf
}

func (m* TLBoolTrue) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Messages_Dialogs <--
//  + TL_MessagesDialogs
//  + TL_MessagesDialogsSlice
//  + TL_MessagesDialogsNotModified
//

func (m *Messages_Dialogs) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messages_dialogs:
        t := m.To_MessagesDialogs()
        return t.Encode()
    case TLConstructor_CRC32_messages_dialogsSlice:
        t := m.To_MessagesDialogsSlice()
        return t.Encode()
    case TLConstructor_CRC32_messages_dialogsNotModified:
        t := m.To_MessagesDialogsNotModified()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Messages_Dialogs) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messages_dialogs:
        m2 := &TLMessagesDialogs{&Messages_Dialogs_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messages_dialogsSlice:
        m2 := &TLMessagesDialogsSlice{&Messages_Dialogs_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messages_dialogsNotModified:
        m2 := &TLMessagesDialogsNotModified{&Messages_Dialogs_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messages.dialogs#15ba6c40 dialogs:Vector<Dialog> messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Dialogs;
func (m *Messages_Dialogs) To_MessagesDialogs() *TLMessagesDialogs {
    return &TLMessagesDialogs{
        Data2: m.Data2,
    }
}

// messages.dialogsSlice#71e094f3 count:int dialogs:Vector<Dialog> messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Dialogs;
func (m *Messages_Dialogs) To_MessagesDialogsSlice() *TLMessagesDialogsSlice {
    return &TLMessagesDialogsSlice{
        Data2: m.Data2,
    }
}

// messages.dialogsNotModified#f0e3e596 count:int = messages.Dialogs;
func (m *Messages_Dialogs) To_MessagesDialogsNotModified() *TLMessagesDialogsNotModified {
    return &TLMessagesDialogsNotModified{
        Data2: m.Data2,
    }
}



// messages.dialogs#15ba6c40 dialogs:Vector<Dialog> messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Dialogs;
func (m *TLMessagesDialogs) To_Messages_Dialogs() *Messages_Dialogs {
    return &Messages_Dialogs{
        Constructor: TLConstructor_CRC32_messages_dialogs,
        Data2: m.Data2,
    }
}


func (m *TLMessagesDialogs) SetDialogs(v []*Dialog) { m.Data2.Dialogs = v }
func (m *TLMessagesDialogs) GetDialogs() []*Dialog { return m.Data2.Dialogs }

func (m *TLMessagesDialogs) SetMessages(v []*Message) { m.Data2.Messages = v }
func (m *TLMessagesDialogs) GetMessages() []*Message { return m.Data2.Messages }

func (m *TLMessagesDialogs) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesDialogs) GetChats() []*Chat { return m.Data2.Chats }

func (m *TLMessagesDialogs) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesDialogs) GetUsers() []*User { return m.Data2.Users }


func NewTLMessagesDialogs() * TLMessagesDialogs {
    return &TLMessagesDialogs{ Data2: &Messages_Dialogs_Data{} }
}

func (m* TLMessagesDialogs) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_dialogs))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetDialogs())))
for _, v := range m.GetDialogs() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetMessages())))
for _, v := range m.GetMessages() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetChats())))
for _, v := range m.GetChats() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLMessagesDialogs) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*Dialog, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &Dialog{}
	v1[i].Decode(dbuf)
}
m.SetDialogs(v1)

    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*Message, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &Message{}
	v2[i].Decode(dbuf)
}
m.SetMessages(v2)

    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*Chat, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &Chat{}
	v3[i].Decode(dbuf)
}
m.SetChats(v3)

    c4 := dbuf.Int()
if c4 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
	return dbuf.err
}
l4 := dbuf.Int()
v4 := make([]*User, l4)
for i := int32(0); i < l4; i++ {
	v4[i] = &User{}
	v4[i].Decode(dbuf)
}
m.SetUsers(v4)


    return dbuf.err
}
// messages.dialogsSlice#71e094f3 count:int dialogs:Vector<Dialog> messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Dialogs;
func (m *TLMessagesDialogsSlice) To_Messages_Dialogs() *Messages_Dialogs {
    return &Messages_Dialogs{
        Constructor: TLConstructor_CRC32_messages_dialogsSlice,
        Data2: m.Data2,
    }
}


func (m *TLMessagesDialogsSlice) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesDialogsSlice) GetCount() int32 { return m.Data2.Count }

func (m *TLMessagesDialogsSlice) SetDialogs(v []*Dialog) { m.Data2.Dialogs = v }
func (m *TLMessagesDialogsSlice) GetDialogs() []*Dialog { return m.Data2.Dialogs }

func (m *TLMessagesDialogsSlice) SetMessages(v []*Message) { m.Data2.Messages = v }
func (m *TLMessagesDialogsSlice) GetMessages() []*Message { return m.Data2.Messages }

func (m *TLMessagesDialogsSlice) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesDialogsSlice) GetChats() []*Chat { return m.Data2.Chats }

func (m *TLMessagesDialogsSlice) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesDialogsSlice) GetUsers() []*User { return m.Data2.Users }


func NewTLMessagesDialogsSlice() * TLMessagesDialogsSlice {
    return &TLMessagesDialogsSlice{ Data2: &Messages_Dialogs_Data{} }
}

func (m* TLMessagesDialogsSlice) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_dialogsSlice))

    x.Int(m.GetCount())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetDialogs())))
for _, v := range m.GetDialogs() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetMessages())))
for _, v := range m.GetMessages() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetChats())))
for _, v := range m.GetChats() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLMessagesDialogsSlice) Decode(dbuf *DecodeBuf) error {
    m.SetCount(dbuf.Int())
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*Dialog, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &Dialog{}
	v2[i].Decode(dbuf)
}
m.SetDialogs(v2)

    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*Message, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &Message{}
	v3[i].Decode(dbuf)
}
m.SetMessages(v3)

    c4 := dbuf.Int()
if c4 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
	return dbuf.err
}
l4 := dbuf.Int()
v4 := make([]*Chat, l4)
for i := int32(0); i < l4; i++ {
	v4[i] = &Chat{}
	v4[i].Decode(dbuf)
}
m.SetChats(v4)

    c5 := dbuf.Int()
if c5 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 5, c5)
	return dbuf.err
}
l5 := dbuf.Int()
v5 := make([]*User, l5)
for i := int32(0); i < l5; i++ {
	v5[i] = &User{}
	v5[i].Decode(dbuf)
}
m.SetUsers(v5)


    return dbuf.err
}
// messages.dialogsNotModified#f0e3e596 count:int = messages.Dialogs;
func (m *TLMessagesDialogsNotModified) To_Messages_Dialogs() *Messages_Dialogs {
    return &Messages_Dialogs{
        Constructor: TLConstructor_CRC32_messages_dialogsNotModified,
        Data2: m.Data2,
    }
}


func (m *TLMessagesDialogsNotModified) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesDialogsNotModified) GetCount() int32 { return m.Data2.Count }


func NewTLMessagesDialogsNotModified() * TLMessagesDialogsNotModified {
    return &TLMessagesDialogsNotModified{ Data2: &Messages_Dialogs_Data{} }
}

func (m* TLMessagesDialogsNotModified) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_dialogsNotModified))

    x.Int(m.GetCount())

    return x.buf
}

func (m* TLMessagesDialogsNotModified) Decode(dbuf *DecodeBuf) error {
    m.SetCount(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Updates_State <--
//  + TL_UpdatesState
//

func (m *Updates_State) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_updates_state:
        t := m.To_UpdatesState()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Updates_State) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_updates_state:
        m2 := &TLUpdatesState{&Updates_State_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// updates.state#a56c2a3e pts:int qts:int date:int seq:int unread_count:int = updates.State;
func (m *Updates_State) To_UpdatesState() *TLUpdatesState {
    return &TLUpdatesState{
        Data2: m.Data2,
    }
}



// updates.state#a56c2a3e pts:int qts:int date:int seq:int unread_count:int = updates.State;
func (m *TLUpdatesState) To_Updates_State() *Updates_State {
    return &Updates_State{
        Constructor: TLConstructor_CRC32_updates_state,
        Data2: m.Data2,
    }
}


func (m *TLUpdatesState) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdatesState) GetPts() int32 { return m.Data2.Pts }

func (m *TLUpdatesState) SetQts(v int32) { m.Data2.Qts = v }
func (m *TLUpdatesState) GetQts() int32 { return m.Data2.Qts }

func (m *TLUpdatesState) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdatesState) GetDate() int32 { return m.Data2.Date }

func (m *TLUpdatesState) SetSeq(v int32) { m.Data2.Seq = v }
func (m *TLUpdatesState) GetSeq() int32 { return m.Data2.Seq }

func (m *TLUpdatesState) SetUnreadCount(v int32) { m.Data2.UnreadCount = v }
func (m *TLUpdatesState) GetUnreadCount() int32 { return m.Data2.UnreadCount }


func NewTLUpdatesState() * TLUpdatesState {
    return &TLUpdatesState{ Data2: &Updates_State_Data{} }
}

func (m* TLUpdatesState) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updates_state))

    x.Int(m.GetPts())
    x.Int(m.GetQts())
    x.Int(m.GetDate())
    x.Int(m.GetSeq())
    x.Int(m.GetUnreadCount())

    return x.buf
}

func (m* TLUpdatesState) Decode(dbuf *DecodeBuf) error {
    m.SetPts(dbuf.Int())
    m.SetQts(dbuf.Int())
    m.SetDate(dbuf.Int())
    m.SetSeq(dbuf.Int())
    m.SetUnreadCount(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Messages_AffectedMessages <--
//  + TL_MessagesAffectedMessages
//

func (m *Messages_AffectedMessages) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messages_affectedMessages:
        t := m.To_MessagesAffectedMessages()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Messages_AffectedMessages) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messages_affectedMessages:
        m2 := &TLMessagesAffectedMessages{&Messages_AffectedMessages_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messages.affectedMessages#84d19185 pts:int pts_count:int = messages.AffectedMessages;
func (m *Messages_AffectedMessages) To_MessagesAffectedMessages() *TLMessagesAffectedMessages {
    return &TLMessagesAffectedMessages{
        Data2: m.Data2,
    }
}



// messages.affectedMessages#84d19185 pts:int pts_count:int = messages.AffectedMessages;
func (m *TLMessagesAffectedMessages) To_Messages_AffectedMessages() *Messages_AffectedMessages {
    return &Messages_AffectedMessages{
        Constructor: TLConstructor_CRC32_messages_affectedMessages,
        Data2: m.Data2,
    }
}


func (m *TLMessagesAffectedMessages) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLMessagesAffectedMessages) GetPts() int32 { return m.Data2.Pts }

func (m *TLMessagesAffectedMessages) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLMessagesAffectedMessages) GetPtsCount() int32 { return m.Data2.PtsCount }


func NewTLMessagesAffectedMessages() * TLMessagesAffectedMessages {
    return &TLMessagesAffectedMessages{ Data2: &Messages_AffectedMessages_Data{} }
}

func (m* TLMessagesAffectedMessages) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_affectedMessages))

    x.Int(m.GetPts())
    x.Int(m.GetPtsCount())

    return x.buf
}

func (m* TLMessagesAffectedMessages) Decode(dbuf *DecodeBuf) error {
    m.SetPts(dbuf.Int())
    m.SetPtsCount(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// PollAnswerVoters <--
//  + TL_PollAnswerVoters
//

func (m *PollAnswerVoters) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_pollAnswerVoters:
        t := m.To_PollAnswerVoters()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *PollAnswerVoters) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_pollAnswerVoters:
        m2 := &TLPollAnswerVoters{&PollAnswerVoters_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// pollAnswerVoters#3b6ddad2 flags:# chosen:flags.0?true correct:flags.1?true option:bytes voters:int = PollAnswerVoters;
func (m *PollAnswerVoters) To_PollAnswerVoters() *TLPollAnswerVoters {
    return &TLPollAnswerVoters{
        Data2: m.Data2,
    }
}



// pollAnswerVoters#3b6ddad2 flags:# chosen:flags.0?true correct:flags.1?true option:bytes voters:int = PollAnswerVoters;
func (m *TLPollAnswerVoters) To_PollAnswerVoters() *PollAnswerVoters {
    return &PollAnswerVoters{
        Constructor: TLConstructor_CRC32_pollAnswerVoters,
        Data2: m.Data2,
    }
}


func (m *TLPollAnswerVoters) SetChosen(v bool) { m.Data2.Chosen = v }
func (m *TLPollAnswerVoters) GetChosen() bool { return m.Data2.Chosen }

func (m *TLPollAnswerVoters) SetCorrect(v bool) { m.Data2.Correct = v }
func (m *TLPollAnswerVoters) GetCorrect() bool { return m.Data2.Correct }

func (m *TLPollAnswerVoters) SetOption(v []byte) { m.Data2.Option = v }
func (m *TLPollAnswerVoters) GetOption() []byte { return m.Data2.Option }

func (m *TLPollAnswerVoters) SetVoters(v int32) { m.Data2.Voters = v }
func (m *TLPollAnswerVoters) GetVoters() int32 { return m.Data2.Voters }


func NewTLPollAnswerVoters() * TLPollAnswerVoters {
    return &TLPollAnswerVoters{ Data2: &PollAnswerVoters_Data{} }
}

func (m* TLPollAnswerVoters) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pollAnswerVoters))

    // flags
    var flags uint32 = 0
    if m.GetChosen() == true { flags |= 1 << 0 }
    if m.GetCorrect() == true { flags |= 1 << 1 }
	x.UInt(flags)

    
    
    x.StringBytes(m.GetOption())
    x.Int(m.GetVoters())

    return x.buf
}

func (m* TLPollAnswerVoters) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetChosen(true) }
    if (flags & (1 << 1)) != 0 { m.SetCorrect(true) }
    m.SetOption(dbuf.StringBytes())
    m.SetVoters(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputCheckPasswordSRP <--
//  + TL_InputCheckPasswordEmpty
//  + TL_InputCheckPasswordSRP
//

func (m *InputCheckPasswordSRP) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputCheckPasswordEmpty:
        t := m.To_InputCheckPasswordEmpty()
        return t.Encode()
    case TLConstructor_CRC32_inputCheckPasswordSRP:
        t := m.To_InputCheckPasswordSRP()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputCheckPasswordSRP) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputCheckPasswordEmpty:
        m2 := &TLInputCheckPasswordEmpty{&InputCheckPasswordSRP_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputCheckPasswordSRP:
        m2 := &TLInputCheckPasswordSRP{&InputCheckPasswordSRP_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputCheckPasswordEmpty#9880f658 = InputCheckPasswordSRP;
func (m *InputCheckPasswordSRP) To_InputCheckPasswordEmpty() *TLInputCheckPasswordEmpty {
    return &TLInputCheckPasswordEmpty{
        Data2: m.Data2,
    }
}

// inputCheckPasswordSRP#d27ff082 srp_id:long A:bytes M1:bytes = InputCheckPasswordSRP;
func (m *InputCheckPasswordSRP) To_InputCheckPasswordSRP() *TLInputCheckPasswordSRP {
    return &TLInputCheckPasswordSRP{
        Data2: m.Data2,
    }
}



// inputCheckPasswordEmpty#9880f658 = InputCheckPasswordSRP;
func (m *TLInputCheckPasswordEmpty) To_InputCheckPasswordSRP() *InputCheckPasswordSRP {
    return &InputCheckPasswordSRP{
        Constructor: TLConstructor_CRC32_inputCheckPasswordEmpty,
        Data2: m.Data2,
    }
}



func NewTLInputCheckPasswordEmpty() * TLInputCheckPasswordEmpty {
    return &TLInputCheckPasswordEmpty{ Data2: &InputCheckPasswordSRP_Data{} }
}

func (m* TLInputCheckPasswordEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputCheckPasswordEmpty))


    return x.buf
}

func (m* TLInputCheckPasswordEmpty) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputCheckPasswordSRP#d27ff082 srp_id:long A:bytes M1:bytes = InputCheckPasswordSRP;
func (m *TLInputCheckPasswordSRP) To_InputCheckPasswordSRP() *InputCheckPasswordSRP {
    return &InputCheckPasswordSRP{
        Constructor: TLConstructor_CRC32_inputCheckPasswordSRP,
        Data2: m.Data2,
    }
}


func (m *TLInputCheckPasswordSRP) SetSrpId(v int64) { m.Data2.SrpId = v }
func (m *TLInputCheckPasswordSRP) GetSrpId() int64 { return m.Data2.SrpId }

func (m *TLInputCheckPasswordSRP) SetA(v []byte) { m.Data2.A = v }
func (m *TLInputCheckPasswordSRP) GetA() []byte { return m.Data2.A }

func (m *TLInputCheckPasswordSRP) SetM1(v []byte) { m.Data2.M1 = v }
func (m *TLInputCheckPasswordSRP) GetM1() []byte { return m.Data2.M1 }


func NewTLInputCheckPasswordSRP() * TLInputCheckPasswordSRP {
    return &TLInputCheckPasswordSRP{ Data2: &InputCheckPasswordSRP_Data{} }
}

func (m* TLInputCheckPasswordSRP) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputCheckPasswordSRP))

    x.Long(m.GetSrpId())
    x.StringBytes(m.GetA())
    x.StringBytes(m.GetM1())

    return x.buf
}

func (m* TLInputCheckPasswordSRP) Decode(dbuf *DecodeBuf) error {
    m.SetSrpId(dbuf.Long())
    m.SetA(dbuf.StringBytes())
    m.SetM1(dbuf.StringBytes())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Messages_AffectedHistory <--
//  + TL_MessagesAffectedHistory
//

func (m *Messages_AffectedHistory) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messages_affectedHistory:
        t := m.To_MessagesAffectedHistory()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Messages_AffectedHistory) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messages_affectedHistory:
        m2 := &TLMessagesAffectedHistory{&Messages_AffectedHistory_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messages.affectedHistory#b45c69d1 pts:int pts_count:int offset:int = messages.AffectedHistory;
func (m *Messages_AffectedHistory) To_MessagesAffectedHistory() *TLMessagesAffectedHistory {
    return &TLMessagesAffectedHistory{
        Data2: m.Data2,
    }
}



// messages.affectedHistory#b45c69d1 pts:int pts_count:int offset:int = messages.AffectedHistory;
func (m *TLMessagesAffectedHistory) To_Messages_AffectedHistory() *Messages_AffectedHistory {
    return &Messages_AffectedHistory{
        Constructor: TLConstructor_CRC32_messages_affectedHistory,
        Data2: m.Data2,
    }
}


func (m *TLMessagesAffectedHistory) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLMessagesAffectedHistory) GetPts() int32 { return m.Data2.Pts }

func (m *TLMessagesAffectedHistory) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLMessagesAffectedHistory) GetPtsCount() int32 { return m.Data2.PtsCount }

func (m *TLMessagesAffectedHistory) SetOffset(v int32) { m.Data2.Offset = v }
func (m *TLMessagesAffectedHistory) GetOffset() int32 { return m.Data2.Offset }


func NewTLMessagesAffectedHistory() * TLMessagesAffectedHistory {
    return &TLMessagesAffectedHistory{ Data2: &Messages_AffectedHistory_Data{} }
}

func (m* TLMessagesAffectedHistory) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_affectedHistory))

    x.Int(m.GetPts())
    x.Int(m.GetPtsCount())
    x.Int(m.GetOffset())

    return x.buf
}

func (m* TLMessagesAffectedHistory) Decode(dbuf *DecodeBuf) error {
    m.SetPts(dbuf.Int())
    m.SetPtsCount(dbuf.Int())
    m.SetOffset(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// PopularContact <--
//  + TL_PopularContact
//

func (m *PopularContact) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_popularContact:
        t := m.To_PopularContact()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *PopularContact) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_popularContact:
        m2 := &TLPopularContact{&PopularContact_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// popularContact#5ce14175 client_id:long importers:int = PopularContact;
func (m *PopularContact) To_PopularContact() *TLPopularContact {
    return &TLPopularContact{
        Data2: m.Data2,
    }
}



// popularContact#5ce14175 client_id:long importers:int = PopularContact;
func (m *TLPopularContact) To_PopularContact() *PopularContact {
    return &PopularContact{
        Constructor: TLConstructor_CRC32_popularContact,
        Data2: m.Data2,
    }
}


func (m *TLPopularContact) SetClientId(v int64) { m.Data2.ClientId = v }
func (m *TLPopularContact) GetClientId() int64 { return m.Data2.ClientId }

func (m *TLPopularContact) SetImporters(v int32) { m.Data2.Importers = v }
func (m *TLPopularContact) GetImporters() int32 { return m.Data2.Importers }


func NewTLPopularContact() * TLPopularContact {
    return &TLPopularContact{ Data2: &PopularContact_Data{} }
}

func (m* TLPopularContact) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_popularContact))

    x.Long(m.GetClientId())
    x.Int(m.GetImporters())

    return x.buf
}

func (m* TLPopularContact) Decode(dbuf *DecodeBuf) error {
    m.SetClientId(dbuf.Long())
    m.SetImporters(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// SecureSecretSettings <--
//  + TL_SecureSecretSettings
//

func (m *SecureSecretSettings) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_secureSecretSettings:
        t := m.To_SecureSecretSettings()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *SecureSecretSettings) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_secureSecretSettings:
        m2 := &TLSecureSecretSettings{&SecureSecretSettings_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// secureSecretSettings#1527bcac secure_algo:SecurePasswordKdfAlgo secure_secret:bytes secure_secret_id:long = SecureSecretSettings;
func (m *SecureSecretSettings) To_SecureSecretSettings() *TLSecureSecretSettings {
    return &TLSecureSecretSettings{
        Data2: m.Data2,
    }
}



// secureSecretSettings#1527bcac secure_algo:SecurePasswordKdfAlgo secure_secret:bytes secure_secret_id:long = SecureSecretSettings;
func (m *TLSecureSecretSettings) To_SecureSecretSettings() *SecureSecretSettings {
    return &SecureSecretSettings{
        Constructor: TLConstructor_CRC32_secureSecretSettings,
        Data2: m.Data2,
    }
}


func (m *TLSecureSecretSettings) SetSecureAlgo(v *SecurePasswordKdfAlgo) { m.Data2.SecureAlgo = v }
func (m *TLSecureSecretSettings) GetSecureAlgo() *SecurePasswordKdfAlgo { return m.Data2.SecureAlgo }

func (m *TLSecureSecretSettings) SetSecureSecret(v []byte) { m.Data2.SecureSecret = v }
func (m *TLSecureSecretSettings) GetSecureSecret() []byte { return m.Data2.SecureSecret }

func (m *TLSecureSecretSettings) SetSecureSecretId(v int64) { m.Data2.SecureSecretId = v }
func (m *TLSecureSecretSettings) GetSecureSecretId() int64 { return m.Data2.SecureSecretId }


func NewTLSecureSecretSettings() * TLSecureSecretSettings {
    return &TLSecureSecretSettings{ Data2: &SecureSecretSettings_Data{} }
}

func (m* TLSecureSecretSettings) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_secureSecretSettings))

    x.Bytes(m.GetSecureAlgo().Encode())
    x.StringBytes(m.GetSecureSecret())
    x.Long(m.GetSecureSecretId())

    return x.buf
}

func (m* TLSecureSecretSettings) Decode(dbuf *DecodeBuf) error {
    m1 := &SecurePasswordKdfAlgo{}
    m1.Decode(dbuf)
    m.SetSecureAlgo(m1)
    m.SetSecureSecret(dbuf.StringBytes())
    m.SetSecureSecretId(dbuf.Long())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// User <--
//  + TL_UserEmpty
//  + TL_User
//  + TL_User114
//

func (m *User) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_userEmpty:
        t := m.To_UserEmpty()
        return t.Encode()
    case TLConstructor_CRC32_user:
        t := m.To_User()
        return t.Encode()
    case TLConstructor_CRC32_user114:
        t := m.To_User114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *User) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_userEmpty:
        m2 := &TLUserEmpty{&User_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_user:
        m2 := &TLUser{&User_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_user114:
        m2 := &TLUser114{&User_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// userEmpty#200250ba id:int = User;
func (m *User) To_UserEmpty() *TLUserEmpty {
    return &TLUserEmpty{
        Data2: m.Data2,
    }
}

// user#2e13f4c3 flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true id:int access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?string bot_inline_placeholder:flags.19?string lang_code:flags.22?string = User;
func (m *User) To_User() *TLUser {
    return &TLUser{
        Data2: m.Data2,
    }
}

// user#938458c1 flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true support:flags.23?true scam:flags.24?true id:int access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?Vector<RestrictionReason> bot_inline_placeholder:flags.19?string lang_code:flags.22?string = User;
func (m *User) To_User114() *TLUser114 {
    return &TLUser114{
        Data2: m.Data2,
    }
}



// userEmpty#200250ba id:int = User;
func (m *TLUserEmpty) To_User() *User {
    return &User{
        Constructor: TLConstructor_CRC32_userEmpty,
        Data2: m.Data2,
    }
}


func (m *TLUserEmpty) SetId(v int32) { m.Data2.Id = v }
func (m *TLUserEmpty) GetId() int32 { return m.Data2.Id }


func NewTLUserEmpty() * TLUserEmpty {
    return &TLUserEmpty{ Data2: &User_Data{} }
}

func (m* TLUserEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_userEmpty))

    x.Int(m.GetId())

    return x.buf
}

func (m* TLUserEmpty) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Int())

    return dbuf.err
}
// user#2e13f4c3 flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true id:int access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?string bot_inline_placeholder:flags.19?string lang_code:flags.22?string = User;
func (m *TLUser) To_User() *User {
    return &User{
        Constructor: TLConstructor_CRC32_user,
        Data2: m.Data2,
    }
}


func (m *TLUser) SetSelf(v bool) { m.Data2.Self = v }
func (m *TLUser) GetSelf() bool { return m.Data2.Self }

func (m *TLUser) SetContact(v bool) { m.Data2.Contact = v }
func (m *TLUser) GetContact() bool { return m.Data2.Contact }

func (m *TLUser) SetMutualContact(v bool) { m.Data2.MutualContact = v }
func (m *TLUser) GetMutualContact() bool { return m.Data2.MutualContact }

func (m *TLUser) SetDeleted(v bool) { m.Data2.Deleted = v }
func (m *TLUser) GetDeleted() bool { return m.Data2.Deleted }

func (m *TLUser) SetBot(v bool) { m.Data2.Bot = v }
func (m *TLUser) GetBot() bool { return m.Data2.Bot }

func (m *TLUser) SetBotChatHistory(v bool) { m.Data2.BotChatHistory = v }
func (m *TLUser) GetBotChatHistory() bool { return m.Data2.BotChatHistory }

func (m *TLUser) SetBotNochats(v bool) { m.Data2.BotNochats = v }
func (m *TLUser) GetBotNochats() bool { return m.Data2.BotNochats }

func (m *TLUser) SetVerified(v bool) { m.Data2.Verified = v }
func (m *TLUser) GetVerified() bool { return m.Data2.Verified }

func (m *TLUser) SetRestricted(v bool) { m.Data2.Restricted = v }
func (m *TLUser) GetRestricted() bool { return m.Data2.Restricted }

func (m *TLUser) SetMin(v bool) { m.Data2.Min = v }
func (m *TLUser) GetMin() bool { return m.Data2.Min }

func (m *TLUser) SetBotInlineGeo(v bool) { m.Data2.BotInlineGeo = v }
func (m *TLUser) GetBotInlineGeo() bool { return m.Data2.BotInlineGeo }

func (m *TLUser) SetId(v int32) { m.Data2.Id = v }
func (m *TLUser) GetId() int32 { return m.Data2.Id }

func (m *TLUser) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLUser) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLUser) SetFirstName(v string) { m.Data2.FirstName = v }
func (m *TLUser) GetFirstName() string { return m.Data2.FirstName }

func (m *TLUser) SetLastName(v string) { m.Data2.LastName = v }
func (m *TLUser) GetLastName() string { return m.Data2.LastName }

func (m *TLUser) SetUsername(v string) { m.Data2.Username = v }
func (m *TLUser) GetUsername() string { return m.Data2.Username }

func (m *TLUser) SetPhone(v string) { m.Data2.Phone = v }
func (m *TLUser) GetPhone() string { return m.Data2.Phone }

func (m *TLUser) SetPhoto(v *UserProfilePhoto) { m.Data2.Photo = v }
func (m *TLUser) GetPhoto() *UserProfilePhoto { return m.Data2.Photo }

func (m *TLUser) SetStatus(v *UserStatus) { m.Data2.Status = v }
func (m *TLUser) GetStatus() *UserStatus { return m.Data2.Status }

func (m *TLUser) SetBotInfoVersion(v int32) { m.Data2.BotInfoVersion = v }
func (m *TLUser) GetBotInfoVersion() int32 { return m.Data2.BotInfoVersion }

func (m *TLUser) SetRestrictionReason(v string) { m.Data2.RestrictionReason_21 = v }
func (m *TLUser) GetRestrictionReason() string { return m.Data2.RestrictionReason_21 }

func (m *TLUser) SetBotInlinePlaceholder(v string) { m.Data2.BotInlinePlaceholder = v }
func (m *TLUser) GetBotInlinePlaceholder() string { return m.Data2.BotInlinePlaceholder }

func (m *TLUser) SetLangCode(v string) { m.Data2.LangCode = v }
func (m *TLUser) GetLangCode() string { return m.Data2.LangCode }


func NewTLUser() * TLUser {
    return &TLUser{ Data2: &User_Data{} }
}

func (m* TLUser) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_user))

    // flags
    var flags uint32 = 0
    if m.GetSelf() == true { flags |= 1 << 10 }
    if m.GetContact() == true { flags |= 1 << 11 }
    if m.GetMutualContact() == true { flags |= 1 << 12 }
    if m.GetDeleted() == true { flags |= 1 << 13 }
    if m.GetBot() == true { flags |= 1 << 14 }
    if m.GetBotChatHistory() == true { flags |= 1 << 15 }
    if m.GetBotNochats() == true { flags |= 1 << 16 }
    if m.GetVerified() == true { flags |= 1 << 17 }
    if m.GetRestricted() == true { flags |= 1 << 18 }
    if m.GetMin() == true { flags |= 1 << 20 }
    if m.GetBotInlineGeo() == true { flags |= 1 << 21 }
    if m.GetAccessHash() != 0 { flags |= 1 << 0 }
    if m.GetFirstName() != "" { flags |= 1 << 1 }
    if m.GetLastName() != "" { flags |= 1 << 2 }
    if m.GetUsername() != "" { flags |= 1 << 3 }
    if m.GetPhone() != "" { flags |= 1 << 4 }
    if m.GetPhoto() != nil { flags |= 1 << 5 }
    if m.GetStatus() != nil { flags |= 1 << 6 }
    if m.GetBotInfoVersion() != 0 { flags |= 1 << 14 }
    if m.GetRestrictionReason() != "" { flags |= 1 << 18 }
    if m.GetBotInlinePlaceholder() != "" { flags |= 1 << 19 }
    if m.GetLangCode() != "" { flags |= 1 << 22 }
	x.UInt(flags)

    
    
    
    
    
    
    
    
    
    
    
    x.Int(m.GetId())
    if (flags & (1 << 0)) != 0 { x.Long(m.GetAccessHash()) }
    if (flags & (1 << 1)) != 0 { x.String(m.GetFirstName()) }
    if (flags & (1 << 2)) != 0 { x.String(m.GetLastName()) }
    if (flags & (1 << 3)) != 0 { x.String(m.GetUsername()) }
    if (flags & (1 << 4)) != 0 { x.String(m.GetPhone()) }
    if (flags & (1 << 5)) != 0 { x.Bytes(m.GetPhoto().Encode()) }
    if (flags & (1 << 6)) != 0 { x.Bytes(m.GetStatus().Encode()) }
    if (flags & (1 << 14)) != 0 { x.Int(m.GetBotInfoVersion()) }
    if (flags & (1 << 18)) != 0 { x.String(m.GetRestrictionReason()) }
    if (flags & (1 << 19)) != 0 { x.String(m.GetBotInlinePlaceholder()) }
    if (flags & (1 << 22)) != 0 { x.String(m.GetLangCode()) }

    return x.buf
}

func (m* TLUser) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 10)) != 0 { m.SetSelf(true) }
    if (flags & (1 << 11)) != 0 { m.SetContact(true) }
    if (flags & (1 << 12)) != 0 { m.SetMutualContact(true) }
    if (flags & (1 << 13)) != 0 { m.SetDeleted(true) }
    if (flags & (1 << 14)) != 0 { m.SetBot(true) }
    if (flags & (1 << 15)) != 0 { m.SetBotChatHistory(true) }
    if (flags & (1 << 16)) != 0 { m.SetBotNochats(true) }
    if (flags & (1 << 17)) != 0 { m.SetVerified(true) }
    if (flags & (1 << 18)) != 0 { m.SetRestricted(true) }
    if (flags & (1 << 20)) != 0 { m.SetMin(true) }
    if (flags & (1 << 21)) != 0 { m.SetBotInlineGeo(true) }
    m.SetId(dbuf.Int())
    if (flags & (1 << 0)) != 0 { m.SetAccessHash(dbuf.Long()) }
    if (flags & (1 << 1)) != 0 { m.SetFirstName(dbuf.String()) }
    if (flags & (1 << 2)) != 0 { m.SetLastName(dbuf.String()) }
    if (flags & (1 << 3)) != 0 { m.SetUsername(dbuf.String()) }
    if (flags & (1 << 4)) != 0 { m.SetPhone(dbuf.String()) }
    if (flags & (1 << 5)) != 0 {
 m19 := &UserProfilePhoto{}
    m19.Decode(dbuf)
    m.SetPhoto(m19) 
}
    if (flags & (1 << 6)) != 0 {
 m20 := &UserStatus{}
    m20.Decode(dbuf)
    m.SetStatus(m20) 
}
    if (flags & (1 << 14)) != 0 { m.SetBotInfoVersion(dbuf.Int()) }
    if (flags & (1 << 18)) != 0 { m.SetRestrictionReason(dbuf.String()) }
    if (flags & (1 << 19)) != 0 { m.SetBotInlinePlaceholder(dbuf.String()) }
    if (flags & (1 << 22)) != 0 { m.SetLangCode(dbuf.String()) }

    return dbuf.err
}
// user#938458c1 flags:# self:flags.10?true contact:flags.11?true mutual_contact:flags.12?true deleted:flags.13?true bot:flags.14?true bot_chat_history:flags.15?true bot_nochats:flags.16?true verified:flags.17?true restricted:flags.18?true min:flags.20?true bot_inline_geo:flags.21?true support:flags.23?true scam:flags.24?true id:int access_hash:flags.0?long first_name:flags.1?string last_name:flags.2?string username:flags.3?string phone:flags.4?string photo:flags.5?UserProfilePhoto status:flags.6?UserStatus bot_info_version:flags.14?int restriction_reason:flags.18?Vector<RestrictionReason> bot_inline_placeholder:flags.19?string lang_code:flags.22?string = User;
func (m *TLUser114) To_User() *User {
    return &User{
        Constructor: TLConstructor_CRC32_user114,
        Data2: m.Data2,
    }
}


func (m *TLUser114) SetSelf(v bool) { m.Data2.Self = v }
func (m *TLUser114) GetSelf() bool { return m.Data2.Self }

func (m *TLUser114) SetContact(v bool) { m.Data2.Contact = v }
func (m *TLUser114) GetContact() bool { return m.Data2.Contact }

func (m *TLUser114) SetMutualContact(v bool) { m.Data2.MutualContact = v }
func (m *TLUser114) GetMutualContact() bool { return m.Data2.MutualContact }

func (m *TLUser114) SetDeleted(v bool) { m.Data2.Deleted = v }
func (m *TLUser114) GetDeleted() bool { return m.Data2.Deleted }

func (m *TLUser114) SetBot(v bool) { m.Data2.Bot = v }
func (m *TLUser114) GetBot() bool { return m.Data2.Bot }

func (m *TLUser114) SetBotChatHistory(v bool) { m.Data2.BotChatHistory = v }
func (m *TLUser114) GetBotChatHistory() bool { return m.Data2.BotChatHistory }

func (m *TLUser114) SetBotNochats(v bool) { m.Data2.BotNochats = v }
func (m *TLUser114) GetBotNochats() bool { return m.Data2.BotNochats }

func (m *TLUser114) SetVerified(v bool) { m.Data2.Verified = v }
func (m *TLUser114) GetVerified() bool { return m.Data2.Verified }

func (m *TLUser114) SetRestricted(v bool) { m.Data2.Restricted = v }
func (m *TLUser114) GetRestricted() bool { return m.Data2.Restricted }

func (m *TLUser114) SetMin(v bool) { m.Data2.Min = v }
func (m *TLUser114) GetMin() bool { return m.Data2.Min }

func (m *TLUser114) SetBotInlineGeo(v bool) { m.Data2.BotInlineGeo = v }
func (m *TLUser114) GetBotInlineGeo() bool { return m.Data2.BotInlineGeo }

func (m *TLUser114) SetSupport(v bool) { m.Data2.Support = v }
func (m *TLUser114) GetSupport() bool { return m.Data2.Support }

func (m *TLUser114) SetScam(v bool) { m.Data2.Scam = v }
func (m *TLUser114) GetScam() bool { return m.Data2.Scam }

func (m *TLUser114) SetId(v int32) { m.Data2.Id = v }
func (m *TLUser114) GetId() int32 { return m.Data2.Id }

func (m *TLUser114) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLUser114) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLUser114) SetFirstName(v string) { m.Data2.FirstName = v }
func (m *TLUser114) GetFirstName() string { return m.Data2.FirstName }

func (m *TLUser114) SetLastName(v string) { m.Data2.LastName = v }
func (m *TLUser114) GetLastName() string { return m.Data2.LastName }

func (m *TLUser114) SetUsername(v string) { m.Data2.Username = v }
func (m *TLUser114) GetUsername() string { return m.Data2.Username }

func (m *TLUser114) SetPhone(v string) { m.Data2.Phone = v }
func (m *TLUser114) GetPhone() string { return m.Data2.Phone }

func (m *TLUser114) SetPhoto(v *UserProfilePhoto) { m.Data2.Photo = v }
func (m *TLUser114) GetPhoto() *UserProfilePhoto { return m.Data2.Photo }

func (m *TLUser114) SetStatus(v *UserStatus) { m.Data2.Status = v }
func (m *TLUser114) GetStatus() *UserStatus { return m.Data2.Status }

func (m *TLUser114) SetBotInfoVersion(v int32) { m.Data2.BotInfoVersion = v }
func (m *TLUser114) GetBotInfoVersion() int32 { return m.Data2.BotInfoVersion }

func (m *TLUser114) SetRestrictionReason(v []*RestrictionReason) { m.Data2.RestrictionReason_26 = v }
func (m *TLUser114) GetRestrictionReason() []*RestrictionReason { return m.Data2.RestrictionReason_26 }

func (m *TLUser114) SetBotInlinePlaceholder(v string) { m.Data2.BotInlinePlaceholder = v }
func (m *TLUser114) GetBotInlinePlaceholder() string { return m.Data2.BotInlinePlaceholder }

func (m *TLUser114) SetLangCode(v string) { m.Data2.LangCode = v }
func (m *TLUser114) GetLangCode() string { return m.Data2.LangCode }


func NewTLUser114() * TLUser114 {
    return &TLUser114{ Data2: &User_Data{} }
}

func (m* TLUser114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_user114))

    // flags
    var flags uint32 = 0
    if m.GetSelf() == true { flags |= 1 << 10 }
    if m.GetContact() == true { flags |= 1 << 11 }
    if m.GetMutualContact() == true { flags |= 1 << 12 }
    if m.GetDeleted() == true { flags |= 1 << 13 }
    if m.GetBot() == true { flags |= 1 << 14 }
    if m.GetBotChatHistory() == true { flags |= 1 << 15 }
    if m.GetBotNochats() == true { flags |= 1 << 16 }
    if m.GetVerified() == true { flags |= 1 << 17 }
    if m.GetRestricted() == true { flags |= 1 << 18 }
    if m.GetMin() == true { flags |= 1 << 20 }
    if m.GetBotInlineGeo() == true { flags |= 1 << 21 }
    if m.GetSupport() == true { flags |= 1 << 23 }
    if m.GetScam() == true { flags |= 1 << 24 }
    if m.GetAccessHash() != 0 { flags |= 1 << 0 }
    if m.GetFirstName() != "" { flags |= 1 << 1 }
    if m.GetLastName() != "" { flags |= 1 << 2 }
    if m.GetUsername() != "" { flags |= 1 << 3 }
    if m.GetPhone() != "" { flags |= 1 << 4 }
    if m.GetPhoto() != nil { flags |= 1 << 5 }
    if m.GetStatus() != nil { flags |= 1 << 6 }
    if m.GetBotInfoVersion() != 0 { flags |= 1 << 14 }
    if m.GetRestrictionReason() != nil { flags |= 1 << 18 }
    if m.GetBotInlinePlaceholder() != "" { flags |= 1 << 19 }
    if m.GetLangCode() != "" { flags |= 1 << 22 }
	x.UInt(flags)

    
    
    
    
    
    
    
    
    
    
    
    
    
    x.Int(m.GetId())
    if (flags & (1 << 0)) != 0 { x.Long(m.GetAccessHash()) }
    if (flags & (1 << 1)) != 0 { x.String(m.GetFirstName()) }
    if (flags & (1 << 2)) != 0 { x.String(m.GetLastName()) }
    if (flags & (1 << 3)) != 0 { x.String(m.GetUsername()) }
    if (flags & (1 << 4)) != 0 { x.String(m.GetPhone()) }
    if (flags & (1 << 5)) != 0 { x.Bytes(m.GetPhoto().Encode()) }
    if (flags & (1 << 6)) != 0 { x.Bytes(m.GetStatus().Encode()) }
    if (flags & (1 << 14)) != 0 { x.Int(m.GetBotInfoVersion()) }
    if (flags & (1 << 18)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetRestrictionReason())))
for _, v := range m.GetRestrictionReason() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}
    if (flags & (1 << 19)) != 0 { x.String(m.GetBotInlinePlaceholder()) }
    if (flags & (1 << 22)) != 0 { x.String(m.GetLangCode()) }

    return x.buf
}

func (m* TLUser114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 10)) != 0 { m.SetSelf(true) }
    if (flags & (1 << 11)) != 0 { m.SetContact(true) }
    if (flags & (1 << 12)) != 0 { m.SetMutualContact(true) }
    if (flags & (1 << 13)) != 0 { m.SetDeleted(true) }
    if (flags & (1 << 14)) != 0 { m.SetBot(true) }
    if (flags & (1 << 15)) != 0 { m.SetBotChatHistory(true) }
    if (flags & (1 << 16)) != 0 { m.SetBotNochats(true) }
    if (flags & (1 << 17)) != 0 { m.SetVerified(true) }
    if (flags & (1 << 18)) != 0 { m.SetRestricted(true) }
    if (flags & (1 << 20)) != 0 { m.SetMin(true) }
    if (flags & (1 << 21)) != 0 { m.SetBotInlineGeo(true) }
    if (flags & (1 << 23)) != 0 { m.SetSupport(true) }
    if (flags & (1 << 24)) != 0 { m.SetScam(true) }
    m.SetId(dbuf.Int())
    if (flags & (1 << 0)) != 0 { m.SetAccessHash(dbuf.Long()) }
    if (flags & (1 << 1)) != 0 { m.SetFirstName(dbuf.String()) }
    if (flags & (1 << 2)) != 0 { m.SetLastName(dbuf.String()) }
    if (flags & (1 << 3)) != 0 { m.SetUsername(dbuf.String()) }
    if (flags & (1 << 4)) != 0 { m.SetPhone(dbuf.String()) }
    if (flags & (1 << 5)) != 0 {
 m21 := &UserProfilePhoto{}
    m21.Decode(dbuf)
    m.SetPhoto(m21) 
}
    if (flags & (1 << 6)) != 0 {
 m22 := &UserStatus{}
    m22.Decode(dbuf)
    m.SetStatus(m22) 
}
    if (flags & (1 << 14)) != 0 { m.SetBotInfoVersion(dbuf.Int()) }
    if (flags & (1 << 18)) != 0 {
 c24 := dbuf.Int()
if c24 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 24, c24)
	return dbuf.err
}
l24 := dbuf.Int()
v24 := make([]*RestrictionReason, l24)
for i := int32(0); i < l24; i++ {
	v24[i] = &RestrictionReason{}
	v24[i].Decode(dbuf)
}
m.SetRestrictionReason(v24)
 
}
    if (flags & (1 << 19)) != 0 { m.SetBotInlinePlaceholder(dbuf.String()) }
    if (flags & (1 << 22)) != 0 { m.SetLangCode(dbuf.String()) }

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Auth_SentCode <--
//  + TL_AuthSentCode
//

func (m *Auth_SentCode) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_auth_sentCode:
        t := m.To_AuthSentCode()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Auth_SentCode) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_auth_sentCode:
        m2 := &TLAuthSentCode{&Auth_SentCode_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// auth.sentCode#5e002502 flags:# phone_registered:flags.0?true type:auth.SentCodeType phone_code_hash:string next_type:flags.1?auth.CodeType timeout:flags.2?int = auth.SentCode;
func (m *Auth_SentCode) To_AuthSentCode() *TLAuthSentCode {
    return &TLAuthSentCode{
        Data2: m.Data2,
    }
}



// auth.sentCode#5e002502 flags:# phone_registered:flags.0?true type:auth.SentCodeType phone_code_hash:string next_type:flags.1?auth.CodeType timeout:flags.2?int = auth.SentCode;
func (m *TLAuthSentCode) To_Auth_SentCode() *Auth_SentCode {
    return &Auth_SentCode{
        Constructor: TLConstructor_CRC32_auth_sentCode,
        Data2: m.Data2,
    }
}


func (m *TLAuthSentCode) SetPhoneRegistered(v bool) { m.Data2.PhoneRegistered = v }
func (m *TLAuthSentCode) GetPhoneRegistered() bool { return m.Data2.PhoneRegistered }

func (m *TLAuthSentCode) SetType(v *Auth_SentCodeType) { m.Data2.Type = v }
func (m *TLAuthSentCode) GetType() *Auth_SentCodeType { return m.Data2.Type }

func (m *TLAuthSentCode) SetPhoneCodeHash(v string) { m.Data2.PhoneCodeHash = v }
func (m *TLAuthSentCode) GetPhoneCodeHash() string { return m.Data2.PhoneCodeHash }

func (m *TLAuthSentCode) SetNextType(v *Auth_CodeType) { m.Data2.NextType = v }
func (m *TLAuthSentCode) GetNextType() *Auth_CodeType { return m.Data2.NextType }

func (m *TLAuthSentCode) SetTimeout(v int32) { m.Data2.Timeout = v }
func (m *TLAuthSentCode) GetTimeout() int32 { return m.Data2.Timeout }


func NewTLAuthSentCode() * TLAuthSentCode {
    return &TLAuthSentCode{ Data2: &Auth_SentCode_Data{} }
}

func (m* TLAuthSentCode) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_auth_sentCode))

    // flags
    var flags uint32 = 0
    if m.GetPhoneRegistered() == true { flags |= 1 << 0 }
    if m.GetNextType() != nil { flags |= 1 << 1 }
    if m.GetTimeout() != 0 { flags |= 1 << 2 }
	x.UInt(flags)

    
    x.Bytes(m.GetType().Encode())
    x.String(m.GetPhoneCodeHash())
    if (flags & (1 << 1)) != 0 { x.Bytes(m.GetNextType().Encode()) }
    if (flags & (1 << 2)) != 0 { x.Int(m.GetTimeout()) }

    return x.buf
}

func (m* TLAuthSentCode) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetPhoneRegistered(true) }
    m3 := &Auth_SentCodeType{}
    m3.Decode(dbuf)
    m.SetType(m3)
    m.SetPhoneCodeHash(dbuf.String())
    if (flags & (1 << 1)) != 0 {
 m5 := &Auth_CodeType{}
    m5.Decode(dbuf)
    m.SetNextType(m5) 
}
    if (flags & (1 << 2)) != 0 { m.SetTimeout(dbuf.Int()) }

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Contacts_ResolvedPeer <--
//  + TL_ContactsResolvedPeer
//

func (m *Contacts_ResolvedPeer) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_contacts_resolvedPeer:
        t := m.To_ContactsResolvedPeer()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Contacts_ResolvedPeer) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_contacts_resolvedPeer:
        m2 := &TLContactsResolvedPeer{&Contacts_ResolvedPeer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// contacts.resolvedPeer#7f077ad9 peer:Peer chats:Vector<Chat> users:Vector<User> = contacts.ResolvedPeer;
func (m *Contacts_ResolvedPeer) To_ContactsResolvedPeer() *TLContactsResolvedPeer {
    return &TLContactsResolvedPeer{
        Data2: m.Data2,
    }
}



// contacts.resolvedPeer#7f077ad9 peer:Peer chats:Vector<Chat> users:Vector<User> = contacts.ResolvedPeer;
func (m *TLContactsResolvedPeer) To_Contacts_ResolvedPeer() *Contacts_ResolvedPeer {
    return &Contacts_ResolvedPeer{
        Constructor: TLConstructor_CRC32_contacts_resolvedPeer,
        Data2: m.Data2,
    }
}


func (m *TLContactsResolvedPeer) SetPeer(v *Peer) { m.Data2.Peer = v }
func (m *TLContactsResolvedPeer) GetPeer() *Peer { return m.Data2.Peer }

func (m *TLContactsResolvedPeer) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLContactsResolvedPeer) GetChats() []*Chat { return m.Data2.Chats }

func (m *TLContactsResolvedPeer) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLContactsResolvedPeer) GetUsers() []*User { return m.Data2.Users }


func NewTLContactsResolvedPeer() * TLContactsResolvedPeer {
    return &TLContactsResolvedPeer{ Data2: &Contacts_ResolvedPeer_Data{} }
}

func (m* TLContactsResolvedPeer) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_contacts_resolvedPeer))

    x.Bytes(m.GetPeer().Encode())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetChats())))
for _, v := range m.GetChats() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLContactsResolvedPeer) Decode(dbuf *DecodeBuf) error {
    m1 := &Peer{}
    m1.Decode(dbuf)
    m.SetPeer(m1)
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*Chat, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &Chat{}
	v2[i].Decode(dbuf)
}
m.SetChats(v2)

    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*User, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &User{}
	v3[i].Decode(dbuf)
}
m.SetUsers(v3)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// ChannelMessagesFilter <--
//  + TL_ChannelMessagesFilterEmpty
//  + TL_ChannelMessagesFilter
//

func (m *ChannelMessagesFilter) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_channelMessagesFilterEmpty:
        t := m.To_ChannelMessagesFilterEmpty()
        return t.Encode()
    case TLConstructor_CRC32_channelMessagesFilter:
        t := m.To_ChannelMessagesFilter()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *ChannelMessagesFilter) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_channelMessagesFilterEmpty:
        m2 := &TLChannelMessagesFilterEmpty{&ChannelMessagesFilter_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelMessagesFilter:
        m2 := &TLChannelMessagesFilter{&ChannelMessagesFilter_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// channelMessagesFilterEmpty#94d42ee7 = ChannelMessagesFilter;
func (m *ChannelMessagesFilter) To_ChannelMessagesFilterEmpty() *TLChannelMessagesFilterEmpty {
    return &TLChannelMessagesFilterEmpty{
        Data2: m.Data2,
    }
}

// channelMessagesFilter#cd77d957 flags:# exclude_new_messages:flags.1?true ranges:Vector<MessageRange> = ChannelMessagesFilter;
func (m *ChannelMessagesFilter) To_ChannelMessagesFilter() *TLChannelMessagesFilter {
    return &TLChannelMessagesFilter{
        Data2: m.Data2,
    }
}



// channelMessagesFilterEmpty#94d42ee7 = ChannelMessagesFilter;
func (m *TLChannelMessagesFilterEmpty) To_ChannelMessagesFilter() *ChannelMessagesFilter {
    return &ChannelMessagesFilter{
        Constructor: TLConstructor_CRC32_channelMessagesFilterEmpty,
        Data2: m.Data2,
    }
}



func NewTLChannelMessagesFilterEmpty() * TLChannelMessagesFilterEmpty {
    return &TLChannelMessagesFilterEmpty{ Data2: &ChannelMessagesFilter_Data{} }
}

func (m* TLChannelMessagesFilterEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelMessagesFilterEmpty))


    return x.buf
}

func (m* TLChannelMessagesFilterEmpty) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// channelMessagesFilter#cd77d957 flags:# exclude_new_messages:flags.1?true ranges:Vector<MessageRange> = ChannelMessagesFilter;
func (m *TLChannelMessagesFilter) To_ChannelMessagesFilter() *ChannelMessagesFilter {
    return &ChannelMessagesFilter{
        Constructor: TLConstructor_CRC32_channelMessagesFilter,
        Data2: m.Data2,
    }
}


func (m *TLChannelMessagesFilter) SetExcludeNewMessages(v bool) { m.Data2.ExcludeNewMessages = v }
func (m *TLChannelMessagesFilter) GetExcludeNewMessages() bool { return m.Data2.ExcludeNewMessages }

func (m *TLChannelMessagesFilter) SetRanges(v []*MessageRange) { m.Data2.Ranges = v }
func (m *TLChannelMessagesFilter) GetRanges() []*MessageRange { return m.Data2.Ranges }


func NewTLChannelMessagesFilter() * TLChannelMessagesFilter {
    return &TLChannelMessagesFilter{ Data2: &ChannelMessagesFilter_Data{} }
}

func (m* TLChannelMessagesFilter) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelMessagesFilter))

    // flags
    var flags uint32 = 0
    if m.GetExcludeNewMessages() == true { flags |= 1 << 1 }
	x.UInt(flags)

    
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetRanges())))
for _, v := range m.GetRanges() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLChannelMessagesFilter) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 1)) != 0 { m.SetExcludeNewMessages(true) }
    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*MessageRange, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &MessageRange{}
	v3[i].Decode(dbuf)
}
m.SetRanges(v3)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputBotInlineMessage <--
//  + TL_InputBotInlineMessageMediaAuto
//  + TL_InputBotInlineMessageText
//  + TL_InputBotInlineMessageMediaGeo
//  + TL_InputBotInlineMessageMediaVenue
//  + TL_InputBotInlineMessageMediaContact
//  + TL_InputBotInlineMessageGame
//  + TL_InputBotInlineMessageMediaAuto114
//  + TL_InputBotInlineMessageMediaGeo114
//  + TL_InputBotInlineMessageMediaVenue114
//  + TL_InputBotInlineMessageMediaContact114
//

func (m *InputBotInlineMessage) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputBotInlineMessageMediaAuto:
        t := m.To_InputBotInlineMessageMediaAuto()
        return t.Encode()
    case TLConstructor_CRC32_inputBotInlineMessageText:
        t := m.To_InputBotInlineMessageText()
        return t.Encode()
    case TLConstructor_CRC32_inputBotInlineMessageMediaGeo:
        t := m.To_InputBotInlineMessageMediaGeo()
        return t.Encode()
    case TLConstructor_CRC32_inputBotInlineMessageMediaVenue:
        t := m.To_InputBotInlineMessageMediaVenue()
        return t.Encode()
    case TLConstructor_CRC32_inputBotInlineMessageMediaContact:
        t := m.To_InputBotInlineMessageMediaContact()
        return t.Encode()
    case TLConstructor_CRC32_inputBotInlineMessageGame:
        t := m.To_InputBotInlineMessageGame()
        return t.Encode()
    case TLConstructor_CRC32_inputBotInlineMessageMediaAuto114:
        t := m.To_InputBotInlineMessageMediaAuto114()
        return t.Encode()
    case TLConstructor_CRC32_inputBotInlineMessageMediaGeo114:
        t := m.To_InputBotInlineMessageMediaGeo114()
        return t.Encode()
    case TLConstructor_CRC32_inputBotInlineMessageMediaVenue114:
        t := m.To_InputBotInlineMessageMediaVenue114()
        return t.Encode()
    case TLConstructor_CRC32_inputBotInlineMessageMediaContact114:
        t := m.To_InputBotInlineMessageMediaContact114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputBotInlineMessage) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputBotInlineMessageMediaAuto:
        m2 := &TLInputBotInlineMessageMediaAuto{&InputBotInlineMessage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputBotInlineMessageText:
        m2 := &TLInputBotInlineMessageText{&InputBotInlineMessage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputBotInlineMessageMediaGeo:
        m2 := &TLInputBotInlineMessageMediaGeo{&InputBotInlineMessage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputBotInlineMessageMediaVenue:
        m2 := &TLInputBotInlineMessageMediaVenue{&InputBotInlineMessage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputBotInlineMessageMediaContact:
        m2 := &TLInputBotInlineMessageMediaContact{&InputBotInlineMessage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputBotInlineMessageGame:
        m2 := &TLInputBotInlineMessageGame{&InputBotInlineMessage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputBotInlineMessageMediaAuto114:
        m2 := &TLInputBotInlineMessageMediaAuto114{&InputBotInlineMessage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputBotInlineMessageMediaGeo114:
        m2 := &TLInputBotInlineMessageMediaGeo114{&InputBotInlineMessage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputBotInlineMessageMediaVenue114:
        m2 := &TLInputBotInlineMessageMediaVenue114{&InputBotInlineMessage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputBotInlineMessageMediaContact114:
        m2 := &TLInputBotInlineMessageMediaContact114{&InputBotInlineMessage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputBotInlineMessageMediaAuto#292fed13 flags:# caption:string reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;
func (m *InputBotInlineMessage) To_InputBotInlineMessageMediaAuto() *TLInputBotInlineMessageMediaAuto {
    return &TLInputBotInlineMessageMediaAuto{
        Data2: m.Data2,
    }
}

// inputBotInlineMessageText#3dcd7a87 flags:# no_webpage:flags.0?true message:string entities:flags.1?Vector<MessageEntity> reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;
func (m *InputBotInlineMessage) To_InputBotInlineMessageText() *TLInputBotInlineMessageText {
    return &TLInputBotInlineMessageText{
        Data2: m.Data2,
    }
}

// inputBotInlineMessageMediaGeo#f4a59de1 flags:# geo_point:InputGeoPoint reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;
func (m *InputBotInlineMessage) To_InputBotInlineMessageMediaGeo() *TLInputBotInlineMessageMediaGeo {
    return &TLInputBotInlineMessageMediaGeo{
        Data2: m.Data2,
    }
}

// inputBotInlineMessageMediaVenue#aaafadc8 flags:# geo_point:InputGeoPoint title:string address:string provider:string venue_id:string reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;
func (m *InputBotInlineMessage) To_InputBotInlineMessageMediaVenue() *TLInputBotInlineMessageMediaVenue {
    return &TLInputBotInlineMessageMediaVenue{
        Data2: m.Data2,
    }
}

// inputBotInlineMessageMediaContact#2daf01a7 flags:# phone_number:string first_name:string last_name:string reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;
func (m *InputBotInlineMessage) To_InputBotInlineMessageMediaContact() *TLInputBotInlineMessageMediaContact {
    return &TLInputBotInlineMessageMediaContact{
        Data2: m.Data2,
    }
}

// inputBotInlineMessageGame#4b425864 flags:# reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;
func (m *InputBotInlineMessage) To_InputBotInlineMessageGame() *TLInputBotInlineMessageGame {
    return &TLInputBotInlineMessageGame{
        Data2: m.Data2,
    }
}

// inputBotInlineMessageMediaAuto#3380c786 flags:# message:string entities:flags.1?Vector<MessageEntity> reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;
func (m *InputBotInlineMessage) To_InputBotInlineMessageMediaAuto114() *TLInputBotInlineMessageMediaAuto114 {
    return &TLInputBotInlineMessageMediaAuto114{
        Data2: m.Data2,
    }
}

// inputBotInlineMessageMediaGeo#c1b15d65 flags:# geo_point:InputGeoPoint period:int reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;
func (m *InputBotInlineMessage) To_InputBotInlineMessageMediaGeo114() *TLInputBotInlineMessageMediaGeo114 {
    return &TLInputBotInlineMessageMediaGeo114{
        Data2: m.Data2,
    }
}

// inputBotInlineMessageMediaVenue#417bbf11 flags:# geo_point:InputGeoPoint title:string address:string provider:string venue_id:string venue_type:string reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;
func (m *InputBotInlineMessage) To_InputBotInlineMessageMediaVenue114() *TLInputBotInlineMessageMediaVenue114 {
    return &TLInputBotInlineMessageMediaVenue114{
        Data2: m.Data2,
    }
}

// inputBotInlineMessageMediaContact#a6edbffd flags:# phone_number:string first_name:string last_name:string vcard:string reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;
func (m *InputBotInlineMessage) To_InputBotInlineMessageMediaContact114() *TLInputBotInlineMessageMediaContact114 {
    return &TLInputBotInlineMessageMediaContact114{
        Data2: m.Data2,
    }
}



// inputBotInlineMessageMediaAuto#292fed13 flags:# caption:string reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;
func (m *TLInputBotInlineMessageMediaAuto) To_InputBotInlineMessage() *InputBotInlineMessage {
    return &InputBotInlineMessage{
        Constructor: TLConstructor_CRC32_inputBotInlineMessageMediaAuto,
        Data2: m.Data2,
    }
}


func (m *TLInputBotInlineMessageMediaAuto) SetCaption(v string) { m.Data2.Caption = v }
func (m *TLInputBotInlineMessageMediaAuto) GetCaption() string { return m.Data2.Caption }

func (m *TLInputBotInlineMessageMediaAuto) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLInputBotInlineMessageMediaAuto) GetReplyMarkup() *ReplyMarkup { return m.Data2.ReplyMarkup }


func NewTLInputBotInlineMessageMediaAuto() * TLInputBotInlineMessageMediaAuto {
    return &TLInputBotInlineMessageMediaAuto{ Data2: &InputBotInlineMessage_Data{} }
}

func (m* TLInputBotInlineMessageMediaAuto) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputBotInlineMessageMediaAuto))

    // flags
    var flags uint32 = 0
    if m.GetReplyMarkup() != nil { flags |= 1 << 2 }
	x.UInt(flags)

    x.String(m.GetCaption())
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetReplyMarkup().Encode()) }

    return x.buf
}

func (m* TLInputBotInlineMessageMediaAuto) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetCaption(dbuf.String())
    if (flags & (1 << 2)) != 0 {
 m3 := &ReplyMarkup{}
    m3.Decode(dbuf)
    m.SetReplyMarkup(m3) 
}

    return dbuf.err
}
// inputBotInlineMessageText#3dcd7a87 flags:# no_webpage:flags.0?true message:string entities:flags.1?Vector<MessageEntity> reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;
func (m *TLInputBotInlineMessageText) To_InputBotInlineMessage() *InputBotInlineMessage {
    return &InputBotInlineMessage{
        Constructor: TLConstructor_CRC32_inputBotInlineMessageText,
        Data2: m.Data2,
    }
}


func (m *TLInputBotInlineMessageText) SetNoWebpage(v bool) { m.Data2.NoWebpage = v }
func (m *TLInputBotInlineMessageText) GetNoWebpage() bool { return m.Data2.NoWebpage }

func (m *TLInputBotInlineMessageText) SetMessage(v string) { m.Data2.Message = v }
func (m *TLInputBotInlineMessageText) GetMessage() string { return m.Data2.Message }

func (m *TLInputBotInlineMessageText) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLInputBotInlineMessageText) GetEntities() []*MessageEntity { return m.Data2.Entities }

func (m *TLInputBotInlineMessageText) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLInputBotInlineMessageText) GetReplyMarkup() *ReplyMarkup { return m.Data2.ReplyMarkup }


func NewTLInputBotInlineMessageText() * TLInputBotInlineMessageText {
    return &TLInputBotInlineMessageText{ Data2: &InputBotInlineMessage_Data{} }
}

func (m* TLInputBotInlineMessageText) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputBotInlineMessageText))

    // flags
    var flags uint32 = 0
    if m.GetNoWebpage() == true { flags |= 1 << 0 }
    if m.GetEntities() != nil { flags |= 1 << 1 }
    if m.GetReplyMarkup() != nil { flags |= 1 << 2 }
	x.UInt(flags)

    
    x.String(m.GetMessage())
    if (flags & (1 << 1)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetEntities())))
for _, v := range m.GetEntities() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetReplyMarkup().Encode()) }

    return x.buf
}

func (m* TLInputBotInlineMessageText) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetNoWebpage(true) }
    m.SetMessage(dbuf.String())
    if (flags & (1 << 1)) != 0 {
 c4 := dbuf.Int()
if c4 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
	return dbuf.err
}
l4 := dbuf.Int()
v4 := make([]*MessageEntity, l4)
for i := int32(0); i < l4; i++ {
	v4[i] = &MessageEntity{}
	v4[i].Decode(dbuf)
}
m.SetEntities(v4)
 
}
    if (flags & (1 << 2)) != 0 {
 m5 := &ReplyMarkup{}
    m5.Decode(dbuf)
    m.SetReplyMarkup(m5) 
}

    return dbuf.err
}
// inputBotInlineMessageMediaGeo#f4a59de1 flags:# geo_point:InputGeoPoint reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;
func (m *TLInputBotInlineMessageMediaGeo) To_InputBotInlineMessage() *InputBotInlineMessage {
    return &InputBotInlineMessage{
        Constructor: TLConstructor_CRC32_inputBotInlineMessageMediaGeo,
        Data2: m.Data2,
    }
}


func (m *TLInputBotInlineMessageMediaGeo) SetGeoPoint(v *InputGeoPoint) { m.Data2.GeoPoint = v }
func (m *TLInputBotInlineMessageMediaGeo) GetGeoPoint() *InputGeoPoint { return m.Data2.GeoPoint }

func (m *TLInputBotInlineMessageMediaGeo) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLInputBotInlineMessageMediaGeo) GetReplyMarkup() *ReplyMarkup { return m.Data2.ReplyMarkup }


func NewTLInputBotInlineMessageMediaGeo() * TLInputBotInlineMessageMediaGeo {
    return &TLInputBotInlineMessageMediaGeo{ Data2: &InputBotInlineMessage_Data{} }
}

func (m* TLInputBotInlineMessageMediaGeo) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputBotInlineMessageMediaGeo))

    // flags
    var flags uint32 = 0
    if m.GetReplyMarkup() != nil { flags |= 1 << 2 }
	x.UInt(flags)

    x.Bytes(m.GetGeoPoint().Encode())
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetReplyMarkup().Encode()) }

    return x.buf
}

func (m* TLInputBotInlineMessageMediaGeo) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m2 := &InputGeoPoint{}
    m2.Decode(dbuf)
    m.SetGeoPoint(m2)
    if (flags & (1 << 2)) != 0 {
 m3 := &ReplyMarkup{}
    m3.Decode(dbuf)
    m.SetReplyMarkup(m3) 
}

    return dbuf.err
}
// inputBotInlineMessageMediaVenue#aaafadc8 flags:# geo_point:InputGeoPoint title:string address:string provider:string venue_id:string reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;
func (m *TLInputBotInlineMessageMediaVenue) To_InputBotInlineMessage() *InputBotInlineMessage {
    return &InputBotInlineMessage{
        Constructor: TLConstructor_CRC32_inputBotInlineMessageMediaVenue,
        Data2: m.Data2,
    }
}


func (m *TLInputBotInlineMessageMediaVenue) SetGeoPoint(v *InputGeoPoint) { m.Data2.GeoPoint = v }
func (m *TLInputBotInlineMessageMediaVenue) GetGeoPoint() *InputGeoPoint { return m.Data2.GeoPoint }

func (m *TLInputBotInlineMessageMediaVenue) SetTitle(v string) { m.Data2.Title = v }
func (m *TLInputBotInlineMessageMediaVenue) GetTitle() string { return m.Data2.Title }

func (m *TLInputBotInlineMessageMediaVenue) SetAddress(v string) { m.Data2.Address = v }
func (m *TLInputBotInlineMessageMediaVenue) GetAddress() string { return m.Data2.Address }

func (m *TLInputBotInlineMessageMediaVenue) SetProvider(v string) { m.Data2.Provider = v }
func (m *TLInputBotInlineMessageMediaVenue) GetProvider() string { return m.Data2.Provider }

func (m *TLInputBotInlineMessageMediaVenue) SetVenueId(v string) { m.Data2.VenueId = v }
func (m *TLInputBotInlineMessageMediaVenue) GetVenueId() string { return m.Data2.VenueId }

func (m *TLInputBotInlineMessageMediaVenue) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLInputBotInlineMessageMediaVenue) GetReplyMarkup() *ReplyMarkup { return m.Data2.ReplyMarkup }


func NewTLInputBotInlineMessageMediaVenue() * TLInputBotInlineMessageMediaVenue {
    return &TLInputBotInlineMessageMediaVenue{ Data2: &InputBotInlineMessage_Data{} }
}

func (m* TLInputBotInlineMessageMediaVenue) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputBotInlineMessageMediaVenue))

    // flags
    var flags uint32 = 0
    if m.GetReplyMarkup() != nil { flags |= 1 << 2 }
	x.UInt(flags)

    x.Bytes(m.GetGeoPoint().Encode())
    x.String(m.GetTitle())
    x.String(m.GetAddress())
    x.String(m.GetProvider())
    x.String(m.GetVenueId())
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetReplyMarkup().Encode()) }

    return x.buf
}

func (m* TLInputBotInlineMessageMediaVenue) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m2 := &InputGeoPoint{}
    m2.Decode(dbuf)
    m.SetGeoPoint(m2)
    m.SetTitle(dbuf.String())
    m.SetAddress(dbuf.String())
    m.SetProvider(dbuf.String())
    m.SetVenueId(dbuf.String())
    if (flags & (1 << 2)) != 0 {
 m7 := &ReplyMarkup{}
    m7.Decode(dbuf)
    m.SetReplyMarkup(m7) 
}

    return dbuf.err
}
// inputBotInlineMessageMediaContact#2daf01a7 flags:# phone_number:string first_name:string last_name:string reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;
func (m *TLInputBotInlineMessageMediaContact) To_InputBotInlineMessage() *InputBotInlineMessage {
    return &InputBotInlineMessage{
        Constructor: TLConstructor_CRC32_inputBotInlineMessageMediaContact,
        Data2: m.Data2,
    }
}


func (m *TLInputBotInlineMessageMediaContact) SetPhoneNumber(v string) { m.Data2.PhoneNumber = v }
func (m *TLInputBotInlineMessageMediaContact) GetPhoneNumber() string { return m.Data2.PhoneNumber }

func (m *TLInputBotInlineMessageMediaContact) SetFirstName(v string) { m.Data2.FirstName = v }
func (m *TLInputBotInlineMessageMediaContact) GetFirstName() string { return m.Data2.FirstName }

func (m *TLInputBotInlineMessageMediaContact) SetLastName(v string) { m.Data2.LastName = v }
func (m *TLInputBotInlineMessageMediaContact) GetLastName() string { return m.Data2.LastName }

func (m *TLInputBotInlineMessageMediaContact) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLInputBotInlineMessageMediaContact) GetReplyMarkup() *ReplyMarkup { return m.Data2.ReplyMarkup }


func NewTLInputBotInlineMessageMediaContact() * TLInputBotInlineMessageMediaContact {
    return &TLInputBotInlineMessageMediaContact{ Data2: &InputBotInlineMessage_Data{} }
}

func (m* TLInputBotInlineMessageMediaContact) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputBotInlineMessageMediaContact))

    // flags
    var flags uint32 = 0
    if m.GetReplyMarkup() != nil { flags |= 1 << 2 }
	x.UInt(flags)

    x.String(m.GetPhoneNumber())
    x.String(m.GetFirstName())
    x.String(m.GetLastName())
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetReplyMarkup().Encode()) }

    return x.buf
}

func (m* TLInputBotInlineMessageMediaContact) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetPhoneNumber(dbuf.String())
    m.SetFirstName(dbuf.String())
    m.SetLastName(dbuf.String())
    if (flags & (1 << 2)) != 0 {
 m5 := &ReplyMarkup{}
    m5.Decode(dbuf)
    m.SetReplyMarkup(m5) 
}

    return dbuf.err
}
// inputBotInlineMessageGame#4b425864 flags:# reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;
func (m *TLInputBotInlineMessageGame) To_InputBotInlineMessage() *InputBotInlineMessage {
    return &InputBotInlineMessage{
        Constructor: TLConstructor_CRC32_inputBotInlineMessageGame,
        Data2: m.Data2,
    }
}


func (m *TLInputBotInlineMessageGame) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLInputBotInlineMessageGame) GetReplyMarkup() *ReplyMarkup { return m.Data2.ReplyMarkup }


func NewTLInputBotInlineMessageGame() * TLInputBotInlineMessageGame {
    return &TLInputBotInlineMessageGame{ Data2: &InputBotInlineMessage_Data{} }
}

func (m* TLInputBotInlineMessageGame) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputBotInlineMessageGame))

    // flags
    var flags uint32 = 0
    if m.GetReplyMarkup() != nil { flags |= 1 << 2 }
	x.UInt(flags)

    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetReplyMarkup().Encode()) }

    return x.buf
}

func (m* TLInputBotInlineMessageGame) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 2)) != 0 {
 m2 := &ReplyMarkup{}
    m2.Decode(dbuf)
    m.SetReplyMarkup(m2) 
}

    return dbuf.err
}
// inputBotInlineMessageMediaAuto#3380c786 flags:# message:string entities:flags.1?Vector<MessageEntity> reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;
func (m *TLInputBotInlineMessageMediaAuto114) To_InputBotInlineMessage() *InputBotInlineMessage {
    return &InputBotInlineMessage{
        Constructor: TLConstructor_CRC32_inputBotInlineMessageMediaAuto114,
        Data2: m.Data2,
    }
}


func (m *TLInputBotInlineMessageMediaAuto114) SetMessage(v string) { m.Data2.Message = v }
func (m *TLInputBotInlineMessageMediaAuto114) GetMessage() string { return m.Data2.Message }

func (m *TLInputBotInlineMessageMediaAuto114) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLInputBotInlineMessageMediaAuto114) GetEntities() []*MessageEntity { return m.Data2.Entities }

func (m *TLInputBotInlineMessageMediaAuto114) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLInputBotInlineMessageMediaAuto114) GetReplyMarkup() *ReplyMarkup { return m.Data2.ReplyMarkup }


func NewTLInputBotInlineMessageMediaAuto114() * TLInputBotInlineMessageMediaAuto114 {
    return &TLInputBotInlineMessageMediaAuto114{ Data2: &InputBotInlineMessage_Data{} }
}

func (m* TLInputBotInlineMessageMediaAuto114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputBotInlineMessageMediaAuto114))

    // flags
    var flags uint32 = 0
    if m.GetEntities() != nil { flags |= 1 << 1 }
    if m.GetReplyMarkup() != nil { flags |= 1 << 2 }
	x.UInt(flags)

    x.String(m.GetMessage())
    if (flags & (1 << 1)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetEntities())))
for _, v := range m.GetEntities() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetReplyMarkup().Encode()) }

    return x.buf
}

func (m* TLInputBotInlineMessageMediaAuto114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetMessage(dbuf.String())
    if (flags & (1 << 1)) != 0 {
 c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*MessageEntity, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &MessageEntity{}
	v3[i].Decode(dbuf)
}
m.SetEntities(v3)
 
}
    if (flags & (1 << 2)) != 0 {
 m4 := &ReplyMarkup{}
    m4.Decode(dbuf)
    m.SetReplyMarkup(m4) 
}

    return dbuf.err
}
// inputBotInlineMessageMediaGeo#c1b15d65 flags:# geo_point:InputGeoPoint period:int reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;
func (m *TLInputBotInlineMessageMediaGeo114) To_InputBotInlineMessage() *InputBotInlineMessage {
    return &InputBotInlineMessage{
        Constructor: TLConstructor_CRC32_inputBotInlineMessageMediaGeo114,
        Data2: m.Data2,
    }
}


func (m *TLInputBotInlineMessageMediaGeo114) SetGeoPoint(v *InputGeoPoint) { m.Data2.GeoPoint = v }
func (m *TLInputBotInlineMessageMediaGeo114) GetGeoPoint() *InputGeoPoint { return m.Data2.GeoPoint }

func (m *TLInputBotInlineMessageMediaGeo114) SetPeriod(v int32) { m.Data2.Period = v }
func (m *TLInputBotInlineMessageMediaGeo114) GetPeriod() int32 { return m.Data2.Period }

func (m *TLInputBotInlineMessageMediaGeo114) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLInputBotInlineMessageMediaGeo114) GetReplyMarkup() *ReplyMarkup { return m.Data2.ReplyMarkup }


func NewTLInputBotInlineMessageMediaGeo114() * TLInputBotInlineMessageMediaGeo114 {
    return &TLInputBotInlineMessageMediaGeo114{ Data2: &InputBotInlineMessage_Data{} }
}

func (m* TLInputBotInlineMessageMediaGeo114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputBotInlineMessageMediaGeo114))

    // flags
    var flags uint32 = 0
    if m.GetReplyMarkup() != nil { flags |= 1 << 2 }
	x.UInt(flags)

    x.Bytes(m.GetGeoPoint().Encode())
    x.Int(m.GetPeriod())
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetReplyMarkup().Encode()) }

    return x.buf
}

func (m* TLInputBotInlineMessageMediaGeo114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m2 := &InputGeoPoint{}
    m2.Decode(dbuf)
    m.SetGeoPoint(m2)
    m.SetPeriod(dbuf.Int())
    if (flags & (1 << 2)) != 0 {
 m4 := &ReplyMarkup{}
    m4.Decode(dbuf)
    m.SetReplyMarkup(m4) 
}

    return dbuf.err
}
// inputBotInlineMessageMediaVenue#417bbf11 flags:# geo_point:InputGeoPoint title:string address:string provider:string venue_id:string venue_type:string reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;
func (m *TLInputBotInlineMessageMediaVenue114) To_InputBotInlineMessage() *InputBotInlineMessage {
    return &InputBotInlineMessage{
        Constructor: TLConstructor_CRC32_inputBotInlineMessageMediaVenue114,
        Data2: m.Data2,
    }
}


func (m *TLInputBotInlineMessageMediaVenue114) SetGeoPoint(v *InputGeoPoint) { m.Data2.GeoPoint = v }
func (m *TLInputBotInlineMessageMediaVenue114) GetGeoPoint() *InputGeoPoint { return m.Data2.GeoPoint }

func (m *TLInputBotInlineMessageMediaVenue114) SetTitle(v string) { m.Data2.Title = v }
func (m *TLInputBotInlineMessageMediaVenue114) GetTitle() string { return m.Data2.Title }

func (m *TLInputBotInlineMessageMediaVenue114) SetAddress(v string) { m.Data2.Address = v }
func (m *TLInputBotInlineMessageMediaVenue114) GetAddress() string { return m.Data2.Address }

func (m *TLInputBotInlineMessageMediaVenue114) SetProvider(v string) { m.Data2.Provider = v }
func (m *TLInputBotInlineMessageMediaVenue114) GetProvider() string { return m.Data2.Provider }

func (m *TLInputBotInlineMessageMediaVenue114) SetVenueId(v string) { m.Data2.VenueId = v }
func (m *TLInputBotInlineMessageMediaVenue114) GetVenueId() string { return m.Data2.VenueId }

func (m *TLInputBotInlineMessageMediaVenue114) SetVenueType(v string) { m.Data2.VenueType = v }
func (m *TLInputBotInlineMessageMediaVenue114) GetVenueType() string { return m.Data2.VenueType }

func (m *TLInputBotInlineMessageMediaVenue114) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLInputBotInlineMessageMediaVenue114) GetReplyMarkup() *ReplyMarkup { return m.Data2.ReplyMarkup }


func NewTLInputBotInlineMessageMediaVenue114() * TLInputBotInlineMessageMediaVenue114 {
    return &TLInputBotInlineMessageMediaVenue114{ Data2: &InputBotInlineMessage_Data{} }
}

func (m* TLInputBotInlineMessageMediaVenue114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputBotInlineMessageMediaVenue114))

    // flags
    var flags uint32 = 0
    if m.GetReplyMarkup() != nil { flags |= 1 << 2 }
	x.UInt(flags)

    x.Bytes(m.GetGeoPoint().Encode())
    x.String(m.GetTitle())
    x.String(m.GetAddress())
    x.String(m.GetProvider())
    x.String(m.GetVenueId())
    x.String(m.GetVenueType())
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetReplyMarkup().Encode()) }

    return x.buf
}

func (m* TLInputBotInlineMessageMediaVenue114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m2 := &InputGeoPoint{}
    m2.Decode(dbuf)
    m.SetGeoPoint(m2)
    m.SetTitle(dbuf.String())
    m.SetAddress(dbuf.String())
    m.SetProvider(dbuf.String())
    m.SetVenueId(dbuf.String())
    m.SetVenueType(dbuf.String())
    if (flags & (1 << 2)) != 0 {
 m8 := &ReplyMarkup{}
    m8.Decode(dbuf)
    m.SetReplyMarkup(m8) 
}

    return dbuf.err
}
// inputBotInlineMessageMediaContact#a6edbffd flags:# phone_number:string first_name:string last_name:string vcard:string reply_markup:flags.2?ReplyMarkup = InputBotInlineMessage;
func (m *TLInputBotInlineMessageMediaContact114) To_InputBotInlineMessage() *InputBotInlineMessage {
    return &InputBotInlineMessage{
        Constructor: TLConstructor_CRC32_inputBotInlineMessageMediaContact114,
        Data2: m.Data2,
    }
}


func (m *TLInputBotInlineMessageMediaContact114) SetPhoneNumber(v string) { m.Data2.PhoneNumber = v }
func (m *TLInputBotInlineMessageMediaContact114) GetPhoneNumber() string { return m.Data2.PhoneNumber }

func (m *TLInputBotInlineMessageMediaContact114) SetFirstName(v string) { m.Data2.FirstName = v }
func (m *TLInputBotInlineMessageMediaContact114) GetFirstName() string { return m.Data2.FirstName }

func (m *TLInputBotInlineMessageMediaContact114) SetLastName(v string) { m.Data2.LastName = v }
func (m *TLInputBotInlineMessageMediaContact114) GetLastName() string { return m.Data2.LastName }

func (m *TLInputBotInlineMessageMediaContact114) SetVcard(v string) { m.Data2.Vcard = v }
func (m *TLInputBotInlineMessageMediaContact114) GetVcard() string { return m.Data2.Vcard }

func (m *TLInputBotInlineMessageMediaContact114) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLInputBotInlineMessageMediaContact114) GetReplyMarkup() *ReplyMarkup { return m.Data2.ReplyMarkup }


func NewTLInputBotInlineMessageMediaContact114() * TLInputBotInlineMessageMediaContact114 {
    return &TLInputBotInlineMessageMediaContact114{ Data2: &InputBotInlineMessage_Data{} }
}

func (m* TLInputBotInlineMessageMediaContact114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputBotInlineMessageMediaContact114))

    // flags
    var flags uint32 = 0
    if m.GetReplyMarkup() != nil { flags |= 1 << 2 }
	x.UInt(flags)

    x.String(m.GetPhoneNumber())
    x.String(m.GetFirstName())
    x.String(m.GetLastName())
    x.String(m.GetVcard())
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetReplyMarkup().Encode()) }

    return x.buf
}

func (m* TLInputBotInlineMessageMediaContact114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetPhoneNumber(dbuf.String())
    m.SetFirstName(dbuf.String())
    m.SetLastName(dbuf.String())
    m.SetVcard(dbuf.String())
    if (flags & (1 << 2)) != 0 {
 m6 := &ReplyMarkup{}
    m6.Decode(dbuf)
    m.SetReplyMarkup(m6) 
}

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// TopPeerCategoryPeers <--
//  + TL_TopPeerCategoryPeers
//

func (m *TopPeerCategoryPeers) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_topPeerCategoryPeers:
        t := m.To_TopPeerCategoryPeers()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *TopPeerCategoryPeers) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_topPeerCategoryPeers:
        m2 := &TLTopPeerCategoryPeers{&TopPeerCategoryPeers_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// topPeerCategoryPeers#fb834291 category:TopPeerCategory count:int peers:Vector<TopPeer> = TopPeerCategoryPeers;
func (m *TopPeerCategoryPeers) To_TopPeerCategoryPeers() *TLTopPeerCategoryPeers {
    return &TLTopPeerCategoryPeers{
        Data2: m.Data2,
    }
}



// topPeerCategoryPeers#fb834291 category:TopPeerCategory count:int peers:Vector<TopPeer> = TopPeerCategoryPeers;
func (m *TLTopPeerCategoryPeers) To_TopPeerCategoryPeers() *TopPeerCategoryPeers {
    return &TopPeerCategoryPeers{
        Constructor: TLConstructor_CRC32_topPeerCategoryPeers,
        Data2: m.Data2,
    }
}


func (m *TLTopPeerCategoryPeers) SetCategory(v *TopPeerCategory) { m.Data2.Category = v }
func (m *TLTopPeerCategoryPeers) GetCategory() *TopPeerCategory { return m.Data2.Category }

func (m *TLTopPeerCategoryPeers) SetCount(v int32) { m.Data2.Count = v }
func (m *TLTopPeerCategoryPeers) GetCount() int32 { return m.Data2.Count }

func (m *TLTopPeerCategoryPeers) SetPeers(v []*TopPeer) { m.Data2.Peers = v }
func (m *TLTopPeerCategoryPeers) GetPeers() []*TopPeer { return m.Data2.Peers }


func NewTLTopPeerCategoryPeers() * TLTopPeerCategoryPeers {
    return &TLTopPeerCategoryPeers{ Data2: &TopPeerCategoryPeers_Data{} }
}

func (m* TLTopPeerCategoryPeers) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_topPeerCategoryPeers))

    x.Bytes(m.GetCategory().Encode())
    x.Int(m.GetCount())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetPeers())))
for _, v := range m.GetPeers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLTopPeerCategoryPeers) Decode(dbuf *DecodeBuf) error {
    m1 := &TopPeerCategory{}
    m1.Decode(dbuf)
    m.SetCategory(m1)
    m.SetCount(dbuf.Int())
    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*TopPeer, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &TopPeer{}
	v3[i].Decode(dbuf)
}
m.SetPeers(v3)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// ChatParticipant <--
//  + TL_ChatParticipant
//  + TL_ChatParticipantCreator
//  + TL_ChatParticipantAdmin
//

func (m *ChatParticipant) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_chatParticipant:
        t := m.To_ChatParticipant()
        return t.Encode()
    case TLConstructor_CRC32_chatParticipantCreator:
        t := m.To_ChatParticipantCreator()
        return t.Encode()
    case TLConstructor_CRC32_chatParticipantAdmin:
        t := m.To_ChatParticipantAdmin()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *ChatParticipant) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_chatParticipant:
        m2 := &TLChatParticipant{&ChatParticipant_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_chatParticipantCreator:
        m2 := &TLChatParticipantCreator{&ChatParticipant_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_chatParticipantAdmin:
        m2 := &TLChatParticipantAdmin{&ChatParticipant_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// chatParticipant#c8d7493e user_id:int inviter_id:int date:int = ChatParticipant;
func (m *ChatParticipant) To_ChatParticipant() *TLChatParticipant {
    return &TLChatParticipant{
        Data2: m.Data2,
    }
}

// chatParticipantCreator#da13538a user_id:int = ChatParticipant;
func (m *ChatParticipant) To_ChatParticipantCreator() *TLChatParticipantCreator {
    return &TLChatParticipantCreator{
        Data2: m.Data2,
    }
}

// chatParticipantAdmin#e2d6e436 user_id:int inviter_id:int date:int = ChatParticipant;
func (m *ChatParticipant) To_ChatParticipantAdmin() *TLChatParticipantAdmin {
    return &TLChatParticipantAdmin{
        Data2: m.Data2,
    }
}



// chatParticipant#c8d7493e user_id:int inviter_id:int date:int = ChatParticipant;
func (m *TLChatParticipant) To_ChatParticipant() *ChatParticipant {
    return &ChatParticipant{
        Constructor: TLConstructor_CRC32_chatParticipant,
        Data2: m.Data2,
    }
}


func (m *TLChatParticipant) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLChatParticipant) GetUserId() int32 { return m.Data2.UserId }

func (m *TLChatParticipant) SetInviterId(v int32) { m.Data2.InviterId = v }
func (m *TLChatParticipant) GetInviterId() int32 { return m.Data2.InviterId }

func (m *TLChatParticipant) SetDate(v int32) { m.Data2.Date = v }
func (m *TLChatParticipant) GetDate() int32 { return m.Data2.Date }


func NewTLChatParticipant() * TLChatParticipant {
    return &TLChatParticipant{ Data2: &ChatParticipant_Data{} }
}

func (m* TLChatParticipant) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_chatParticipant))

    x.Int(m.GetUserId())
    x.Int(m.GetInviterId())
    x.Int(m.GetDate())

    return x.buf
}

func (m* TLChatParticipant) Decode(dbuf *DecodeBuf) error {
    m.SetUserId(dbuf.Int())
    m.SetInviterId(dbuf.Int())
    m.SetDate(dbuf.Int())

    return dbuf.err
}
// chatParticipantCreator#da13538a user_id:int = ChatParticipant;
func (m *TLChatParticipantCreator) To_ChatParticipant() *ChatParticipant {
    return &ChatParticipant{
        Constructor: TLConstructor_CRC32_chatParticipantCreator,
        Data2: m.Data2,
    }
}


func (m *TLChatParticipantCreator) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLChatParticipantCreator) GetUserId() int32 { return m.Data2.UserId }


func NewTLChatParticipantCreator() * TLChatParticipantCreator {
    return &TLChatParticipantCreator{ Data2: &ChatParticipant_Data{} }
}

func (m* TLChatParticipantCreator) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_chatParticipantCreator))

    x.Int(m.GetUserId())

    return x.buf
}

func (m* TLChatParticipantCreator) Decode(dbuf *DecodeBuf) error {
    m.SetUserId(dbuf.Int())

    return dbuf.err
}
// chatParticipantAdmin#e2d6e436 user_id:int inviter_id:int date:int = ChatParticipant;
func (m *TLChatParticipantAdmin) To_ChatParticipant() *ChatParticipant {
    return &ChatParticipant{
        Constructor: TLConstructor_CRC32_chatParticipantAdmin,
        Data2: m.Data2,
    }
}


func (m *TLChatParticipantAdmin) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLChatParticipantAdmin) GetUserId() int32 { return m.Data2.UserId }

func (m *TLChatParticipantAdmin) SetInviterId(v int32) { m.Data2.InviterId = v }
func (m *TLChatParticipantAdmin) GetInviterId() int32 { return m.Data2.InviterId }

func (m *TLChatParticipantAdmin) SetDate(v int32) { m.Data2.Date = v }
func (m *TLChatParticipantAdmin) GetDate() int32 { return m.Data2.Date }


func NewTLChatParticipantAdmin() * TLChatParticipantAdmin {
    return &TLChatParticipantAdmin{ Data2: &ChatParticipant_Data{} }
}

func (m* TLChatParticipantAdmin) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_chatParticipantAdmin))

    x.Int(m.GetUserId())
    x.Int(m.GetInviterId())
    x.Int(m.GetDate())

    return x.buf
}

func (m* TLChatParticipantAdmin) Decode(dbuf *DecodeBuf) error {
    m.SetUserId(dbuf.Int())
    m.SetInviterId(dbuf.Int())
    m.SetDate(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Contacts_ImportedContacts <--
//  + TL_ContactsImportedContacts
//

func (m *Contacts_ImportedContacts) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_contacts_importedContacts:
        t := m.To_ContactsImportedContacts()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Contacts_ImportedContacts) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_contacts_importedContacts:
        m2 := &TLContactsImportedContacts{&Contacts_ImportedContacts_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// contacts.importedContacts#77d01c3b imported:Vector<ImportedContact> popular_invites:Vector<PopularContact> retry_contacts:Vector<long> users:Vector<User> = contacts.ImportedContacts;
func (m *Contacts_ImportedContacts) To_ContactsImportedContacts() *TLContactsImportedContacts {
    return &TLContactsImportedContacts{
        Data2: m.Data2,
    }
}



// contacts.importedContacts#77d01c3b imported:Vector<ImportedContact> popular_invites:Vector<PopularContact> retry_contacts:Vector<long> users:Vector<User> = contacts.ImportedContacts;
func (m *TLContactsImportedContacts) To_Contacts_ImportedContacts() *Contacts_ImportedContacts {
    return &Contacts_ImportedContacts{
        Constructor: TLConstructor_CRC32_contacts_importedContacts,
        Data2: m.Data2,
    }
}


func (m *TLContactsImportedContacts) SetImported(v []*ImportedContact) { m.Data2.Imported = v }
func (m *TLContactsImportedContacts) GetImported() []*ImportedContact { return m.Data2.Imported }

func (m *TLContactsImportedContacts) SetPopularInvites(v []*PopularContact) { m.Data2.PopularInvites = v }
func (m *TLContactsImportedContacts) GetPopularInvites() []*PopularContact { return m.Data2.PopularInvites }

func (m *TLContactsImportedContacts) SetRetryContacts(v []int64) { m.Data2.RetryContacts = v }
func (m *TLContactsImportedContacts) GetRetryContacts() []int64 { return m.Data2.RetryContacts }

func (m *TLContactsImportedContacts) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLContactsImportedContacts) GetUsers() []*User { return m.Data2.Users }


func NewTLContactsImportedContacts() * TLContactsImportedContacts {
    return &TLContactsImportedContacts{ Data2: &Contacts_ImportedContacts_Data{} }
}

func (m* TLContactsImportedContacts) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_contacts_importedContacts))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetImported())))
for _, v := range m.GetImported() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetPopularInvites())))
for _, v := range m.GetPopularInvites() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.VectorLong(m.GetRetryContacts())

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLContactsImportedContacts) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*ImportedContact, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &ImportedContact{}
	v1[i].Decode(dbuf)
}
m.SetImported(v1)

    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*PopularContact, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &PopularContact{}
	v2[i].Decode(dbuf)
}
m.SetPopularInvites(v2)

    m.SetRetryContacts(dbuf.VectorLong())
    c4 := dbuf.Int()
if c4 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
	return dbuf.err
}
l4 := dbuf.Int()
v4 := make([]*User, l4)
for i := int32(0); i < l4; i++ {
	v4[i] = &User{}
	v4[i].Decode(dbuf)
}
m.SetUsers(v4)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// ChannelAdminLogEventsFilter <--
//  + TL_ChannelAdminLogEventsFilter
//

func (m *ChannelAdminLogEventsFilter) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_channelAdminLogEventsFilter:
        t := m.To_ChannelAdminLogEventsFilter()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *ChannelAdminLogEventsFilter) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_channelAdminLogEventsFilter:
        m2 := &TLChannelAdminLogEventsFilter{&ChannelAdminLogEventsFilter_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// channelAdminLogEventsFilter#ea107ae4 flags:# join:flags.0?true leave:flags.1?true invite:flags.2?true ban:flags.3?true unban:flags.4?true kick:flags.5?true unkick:flags.6?true promote:flags.7?true demote:flags.8?true info:flags.9?true settings:flags.10?true pinned:flags.11?true edit:flags.12?true delete:flags.13?true = ChannelAdminLogEventsFilter;
func (m *ChannelAdminLogEventsFilter) To_ChannelAdminLogEventsFilter() *TLChannelAdminLogEventsFilter {
    return &TLChannelAdminLogEventsFilter{
        Data2: m.Data2,
    }
}



// channelAdminLogEventsFilter#ea107ae4 flags:# join:flags.0?true leave:flags.1?true invite:flags.2?true ban:flags.3?true unban:flags.4?true kick:flags.5?true unkick:flags.6?true promote:flags.7?true demote:flags.8?true info:flags.9?true settings:flags.10?true pinned:flags.11?true edit:flags.12?true delete:flags.13?true = ChannelAdminLogEventsFilter;
func (m *TLChannelAdminLogEventsFilter) To_ChannelAdminLogEventsFilter() *ChannelAdminLogEventsFilter {
    return &ChannelAdminLogEventsFilter{
        Constructor: TLConstructor_CRC32_channelAdminLogEventsFilter,
        Data2: m.Data2,
    }
}


func (m *TLChannelAdminLogEventsFilter) SetJoin(v bool) { m.Data2.Join = v }
func (m *TLChannelAdminLogEventsFilter) GetJoin() bool { return m.Data2.Join }

func (m *TLChannelAdminLogEventsFilter) SetLeave(v bool) { m.Data2.Leave = v }
func (m *TLChannelAdminLogEventsFilter) GetLeave() bool { return m.Data2.Leave }

func (m *TLChannelAdminLogEventsFilter) SetInvite(v bool) { m.Data2.Invite = v }
func (m *TLChannelAdminLogEventsFilter) GetInvite() bool { return m.Data2.Invite }

func (m *TLChannelAdminLogEventsFilter) SetBan(v bool) { m.Data2.Ban = v }
func (m *TLChannelAdminLogEventsFilter) GetBan() bool { return m.Data2.Ban }

func (m *TLChannelAdminLogEventsFilter) SetUnban(v bool) { m.Data2.Unban = v }
func (m *TLChannelAdminLogEventsFilter) GetUnban() bool { return m.Data2.Unban }

func (m *TLChannelAdminLogEventsFilter) SetKick(v bool) { m.Data2.Kick = v }
func (m *TLChannelAdminLogEventsFilter) GetKick() bool { return m.Data2.Kick }

func (m *TLChannelAdminLogEventsFilter) SetUnkick(v bool) { m.Data2.Unkick = v }
func (m *TLChannelAdminLogEventsFilter) GetUnkick() bool { return m.Data2.Unkick }

func (m *TLChannelAdminLogEventsFilter) SetPromote(v bool) { m.Data2.Promote = v }
func (m *TLChannelAdminLogEventsFilter) GetPromote() bool { return m.Data2.Promote }

func (m *TLChannelAdminLogEventsFilter) SetDemote(v bool) { m.Data2.Demote = v }
func (m *TLChannelAdminLogEventsFilter) GetDemote() bool { return m.Data2.Demote }

func (m *TLChannelAdminLogEventsFilter) SetInfo(v bool) { m.Data2.Info = v }
func (m *TLChannelAdminLogEventsFilter) GetInfo() bool { return m.Data2.Info }

func (m *TLChannelAdminLogEventsFilter) SetSettings(v bool) { m.Data2.Settings = v }
func (m *TLChannelAdminLogEventsFilter) GetSettings() bool { return m.Data2.Settings }

func (m *TLChannelAdminLogEventsFilter) SetPinned(v bool) { m.Data2.Pinned = v }
func (m *TLChannelAdminLogEventsFilter) GetPinned() bool { return m.Data2.Pinned }

func (m *TLChannelAdminLogEventsFilter) SetEdit(v bool) { m.Data2.Edit = v }
func (m *TLChannelAdminLogEventsFilter) GetEdit() bool { return m.Data2.Edit }

func (m *TLChannelAdminLogEventsFilter) SetDelete(v bool) { m.Data2.Delete = v }
func (m *TLChannelAdminLogEventsFilter) GetDelete() bool { return m.Data2.Delete }


func NewTLChannelAdminLogEventsFilter() * TLChannelAdminLogEventsFilter {
    return &TLChannelAdminLogEventsFilter{ Data2: &ChannelAdminLogEventsFilter_Data{} }
}

func (m* TLChannelAdminLogEventsFilter) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelAdminLogEventsFilter))

    // flags
    var flags uint32 = 0
    if m.GetJoin() == true { flags |= 1 << 0 }
    if m.GetLeave() == true { flags |= 1 << 1 }
    if m.GetInvite() == true { flags |= 1 << 2 }
    if m.GetBan() == true { flags |= 1 << 3 }
    if m.GetUnban() == true { flags |= 1 << 4 }
    if m.GetKick() == true { flags |= 1 << 5 }
    if m.GetUnkick() == true { flags |= 1 << 6 }
    if m.GetPromote() == true { flags |= 1 << 7 }
    if m.GetDemote() == true { flags |= 1 << 8 }
    if m.GetInfo() == true { flags |= 1 << 9 }
    if m.GetSettings() == true { flags |= 1 << 10 }
    if m.GetPinned() == true { flags |= 1 << 11 }
    if m.GetEdit() == true { flags |= 1 << 12 }
    if m.GetDelete() == true { flags |= 1 << 13 }
	x.UInt(flags)

    
    
    
    
    
    
    
    
    
    
    
    
    
    

    return x.buf
}

func (m* TLChannelAdminLogEventsFilter) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetJoin(true) }
    if (flags & (1 << 1)) != 0 { m.SetLeave(true) }
    if (flags & (1 << 2)) != 0 { m.SetInvite(true) }
    if (flags & (1 << 3)) != 0 { m.SetBan(true) }
    if (flags & (1 << 4)) != 0 { m.SetUnban(true) }
    if (flags & (1 << 5)) != 0 { m.SetKick(true) }
    if (flags & (1 << 6)) != 0 { m.SetUnkick(true) }
    if (flags & (1 << 7)) != 0 { m.SetPromote(true) }
    if (flags & (1 << 8)) != 0 { m.SetDemote(true) }
    if (flags & (1 << 9)) != 0 { m.SetInfo(true) }
    if (flags & (1 << 10)) != 0 { m.SetSettings(true) }
    if (flags & (1 << 11)) != 0 { m.SetPinned(true) }
    if (flags & (1 << 12)) != 0 { m.SetEdit(true) }
    if (flags & (1 << 13)) != 0 { m.SetDelete(true) }

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Account_Password82 <--
//  + TL_AccountNoPassword82
//  + TL_AccountPassword82
//

func (m *Account_Password82) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_account_noPassword82:
        t := m.To_AccountNoPassword82()
        return t.Encode()
    case TLConstructor_CRC32_account_password82:
        t := m.To_AccountPassword82()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Account_Password82) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_account_noPassword82:
        m2 := &TLAccountNoPassword82{&Account_Password82_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_account_password82:
        m2 := &TLAccountPassword82{&Account_Password82_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// account.noPassword#5ea182f6 new_salt:bytes new_secure_salt:bytes secure_random:bytes email_unconfirmed_pattern:string = account.Password;
func (m *Account_Password82) To_AccountNoPassword82() *TLAccountNoPassword82 {
    return &TLAccountNoPassword82{
        Data2: m.Data2,
    }
}

// account.password#ca39b447 flags:# has_recovery:flags.0?true has_secure_values:flags.1?true current_salt:bytes new_salt:bytes new_secure_salt:bytes secure_random:bytes hint:string email_unconfirmed_pattern:string = account.Password;
func (m *Account_Password82) To_AccountPassword82() *TLAccountPassword82 {
    return &TLAccountPassword82{
        Data2: m.Data2,
    }
}



// account.noPassword#5ea182f6 new_salt:bytes new_secure_salt:bytes secure_random:bytes email_unconfirmed_pattern:string = account.Password;
func (m *TLAccountNoPassword82) To_Account_Password82() *Account_Password82 {
    return &Account_Password82{
        Constructor: TLConstructor_CRC32_account_noPassword82,
        Data2: m.Data2,
    }
}


func (m *TLAccountNoPassword82) SetNewSalt(v []byte) { m.Data2.NewSalt = v }
func (m *TLAccountNoPassword82) GetNewSalt() []byte { return m.Data2.NewSalt }

func (m *TLAccountNoPassword82) SetNewSecureSalt(v []byte) { m.Data2.NewSecureSalt = v }
func (m *TLAccountNoPassword82) GetNewSecureSalt() []byte { return m.Data2.NewSecureSalt }

func (m *TLAccountNoPassword82) SetSecureRandom(v []byte) { m.Data2.SecureRandom = v }
func (m *TLAccountNoPassword82) GetSecureRandom() []byte { return m.Data2.SecureRandom }

func (m *TLAccountNoPassword82) SetEmailUnconfirmedPattern(v string) { m.Data2.EmailUnconfirmedPattern = v }
func (m *TLAccountNoPassword82) GetEmailUnconfirmedPattern() string { return m.Data2.EmailUnconfirmedPattern }


func NewTLAccountNoPassword82() * TLAccountNoPassword82 {
    return &TLAccountNoPassword82{ Data2: &Account_Password82_Data{} }
}

func (m* TLAccountNoPassword82) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_account_noPassword82))

    x.StringBytes(m.GetNewSalt())
    x.StringBytes(m.GetNewSecureSalt())
    x.StringBytes(m.GetSecureRandom())
    x.String(m.GetEmailUnconfirmedPattern())

    return x.buf
}

func (m* TLAccountNoPassword82) Decode(dbuf *DecodeBuf) error {
    m.SetNewSalt(dbuf.StringBytes())
    m.SetNewSecureSalt(dbuf.StringBytes())
    m.SetSecureRandom(dbuf.StringBytes())
    m.SetEmailUnconfirmedPattern(dbuf.String())

    return dbuf.err
}
// account.password#ca39b447 flags:# has_recovery:flags.0?true has_secure_values:flags.1?true current_salt:bytes new_salt:bytes new_secure_salt:bytes secure_random:bytes hint:string email_unconfirmed_pattern:string = account.Password;
func (m *TLAccountPassword82) To_Account_Password82() *Account_Password82 {
    return &Account_Password82{
        Constructor: TLConstructor_CRC32_account_password82,
        Data2: m.Data2,
    }
}


func (m *TLAccountPassword82) SetHasRecovery(v bool) { m.Data2.HasRecovery = v }
func (m *TLAccountPassword82) GetHasRecovery() bool { return m.Data2.HasRecovery }

func (m *TLAccountPassword82) SetHasSecureValues(v bool) { m.Data2.HasSecureValues = v }
func (m *TLAccountPassword82) GetHasSecureValues() bool { return m.Data2.HasSecureValues }

func (m *TLAccountPassword82) SetCurrentSalt(v []byte) { m.Data2.CurrentSalt = v }
func (m *TLAccountPassword82) GetCurrentSalt() []byte { return m.Data2.CurrentSalt }

func (m *TLAccountPassword82) SetNewSalt(v []byte) { m.Data2.NewSalt = v }
func (m *TLAccountPassword82) GetNewSalt() []byte { return m.Data2.NewSalt }

func (m *TLAccountPassword82) SetNewSecureSalt(v []byte) { m.Data2.NewSecureSalt = v }
func (m *TLAccountPassword82) GetNewSecureSalt() []byte { return m.Data2.NewSecureSalt }

func (m *TLAccountPassword82) SetSecureRandom(v []byte) { m.Data2.SecureRandom = v }
func (m *TLAccountPassword82) GetSecureRandom() []byte { return m.Data2.SecureRandom }

func (m *TLAccountPassword82) SetHint(v string) { m.Data2.Hint = v }
func (m *TLAccountPassword82) GetHint() string { return m.Data2.Hint }

func (m *TLAccountPassword82) SetEmailUnconfirmedPattern(v string) { m.Data2.EmailUnconfirmedPattern = v }
func (m *TLAccountPassword82) GetEmailUnconfirmedPattern() string { return m.Data2.EmailUnconfirmedPattern }


func NewTLAccountPassword82() * TLAccountPassword82 {
    return &TLAccountPassword82{ Data2: &Account_Password82_Data{} }
}

func (m* TLAccountPassword82) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_account_password82))

    // flags
    var flags uint32 = 0
    if m.GetHasRecovery() == true { flags |= 1 << 0 }
    if m.GetHasSecureValues() == true { flags |= 1 << 1 }
	x.UInt(flags)

    
    
    x.StringBytes(m.GetCurrentSalt())
    x.StringBytes(m.GetNewSalt())
    x.StringBytes(m.GetNewSecureSalt())
    x.StringBytes(m.GetSecureRandom())
    x.String(m.GetHint())
    x.String(m.GetEmailUnconfirmedPattern())

    return x.buf
}

func (m* TLAccountPassword82) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetHasRecovery(true) }
    if (flags & (1 << 1)) != 0 { m.SetHasSecureValues(true) }
    m.SetCurrentSalt(dbuf.StringBytes())
    m.SetNewSalt(dbuf.StringBytes())
    m.SetNewSecureSalt(dbuf.StringBytes())
    m.SetSecureRandom(dbuf.StringBytes())
    m.SetHint(dbuf.String())
    m.SetEmailUnconfirmedPattern(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Config114 <--
//  + TL_Config114
//

func (m *Config114) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_config114:
        t := m.To_Config114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Config114) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_config114:
        m2 := &TLConfig114{&Config114_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// config#330b4067 flags:# phonecalls_enabled:flags.1?true default_p2p_contacts:flags.3?true preload_featured_stickers:flags.4?true ignore_phone_entities:flags.5?true revoke_pm_inbox:flags.6?true blocked_mode:flags.8?true pfs_enabled:flags.13?true date:int expires:int test_mode:Bool this_dc:int dc_options:Vector<DcOption> dc_txt_domain_name:string chat_size_max:int megagroup_size_max:int forwarded_count_max:int online_update_period_ms:int offline_blur_timeout_ms:int offline_idle_timeout_ms:int online_cloud_timeout_ms:int notify_cloud_delay_ms:int notify_default_delay_ms:int push_chat_period_ms:int push_chat_limit:int saved_gifs_limit:int edit_time_limit:int revoke_time_limit:int revoke_pm_time_limit:int rating_e_decay:int stickers_recent_limit:int stickers_faved_limit:int channels_read_media_period:int tmp_sessions:flags.0?int pinned_dialogs_count_max:int pinned_infolder_count_max:int call_receive_timeout_ms:int call_ring_timeout_ms:int call_connect_timeout_ms:int call_packet_timeout_ms:int me_url_prefix:string autoupdate_url_prefix:flags.7?string gif_search_username:flags.9?string venue_search_username:flags.10?string img_search_username:flags.11?string static_maps_provider:flags.12?string caption_length_max:int message_length_max:int webfile_dc_id:int suggested_lang_code:flags.2?string lang_pack_version:flags.2?int base_lang_pack_version:flags.2?int = Config;
func (m *Config114) To_Config114() *TLConfig114 {
    return &TLConfig114{
        Data2: m.Data2,
    }
}



// config#330b4067 flags:# phonecalls_enabled:flags.1?true default_p2p_contacts:flags.3?true preload_featured_stickers:flags.4?true ignore_phone_entities:flags.5?true revoke_pm_inbox:flags.6?true blocked_mode:flags.8?true pfs_enabled:flags.13?true date:int expires:int test_mode:Bool this_dc:int dc_options:Vector<DcOption> dc_txt_domain_name:string chat_size_max:int megagroup_size_max:int forwarded_count_max:int online_update_period_ms:int offline_blur_timeout_ms:int offline_idle_timeout_ms:int online_cloud_timeout_ms:int notify_cloud_delay_ms:int notify_default_delay_ms:int push_chat_period_ms:int push_chat_limit:int saved_gifs_limit:int edit_time_limit:int revoke_time_limit:int revoke_pm_time_limit:int rating_e_decay:int stickers_recent_limit:int stickers_faved_limit:int channels_read_media_period:int tmp_sessions:flags.0?int pinned_dialogs_count_max:int pinned_infolder_count_max:int call_receive_timeout_ms:int call_ring_timeout_ms:int call_connect_timeout_ms:int call_packet_timeout_ms:int me_url_prefix:string autoupdate_url_prefix:flags.7?string gif_search_username:flags.9?string venue_search_username:flags.10?string img_search_username:flags.11?string static_maps_provider:flags.12?string caption_length_max:int message_length_max:int webfile_dc_id:int suggested_lang_code:flags.2?string lang_pack_version:flags.2?int base_lang_pack_version:flags.2?int = Config;
func (m *TLConfig114) To_Config114() *Config114 {
    return &Config114{
        Constructor: TLConstructor_CRC32_config114,
        Data2: m.Data2,
    }
}


func (m *TLConfig114) SetPhonecallsEnabled(v bool) { m.Data2.PhonecallsEnabled = v }
func (m *TLConfig114) GetPhonecallsEnabled() bool { return m.Data2.PhonecallsEnabled }

func (m *TLConfig114) SetDefaultP2pContacts(v bool) { m.Data2.DefaultP2PContacts = v }
func (m *TLConfig114) GetDefaultP2pContacts() bool { return m.Data2.DefaultP2PContacts }

func (m *TLConfig114) SetPreloadFeaturedStickers(v bool) { m.Data2.PreloadFeaturedStickers = v }
func (m *TLConfig114) GetPreloadFeaturedStickers() bool { return m.Data2.PreloadFeaturedStickers }

func (m *TLConfig114) SetIgnorePhoneEntities(v bool) { m.Data2.IgnorePhoneEntities = v }
func (m *TLConfig114) GetIgnorePhoneEntities() bool { return m.Data2.IgnorePhoneEntities }

func (m *TLConfig114) SetRevokePmInbox(v bool) { m.Data2.RevokePmInbox = v }
func (m *TLConfig114) GetRevokePmInbox() bool { return m.Data2.RevokePmInbox }

func (m *TLConfig114) SetBlockedMode(v bool) { m.Data2.BlockedMode = v }
func (m *TLConfig114) GetBlockedMode() bool { return m.Data2.BlockedMode }

func (m *TLConfig114) SetPfsEnabled(v bool) { m.Data2.PfsEnabled = v }
func (m *TLConfig114) GetPfsEnabled() bool { return m.Data2.PfsEnabled }

func (m *TLConfig114) SetDate(v int32) { m.Data2.Date = v }
func (m *TLConfig114) GetDate() int32 { return m.Data2.Date }

func (m *TLConfig114) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLConfig114) GetExpires() int32 { return m.Data2.Expires }

func (m *TLConfig114) SetTestMode(v *Bool) { m.Data2.TestMode = v }
func (m *TLConfig114) GetTestMode() *Bool { return m.Data2.TestMode }

func (m *TLConfig114) SetThisDc(v int32) { m.Data2.ThisDc = v }
func (m *TLConfig114) GetThisDc() int32 { return m.Data2.ThisDc }

func (m *TLConfig114) SetDcOptions(v []*DcOption82) { m.Data2.DcOptions = v }
func (m *TLConfig114) GetDcOptions() []*DcOption82 { return m.Data2.DcOptions }

func (m *TLConfig114) SetDcTxtDomainName(v string) { m.Data2.DcTxtDomainName = v }
func (m *TLConfig114) GetDcTxtDomainName() string { return m.Data2.DcTxtDomainName }

func (m *TLConfig114) SetChatSizeMax(v int32) { m.Data2.ChatSizeMax = v }
func (m *TLConfig114) GetChatSizeMax() int32 { return m.Data2.ChatSizeMax }

func (m *TLConfig114) SetMegagroupSizeMax(v int32) { m.Data2.MegagroupSizeMax = v }
func (m *TLConfig114) GetMegagroupSizeMax() int32 { return m.Data2.MegagroupSizeMax }

func (m *TLConfig114) SetForwardedCountMax(v int32) { m.Data2.ForwardedCountMax = v }
func (m *TLConfig114) GetForwardedCountMax() int32 { return m.Data2.ForwardedCountMax }

func (m *TLConfig114) SetOnlineUpdatePeriodMs(v int32) { m.Data2.OnlineUpdatePeriodMs = v }
func (m *TLConfig114) GetOnlineUpdatePeriodMs() int32 { return m.Data2.OnlineUpdatePeriodMs }

func (m *TLConfig114) SetOfflineBlurTimeoutMs(v int32) { m.Data2.OfflineBlurTimeoutMs = v }
func (m *TLConfig114) GetOfflineBlurTimeoutMs() int32 { return m.Data2.OfflineBlurTimeoutMs }

func (m *TLConfig114) SetOfflineIdleTimeoutMs(v int32) { m.Data2.OfflineIdleTimeoutMs = v }
func (m *TLConfig114) GetOfflineIdleTimeoutMs() int32 { return m.Data2.OfflineIdleTimeoutMs }

func (m *TLConfig114) SetOnlineCloudTimeoutMs(v int32) { m.Data2.OnlineCloudTimeoutMs = v }
func (m *TLConfig114) GetOnlineCloudTimeoutMs() int32 { return m.Data2.OnlineCloudTimeoutMs }

func (m *TLConfig114) SetNotifyCloudDelayMs(v int32) { m.Data2.NotifyCloudDelayMs = v }
func (m *TLConfig114) GetNotifyCloudDelayMs() int32 { return m.Data2.NotifyCloudDelayMs }

func (m *TLConfig114) SetNotifyDefaultDelayMs(v int32) { m.Data2.NotifyDefaultDelayMs = v }
func (m *TLConfig114) GetNotifyDefaultDelayMs() int32 { return m.Data2.NotifyDefaultDelayMs }

func (m *TLConfig114) SetPushChatPeriodMs(v int32) { m.Data2.PushChatPeriodMs = v }
func (m *TLConfig114) GetPushChatPeriodMs() int32 { return m.Data2.PushChatPeriodMs }

func (m *TLConfig114) SetPushChatLimit(v int32) { m.Data2.PushChatLimit = v }
func (m *TLConfig114) GetPushChatLimit() int32 { return m.Data2.PushChatLimit }

func (m *TLConfig114) SetSavedGifsLimit(v int32) { m.Data2.SavedGifsLimit = v }
func (m *TLConfig114) GetSavedGifsLimit() int32 { return m.Data2.SavedGifsLimit }

func (m *TLConfig114) SetEditTimeLimit(v int32) { m.Data2.EditTimeLimit = v }
func (m *TLConfig114) GetEditTimeLimit() int32 { return m.Data2.EditTimeLimit }

func (m *TLConfig114) SetRevokeTimeLimit(v int32) { m.Data2.RevokeTimeLimit = v }
func (m *TLConfig114) GetRevokeTimeLimit() int32 { return m.Data2.RevokeTimeLimit }

func (m *TLConfig114) SetRevokePmTimeLimit(v int32) { m.Data2.RevokePmTimeLimit = v }
func (m *TLConfig114) GetRevokePmTimeLimit() int32 { return m.Data2.RevokePmTimeLimit }

func (m *TLConfig114) SetRatingEDecay(v int32) { m.Data2.RatingEDecay = v }
func (m *TLConfig114) GetRatingEDecay() int32 { return m.Data2.RatingEDecay }

func (m *TLConfig114) SetStickersRecentLimit(v int32) { m.Data2.StickersRecentLimit = v }
func (m *TLConfig114) GetStickersRecentLimit() int32 { return m.Data2.StickersRecentLimit }

func (m *TLConfig114) SetStickersFavedLimit(v int32) { m.Data2.StickersFavedLimit = v }
func (m *TLConfig114) GetStickersFavedLimit() int32 { return m.Data2.StickersFavedLimit }

func (m *TLConfig114) SetChannelsReadMediaPeriod(v int32) { m.Data2.ChannelsReadMediaPeriod = v }
func (m *TLConfig114) GetChannelsReadMediaPeriod() int32 { return m.Data2.ChannelsReadMediaPeriod }

func (m *TLConfig114) SetTmpSessions(v int32) { m.Data2.TmpSessions = v }
func (m *TLConfig114) GetTmpSessions() int32 { return m.Data2.TmpSessions }

func (m *TLConfig114) SetPinnedDialogsCountMax(v int32) { m.Data2.PinnedDialogsCountMax = v }
func (m *TLConfig114) GetPinnedDialogsCountMax() int32 { return m.Data2.PinnedDialogsCountMax }

func (m *TLConfig114) SetPinnedInfolderCountMax(v int32) { m.Data2.PinnedInfolderCountMax = v }
func (m *TLConfig114) GetPinnedInfolderCountMax() int32 { return m.Data2.PinnedInfolderCountMax }

func (m *TLConfig114) SetCallReceiveTimeoutMs(v int32) { m.Data2.CallReceiveTimeoutMs = v }
func (m *TLConfig114) GetCallReceiveTimeoutMs() int32 { return m.Data2.CallReceiveTimeoutMs }

func (m *TLConfig114) SetCallRingTimeoutMs(v int32) { m.Data2.CallRingTimeoutMs = v }
func (m *TLConfig114) GetCallRingTimeoutMs() int32 { return m.Data2.CallRingTimeoutMs }

func (m *TLConfig114) SetCallConnectTimeoutMs(v int32) { m.Data2.CallConnectTimeoutMs = v }
func (m *TLConfig114) GetCallConnectTimeoutMs() int32 { return m.Data2.CallConnectTimeoutMs }

func (m *TLConfig114) SetCallPacketTimeoutMs(v int32) { m.Data2.CallPacketTimeoutMs = v }
func (m *TLConfig114) GetCallPacketTimeoutMs() int32 { return m.Data2.CallPacketTimeoutMs }

func (m *TLConfig114) SetMeUrlPrefix(v string) { m.Data2.MeUrlPrefix = v }
func (m *TLConfig114) GetMeUrlPrefix() string { return m.Data2.MeUrlPrefix }

func (m *TLConfig114) SetAutoupdateUrlPrefix(v string) { m.Data2.AutoupdateUrlPrefix = v }
func (m *TLConfig114) GetAutoupdateUrlPrefix() string { return m.Data2.AutoupdateUrlPrefix }

func (m *TLConfig114) SetGifSearchUsername(v string) { m.Data2.GifSearchUsername = v }
func (m *TLConfig114) GetGifSearchUsername() string { return m.Data2.GifSearchUsername }

func (m *TLConfig114) SetVenueSearchUsername(v string) { m.Data2.VenueSearchUsername = v }
func (m *TLConfig114) GetVenueSearchUsername() string { return m.Data2.VenueSearchUsername }

func (m *TLConfig114) SetImgSearchUsername(v string) { m.Data2.ImgSearchUsername = v }
func (m *TLConfig114) GetImgSearchUsername() string { return m.Data2.ImgSearchUsername }

func (m *TLConfig114) SetStaticMapsProvider(v string) { m.Data2.StaticMapsProvider = v }
func (m *TLConfig114) GetStaticMapsProvider() string { return m.Data2.StaticMapsProvider }

func (m *TLConfig114) SetCaptionLengthMax(v int32) { m.Data2.CaptionLengthMax = v }
func (m *TLConfig114) GetCaptionLengthMax() int32 { return m.Data2.CaptionLengthMax }

func (m *TLConfig114) SetMessageLengthMax(v int32) { m.Data2.MessageLengthMax = v }
func (m *TLConfig114) GetMessageLengthMax() int32 { return m.Data2.MessageLengthMax }

func (m *TLConfig114) SetWebfileDcId(v int32) { m.Data2.WebfileDcId = v }
func (m *TLConfig114) GetWebfileDcId() int32 { return m.Data2.WebfileDcId }

func (m *TLConfig114) SetSuggestedLangCode(v string) { m.Data2.SuggestedLangCode = v }
func (m *TLConfig114) GetSuggestedLangCode() string { return m.Data2.SuggestedLangCode }

func (m *TLConfig114) SetLangPackVersion(v int32) { m.Data2.LangPackVersion = v }
func (m *TLConfig114) GetLangPackVersion() int32 { return m.Data2.LangPackVersion }

func (m *TLConfig114) SetBaseLangPackVersion(v int32) { m.Data2.BaseLangPackVersion = v }
func (m *TLConfig114) GetBaseLangPackVersion() int32 { return m.Data2.BaseLangPackVersion }


func NewTLConfig114() * TLConfig114 {
    return &TLConfig114{ Data2: &Config114_Data{} }
}

func (m* TLConfig114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_config114))

    // flags
    var flags uint32 = 0
    if m.GetPhonecallsEnabled() == true { flags |= 1 << 1 }
    if m.GetDefaultP2pContacts() == true { flags |= 1 << 3 }
    if m.GetPreloadFeaturedStickers() == true { flags |= 1 << 4 }
    if m.GetIgnorePhoneEntities() == true { flags |= 1 << 5 }
    if m.GetRevokePmInbox() == true { flags |= 1 << 6 }
    if m.GetBlockedMode() == true { flags |= 1 << 8 }
    if m.GetPfsEnabled() == true { flags |= 1 << 13 }
    if m.GetTmpSessions() != 0 { flags |= 1 << 0 }
    if m.GetAutoupdateUrlPrefix() != "" { flags |= 1 << 7 }
    if m.GetGifSearchUsername() != "" { flags |= 1 << 9 }
    if m.GetVenueSearchUsername() != "" { flags |= 1 << 10 }
    if m.GetImgSearchUsername() != "" { flags |= 1 << 11 }
    if m.GetStaticMapsProvider() != "" { flags |= 1 << 12 }
    if m.GetSuggestedLangCode() != "" { flags |= 1 << 2 }
    if m.GetLangPackVersion() != 0 { flags |= 1 << 2 }
    if m.GetBaseLangPackVersion() != 0 { flags |= 1 << 2 }
	x.UInt(flags)

    
    
    
    
    
    
    
    x.Int(m.GetDate())
    x.Int(m.GetExpires())
    x.Bytes(m.GetTestMode().Encode())
    x.Int(m.GetThisDc())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetDcOptions())))
for _, v := range m.GetDcOptions() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.String(m.GetDcTxtDomainName())
    x.Int(m.GetChatSizeMax())
    x.Int(m.GetMegagroupSizeMax())
    x.Int(m.GetForwardedCountMax())
    x.Int(m.GetOnlineUpdatePeriodMs())
    x.Int(m.GetOfflineBlurTimeoutMs())
    x.Int(m.GetOfflineIdleTimeoutMs())
    x.Int(m.GetOnlineCloudTimeoutMs())
    x.Int(m.GetNotifyCloudDelayMs())
    x.Int(m.GetNotifyDefaultDelayMs())
    x.Int(m.GetPushChatPeriodMs())
    x.Int(m.GetPushChatLimit())
    x.Int(m.GetSavedGifsLimit())
    x.Int(m.GetEditTimeLimit())
    x.Int(m.GetRevokeTimeLimit())
    x.Int(m.GetRevokePmTimeLimit())
    x.Int(m.GetRatingEDecay())
    x.Int(m.GetStickersRecentLimit())
    x.Int(m.GetStickersFavedLimit())
    x.Int(m.GetChannelsReadMediaPeriod())
    if (flags & (1 << 0)) != 0 { x.Int(m.GetTmpSessions()) }
    x.Int(m.GetPinnedDialogsCountMax())
    x.Int(m.GetPinnedInfolderCountMax())
    x.Int(m.GetCallReceiveTimeoutMs())
    x.Int(m.GetCallRingTimeoutMs())
    x.Int(m.GetCallConnectTimeoutMs())
    x.Int(m.GetCallPacketTimeoutMs())
    x.String(m.GetMeUrlPrefix())
    if (flags & (1 << 7)) != 0 { x.String(m.GetAutoupdateUrlPrefix()) }
    if (flags & (1 << 9)) != 0 { x.String(m.GetGifSearchUsername()) }
    if (flags & (1 << 10)) != 0 { x.String(m.GetVenueSearchUsername()) }
    if (flags & (1 << 11)) != 0 { x.String(m.GetImgSearchUsername()) }
    if (flags & (1 << 12)) != 0 { x.String(m.GetStaticMapsProvider()) }
    x.Int(m.GetCaptionLengthMax())
    x.Int(m.GetMessageLengthMax())
    x.Int(m.GetWebfileDcId())
    if (flags & (1 << 2)) != 0 { x.String(m.GetSuggestedLangCode()) }
    if (flags & (1 << 2)) != 0 { x.Int(m.GetLangPackVersion()) }
    if (flags & (1 << 2)) != 0 { x.Int(m.GetBaseLangPackVersion()) }

    return x.buf
}

func (m* TLConfig114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 1)) != 0 { m.SetPhonecallsEnabled(true) }
    if (flags & (1 << 3)) != 0 { m.SetDefaultP2pContacts(true) }
    if (flags & (1 << 4)) != 0 { m.SetPreloadFeaturedStickers(true) }
    if (flags & (1 << 5)) != 0 { m.SetIgnorePhoneEntities(true) }
    if (flags & (1 << 6)) != 0 { m.SetRevokePmInbox(true) }
    if (flags & (1 << 8)) != 0 { m.SetBlockedMode(true) }
    if (flags & (1 << 13)) != 0 { m.SetPfsEnabled(true) }
    m.SetDate(dbuf.Int())
    m.SetExpires(dbuf.Int())
    m11 := &Bool{}
    m11.Decode(dbuf)
    m.SetTestMode(m11)
    m.SetThisDc(dbuf.Int())
    c13 := dbuf.Int()
if c13 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 13, c13)
	return dbuf.err
}
l13 := dbuf.Int()
v13 := make([]*DcOption82, l13)
for i := int32(0); i < l13; i++ {
	v13[i] = &DcOption82{}
	v13[i].Decode(dbuf)
}
m.SetDcOptions(v13)

    m.SetDcTxtDomainName(dbuf.String())
    m.SetChatSizeMax(dbuf.Int())
    m.SetMegagroupSizeMax(dbuf.Int())
    m.SetForwardedCountMax(dbuf.Int())
    m.SetOnlineUpdatePeriodMs(dbuf.Int())
    m.SetOfflineBlurTimeoutMs(dbuf.Int())
    m.SetOfflineIdleTimeoutMs(dbuf.Int())
    m.SetOnlineCloudTimeoutMs(dbuf.Int())
    m.SetNotifyCloudDelayMs(dbuf.Int())
    m.SetNotifyDefaultDelayMs(dbuf.Int())
    m.SetPushChatPeriodMs(dbuf.Int())
    m.SetPushChatLimit(dbuf.Int())
    m.SetSavedGifsLimit(dbuf.Int())
    m.SetEditTimeLimit(dbuf.Int())
    m.SetRevokeTimeLimit(dbuf.Int())
    m.SetRevokePmTimeLimit(dbuf.Int())
    m.SetRatingEDecay(dbuf.Int())
    m.SetStickersRecentLimit(dbuf.Int())
    m.SetStickersFavedLimit(dbuf.Int())
    m.SetChannelsReadMediaPeriod(dbuf.Int())
    if (flags & (1 << 0)) != 0 { m.SetTmpSessions(dbuf.Int()) }
    m.SetPinnedDialogsCountMax(dbuf.Int())
    m.SetPinnedInfolderCountMax(dbuf.Int())
    m.SetCallReceiveTimeoutMs(dbuf.Int())
    m.SetCallRingTimeoutMs(dbuf.Int())
    m.SetCallConnectTimeoutMs(dbuf.Int())
    m.SetCallPacketTimeoutMs(dbuf.Int())
    m.SetMeUrlPrefix(dbuf.String())
    if (flags & (1 << 7)) != 0 { m.SetAutoupdateUrlPrefix(dbuf.String()) }
    if (flags & (1 << 9)) != 0 { m.SetGifSearchUsername(dbuf.String()) }
    if (flags & (1 << 10)) != 0 { m.SetVenueSearchUsername(dbuf.String()) }
    if (flags & (1 << 11)) != 0 { m.SetImgSearchUsername(dbuf.String()) }
    if (flags & (1 << 12)) != 0 { m.SetStaticMapsProvider(dbuf.String()) }
    m.SetCaptionLengthMax(dbuf.Int())
    m.SetMessageLengthMax(dbuf.Int())
    m.SetWebfileDcId(dbuf.Int())
    if (flags & (1 << 2)) != 0 { m.SetSuggestedLangCode(dbuf.String()) }
    if (flags & (1 << 2)) != 0 { m.SetLangPackVersion(dbuf.Int()) }
    if (flags & (1 << 2)) != 0 { m.SetBaseLangPackVersion(dbuf.Int()) }

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Help_PassportConfig <--
//  + TL_HelpPassportConfigNotModified
//  + TL_HelpPassportConfig
//

func (m *Help_PassportConfig) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_help_passportConfigNotModified:
        t := m.To_HelpPassportConfigNotModified()
        return t.Encode()
    case TLConstructor_CRC32_help_passportConfig:
        t := m.To_HelpPassportConfig()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Help_PassportConfig) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_help_passportConfigNotModified:
        m2 := &TLHelpPassportConfigNotModified{&Help_PassportConfig_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_help_passportConfig:
        m2 := &TLHelpPassportConfig{&Help_PassportConfig_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// help.passportConfigNotModified#bfb9f457 = help.PassportConfig;
func (m *Help_PassportConfig) To_HelpPassportConfigNotModified() *TLHelpPassportConfigNotModified {
    return &TLHelpPassportConfigNotModified{
        Data2: m.Data2,
    }
}

// help.passportConfig#a098d6af hash:int countries_langs:DataJSON = help.PassportConfig;
func (m *Help_PassportConfig) To_HelpPassportConfig() *TLHelpPassportConfig {
    return &TLHelpPassportConfig{
        Data2: m.Data2,
    }
}



// help.passportConfigNotModified#bfb9f457 = help.PassportConfig;
func (m *TLHelpPassportConfigNotModified) To_Help_PassportConfig() *Help_PassportConfig {
    return &Help_PassportConfig{
        Constructor: TLConstructor_CRC32_help_passportConfigNotModified,
        Data2: m.Data2,
    }
}



func NewTLHelpPassportConfigNotModified() * TLHelpPassportConfigNotModified {
    return &TLHelpPassportConfigNotModified{ Data2: &Help_PassportConfig_Data{} }
}

func (m* TLHelpPassportConfigNotModified) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_help_passportConfigNotModified))


    return x.buf
}

func (m* TLHelpPassportConfigNotModified) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// help.passportConfig#a098d6af hash:int countries_langs:DataJSON = help.PassportConfig;
func (m *TLHelpPassportConfig) To_Help_PassportConfig() *Help_PassportConfig {
    return &Help_PassportConfig{
        Constructor: TLConstructor_CRC32_help_passportConfig,
        Data2: m.Data2,
    }
}


func (m *TLHelpPassportConfig) SetHash(v int32) { m.Data2.Hash = v }
func (m *TLHelpPassportConfig) GetHash() int32 { return m.Data2.Hash }

func (m *TLHelpPassportConfig) SetCountriesLangs(v *DataJSON) { m.Data2.CountriesLangs = v }
func (m *TLHelpPassportConfig) GetCountriesLangs() *DataJSON { return m.Data2.CountriesLangs }


func NewTLHelpPassportConfig() * TLHelpPassportConfig {
    return &TLHelpPassportConfig{ Data2: &Help_PassportConfig_Data{} }
}

func (m* TLHelpPassportConfig) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_help_passportConfig))

    x.Int(m.GetHash())
    x.Bytes(m.GetCountriesLangs().Encode())

    return x.buf
}

func (m* TLHelpPassportConfig) Decode(dbuf *DecodeBuf) error {
    m.SetHash(dbuf.Int())
    m2 := &DataJSON{}
    m2.Decode(dbuf)
    m.SetCountriesLangs(m2)

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// ChatOnlines <--
//  + TL_ChatOnlines
//

func (m *ChatOnlines) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_chatOnlines:
        t := m.To_ChatOnlines()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *ChatOnlines) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_chatOnlines:
        m2 := &TLChatOnlines{&ChatOnlines_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// chatOnlines#f041e250 onlines:int = ChatOnlines;
func (m *ChatOnlines) To_ChatOnlines() *TLChatOnlines {
    return &TLChatOnlines{
        Data2: m.Data2,
    }
}



// chatOnlines#f041e250 onlines:int = ChatOnlines;
func (m *TLChatOnlines) To_ChatOnlines() *ChatOnlines {
    return &ChatOnlines{
        Constructor: TLConstructor_CRC32_chatOnlines,
        Data2: m.Data2,
    }
}


func (m *TLChatOnlines) SetOnlines(v int32) { m.Data2.Onlines = v }
func (m *TLChatOnlines) GetOnlines() int32 { return m.Data2.Onlines }


func NewTLChatOnlines() * TLChatOnlines {
    return &TLChatOnlines{ Data2: &ChatOnlines_Data{} }
}

func (m* TLChatOnlines) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_chatOnlines))

    x.Int(m.GetOnlines())

    return x.buf
}

func (m* TLChatOnlines) Decode(dbuf *DecodeBuf) error {
    m.SetOnlines(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Message <--
//  + TL_MessageEmpty
//  + TL_Message
//  + TL_MessageService
//  + TL_Message114
//

func (m *Message) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messageEmpty:
        t := m.To_MessageEmpty()
        return t.Encode()
    case TLConstructor_CRC32_message:
        t := m.To_Message()
        return t.Encode()
    case TLConstructor_CRC32_messageService:
        t := m.To_MessageService()
        return t.Encode()
    case TLConstructor_CRC32_message114:
        t := m.To_Message114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Message) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messageEmpty:
        m2 := &TLMessageEmpty{&Message_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_message:
        m2 := &TLMessage{&Message_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageService:
        m2 := &TLMessageService{&Message_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_message114:
        m2 := &TLMessage114{&Message_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messageEmpty#83e5de54 id:int = Message;
func (m *Message) To_MessageEmpty() *TLMessageEmpty {
    return &TLMessageEmpty{
        Data2: m.Data2,
    }
}

// message#44f9b43d flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true post:flags.14?true id:int from_id:flags.8?int to_id:Peer fwd_from:flags.2?MessageFwdHeader via_bot_id:flags.11?int reply_to_msg_id:flags.3?int date:int message:string media:flags.9?MessageMedia reply_markup:flags.6?ReplyMarkup entities:flags.7?Vector<MessageEntity> views:flags.10?int edit_date:flags.15?int post_author:flags.16?string grouped_id:flags.17?long = Message;
func (m *Message) To_Message() *TLMessage {
    return &TLMessage{
        Data2: m.Data2,
    }
}

// messageService#9e19a1f6 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true post:flags.14?true id:int from_id:flags.8?int to_id:Peer reply_to_msg_id:flags.3?int date:int action:MessageAction = Message;
func (m *Message) To_MessageService() *TLMessageService {
    return &TLMessageService{
        Data2: m.Data2,
    }
}

// message#452c0e65 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true post:flags.14?true from_scheduled:flags.18?true legacy:flags.19?true edit_hide:flags.21?true id:int from_id:flags.8?int to_id:Peer fwd_from:flags.2?MessageFwdHeader via_bot_id:flags.11?int reply_to_msg_id:flags.3?int date:int message:string media:flags.9?MessageMedia reply_markup:flags.6?ReplyMarkup entities:flags.7?Vector<MessageEntity> views:flags.10?int edit_date:flags.15?int post_author:flags.16?string grouped_id:flags.17?long restriction_reason:flags.22?Vector<RestrictionReason> = Message;
func (m *Message) To_Message114() *TLMessage114 {
    return &TLMessage114{
        Data2: m.Data2,
    }
}



// messageEmpty#83e5de54 id:int = Message;
func (m *TLMessageEmpty) To_Message() *Message {
    return &Message{
        Constructor: TLConstructor_CRC32_messageEmpty,
        Data2: m.Data2,
    }
}


func (m *TLMessageEmpty) SetId(v int32) { m.Data2.Id = v }
func (m *TLMessageEmpty) GetId() int32 { return m.Data2.Id }


func NewTLMessageEmpty() * TLMessageEmpty {
    return &TLMessageEmpty{ Data2: &Message_Data{} }
}

func (m* TLMessageEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageEmpty))

    x.Int(m.GetId())

    return x.buf
}

func (m* TLMessageEmpty) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Int())

    return dbuf.err
}
// message#44f9b43d flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true post:flags.14?true id:int from_id:flags.8?int to_id:Peer fwd_from:flags.2?MessageFwdHeader via_bot_id:flags.11?int reply_to_msg_id:flags.3?int date:int message:string media:flags.9?MessageMedia reply_markup:flags.6?ReplyMarkup entities:flags.7?Vector<MessageEntity> views:flags.10?int edit_date:flags.15?int post_author:flags.16?string grouped_id:flags.17?long = Message;
func (m *TLMessage) To_Message() *Message {
    return &Message{
        Constructor: TLConstructor_CRC32_message,
        Data2: m.Data2,
    }
}


func (m *TLMessage) SetOut(v bool) { m.Data2.Out = v }
func (m *TLMessage) GetOut() bool { return m.Data2.Out }

func (m *TLMessage) SetMentioned(v bool) { m.Data2.Mentioned = v }
func (m *TLMessage) GetMentioned() bool { return m.Data2.Mentioned }

func (m *TLMessage) SetMediaUnread(v bool) { m.Data2.MediaUnread = v }
func (m *TLMessage) GetMediaUnread() bool { return m.Data2.MediaUnread }

func (m *TLMessage) SetSilent(v bool) { m.Data2.Silent = v }
func (m *TLMessage) GetSilent() bool { return m.Data2.Silent }

func (m *TLMessage) SetPost(v bool) { m.Data2.Post = v }
func (m *TLMessage) GetPost() bool { return m.Data2.Post }

func (m *TLMessage) SetId(v int32) { m.Data2.Id = v }
func (m *TLMessage) GetId() int32 { return m.Data2.Id }

func (m *TLMessage) SetFromId(v int32) { m.Data2.FromId = v }
func (m *TLMessage) GetFromId() int32 { return m.Data2.FromId }

func (m *TLMessage) SetToId(v *Peer) { m.Data2.ToId = v }
func (m *TLMessage) GetToId() *Peer { return m.Data2.ToId }

func (m *TLMessage) SetFwdFrom(v *MessageFwdHeader) { m.Data2.FwdFrom = v }
func (m *TLMessage) GetFwdFrom() *MessageFwdHeader { return m.Data2.FwdFrom }

func (m *TLMessage) SetViaBotId(v int32) { m.Data2.ViaBotId = v }
func (m *TLMessage) GetViaBotId() int32 { return m.Data2.ViaBotId }

func (m *TLMessage) SetReplyToMsgId(v int32) { m.Data2.ReplyToMsgId = v }
func (m *TLMessage) GetReplyToMsgId() int32 { return m.Data2.ReplyToMsgId }

func (m *TLMessage) SetDate(v int32) { m.Data2.Date = v }
func (m *TLMessage) GetDate() int32 { return m.Data2.Date }

func (m *TLMessage) SetMessage(v string) { m.Data2.Message = v }
func (m *TLMessage) GetMessage() string { return m.Data2.Message }

func (m *TLMessage) SetMedia(v *MessageMedia) { m.Data2.Media = v }
func (m *TLMessage) GetMedia() *MessageMedia { return m.Data2.Media }

func (m *TLMessage) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLMessage) GetReplyMarkup() *ReplyMarkup { return m.Data2.ReplyMarkup }

func (m *TLMessage) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLMessage) GetEntities() []*MessageEntity { return m.Data2.Entities }

func (m *TLMessage) SetViews(v int32) { m.Data2.Views = v }
func (m *TLMessage) GetViews() int32 { return m.Data2.Views }

func (m *TLMessage) SetEditDate(v int32) { m.Data2.EditDate = v }
func (m *TLMessage) GetEditDate() int32 { return m.Data2.EditDate }

func (m *TLMessage) SetPostAuthor(v string) { m.Data2.PostAuthor = v }
func (m *TLMessage) GetPostAuthor() string { return m.Data2.PostAuthor }

func (m *TLMessage) SetGroupedId(v int64) { m.Data2.GroupedId = v }
func (m *TLMessage) GetGroupedId() int64 { return m.Data2.GroupedId }


func NewTLMessage() * TLMessage {
    return &TLMessage{ Data2: &Message_Data{} }
}

func (m* TLMessage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_message))

    // flags
    var flags uint32 = 0
    if m.GetOut() == true { flags |= 1 << 1 }
    if m.GetMentioned() == true { flags |= 1 << 4 }
    if m.GetMediaUnread() == true { flags |= 1 << 5 }
    if m.GetSilent() == true { flags |= 1 << 13 }
    if m.GetPost() == true { flags |= 1 << 14 }
    if m.GetFromId() != 0 { flags |= 1 << 8 }
    if m.GetFwdFrom() != nil { flags |= 1 << 2 }
    if m.GetViaBotId() != 0 { flags |= 1 << 11 }
    if m.GetReplyToMsgId() != 0 { flags |= 1 << 3 }
    if m.GetMedia() != nil { flags |= 1 << 9 }
    if m.GetReplyMarkup() != nil { flags |= 1 << 6 }
    if m.GetEntities() != nil { flags |= 1 << 7 }
    if m.GetViews() != 0 { flags |= 1 << 10 }
    if m.GetEditDate() != 0 { flags |= 1 << 15 }
    if m.GetPostAuthor() != "" { flags |= 1 << 16 }
    if m.GetGroupedId() != 0 { flags |= 1 << 17 }
	x.UInt(flags)

    
    
    
    
    
    x.Int(m.GetId())
    if (flags & (1 << 8)) != 0 { x.Int(m.GetFromId()) }
    x.Bytes(m.GetToId().Encode())
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetFwdFrom().Encode()) }
    if (flags & (1 << 11)) != 0 { x.Int(m.GetViaBotId()) }
    if (flags & (1 << 3)) != 0 { x.Int(m.GetReplyToMsgId()) }
    x.Int(m.GetDate())
    x.String(m.GetMessage())
    if (flags & (1 << 9)) != 0 { x.Bytes(m.GetMedia().Encode()) }
    if (flags & (1 << 6)) != 0 { x.Bytes(m.GetReplyMarkup().Encode()) }
    if (flags & (1 << 7)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetEntities())))
for _, v := range m.GetEntities() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}
    if (flags & (1 << 10)) != 0 { x.Int(m.GetViews()) }
    if (flags & (1 << 15)) != 0 { x.Int(m.GetEditDate()) }
    if (flags & (1 << 16)) != 0 { x.String(m.GetPostAuthor()) }
    if (flags & (1 << 17)) != 0 { x.Long(m.GetGroupedId()) }

    return x.buf
}

func (m* TLMessage) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 1)) != 0 { m.SetOut(true) }
    if (flags & (1 << 4)) != 0 { m.SetMentioned(true) }
    if (flags & (1 << 5)) != 0 { m.SetMediaUnread(true) }
    if (flags & (1 << 13)) != 0 { m.SetSilent(true) }
    if (flags & (1 << 14)) != 0 { m.SetPost(true) }
    m.SetId(dbuf.Int())
    if (flags & (1 << 8)) != 0 { m.SetFromId(dbuf.Int()) }
    m9 := &Peer{}
    m9.Decode(dbuf)
    m.SetToId(m9)
    if (flags & (1 << 2)) != 0 {
 m10 := &MessageFwdHeader{}
    m10.Decode(dbuf)
    m.SetFwdFrom(m10) 
}
    if (flags & (1 << 11)) != 0 { m.SetViaBotId(dbuf.Int()) }
    if (flags & (1 << 3)) != 0 { m.SetReplyToMsgId(dbuf.Int()) }
    m.SetDate(dbuf.Int())
    m.SetMessage(dbuf.String())
    if (flags & (1 << 9)) != 0 {
 m15 := &MessageMedia{}
    m15.Decode(dbuf)
    m.SetMedia(m15) 
}
    if (flags & (1 << 6)) != 0 {
 m16 := &ReplyMarkup{}
    m16.Decode(dbuf)
    m.SetReplyMarkup(m16) 
}
    if (flags & (1 << 7)) != 0 {
 c17 := dbuf.Int()
if c17 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 17, c17)
	return dbuf.err
}
l17 := dbuf.Int()
v17 := make([]*MessageEntity, l17)
for i := int32(0); i < l17; i++ {
	v17[i] = &MessageEntity{}
	v17[i].Decode(dbuf)
}
m.SetEntities(v17)
 
}
    if (flags & (1 << 10)) != 0 { m.SetViews(dbuf.Int()) }
    if (flags & (1 << 15)) != 0 { m.SetEditDate(dbuf.Int()) }
    if (flags & (1 << 16)) != 0 { m.SetPostAuthor(dbuf.String()) }
    if (flags & (1 << 17)) != 0 { m.SetGroupedId(dbuf.Long()) }

    return dbuf.err
}
// messageService#9e19a1f6 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true post:flags.14?true id:int from_id:flags.8?int to_id:Peer reply_to_msg_id:flags.3?int date:int action:MessageAction = Message;
func (m *TLMessageService) To_Message() *Message {
    return &Message{
        Constructor: TLConstructor_CRC32_messageService,
        Data2: m.Data2,
    }
}


func (m *TLMessageService) SetOut(v bool) { m.Data2.Out = v }
func (m *TLMessageService) GetOut() bool { return m.Data2.Out }

func (m *TLMessageService) SetMentioned(v bool) { m.Data2.Mentioned = v }
func (m *TLMessageService) GetMentioned() bool { return m.Data2.Mentioned }

func (m *TLMessageService) SetMediaUnread(v bool) { m.Data2.MediaUnread = v }
func (m *TLMessageService) GetMediaUnread() bool { return m.Data2.MediaUnread }

func (m *TLMessageService) SetSilent(v bool) { m.Data2.Silent = v }
func (m *TLMessageService) GetSilent() bool { return m.Data2.Silent }

func (m *TLMessageService) SetPost(v bool) { m.Data2.Post = v }
func (m *TLMessageService) GetPost() bool { return m.Data2.Post }

func (m *TLMessageService) SetId(v int32) { m.Data2.Id = v }
func (m *TLMessageService) GetId() int32 { return m.Data2.Id }

func (m *TLMessageService) SetFromId(v int32) { m.Data2.FromId = v }
func (m *TLMessageService) GetFromId() int32 { return m.Data2.FromId }

func (m *TLMessageService) SetToId(v *Peer) { m.Data2.ToId = v }
func (m *TLMessageService) GetToId() *Peer { return m.Data2.ToId }

func (m *TLMessageService) SetReplyToMsgId(v int32) { m.Data2.ReplyToMsgId = v }
func (m *TLMessageService) GetReplyToMsgId() int32 { return m.Data2.ReplyToMsgId }

func (m *TLMessageService) SetDate(v int32) { m.Data2.Date = v }
func (m *TLMessageService) GetDate() int32 { return m.Data2.Date }

func (m *TLMessageService) SetAction(v *MessageAction) { m.Data2.Action = v }
func (m *TLMessageService) GetAction() *MessageAction { return m.Data2.Action }


func NewTLMessageService() * TLMessageService {
    return &TLMessageService{ Data2: &Message_Data{} }
}

func (m* TLMessageService) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageService))

    // flags
    var flags uint32 = 0
    if m.GetOut() == true { flags |= 1 << 1 }
    if m.GetMentioned() == true { flags |= 1 << 4 }
    if m.GetMediaUnread() == true { flags |= 1 << 5 }
    if m.GetSilent() == true { flags |= 1 << 13 }
    if m.GetPost() == true { flags |= 1 << 14 }
    if m.GetFromId() != 0 { flags |= 1 << 8 }
    if m.GetReplyToMsgId() != 0 { flags |= 1 << 3 }
	x.UInt(flags)

    
    
    
    
    
    x.Int(m.GetId())
    if (flags & (1 << 8)) != 0 { x.Int(m.GetFromId()) }
    x.Bytes(m.GetToId().Encode())
    if (flags & (1 << 3)) != 0 { x.Int(m.GetReplyToMsgId()) }
    x.Int(m.GetDate())
    x.Bytes(m.GetAction().Encode())

    return x.buf
}

func (m* TLMessageService) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 1)) != 0 { m.SetOut(true) }
    if (flags & (1 << 4)) != 0 { m.SetMentioned(true) }
    if (flags & (1 << 5)) != 0 { m.SetMediaUnread(true) }
    if (flags & (1 << 13)) != 0 { m.SetSilent(true) }
    if (flags & (1 << 14)) != 0 { m.SetPost(true) }
    m.SetId(dbuf.Int())
    if (flags & (1 << 8)) != 0 { m.SetFromId(dbuf.Int()) }
    m9 := &Peer{}
    m9.Decode(dbuf)
    m.SetToId(m9)
    if (flags & (1 << 3)) != 0 { m.SetReplyToMsgId(dbuf.Int()) }
    m.SetDate(dbuf.Int())
    m12 := &MessageAction{}
    m12.Decode(dbuf)
    m.SetAction(m12)

    return dbuf.err
}
// message#452c0e65 flags:# out:flags.1?true mentioned:flags.4?true media_unread:flags.5?true silent:flags.13?true post:flags.14?true from_scheduled:flags.18?true legacy:flags.19?true edit_hide:flags.21?true id:int from_id:flags.8?int to_id:Peer fwd_from:flags.2?MessageFwdHeader via_bot_id:flags.11?int reply_to_msg_id:flags.3?int date:int message:string media:flags.9?MessageMedia reply_markup:flags.6?ReplyMarkup entities:flags.7?Vector<MessageEntity> views:flags.10?int edit_date:flags.15?int post_author:flags.16?string grouped_id:flags.17?long restriction_reason:flags.22?Vector<RestrictionReason> = Message;
func (m *TLMessage114) To_Message() *Message {
    return &Message{
        Constructor: TLConstructor_CRC32_message114,
        Data2: m.Data2,
    }
}


func (m *TLMessage114) SetOut(v bool) { m.Data2.Out = v }
func (m *TLMessage114) GetOut() bool { return m.Data2.Out }

func (m *TLMessage114) SetMentioned(v bool) { m.Data2.Mentioned = v }
func (m *TLMessage114) GetMentioned() bool { return m.Data2.Mentioned }

func (m *TLMessage114) SetMediaUnread(v bool) { m.Data2.MediaUnread = v }
func (m *TLMessage114) GetMediaUnread() bool { return m.Data2.MediaUnread }

func (m *TLMessage114) SetSilent(v bool) { m.Data2.Silent = v }
func (m *TLMessage114) GetSilent() bool { return m.Data2.Silent }

func (m *TLMessage114) SetPost(v bool) { m.Data2.Post = v }
func (m *TLMessage114) GetPost() bool { return m.Data2.Post }

func (m *TLMessage114) SetFromScheduled(v bool) { m.Data2.FromScheduled = v }
func (m *TLMessage114) GetFromScheduled() bool { return m.Data2.FromScheduled }

func (m *TLMessage114) SetLegacy(v bool) { m.Data2.Legacy = v }
func (m *TLMessage114) GetLegacy() bool { return m.Data2.Legacy }

func (m *TLMessage114) SetEditHide(v bool) { m.Data2.EditHide = v }
func (m *TLMessage114) GetEditHide() bool { return m.Data2.EditHide }

func (m *TLMessage114) SetId(v int32) { m.Data2.Id = v }
func (m *TLMessage114) GetId() int32 { return m.Data2.Id }

func (m *TLMessage114) SetFromId(v int32) { m.Data2.FromId = v }
func (m *TLMessage114) GetFromId() int32 { return m.Data2.FromId }

func (m *TLMessage114) SetToId(v *Peer) { m.Data2.ToId = v }
func (m *TLMessage114) GetToId() *Peer { return m.Data2.ToId }

func (m *TLMessage114) SetFwdFrom(v *MessageFwdHeader) { m.Data2.FwdFrom = v }
func (m *TLMessage114) GetFwdFrom() *MessageFwdHeader { return m.Data2.FwdFrom }

func (m *TLMessage114) SetViaBotId(v int32) { m.Data2.ViaBotId = v }
func (m *TLMessage114) GetViaBotId() int32 { return m.Data2.ViaBotId }

func (m *TLMessage114) SetReplyToMsgId(v int32) { m.Data2.ReplyToMsgId = v }
func (m *TLMessage114) GetReplyToMsgId() int32 { return m.Data2.ReplyToMsgId }

func (m *TLMessage114) SetDate(v int32) { m.Data2.Date = v }
func (m *TLMessage114) GetDate() int32 { return m.Data2.Date }

func (m *TLMessage114) SetMessage(v string) { m.Data2.Message = v }
func (m *TLMessage114) GetMessage() string { return m.Data2.Message }

func (m *TLMessage114) SetMedia(v *MessageMedia) { m.Data2.Media = v }
func (m *TLMessage114) GetMedia() *MessageMedia { return m.Data2.Media }

func (m *TLMessage114) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLMessage114) GetReplyMarkup() *ReplyMarkup { return m.Data2.ReplyMarkup }

func (m *TLMessage114) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLMessage114) GetEntities() []*MessageEntity { return m.Data2.Entities }

func (m *TLMessage114) SetViews(v int32) { m.Data2.Views = v }
func (m *TLMessage114) GetViews() int32 { return m.Data2.Views }

func (m *TLMessage114) SetEditDate(v int32) { m.Data2.EditDate = v }
func (m *TLMessage114) GetEditDate() int32 { return m.Data2.EditDate }

func (m *TLMessage114) SetPostAuthor(v string) { m.Data2.PostAuthor = v }
func (m *TLMessage114) GetPostAuthor() string { return m.Data2.PostAuthor }

func (m *TLMessage114) SetGroupedId(v int64) { m.Data2.GroupedId = v }
func (m *TLMessage114) GetGroupedId() int64 { return m.Data2.GroupedId }

func (m *TLMessage114) SetRestrictionReason(v []*RestrictionReason) { m.Data2.RestrictionReason = v }
func (m *TLMessage114) GetRestrictionReason() []*RestrictionReason { return m.Data2.RestrictionReason }


func NewTLMessage114() * TLMessage114 {
    return &TLMessage114{ Data2: &Message_Data{} }
}

func (m* TLMessage114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_message114))

    // flags
    var flags uint32 = 0
    if m.GetOut() == true { flags |= 1 << 1 }
    if m.GetMentioned() == true { flags |= 1 << 4 }
    if m.GetMediaUnread() == true { flags |= 1 << 5 }
    if m.GetSilent() == true { flags |= 1 << 13 }
    if m.GetPost() == true { flags |= 1 << 14 }
    if m.GetFromScheduled() == true { flags |= 1 << 18 }
    if m.GetLegacy() == true { flags |= 1 << 19 }
    if m.GetEditHide() == true { flags |= 1 << 21 }
    if m.GetFromId() != 0 { flags |= 1 << 8 }
    if m.GetFwdFrom() != nil { flags |= 1 << 2 }
    if m.GetViaBotId() != 0 { flags |= 1 << 11 }
    if m.GetReplyToMsgId() != 0 { flags |= 1 << 3 }
    if m.GetMedia() != nil { flags |= 1 << 9 }
    if m.GetReplyMarkup() != nil { flags |= 1 << 6 }
    if m.GetEntities() != nil { flags |= 1 << 7 }
    if m.GetViews() != 0 { flags |= 1 << 10 }
    if m.GetEditDate() != 0 { flags |= 1 << 15 }
    if m.GetPostAuthor() != "" { flags |= 1 << 16 }
    if m.GetGroupedId() != 0 { flags |= 1 << 17 }
    if m.GetRestrictionReason() != nil { flags |= 1 << 22 }
	x.UInt(flags)

    
    
    
    
    
    
    
    
    x.Int(m.GetId())
    if (flags & (1 << 8)) != 0 { x.Int(m.GetFromId()) }
    x.Bytes(m.GetToId().Encode())
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetFwdFrom().Encode()) }
    if (flags & (1 << 11)) != 0 { x.Int(m.GetViaBotId()) }
    if (flags & (1 << 3)) != 0 { x.Int(m.GetReplyToMsgId()) }
    x.Int(m.GetDate())
    x.String(m.GetMessage())
    if (flags & (1 << 9)) != 0 { x.Bytes(m.GetMedia().Encode()) }
    if (flags & (1 << 6)) != 0 { x.Bytes(m.GetReplyMarkup().Encode()) }
    if (flags & (1 << 7)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetEntities())))
for _, v := range m.GetEntities() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}
    if (flags & (1 << 10)) != 0 { x.Int(m.GetViews()) }
    if (flags & (1 << 15)) != 0 { x.Int(m.GetEditDate()) }
    if (flags & (1 << 16)) != 0 { x.String(m.GetPostAuthor()) }
    if (flags & (1 << 17)) != 0 { x.Long(m.GetGroupedId()) }
    if (flags & (1 << 22)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetRestrictionReason())))
for _, v := range m.GetRestrictionReason() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}

    return x.buf
}

func (m* TLMessage114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 1)) != 0 { m.SetOut(true) }
    if (flags & (1 << 4)) != 0 { m.SetMentioned(true) }
    if (flags & (1 << 5)) != 0 { m.SetMediaUnread(true) }
    if (flags & (1 << 13)) != 0 { m.SetSilent(true) }
    if (flags & (1 << 14)) != 0 { m.SetPost(true) }
    if (flags & (1 << 18)) != 0 { m.SetFromScheduled(true) }
    if (flags & (1 << 19)) != 0 { m.SetLegacy(true) }
    if (flags & (1 << 21)) != 0 { m.SetEditHide(true) }
    m.SetId(dbuf.Int())
    if (flags & (1 << 8)) != 0 { m.SetFromId(dbuf.Int()) }
    m12 := &Peer{}
    m12.Decode(dbuf)
    m.SetToId(m12)
    if (flags & (1 << 2)) != 0 {
 m13 := &MessageFwdHeader{}
    m13.Decode(dbuf)
    m.SetFwdFrom(m13) 
}
    if (flags & (1 << 11)) != 0 { m.SetViaBotId(dbuf.Int()) }
    if (flags & (1 << 3)) != 0 { m.SetReplyToMsgId(dbuf.Int()) }
    m.SetDate(dbuf.Int())
    m.SetMessage(dbuf.String())
    if (flags & (1 << 9)) != 0 {
 m18 := &MessageMedia{}
    m18.Decode(dbuf)
    m.SetMedia(m18) 
}
    if (flags & (1 << 6)) != 0 {
 m19 := &ReplyMarkup{}
    m19.Decode(dbuf)
    m.SetReplyMarkup(m19) 
}
    if (flags & (1 << 7)) != 0 {
 c20 := dbuf.Int()
if c20 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 20, c20)
	return dbuf.err
}
l20 := dbuf.Int()
v20 := make([]*MessageEntity, l20)
for i := int32(0); i < l20; i++ {
	v20[i] = &MessageEntity{}
	v20[i].Decode(dbuf)
}
m.SetEntities(v20)
 
}
    if (flags & (1 << 10)) != 0 { m.SetViews(dbuf.Int()) }
    if (flags & (1 << 15)) != 0 { m.SetEditDate(dbuf.Int()) }
    if (flags & (1 << 16)) != 0 { m.SetPostAuthor(dbuf.String()) }
    if (flags & (1 << 17)) != 0 { m.SetGroupedId(dbuf.Long()) }
    if (flags & (1 << 22)) != 0 {
 c25 := dbuf.Int()
if c25 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 25, c25)
	return dbuf.err
}
l25 := dbuf.Int()
v25 := make([]*RestrictionReason, l25)
for i := int32(0); i < l25; i++ {
	v25[i] = &RestrictionReason{}
	v25[i].Decode(dbuf)
}
m.SetRestrictionReason(v25)
 
}

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Auth_LoginToken <--
//  + TL_AuthLoginToken
//  + TL_AuthLoginTokenMigrateTo
//  + TL_AuthLoginTokenSuccess
//

func (m *Auth_LoginToken) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_auth_loginToken:
        t := m.To_AuthLoginToken()
        return t.Encode()
    case TLConstructor_CRC32_auth_loginTokenMigrateTo:
        t := m.To_AuthLoginTokenMigrateTo()
        return t.Encode()
    case TLConstructor_CRC32_auth_loginTokenSuccess:
        t := m.To_AuthLoginTokenSuccess()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Auth_LoginToken) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_auth_loginToken:
        m2 := &TLAuthLoginToken{&Auth_LoginToken_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_auth_loginTokenMigrateTo:
        m2 := &TLAuthLoginTokenMigrateTo{&Auth_LoginToken_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_auth_loginTokenSuccess:
        m2 := &TLAuthLoginTokenSuccess{&Auth_LoginToken_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// auth.loginToken#629f1980 expires:int token:bytes = auth.LoginToken;
func (m *Auth_LoginToken) To_AuthLoginToken() *TLAuthLoginToken {
    return &TLAuthLoginToken{
        Data2: m.Data2,
    }
}

// auth.loginTokenMigrateTo#68e9916 dc_id:int token:bytes = auth.LoginToken;
func (m *Auth_LoginToken) To_AuthLoginTokenMigrateTo() *TLAuthLoginTokenMigrateTo {
    return &TLAuthLoginTokenMigrateTo{
        Data2: m.Data2,
    }
}

// auth.loginTokenSuccess#390d5c5e authorization:auth.Authorization = auth.LoginToken;
func (m *Auth_LoginToken) To_AuthLoginTokenSuccess() *TLAuthLoginTokenSuccess {
    return &TLAuthLoginTokenSuccess{
        Data2: m.Data2,
    }
}



// auth.loginToken#629f1980 expires:int token:bytes = auth.LoginToken;
func (m *TLAuthLoginToken) To_Auth_LoginToken() *Auth_LoginToken {
    return &Auth_LoginToken{
        Constructor: TLConstructor_CRC32_auth_loginToken,
        Data2: m.Data2,
    }
}


func (m *TLAuthLoginToken) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLAuthLoginToken) GetExpires() int32 { return m.Data2.Expires }

func (m *TLAuthLoginToken) SetToken(v []byte) { m.Data2.Token = v }
func (m *TLAuthLoginToken) GetToken() []byte { return m.Data2.Token }


func NewTLAuthLoginToken() * TLAuthLoginToken {
    return &TLAuthLoginToken{ Data2: &Auth_LoginToken_Data{} }
}

func (m* TLAuthLoginToken) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_auth_loginToken))

    x.Int(m.GetExpires())
    x.StringBytes(m.GetToken())

    return x.buf
}

func (m* TLAuthLoginToken) Decode(dbuf *DecodeBuf) error {
    m.SetExpires(dbuf.Int())
    m.SetToken(dbuf.StringBytes())

    return dbuf.err
}
// auth.loginTokenMigrateTo#68e9916 dc_id:int token:bytes = auth.LoginToken;
func (m *TLAuthLoginTokenMigrateTo) To_Auth_LoginToken() *Auth_LoginToken {
    return &Auth_LoginToken{
        Constructor: TLConstructor_CRC32_auth_loginTokenMigrateTo,
        Data2: m.Data2,
    }
}


func (m *TLAuthLoginTokenMigrateTo) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLAuthLoginTokenMigrateTo) GetDcId() int32 { return m.Data2.DcId }

func (m *TLAuthLoginTokenMigrateTo) SetToken(v []byte) { m.Data2.Token = v }
func (m *TLAuthLoginTokenMigrateTo) GetToken() []byte { return m.Data2.Token }


func NewTLAuthLoginTokenMigrateTo() * TLAuthLoginTokenMigrateTo {
    return &TLAuthLoginTokenMigrateTo{ Data2: &Auth_LoginToken_Data{} }
}

func (m* TLAuthLoginTokenMigrateTo) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_auth_loginTokenMigrateTo))

    x.Int(m.GetDcId())
    x.StringBytes(m.GetToken())

    return x.buf
}

func (m* TLAuthLoginTokenMigrateTo) Decode(dbuf *DecodeBuf) error {
    m.SetDcId(dbuf.Int())
    m.SetToken(dbuf.StringBytes())

    return dbuf.err
}
// auth.loginTokenSuccess#390d5c5e authorization:auth.Authorization = auth.LoginToken;
func (m *TLAuthLoginTokenSuccess) To_Auth_LoginToken() *Auth_LoginToken {
    return &Auth_LoginToken{
        Constructor: TLConstructor_CRC32_auth_loginTokenSuccess,
        Data2: m.Data2,
    }
}


func (m *TLAuthLoginTokenSuccess) SetAuthorization(v *Auth_Authorization) { m.Data2.Authorization = v }
func (m *TLAuthLoginTokenSuccess) GetAuthorization() *Auth_Authorization { return m.Data2.Authorization }


func NewTLAuthLoginTokenSuccess() * TLAuthLoginTokenSuccess {
    return &TLAuthLoginTokenSuccess{ Data2: &Auth_LoginToken_Data{} }
}

func (m* TLAuthLoginTokenSuccess) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_auth_loginTokenSuccess))

    x.Bytes(m.GetAuthorization().Encode())

    return x.buf
}

func (m* TLAuthLoginTokenSuccess) Decode(dbuf *DecodeBuf) error {
    m1 := &Auth_Authorization{}
    m1.Decode(dbuf)
    m.SetAuthorization(m1)

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputPeerNotifySettings <--
//  + TL_InputPeerNotifySettings
//  + TL_InputPeerNotifySettings114
//

func (m *InputPeerNotifySettings) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputPeerNotifySettings:
        t := m.To_InputPeerNotifySettings()
        return t.Encode()
    case TLConstructor_CRC32_inputPeerNotifySettings114:
        t := m.To_InputPeerNotifySettings114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputPeerNotifySettings) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputPeerNotifySettings:
        m2 := &TLInputPeerNotifySettings{&InputPeerNotifySettings_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputPeerNotifySettings114:
        m2 := &TLInputPeerNotifySettings114{&InputPeerNotifySettings_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputPeerNotifySettings#38935eb2 flags:# show_previews:flags.0?true silent:flags.1?true mute_until:int sound:string = InputPeerNotifySettings;
func (m *InputPeerNotifySettings) To_InputPeerNotifySettings() *TLInputPeerNotifySettings {
    return &TLInputPeerNotifySettings{
        Data2: m.Data2,
    }
}

// inputPeerNotifySettings#9c3d198e flags:# show_previews:flags.0?Bool silent:flags.1?Bool mute_until:flags.2?int sound:flags.3?string = InputPeerNotifySettings;
func (m *InputPeerNotifySettings) To_InputPeerNotifySettings114() *TLInputPeerNotifySettings114 {
    return &TLInputPeerNotifySettings114{
        Data2: m.Data2,
    }
}



// inputPeerNotifySettings#38935eb2 flags:# show_previews:flags.0?true silent:flags.1?true mute_until:int sound:string = InputPeerNotifySettings;
func (m *TLInputPeerNotifySettings) To_InputPeerNotifySettings() *InputPeerNotifySettings {
    return &InputPeerNotifySettings{
        Constructor: TLConstructor_CRC32_inputPeerNotifySettings,
        Data2: m.Data2,
    }
}


func (m *TLInputPeerNotifySettings) SetShowPreviews(v bool) { m.Data2.ShowPreviews_1 = v }
func (m *TLInputPeerNotifySettings) GetShowPreviews() bool { return m.Data2.ShowPreviews_1 }

func (m *TLInputPeerNotifySettings) SetSilent(v bool) { m.Data2.Silent_2 = v }
func (m *TLInputPeerNotifySettings) GetSilent() bool { return m.Data2.Silent_2 }

func (m *TLInputPeerNotifySettings) SetMuteUntil(v int32) { m.Data2.MuteUntil = v }
func (m *TLInputPeerNotifySettings) GetMuteUntil() int32 { return m.Data2.MuteUntil }

func (m *TLInputPeerNotifySettings) SetSound(v string) { m.Data2.Sound = v }
func (m *TLInputPeerNotifySettings) GetSound() string { return m.Data2.Sound }


func NewTLInputPeerNotifySettings() * TLInputPeerNotifySettings {
    return &TLInputPeerNotifySettings{ Data2: &InputPeerNotifySettings_Data{} }
}

func (m* TLInputPeerNotifySettings) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPeerNotifySettings))

    // flags
    var flags uint32 = 0
    if m.GetShowPreviews() == true { flags |= 1 << 0 }
    if m.GetSilent() == true { flags |= 1 << 1 }
	x.UInt(flags)

    
    
    x.Int(m.GetMuteUntil())
    x.String(m.GetSound())

    return x.buf
}

func (m* TLInputPeerNotifySettings) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetShowPreviews(true) }
    if (flags & (1 << 1)) != 0 { m.SetSilent(true) }
    m.SetMuteUntil(dbuf.Int())
    m.SetSound(dbuf.String())

    return dbuf.err
}
// inputPeerNotifySettings#9c3d198e flags:# show_previews:flags.0?Bool silent:flags.1?Bool mute_until:flags.2?int sound:flags.3?string = InputPeerNotifySettings;
func (m *TLInputPeerNotifySettings114) To_InputPeerNotifySettings() *InputPeerNotifySettings {
    return &InputPeerNotifySettings{
        Constructor: TLConstructor_CRC32_inputPeerNotifySettings114,
        Data2: m.Data2,
    }
}


func (m *TLInputPeerNotifySettings114) SetShowPreviews(v *Bool) { m.Data2.ShowPreviews_5 = v }
func (m *TLInputPeerNotifySettings114) GetShowPreviews() *Bool { return m.Data2.ShowPreviews_5 }

func (m *TLInputPeerNotifySettings114) SetSilent(v *Bool) { m.Data2.Silent_6 = v }
func (m *TLInputPeerNotifySettings114) GetSilent() *Bool { return m.Data2.Silent_6 }

func (m *TLInputPeerNotifySettings114) SetMuteUntil(v int32) { m.Data2.MuteUntil = v }
func (m *TLInputPeerNotifySettings114) GetMuteUntil() int32 { return m.Data2.MuteUntil }

func (m *TLInputPeerNotifySettings114) SetSound(v string) { m.Data2.Sound = v }
func (m *TLInputPeerNotifySettings114) GetSound() string { return m.Data2.Sound }


func NewTLInputPeerNotifySettings114() * TLInputPeerNotifySettings114 {
    return &TLInputPeerNotifySettings114{ Data2: &InputPeerNotifySettings_Data{} }
}

func (m* TLInputPeerNotifySettings114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPeerNotifySettings114))

    // flags
    var flags uint32 = 0
    if m.GetShowPreviews() != nil { flags |= 1 << 0 }
    if m.GetSilent() != nil { flags |= 1 << 1 }
    if m.GetMuteUntil() != 0 { flags |= 1 << 2 }
    if m.GetSound() != "" { flags |= 1 << 3 }
	x.UInt(flags)

    if (flags & (1 << 0)) != 0 { x.Bytes(m.GetShowPreviews().Encode()) }
    if (flags & (1 << 1)) != 0 { x.Bytes(m.GetSilent().Encode()) }
    if (flags & (1 << 2)) != 0 { x.Int(m.GetMuteUntil()) }
    if (flags & (1 << 3)) != 0 { x.String(m.GetSound()) }

    return x.buf
}

func (m* TLInputPeerNotifySettings114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 {
 m2 := &Bool{}
    m2.Decode(dbuf)
    m.SetShowPreviews(m2) 
}
    if (flags & (1 << 1)) != 0 {
 m3 := &Bool{}
    m3.Decode(dbuf)
    m.SetSilent(m3) 
}
    if (flags & (1 << 2)) != 0 { m.SetMuteUntil(dbuf.Int()) }
    if (flags & (1 << 3)) != 0 { m.SetSound(dbuf.String()) }

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Account_PasswordInputSettings <--
//  + TL_AccountPasswordInputSettings
//  + TL_AccountPasswordInputSettings114
//

func (m *Account_PasswordInputSettings) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_account_passwordInputSettings:
        t := m.To_AccountPasswordInputSettings()
        return t.Encode()
    case TLConstructor_CRC32_account_passwordInputSettings114:
        t := m.To_AccountPasswordInputSettings114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Account_PasswordInputSettings) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_account_passwordInputSettings:
        m2 := &TLAccountPasswordInputSettings{&Account_PasswordInputSettings_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_account_passwordInputSettings114:
        m2 := &TLAccountPasswordInputSettings114{&Account_PasswordInputSettings_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// account.passwordInputSettings#86916deb flags:# new_salt:flags.0?bytes new_password_hash:flags.0?bytes hint:flags.0?string email:flags.1?string = account.PasswordInputSettings;
func (m *Account_PasswordInputSettings) To_AccountPasswordInputSettings() *TLAccountPasswordInputSettings {
    return &TLAccountPasswordInputSettings{
        Data2: m.Data2,
    }
}

// account.passwordInputSettings#c23727c9 flags:# new_algo:flags.0?PasswordKdfAlgo new_password_hash:flags.0?bytes hint:flags.0?string email:flags.1?string new_secure_settings:flags.2?SecureSecretSettings = account.PasswordInputSettings;
func (m *Account_PasswordInputSettings) To_AccountPasswordInputSettings114() *TLAccountPasswordInputSettings114 {
    return &TLAccountPasswordInputSettings114{
        Data2: m.Data2,
    }
}



// account.passwordInputSettings#86916deb flags:# new_salt:flags.0?bytes new_password_hash:flags.0?bytes hint:flags.0?string email:flags.1?string = account.PasswordInputSettings;
func (m *TLAccountPasswordInputSettings) To_Account_PasswordInputSettings() *Account_PasswordInputSettings {
    return &Account_PasswordInputSettings{
        Constructor: TLConstructor_CRC32_account_passwordInputSettings,
        Data2: m.Data2,
    }
}


func (m *TLAccountPasswordInputSettings) SetNewSalt(v []byte) { m.Data2.NewSalt = v }
func (m *TLAccountPasswordInputSettings) GetNewSalt() []byte { return m.Data2.NewSalt }

func (m *TLAccountPasswordInputSettings) SetNewPasswordHash(v []byte) { m.Data2.NewPasswordHash = v }
func (m *TLAccountPasswordInputSettings) GetNewPasswordHash() []byte { return m.Data2.NewPasswordHash }

func (m *TLAccountPasswordInputSettings) SetHint(v string) { m.Data2.Hint = v }
func (m *TLAccountPasswordInputSettings) GetHint() string { return m.Data2.Hint }

func (m *TLAccountPasswordInputSettings) SetEmail(v string) { m.Data2.Email = v }
func (m *TLAccountPasswordInputSettings) GetEmail() string { return m.Data2.Email }


func NewTLAccountPasswordInputSettings() * TLAccountPasswordInputSettings {
    return &TLAccountPasswordInputSettings{ Data2: &Account_PasswordInputSettings_Data{} }
}

func (m* TLAccountPasswordInputSettings) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_account_passwordInputSettings))

    // flags
    var flags uint32 = 0
    if m.GetNewSalt() != nil { flags |= 1 << 0 }
    if m.GetNewPasswordHash() != nil { flags |= 1 << 0 }
    if m.GetHint() != "" { flags |= 1 << 0 }
    if m.GetEmail() != "" { flags |= 1 << 1 }
	x.UInt(flags)

    if (flags & (1 << 0)) != 0 { x.StringBytes(m.GetNewSalt()) }
    if (flags & (1 << 0)) != 0 { x.StringBytes(m.GetNewPasswordHash()) }
    if (flags & (1 << 0)) != 0 { x.String(m.GetHint()) }
    if (flags & (1 << 1)) != 0 { x.String(m.GetEmail()) }

    return x.buf
}

func (m* TLAccountPasswordInputSettings) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 {
 m.SetNewSalt(dbuf.StringBytes()) 
}
    if (flags & (1 << 0)) != 0 {
 m.SetNewPasswordHash(dbuf.StringBytes()) 
}
    if (flags & (1 << 0)) != 0 { m.SetHint(dbuf.String()) }
    if (flags & (1 << 1)) != 0 { m.SetEmail(dbuf.String()) }

    return dbuf.err
}
// account.passwordInputSettings#c23727c9 flags:# new_algo:flags.0?PasswordKdfAlgo new_password_hash:flags.0?bytes hint:flags.0?string email:flags.1?string new_secure_settings:flags.2?SecureSecretSettings = account.PasswordInputSettings;
func (m *TLAccountPasswordInputSettings114) To_Account_PasswordInputSettings() *Account_PasswordInputSettings {
    return &Account_PasswordInputSettings{
        Constructor: TLConstructor_CRC32_account_passwordInputSettings114,
        Data2: m.Data2,
    }
}


func (m *TLAccountPasswordInputSettings114) SetNewAlgo(v *PasswordKdfAlgo) { m.Data2.NewAlgo = v }
func (m *TLAccountPasswordInputSettings114) GetNewAlgo() *PasswordKdfAlgo { return m.Data2.NewAlgo }

func (m *TLAccountPasswordInputSettings114) SetNewPasswordHash(v []byte) { m.Data2.NewPasswordHash = v }
func (m *TLAccountPasswordInputSettings114) GetNewPasswordHash() []byte { return m.Data2.NewPasswordHash }

func (m *TLAccountPasswordInputSettings114) SetHint(v string) { m.Data2.Hint = v }
func (m *TLAccountPasswordInputSettings114) GetHint() string { return m.Data2.Hint }

func (m *TLAccountPasswordInputSettings114) SetEmail(v string) { m.Data2.Email = v }
func (m *TLAccountPasswordInputSettings114) GetEmail() string { return m.Data2.Email }

func (m *TLAccountPasswordInputSettings114) SetNewSecureSettings(v *SecureSecretSettings) { m.Data2.NewSecureSettings = v }
func (m *TLAccountPasswordInputSettings114) GetNewSecureSettings() *SecureSecretSettings { return m.Data2.NewSecureSettings }


func NewTLAccountPasswordInputSettings114() * TLAccountPasswordInputSettings114 {
    return &TLAccountPasswordInputSettings114{ Data2: &Account_PasswordInputSettings_Data{} }
}

func (m* TLAccountPasswordInputSettings114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_account_passwordInputSettings114))

    // flags
    var flags uint32 = 0
    if m.GetNewAlgo() != nil { flags |= 1 << 0 }
    if m.GetNewPasswordHash() != nil { flags |= 1 << 0 }
    if m.GetHint() != "" { flags |= 1 << 0 }
    if m.GetEmail() != "" { flags |= 1 << 1 }
    if m.GetNewSecureSettings() != nil { flags |= 1 << 2 }
	x.UInt(flags)

    if (flags & (1 << 0)) != 0 { x.Bytes(m.GetNewAlgo().Encode()) }
    if (flags & (1 << 0)) != 0 { x.StringBytes(m.GetNewPasswordHash()) }
    if (flags & (1 << 0)) != 0 { x.String(m.GetHint()) }
    if (flags & (1 << 1)) != 0 { x.String(m.GetEmail()) }
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetNewSecureSettings().Encode()) }

    return x.buf
}

func (m* TLAccountPasswordInputSettings114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 {
 m2 := &PasswordKdfAlgo{}
    m2.Decode(dbuf)
    m.SetNewAlgo(m2) 
}
    if (flags & (1 << 0)) != 0 {
 m.SetNewPasswordHash(dbuf.StringBytes()) 
}
    if (flags & (1 << 0)) != 0 { m.SetHint(dbuf.String()) }
    if (flags & (1 << 1)) != 0 { m.SetEmail(dbuf.String()) }
    if (flags & (1 << 2)) != 0 {
 m6 := &SecureSecretSettings{}
    m6.Decode(dbuf)
    m.SetNewSecureSettings(m6) 
}

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// TopPeer <--
//  + TL_TopPeer
//

func (m *TopPeer) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_topPeer:
        t := m.To_TopPeer()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *TopPeer) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_topPeer:
        m2 := &TLTopPeer{&TopPeer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// topPeer#edcdc05b peer:Peer rating:double = TopPeer;
func (m *TopPeer) To_TopPeer() *TLTopPeer {
    return &TLTopPeer{
        Data2: m.Data2,
    }
}



// topPeer#edcdc05b peer:Peer rating:double = TopPeer;
func (m *TLTopPeer) To_TopPeer() *TopPeer {
    return &TopPeer{
        Constructor: TLConstructor_CRC32_topPeer,
        Data2: m.Data2,
    }
}


func (m *TLTopPeer) SetPeer(v *Peer) { m.Data2.Peer = v }
func (m *TLTopPeer) GetPeer() *Peer { return m.Data2.Peer }

func (m *TLTopPeer) SetRating(v float64) { m.Data2.Rating = v }
func (m *TLTopPeer) GetRating() float64 { return m.Data2.Rating }


func NewTLTopPeer() * TLTopPeer {
    return &TLTopPeer{ Data2: &TopPeer_Data{} }
}

func (m* TLTopPeer) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_topPeer))

    x.Bytes(m.GetPeer().Encode())
    x.Double(m.GetRating())

    return x.buf
}

func (m* TLTopPeer) Decode(dbuf *DecodeBuf) error {
    m1 := &Peer{}
    m1.Decode(dbuf)
    m.SetPeer(m1)
    m.SetRating(dbuf.Double())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// PointsRankResult <--
//  + TL_PointsRankResult
//

func (m *PointsRankResult) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_pointsRankResult:
        t := m.To_PointsRankResult()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *PointsRankResult) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_pointsRankResult:
        m2 := &TLPointsRankResult{&PointsRankResult_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// pointsRankResult#5c975090 items:Vector<PointsRankItem> my_rank:int my_point:int = PointsRankResult;
func (m *PointsRankResult) To_PointsRankResult() *TLPointsRankResult {
    return &TLPointsRankResult{
        Data2: m.Data2,
    }
}



// pointsRankResult#5c975090 items:Vector<PointsRankItem> my_rank:int my_point:int = PointsRankResult;
func (m *TLPointsRankResult) To_PointsRankResult() *PointsRankResult {
    return &PointsRankResult{
        Constructor: TLConstructor_CRC32_pointsRankResult,
        Data2: m.Data2,
    }
}


func (m *TLPointsRankResult) SetItems(v []*PointsRankItem) { m.Data2.Items = v }
func (m *TLPointsRankResult) GetItems() []*PointsRankItem { return m.Data2.Items }

func (m *TLPointsRankResult) SetMyRank(v int32) { m.Data2.MyRank = v }
func (m *TLPointsRankResult) GetMyRank() int32 { return m.Data2.MyRank }

func (m *TLPointsRankResult) SetMyPoint(v int32) { m.Data2.MyPoint = v }
func (m *TLPointsRankResult) GetMyPoint() int32 { return m.Data2.MyPoint }


func NewTLPointsRankResult() * TLPointsRankResult {
    return &TLPointsRankResult{ Data2: &PointsRankResult_Data{} }
}

func (m* TLPointsRankResult) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pointsRankResult))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetItems())))
for _, v := range m.GetItems() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(m.GetMyRank())
    x.Int(m.GetMyPoint())

    return x.buf
}

func (m* TLPointsRankResult) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*PointsRankItem, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &PointsRankItem{}
	v1[i].Decode(dbuf)
}
m.SetItems(v1)

    m.SetMyRank(dbuf.Int())
    m.SetMyPoint(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// DialogFilterSuggested <--
//  + TL_DialogFilterSuggested
//

func (m *DialogFilterSuggested) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_dialogFilterSuggested:
        t := m.To_DialogFilterSuggested()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *DialogFilterSuggested) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_dialogFilterSuggested:
        m2 := &TLDialogFilterSuggested{&DialogFilterSuggested_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// dialogFilterSuggested#77744d4a filter:DialogFilter description:string = DialogFilterSuggested;
func (m *DialogFilterSuggested) To_DialogFilterSuggested() *TLDialogFilterSuggested {
    return &TLDialogFilterSuggested{
        Data2: m.Data2,
    }
}



// dialogFilterSuggested#77744d4a filter:DialogFilter description:string = DialogFilterSuggested;
func (m *TLDialogFilterSuggested) To_DialogFilterSuggested() *DialogFilterSuggested {
    return &DialogFilterSuggested{
        Constructor: TLConstructor_CRC32_dialogFilterSuggested,
        Data2: m.Data2,
    }
}


func (m *TLDialogFilterSuggested) SetFilter(v *DialogFilter) { m.Data2.Filter = v }
func (m *TLDialogFilterSuggested) GetFilter() *DialogFilter { return m.Data2.Filter }

func (m *TLDialogFilterSuggested) SetDescription(v string) { m.Data2.Description = v }
func (m *TLDialogFilterSuggested) GetDescription() string { return m.Data2.Description }


func NewTLDialogFilterSuggested() * TLDialogFilterSuggested {
    return &TLDialogFilterSuggested{ Data2: &DialogFilterSuggested_Data{} }
}

func (m* TLDialogFilterSuggested) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_dialogFilterSuggested))

    x.Bytes(m.GetFilter().Encode())
    x.String(m.GetDescription())

    return x.buf
}

func (m* TLDialogFilterSuggested) Decode(dbuf *DecodeBuf) error {
    m1 := &DialogFilter{}
    m1.Decode(dbuf)
    m.SetFilter(m1)
    m.SetDescription(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Peer <--
//  + TL_PeerUser
//  + TL_PeerChat
//  + TL_PeerChannel
//

func (m *Peer) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_peerUser:
        t := m.To_PeerUser()
        return t.Encode()
    case TLConstructor_CRC32_peerChat:
        t := m.To_PeerChat()
        return t.Encode()
    case TLConstructor_CRC32_peerChannel:
        t := m.To_PeerChannel()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Peer) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_peerUser:
        m2 := &TLPeerUser{&Peer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_peerChat:
        m2 := &TLPeerChat{&Peer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_peerChannel:
        m2 := &TLPeerChannel{&Peer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// peerUser#9db1bc6d user_id:int = Peer;
func (m *Peer) To_PeerUser() *TLPeerUser {
    return &TLPeerUser{
        Data2: m.Data2,
    }
}

// peerChat#bad0e5bb chat_id:int = Peer;
func (m *Peer) To_PeerChat() *TLPeerChat {
    return &TLPeerChat{
        Data2: m.Data2,
    }
}

// peerChannel#bddde532 channel_id:int = Peer;
func (m *Peer) To_PeerChannel() *TLPeerChannel {
    return &TLPeerChannel{
        Data2: m.Data2,
    }
}



// peerUser#9db1bc6d user_id:int = Peer;
func (m *TLPeerUser) To_Peer() *Peer {
    return &Peer{
        Constructor: TLConstructor_CRC32_peerUser,
        Data2: m.Data2,
    }
}


func (m *TLPeerUser) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLPeerUser) GetUserId() int32 { return m.Data2.UserId }


func NewTLPeerUser() * TLPeerUser {
    return &TLPeerUser{ Data2: &Peer_Data{} }
}

func (m* TLPeerUser) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_peerUser))

    x.Int(m.GetUserId())

    return x.buf
}

func (m* TLPeerUser) Decode(dbuf *DecodeBuf) error {
    m.SetUserId(dbuf.Int())

    return dbuf.err
}
// peerChat#bad0e5bb chat_id:int = Peer;
func (m *TLPeerChat) To_Peer() *Peer {
    return &Peer{
        Constructor: TLConstructor_CRC32_peerChat,
        Data2: m.Data2,
    }
}


func (m *TLPeerChat) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLPeerChat) GetChatId() int32 { return m.Data2.ChatId }


func NewTLPeerChat() * TLPeerChat {
    return &TLPeerChat{ Data2: &Peer_Data{} }
}

func (m* TLPeerChat) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_peerChat))

    x.Int(m.GetChatId())

    return x.buf
}

func (m* TLPeerChat) Decode(dbuf *DecodeBuf) error {
    m.SetChatId(dbuf.Int())

    return dbuf.err
}
// peerChannel#bddde532 channel_id:int = Peer;
func (m *TLPeerChannel) To_Peer() *Peer {
    return &Peer{
        Constructor: TLConstructor_CRC32_peerChannel,
        Data2: m.Data2,
    }
}


func (m *TLPeerChannel) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLPeerChannel) GetChannelId() int32 { return m.Data2.ChannelId }


func NewTLPeerChannel() * TLPeerChannel {
    return &TLPeerChannel{ Data2: &Peer_Data{} }
}

func (m* TLPeerChannel) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_peerChannel))

    x.Int(m.GetChannelId())

    return x.buf
}

func (m* TLPeerChannel) Decode(dbuf *DecodeBuf) error {
    m.SetChannelId(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Contacts_Link <--
//  + TL_ContactsLink
//

func (m *Contacts_Link) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_contacts_link:
        t := m.To_ContactsLink()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Contacts_Link) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_contacts_link:
        m2 := &TLContactsLink{&Contacts_Link_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// contacts.link#3ace484c my_link:ContactLink foreign_link:ContactLink user:User = contacts.Link;
func (m *Contacts_Link) To_ContactsLink() *TLContactsLink {
    return &TLContactsLink{
        Data2: m.Data2,
    }
}



// contacts.link#3ace484c my_link:ContactLink foreign_link:ContactLink user:User = contacts.Link;
func (m *TLContactsLink) To_Contacts_Link() *Contacts_Link {
    return &Contacts_Link{
        Constructor: TLConstructor_CRC32_contacts_link,
        Data2: m.Data2,
    }
}


func (m *TLContactsLink) SetMyLink(v *ContactLink) { m.Data2.MyLink = v }
func (m *TLContactsLink) GetMyLink() *ContactLink { return m.Data2.MyLink }

func (m *TLContactsLink) SetForeignLink(v *ContactLink) { m.Data2.ForeignLink = v }
func (m *TLContactsLink) GetForeignLink() *ContactLink { return m.Data2.ForeignLink }

func (m *TLContactsLink) SetUser(v *User) { m.Data2.User = v }
func (m *TLContactsLink) GetUser() *User { return m.Data2.User }


func NewTLContactsLink() * TLContactsLink {
    return &TLContactsLink{ Data2: &Contacts_Link_Data{} }
}

func (m* TLContactsLink) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_contacts_link))

    x.Bytes(m.GetMyLink().Encode())
    x.Bytes(m.GetForeignLink().Encode())
    x.Bytes(m.GetUser().Encode())

    return x.buf
}

func (m* TLContactsLink) Decode(dbuf *DecodeBuf) error {
    m1 := &ContactLink{}
    m1.Decode(dbuf)
    m.SetMyLink(m1)
    m2 := &ContactLink{}
    m2.Decode(dbuf)
    m.SetForeignLink(m2)
    m3 := &User{}
    m3.Decode(dbuf)
    m.SetUser(m3)

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// MaskCoords <--
//  + TL_MaskCoords
//

func (m *MaskCoords) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_maskCoords:
        t := m.To_MaskCoords()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *MaskCoords) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_maskCoords:
        m2 := &TLMaskCoords{&MaskCoords_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// maskCoords#aed6dbb2 n:int x:double y:double zoom:double = MaskCoords;
func (m *MaskCoords) To_MaskCoords() *TLMaskCoords {
    return &TLMaskCoords{
        Data2: m.Data2,
    }
}



// maskCoords#aed6dbb2 n:int x:double y:double zoom:double = MaskCoords;
func (m *TLMaskCoords) To_MaskCoords() *MaskCoords {
    return &MaskCoords{
        Constructor: TLConstructor_CRC32_maskCoords,
        Data2: m.Data2,
    }
}


func (m *TLMaskCoords) SetN(v int32) { m.Data2.N = v }
func (m *TLMaskCoords) GetN() int32 { return m.Data2.N }

func (m *TLMaskCoords) SetX(v float64) { m.Data2.X = v }
func (m *TLMaskCoords) GetX() float64 { return m.Data2.X }

func (m *TLMaskCoords) SetY(v float64) { m.Data2.Y = v }
func (m *TLMaskCoords) GetY() float64 { return m.Data2.Y }

func (m *TLMaskCoords) SetZoom(v float64) { m.Data2.Zoom = v }
func (m *TLMaskCoords) GetZoom() float64 { return m.Data2.Zoom }


func NewTLMaskCoords() * TLMaskCoords {
    return &TLMaskCoords{ Data2: &MaskCoords_Data{} }
}

func (m* TLMaskCoords) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_maskCoords))

    x.Int(m.GetN())
    x.Double(m.GetX())
    x.Double(m.GetY())
    x.Double(m.GetZoom())

    return x.buf
}

func (m* TLMaskCoords) Decode(dbuf *DecodeBuf) error {
    m.SetN(dbuf.Int())
    m.SetX(dbuf.Double())
    m.SetY(dbuf.Double())
    m.SetZoom(dbuf.Double())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Update <--
//  + TL_UpdateNewMessage
//  + TL_UpdateMessageID
//  + TL_UpdateDeleteMessages
//  + TL_UpdateUserTyping
//  + TL_UpdateChatUserTyping
//  + TL_UpdateChatParticipants
//  + TL_UpdateUserStatus
//  + TL_UpdateUserName
//  + TL_UpdateUserPhoto
//  + TL_UpdateContactRegistered
//  + TL_UpdateContactLink
//  + TL_UpdateNewEncryptedMessage
//  + TL_UpdateEncryptedChatTyping
//  + TL_UpdateEncryption
//  + TL_UpdateEncryptedMessagesRead
//  + TL_UpdateChatParticipantAdd
//  + TL_UpdateChatParticipantDelete
//  + TL_UpdateDcOptions
//  + TL_UpdateUserBlocked
//  + TL_UpdateNotifySettings
//  + TL_UpdateServiceNotification
//  + TL_UpdatePrivacy
//  + TL_UpdateUserPhone
//  + TL_UpdateReadHistoryInbox
//  + TL_UpdateReadHistoryOutbox
//  + TL_UpdateWebPage
//  + TL_UpdateReadMessagesContents
//  + TL_UpdateChannelTooLong
//  + TL_UpdateChannel
//  + TL_UpdateNewChannelMessage
//  + TL_UpdateReadChannelInbox
//  + TL_UpdateDeleteChannelMessages
//  + TL_UpdateChannelMessageViews
//  + TL_UpdateChatAdmins
//  + TL_UpdateChatParticipantAdmin
//  + TL_UpdateNewStickerSet
//  + TL_UpdateStickerSetsOrder
//  + TL_UpdateStickerSets
//  + TL_UpdateSavedGifs
//  + TL_UpdateBotInlineQuery
//  + TL_UpdateBotInlineSend
//  + TL_UpdateEditChannelMessage
//  + TL_UpdateChannelPinnedMessage
//  + TL_UpdateBotCallbackQuery
//  + TL_UpdateEditMessage
//  + TL_UpdateInlineBotCallbackQuery
//  + TL_UpdateReadChannelOutbox
//  + TL_UpdateDraftMessage
//  + TL_UpdateReadFeaturedStickers
//  + TL_UpdateRecentStickers
//  + TL_UpdateConfig
//  + TL_UpdatePtsChanged
//  + TL_UpdateChannelWebPage
//  + TL_UpdateDialogPinned
//  + TL_UpdatePinnedDialogs
//  + TL_UpdateBotWebhookJSON
//  + TL_UpdateBotWebhookJSONQuery
//  + TL_UpdateBotShippingQuery
//  + TL_UpdateBotPrecheckoutQuery
//  + TL_UpdatePhoneCall
//  + TL_UpdateLangPackTooLong
//  + TL_UpdateLangPack
//  + TL_UpdateFavedStickers
//  + TL_UpdateChannelReadMessagesContents
//  + TL_UpdateContactsReset
//  + TL_UpdateGivePoints
//  + TL_UpdateRedTip
//  + TL_UpdateRefreshContacts
//  + TL_UpdateByJson
//  + TL_UpdateChannelBannedRights
//  + TL_UpdateChannelAvailableMessages
//  + TL_UpdateReadHistoryInbox114
//  + TL_UpdateReadChannelInbox114
//  + TL_UpdateDialogPinned114
//  + TL_UpdatePinnedDialogs114
//  + TL_UpdateLangPackTooLong114
//  + TL_UpdateDialogUnreadMark
//  + TL_UpdateUserPinnedMessage
//  + TL_UpdateChatPinnedMessage
//  + TL_UpdateMessagePoll
//  + TL_UpdateChatDefaultBannedRights
//  + TL_UpdateFolderPeers
//  + TL_UpdatePeerSettings
//  + TL_UpdatePeerLocated
//  + TL_UpdateNewScheduledMessage
//  + TL_UpdateDeleteScheduledMessages
//  + TL_UpdateTheme
//  + TL_UpdateGeoLiveViewed
//  + TL_UpdateLoginToken
//  + TL_UpdateMessagePollVote
//  + TL_UpdateDialogFilter
//  + TL_UpdateDialogFilterOrder
//  + TL_UpdateDialogFilters
//  + TL_UpdatePhoneCallSignalingData
//  + TL_UpdateChannelParticipant
//  + TL_UpdatePinnedChannelMessages
//

func (m *Update) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_updateNewMessage:
        t := m.To_UpdateNewMessage()
        return t.Encode()
    case TLConstructor_CRC32_updateMessageID:
        t := m.To_UpdateMessageID()
        return t.Encode()
    case TLConstructor_CRC32_updateDeleteMessages:
        t := m.To_UpdateDeleteMessages()
        return t.Encode()
    case TLConstructor_CRC32_updateUserTyping:
        t := m.To_UpdateUserTyping()
        return t.Encode()
    case TLConstructor_CRC32_updateChatUserTyping:
        t := m.To_UpdateChatUserTyping()
        return t.Encode()
    case TLConstructor_CRC32_updateChatParticipants:
        t := m.To_UpdateChatParticipants()
        return t.Encode()
    case TLConstructor_CRC32_updateUserStatus:
        t := m.To_UpdateUserStatus()
        return t.Encode()
    case TLConstructor_CRC32_updateUserName:
        t := m.To_UpdateUserName()
        return t.Encode()
    case TLConstructor_CRC32_updateUserPhoto:
        t := m.To_UpdateUserPhoto()
        return t.Encode()
    case TLConstructor_CRC32_updateContactRegistered:
        t := m.To_UpdateContactRegistered()
        return t.Encode()
    case TLConstructor_CRC32_updateContactLink:
        t := m.To_UpdateContactLink()
        return t.Encode()
    case TLConstructor_CRC32_updateNewEncryptedMessage:
        t := m.To_UpdateNewEncryptedMessage()
        return t.Encode()
    case TLConstructor_CRC32_updateEncryptedChatTyping:
        t := m.To_UpdateEncryptedChatTyping()
        return t.Encode()
    case TLConstructor_CRC32_updateEncryption:
        t := m.To_UpdateEncryption()
        return t.Encode()
    case TLConstructor_CRC32_updateEncryptedMessagesRead:
        t := m.To_UpdateEncryptedMessagesRead()
        return t.Encode()
    case TLConstructor_CRC32_updateChatParticipantAdd:
        t := m.To_UpdateChatParticipantAdd()
        return t.Encode()
    case TLConstructor_CRC32_updateChatParticipantDelete:
        t := m.To_UpdateChatParticipantDelete()
        return t.Encode()
    case TLConstructor_CRC32_updateDcOptions:
        t := m.To_UpdateDcOptions()
        return t.Encode()
    case TLConstructor_CRC32_updateUserBlocked:
        t := m.To_UpdateUserBlocked()
        return t.Encode()
    case TLConstructor_CRC32_updateNotifySettings:
        t := m.To_UpdateNotifySettings()
        return t.Encode()
    case TLConstructor_CRC32_updateServiceNotification:
        t := m.To_UpdateServiceNotification()
        return t.Encode()
    case TLConstructor_CRC32_updatePrivacy:
        t := m.To_UpdatePrivacy()
        return t.Encode()
    case TLConstructor_CRC32_updateUserPhone:
        t := m.To_UpdateUserPhone()
        return t.Encode()
    case TLConstructor_CRC32_updateReadHistoryInbox:
        t := m.To_UpdateReadHistoryInbox()
        return t.Encode()
    case TLConstructor_CRC32_updateReadHistoryOutbox:
        t := m.To_UpdateReadHistoryOutbox()
        return t.Encode()
    case TLConstructor_CRC32_updateWebPage:
        t := m.To_UpdateWebPage()
        return t.Encode()
    case TLConstructor_CRC32_updateReadMessagesContents:
        t := m.To_UpdateReadMessagesContents()
        return t.Encode()
    case TLConstructor_CRC32_updateChannelTooLong:
        t := m.To_UpdateChannelTooLong()
        return t.Encode()
    case TLConstructor_CRC32_updateChannel:
        t := m.To_UpdateChannel()
        return t.Encode()
    case TLConstructor_CRC32_updateNewChannelMessage:
        t := m.To_UpdateNewChannelMessage()
        return t.Encode()
    case TLConstructor_CRC32_updateReadChannelInbox:
        t := m.To_UpdateReadChannelInbox()
        return t.Encode()
    case TLConstructor_CRC32_updateDeleteChannelMessages:
        t := m.To_UpdateDeleteChannelMessages()
        return t.Encode()
    case TLConstructor_CRC32_updateChannelMessageViews:
        t := m.To_UpdateChannelMessageViews()
        return t.Encode()
    case TLConstructor_CRC32_updateChatAdmins:
        t := m.To_UpdateChatAdmins()
        return t.Encode()
    case TLConstructor_CRC32_updateChatParticipantAdmin:
        t := m.To_UpdateChatParticipantAdmin()
        return t.Encode()
    case TLConstructor_CRC32_updateNewStickerSet:
        t := m.To_UpdateNewStickerSet()
        return t.Encode()
    case TLConstructor_CRC32_updateStickerSetsOrder:
        t := m.To_UpdateStickerSetsOrder()
        return t.Encode()
    case TLConstructor_CRC32_updateStickerSets:
        t := m.To_UpdateStickerSets()
        return t.Encode()
    case TLConstructor_CRC32_updateSavedGifs:
        t := m.To_UpdateSavedGifs()
        return t.Encode()
    case TLConstructor_CRC32_updateBotInlineQuery:
        t := m.To_UpdateBotInlineQuery()
        return t.Encode()
    case TLConstructor_CRC32_updateBotInlineSend:
        t := m.To_UpdateBotInlineSend()
        return t.Encode()
    case TLConstructor_CRC32_updateEditChannelMessage:
        t := m.To_UpdateEditChannelMessage()
        return t.Encode()
    case TLConstructor_CRC32_updateChannelPinnedMessage:
        t := m.To_UpdateChannelPinnedMessage()
        return t.Encode()
    case TLConstructor_CRC32_updateBotCallbackQuery:
        t := m.To_UpdateBotCallbackQuery()
        return t.Encode()
    case TLConstructor_CRC32_updateEditMessage:
        t := m.To_UpdateEditMessage()
        return t.Encode()
    case TLConstructor_CRC32_updateInlineBotCallbackQuery:
        t := m.To_UpdateInlineBotCallbackQuery()
        return t.Encode()
    case TLConstructor_CRC32_updateReadChannelOutbox:
        t := m.To_UpdateReadChannelOutbox()
        return t.Encode()
    case TLConstructor_CRC32_updateDraftMessage:
        t := m.To_UpdateDraftMessage()
        return t.Encode()
    case TLConstructor_CRC32_updateReadFeaturedStickers:
        t := m.To_UpdateReadFeaturedStickers()
        return t.Encode()
    case TLConstructor_CRC32_updateRecentStickers:
        t := m.To_UpdateRecentStickers()
        return t.Encode()
    case TLConstructor_CRC32_updateConfig:
        t := m.To_UpdateConfig()
        return t.Encode()
    case TLConstructor_CRC32_updatePtsChanged:
        t := m.To_UpdatePtsChanged()
        return t.Encode()
    case TLConstructor_CRC32_updateChannelWebPage:
        t := m.To_UpdateChannelWebPage()
        return t.Encode()
    case TLConstructor_CRC32_updateDialogPinned:
        t := m.To_UpdateDialogPinned()
        return t.Encode()
    case TLConstructor_CRC32_updatePinnedDialogs:
        t := m.To_UpdatePinnedDialogs()
        return t.Encode()
    case TLConstructor_CRC32_updateBotWebhookJSON:
        t := m.To_UpdateBotWebhookJSON()
        return t.Encode()
    case TLConstructor_CRC32_updateBotWebhookJSONQuery:
        t := m.To_UpdateBotWebhookJSONQuery()
        return t.Encode()
    case TLConstructor_CRC32_updateBotShippingQuery:
        t := m.To_UpdateBotShippingQuery()
        return t.Encode()
    case TLConstructor_CRC32_updateBotPrecheckoutQuery:
        t := m.To_UpdateBotPrecheckoutQuery()
        return t.Encode()
    case TLConstructor_CRC32_updatePhoneCall:
        t := m.To_UpdatePhoneCall()
        return t.Encode()
    case TLConstructor_CRC32_updateLangPackTooLong:
        t := m.To_UpdateLangPackTooLong()
        return t.Encode()
    case TLConstructor_CRC32_updateLangPack:
        t := m.To_UpdateLangPack()
        return t.Encode()
    case TLConstructor_CRC32_updateFavedStickers:
        t := m.To_UpdateFavedStickers()
        return t.Encode()
    case TLConstructor_CRC32_updateChannelReadMessagesContents:
        t := m.To_UpdateChannelReadMessagesContents()
        return t.Encode()
    case TLConstructor_CRC32_updateContactsReset:
        t := m.To_UpdateContactsReset()
        return t.Encode()
    case TLConstructor_CRC32_updateGivePoints:
        t := m.To_UpdateGivePoints()
        return t.Encode()
    case TLConstructor_CRC32_updateRedTip:
        t := m.To_UpdateRedTip()
        return t.Encode()
    case TLConstructor_CRC32_updateRefreshContacts:
        t := m.To_UpdateRefreshContacts()
        return t.Encode()
    case TLConstructor_CRC32_updateByJson:
        t := m.To_UpdateByJson()
        return t.Encode()
    case TLConstructor_CRC32_updateChannelBannedRights:
        t := m.To_UpdateChannelBannedRights()
        return t.Encode()
    case TLConstructor_CRC32_updateChannelAvailableMessages:
        t := m.To_UpdateChannelAvailableMessages()
        return t.Encode()
    case TLConstructor_CRC32_updateReadHistoryInbox114:
        t := m.To_UpdateReadHistoryInbox114()
        return t.Encode()
    case TLConstructor_CRC32_updateReadChannelInbox114:
        t := m.To_UpdateReadChannelInbox114()
        return t.Encode()
    case TLConstructor_CRC32_updateDialogPinned114:
        t := m.To_UpdateDialogPinned114()
        return t.Encode()
    case TLConstructor_CRC32_updatePinnedDialogs114:
        t := m.To_UpdatePinnedDialogs114()
        return t.Encode()
    case TLConstructor_CRC32_updateLangPackTooLong114:
        t := m.To_UpdateLangPackTooLong114()
        return t.Encode()
    case TLConstructor_CRC32_updateDialogUnreadMark:
        t := m.To_UpdateDialogUnreadMark()
        return t.Encode()
    case TLConstructor_CRC32_updateUserPinnedMessage:
        t := m.To_UpdateUserPinnedMessage()
        return t.Encode()
    case TLConstructor_CRC32_updateChatPinnedMessage:
        t := m.To_UpdateChatPinnedMessage()
        return t.Encode()
    case TLConstructor_CRC32_updateMessagePoll:
        t := m.To_UpdateMessagePoll()
        return t.Encode()
    case TLConstructor_CRC32_updateChatDefaultBannedRights:
        t := m.To_UpdateChatDefaultBannedRights()
        return t.Encode()
    case TLConstructor_CRC32_updateFolderPeers:
        t := m.To_UpdateFolderPeers()
        return t.Encode()
    case TLConstructor_CRC32_updatePeerSettings:
        t := m.To_UpdatePeerSettings()
        return t.Encode()
    case TLConstructor_CRC32_updatePeerLocated:
        t := m.To_UpdatePeerLocated()
        return t.Encode()
    case TLConstructor_CRC32_updateNewScheduledMessage:
        t := m.To_UpdateNewScheduledMessage()
        return t.Encode()
    case TLConstructor_CRC32_updateDeleteScheduledMessages:
        t := m.To_UpdateDeleteScheduledMessages()
        return t.Encode()
    case TLConstructor_CRC32_updateTheme:
        t := m.To_UpdateTheme()
        return t.Encode()
    case TLConstructor_CRC32_updateGeoLiveViewed:
        t := m.To_UpdateGeoLiveViewed()
        return t.Encode()
    case TLConstructor_CRC32_updateLoginToken:
        t := m.To_UpdateLoginToken()
        return t.Encode()
    case TLConstructor_CRC32_updateMessagePollVote:
        t := m.To_UpdateMessagePollVote()
        return t.Encode()
    case TLConstructor_CRC32_updateDialogFilter:
        t := m.To_UpdateDialogFilter()
        return t.Encode()
    case TLConstructor_CRC32_updateDialogFilterOrder:
        t := m.To_UpdateDialogFilterOrder()
        return t.Encode()
    case TLConstructor_CRC32_updateDialogFilters:
        t := m.To_UpdateDialogFilters()
        return t.Encode()
    case TLConstructor_CRC32_updatePhoneCallSignalingData:
        t := m.To_UpdatePhoneCallSignalingData()
        return t.Encode()
    case TLConstructor_CRC32_updateChannelParticipant:
        t := m.To_UpdateChannelParticipant()
        return t.Encode()
    case TLConstructor_CRC32_updatePinnedChannelMessages:
        t := m.To_UpdatePinnedChannelMessages()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Update) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_updateNewMessage:
        m2 := &TLUpdateNewMessage{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateMessageID:
        m2 := &TLUpdateMessageID{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateDeleteMessages:
        m2 := &TLUpdateDeleteMessages{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateUserTyping:
        m2 := &TLUpdateUserTyping{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateChatUserTyping:
        m2 := &TLUpdateChatUserTyping{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateChatParticipants:
        m2 := &TLUpdateChatParticipants{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateUserStatus:
        m2 := &TLUpdateUserStatus{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateUserName:
        m2 := &TLUpdateUserName{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateUserPhoto:
        m2 := &TLUpdateUserPhoto{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateContactRegistered:
        m2 := &TLUpdateContactRegistered{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateContactLink:
        m2 := &TLUpdateContactLink{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateNewEncryptedMessage:
        m2 := &TLUpdateNewEncryptedMessage{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateEncryptedChatTyping:
        m2 := &TLUpdateEncryptedChatTyping{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateEncryption:
        m2 := &TLUpdateEncryption{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateEncryptedMessagesRead:
        m2 := &TLUpdateEncryptedMessagesRead{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateChatParticipantAdd:
        m2 := &TLUpdateChatParticipantAdd{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateChatParticipantDelete:
        m2 := &TLUpdateChatParticipantDelete{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateDcOptions:
        m2 := &TLUpdateDcOptions{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateUserBlocked:
        m2 := &TLUpdateUserBlocked{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateNotifySettings:
        m2 := &TLUpdateNotifySettings{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateServiceNotification:
        m2 := &TLUpdateServiceNotification{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updatePrivacy:
        m2 := &TLUpdatePrivacy{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateUserPhone:
        m2 := &TLUpdateUserPhone{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateReadHistoryInbox:
        m2 := &TLUpdateReadHistoryInbox{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateReadHistoryOutbox:
        m2 := &TLUpdateReadHistoryOutbox{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateWebPage:
        m2 := &TLUpdateWebPage{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateReadMessagesContents:
        m2 := &TLUpdateReadMessagesContents{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateChannelTooLong:
        m2 := &TLUpdateChannelTooLong{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateChannel:
        m2 := &TLUpdateChannel{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateNewChannelMessage:
        m2 := &TLUpdateNewChannelMessage{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateReadChannelInbox:
        m2 := &TLUpdateReadChannelInbox{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateDeleteChannelMessages:
        m2 := &TLUpdateDeleteChannelMessages{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateChannelMessageViews:
        m2 := &TLUpdateChannelMessageViews{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateChatAdmins:
        m2 := &TLUpdateChatAdmins{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateChatParticipantAdmin:
        m2 := &TLUpdateChatParticipantAdmin{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateNewStickerSet:
        m2 := &TLUpdateNewStickerSet{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateStickerSetsOrder:
        m2 := &TLUpdateStickerSetsOrder{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateStickerSets:
        m2 := &TLUpdateStickerSets{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateSavedGifs:
        m2 := &TLUpdateSavedGifs{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateBotInlineQuery:
        m2 := &TLUpdateBotInlineQuery{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateBotInlineSend:
        m2 := &TLUpdateBotInlineSend{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateEditChannelMessage:
        m2 := &TLUpdateEditChannelMessage{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateChannelPinnedMessage:
        m2 := &TLUpdateChannelPinnedMessage{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateBotCallbackQuery:
        m2 := &TLUpdateBotCallbackQuery{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateEditMessage:
        m2 := &TLUpdateEditMessage{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateInlineBotCallbackQuery:
        m2 := &TLUpdateInlineBotCallbackQuery{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateReadChannelOutbox:
        m2 := &TLUpdateReadChannelOutbox{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateDraftMessage:
        m2 := &TLUpdateDraftMessage{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateReadFeaturedStickers:
        m2 := &TLUpdateReadFeaturedStickers{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateRecentStickers:
        m2 := &TLUpdateRecentStickers{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateConfig:
        m2 := &TLUpdateConfig{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updatePtsChanged:
        m2 := &TLUpdatePtsChanged{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateChannelWebPage:
        m2 := &TLUpdateChannelWebPage{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateDialogPinned:
        m2 := &TLUpdateDialogPinned{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updatePinnedDialogs:
        m2 := &TLUpdatePinnedDialogs{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateBotWebhookJSON:
        m2 := &TLUpdateBotWebhookJSON{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateBotWebhookJSONQuery:
        m2 := &TLUpdateBotWebhookJSONQuery{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateBotShippingQuery:
        m2 := &TLUpdateBotShippingQuery{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateBotPrecheckoutQuery:
        m2 := &TLUpdateBotPrecheckoutQuery{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updatePhoneCall:
        m2 := &TLUpdatePhoneCall{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateLangPackTooLong:
        m2 := &TLUpdateLangPackTooLong{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateLangPack:
        m2 := &TLUpdateLangPack{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateFavedStickers:
        m2 := &TLUpdateFavedStickers{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateChannelReadMessagesContents:
        m2 := &TLUpdateChannelReadMessagesContents{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateContactsReset:
        m2 := &TLUpdateContactsReset{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateGivePoints:
        m2 := &TLUpdateGivePoints{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateRedTip:
        m2 := &TLUpdateRedTip{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateRefreshContacts:
        m2 := &TLUpdateRefreshContacts{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateByJson:
        m2 := &TLUpdateByJson{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateChannelBannedRights:
        m2 := &TLUpdateChannelBannedRights{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateChannelAvailableMessages:
        m2 := &TLUpdateChannelAvailableMessages{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateReadHistoryInbox114:
        m2 := &TLUpdateReadHistoryInbox114{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateReadChannelInbox114:
        m2 := &TLUpdateReadChannelInbox114{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateDialogPinned114:
        m2 := &TLUpdateDialogPinned114{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updatePinnedDialogs114:
        m2 := &TLUpdatePinnedDialogs114{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateLangPackTooLong114:
        m2 := &TLUpdateLangPackTooLong114{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateDialogUnreadMark:
        m2 := &TLUpdateDialogUnreadMark{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateUserPinnedMessage:
        m2 := &TLUpdateUserPinnedMessage{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateChatPinnedMessage:
        m2 := &TLUpdateChatPinnedMessage{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateMessagePoll:
        m2 := &TLUpdateMessagePoll{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateChatDefaultBannedRights:
        m2 := &TLUpdateChatDefaultBannedRights{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateFolderPeers:
        m2 := &TLUpdateFolderPeers{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updatePeerSettings:
        m2 := &TLUpdatePeerSettings{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updatePeerLocated:
        m2 := &TLUpdatePeerLocated{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateNewScheduledMessage:
        m2 := &TLUpdateNewScheduledMessage{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateDeleteScheduledMessages:
        m2 := &TLUpdateDeleteScheduledMessages{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateTheme:
        m2 := &TLUpdateTheme{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateGeoLiveViewed:
        m2 := &TLUpdateGeoLiveViewed{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateLoginToken:
        m2 := &TLUpdateLoginToken{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateMessagePollVote:
        m2 := &TLUpdateMessagePollVote{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateDialogFilter:
        m2 := &TLUpdateDialogFilter{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateDialogFilterOrder:
        m2 := &TLUpdateDialogFilterOrder{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateDialogFilters:
        m2 := &TLUpdateDialogFilters{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updatePhoneCallSignalingData:
        m2 := &TLUpdatePhoneCallSignalingData{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updateChannelParticipant:
        m2 := &TLUpdateChannelParticipant{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updatePinnedChannelMessages:
        m2 := &TLUpdatePinnedChannelMessages{&Update_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// updateNewMessage#1f2b0afd message:Message pts:int pts_count:int = Update;
func (m *Update) To_UpdateNewMessage() *TLUpdateNewMessage {
    return &TLUpdateNewMessage{
        Data2: m.Data2,
    }
}

// updateMessageID#4e90bfd6 id:int random_id:long = Update;
func (m *Update) To_UpdateMessageID() *TLUpdateMessageID {
    return &TLUpdateMessageID{
        Data2: m.Data2,
    }
}

// updateDeleteMessages#a20db0e5 messages:Vector<int> pts:int pts_count:int = Update;
func (m *Update) To_UpdateDeleteMessages() *TLUpdateDeleteMessages {
    return &TLUpdateDeleteMessages{
        Data2: m.Data2,
    }
}

// updateUserTyping#5c486927 user_id:int action:SendMessageAction = Update;
func (m *Update) To_UpdateUserTyping() *TLUpdateUserTyping {
    return &TLUpdateUserTyping{
        Data2: m.Data2,
    }
}

// updateChatUserTyping#9a65ea1f chat_id:int user_id:int action:SendMessageAction = Update;
func (m *Update) To_UpdateChatUserTyping() *TLUpdateChatUserTyping {
    return &TLUpdateChatUserTyping{
        Data2: m.Data2,
    }
}

// updateChatParticipants#7761198 participants:ChatParticipants = Update;
func (m *Update) To_UpdateChatParticipants() *TLUpdateChatParticipants {
    return &TLUpdateChatParticipants{
        Data2: m.Data2,
    }
}

// updateUserStatus#1bfbd823 user_id:int status:UserStatus = Update;
func (m *Update) To_UpdateUserStatus() *TLUpdateUserStatus {
    return &TLUpdateUserStatus{
        Data2: m.Data2,
    }
}

// updateUserName#a7332b73 user_id:int first_name:string last_name:string username:string = Update;
func (m *Update) To_UpdateUserName() *TLUpdateUserName {
    return &TLUpdateUserName{
        Data2: m.Data2,
    }
}

// updateUserPhoto#95313b0c user_id:int date:int photo:UserProfilePhoto previous:Bool = Update;
func (m *Update) To_UpdateUserPhoto() *TLUpdateUserPhoto {
    return &TLUpdateUserPhoto{
        Data2: m.Data2,
    }
}

// updateContactRegistered#2575bbb9 user_id:int date:int = Update;
func (m *Update) To_UpdateContactRegistered() *TLUpdateContactRegistered {
    return &TLUpdateContactRegistered{
        Data2: m.Data2,
    }
}

// updateContactLink#9d2e67c5 user_id:int my_link:ContactLink foreign_link:ContactLink = Update;
func (m *Update) To_UpdateContactLink() *TLUpdateContactLink {
    return &TLUpdateContactLink{
        Data2: m.Data2,
    }
}

// updateNewEncryptedMessage#12bcbd9a message:EncryptedMessage qts:int = Update;
func (m *Update) To_UpdateNewEncryptedMessage() *TLUpdateNewEncryptedMessage {
    return &TLUpdateNewEncryptedMessage{
        Data2: m.Data2,
    }
}

// updateEncryptedChatTyping#1710f156 chat_id:int = Update;
func (m *Update) To_UpdateEncryptedChatTyping() *TLUpdateEncryptedChatTyping {
    return &TLUpdateEncryptedChatTyping{
        Data2: m.Data2,
    }
}

// updateEncryption#b4a2e88d chat:EncryptedChat date:int = Update;
func (m *Update) To_UpdateEncryption() *TLUpdateEncryption {
    return &TLUpdateEncryption{
        Data2: m.Data2,
    }
}

// updateEncryptedMessagesRead#38fe25b7 chat_id:int max_date:int date:int = Update;
func (m *Update) To_UpdateEncryptedMessagesRead() *TLUpdateEncryptedMessagesRead {
    return &TLUpdateEncryptedMessagesRead{
        Data2: m.Data2,
    }
}

// updateChatParticipantAdd#ea4b0e5c chat_id:int user_id:int inviter_id:int date:int version:int = Update;
func (m *Update) To_UpdateChatParticipantAdd() *TLUpdateChatParticipantAdd {
    return &TLUpdateChatParticipantAdd{
        Data2: m.Data2,
    }
}

// updateChatParticipantDelete#6e5f8c22 chat_id:int user_id:int version:int = Update;
func (m *Update) To_UpdateChatParticipantDelete() *TLUpdateChatParticipantDelete {
    return &TLUpdateChatParticipantDelete{
        Data2: m.Data2,
    }
}

// updateDcOptions#8e5e9873 dc_options:Vector<DcOption> = Update;
func (m *Update) To_UpdateDcOptions() *TLUpdateDcOptions {
    return &TLUpdateDcOptions{
        Data2: m.Data2,
    }
}

// updateUserBlocked#80ece81a user_id:int blocked:Bool = Update;
func (m *Update) To_UpdateUserBlocked() *TLUpdateUserBlocked {
    return &TLUpdateUserBlocked{
        Data2: m.Data2,
    }
}

// updateNotifySettings#bec268ef peer:NotifyPeer notify_settings:PeerNotifySettings = Update;
func (m *Update) To_UpdateNotifySettings() *TLUpdateNotifySettings {
    return &TLUpdateNotifySettings{
        Data2: m.Data2,
    }
}

// updateServiceNotification#ebe46819 flags:# popup:flags.0?true inbox_date:flags.1?int type:string message:string media:MessageMedia entities:Vector<MessageEntity> = Update;
func (m *Update) To_UpdateServiceNotification() *TLUpdateServiceNotification {
    return &TLUpdateServiceNotification{
        Data2: m.Data2,
    }
}

// updatePrivacy#ee3b272a key:PrivacyKey rules:Vector<PrivacyRule> = Update;
func (m *Update) To_UpdatePrivacy() *TLUpdatePrivacy {
    return &TLUpdatePrivacy{
        Data2: m.Data2,
    }
}

// updateUserPhone#12b9417b user_id:int phone:string = Update;
func (m *Update) To_UpdateUserPhone() *TLUpdateUserPhone {
    return &TLUpdateUserPhone{
        Data2: m.Data2,
    }
}

// updateReadHistoryInbox#9961fd5c peer:Peer max_id:int pts:int pts_count:int = Update;
func (m *Update) To_UpdateReadHistoryInbox() *TLUpdateReadHistoryInbox {
    return &TLUpdateReadHistoryInbox{
        Data2: m.Data2,
    }
}

// updateReadHistoryOutbox#2f2f21bf peer:Peer max_id:int pts:int pts_count:int = Update;
func (m *Update) To_UpdateReadHistoryOutbox() *TLUpdateReadHistoryOutbox {
    return &TLUpdateReadHistoryOutbox{
        Data2: m.Data2,
    }
}

// updateWebPage#7f891213 webpage:WebPage pts:int pts_count:int = Update;
func (m *Update) To_UpdateWebPage() *TLUpdateWebPage {
    return &TLUpdateWebPage{
        Data2: m.Data2,
    }
}

// updateReadMessagesContents#68c13933 messages:Vector<int> pts:int pts_count:int = Update;
func (m *Update) To_UpdateReadMessagesContents() *TLUpdateReadMessagesContents {
    return &TLUpdateReadMessagesContents{
        Data2: m.Data2,
    }
}

// updateChannelTooLong#eb0467fb flags:# channel_id:int pts:flags.0?int = Update;
func (m *Update) To_UpdateChannelTooLong() *TLUpdateChannelTooLong {
    return &TLUpdateChannelTooLong{
        Data2: m.Data2,
    }
}

// updateChannel#b6d45656 channel_id:int = Update;
func (m *Update) To_UpdateChannel() *TLUpdateChannel {
    return &TLUpdateChannel{
        Data2: m.Data2,
    }
}

// updateNewChannelMessage#62ba04d9 message:Message pts:int pts_count:int = Update;
func (m *Update) To_UpdateNewChannelMessage() *TLUpdateNewChannelMessage {
    return &TLUpdateNewChannelMessage{
        Data2: m.Data2,
    }
}

// updateReadChannelInbox#4214f37f channel_id:int max_id:int = Update;
func (m *Update) To_UpdateReadChannelInbox() *TLUpdateReadChannelInbox {
    return &TLUpdateReadChannelInbox{
        Data2: m.Data2,
    }
}

// updateDeleteChannelMessages#c37521c9 channel_id:int messages:Vector<int> pts:int pts_count:int = Update;
func (m *Update) To_UpdateDeleteChannelMessages() *TLUpdateDeleteChannelMessages {
    return &TLUpdateDeleteChannelMessages{
        Data2: m.Data2,
    }
}

// updateChannelMessageViews#98a12b4b channel_id:int id:int views:int = Update;
func (m *Update) To_UpdateChannelMessageViews() *TLUpdateChannelMessageViews {
    return &TLUpdateChannelMessageViews{
        Data2: m.Data2,
    }
}

// updateChatAdmins#6e947941 chat_id:int enabled:Bool version:int = Update;
func (m *Update) To_UpdateChatAdmins() *TLUpdateChatAdmins {
    return &TLUpdateChatAdmins{
        Data2: m.Data2,
    }
}

// updateChatParticipantAdmin#b6901959 chat_id:int user_id:int is_admin:Bool version:int = Update;
func (m *Update) To_UpdateChatParticipantAdmin() *TLUpdateChatParticipantAdmin {
    return &TLUpdateChatParticipantAdmin{
        Data2: m.Data2,
    }
}

// updateNewStickerSet#688a30aa stickerset:messages.StickerSet = Update;
func (m *Update) To_UpdateNewStickerSet() *TLUpdateNewStickerSet {
    return &TLUpdateNewStickerSet{
        Data2: m.Data2,
    }
}

// updateStickerSetsOrder#bb2d201 flags:# masks:flags.0?true order:Vector<long> = Update;
func (m *Update) To_UpdateStickerSetsOrder() *TLUpdateStickerSetsOrder {
    return &TLUpdateStickerSetsOrder{
        Data2: m.Data2,
    }
}

// updateStickerSets#43ae3dec = Update;
func (m *Update) To_UpdateStickerSets() *TLUpdateStickerSets {
    return &TLUpdateStickerSets{
        Data2: m.Data2,
    }
}

// updateSavedGifs#9375341e = Update;
func (m *Update) To_UpdateSavedGifs() *TLUpdateSavedGifs {
    return &TLUpdateSavedGifs{
        Data2: m.Data2,
    }
}

// updateBotInlineQuery#54826690 flags:# query_id:long user_id:int query:string geo:flags.0?GeoPoint offset:string = Update;
func (m *Update) To_UpdateBotInlineQuery() *TLUpdateBotInlineQuery {
    return &TLUpdateBotInlineQuery{
        Data2: m.Data2,
    }
}

// updateBotInlineSend#e48f964 flags:# user_id:int query:string geo:flags.0?GeoPoint id:string msg_id:flags.1?InputBotInlineMessageID = Update;
func (m *Update) To_UpdateBotInlineSend() *TLUpdateBotInlineSend {
    return &TLUpdateBotInlineSend{
        Data2: m.Data2,
    }
}

// updateEditChannelMessage#1b3f4df7 message:Message pts:int pts_count:int = Update;
func (m *Update) To_UpdateEditChannelMessage() *TLUpdateEditChannelMessage {
    return &TLUpdateEditChannelMessage{
        Data2: m.Data2,
    }
}

// updateChannelPinnedMessage#98592475 channel_id:int id:int = Update;
func (m *Update) To_UpdateChannelPinnedMessage() *TLUpdateChannelPinnedMessage {
    return &TLUpdateChannelPinnedMessage{
        Data2: m.Data2,
    }
}

// updateBotCallbackQuery#e73547e1 flags:# query_id:long user_id:int peer:Peer msg_id:int chat_instance:long data:flags.0?bytes game_short_name:flags.1?string = Update;
func (m *Update) To_UpdateBotCallbackQuery() *TLUpdateBotCallbackQuery {
    return &TLUpdateBotCallbackQuery{
        Data2: m.Data2,
    }
}

// updateEditMessage#e40370a3 message:Message pts:int pts_count:int = Update;
func (m *Update) To_UpdateEditMessage() *TLUpdateEditMessage {
    return &TLUpdateEditMessage{
        Data2: m.Data2,
    }
}

// updateInlineBotCallbackQuery#f9d27a5a flags:# query_id:long user_id:int msg_id:InputBotInlineMessageID chat_instance:long data:flags.0?bytes game_short_name:flags.1?string = Update;
func (m *Update) To_UpdateInlineBotCallbackQuery() *TLUpdateInlineBotCallbackQuery {
    return &TLUpdateInlineBotCallbackQuery{
        Data2: m.Data2,
    }
}

// updateReadChannelOutbox#25d6c9c7 channel_id:int max_id:int = Update;
func (m *Update) To_UpdateReadChannelOutbox() *TLUpdateReadChannelOutbox {
    return &TLUpdateReadChannelOutbox{
        Data2: m.Data2,
    }
}

// updateDraftMessage#ee2bb969 peer:Peer draft:DraftMessage = Update;
func (m *Update) To_UpdateDraftMessage() *TLUpdateDraftMessage {
    return &TLUpdateDraftMessage{
        Data2: m.Data2,
    }
}

// updateReadFeaturedStickers#571d2742 = Update;
func (m *Update) To_UpdateReadFeaturedStickers() *TLUpdateReadFeaturedStickers {
    return &TLUpdateReadFeaturedStickers{
        Data2: m.Data2,
    }
}

// updateRecentStickers#9a422c20 = Update;
func (m *Update) To_UpdateRecentStickers() *TLUpdateRecentStickers {
    return &TLUpdateRecentStickers{
        Data2: m.Data2,
    }
}

// updateConfig#a229dd06 = Update;
func (m *Update) To_UpdateConfig() *TLUpdateConfig {
    return &TLUpdateConfig{
        Data2: m.Data2,
    }
}

// updatePtsChanged#3354678f = Update;
func (m *Update) To_UpdatePtsChanged() *TLUpdatePtsChanged {
    return &TLUpdatePtsChanged{
        Data2: m.Data2,
    }
}

// updateChannelWebPage#40771900 channel_id:int webpage:WebPage pts:int pts_count:int = Update;
func (m *Update) To_UpdateChannelWebPage() *TLUpdateChannelWebPage {
    return &TLUpdateChannelWebPage{
        Data2: m.Data2,
    }
}

// updateDialogPinned#d711a2cc flags:# pinned:flags.0?true peer:Peer = Update;
func (m *Update) To_UpdateDialogPinned() *TLUpdateDialogPinned {
    return &TLUpdateDialogPinned{
        Data2: m.Data2,
    }
}

// updatePinnedDialogs#d8caf68d flags:# order:flags.0?Vector<Peer> = Update;
func (m *Update) To_UpdatePinnedDialogs() *TLUpdatePinnedDialogs {
    return &TLUpdatePinnedDialogs{
        Data2: m.Data2,
    }
}

// updateBotWebhookJSON#8317c0c3 data:DataJSON = Update;
func (m *Update) To_UpdateBotWebhookJSON() *TLUpdateBotWebhookJSON {
    return &TLUpdateBotWebhookJSON{
        Data2: m.Data2,
    }
}

// updateBotWebhookJSONQuery#9b9240a6 query_id:long data:DataJSON timeout:int = Update;
func (m *Update) To_UpdateBotWebhookJSONQuery() *TLUpdateBotWebhookJSONQuery {
    return &TLUpdateBotWebhookJSONQuery{
        Data2: m.Data2,
    }
}

// updateBotShippingQuery#e0cdc940 query_id:long user_id:int payload:bytes shipping_address:PostAddress = Update;
func (m *Update) To_UpdateBotShippingQuery() *TLUpdateBotShippingQuery {
    return &TLUpdateBotShippingQuery{
        Data2: m.Data2,
    }
}

// updateBotPrecheckoutQuery#5d2f3aa9 flags:# query_id:long user_id:int payload:bytes info:flags.0?PaymentRequestedInfo shipping_option_id:flags.1?string currency:string total_amount:long = Update;
func (m *Update) To_UpdateBotPrecheckoutQuery() *TLUpdateBotPrecheckoutQuery {
    return &TLUpdateBotPrecheckoutQuery{
        Data2: m.Data2,
    }
}

// updatePhoneCall#ab0f6b1e phone_call:PhoneCall = Update;
func (m *Update) To_UpdatePhoneCall() *TLUpdatePhoneCall {
    return &TLUpdatePhoneCall{
        Data2: m.Data2,
    }
}

// updateLangPackTooLong#10c2404b = Update;
func (m *Update) To_UpdateLangPackTooLong() *TLUpdateLangPackTooLong {
    return &TLUpdateLangPackTooLong{
        Data2: m.Data2,
    }
}

// updateLangPack#56022f4d difference:LangPackDifference = Update;
func (m *Update) To_UpdateLangPack() *TLUpdateLangPack {
    return &TLUpdateLangPack{
        Data2: m.Data2,
    }
}

// updateFavedStickers#e511996d = Update;
func (m *Update) To_UpdateFavedStickers() *TLUpdateFavedStickers {
    return &TLUpdateFavedStickers{
        Data2: m.Data2,
    }
}

// updateChannelReadMessagesContents#89893b45 channel_id:int messages:Vector<int> = Update;
func (m *Update) To_UpdateChannelReadMessagesContents() *TLUpdateChannelReadMessagesContents {
    return &TLUpdateChannelReadMessagesContents{
        Data2: m.Data2,
    }
}

// updateContactsReset#7084a7be = Update;
func (m *Update) To_UpdateContactsReset() *TLUpdateContactsReset {
    return &TLUpdateContactsReset{
        Data2: m.Data2,
    }
}

// updateGivePoints#adec3aee points:int reason:int = Update;
func (m *Update) To_UpdateGivePoints() *TLUpdateGivePoints {
    return &TLUpdateGivePoints{
        Data2: m.Data2,
    }
}

// updateRedTip#595d8378 json_content:string = Update;
func (m *Update) To_UpdateRedTip() *TLUpdateRedTip {
    return &TLUpdateRedTip{
        Data2: m.Data2,
    }
}

// updateRefreshContacts#599532e2 = Update;
func (m *Update) To_UpdateRefreshContacts() *TLUpdateRefreshContacts {
    return &TLUpdateRefreshContacts{
        Data2: m.Data2,
    }
}

// updateByJson#2eed5a10 type:int json_content:string = Update;
func (m *Update) To_UpdateByJson() *TLUpdateByJson {
    return &TLUpdateByJson{
        Data2: m.Data2,
    }
}

// updateChannelBannedRights#92e0f78f channel_id:int is_silence:Bool is_text:Bool = Update;
func (m *Update) To_UpdateChannelBannedRights() *TLUpdateChannelBannedRights {
    return &TLUpdateChannelBannedRights{
        Data2: m.Data2,
    }
}

// updateChannelAvailableMessages#70db6837 channel_id:int available_min_id:int = Update;
func (m *Update) To_UpdateChannelAvailableMessages() *TLUpdateChannelAvailableMessages {
    return &TLUpdateChannelAvailableMessages{
        Data2: m.Data2,
    }
}

// updateReadHistoryInbox#9c974fdf flags:# folder_id:flags.0?int peer:Peer max_id:int still_unread_count:int pts:int pts_count:int = Update;
func (m *Update) To_UpdateReadHistoryInbox114() *TLUpdateReadHistoryInbox114 {
    return &TLUpdateReadHistoryInbox114{
        Data2: m.Data2,
    }
}

// updateReadChannelInbox#330b5424 flags:# folder_id:flags.0?int channel_id:int max_id:int still_unread_count:int pts:int = Update;
func (m *Update) To_UpdateReadChannelInbox114() *TLUpdateReadChannelInbox114 {
    return &TLUpdateReadChannelInbox114{
        Data2: m.Data2,
    }
}

// updateDialogPinned#6e6fe51c flags:# pinned:flags.0?true folder_id:flags.1?int peer:DialogPeer = Update;
func (m *Update) To_UpdateDialogPinned114() *TLUpdateDialogPinned114 {
    return &TLUpdateDialogPinned114{
        Data2: m.Data2,
    }
}

// updatePinnedDialogs#fa0f3ca2 flags:# folder_id:flags.1?int order:flags.0?Vector<DialogPeer> = Update;
func (m *Update) To_UpdatePinnedDialogs114() *TLUpdatePinnedDialogs114 {
    return &TLUpdatePinnedDialogs114{
        Data2: m.Data2,
    }
}

// updateLangPackTooLong#46560264 lang_code:string = Update;
func (m *Update) To_UpdateLangPackTooLong114() *TLUpdateLangPackTooLong114 {
    return &TLUpdateLangPackTooLong114{
        Data2: m.Data2,
    }
}

// updateDialogUnreadMark#e16459c3 flags:# unread:flags.0?true peer:DialogPeer = Update;
func (m *Update) To_UpdateDialogUnreadMark() *TLUpdateDialogUnreadMark {
    return &TLUpdateDialogUnreadMark{
        Data2: m.Data2,
    }
}

// updateUserPinnedMessage#4c43da18 user_id:int id:int = Update;
func (m *Update) To_UpdateUserPinnedMessage() *TLUpdateUserPinnedMessage {
    return &TLUpdateUserPinnedMessage{
        Data2: m.Data2,
    }
}

// updateChatPinnedMessage#e10db349 chat_id:int id:int version:int = Update;
func (m *Update) To_UpdateChatPinnedMessage() *TLUpdateChatPinnedMessage {
    return &TLUpdateChatPinnedMessage{
        Data2: m.Data2,
    }
}

// updateMessagePoll#aca1657b flags:# poll_id:long poll:flags.0?Poll results:PollResults = Update;
func (m *Update) To_UpdateMessagePoll() *TLUpdateMessagePoll {
    return &TLUpdateMessagePoll{
        Data2: m.Data2,
    }
}

// updateChatDefaultBannedRights#54c01850 peer:Peer default_banned_rights:ChatBannedRights version:int = Update;
func (m *Update) To_UpdateChatDefaultBannedRights() *TLUpdateChatDefaultBannedRights {
    return &TLUpdateChatDefaultBannedRights{
        Data2: m.Data2,
    }
}

// updateFolderPeers#19360dc0 folder_peers:Vector<FolderPeer> pts:int pts_count:int = Update;
func (m *Update) To_UpdateFolderPeers() *TLUpdateFolderPeers {
    return &TLUpdateFolderPeers{
        Data2: m.Data2,
    }
}

// updatePeerSettings#6a7e7366 peer:Peer settings:PeerSettings = Update;
func (m *Update) To_UpdatePeerSettings() *TLUpdatePeerSettings {
    return &TLUpdatePeerSettings{
        Data2: m.Data2,
    }
}

// updatePeerLocated#b4afcfb0 peers:Vector<PeerLocated> = Update;
func (m *Update) To_UpdatePeerLocated() *TLUpdatePeerLocated {
    return &TLUpdatePeerLocated{
        Data2: m.Data2,
    }
}

// updateNewScheduledMessage#39a51dfb message:Message = Update;
func (m *Update) To_UpdateNewScheduledMessage() *TLUpdateNewScheduledMessage {
    return &TLUpdateNewScheduledMessage{
        Data2: m.Data2,
    }
}

// updateDeleteScheduledMessages#90866cee peer:Peer messages:Vector<int> = Update;
func (m *Update) To_UpdateDeleteScheduledMessages() *TLUpdateDeleteScheduledMessages {
    return &TLUpdateDeleteScheduledMessages{
        Data2: m.Data2,
    }
}

// updateTheme#8216fba3 theme:Theme = Update;
func (m *Update) To_UpdateTheme() *TLUpdateTheme {
    return &TLUpdateTheme{
        Data2: m.Data2,
    }
}

// updateGeoLiveViewed#871fb939 peer:Peer msg_id:int = Update;
func (m *Update) To_UpdateGeoLiveViewed() *TLUpdateGeoLiveViewed {
    return &TLUpdateGeoLiveViewed{
        Data2: m.Data2,
    }
}

// updateLoginToken#564fe691 = Update;
func (m *Update) To_UpdateLoginToken() *TLUpdateLoginToken {
    return &TLUpdateLoginToken{
        Data2: m.Data2,
    }
}

// updateMessagePollVote#42f88f2c poll_id:long user_id:int options:Vector<bytes> = Update;
func (m *Update) To_UpdateMessagePollVote() *TLUpdateMessagePollVote {
    return &TLUpdateMessagePollVote{
        Data2: m.Data2,
    }
}

// updateDialogFilter#26ffde7d flags:# id:int filter:flags.0?DialogFilter = Update;
func (m *Update) To_UpdateDialogFilter() *TLUpdateDialogFilter {
    return &TLUpdateDialogFilter{
        Data2: m.Data2,
    }
}

// updateDialogFilterOrder#a5d72105 order:Vector<int> = Update;
func (m *Update) To_UpdateDialogFilterOrder() *TLUpdateDialogFilterOrder {
    return &TLUpdateDialogFilterOrder{
        Data2: m.Data2,
    }
}

// updateDialogFilters#3504914f = Update;
func (m *Update) To_UpdateDialogFilters() *TLUpdateDialogFilters {
    return &TLUpdateDialogFilters{
        Data2: m.Data2,
    }
}

// updatePhoneCallSignalingData#2661bf09 phone_call_id:long data:bytes = Update;
func (m *Update) To_UpdatePhoneCallSignalingData() *TLUpdatePhoneCallSignalingData {
    return &TLUpdatePhoneCallSignalingData{
        Data2: m.Data2,
    }
}

// updateChannelParticipant#65d2b464 flags:# channel_id:int date:int user_id:int prev_participant:flags.0?ChannelParticipant new_participant:flags.1?ChannelParticipant qts:int = Update;
func (m *Update) To_UpdateChannelParticipant() *TLUpdateChannelParticipant {
    return &TLUpdateChannelParticipant{
        Data2: m.Data2,
    }
}

// updatePinnedChannelMessages#8588878b flags:# pinned:flags.0?true channel_id:int messages:Vector<int> pts:int pts_count:int = Update;
func (m *Update) To_UpdatePinnedChannelMessages() *TLUpdatePinnedChannelMessages {
    return &TLUpdatePinnedChannelMessages{
        Data2: m.Data2,
    }
}



// updateNewMessage#1f2b0afd message:Message pts:int pts_count:int = Update;
func (m *TLUpdateNewMessage) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateNewMessage,
        Data2: m.Data2,
    }
}


func (m *TLUpdateNewMessage) SetMessage(v *Message) { m.Data2.Message_1 = v }
func (m *TLUpdateNewMessage) GetMessage() *Message { return m.Data2.Message_1 }

func (m *TLUpdateNewMessage) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateNewMessage) GetPts() int32 { return m.Data2.Pts }

func (m *TLUpdateNewMessage) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateNewMessage) GetPtsCount() int32 { return m.Data2.PtsCount }


func NewTLUpdateNewMessage() * TLUpdateNewMessage {
    return &TLUpdateNewMessage{ Data2: &Update_Data{} }
}

func (m* TLUpdateNewMessage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateNewMessage))

    x.Bytes(m.GetMessage().Encode())
    x.Int(m.GetPts())
    x.Int(m.GetPtsCount())

    return x.buf
}

func (m* TLUpdateNewMessage) Decode(dbuf *DecodeBuf) error {
    m1 := &Message{}
    m1.Decode(dbuf)
    m.SetMessage(m1)
    m.SetPts(dbuf.Int())
    m.SetPtsCount(dbuf.Int())

    return dbuf.err
}
// updateMessageID#4e90bfd6 id:int random_id:long = Update;
func (m *TLUpdateMessageID) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateMessageID,
        Data2: m.Data2,
    }
}


func (m *TLUpdateMessageID) SetId(v int32) { m.Data2.Id_4 = v }
func (m *TLUpdateMessageID) GetId() int32 { return m.Data2.Id_4 }

func (m *TLUpdateMessageID) SetRandomId(v int64) { m.Data2.RandomId = v }
func (m *TLUpdateMessageID) GetRandomId() int64 { return m.Data2.RandomId }


func NewTLUpdateMessageID() * TLUpdateMessageID {
    return &TLUpdateMessageID{ Data2: &Update_Data{} }
}

func (m* TLUpdateMessageID) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateMessageID))

    x.Int(m.GetId())
    x.Long(m.GetRandomId())

    return x.buf
}

func (m* TLUpdateMessageID) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Int())
    m.SetRandomId(dbuf.Long())

    return dbuf.err
}
// updateDeleteMessages#a20db0e5 messages:Vector<int> pts:int pts_count:int = Update;
func (m *TLUpdateDeleteMessages) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateDeleteMessages,
        Data2: m.Data2,
    }
}


func (m *TLUpdateDeleteMessages) SetMessages(v []int32) { m.Data2.Messages = v }
func (m *TLUpdateDeleteMessages) GetMessages() []int32 { return m.Data2.Messages }

func (m *TLUpdateDeleteMessages) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateDeleteMessages) GetPts() int32 { return m.Data2.Pts }

func (m *TLUpdateDeleteMessages) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateDeleteMessages) GetPtsCount() int32 { return m.Data2.PtsCount }


func NewTLUpdateDeleteMessages() * TLUpdateDeleteMessages {
    return &TLUpdateDeleteMessages{ Data2: &Update_Data{} }
}

func (m* TLUpdateDeleteMessages) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateDeleteMessages))

    x.VectorInt(m.GetMessages())

    x.Int(m.GetPts())
    x.Int(m.GetPtsCount())

    return x.buf
}

func (m* TLUpdateDeleteMessages) Decode(dbuf *DecodeBuf) error {
    m.SetMessages(dbuf.VectorInt())
    m.SetPts(dbuf.Int())
    m.SetPtsCount(dbuf.Int())

    return dbuf.err
}
// updateUserTyping#5c486927 user_id:int action:SendMessageAction = Update;
func (m *TLUpdateUserTyping) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateUserTyping,
        Data2: m.Data2,
    }
}


func (m *TLUpdateUserTyping) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateUserTyping) GetUserId() int32 { return m.Data2.UserId }

func (m *TLUpdateUserTyping) SetAction(v *SendMessageAction) { m.Data2.Action = v }
func (m *TLUpdateUserTyping) GetAction() *SendMessageAction { return m.Data2.Action }


func NewTLUpdateUserTyping() * TLUpdateUserTyping {
    return &TLUpdateUserTyping{ Data2: &Update_Data{} }
}

func (m* TLUpdateUserTyping) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateUserTyping))

    x.Int(m.GetUserId())
    x.Bytes(m.GetAction().Encode())

    return x.buf
}

func (m* TLUpdateUserTyping) Decode(dbuf *DecodeBuf) error {
    m.SetUserId(dbuf.Int())
    m2 := &SendMessageAction{}
    m2.Decode(dbuf)
    m.SetAction(m2)

    return dbuf.err
}
// updateChatUserTyping#9a65ea1f chat_id:int user_id:int action:SendMessageAction = Update;
func (m *TLUpdateChatUserTyping) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateChatUserTyping,
        Data2: m.Data2,
    }
}


func (m *TLUpdateChatUserTyping) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLUpdateChatUserTyping) GetChatId() int32 { return m.Data2.ChatId }

func (m *TLUpdateChatUserTyping) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateChatUserTyping) GetUserId() int32 { return m.Data2.UserId }

func (m *TLUpdateChatUserTyping) SetAction(v *SendMessageAction) { m.Data2.Action = v }
func (m *TLUpdateChatUserTyping) GetAction() *SendMessageAction { return m.Data2.Action }


func NewTLUpdateChatUserTyping() * TLUpdateChatUserTyping {
    return &TLUpdateChatUserTyping{ Data2: &Update_Data{} }
}

func (m* TLUpdateChatUserTyping) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateChatUserTyping))

    x.Int(m.GetChatId())
    x.Int(m.GetUserId())
    x.Bytes(m.GetAction().Encode())

    return x.buf
}

func (m* TLUpdateChatUserTyping) Decode(dbuf *DecodeBuf) error {
    m.SetChatId(dbuf.Int())
    m.SetUserId(dbuf.Int())
    m3 := &SendMessageAction{}
    m3.Decode(dbuf)
    m.SetAction(m3)

    return dbuf.err
}
// updateChatParticipants#7761198 participants:ChatParticipants = Update;
func (m *TLUpdateChatParticipants) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateChatParticipants,
        Data2: m.Data2,
    }
}


func (m *TLUpdateChatParticipants) SetParticipants(v *ChatParticipants) { m.Data2.Participants = v }
func (m *TLUpdateChatParticipants) GetParticipants() *ChatParticipants { return m.Data2.Participants }


func NewTLUpdateChatParticipants() * TLUpdateChatParticipants {
    return &TLUpdateChatParticipants{ Data2: &Update_Data{} }
}

func (m* TLUpdateChatParticipants) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateChatParticipants))

    x.Bytes(m.GetParticipants().Encode())

    return x.buf
}

func (m* TLUpdateChatParticipants) Decode(dbuf *DecodeBuf) error {
    m1 := &ChatParticipants{}
    m1.Decode(dbuf)
    m.SetParticipants(m1)

    return dbuf.err
}
// updateUserStatus#1bfbd823 user_id:int status:UserStatus = Update;
func (m *TLUpdateUserStatus) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateUserStatus,
        Data2: m.Data2,
    }
}


func (m *TLUpdateUserStatus) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateUserStatus) GetUserId() int32 { return m.Data2.UserId }

func (m *TLUpdateUserStatus) SetStatus(v *UserStatus) { m.Data2.Status = v }
func (m *TLUpdateUserStatus) GetStatus() *UserStatus { return m.Data2.Status }


func NewTLUpdateUserStatus() * TLUpdateUserStatus {
    return &TLUpdateUserStatus{ Data2: &Update_Data{} }
}

func (m* TLUpdateUserStatus) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateUserStatus))

    x.Int(m.GetUserId())
    x.Bytes(m.GetStatus().Encode())

    return x.buf
}

func (m* TLUpdateUserStatus) Decode(dbuf *DecodeBuf) error {
    m.SetUserId(dbuf.Int())
    m2 := &UserStatus{}
    m2.Decode(dbuf)
    m.SetStatus(m2)

    return dbuf.err
}
// updateUserName#a7332b73 user_id:int first_name:string last_name:string username:string = Update;
func (m *TLUpdateUserName) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateUserName,
        Data2: m.Data2,
    }
}


func (m *TLUpdateUserName) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateUserName) GetUserId() int32 { return m.Data2.UserId }

func (m *TLUpdateUserName) SetFirstName(v string) { m.Data2.FirstName = v }
func (m *TLUpdateUserName) GetFirstName() string { return m.Data2.FirstName }

func (m *TLUpdateUserName) SetLastName(v string) { m.Data2.LastName = v }
func (m *TLUpdateUserName) GetLastName() string { return m.Data2.LastName }

func (m *TLUpdateUserName) SetUsername(v string) { m.Data2.Username = v }
func (m *TLUpdateUserName) GetUsername() string { return m.Data2.Username }


func NewTLUpdateUserName() * TLUpdateUserName {
    return &TLUpdateUserName{ Data2: &Update_Data{} }
}

func (m* TLUpdateUserName) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateUserName))

    x.Int(m.GetUserId())
    x.String(m.GetFirstName())
    x.String(m.GetLastName())
    x.String(m.GetUsername())

    return x.buf
}

func (m* TLUpdateUserName) Decode(dbuf *DecodeBuf) error {
    m.SetUserId(dbuf.Int())
    m.SetFirstName(dbuf.String())
    m.SetLastName(dbuf.String())
    m.SetUsername(dbuf.String())

    return dbuf.err
}
// updateUserPhoto#95313b0c user_id:int date:int photo:UserProfilePhoto previous:Bool = Update;
func (m *TLUpdateUserPhoto) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateUserPhoto,
        Data2: m.Data2,
    }
}


func (m *TLUpdateUserPhoto) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateUserPhoto) GetUserId() int32 { return m.Data2.UserId }

func (m *TLUpdateUserPhoto) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdateUserPhoto) GetDate() int32 { return m.Data2.Date }

func (m *TLUpdateUserPhoto) SetPhoto(v *UserProfilePhoto) { m.Data2.Photo = v }
func (m *TLUpdateUserPhoto) GetPhoto() *UserProfilePhoto { return m.Data2.Photo }

func (m *TLUpdateUserPhoto) SetPrevious(v *Bool) { m.Data2.Previous = v }
func (m *TLUpdateUserPhoto) GetPrevious() *Bool { return m.Data2.Previous }


func NewTLUpdateUserPhoto() * TLUpdateUserPhoto {
    return &TLUpdateUserPhoto{ Data2: &Update_Data{} }
}

func (m* TLUpdateUserPhoto) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateUserPhoto))

    x.Int(m.GetUserId())
    x.Int(m.GetDate())
    x.Bytes(m.GetPhoto().Encode())
    x.Bytes(m.GetPrevious().Encode())

    return x.buf
}

func (m* TLUpdateUserPhoto) Decode(dbuf *DecodeBuf) error {
    m.SetUserId(dbuf.Int())
    m.SetDate(dbuf.Int())
    m3 := &UserProfilePhoto{}
    m3.Decode(dbuf)
    m.SetPhoto(m3)
    m4 := &Bool{}
    m4.Decode(dbuf)
    m.SetPrevious(m4)

    return dbuf.err
}
// updateContactRegistered#2575bbb9 user_id:int date:int = Update;
func (m *TLUpdateContactRegistered) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateContactRegistered,
        Data2: m.Data2,
    }
}


func (m *TLUpdateContactRegistered) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateContactRegistered) GetUserId() int32 { return m.Data2.UserId }

func (m *TLUpdateContactRegistered) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdateContactRegistered) GetDate() int32 { return m.Data2.Date }


func NewTLUpdateContactRegistered() * TLUpdateContactRegistered {
    return &TLUpdateContactRegistered{ Data2: &Update_Data{} }
}

func (m* TLUpdateContactRegistered) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateContactRegistered))

    x.Int(m.GetUserId())
    x.Int(m.GetDate())

    return x.buf
}

func (m* TLUpdateContactRegistered) Decode(dbuf *DecodeBuf) error {
    m.SetUserId(dbuf.Int())
    m.SetDate(dbuf.Int())

    return dbuf.err
}
// updateContactLink#9d2e67c5 user_id:int my_link:ContactLink foreign_link:ContactLink = Update;
func (m *TLUpdateContactLink) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateContactLink,
        Data2: m.Data2,
    }
}


func (m *TLUpdateContactLink) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateContactLink) GetUserId() int32 { return m.Data2.UserId }

func (m *TLUpdateContactLink) SetMyLink(v *ContactLink) { m.Data2.MyLink = v }
func (m *TLUpdateContactLink) GetMyLink() *ContactLink { return m.Data2.MyLink }

func (m *TLUpdateContactLink) SetForeignLink(v *ContactLink) { m.Data2.ForeignLink = v }
func (m *TLUpdateContactLink) GetForeignLink() *ContactLink { return m.Data2.ForeignLink }


func NewTLUpdateContactLink() * TLUpdateContactLink {
    return &TLUpdateContactLink{ Data2: &Update_Data{} }
}

func (m* TLUpdateContactLink) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateContactLink))

    x.Int(m.GetUserId())
    x.Bytes(m.GetMyLink().Encode())
    x.Bytes(m.GetForeignLink().Encode())

    return x.buf
}

func (m* TLUpdateContactLink) Decode(dbuf *DecodeBuf) error {
    m.SetUserId(dbuf.Int())
    m2 := &ContactLink{}
    m2.Decode(dbuf)
    m.SetMyLink(m2)
    m3 := &ContactLink{}
    m3.Decode(dbuf)
    m.SetForeignLink(m3)

    return dbuf.err
}
// updateNewEncryptedMessage#12bcbd9a message:EncryptedMessage qts:int = Update;
func (m *TLUpdateNewEncryptedMessage) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateNewEncryptedMessage,
        Data2: m.Data2,
    }
}


func (m *TLUpdateNewEncryptedMessage) SetMessage(v *EncryptedMessage) { m.Data2.Message_20 = v }
func (m *TLUpdateNewEncryptedMessage) GetMessage() *EncryptedMessage { return m.Data2.Message_20 }

func (m *TLUpdateNewEncryptedMessage) SetQts(v int32) { m.Data2.Qts = v }
func (m *TLUpdateNewEncryptedMessage) GetQts() int32 { return m.Data2.Qts }


func NewTLUpdateNewEncryptedMessage() * TLUpdateNewEncryptedMessage {
    return &TLUpdateNewEncryptedMessage{ Data2: &Update_Data{} }
}

func (m* TLUpdateNewEncryptedMessage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateNewEncryptedMessage))

    x.Bytes(m.GetMessage().Encode())
    x.Int(m.GetQts())

    return x.buf
}

func (m* TLUpdateNewEncryptedMessage) Decode(dbuf *DecodeBuf) error {
    m1 := &EncryptedMessage{}
    m1.Decode(dbuf)
    m.SetMessage(m1)
    m.SetQts(dbuf.Int())

    return dbuf.err
}
// updateEncryptedChatTyping#1710f156 chat_id:int = Update;
func (m *TLUpdateEncryptedChatTyping) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateEncryptedChatTyping,
        Data2: m.Data2,
    }
}


func (m *TLUpdateEncryptedChatTyping) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLUpdateEncryptedChatTyping) GetChatId() int32 { return m.Data2.ChatId }


func NewTLUpdateEncryptedChatTyping() * TLUpdateEncryptedChatTyping {
    return &TLUpdateEncryptedChatTyping{ Data2: &Update_Data{} }
}

func (m* TLUpdateEncryptedChatTyping) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateEncryptedChatTyping))

    x.Int(m.GetChatId())

    return x.buf
}

func (m* TLUpdateEncryptedChatTyping) Decode(dbuf *DecodeBuf) error {
    m.SetChatId(dbuf.Int())

    return dbuf.err
}
// updateEncryption#b4a2e88d chat:EncryptedChat date:int = Update;
func (m *TLUpdateEncryption) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateEncryption,
        Data2: m.Data2,
    }
}


func (m *TLUpdateEncryption) SetChat(v *EncryptedChat) { m.Data2.Chat = v }
func (m *TLUpdateEncryption) GetChat() *EncryptedChat { return m.Data2.Chat }

func (m *TLUpdateEncryption) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdateEncryption) GetDate() int32 { return m.Data2.Date }


func NewTLUpdateEncryption() * TLUpdateEncryption {
    return &TLUpdateEncryption{ Data2: &Update_Data{} }
}

func (m* TLUpdateEncryption) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateEncryption))

    x.Bytes(m.GetChat().Encode())
    x.Int(m.GetDate())

    return x.buf
}

func (m* TLUpdateEncryption) Decode(dbuf *DecodeBuf) error {
    m1 := &EncryptedChat{}
    m1.Decode(dbuf)
    m.SetChat(m1)
    m.SetDate(dbuf.Int())

    return dbuf.err
}
// updateEncryptedMessagesRead#38fe25b7 chat_id:int max_date:int date:int = Update;
func (m *TLUpdateEncryptedMessagesRead) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateEncryptedMessagesRead,
        Data2: m.Data2,
    }
}


func (m *TLUpdateEncryptedMessagesRead) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLUpdateEncryptedMessagesRead) GetChatId() int32 { return m.Data2.ChatId }

func (m *TLUpdateEncryptedMessagesRead) SetMaxDate(v int32) { m.Data2.MaxDate = v }
func (m *TLUpdateEncryptedMessagesRead) GetMaxDate() int32 { return m.Data2.MaxDate }

func (m *TLUpdateEncryptedMessagesRead) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdateEncryptedMessagesRead) GetDate() int32 { return m.Data2.Date }


func NewTLUpdateEncryptedMessagesRead() * TLUpdateEncryptedMessagesRead {
    return &TLUpdateEncryptedMessagesRead{ Data2: &Update_Data{} }
}

func (m* TLUpdateEncryptedMessagesRead) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateEncryptedMessagesRead))

    x.Int(m.GetChatId())
    x.Int(m.GetMaxDate())
    x.Int(m.GetDate())

    return x.buf
}

func (m* TLUpdateEncryptedMessagesRead) Decode(dbuf *DecodeBuf) error {
    m.SetChatId(dbuf.Int())
    m.SetMaxDate(dbuf.Int())
    m.SetDate(dbuf.Int())

    return dbuf.err
}
// updateChatParticipantAdd#ea4b0e5c chat_id:int user_id:int inviter_id:int date:int version:int = Update;
func (m *TLUpdateChatParticipantAdd) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateChatParticipantAdd,
        Data2: m.Data2,
    }
}


func (m *TLUpdateChatParticipantAdd) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLUpdateChatParticipantAdd) GetChatId() int32 { return m.Data2.ChatId }

func (m *TLUpdateChatParticipantAdd) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateChatParticipantAdd) GetUserId() int32 { return m.Data2.UserId }

func (m *TLUpdateChatParticipantAdd) SetInviterId(v int32) { m.Data2.InviterId = v }
func (m *TLUpdateChatParticipantAdd) GetInviterId() int32 { return m.Data2.InviterId }

func (m *TLUpdateChatParticipantAdd) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdateChatParticipantAdd) GetDate() int32 { return m.Data2.Date }

func (m *TLUpdateChatParticipantAdd) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLUpdateChatParticipantAdd) GetVersion() int32 { return m.Data2.Version }


func NewTLUpdateChatParticipantAdd() * TLUpdateChatParticipantAdd {
    return &TLUpdateChatParticipantAdd{ Data2: &Update_Data{} }
}

func (m* TLUpdateChatParticipantAdd) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateChatParticipantAdd))

    x.Int(m.GetChatId())
    x.Int(m.GetUserId())
    x.Int(m.GetInviterId())
    x.Int(m.GetDate())
    x.Int(m.GetVersion())

    return x.buf
}

func (m* TLUpdateChatParticipantAdd) Decode(dbuf *DecodeBuf) error {
    m.SetChatId(dbuf.Int())
    m.SetUserId(dbuf.Int())
    m.SetInviterId(dbuf.Int())
    m.SetDate(dbuf.Int())
    m.SetVersion(dbuf.Int())

    return dbuf.err
}
// updateChatParticipantDelete#6e5f8c22 chat_id:int user_id:int version:int = Update;
func (m *TLUpdateChatParticipantDelete) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateChatParticipantDelete,
        Data2: m.Data2,
    }
}


func (m *TLUpdateChatParticipantDelete) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLUpdateChatParticipantDelete) GetChatId() int32 { return m.Data2.ChatId }

func (m *TLUpdateChatParticipantDelete) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateChatParticipantDelete) GetUserId() int32 { return m.Data2.UserId }

func (m *TLUpdateChatParticipantDelete) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLUpdateChatParticipantDelete) GetVersion() int32 { return m.Data2.Version }


func NewTLUpdateChatParticipantDelete() * TLUpdateChatParticipantDelete {
    return &TLUpdateChatParticipantDelete{ Data2: &Update_Data{} }
}

func (m* TLUpdateChatParticipantDelete) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateChatParticipantDelete))

    x.Int(m.GetChatId())
    x.Int(m.GetUserId())
    x.Int(m.GetVersion())

    return x.buf
}

func (m* TLUpdateChatParticipantDelete) Decode(dbuf *DecodeBuf) error {
    m.SetChatId(dbuf.Int())
    m.SetUserId(dbuf.Int())
    m.SetVersion(dbuf.Int())

    return dbuf.err
}
// updateDcOptions#8e5e9873 dc_options:Vector<DcOption> = Update;
func (m *TLUpdateDcOptions) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateDcOptions,
        Data2: m.Data2,
    }
}


func (m *TLUpdateDcOptions) SetDcOptions(v []*DcOption) { m.Data2.DcOptions = v }
func (m *TLUpdateDcOptions) GetDcOptions() []*DcOption { return m.Data2.DcOptions }


func NewTLUpdateDcOptions() * TLUpdateDcOptions {
    return &TLUpdateDcOptions{ Data2: &Update_Data{} }
}

func (m* TLUpdateDcOptions) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateDcOptions))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetDcOptions())))
for _, v := range m.GetDcOptions() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLUpdateDcOptions) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*DcOption, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &DcOption{}
	v1[i].Decode(dbuf)
}
m.SetDcOptions(v1)


    return dbuf.err
}
// updateUserBlocked#80ece81a user_id:int blocked:Bool = Update;
func (m *TLUpdateUserBlocked) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateUserBlocked,
        Data2: m.Data2,
    }
}


func (m *TLUpdateUserBlocked) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateUserBlocked) GetUserId() int32 { return m.Data2.UserId }

func (m *TLUpdateUserBlocked) SetBlocked(v *Bool) { m.Data2.Blocked = v }
func (m *TLUpdateUserBlocked) GetBlocked() *Bool { return m.Data2.Blocked }


func NewTLUpdateUserBlocked() * TLUpdateUserBlocked {
    return &TLUpdateUserBlocked{ Data2: &Update_Data{} }
}

func (m* TLUpdateUserBlocked) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateUserBlocked))

    x.Int(m.GetUserId())
    x.Bytes(m.GetBlocked().Encode())

    return x.buf
}

func (m* TLUpdateUserBlocked) Decode(dbuf *DecodeBuf) error {
    m.SetUserId(dbuf.Int())
    m2 := &Bool{}
    m2.Decode(dbuf)
    m.SetBlocked(m2)

    return dbuf.err
}
// updateNotifySettings#bec268ef peer:NotifyPeer notify_settings:PeerNotifySettings = Update;
func (m *TLUpdateNotifySettings) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateNotifySettings,
        Data2: m.Data2,
    }
}


func (m *TLUpdateNotifySettings) SetPeer(v *NotifyPeer) { m.Data2.Peer_28 = v }
func (m *TLUpdateNotifySettings) GetPeer() *NotifyPeer { return m.Data2.Peer_28 }

func (m *TLUpdateNotifySettings) SetNotifySettings(v *PeerNotifySettings) { m.Data2.NotifySettings = v }
func (m *TLUpdateNotifySettings) GetNotifySettings() *PeerNotifySettings { return m.Data2.NotifySettings }


func NewTLUpdateNotifySettings() * TLUpdateNotifySettings {
    return &TLUpdateNotifySettings{ Data2: &Update_Data{} }
}

func (m* TLUpdateNotifySettings) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateNotifySettings))

    x.Bytes(m.GetPeer().Encode())
    x.Bytes(m.GetNotifySettings().Encode())

    return x.buf
}

func (m* TLUpdateNotifySettings) Decode(dbuf *DecodeBuf) error {
    m1 := &NotifyPeer{}
    m1.Decode(dbuf)
    m.SetPeer(m1)
    m2 := &PeerNotifySettings{}
    m2.Decode(dbuf)
    m.SetNotifySettings(m2)

    return dbuf.err
}
// updateServiceNotification#ebe46819 flags:# popup:flags.0?true inbox_date:flags.1?int type:string message:string media:MessageMedia entities:Vector<MessageEntity> = Update;
func (m *TLUpdateServiceNotification) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateServiceNotification,
        Data2: m.Data2,
    }
}


func (m *TLUpdateServiceNotification) SetPopup(v bool) { m.Data2.Popup = v }
func (m *TLUpdateServiceNotification) GetPopup() bool { return m.Data2.Popup }

func (m *TLUpdateServiceNotification) SetInboxDate(v int32) { m.Data2.InboxDate = v }
func (m *TLUpdateServiceNotification) GetInboxDate() int32 { return m.Data2.InboxDate }

func (m *TLUpdateServiceNotification) SetType(v string) { m.Data2.Type_32 = v }
func (m *TLUpdateServiceNotification) GetType() string { return m.Data2.Type_32 }

func (m *TLUpdateServiceNotification) SetMessage(v string) { m.Data2.Message_33 = v }
func (m *TLUpdateServiceNotification) GetMessage() string { return m.Data2.Message_33 }

func (m *TLUpdateServiceNotification) SetMedia(v *MessageMedia) { m.Data2.Media = v }
func (m *TLUpdateServiceNotification) GetMedia() *MessageMedia { return m.Data2.Media }

func (m *TLUpdateServiceNotification) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLUpdateServiceNotification) GetEntities() []*MessageEntity { return m.Data2.Entities }


func NewTLUpdateServiceNotification() * TLUpdateServiceNotification {
    return &TLUpdateServiceNotification{ Data2: &Update_Data{} }
}

func (m* TLUpdateServiceNotification) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateServiceNotification))

    // flags
    var flags uint32 = 0
    if m.GetPopup() == true { flags |= 1 << 0 }
    if m.GetInboxDate() != 0 { flags |= 1 << 1 }
	x.UInt(flags)

    
    if (flags & (1 << 1)) != 0 { x.Int(m.GetInboxDate()) }
    x.String(m.GetType())
    x.String(m.GetMessage())
    x.Bytes(m.GetMedia().Encode())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetEntities())))
for _, v := range m.GetEntities() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLUpdateServiceNotification) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetPopup(true) }
    if (flags & (1 << 1)) != 0 { m.SetInboxDate(dbuf.Int()) }
    m.SetType(dbuf.String())
    m.SetMessage(dbuf.String())
    m6 := &MessageMedia{}
    m6.Decode(dbuf)
    m.SetMedia(m6)
    c7 := dbuf.Int()
if c7 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 7, c7)
	return dbuf.err
}
l7 := dbuf.Int()
v7 := make([]*MessageEntity, l7)
for i := int32(0); i < l7; i++ {
	v7[i] = &MessageEntity{}
	v7[i].Decode(dbuf)
}
m.SetEntities(v7)


    return dbuf.err
}
// updatePrivacy#ee3b272a key:PrivacyKey rules:Vector<PrivacyRule> = Update;
func (m *TLUpdatePrivacy) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updatePrivacy,
        Data2: m.Data2,
    }
}


func (m *TLUpdatePrivacy) SetKey(v *PrivacyKey) { m.Data2.Key = v }
func (m *TLUpdatePrivacy) GetKey() *PrivacyKey { return m.Data2.Key }

func (m *TLUpdatePrivacy) SetRules(v []*PrivacyRule) { m.Data2.Rules = v }
func (m *TLUpdatePrivacy) GetRules() []*PrivacyRule { return m.Data2.Rules }


func NewTLUpdatePrivacy() * TLUpdatePrivacy {
    return &TLUpdatePrivacy{ Data2: &Update_Data{} }
}

func (m* TLUpdatePrivacy) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updatePrivacy))

    x.Bytes(m.GetKey().Encode())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetRules())))
for _, v := range m.GetRules() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLUpdatePrivacy) Decode(dbuf *DecodeBuf) error {
    m1 := &PrivacyKey{}
    m1.Decode(dbuf)
    m.SetKey(m1)
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*PrivacyRule, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &PrivacyRule{}
	v2[i].Decode(dbuf)
}
m.SetRules(v2)


    return dbuf.err
}
// updateUserPhone#12b9417b user_id:int phone:string = Update;
func (m *TLUpdateUserPhone) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateUserPhone,
        Data2: m.Data2,
    }
}


func (m *TLUpdateUserPhone) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateUserPhone) GetUserId() int32 { return m.Data2.UserId }

func (m *TLUpdateUserPhone) SetPhone(v string) { m.Data2.Phone = v }
func (m *TLUpdateUserPhone) GetPhone() string { return m.Data2.Phone }


func NewTLUpdateUserPhone() * TLUpdateUserPhone {
    return &TLUpdateUserPhone{ Data2: &Update_Data{} }
}

func (m* TLUpdateUserPhone) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateUserPhone))

    x.Int(m.GetUserId())
    x.String(m.GetPhone())

    return x.buf
}

func (m* TLUpdateUserPhone) Decode(dbuf *DecodeBuf) error {
    m.SetUserId(dbuf.Int())
    m.SetPhone(dbuf.String())

    return dbuf.err
}
// updateReadHistoryInbox#9961fd5c peer:Peer max_id:int pts:int pts_count:int = Update;
func (m *TLUpdateReadHistoryInbox) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateReadHistoryInbox,
        Data2: m.Data2,
    }
}


func (m *TLUpdateReadHistoryInbox) SetPeer(v *Peer) { m.Data2.Peer_39 = v }
func (m *TLUpdateReadHistoryInbox) GetPeer() *Peer { return m.Data2.Peer_39 }

func (m *TLUpdateReadHistoryInbox) SetMaxId(v int32) { m.Data2.MaxId = v }
func (m *TLUpdateReadHistoryInbox) GetMaxId() int32 { return m.Data2.MaxId }

func (m *TLUpdateReadHistoryInbox) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateReadHistoryInbox) GetPts() int32 { return m.Data2.Pts }

func (m *TLUpdateReadHistoryInbox) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateReadHistoryInbox) GetPtsCount() int32 { return m.Data2.PtsCount }


func NewTLUpdateReadHistoryInbox() * TLUpdateReadHistoryInbox {
    return &TLUpdateReadHistoryInbox{ Data2: &Update_Data{} }
}

func (m* TLUpdateReadHistoryInbox) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateReadHistoryInbox))

    x.Bytes(m.GetPeer().Encode())
    x.Int(m.GetMaxId())
    x.Int(m.GetPts())
    x.Int(m.GetPtsCount())

    return x.buf
}

func (m* TLUpdateReadHistoryInbox) Decode(dbuf *DecodeBuf) error {
    m1 := &Peer{}
    m1.Decode(dbuf)
    m.SetPeer(m1)
    m.SetMaxId(dbuf.Int())
    m.SetPts(dbuf.Int())
    m.SetPtsCount(dbuf.Int())

    return dbuf.err
}
// updateReadHistoryOutbox#2f2f21bf peer:Peer max_id:int pts:int pts_count:int = Update;
func (m *TLUpdateReadHistoryOutbox) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateReadHistoryOutbox,
        Data2: m.Data2,
    }
}


func (m *TLUpdateReadHistoryOutbox) SetPeer(v *Peer) { m.Data2.Peer_39 = v }
func (m *TLUpdateReadHistoryOutbox) GetPeer() *Peer { return m.Data2.Peer_39 }

func (m *TLUpdateReadHistoryOutbox) SetMaxId(v int32) { m.Data2.MaxId = v }
func (m *TLUpdateReadHistoryOutbox) GetMaxId() int32 { return m.Data2.MaxId }

func (m *TLUpdateReadHistoryOutbox) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateReadHistoryOutbox) GetPts() int32 { return m.Data2.Pts }

func (m *TLUpdateReadHistoryOutbox) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateReadHistoryOutbox) GetPtsCount() int32 { return m.Data2.PtsCount }


func NewTLUpdateReadHistoryOutbox() * TLUpdateReadHistoryOutbox {
    return &TLUpdateReadHistoryOutbox{ Data2: &Update_Data{} }
}

func (m* TLUpdateReadHistoryOutbox) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateReadHistoryOutbox))

    x.Bytes(m.GetPeer().Encode())
    x.Int(m.GetMaxId())
    x.Int(m.GetPts())
    x.Int(m.GetPtsCount())

    return x.buf
}

func (m* TLUpdateReadHistoryOutbox) Decode(dbuf *DecodeBuf) error {
    m1 := &Peer{}
    m1.Decode(dbuf)
    m.SetPeer(m1)
    m.SetMaxId(dbuf.Int())
    m.SetPts(dbuf.Int())
    m.SetPtsCount(dbuf.Int())

    return dbuf.err
}
// updateWebPage#7f891213 webpage:WebPage pts:int pts_count:int = Update;
func (m *TLUpdateWebPage) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateWebPage,
        Data2: m.Data2,
    }
}


func (m *TLUpdateWebPage) SetWebpage(v *WebPage) { m.Data2.Webpage = v }
func (m *TLUpdateWebPage) GetWebpage() *WebPage { return m.Data2.Webpage }

func (m *TLUpdateWebPage) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateWebPage) GetPts() int32 { return m.Data2.Pts }

func (m *TLUpdateWebPage) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateWebPage) GetPtsCount() int32 { return m.Data2.PtsCount }


func NewTLUpdateWebPage() * TLUpdateWebPage {
    return &TLUpdateWebPage{ Data2: &Update_Data{} }
}

func (m* TLUpdateWebPage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateWebPage))

    x.Bytes(m.GetWebpage().Encode())
    x.Int(m.GetPts())
    x.Int(m.GetPtsCount())

    return x.buf
}

func (m* TLUpdateWebPage) Decode(dbuf *DecodeBuf) error {
    m1 := &WebPage{}
    m1.Decode(dbuf)
    m.SetWebpage(m1)
    m.SetPts(dbuf.Int())
    m.SetPtsCount(dbuf.Int())

    return dbuf.err
}
// updateReadMessagesContents#68c13933 messages:Vector<int> pts:int pts_count:int = Update;
func (m *TLUpdateReadMessagesContents) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateReadMessagesContents,
        Data2: m.Data2,
    }
}


func (m *TLUpdateReadMessagesContents) SetMessages(v []int32) { m.Data2.Messages = v }
func (m *TLUpdateReadMessagesContents) GetMessages() []int32 { return m.Data2.Messages }

func (m *TLUpdateReadMessagesContents) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateReadMessagesContents) GetPts() int32 { return m.Data2.Pts }

func (m *TLUpdateReadMessagesContents) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateReadMessagesContents) GetPtsCount() int32 { return m.Data2.PtsCount }


func NewTLUpdateReadMessagesContents() * TLUpdateReadMessagesContents {
    return &TLUpdateReadMessagesContents{ Data2: &Update_Data{} }
}

func (m* TLUpdateReadMessagesContents) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateReadMessagesContents))

    x.VectorInt(m.GetMessages())

    x.Int(m.GetPts())
    x.Int(m.GetPtsCount())

    return x.buf
}

func (m* TLUpdateReadMessagesContents) Decode(dbuf *DecodeBuf) error {
    m.SetMessages(dbuf.VectorInt())
    m.SetPts(dbuf.Int())
    m.SetPtsCount(dbuf.Int())

    return dbuf.err
}
// updateChannelTooLong#eb0467fb flags:# channel_id:int pts:flags.0?int = Update;
func (m *TLUpdateChannelTooLong) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateChannelTooLong,
        Data2: m.Data2,
    }
}


func (m *TLUpdateChannelTooLong) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLUpdateChannelTooLong) GetChannelId() int32 { return m.Data2.ChannelId }

func (m *TLUpdateChannelTooLong) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateChannelTooLong) GetPts() int32 { return m.Data2.Pts }


func NewTLUpdateChannelTooLong() * TLUpdateChannelTooLong {
    return &TLUpdateChannelTooLong{ Data2: &Update_Data{} }
}

func (m* TLUpdateChannelTooLong) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateChannelTooLong))

    // flags
    var flags uint32 = 0
    if m.GetPts() != 0 { flags |= 1 << 0 }
	x.UInt(flags)

    x.Int(m.GetChannelId())
    if (flags & (1 << 0)) != 0 { x.Int(m.GetPts()) }

    return x.buf
}

func (m* TLUpdateChannelTooLong) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetChannelId(dbuf.Int())
    if (flags & (1 << 0)) != 0 { m.SetPts(dbuf.Int()) }

    return dbuf.err
}
// updateChannel#b6d45656 channel_id:int = Update;
func (m *TLUpdateChannel) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateChannel,
        Data2: m.Data2,
    }
}


func (m *TLUpdateChannel) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLUpdateChannel) GetChannelId() int32 { return m.Data2.ChannelId }


func NewTLUpdateChannel() * TLUpdateChannel {
    return &TLUpdateChannel{ Data2: &Update_Data{} }
}

func (m* TLUpdateChannel) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateChannel))

    x.Int(m.GetChannelId())

    return x.buf
}

func (m* TLUpdateChannel) Decode(dbuf *DecodeBuf) error {
    m.SetChannelId(dbuf.Int())

    return dbuf.err
}
// updateNewChannelMessage#62ba04d9 message:Message pts:int pts_count:int = Update;
func (m *TLUpdateNewChannelMessage) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateNewChannelMessage,
        Data2: m.Data2,
    }
}


func (m *TLUpdateNewChannelMessage) SetMessage(v *Message) { m.Data2.Message_1 = v }
func (m *TLUpdateNewChannelMessage) GetMessage() *Message { return m.Data2.Message_1 }

func (m *TLUpdateNewChannelMessage) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateNewChannelMessage) GetPts() int32 { return m.Data2.Pts }

func (m *TLUpdateNewChannelMessage) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateNewChannelMessage) GetPtsCount() int32 { return m.Data2.PtsCount }


func NewTLUpdateNewChannelMessage() * TLUpdateNewChannelMessage {
    return &TLUpdateNewChannelMessage{ Data2: &Update_Data{} }
}

func (m* TLUpdateNewChannelMessage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateNewChannelMessage))

    x.Bytes(m.GetMessage().Encode())
    x.Int(m.GetPts())
    x.Int(m.GetPtsCount())

    return x.buf
}

func (m* TLUpdateNewChannelMessage) Decode(dbuf *DecodeBuf) error {
    m1 := &Message{}
    m1.Decode(dbuf)
    m.SetMessage(m1)
    m.SetPts(dbuf.Int())
    m.SetPtsCount(dbuf.Int())

    return dbuf.err
}
// updateReadChannelInbox#4214f37f channel_id:int max_id:int = Update;
func (m *TLUpdateReadChannelInbox) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateReadChannelInbox,
        Data2: m.Data2,
    }
}


func (m *TLUpdateReadChannelInbox) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLUpdateReadChannelInbox) GetChannelId() int32 { return m.Data2.ChannelId }

func (m *TLUpdateReadChannelInbox) SetMaxId(v int32) { m.Data2.MaxId = v }
func (m *TLUpdateReadChannelInbox) GetMaxId() int32 { return m.Data2.MaxId }


func NewTLUpdateReadChannelInbox() * TLUpdateReadChannelInbox {
    return &TLUpdateReadChannelInbox{ Data2: &Update_Data{} }
}

func (m* TLUpdateReadChannelInbox) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateReadChannelInbox))

    x.Int(m.GetChannelId())
    x.Int(m.GetMaxId())

    return x.buf
}

func (m* TLUpdateReadChannelInbox) Decode(dbuf *DecodeBuf) error {
    m.SetChannelId(dbuf.Int())
    m.SetMaxId(dbuf.Int())

    return dbuf.err
}
// updateDeleteChannelMessages#c37521c9 channel_id:int messages:Vector<int> pts:int pts_count:int = Update;
func (m *TLUpdateDeleteChannelMessages) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateDeleteChannelMessages,
        Data2: m.Data2,
    }
}


func (m *TLUpdateDeleteChannelMessages) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLUpdateDeleteChannelMessages) GetChannelId() int32 { return m.Data2.ChannelId }

func (m *TLUpdateDeleteChannelMessages) SetMessages(v []int32) { m.Data2.Messages = v }
func (m *TLUpdateDeleteChannelMessages) GetMessages() []int32 { return m.Data2.Messages }

func (m *TLUpdateDeleteChannelMessages) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateDeleteChannelMessages) GetPts() int32 { return m.Data2.Pts }

func (m *TLUpdateDeleteChannelMessages) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateDeleteChannelMessages) GetPtsCount() int32 { return m.Data2.PtsCount }


func NewTLUpdateDeleteChannelMessages() * TLUpdateDeleteChannelMessages {
    return &TLUpdateDeleteChannelMessages{ Data2: &Update_Data{} }
}

func (m* TLUpdateDeleteChannelMessages) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateDeleteChannelMessages))

    x.Int(m.GetChannelId())
    x.VectorInt(m.GetMessages())

    x.Int(m.GetPts())
    x.Int(m.GetPtsCount())

    return x.buf
}

func (m* TLUpdateDeleteChannelMessages) Decode(dbuf *DecodeBuf) error {
    m.SetChannelId(dbuf.Int())
    m.SetMessages(dbuf.VectorInt())
    m.SetPts(dbuf.Int())
    m.SetPtsCount(dbuf.Int())

    return dbuf.err
}
// updateChannelMessageViews#98a12b4b channel_id:int id:int views:int = Update;
func (m *TLUpdateChannelMessageViews) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateChannelMessageViews,
        Data2: m.Data2,
    }
}


func (m *TLUpdateChannelMessageViews) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLUpdateChannelMessageViews) GetChannelId() int32 { return m.Data2.ChannelId }

func (m *TLUpdateChannelMessageViews) SetId(v int32) { m.Data2.Id_4 = v }
func (m *TLUpdateChannelMessageViews) GetId() int32 { return m.Data2.Id_4 }

func (m *TLUpdateChannelMessageViews) SetViews(v int32) { m.Data2.Views = v }
func (m *TLUpdateChannelMessageViews) GetViews() int32 { return m.Data2.Views }


func NewTLUpdateChannelMessageViews() * TLUpdateChannelMessageViews {
    return &TLUpdateChannelMessageViews{ Data2: &Update_Data{} }
}

func (m* TLUpdateChannelMessageViews) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateChannelMessageViews))

    x.Int(m.GetChannelId())
    x.Int(m.GetId())
    x.Int(m.GetViews())

    return x.buf
}

func (m* TLUpdateChannelMessageViews) Decode(dbuf *DecodeBuf) error {
    m.SetChannelId(dbuf.Int())
    m.SetId(dbuf.Int())
    m.SetViews(dbuf.Int())

    return dbuf.err
}
// updateChatAdmins#6e947941 chat_id:int enabled:Bool version:int = Update;
func (m *TLUpdateChatAdmins) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateChatAdmins,
        Data2: m.Data2,
    }
}


func (m *TLUpdateChatAdmins) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLUpdateChatAdmins) GetChatId() int32 { return m.Data2.ChatId }

func (m *TLUpdateChatAdmins) SetEnabled(v *Bool) { m.Data2.Enabled = v }
func (m *TLUpdateChatAdmins) GetEnabled() *Bool { return m.Data2.Enabled }

func (m *TLUpdateChatAdmins) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLUpdateChatAdmins) GetVersion() int32 { return m.Data2.Version }


func NewTLUpdateChatAdmins() * TLUpdateChatAdmins {
    return &TLUpdateChatAdmins{ Data2: &Update_Data{} }
}

func (m* TLUpdateChatAdmins) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateChatAdmins))

    x.Int(m.GetChatId())
    x.Bytes(m.GetEnabled().Encode())
    x.Int(m.GetVersion())

    return x.buf
}

func (m* TLUpdateChatAdmins) Decode(dbuf *DecodeBuf) error {
    m.SetChatId(dbuf.Int())
    m2 := &Bool{}
    m2.Decode(dbuf)
    m.SetEnabled(m2)
    m.SetVersion(dbuf.Int())

    return dbuf.err
}
// updateChatParticipantAdmin#b6901959 chat_id:int user_id:int is_admin:Bool version:int = Update;
func (m *TLUpdateChatParticipantAdmin) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateChatParticipantAdmin,
        Data2: m.Data2,
    }
}


func (m *TLUpdateChatParticipantAdmin) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLUpdateChatParticipantAdmin) GetChatId() int32 { return m.Data2.ChatId }

func (m *TLUpdateChatParticipantAdmin) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateChatParticipantAdmin) GetUserId() int32 { return m.Data2.UserId }

func (m *TLUpdateChatParticipantAdmin) SetIsAdmin(v *Bool) { m.Data2.IsAdmin = v }
func (m *TLUpdateChatParticipantAdmin) GetIsAdmin() *Bool { return m.Data2.IsAdmin }

func (m *TLUpdateChatParticipantAdmin) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLUpdateChatParticipantAdmin) GetVersion() int32 { return m.Data2.Version }


func NewTLUpdateChatParticipantAdmin() * TLUpdateChatParticipantAdmin {
    return &TLUpdateChatParticipantAdmin{ Data2: &Update_Data{} }
}

func (m* TLUpdateChatParticipantAdmin) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateChatParticipantAdmin))

    x.Int(m.GetChatId())
    x.Int(m.GetUserId())
    x.Bytes(m.GetIsAdmin().Encode())
    x.Int(m.GetVersion())

    return x.buf
}

func (m* TLUpdateChatParticipantAdmin) Decode(dbuf *DecodeBuf) error {
    m.SetChatId(dbuf.Int())
    m.SetUserId(dbuf.Int())
    m3 := &Bool{}
    m3.Decode(dbuf)
    m.SetIsAdmin(m3)
    m.SetVersion(dbuf.Int())

    return dbuf.err
}
// updateNewStickerSet#688a30aa stickerset:messages.StickerSet = Update;
func (m *TLUpdateNewStickerSet) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateNewStickerSet,
        Data2: m.Data2,
    }
}


func (m *TLUpdateNewStickerSet) SetStickerset(v *Messages_StickerSet) { m.Data2.Stickerset = v }
func (m *TLUpdateNewStickerSet) GetStickerset() *Messages_StickerSet { return m.Data2.Stickerset }


func NewTLUpdateNewStickerSet() * TLUpdateNewStickerSet {
    return &TLUpdateNewStickerSet{ Data2: &Update_Data{} }
}

func (m* TLUpdateNewStickerSet) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateNewStickerSet))

    x.Bytes(m.GetStickerset().Encode())

    return x.buf
}

func (m* TLUpdateNewStickerSet) Decode(dbuf *DecodeBuf) error {
    m1 := &Messages_StickerSet{}
    m1.Decode(dbuf)
    m.SetStickerset(m1)

    return dbuf.err
}
// updateStickerSetsOrder#bb2d201 flags:# masks:flags.0?true order:Vector<long> = Update;
func (m *TLUpdateStickerSetsOrder) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateStickerSetsOrder,
        Data2: m.Data2,
    }
}


func (m *TLUpdateStickerSetsOrder) SetMasks(v bool) { m.Data2.Masks = v }
func (m *TLUpdateStickerSetsOrder) GetMasks() bool { return m.Data2.Masks }

func (m *TLUpdateStickerSetsOrder) SetOrder(v []int64) { m.Data2.Order_48 = v }
func (m *TLUpdateStickerSetsOrder) GetOrder() []int64 { return m.Data2.Order_48 }


func NewTLUpdateStickerSetsOrder() * TLUpdateStickerSetsOrder {
    return &TLUpdateStickerSetsOrder{ Data2: &Update_Data{} }
}

func (m* TLUpdateStickerSetsOrder) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateStickerSetsOrder))

    // flags
    var flags uint32 = 0
    if m.GetMasks() == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.VectorLong(m.GetOrder())


    return x.buf
}

func (m* TLUpdateStickerSetsOrder) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetMasks(true) }
    m.SetOrder(dbuf.VectorLong())

    return dbuf.err
}
// updateStickerSets#43ae3dec = Update;
func (m *TLUpdateStickerSets) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateStickerSets,
        Data2: m.Data2,
    }
}



func NewTLUpdateStickerSets() * TLUpdateStickerSets {
    return &TLUpdateStickerSets{ Data2: &Update_Data{} }
}

func (m* TLUpdateStickerSets) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateStickerSets))


    return x.buf
}

func (m* TLUpdateStickerSets) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// updateSavedGifs#9375341e = Update;
func (m *TLUpdateSavedGifs) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateSavedGifs,
        Data2: m.Data2,
    }
}



func NewTLUpdateSavedGifs() * TLUpdateSavedGifs {
    return &TLUpdateSavedGifs{ Data2: &Update_Data{} }
}

func (m* TLUpdateSavedGifs) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateSavedGifs))


    return x.buf
}

func (m* TLUpdateSavedGifs) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// updateBotInlineQuery#54826690 flags:# query_id:long user_id:int query:string geo:flags.0?GeoPoint offset:string = Update;
func (m *TLUpdateBotInlineQuery) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateBotInlineQuery,
        Data2: m.Data2,
    }
}


func (m *TLUpdateBotInlineQuery) SetQueryId(v int64) { m.Data2.QueryId = v }
func (m *TLUpdateBotInlineQuery) GetQueryId() int64 { return m.Data2.QueryId }

func (m *TLUpdateBotInlineQuery) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateBotInlineQuery) GetUserId() int32 { return m.Data2.UserId }

func (m *TLUpdateBotInlineQuery) SetQuery(v string) { m.Data2.Query = v }
func (m *TLUpdateBotInlineQuery) GetQuery() string { return m.Data2.Query }

func (m *TLUpdateBotInlineQuery) SetGeo(v *GeoPoint) { m.Data2.Geo = v }
func (m *TLUpdateBotInlineQuery) GetGeo() *GeoPoint { return m.Data2.Geo }

func (m *TLUpdateBotInlineQuery) SetOffset(v string) { m.Data2.Offset = v }
func (m *TLUpdateBotInlineQuery) GetOffset() string { return m.Data2.Offset }


func NewTLUpdateBotInlineQuery() * TLUpdateBotInlineQuery {
    return &TLUpdateBotInlineQuery{ Data2: &Update_Data{} }
}

func (m* TLUpdateBotInlineQuery) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateBotInlineQuery))

    // flags
    var flags uint32 = 0
    if m.GetGeo() != nil { flags |= 1 << 0 }
	x.UInt(flags)

    x.Long(m.GetQueryId())
    x.Int(m.GetUserId())
    x.String(m.GetQuery())
    if (flags & (1 << 0)) != 0 { x.Bytes(m.GetGeo().Encode()) }
    x.String(m.GetOffset())

    return x.buf
}

func (m* TLUpdateBotInlineQuery) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetQueryId(dbuf.Long())
    m.SetUserId(dbuf.Int())
    m.SetQuery(dbuf.String())
    if (flags & (1 << 0)) != 0 {
 m5 := &GeoPoint{}
    m5.Decode(dbuf)
    m.SetGeo(m5) 
}
    m.SetOffset(dbuf.String())

    return dbuf.err
}
// updateBotInlineSend#e48f964 flags:# user_id:int query:string geo:flags.0?GeoPoint id:string msg_id:flags.1?InputBotInlineMessageID = Update;
func (m *TLUpdateBotInlineSend) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateBotInlineSend,
        Data2: m.Data2,
    }
}


func (m *TLUpdateBotInlineSend) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateBotInlineSend) GetUserId() int32 { return m.Data2.UserId }

func (m *TLUpdateBotInlineSend) SetQuery(v string) { m.Data2.Query = v }
func (m *TLUpdateBotInlineSend) GetQuery() string { return m.Data2.Query }

func (m *TLUpdateBotInlineSend) SetGeo(v *GeoPoint) { m.Data2.Geo = v }
func (m *TLUpdateBotInlineSend) GetGeo() *GeoPoint { return m.Data2.Geo }

func (m *TLUpdateBotInlineSend) SetId(v string) { m.Data2.Id_53 = v }
func (m *TLUpdateBotInlineSend) GetId() string { return m.Data2.Id_53 }

func (m *TLUpdateBotInlineSend) SetMsgId(v *InputBotInlineMessageID) { m.Data2.MsgId_54 = v }
func (m *TLUpdateBotInlineSend) GetMsgId() *InputBotInlineMessageID { return m.Data2.MsgId_54 }


func NewTLUpdateBotInlineSend() * TLUpdateBotInlineSend {
    return &TLUpdateBotInlineSend{ Data2: &Update_Data{} }
}

func (m* TLUpdateBotInlineSend) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateBotInlineSend))

    // flags
    var flags uint32 = 0
    if m.GetGeo() != nil { flags |= 1 << 0 }
    if m.GetMsgId() != nil { flags |= 1 << 1 }
	x.UInt(flags)

    x.Int(m.GetUserId())
    x.String(m.GetQuery())
    if (flags & (1 << 0)) != 0 { x.Bytes(m.GetGeo().Encode()) }
    x.String(m.GetId())
    if (flags & (1 << 1)) != 0 { x.Bytes(m.GetMsgId().Encode()) }

    return x.buf
}

func (m* TLUpdateBotInlineSend) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetUserId(dbuf.Int())
    m.SetQuery(dbuf.String())
    if (flags & (1 << 0)) != 0 {
 m4 := &GeoPoint{}
    m4.Decode(dbuf)
    m.SetGeo(m4) 
}
    m.SetId(dbuf.String())
    if (flags & (1 << 1)) != 0 {
 m6 := &InputBotInlineMessageID{}
    m6.Decode(dbuf)
    m.SetMsgId(m6) 
}

    return dbuf.err
}
// updateEditChannelMessage#1b3f4df7 message:Message pts:int pts_count:int = Update;
func (m *TLUpdateEditChannelMessage) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateEditChannelMessage,
        Data2: m.Data2,
    }
}


func (m *TLUpdateEditChannelMessage) SetMessage(v *Message) { m.Data2.Message_1 = v }
func (m *TLUpdateEditChannelMessage) GetMessage() *Message { return m.Data2.Message_1 }

func (m *TLUpdateEditChannelMessage) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateEditChannelMessage) GetPts() int32 { return m.Data2.Pts }

func (m *TLUpdateEditChannelMessage) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateEditChannelMessage) GetPtsCount() int32 { return m.Data2.PtsCount }


func NewTLUpdateEditChannelMessage() * TLUpdateEditChannelMessage {
    return &TLUpdateEditChannelMessage{ Data2: &Update_Data{} }
}

func (m* TLUpdateEditChannelMessage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateEditChannelMessage))

    x.Bytes(m.GetMessage().Encode())
    x.Int(m.GetPts())
    x.Int(m.GetPtsCount())

    return x.buf
}

func (m* TLUpdateEditChannelMessage) Decode(dbuf *DecodeBuf) error {
    m1 := &Message{}
    m1.Decode(dbuf)
    m.SetMessage(m1)
    m.SetPts(dbuf.Int())
    m.SetPtsCount(dbuf.Int())

    return dbuf.err
}
// updateChannelPinnedMessage#98592475 channel_id:int id:int = Update;
func (m *TLUpdateChannelPinnedMessage) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateChannelPinnedMessage,
        Data2: m.Data2,
    }
}


func (m *TLUpdateChannelPinnedMessage) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLUpdateChannelPinnedMessage) GetChannelId() int32 { return m.Data2.ChannelId }

func (m *TLUpdateChannelPinnedMessage) SetId(v int32) { m.Data2.Id_4 = v }
func (m *TLUpdateChannelPinnedMessage) GetId() int32 { return m.Data2.Id_4 }


func NewTLUpdateChannelPinnedMessage() * TLUpdateChannelPinnedMessage {
    return &TLUpdateChannelPinnedMessage{ Data2: &Update_Data{} }
}

func (m* TLUpdateChannelPinnedMessage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateChannelPinnedMessage))

    x.Int(m.GetChannelId())
    x.Int(m.GetId())

    return x.buf
}

func (m* TLUpdateChannelPinnedMessage) Decode(dbuf *DecodeBuf) error {
    m.SetChannelId(dbuf.Int())
    m.SetId(dbuf.Int())

    return dbuf.err
}
// updateBotCallbackQuery#e73547e1 flags:# query_id:long user_id:int peer:Peer msg_id:int chat_instance:long data:flags.0?bytes game_short_name:flags.1?string = Update;
func (m *TLUpdateBotCallbackQuery) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateBotCallbackQuery,
        Data2: m.Data2,
    }
}


func (m *TLUpdateBotCallbackQuery) SetQueryId(v int64) { m.Data2.QueryId = v }
func (m *TLUpdateBotCallbackQuery) GetQueryId() int64 { return m.Data2.QueryId }

func (m *TLUpdateBotCallbackQuery) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateBotCallbackQuery) GetUserId() int32 { return m.Data2.UserId }

func (m *TLUpdateBotCallbackQuery) SetPeer(v *Peer) { m.Data2.Peer_39 = v }
func (m *TLUpdateBotCallbackQuery) GetPeer() *Peer { return m.Data2.Peer_39 }

func (m *TLUpdateBotCallbackQuery) SetMsgId(v int32) { m.Data2.MsgId_55 = v }
func (m *TLUpdateBotCallbackQuery) GetMsgId() int32 { return m.Data2.MsgId_55 }

func (m *TLUpdateBotCallbackQuery) SetChatInstance(v int64) { m.Data2.ChatInstance = v }
func (m *TLUpdateBotCallbackQuery) GetChatInstance() int64 { return m.Data2.ChatInstance }

func (m *TLUpdateBotCallbackQuery) SetData(v []byte) { m.Data2.Data_57 = v }
func (m *TLUpdateBotCallbackQuery) GetData() []byte { return m.Data2.Data_57 }

func (m *TLUpdateBotCallbackQuery) SetGameShortName(v string) { m.Data2.GameShortName = v }
func (m *TLUpdateBotCallbackQuery) GetGameShortName() string { return m.Data2.GameShortName }


func NewTLUpdateBotCallbackQuery() * TLUpdateBotCallbackQuery {
    return &TLUpdateBotCallbackQuery{ Data2: &Update_Data{} }
}

func (m* TLUpdateBotCallbackQuery) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateBotCallbackQuery))

    // flags
    var flags uint32 = 0
    if m.GetData() != nil { flags |= 1 << 0 }
    if m.GetGameShortName() != "" { flags |= 1 << 1 }
	x.UInt(flags)

    x.Long(m.GetQueryId())
    x.Int(m.GetUserId())
    x.Bytes(m.GetPeer().Encode())
    x.Int(m.GetMsgId())
    x.Long(m.GetChatInstance())
    if (flags & (1 << 0)) != 0 { x.StringBytes(m.GetData()) }
    if (flags & (1 << 1)) != 0 { x.String(m.GetGameShortName()) }

    return x.buf
}

func (m* TLUpdateBotCallbackQuery) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetQueryId(dbuf.Long())
    m.SetUserId(dbuf.Int())
    m4 := &Peer{}
    m4.Decode(dbuf)
    m.SetPeer(m4)
    m.SetMsgId(dbuf.Int())
    m.SetChatInstance(dbuf.Long())
    if (flags & (1 << 0)) != 0 {
 m.SetData(dbuf.StringBytes()) 
}
    if (flags & (1 << 1)) != 0 { m.SetGameShortName(dbuf.String()) }

    return dbuf.err
}
// updateEditMessage#e40370a3 message:Message pts:int pts_count:int = Update;
func (m *TLUpdateEditMessage) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateEditMessage,
        Data2: m.Data2,
    }
}


func (m *TLUpdateEditMessage) SetMessage(v *Message) { m.Data2.Message_1 = v }
func (m *TLUpdateEditMessage) GetMessage() *Message { return m.Data2.Message_1 }

func (m *TLUpdateEditMessage) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateEditMessage) GetPts() int32 { return m.Data2.Pts }

func (m *TLUpdateEditMessage) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateEditMessage) GetPtsCount() int32 { return m.Data2.PtsCount }


func NewTLUpdateEditMessage() * TLUpdateEditMessage {
    return &TLUpdateEditMessage{ Data2: &Update_Data{} }
}

func (m* TLUpdateEditMessage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateEditMessage))

    x.Bytes(m.GetMessage().Encode())
    x.Int(m.GetPts())
    x.Int(m.GetPtsCount())

    return x.buf
}

func (m* TLUpdateEditMessage) Decode(dbuf *DecodeBuf) error {
    m1 := &Message{}
    m1.Decode(dbuf)
    m.SetMessage(m1)
    m.SetPts(dbuf.Int())
    m.SetPtsCount(dbuf.Int())

    return dbuf.err
}
// updateInlineBotCallbackQuery#f9d27a5a flags:# query_id:long user_id:int msg_id:InputBotInlineMessageID chat_instance:long data:flags.0?bytes game_short_name:flags.1?string = Update;
func (m *TLUpdateInlineBotCallbackQuery) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateInlineBotCallbackQuery,
        Data2: m.Data2,
    }
}


func (m *TLUpdateInlineBotCallbackQuery) SetQueryId(v int64) { m.Data2.QueryId = v }
func (m *TLUpdateInlineBotCallbackQuery) GetQueryId() int64 { return m.Data2.QueryId }

func (m *TLUpdateInlineBotCallbackQuery) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateInlineBotCallbackQuery) GetUserId() int32 { return m.Data2.UserId }

func (m *TLUpdateInlineBotCallbackQuery) SetMsgId(v *InputBotInlineMessageID) { m.Data2.MsgId_54 = v }
func (m *TLUpdateInlineBotCallbackQuery) GetMsgId() *InputBotInlineMessageID { return m.Data2.MsgId_54 }

func (m *TLUpdateInlineBotCallbackQuery) SetChatInstance(v int64) { m.Data2.ChatInstance = v }
func (m *TLUpdateInlineBotCallbackQuery) GetChatInstance() int64 { return m.Data2.ChatInstance }

func (m *TLUpdateInlineBotCallbackQuery) SetData(v []byte) { m.Data2.Data_57 = v }
func (m *TLUpdateInlineBotCallbackQuery) GetData() []byte { return m.Data2.Data_57 }

func (m *TLUpdateInlineBotCallbackQuery) SetGameShortName(v string) { m.Data2.GameShortName = v }
func (m *TLUpdateInlineBotCallbackQuery) GetGameShortName() string { return m.Data2.GameShortName }


func NewTLUpdateInlineBotCallbackQuery() * TLUpdateInlineBotCallbackQuery {
    return &TLUpdateInlineBotCallbackQuery{ Data2: &Update_Data{} }
}

func (m* TLUpdateInlineBotCallbackQuery) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateInlineBotCallbackQuery))

    // flags
    var flags uint32 = 0
    if m.GetData() != nil { flags |= 1 << 0 }
    if m.GetGameShortName() != "" { flags |= 1 << 1 }
	x.UInt(flags)

    x.Long(m.GetQueryId())
    x.Int(m.GetUserId())
    x.Bytes(m.GetMsgId().Encode())
    x.Long(m.GetChatInstance())
    if (flags & (1 << 0)) != 0 { x.StringBytes(m.GetData()) }
    if (flags & (1 << 1)) != 0 { x.String(m.GetGameShortName()) }

    return x.buf
}

func (m* TLUpdateInlineBotCallbackQuery) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetQueryId(dbuf.Long())
    m.SetUserId(dbuf.Int())
    m4 := &InputBotInlineMessageID{}
    m4.Decode(dbuf)
    m.SetMsgId(m4)
    m.SetChatInstance(dbuf.Long())
    if (flags & (1 << 0)) != 0 {
 m.SetData(dbuf.StringBytes()) 
}
    if (flags & (1 << 1)) != 0 { m.SetGameShortName(dbuf.String()) }

    return dbuf.err
}
// updateReadChannelOutbox#25d6c9c7 channel_id:int max_id:int = Update;
func (m *TLUpdateReadChannelOutbox) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateReadChannelOutbox,
        Data2: m.Data2,
    }
}


func (m *TLUpdateReadChannelOutbox) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLUpdateReadChannelOutbox) GetChannelId() int32 { return m.Data2.ChannelId }

func (m *TLUpdateReadChannelOutbox) SetMaxId(v int32) { m.Data2.MaxId = v }
func (m *TLUpdateReadChannelOutbox) GetMaxId() int32 { return m.Data2.MaxId }


func NewTLUpdateReadChannelOutbox() * TLUpdateReadChannelOutbox {
    return &TLUpdateReadChannelOutbox{ Data2: &Update_Data{} }
}

func (m* TLUpdateReadChannelOutbox) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateReadChannelOutbox))

    x.Int(m.GetChannelId())
    x.Int(m.GetMaxId())

    return x.buf
}

func (m* TLUpdateReadChannelOutbox) Decode(dbuf *DecodeBuf) error {
    m.SetChannelId(dbuf.Int())
    m.SetMaxId(dbuf.Int())

    return dbuf.err
}
// updateDraftMessage#ee2bb969 peer:Peer draft:DraftMessage = Update;
func (m *TLUpdateDraftMessage) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateDraftMessage,
        Data2: m.Data2,
    }
}


func (m *TLUpdateDraftMessage) SetPeer(v *Peer) { m.Data2.Peer_39 = v }
func (m *TLUpdateDraftMessage) GetPeer() *Peer { return m.Data2.Peer_39 }

func (m *TLUpdateDraftMessage) SetDraft(v *DraftMessage) { m.Data2.Draft = v }
func (m *TLUpdateDraftMessage) GetDraft() *DraftMessage { return m.Data2.Draft }


func NewTLUpdateDraftMessage() * TLUpdateDraftMessage {
    return &TLUpdateDraftMessage{ Data2: &Update_Data{} }
}

func (m* TLUpdateDraftMessage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateDraftMessage))

    x.Bytes(m.GetPeer().Encode())
    x.Bytes(m.GetDraft().Encode())

    return x.buf
}

func (m* TLUpdateDraftMessage) Decode(dbuf *DecodeBuf) error {
    m1 := &Peer{}
    m1.Decode(dbuf)
    m.SetPeer(m1)
    m2 := &DraftMessage{}
    m2.Decode(dbuf)
    m.SetDraft(m2)

    return dbuf.err
}
// updateReadFeaturedStickers#571d2742 = Update;
func (m *TLUpdateReadFeaturedStickers) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateReadFeaturedStickers,
        Data2: m.Data2,
    }
}



func NewTLUpdateReadFeaturedStickers() * TLUpdateReadFeaturedStickers {
    return &TLUpdateReadFeaturedStickers{ Data2: &Update_Data{} }
}

func (m* TLUpdateReadFeaturedStickers) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateReadFeaturedStickers))


    return x.buf
}

func (m* TLUpdateReadFeaturedStickers) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// updateRecentStickers#9a422c20 = Update;
func (m *TLUpdateRecentStickers) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateRecentStickers,
        Data2: m.Data2,
    }
}



func NewTLUpdateRecentStickers() * TLUpdateRecentStickers {
    return &TLUpdateRecentStickers{ Data2: &Update_Data{} }
}

func (m* TLUpdateRecentStickers) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateRecentStickers))


    return x.buf
}

func (m* TLUpdateRecentStickers) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// updateConfig#a229dd06 = Update;
func (m *TLUpdateConfig) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateConfig,
        Data2: m.Data2,
    }
}



func NewTLUpdateConfig() * TLUpdateConfig {
    return &TLUpdateConfig{ Data2: &Update_Data{} }
}

func (m* TLUpdateConfig) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateConfig))


    return x.buf
}

func (m* TLUpdateConfig) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// updatePtsChanged#3354678f = Update;
func (m *TLUpdatePtsChanged) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updatePtsChanged,
        Data2: m.Data2,
    }
}



func NewTLUpdatePtsChanged() * TLUpdatePtsChanged {
    return &TLUpdatePtsChanged{ Data2: &Update_Data{} }
}

func (m* TLUpdatePtsChanged) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updatePtsChanged))


    return x.buf
}

func (m* TLUpdatePtsChanged) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// updateChannelWebPage#40771900 channel_id:int webpage:WebPage pts:int pts_count:int = Update;
func (m *TLUpdateChannelWebPage) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateChannelWebPage,
        Data2: m.Data2,
    }
}


func (m *TLUpdateChannelWebPage) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLUpdateChannelWebPage) GetChannelId() int32 { return m.Data2.ChannelId }

func (m *TLUpdateChannelWebPage) SetWebpage(v *WebPage) { m.Data2.Webpage = v }
func (m *TLUpdateChannelWebPage) GetWebpage() *WebPage { return m.Data2.Webpage }

func (m *TLUpdateChannelWebPage) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateChannelWebPage) GetPts() int32 { return m.Data2.Pts }

func (m *TLUpdateChannelWebPage) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateChannelWebPage) GetPtsCount() int32 { return m.Data2.PtsCount }


func NewTLUpdateChannelWebPage() * TLUpdateChannelWebPage {
    return &TLUpdateChannelWebPage{ Data2: &Update_Data{} }
}

func (m* TLUpdateChannelWebPage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateChannelWebPage))

    x.Int(m.GetChannelId())
    x.Bytes(m.GetWebpage().Encode())
    x.Int(m.GetPts())
    x.Int(m.GetPtsCount())

    return x.buf
}

func (m* TLUpdateChannelWebPage) Decode(dbuf *DecodeBuf) error {
    m.SetChannelId(dbuf.Int())
    m2 := &WebPage{}
    m2.Decode(dbuf)
    m.SetWebpage(m2)
    m.SetPts(dbuf.Int())
    m.SetPtsCount(dbuf.Int())

    return dbuf.err
}
// updateDialogPinned#d711a2cc flags:# pinned:flags.0?true peer:Peer = Update;
func (m *TLUpdateDialogPinned) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateDialogPinned,
        Data2: m.Data2,
    }
}


func (m *TLUpdateDialogPinned) SetPinned(v bool) { m.Data2.Pinned = v }
func (m *TLUpdateDialogPinned) GetPinned() bool { return m.Data2.Pinned }

func (m *TLUpdateDialogPinned) SetPeer(v *Peer) { m.Data2.Peer_39 = v }
func (m *TLUpdateDialogPinned) GetPeer() *Peer { return m.Data2.Peer_39 }


func NewTLUpdateDialogPinned() * TLUpdateDialogPinned {
    return &TLUpdateDialogPinned{ Data2: &Update_Data{} }
}

func (m* TLUpdateDialogPinned) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateDialogPinned))

    // flags
    var flags uint32 = 0
    if m.GetPinned() == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Bytes(m.GetPeer().Encode())

    return x.buf
}

func (m* TLUpdateDialogPinned) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetPinned(true) }
    m3 := &Peer{}
    m3.Decode(dbuf)
    m.SetPeer(m3)

    return dbuf.err
}
// updatePinnedDialogs#d8caf68d flags:# order:flags.0?Vector<Peer> = Update;
func (m *TLUpdatePinnedDialogs) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updatePinnedDialogs,
        Data2: m.Data2,
    }
}


func (m *TLUpdatePinnedDialogs) SetOrder(v []*Peer) { m.Data2.Order_61 = v }
func (m *TLUpdatePinnedDialogs) GetOrder() []*Peer { return m.Data2.Order_61 }


func NewTLUpdatePinnedDialogs() * TLUpdatePinnedDialogs {
    return &TLUpdatePinnedDialogs{ Data2: &Update_Data{} }
}

func (m* TLUpdatePinnedDialogs) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updatePinnedDialogs))

    // flags
    var flags uint32 = 0
    if m.GetOrder() != nil { flags |= 1 << 0 }
	x.UInt(flags)

    if (flags & (1 << 0)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetOrder())))
for _, v := range m.GetOrder() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}

    return x.buf
}

func (m* TLUpdatePinnedDialogs) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 {
 c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*Peer, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &Peer{}
	v2[i].Decode(dbuf)
}
m.SetOrder(v2)
 
}

    return dbuf.err
}
// updateBotWebhookJSON#8317c0c3 data:DataJSON = Update;
func (m *TLUpdateBotWebhookJSON) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateBotWebhookJSON,
        Data2: m.Data2,
    }
}


func (m *TLUpdateBotWebhookJSON) SetData(v *DataJSON) { m.Data2.Data_62 = v }
func (m *TLUpdateBotWebhookJSON) GetData() *DataJSON { return m.Data2.Data_62 }


func NewTLUpdateBotWebhookJSON() * TLUpdateBotWebhookJSON {
    return &TLUpdateBotWebhookJSON{ Data2: &Update_Data{} }
}

func (m* TLUpdateBotWebhookJSON) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateBotWebhookJSON))

    x.Bytes(m.GetData().Encode())

    return x.buf
}

func (m* TLUpdateBotWebhookJSON) Decode(dbuf *DecodeBuf) error {
    m1 := &DataJSON{}
    m1.Decode(dbuf)
    m.SetData(m1)

    return dbuf.err
}
// updateBotWebhookJSONQuery#9b9240a6 query_id:long data:DataJSON timeout:int = Update;
func (m *TLUpdateBotWebhookJSONQuery) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateBotWebhookJSONQuery,
        Data2: m.Data2,
    }
}


func (m *TLUpdateBotWebhookJSONQuery) SetQueryId(v int64) { m.Data2.QueryId = v }
func (m *TLUpdateBotWebhookJSONQuery) GetQueryId() int64 { return m.Data2.QueryId }

func (m *TLUpdateBotWebhookJSONQuery) SetData(v *DataJSON) { m.Data2.Data_62 = v }
func (m *TLUpdateBotWebhookJSONQuery) GetData() *DataJSON { return m.Data2.Data_62 }

func (m *TLUpdateBotWebhookJSONQuery) SetTimeout(v int32) { m.Data2.Timeout = v }
func (m *TLUpdateBotWebhookJSONQuery) GetTimeout() int32 { return m.Data2.Timeout }


func NewTLUpdateBotWebhookJSONQuery() * TLUpdateBotWebhookJSONQuery {
    return &TLUpdateBotWebhookJSONQuery{ Data2: &Update_Data{} }
}

func (m* TLUpdateBotWebhookJSONQuery) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateBotWebhookJSONQuery))

    x.Long(m.GetQueryId())
    x.Bytes(m.GetData().Encode())
    x.Int(m.GetTimeout())

    return x.buf
}

func (m* TLUpdateBotWebhookJSONQuery) Decode(dbuf *DecodeBuf) error {
    m.SetQueryId(dbuf.Long())
    m2 := &DataJSON{}
    m2.Decode(dbuf)
    m.SetData(m2)
    m.SetTimeout(dbuf.Int())

    return dbuf.err
}
// updateBotShippingQuery#e0cdc940 query_id:long user_id:int payload:bytes shipping_address:PostAddress = Update;
func (m *TLUpdateBotShippingQuery) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateBotShippingQuery,
        Data2: m.Data2,
    }
}


func (m *TLUpdateBotShippingQuery) SetQueryId(v int64) { m.Data2.QueryId = v }
func (m *TLUpdateBotShippingQuery) GetQueryId() int64 { return m.Data2.QueryId }

func (m *TLUpdateBotShippingQuery) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateBotShippingQuery) GetUserId() int32 { return m.Data2.UserId }

func (m *TLUpdateBotShippingQuery) SetPayload(v []byte) { m.Data2.Payload = v }
func (m *TLUpdateBotShippingQuery) GetPayload() []byte { return m.Data2.Payload }

func (m *TLUpdateBotShippingQuery) SetShippingAddress(v *PostAddress) { m.Data2.ShippingAddress = v }
func (m *TLUpdateBotShippingQuery) GetShippingAddress() *PostAddress { return m.Data2.ShippingAddress }


func NewTLUpdateBotShippingQuery() * TLUpdateBotShippingQuery {
    return &TLUpdateBotShippingQuery{ Data2: &Update_Data{} }
}

func (m* TLUpdateBotShippingQuery) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateBotShippingQuery))

    x.Long(m.GetQueryId())
    x.Int(m.GetUserId())
    x.StringBytes(m.GetPayload())
    x.Bytes(m.GetShippingAddress().Encode())

    return x.buf
}

func (m* TLUpdateBotShippingQuery) Decode(dbuf *DecodeBuf) error {
    m.SetQueryId(dbuf.Long())
    m.SetUserId(dbuf.Int())
    m.SetPayload(dbuf.StringBytes())
    m4 := &PostAddress{}
    m4.Decode(dbuf)
    m.SetShippingAddress(m4)

    return dbuf.err
}
// updateBotPrecheckoutQuery#5d2f3aa9 flags:# query_id:long user_id:int payload:bytes info:flags.0?PaymentRequestedInfo shipping_option_id:flags.1?string currency:string total_amount:long = Update;
func (m *TLUpdateBotPrecheckoutQuery) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateBotPrecheckoutQuery,
        Data2: m.Data2,
    }
}


func (m *TLUpdateBotPrecheckoutQuery) SetQueryId(v int64) { m.Data2.QueryId = v }
func (m *TLUpdateBotPrecheckoutQuery) GetQueryId() int64 { return m.Data2.QueryId }

func (m *TLUpdateBotPrecheckoutQuery) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateBotPrecheckoutQuery) GetUserId() int32 { return m.Data2.UserId }

func (m *TLUpdateBotPrecheckoutQuery) SetPayload(v []byte) { m.Data2.Payload = v }
func (m *TLUpdateBotPrecheckoutQuery) GetPayload() []byte { return m.Data2.Payload }

func (m *TLUpdateBotPrecheckoutQuery) SetInfo(v *PaymentRequestedInfo) { m.Data2.Info = v }
func (m *TLUpdateBotPrecheckoutQuery) GetInfo() *PaymentRequestedInfo { return m.Data2.Info }

func (m *TLUpdateBotPrecheckoutQuery) SetShippingOptionId(v string) { m.Data2.ShippingOptionId = v }
func (m *TLUpdateBotPrecheckoutQuery) GetShippingOptionId() string { return m.Data2.ShippingOptionId }

func (m *TLUpdateBotPrecheckoutQuery) SetCurrency(v string) { m.Data2.Currency = v }
func (m *TLUpdateBotPrecheckoutQuery) GetCurrency() string { return m.Data2.Currency }

func (m *TLUpdateBotPrecheckoutQuery) SetTotalAmount(v int64) { m.Data2.TotalAmount = v }
func (m *TLUpdateBotPrecheckoutQuery) GetTotalAmount() int64 { return m.Data2.TotalAmount }


func NewTLUpdateBotPrecheckoutQuery() * TLUpdateBotPrecheckoutQuery {
    return &TLUpdateBotPrecheckoutQuery{ Data2: &Update_Data{} }
}

func (m* TLUpdateBotPrecheckoutQuery) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateBotPrecheckoutQuery))

    // flags
    var flags uint32 = 0
    if m.GetInfo() != nil { flags |= 1 << 0 }
    if m.GetShippingOptionId() != "" { flags |= 1 << 1 }
	x.UInt(flags)

    x.Long(m.GetQueryId())
    x.Int(m.GetUserId())
    x.StringBytes(m.GetPayload())
    if (flags & (1 << 0)) != 0 { x.Bytes(m.GetInfo().Encode()) }
    if (flags & (1 << 1)) != 0 { x.String(m.GetShippingOptionId()) }
    x.String(m.GetCurrency())
    x.Long(m.GetTotalAmount())

    return x.buf
}

func (m* TLUpdateBotPrecheckoutQuery) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetQueryId(dbuf.Long())
    m.SetUserId(dbuf.Int())
    m.SetPayload(dbuf.StringBytes())
    if (flags & (1 << 0)) != 0 {
 m5 := &PaymentRequestedInfo{}
    m5.Decode(dbuf)
    m.SetInfo(m5) 
}
    if (flags & (1 << 1)) != 0 { m.SetShippingOptionId(dbuf.String()) }
    m.SetCurrency(dbuf.String())
    m.SetTotalAmount(dbuf.Long())

    return dbuf.err
}
// updatePhoneCall#ab0f6b1e phone_call:PhoneCall = Update;
func (m *TLUpdatePhoneCall) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updatePhoneCall,
        Data2: m.Data2,
    }
}


func (m *TLUpdatePhoneCall) SetPhoneCall(v *PhoneCall) { m.Data2.PhoneCall = v }
func (m *TLUpdatePhoneCall) GetPhoneCall() *PhoneCall { return m.Data2.PhoneCall }


func NewTLUpdatePhoneCall() * TLUpdatePhoneCall {
    return &TLUpdatePhoneCall{ Data2: &Update_Data{} }
}

func (m* TLUpdatePhoneCall) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updatePhoneCall))

    x.Bytes(m.GetPhoneCall().Encode())

    return x.buf
}

func (m* TLUpdatePhoneCall) Decode(dbuf *DecodeBuf) error {
    m1 := &PhoneCall{}
    m1.Decode(dbuf)
    m.SetPhoneCall(m1)

    return dbuf.err
}
// updateLangPackTooLong#10c2404b = Update;
func (m *TLUpdateLangPackTooLong) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateLangPackTooLong,
        Data2: m.Data2,
    }
}



func NewTLUpdateLangPackTooLong() * TLUpdateLangPackTooLong {
    return &TLUpdateLangPackTooLong{ Data2: &Update_Data{} }
}

func (m* TLUpdateLangPackTooLong) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateLangPackTooLong))


    return x.buf
}

func (m* TLUpdateLangPackTooLong) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// updateLangPack#56022f4d difference:LangPackDifference = Update;
func (m *TLUpdateLangPack) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateLangPack,
        Data2: m.Data2,
    }
}


func (m *TLUpdateLangPack) SetDifference(v *LangPackDifference) { m.Data2.Difference = v }
func (m *TLUpdateLangPack) GetDifference() *LangPackDifference { return m.Data2.Difference }


func NewTLUpdateLangPack() * TLUpdateLangPack {
    return &TLUpdateLangPack{ Data2: &Update_Data{} }
}

func (m* TLUpdateLangPack) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateLangPack))

    x.Bytes(m.GetDifference().Encode())

    return x.buf
}

func (m* TLUpdateLangPack) Decode(dbuf *DecodeBuf) error {
    m1 := &LangPackDifference{}
    m1.Decode(dbuf)
    m.SetDifference(m1)

    return dbuf.err
}
// updateFavedStickers#e511996d = Update;
func (m *TLUpdateFavedStickers) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateFavedStickers,
        Data2: m.Data2,
    }
}



func NewTLUpdateFavedStickers() * TLUpdateFavedStickers {
    return &TLUpdateFavedStickers{ Data2: &Update_Data{} }
}

func (m* TLUpdateFavedStickers) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateFavedStickers))


    return x.buf
}

func (m* TLUpdateFavedStickers) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// updateChannelReadMessagesContents#89893b45 channel_id:int messages:Vector<int> = Update;
func (m *TLUpdateChannelReadMessagesContents) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateChannelReadMessagesContents,
        Data2: m.Data2,
    }
}


func (m *TLUpdateChannelReadMessagesContents) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLUpdateChannelReadMessagesContents) GetChannelId() int32 { return m.Data2.ChannelId }

func (m *TLUpdateChannelReadMessagesContents) SetMessages(v []int32) { m.Data2.Messages = v }
func (m *TLUpdateChannelReadMessagesContents) GetMessages() []int32 { return m.Data2.Messages }


func NewTLUpdateChannelReadMessagesContents() * TLUpdateChannelReadMessagesContents {
    return &TLUpdateChannelReadMessagesContents{ Data2: &Update_Data{} }
}

func (m* TLUpdateChannelReadMessagesContents) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateChannelReadMessagesContents))

    x.Int(m.GetChannelId())
    x.VectorInt(m.GetMessages())


    return x.buf
}

func (m* TLUpdateChannelReadMessagesContents) Decode(dbuf *DecodeBuf) error {
    m.SetChannelId(dbuf.Int())
    m.SetMessages(dbuf.VectorInt())

    return dbuf.err
}
// updateContactsReset#7084a7be = Update;
func (m *TLUpdateContactsReset) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateContactsReset,
        Data2: m.Data2,
    }
}



func NewTLUpdateContactsReset() * TLUpdateContactsReset {
    return &TLUpdateContactsReset{ Data2: &Update_Data{} }
}

func (m* TLUpdateContactsReset) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateContactsReset))


    return x.buf
}

func (m* TLUpdateContactsReset) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// updateGivePoints#adec3aee points:int reason:int = Update;
func (m *TLUpdateGivePoints) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateGivePoints,
        Data2: m.Data2,
    }
}


func (m *TLUpdateGivePoints) SetPoints(v int32) { m.Data2.Points = v }
func (m *TLUpdateGivePoints) GetPoints() int32 { return m.Data2.Points }

func (m *TLUpdateGivePoints) SetReason(v int32) { m.Data2.Reason = v }
func (m *TLUpdateGivePoints) GetReason() int32 { return m.Data2.Reason }


func NewTLUpdateGivePoints() * TLUpdateGivePoints {
    return &TLUpdateGivePoints{ Data2: &Update_Data{} }
}

func (m* TLUpdateGivePoints) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateGivePoints))

    x.Int(m.GetPoints())
    x.Int(m.GetReason())

    return x.buf
}

func (m* TLUpdateGivePoints) Decode(dbuf *DecodeBuf) error {
    m.SetPoints(dbuf.Int())
    m.SetReason(dbuf.Int())

    return dbuf.err
}
// updateRedTip#595d8378 json_content:string = Update;
func (m *TLUpdateRedTip) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateRedTip,
        Data2: m.Data2,
    }
}


func (m *TLUpdateRedTip) SetJsonContent(v string) { m.Data2.JsonContent = v }
func (m *TLUpdateRedTip) GetJsonContent() string { return m.Data2.JsonContent }


func NewTLUpdateRedTip() * TLUpdateRedTip {
    return &TLUpdateRedTip{ Data2: &Update_Data{} }
}

func (m* TLUpdateRedTip) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateRedTip))

    x.String(m.GetJsonContent())

    return x.buf
}

func (m* TLUpdateRedTip) Decode(dbuf *DecodeBuf) error {
    m.SetJsonContent(dbuf.String())

    return dbuf.err
}
// updateRefreshContacts#599532e2 = Update;
func (m *TLUpdateRefreshContacts) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateRefreshContacts,
        Data2: m.Data2,
    }
}



func NewTLUpdateRefreshContacts() * TLUpdateRefreshContacts {
    return &TLUpdateRefreshContacts{ Data2: &Update_Data{} }
}

func (m* TLUpdateRefreshContacts) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateRefreshContacts))


    return x.buf
}

func (m* TLUpdateRefreshContacts) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// updateByJson#2eed5a10 type:int json_content:string = Update;
func (m *TLUpdateByJson) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateByJson,
        Data2: m.Data2,
    }
}


func (m *TLUpdateByJson) SetType(v int32) { m.Data2.Type_75 = v }
func (m *TLUpdateByJson) GetType() int32 { return m.Data2.Type_75 }

func (m *TLUpdateByJson) SetJsonContent(v string) { m.Data2.JsonContent = v }
func (m *TLUpdateByJson) GetJsonContent() string { return m.Data2.JsonContent }


func NewTLUpdateByJson() * TLUpdateByJson {
    return &TLUpdateByJson{ Data2: &Update_Data{} }
}

func (m* TLUpdateByJson) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateByJson))

    x.Int(m.GetType())
    x.String(m.GetJsonContent())

    return x.buf
}

func (m* TLUpdateByJson) Decode(dbuf *DecodeBuf) error {
    m.SetType(dbuf.Int())
    m.SetJsonContent(dbuf.String())

    return dbuf.err
}
// updateChannelBannedRights#92e0f78f channel_id:int is_silence:Bool is_text:Bool = Update;
func (m *TLUpdateChannelBannedRights) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateChannelBannedRights,
        Data2: m.Data2,
    }
}


func (m *TLUpdateChannelBannedRights) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLUpdateChannelBannedRights) GetChannelId() int32 { return m.Data2.ChannelId }

func (m *TLUpdateChannelBannedRights) SetIsSilence(v *Bool) { m.Data2.IsSilence = v }
func (m *TLUpdateChannelBannedRights) GetIsSilence() *Bool { return m.Data2.IsSilence }

func (m *TLUpdateChannelBannedRights) SetIsText(v *Bool) { m.Data2.IsText = v }
func (m *TLUpdateChannelBannedRights) GetIsText() *Bool { return m.Data2.IsText }


func NewTLUpdateChannelBannedRights() * TLUpdateChannelBannedRights {
    return &TLUpdateChannelBannedRights{ Data2: &Update_Data{} }
}

func (m* TLUpdateChannelBannedRights) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateChannelBannedRights))

    x.Int(m.GetChannelId())
    x.Bytes(m.GetIsSilence().Encode())
    x.Bytes(m.GetIsText().Encode())

    return x.buf
}

func (m* TLUpdateChannelBannedRights) Decode(dbuf *DecodeBuf) error {
    m.SetChannelId(dbuf.Int())
    m2 := &Bool{}
    m2.Decode(dbuf)
    m.SetIsSilence(m2)
    m3 := &Bool{}
    m3.Decode(dbuf)
    m.SetIsText(m3)

    return dbuf.err
}
// updateChannelAvailableMessages#70db6837 channel_id:int available_min_id:int = Update;
func (m *TLUpdateChannelAvailableMessages) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateChannelAvailableMessages,
        Data2: m.Data2,
    }
}


func (m *TLUpdateChannelAvailableMessages) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLUpdateChannelAvailableMessages) GetChannelId() int32 { return m.Data2.ChannelId }

func (m *TLUpdateChannelAvailableMessages) SetAvailableMinId(v int32) { m.Data2.AvailableMinId = v }
func (m *TLUpdateChannelAvailableMessages) GetAvailableMinId() int32 { return m.Data2.AvailableMinId }


func NewTLUpdateChannelAvailableMessages() * TLUpdateChannelAvailableMessages {
    return &TLUpdateChannelAvailableMessages{ Data2: &Update_Data{} }
}

func (m* TLUpdateChannelAvailableMessages) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateChannelAvailableMessages))

    x.Int(m.GetChannelId())
    x.Int(m.GetAvailableMinId())

    return x.buf
}

func (m* TLUpdateChannelAvailableMessages) Decode(dbuf *DecodeBuf) error {
    m.SetChannelId(dbuf.Int())
    m.SetAvailableMinId(dbuf.Int())

    return dbuf.err
}
// updateReadHistoryInbox#9c974fdf flags:# folder_id:flags.0?int peer:Peer max_id:int still_unread_count:int pts:int pts_count:int = Update;
func (m *TLUpdateReadHistoryInbox114) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateReadHistoryInbox114,
        Data2: m.Data2,
    }
}


func (m *TLUpdateReadHistoryInbox114) SetFolderId(v int32) { m.Data2.FolderId = v }
func (m *TLUpdateReadHistoryInbox114) GetFolderId() int32 { return m.Data2.FolderId }

func (m *TLUpdateReadHistoryInbox114) SetPeer(v *Peer) { m.Data2.Peer_39 = v }
func (m *TLUpdateReadHistoryInbox114) GetPeer() *Peer { return m.Data2.Peer_39 }

func (m *TLUpdateReadHistoryInbox114) SetMaxId(v int32) { m.Data2.MaxId = v }
func (m *TLUpdateReadHistoryInbox114) GetMaxId() int32 { return m.Data2.MaxId }

func (m *TLUpdateReadHistoryInbox114) SetStillUnreadCount(v int32) { m.Data2.StillUnreadCount = v }
func (m *TLUpdateReadHistoryInbox114) GetStillUnreadCount() int32 { return m.Data2.StillUnreadCount }

func (m *TLUpdateReadHistoryInbox114) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateReadHistoryInbox114) GetPts() int32 { return m.Data2.Pts }

func (m *TLUpdateReadHistoryInbox114) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateReadHistoryInbox114) GetPtsCount() int32 { return m.Data2.PtsCount }


func NewTLUpdateReadHistoryInbox114() * TLUpdateReadHistoryInbox114 {
    return &TLUpdateReadHistoryInbox114{ Data2: &Update_Data{} }
}

func (m* TLUpdateReadHistoryInbox114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateReadHistoryInbox114))

    // flags
    var flags uint32 = 0
    if m.GetFolderId() != 0 { flags |= 1 << 0 }
	x.UInt(flags)

    if (flags & (1 << 0)) != 0 { x.Int(m.GetFolderId()) }
    x.Bytes(m.GetPeer().Encode())
    x.Int(m.GetMaxId())
    x.Int(m.GetStillUnreadCount())
    x.Int(m.GetPts())
    x.Int(m.GetPtsCount())

    return x.buf
}

func (m* TLUpdateReadHistoryInbox114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetFolderId(dbuf.Int()) }
    m3 := &Peer{}
    m3.Decode(dbuf)
    m.SetPeer(m3)
    m.SetMaxId(dbuf.Int())
    m.SetStillUnreadCount(dbuf.Int())
    m.SetPts(dbuf.Int())
    m.SetPtsCount(dbuf.Int())

    return dbuf.err
}
// updateReadChannelInbox#330b5424 flags:# folder_id:flags.0?int channel_id:int max_id:int still_unread_count:int pts:int = Update;
func (m *TLUpdateReadChannelInbox114) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateReadChannelInbox114,
        Data2: m.Data2,
    }
}


func (m *TLUpdateReadChannelInbox114) SetFolderId(v int32) { m.Data2.FolderId = v }
func (m *TLUpdateReadChannelInbox114) GetFolderId() int32 { return m.Data2.FolderId }

func (m *TLUpdateReadChannelInbox114) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLUpdateReadChannelInbox114) GetChannelId() int32 { return m.Data2.ChannelId }

func (m *TLUpdateReadChannelInbox114) SetMaxId(v int32) { m.Data2.MaxId = v }
func (m *TLUpdateReadChannelInbox114) GetMaxId() int32 { return m.Data2.MaxId }

func (m *TLUpdateReadChannelInbox114) SetStillUnreadCount(v int32) { m.Data2.StillUnreadCount = v }
func (m *TLUpdateReadChannelInbox114) GetStillUnreadCount() int32 { return m.Data2.StillUnreadCount }

func (m *TLUpdateReadChannelInbox114) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateReadChannelInbox114) GetPts() int32 { return m.Data2.Pts }


func NewTLUpdateReadChannelInbox114() * TLUpdateReadChannelInbox114 {
    return &TLUpdateReadChannelInbox114{ Data2: &Update_Data{} }
}

func (m* TLUpdateReadChannelInbox114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateReadChannelInbox114))

    // flags
    var flags uint32 = 0
    if m.GetFolderId() != 0 { flags |= 1 << 0 }
	x.UInt(flags)

    if (flags & (1 << 0)) != 0 { x.Int(m.GetFolderId()) }
    x.Int(m.GetChannelId())
    x.Int(m.GetMaxId())
    x.Int(m.GetStillUnreadCount())
    x.Int(m.GetPts())

    return x.buf
}

func (m* TLUpdateReadChannelInbox114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetFolderId(dbuf.Int()) }
    m.SetChannelId(dbuf.Int())
    m.SetMaxId(dbuf.Int())
    m.SetStillUnreadCount(dbuf.Int())
    m.SetPts(dbuf.Int())

    return dbuf.err
}
// updateDialogPinned#6e6fe51c flags:# pinned:flags.0?true folder_id:flags.1?int peer:DialogPeer = Update;
func (m *TLUpdateDialogPinned114) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateDialogPinned114,
        Data2: m.Data2,
    }
}


func (m *TLUpdateDialogPinned114) SetPinned(v bool) { m.Data2.Pinned = v }
func (m *TLUpdateDialogPinned114) GetPinned() bool { return m.Data2.Pinned }

func (m *TLUpdateDialogPinned114) SetFolderId(v int32) { m.Data2.FolderId = v }
func (m *TLUpdateDialogPinned114) GetFolderId() int32 { return m.Data2.FolderId }

func (m *TLUpdateDialogPinned114) SetPeer(v *DialogPeer) { m.Data2.Peer_81 = v }
func (m *TLUpdateDialogPinned114) GetPeer() *DialogPeer { return m.Data2.Peer_81 }


func NewTLUpdateDialogPinned114() * TLUpdateDialogPinned114 {
    return &TLUpdateDialogPinned114{ Data2: &Update_Data{} }
}

func (m* TLUpdateDialogPinned114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateDialogPinned114))

    // flags
    var flags uint32 = 0
    if m.GetPinned() == true { flags |= 1 << 0 }
    if m.GetFolderId() != 0 { flags |= 1 << 1 }
	x.UInt(flags)

    
    if (flags & (1 << 1)) != 0 { x.Int(m.GetFolderId()) }
    x.Bytes(m.GetPeer().Encode())

    return x.buf
}

func (m* TLUpdateDialogPinned114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetPinned(true) }
    if (flags & (1 << 1)) != 0 { m.SetFolderId(dbuf.Int()) }
    m4 := &DialogPeer{}
    m4.Decode(dbuf)
    m.SetPeer(m4)

    return dbuf.err
}
// updatePinnedDialogs#fa0f3ca2 flags:# folder_id:flags.1?int order:flags.0?Vector<DialogPeer> = Update;
func (m *TLUpdatePinnedDialogs114) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updatePinnedDialogs114,
        Data2: m.Data2,
    }
}


func (m *TLUpdatePinnedDialogs114) SetFolderId(v int32) { m.Data2.FolderId = v }
func (m *TLUpdatePinnedDialogs114) GetFolderId() int32 { return m.Data2.FolderId }

func (m *TLUpdatePinnedDialogs114) SetOrder(v []*DialogPeer) { m.Data2.Order_82 = v }
func (m *TLUpdatePinnedDialogs114) GetOrder() []*DialogPeer { return m.Data2.Order_82 }


func NewTLUpdatePinnedDialogs114() * TLUpdatePinnedDialogs114 {
    return &TLUpdatePinnedDialogs114{ Data2: &Update_Data{} }
}

func (m* TLUpdatePinnedDialogs114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updatePinnedDialogs114))

    // flags
    var flags uint32 = 0
    if m.GetFolderId() != 0 { flags |= 1 << 1 }
    if m.GetOrder() != nil { flags |= 1 << 0 }
	x.UInt(flags)

    if (flags & (1 << 1)) != 0 { x.Int(m.GetFolderId()) }
    if (flags & (1 << 0)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetOrder())))
for _, v := range m.GetOrder() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}

    return x.buf
}

func (m* TLUpdatePinnedDialogs114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 1)) != 0 { m.SetFolderId(dbuf.Int()) }
    if (flags & (1 << 0)) != 0 {
 c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*DialogPeer, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &DialogPeer{}
	v3[i].Decode(dbuf)
}
m.SetOrder(v3)
 
}

    return dbuf.err
}
// updateLangPackTooLong#46560264 lang_code:string = Update;
func (m *TLUpdateLangPackTooLong114) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateLangPackTooLong114,
        Data2: m.Data2,
    }
}


func (m *TLUpdateLangPackTooLong114) SetLangCode(v string) { m.Data2.LangCode = v }
func (m *TLUpdateLangPackTooLong114) GetLangCode() string { return m.Data2.LangCode }


func NewTLUpdateLangPackTooLong114() * TLUpdateLangPackTooLong114 {
    return &TLUpdateLangPackTooLong114{ Data2: &Update_Data{} }
}

func (m* TLUpdateLangPackTooLong114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateLangPackTooLong114))

    x.String(m.GetLangCode())

    return x.buf
}

func (m* TLUpdateLangPackTooLong114) Decode(dbuf *DecodeBuf) error {
    m.SetLangCode(dbuf.String())

    return dbuf.err
}
// updateDialogUnreadMark#e16459c3 flags:# unread:flags.0?true peer:DialogPeer = Update;
func (m *TLUpdateDialogUnreadMark) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateDialogUnreadMark,
        Data2: m.Data2,
    }
}


func (m *TLUpdateDialogUnreadMark) SetUnread(v bool) { m.Data2.Unread = v }
func (m *TLUpdateDialogUnreadMark) GetUnread() bool { return m.Data2.Unread }

func (m *TLUpdateDialogUnreadMark) SetPeer(v *DialogPeer) { m.Data2.Peer_81 = v }
func (m *TLUpdateDialogUnreadMark) GetPeer() *DialogPeer { return m.Data2.Peer_81 }


func NewTLUpdateDialogUnreadMark() * TLUpdateDialogUnreadMark {
    return &TLUpdateDialogUnreadMark{ Data2: &Update_Data{} }
}

func (m* TLUpdateDialogUnreadMark) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateDialogUnreadMark))

    // flags
    var flags uint32 = 0
    if m.GetUnread() == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Bytes(m.GetPeer().Encode())

    return x.buf
}

func (m* TLUpdateDialogUnreadMark) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetUnread(true) }
    m3 := &DialogPeer{}
    m3.Decode(dbuf)
    m.SetPeer(m3)

    return dbuf.err
}
// updateUserPinnedMessage#4c43da18 user_id:int id:int = Update;
func (m *TLUpdateUserPinnedMessage) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateUserPinnedMessage,
        Data2: m.Data2,
    }
}


func (m *TLUpdateUserPinnedMessage) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateUserPinnedMessage) GetUserId() int32 { return m.Data2.UserId }

func (m *TLUpdateUserPinnedMessage) SetId(v int32) { m.Data2.Id_4 = v }
func (m *TLUpdateUserPinnedMessage) GetId() int32 { return m.Data2.Id_4 }


func NewTLUpdateUserPinnedMessage() * TLUpdateUserPinnedMessage {
    return &TLUpdateUserPinnedMessage{ Data2: &Update_Data{} }
}

func (m* TLUpdateUserPinnedMessage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateUserPinnedMessage))

    x.Int(m.GetUserId())
    x.Int(m.GetId())

    return x.buf
}

func (m* TLUpdateUserPinnedMessage) Decode(dbuf *DecodeBuf) error {
    m.SetUserId(dbuf.Int())
    m.SetId(dbuf.Int())

    return dbuf.err
}
// updateChatPinnedMessage#e10db349 chat_id:int id:int version:int = Update;
func (m *TLUpdateChatPinnedMessage) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateChatPinnedMessage,
        Data2: m.Data2,
    }
}


func (m *TLUpdateChatPinnedMessage) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLUpdateChatPinnedMessage) GetChatId() int32 { return m.Data2.ChatId }

func (m *TLUpdateChatPinnedMessage) SetId(v int32) { m.Data2.Id_4 = v }
func (m *TLUpdateChatPinnedMessage) GetId() int32 { return m.Data2.Id_4 }

func (m *TLUpdateChatPinnedMessage) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLUpdateChatPinnedMessage) GetVersion() int32 { return m.Data2.Version }


func NewTLUpdateChatPinnedMessage() * TLUpdateChatPinnedMessage {
    return &TLUpdateChatPinnedMessage{ Data2: &Update_Data{} }
}

func (m* TLUpdateChatPinnedMessage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateChatPinnedMessage))

    x.Int(m.GetChatId())
    x.Int(m.GetId())
    x.Int(m.GetVersion())

    return x.buf
}

func (m* TLUpdateChatPinnedMessage) Decode(dbuf *DecodeBuf) error {
    m.SetChatId(dbuf.Int())
    m.SetId(dbuf.Int())
    m.SetVersion(dbuf.Int())

    return dbuf.err
}
// updateMessagePoll#aca1657b flags:# poll_id:long poll:flags.0?Poll results:PollResults = Update;
func (m *TLUpdateMessagePoll) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateMessagePoll,
        Data2: m.Data2,
    }
}


func (m *TLUpdateMessagePoll) SetPollId(v int64) { m.Data2.PollId = v }
func (m *TLUpdateMessagePoll) GetPollId() int64 { return m.Data2.PollId }

func (m *TLUpdateMessagePoll) SetPoll(v *Poll) { m.Data2.Poll = v }
func (m *TLUpdateMessagePoll) GetPoll() *Poll { return m.Data2.Poll }

func (m *TLUpdateMessagePoll) SetResults(v *PollResults) { m.Data2.Results = v }
func (m *TLUpdateMessagePoll) GetResults() *PollResults { return m.Data2.Results }


func NewTLUpdateMessagePoll() * TLUpdateMessagePoll {
    return &TLUpdateMessagePoll{ Data2: &Update_Data{} }
}

func (m* TLUpdateMessagePoll) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateMessagePoll))

    // flags
    var flags uint32 = 0
    if m.GetPoll() != nil { flags |= 1 << 0 }
	x.UInt(flags)

    x.Long(m.GetPollId())
    if (flags & (1 << 0)) != 0 { x.Bytes(m.GetPoll().Encode()) }
    x.Bytes(m.GetResults().Encode())

    return x.buf
}

func (m* TLUpdateMessagePoll) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetPollId(dbuf.Long())
    if (flags & (1 << 0)) != 0 {
 m3 := &Poll{}
    m3.Decode(dbuf)
    m.SetPoll(m3) 
}
    m4 := &PollResults{}
    m4.Decode(dbuf)
    m.SetResults(m4)

    return dbuf.err
}
// updateChatDefaultBannedRights#54c01850 peer:Peer default_banned_rights:ChatBannedRights version:int = Update;
func (m *TLUpdateChatDefaultBannedRights) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateChatDefaultBannedRights,
        Data2: m.Data2,
    }
}


func (m *TLUpdateChatDefaultBannedRights) SetPeer(v *Peer) { m.Data2.Peer_39 = v }
func (m *TLUpdateChatDefaultBannedRights) GetPeer() *Peer { return m.Data2.Peer_39 }

func (m *TLUpdateChatDefaultBannedRights) SetDefaultBannedRights(v *ChatBannedRights) { m.Data2.DefaultBannedRights = v }
func (m *TLUpdateChatDefaultBannedRights) GetDefaultBannedRights() *ChatBannedRights { return m.Data2.DefaultBannedRights }

func (m *TLUpdateChatDefaultBannedRights) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLUpdateChatDefaultBannedRights) GetVersion() int32 { return m.Data2.Version }


func NewTLUpdateChatDefaultBannedRights() * TLUpdateChatDefaultBannedRights {
    return &TLUpdateChatDefaultBannedRights{ Data2: &Update_Data{} }
}

func (m* TLUpdateChatDefaultBannedRights) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateChatDefaultBannedRights))

    x.Bytes(m.GetPeer().Encode())
    x.Bytes(m.GetDefaultBannedRights().Encode())
    x.Int(m.GetVersion())

    return x.buf
}

func (m* TLUpdateChatDefaultBannedRights) Decode(dbuf *DecodeBuf) error {
    m1 := &Peer{}
    m1.Decode(dbuf)
    m.SetPeer(m1)
    m2 := &ChatBannedRights{}
    m2.Decode(dbuf)
    m.SetDefaultBannedRights(m2)
    m.SetVersion(dbuf.Int())

    return dbuf.err
}
// updateFolderPeers#19360dc0 folder_peers:Vector<FolderPeer> pts:int pts_count:int = Update;
func (m *TLUpdateFolderPeers) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateFolderPeers,
        Data2: m.Data2,
    }
}


func (m *TLUpdateFolderPeers) SetFolderPeers(v []*FolderPeer) { m.Data2.FolderPeers = v }
func (m *TLUpdateFolderPeers) GetFolderPeers() []*FolderPeer { return m.Data2.FolderPeers }

func (m *TLUpdateFolderPeers) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdateFolderPeers) GetPts() int32 { return m.Data2.Pts }

func (m *TLUpdateFolderPeers) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdateFolderPeers) GetPtsCount() int32 { return m.Data2.PtsCount }


func NewTLUpdateFolderPeers() * TLUpdateFolderPeers {
    return &TLUpdateFolderPeers{ Data2: &Update_Data{} }
}

func (m* TLUpdateFolderPeers) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateFolderPeers))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetFolderPeers())))
for _, v := range m.GetFolderPeers() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(m.GetPts())
    x.Int(m.GetPtsCount())

    return x.buf
}

func (m* TLUpdateFolderPeers) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*FolderPeer, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &FolderPeer{}
	v1[i].Decode(dbuf)
}
m.SetFolderPeers(v1)

    m.SetPts(dbuf.Int())
    m.SetPtsCount(dbuf.Int())

    return dbuf.err
}
// updatePeerSettings#6a7e7366 peer:Peer settings:PeerSettings = Update;
func (m *TLUpdatePeerSettings) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updatePeerSettings,
        Data2: m.Data2,
    }
}


func (m *TLUpdatePeerSettings) SetPeer(v *Peer) { m.Data2.Peer_39 = v }
func (m *TLUpdatePeerSettings) GetPeer() *Peer { return m.Data2.Peer_39 }

func (m *TLUpdatePeerSettings) SetSettings(v *PeerSettings) { m.Data2.Settings = v }
func (m *TLUpdatePeerSettings) GetSettings() *PeerSettings { return m.Data2.Settings }


func NewTLUpdatePeerSettings() * TLUpdatePeerSettings {
    return &TLUpdatePeerSettings{ Data2: &Update_Data{} }
}

func (m* TLUpdatePeerSettings) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updatePeerSettings))

    x.Bytes(m.GetPeer().Encode())
    x.Bytes(m.GetSettings().Encode())

    return x.buf
}

func (m* TLUpdatePeerSettings) Decode(dbuf *DecodeBuf) error {
    m1 := &Peer{}
    m1.Decode(dbuf)
    m.SetPeer(m1)
    m2 := &PeerSettings{}
    m2.Decode(dbuf)
    m.SetSettings(m2)

    return dbuf.err
}
// updatePeerLocated#b4afcfb0 peers:Vector<PeerLocated> = Update;
func (m *TLUpdatePeerLocated) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updatePeerLocated,
        Data2: m.Data2,
    }
}


func (m *TLUpdatePeerLocated) SetPeers(v []*PeerLocated) { m.Data2.Peers = v }
func (m *TLUpdatePeerLocated) GetPeers() []*PeerLocated { return m.Data2.Peers }


func NewTLUpdatePeerLocated() * TLUpdatePeerLocated {
    return &TLUpdatePeerLocated{ Data2: &Update_Data{} }
}

func (m* TLUpdatePeerLocated) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updatePeerLocated))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetPeers())))
for _, v := range m.GetPeers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLUpdatePeerLocated) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*PeerLocated, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &PeerLocated{}
	v1[i].Decode(dbuf)
}
m.SetPeers(v1)


    return dbuf.err
}
// updateNewScheduledMessage#39a51dfb message:Message = Update;
func (m *TLUpdateNewScheduledMessage) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateNewScheduledMessage,
        Data2: m.Data2,
    }
}


func (m *TLUpdateNewScheduledMessage) SetMessage(v *Message) { m.Data2.Message_1 = v }
func (m *TLUpdateNewScheduledMessage) GetMessage() *Message { return m.Data2.Message_1 }


func NewTLUpdateNewScheduledMessage() * TLUpdateNewScheduledMessage {
    return &TLUpdateNewScheduledMessage{ Data2: &Update_Data{} }
}

func (m* TLUpdateNewScheduledMessage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateNewScheduledMessage))

    x.Bytes(m.GetMessage().Encode())

    return x.buf
}

func (m* TLUpdateNewScheduledMessage) Decode(dbuf *DecodeBuf) error {
    m1 := &Message{}
    m1.Decode(dbuf)
    m.SetMessage(m1)

    return dbuf.err
}
// updateDeleteScheduledMessages#90866cee peer:Peer messages:Vector<int> = Update;
func (m *TLUpdateDeleteScheduledMessages) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateDeleteScheduledMessages,
        Data2: m.Data2,
    }
}


func (m *TLUpdateDeleteScheduledMessages) SetPeer(v *Peer) { m.Data2.Peer_39 = v }
func (m *TLUpdateDeleteScheduledMessages) GetPeer() *Peer { return m.Data2.Peer_39 }

func (m *TLUpdateDeleteScheduledMessages) SetMessages(v []int32) { m.Data2.Messages = v }
func (m *TLUpdateDeleteScheduledMessages) GetMessages() []int32 { return m.Data2.Messages }


func NewTLUpdateDeleteScheduledMessages() * TLUpdateDeleteScheduledMessages {
    return &TLUpdateDeleteScheduledMessages{ Data2: &Update_Data{} }
}

func (m* TLUpdateDeleteScheduledMessages) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateDeleteScheduledMessages))

    x.Bytes(m.GetPeer().Encode())
    x.VectorInt(m.GetMessages())


    return x.buf
}

func (m* TLUpdateDeleteScheduledMessages) Decode(dbuf *DecodeBuf) error {
    m1 := &Peer{}
    m1.Decode(dbuf)
    m.SetPeer(m1)
    m.SetMessages(dbuf.VectorInt())

    return dbuf.err
}
// updateTheme#8216fba3 theme:Theme = Update;
func (m *TLUpdateTheme) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateTheme,
        Data2: m.Data2,
    }
}


func (m *TLUpdateTheme) SetTheme(v *Theme) { m.Data2.Theme = v }
func (m *TLUpdateTheme) GetTheme() *Theme { return m.Data2.Theme }


func NewTLUpdateTheme() * TLUpdateTheme {
    return &TLUpdateTheme{ Data2: &Update_Data{} }
}

func (m* TLUpdateTheme) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateTheme))

    x.Bytes(m.GetTheme().Encode())

    return x.buf
}

func (m* TLUpdateTheme) Decode(dbuf *DecodeBuf) error {
    m1 := &Theme{}
    m1.Decode(dbuf)
    m.SetTheme(m1)

    return dbuf.err
}
// updateGeoLiveViewed#871fb939 peer:Peer msg_id:int = Update;
func (m *TLUpdateGeoLiveViewed) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateGeoLiveViewed,
        Data2: m.Data2,
    }
}


func (m *TLUpdateGeoLiveViewed) SetPeer(v *Peer) { m.Data2.Peer_39 = v }
func (m *TLUpdateGeoLiveViewed) GetPeer() *Peer { return m.Data2.Peer_39 }

func (m *TLUpdateGeoLiveViewed) SetMsgId(v int32) { m.Data2.MsgId_55 = v }
func (m *TLUpdateGeoLiveViewed) GetMsgId() int32 { return m.Data2.MsgId_55 }


func NewTLUpdateGeoLiveViewed() * TLUpdateGeoLiveViewed {
    return &TLUpdateGeoLiveViewed{ Data2: &Update_Data{} }
}

func (m* TLUpdateGeoLiveViewed) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateGeoLiveViewed))

    x.Bytes(m.GetPeer().Encode())
    x.Int(m.GetMsgId())

    return x.buf
}

func (m* TLUpdateGeoLiveViewed) Decode(dbuf *DecodeBuf) error {
    m1 := &Peer{}
    m1.Decode(dbuf)
    m.SetPeer(m1)
    m.SetMsgId(dbuf.Int())

    return dbuf.err
}
// updateLoginToken#564fe691 = Update;
func (m *TLUpdateLoginToken) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateLoginToken,
        Data2: m.Data2,
    }
}



func NewTLUpdateLoginToken() * TLUpdateLoginToken {
    return &TLUpdateLoginToken{ Data2: &Update_Data{} }
}

func (m* TLUpdateLoginToken) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateLoginToken))


    return x.buf
}

func (m* TLUpdateLoginToken) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// updateMessagePollVote#42f88f2c poll_id:long user_id:int options:Vector<bytes> = Update;
func (m *TLUpdateMessagePollVote) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateMessagePollVote,
        Data2: m.Data2,
    }
}


func (m *TLUpdateMessagePollVote) SetPollId(v int64) { m.Data2.PollId = v }
func (m *TLUpdateMessagePollVote) GetPollId() int64 { return m.Data2.PollId }

func (m *TLUpdateMessagePollVote) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateMessagePollVote) GetUserId() int32 { return m.Data2.UserId }

func (m *TLUpdateMessagePollVote) SetOptions(v [][]byte) { m.Data2.Options = v }
func (m *TLUpdateMessagePollVote) GetOptions() [][]byte { return m.Data2.Options }


func NewTLUpdateMessagePollVote() * TLUpdateMessagePollVote {
    return &TLUpdateMessagePollVote{ Data2: &Update_Data{} }
}

func (m* TLUpdateMessagePollVote) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateMessagePollVote))

    x.Long(m.GetPollId())
    x.Int(m.GetUserId())
    

    return x.buf
}

func (m* TLUpdateMessagePollVote) Decode(dbuf *DecodeBuf) error {
    m.SetPollId(dbuf.Long())
    m.SetUserId(dbuf.Int())
    

    return dbuf.err
}
// updateDialogFilter#26ffde7d flags:# id:int filter:flags.0?DialogFilter = Update;
func (m *TLUpdateDialogFilter) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateDialogFilter,
        Data2: m.Data2,
    }
}


func (m *TLUpdateDialogFilter) SetId(v int32) { m.Data2.Id_4 = v }
func (m *TLUpdateDialogFilter) GetId() int32 { return m.Data2.Id_4 }

func (m *TLUpdateDialogFilter) SetFilter(v *DialogFilter) { m.Data2.Filter = v }
func (m *TLUpdateDialogFilter) GetFilter() *DialogFilter { return m.Data2.Filter }


func NewTLUpdateDialogFilter() * TLUpdateDialogFilter {
    return &TLUpdateDialogFilter{ Data2: &Update_Data{} }
}

func (m* TLUpdateDialogFilter) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateDialogFilter))

    // flags
    var flags uint32 = 0
    if m.GetFilter() != nil { flags |= 1 << 0 }
	x.UInt(flags)

    x.Int(m.GetId())
    if (flags & (1 << 0)) != 0 { x.Bytes(m.GetFilter().Encode()) }

    return x.buf
}

func (m* TLUpdateDialogFilter) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetId(dbuf.Int())
    if (flags & (1 << 0)) != 0 {
 m3 := &DialogFilter{}
    m3.Decode(dbuf)
    m.SetFilter(m3) 
}

    return dbuf.err
}
// updateDialogFilterOrder#a5d72105 order:Vector<int> = Update;
func (m *TLUpdateDialogFilterOrder) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateDialogFilterOrder,
        Data2: m.Data2,
    }
}


func (m *TLUpdateDialogFilterOrder) SetOrder(v []int32) { m.Data2.Order_95 = v }
func (m *TLUpdateDialogFilterOrder) GetOrder() []int32 { return m.Data2.Order_95 }


func NewTLUpdateDialogFilterOrder() * TLUpdateDialogFilterOrder {
    return &TLUpdateDialogFilterOrder{ Data2: &Update_Data{} }
}

func (m* TLUpdateDialogFilterOrder) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateDialogFilterOrder))

    x.VectorInt(m.GetOrder())


    return x.buf
}

func (m* TLUpdateDialogFilterOrder) Decode(dbuf *DecodeBuf) error {
    m.SetOrder(dbuf.VectorInt())

    return dbuf.err
}
// updateDialogFilters#3504914f = Update;
func (m *TLUpdateDialogFilters) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateDialogFilters,
        Data2: m.Data2,
    }
}



func NewTLUpdateDialogFilters() * TLUpdateDialogFilters {
    return &TLUpdateDialogFilters{ Data2: &Update_Data{} }
}

func (m* TLUpdateDialogFilters) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateDialogFilters))


    return x.buf
}

func (m* TLUpdateDialogFilters) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// updatePhoneCallSignalingData#2661bf09 phone_call_id:long data:bytes = Update;
func (m *TLUpdatePhoneCallSignalingData) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updatePhoneCallSignalingData,
        Data2: m.Data2,
    }
}


func (m *TLUpdatePhoneCallSignalingData) SetPhoneCallId(v int64) { m.Data2.PhoneCallId = v }
func (m *TLUpdatePhoneCallSignalingData) GetPhoneCallId() int64 { return m.Data2.PhoneCallId }

func (m *TLUpdatePhoneCallSignalingData) SetData(v []byte) { m.Data2.Data_57 = v }
func (m *TLUpdatePhoneCallSignalingData) GetData() []byte { return m.Data2.Data_57 }


func NewTLUpdatePhoneCallSignalingData() * TLUpdatePhoneCallSignalingData {
    return &TLUpdatePhoneCallSignalingData{ Data2: &Update_Data{} }
}

func (m* TLUpdatePhoneCallSignalingData) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updatePhoneCallSignalingData))

    x.Long(m.GetPhoneCallId())
    x.StringBytes(m.GetData())

    return x.buf
}

func (m* TLUpdatePhoneCallSignalingData) Decode(dbuf *DecodeBuf) error {
    m.SetPhoneCallId(dbuf.Long())
    m.SetData(dbuf.StringBytes())

    return dbuf.err
}
// updateChannelParticipant#65d2b464 flags:# channel_id:int date:int user_id:int prev_participant:flags.0?ChannelParticipant new_participant:flags.1?ChannelParticipant qts:int = Update;
func (m *TLUpdateChannelParticipant) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updateChannelParticipant,
        Data2: m.Data2,
    }
}


func (m *TLUpdateChannelParticipant) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLUpdateChannelParticipant) GetChannelId() int32 { return m.Data2.ChannelId }

func (m *TLUpdateChannelParticipant) SetDate(v int32) { m.Data2.Date = v }
func (m *TLUpdateChannelParticipant) GetDate() int32 { return m.Data2.Date }

func (m *TLUpdateChannelParticipant) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLUpdateChannelParticipant) GetUserId() int32 { return m.Data2.UserId }

func (m *TLUpdateChannelParticipant) SetPrevParticipant(v *ChannelParticipant) { m.Data2.PrevParticipant = v }
func (m *TLUpdateChannelParticipant) GetPrevParticipant() *ChannelParticipant { return m.Data2.PrevParticipant }

func (m *TLUpdateChannelParticipant) SetNewParticipant(v *ChannelParticipant) { m.Data2.NewParticipant = v }
func (m *TLUpdateChannelParticipant) GetNewParticipant() *ChannelParticipant { return m.Data2.NewParticipant }

func (m *TLUpdateChannelParticipant) SetQts(v int32) { m.Data2.Qts = v }
func (m *TLUpdateChannelParticipant) GetQts() int32 { return m.Data2.Qts }


func NewTLUpdateChannelParticipant() * TLUpdateChannelParticipant {
    return &TLUpdateChannelParticipant{ Data2: &Update_Data{} }
}

func (m* TLUpdateChannelParticipant) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updateChannelParticipant))

    // flags
    var flags uint32 = 0
    if m.GetPrevParticipant() != nil { flags |= 1 << 0 }
    if m.GetNewParticipant() != nil { flags |= 1 << 1 }
	x.UInt(flags)

    x.Int(m.GetChannelId())
    x.Int(m.GetDate())
    x.Int(m.GetUserId())
    if (flags & (1 << 0)) != 0 { x.Bytes(m.GetPrevParticipant().Encode()) }
    if (flags & (1 << 1)) != 0 { x.Bytes(m.GetNewParticipant().Encode()) }
    x.Int(m.GetQts())

    return x.buf
}

func (m* TLUpdateChannelParticipant) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetChannelId(dbuf.Int())
    m.SetDate(dbuf.Int())
    m.SetUserId(dbuf.Int())
    if (flags & (1 << 0)) != 0 {
 m5 := &ChannelParticipant{}
    m5.Decode(dbuf)
    m.SetPrevParticipant(m5) 
}
    if (flags & (1 << 1)) != 0 {
 m6 := &ChannelParticipant{}
    m6.Decode(dbuf)
    m.SetNewParticipant(m6) 
}
    m.SetQts(dbuf.Int())

    return dbuf.err
}
// updatePinnedChannelMessages#8588878b flags:# pinned:flags.0?true channel_id:int messages:Vector<int> pts:int pts_count:int = Update;
func (m *TLUpdatePinnedChannelMessages) To_Update() *Update {
    return &Update{
        Constructor: TLConstructor_CRC32_updatePinnedChannelMessages,
        Data2: m.Data2,
    }
}


func (m *TLUpdatePinnedChannelMessages) SetPinned(v bool) { m.Data2.Pinned = v }
func (m *TLUpdatePinnedChannelMessages) GetPinned() bool { return m.Data2.Pinned }

func (m *TLUpdatePinnedChannelMessages) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLUpdatePinnedChannelMessages) GetChannelId() int32 { return m.Data2.ChannelId }

func (m *TLUpdatePinnedChannelMessages) SetMessages(v []int32) { m.Data2.Messages = v }
func (m *TLUpdatePinnedChannelMessages) GetMessages() []int32 { return m.Data2.Messages }

func (m *TLUpdatePinnedChannelMessages) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdatePinnedChannelMessages) GetPts() int32 { return m.Data2.Pts }

func (m *TLUpdatePinnedChannelMessages) SetPtsCount(v int32) { m.Data2.PtsCount = v }
func (m *TLUpdatePinnedChannelMessages) GetPtsCount() int32 { return m.Data2.PtsCount }


func NewTLUpdatePinnedChannelMessages() * TLUpdatePinnedChannelMessages {
    return &TLUpdatePinnedChannelMessages{ Data2: &Update_Data{} }
}

func (m* TLUpdatePinnedChannelMessages) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updatePinnedChannelMessages))

    // flags
    var flags uint32 = 0
    if m.GetPinned() == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Int(m.GetChannelId())
    x.VectorInt(m.GetMessages())

    x.Int(m.GetPts())
    x.Int(m.GetPtsCount())

    return x.buf
}

func (m* TLUpdatePinnedChannelMessages) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetPinned(true) }
    m.SetChannelId(dbuf.Int())
    m.SetMessages(dbuf.VectorInt())
    m.SetPts(dbuf.Int())
    m.SetPtsCount(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Help_AppUpdate <--
//  + TL_HelpAppUpdate
//  + TL_HelpNoAppUpdate
//  + TL_HelpAppUpdate114
//

func (m *Help_AppUpdate) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_help_appUpdate:
        t := m.To_HelpAppUpdate()
        return t.Encode()
    case TLConstructor_CRC32_help_noAppUpdate:
        t := m.To_HelpNoAppUpdate()
        return t.Encode()
    case TLConstructor_CRC32_help_appUpdate114:
        t := m.To_HelpAppUpdate114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Help_AppUpdate) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_help_appUpdate:
        m2 := &TLHelpAppUpdate{&Help_AppUpdate_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_help_noAppUpdate:
        m2 := &TLHelpNoAppUpdate{&Help_AppUpdate_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_help_appUpdate114:
        m2 := &TLHelpAppUpdate114{&Help_AppUpdate_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// help.appUpdate#8987f311 id:int critical:Bool url:string text:string = help.AppUpdate;
func (m *Help_AppUpdate) To_HelpAppUpdate() *TLHelpAppUpdate {
    return &TLHelpAppUpdate{
        Data2: m.Data2,
    }
}

// help.noAppUpdate#c45a6536 = help.AppUpdate;
func (m *Help_AppUpdate) To_HelpNoAppUpdate() *TLHelpNoAppUpdate {
    return &TLHelpNoAppUpdate{
        Data2: m.Data2,
    }
}

// help.appUpdate#1da7158f flags:# can_not_skip:flags.0?true id:int version:string text:string entities:Vector<MessageEntity> document:flags.1?Document url:flags.2?string = help.AppUpdate;
func (m *Help_AppUpdate) To_HelpAppUpdate114() *TLHelpAppUpdate114 {
    return &TLHelpAppUpdate114{
        Data2: m.Data2,
    }
}



// help.appUpdate#8987f311 id:int critical:Bool url:string text:string = help.AppUpdate;
func (m *TLHelpAppUpdate) To_Help_AppUpdate() *Help_AppUpdate {
    return &Help_AppUpdate{
        Constructor: TLConstructor_CRC32_help_appUpdate,
        Data2: m.Data2,
    }
}


func (m *TLHelpAppUpdate) SetId(v int32) { m.Data2.Id = v }
func (m *TLHelpAppUpdate) GetId() int32 { return m.Data2.Id }

func (m *TLHelpAppUpdate) SetCritical(v *Bool) { m.Data2.Critical = v }
func (m *TLHelpAppUpdate) GetCritical() *Bool { return m.Data2.Critical }

func (m *TLHelpAppUpdate) SetUrl(v string) { m.Data2.Url = v }
func (m *TLHelpAppUpdate) GetUrl() string { return m.Data2.Url }

func (m *TLHelpAppUpdate) SetText(v string) { m.Data2.Text = v }
func (m *TLHelpAppUpdate) GetText() string { return m.Data2.Text }


func NewTLHelpAppUpdate() * TLHelpAppUpdate {
    return &TLHelpAppUpdate{ Data2: &Help_AppUpdate_Data{} }
}

func (m* TLHelpAppUpdate) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_help_appUpdate))

    x.Int(m.GetId())
    x.Bytes(m.GetCritical().Encode())
    x.String(m.GetUrl())
    x.String(m.GetText())

    return x.buf
}

func (m* TLHelpAppUpdate) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Int())
    m2 := &Bool{}
    m2.Decode(dbuf)
    m.SetCritical(m2)
    m.SetUrl(dbuf.String())
    m.SetText(dbuf.String())

    return dbuf.err
}
// help.noAppUpdate#c45a6536 = help.AppUpdate;
func (m *TLHelpNoAppUpdate) To_Help_AppUpdate() *Help_AppUpdate {
    return &Help_AppUpdate{
        Constructor: TLConstructor_CRC32_help_noAppUpdate,
        Data2: m.Data2,
    }
}



func NewTLHelpNoAppUpdate() * TLHelpNoAppUpdate {
    return &TLHelpNoAppUpdate{ Data2: &Help_AppUpdate_Data{} }
}

func (m* TLHelpNoAppUpdate) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_help_noAppUpdate))


    return x.buf
}

func (m* TLHelpNoAppUpdate) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// help.appUpdate#1da7158f flags:# can_not_skip:flags.0?true id:int version:string text:string entities:Vector<MessageEntity> document:flags.1?Document url:flags.2?string = help.AppUpdate;
func (m *TLHelpAppUpdate114) To_Help_AppUpdate() *Help_AppUpdate {
    return &Help_AppUpdate{
        Constructor: TLConstructor_CRC32_help_appUpdate114,
        Data2: m.Data2,
    }
}


func (m *TLHelpAppUpdate114) SetCanNotSkip(v bool) { m.Data2.CanNotSkip = v }
func (m *TLHelpAppUpdate114) GetCanNotSkip() bool { return m.Data2.CanNotSkip }

func (m *TLHelpAppUpdate114) SetId(v int32) { m.Data2.Id = v }
func (m *TLHelpAppUpdate114) GetId() int32 { return m.Data2.Id }

func (m *TLHelpAppUpdate114) SetVersion(v string) { m.Data2.Version = v }
func (m *TLHelpAppUpdate114) GetVersion() string { return m.Data2.Version }

func (m *TLHelpAppUpdate114) SetText(v string) { m.Data2.Text = v }
func (m *TLHelpAppUpdate114) GetText() string { return m.Data2.Text }

func (m *TLHelpAppUpdate114) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLHelpAppUpdate114) GetEntities() []*MessageEntity { return m.Data2.Entities }

func (m *TLHelpAppUpdate114) SetDocument(v *Document) { m.Data2.Document = v }
func (m *TLHelpAppUpdate114) GetDocument() *Document { return m.Data2.Document }

func (m *TLHelpAppUpdate114) SetUrl(v string) { m.Data2.Url = v }
func (m *TLHelpAppUpdate114) GetUrl() string { return m.Data2.Url }


func NewTLHelpAppUpdate114() * TLHelpAppUpdate114 {
    return &TLHelpAppUpdate114{ Data2: &Help_AppUpdate_Data{} }
}

func (m* TLHelpAppUpdate114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_help_appUpdate114))

    // flags
    var flags uint32 = 0
    if m.GetCanNotSkip() == true { flags |= 1 << 0 }
    if m.GetDocument() != nil { flags |= 1 << 1 }
    if m.GetUrl() != "" { flags |= 1 << 2 }
	x.UInt(flags)

    
    x.Int(m.GetId())
    x.String(m.GetVersion())
    x.String(m.GetText())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetEntities())))
for _, v := range m.GetEntities() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    if (flags & (1 << 1)) != 0 { x.Bytes(m.GetDocument().Encode()) }
    if (flags & (1 << 2)) != 0 { x.String(m.GetUrl()) }

    return x.buf
}

func (m* TLHelpAppUpdate114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetCanNotSkip(true) }
    m.SetId(dbuf.Int())
    m.SetVersion(dbuf.String())
    m.SetText(dbuf.String())
    c6 := dbuf.Int()
if c6 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 6, c6)
	return dbuf.err
}
l6 := dbuf.Int()
v6 := make([]*MessageEntity, l6)
for i := int32(0); i < l6; i++ {
	v6[i] = &MessageEntity{}
	v6[i].Decode(dbuf)
}
m.SetEntities(v6)

    if (flags & (1 << 1)) != 0 {
 m7 := &Document{}
    m7.Decode(dbuf)
    m.SetDocument(m7) 
}
    if (flags & (1 << 2)) != 0 { m.SetUrl(dbuf.String()) }

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Help_RecentMeUrls <--
//  + TL_HelpRecentMeUrls
//

func (m *Help_RecentMeUrls) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_help_recentMeUrls:
        t := m.To_HelpRecentMeUrls()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Help_RecentMeUrls) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_help_recentMeUrls:
        m2 := &TLHelpRecentMeUrls{&Help_RecentMeUrls_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// help.recentMeUrls#e0310d7 urls:Vector<RecentMeUrl> chats:Vector<Chat> users:Vector<User> = help.RecentMeUrls;
func (m *Help_RecentMeUrls) To_HelpRecentMeUrls() *TLHelpRecentMeUrls {
    return &TLHelpRecentMeUrls{
        Data2: m.Data2,
    }
}



// help.recentMeUrls#e0310d7 urls:Vector<RecentMeUrl> chats:Vector<Chat> users:Vector<User> = help.RecentMeUrls;
func (m *TLHelpRecentMeUrls) To_Help_RecentMeUrls() *Help_RecentMeUrls {
    return &Help_RecentMeUrls{
        Constructor: TLConstructor_CRC32_help_recentMeUrls,
        Data2: m.Data2,
    }
}


func (m *TLHelpRecentMeUrls) SetUrls(v []*RecentMeUrl) { m.Data2.Urls = v }
func (m *TLHelpRecentMeUrls) GetUrls() []*RecentMeUrl { return m.Data2.Urls }

func (m *TLHelpRecentMeUrls) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLHelpRecentMeUrls) GetChats() []*Chat { return m.Data2.Chats }

func (m *TLHelpRecentMeUrls) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLHelpRecentMeUrls) GetUsers() []*User { return m.Data2.Users }


func NewTLHelpRecentMeUrls() * TLHelpRecentMeUrls {
    return &TLHelpRecentMeUrls{ Data2: &Help_RecentMeUrls_Data{} }
}

func (m* TLHelpRecentMeUrls) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_help_recentMeUrls))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUrls())))
for _, v := range m.GetUrls() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetChats())))
for _, v := range m.GetChats() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLHelpRecentMeUrls) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*RecentMeUrl, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &RecentMeUrl{}
	v1[i].Decode(dbuf)
}
m.SetUrls(v1)

    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*Chat, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &Chat{}
	v2[i].Decode(dbuf)
}
m.SetChats(v2)

    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*User, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &User{}
	v3[i].Decode(dbuf)
}
m.SetUsers(v3)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputPhotoCrop <--
//  + TL_InputPhotoCropAuto
//  + TL_InputPhotoCrop
//

func (m *InputPhotoCrop) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputPhotoCropAuto:
        t := m.To_InputPhotoCropAuto()
        return t.Encode()
    case TLConstructor_CRC32_inputPhotoCrop:
        t := m.To_InputPhotoCrop()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputPhotoCrop) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputPhotoCropAuto:
        m2 := &TLInputPhotoCropAuto{&InputPhotoCrop_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputPhotoCrop:
        m2 := &TLInputPhotoCrop{&InputPhotoCrop_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputPhotoCropAuto#ade6b004 = InputPhotoCrop;
func (m *InputPhotoCrop) To_InputPhotoCropAuto() *TLInputPhotoCropAuto {
    return &TLInputPhotoCropAuto{
        Data2: m.Data2,
    }
}

// inputPhotoCrop#d9915325 crop_left:double crop_top:double crop_width:double = InputPhotoCrop;
func (m *InputPhotoCrop) To_InputPhotoCrop() *TLInputPhotoCrop {
    return &TLInputPhotoCrop{
        Data2: m.Data2,
    }
}



// inputPhotoCropAuto#ade6b004 = InputPhotoCrop;
func (m *TLInputPhotoCropAuto) To_InputPhotoCrop() *InputPhotoCrop {
    return &InputPhotoCrop{
        Constructor: TLConstructor_CRC32_inputPhotoCropAuto,
        Data2: m.Data2,
    }
}



func NewTLInputPhotoCropAuto() * TLInputPhotoCropAuto {
    return &TLInputPhotoCropAuto{ Data2: &InputPhotoCrop_Data{} }
}

func (m* TLInputPhotoCropAuto) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPhotoCropAuto))


    return x.buf
}

func (m* TLInputPhotoCropAuto) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputPhotoCrop#d9915325 crop_left:double crop_top:double crop_width:double = InputPhotoCrop;
func (m *TLInputPhotoCrop) To_InputPhotoCrop() *InputPhotoCrop {
    return &InputPhotoCrop{
        Constructor: TLConstructor_CRC32_inputPhotoCrop,
        Data2: m.Data2,
    }
}


func (m *TLInputPhotoCrop) SetCropLeft(v float64) { m.Data2.CropLeft = v }
func (m *TLInputPhotoCrop) GetCropLeft() float64 { return m.Data2.CropLeft }

func (m *TLInputPhotoCrop) SetCropTop(v float64) { m.Data2.CropTop = v }
func (m *TLInputPhotoCrop) GetCropTop() float64 { return m.Data2.CropTop }

func (m *TLInputPhotoCrop) SetCropWidth(v float64) { m.Data2.CropWidth = v }
func (m *TLInputPhotoCrop) GetCropWidth() float64 { return m.Data2.CropWidth }


func NewTLInputPhotoCrop() * TLInputPhotoCrop {
    return &TLInputPhotoCrop{ Data2: &InputPhotoCrop_Data{} }
}

func (m* TLInputPhotoCrop) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPhotoCrop))

    x.Double(m.GetCropLeft())
    x.Double(m.GetCropTop())
    x.Double(m.GetCropWidth())

    return x.buf
}

func (m* TLInputPhotoCrop) Decode(dbuf *DecodeBuf) error {
    m.SetCropLeft(dbuf.Double())
    m.SetCropTop(dbuf.Double())
    m.SetCropWidth(dbuf.Double())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// SecureCredentialsEncrypted <--
//  + TL_SecureCredentialsEncrypted
//

func (m *SecureCredentialsEncrypted) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_secureCredentialsEncrypted:
        t := m.To_SecureCredentialsEncrypted()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *SecureCredentialsEncrypted) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_secureCredentialsEncrypted:
        m2 := &TLSecureCredentialsEncrypted{&SecureCredentialsEncrypted_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// secureCredentialsEncrypted#33f0ea47 data:bytes hash:bytes secret:bytes = SecureCredentialsEncrypted;
func (m *SecureCredentialsEncrypted) To_SecureCredentialsEncrypted() *TLSecureCredentialsEncrypted {
    return &TLSecureCredentialsEncrypted{
        Data2: m.Data2,
    }
}



// secureCredentialsEncrypted#33f0ea47 data:bytes hash:bytes secret:bytes = SecureCredentialsEncrypted;
func (m *TLSecureCredentialsEncrypted) To_SecureCredentialsEncrypted() *SecureCredentialsEncrypted {
    return &SecureCredentialsEncrypted{
        Constructor: TLConstructor_CRC32_secureCredentialsEncrypted,
        Data2: m.Data2,
    }
}


func (m *TLSecureCredentialsEncrypted) SetData(v []byte) { m.Data2.Data = v }
func (m *TLSecureCredentialsEncrypted) GetData() []byte { return m.Data2.Data }

func (m *TLSecureCredentialsEncrypted) SetHash(v []byte) { m.Data2.Hash = v }
func (m *TLSecureCredentialsEncrypted) GetHash() []byte { return m.Data2.Hash }

func (m *TLSecureCredentialsEncrypted) SetSecret(v []byte) { m.Data2.Secret = v }
func (m *TLSecureCredentialsEncrypted) GetSecret() []byte { return m.Data2.Secret }


func NewTLSecureCredentialsEncrypted() * TLSecureCredentialsEncrypted {
    return &TLSecureCredentialsEncrypted{ Data2: &SecureCredentialsEncrypted_Data{} }
}

func (m* TLSecureCredentialsEncrypted) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_secureCredentialsEncrypted))

    x.StringBytes(m.GetData())
    x.StringBytes(m.GetHash())
    x.StringBytes(m.GetSecret())

    return x.buf
}

func (m* TLSecureCredentialsEncrypted) Decode(dbuf *DecodeBuf) error {
    m.SetData(dbuf.StringBytes())
    m.SetHash(dbuf.StringBytes())
    m.SetSecret(dbuf.StringBytes())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// WebPageAttribute <--
//  + TL_WebPageAttributeTheme
//

func (m *WebPageAttribute) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_webPageAttributeTheme:
        t := m.To_WebPageAttributeTheme()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *WebPageAttribute) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_webPageAttributeTheme:
        m2 := &TLWebPageAttributeTheme{&WebPageAttribute_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// webPageAttributeTheme#54b56617 flags:# documents:flags.0?Vector<Document> settings:flags.1?ThemeSettings = WebPageAttribute;
func (m *WebPageAttribute) To_WebPageAttributeTheme() *TLWebPageAttributeTheme {
    return &TLWebPageAttributeTheme{
        Data2: m.Data2,
    }
}



// webPageAttributeTheme#54b56617 flags:# documents:flags.0?Vector<Document> settings:flags.1?ThemeSettings = WebPageAttribute;
func (m *TLWebPageAttributeTheme) To_WebPageAttribute() *WebPageAttribute {
    return &WebPageAttribute{
        Constructor: TLConstructor_CRC32_webPageAttributeTheme,
        Data2: m.Data2,
    }
}


func (m *TLWebPageAttributeTheme) SetDocuments(v []*Document) { m.Data2.Documents = v }
func (m *TLWebPageAttributeTheme) GetDocuments() []*Document { return m.Data2.Documents }

func (m *TLWebPageAttributeTheme) SetSettings(v *ThemeSettings) { m.Data2.Settings = v }
func (m *TLWebPageAttributeTheme) GetSettings() *ThemeSettings { return m.Data2.Settings }


func NewTLWebPageAttributeTheme() * TLWebPageAttributeTheme {
    return &TLWebPageAttributeTheme{ Data2: &WebPageAttribute_Data{} }
}

func (m* TLWebPageAttributeTheme) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_webPageAttributeTheme))

    // flags
    var flags uint32 = 0
    if m.GetDocuments() != nil { flags |= 1 << 0 }
    if m.GetSettings() != nil { flags |= 1 << 1 }
	x.UInt(flags)

    if (flags & (1 << 0)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetDocuments())))
for _, v := range m.GetDocuments() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}
    if (flags & (1 << 1)) != 0 { x.Bytes(m.GetSettings().Encode()) }

    return x.buf
}

func (m* TLWebPageAttributeTheme) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 {
 c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*Document, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &Document{}
	v2[i].Decode(dbuf)
}
m.SetDocuments(v2)
 
}
    if (flags & (1 << 1)) != 0 {
 m3 := &ThemeSettings{}
    m3.Decode(dbuf)
    m.SetSettings(m3) 
}

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// UserFull <--
//  + TL_UserFull
//  + TL_UserFull117
//

func (m *UserFull) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_userFull:
        t := m.To_UserFull()
        return t.Encode()
    case TLConstructor_CRC32_userFull117:
        t := m.To_UserFull117()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *UserFull) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_userFull:
        m2 := &TLUserFull{&UserFull_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_userFull117:
        m2 := &TLUserFull117{&UserFull_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// userFull#f220f3f flags:# blocked:flags.0?true phone_calls_available:flags.4?true phone_calls_private:flags.5?true user:User about:flags.1?string link:contacts.Link profile_photo:flags.2?Photo notify_settings:PeerNotifySettings bot_info:flags.3?BotInfo common_chats_count:int = UserFull;
func (m *UserFull) To_UserFull() *TLUserFull {
    return &TLUserFull{
        Data2: m.Data2,
    }
}

// userFull#edf17c12 flags:# blocked:flags.0?true phone_calls_available:flags.4?true phone_calls_private:flags.5?true can_pin_message:flags.7?true has_scheduled:flags.12?true video_calls_available:flags.13?true user:User about:flags.1?string settings:PeerSettings profile_photo:flags.2?Photo notify_settings:PeerNotifySettings bot_info:flags.3?BotInfo pinned_msg_id:flags.6?int common_chats_count:int folder_id:flags.11?int = UserFull;
func (m *UserFull) To_UserFull117() *TLUserFull117 {
    return &TLUserFull117{
        Data2: m.Data2,
    }
}



// userFull#f220f3f flags:# blocked:flags.0?true phone_calls_available:flags.4?true phone_calls_private:flags.5?true user:User about:flags.1?string link:contacts.Link profile_photo:flags.2?Photo notify_settings:PeerNotifySettings bot_info:flags.3?BotInfo common_chats_count:int = UserFull;
func (m *TLUserFull) To_UserFull() *UserFull {
    return &UserFull{
        Constructor: TLConstructor_CRC32_userFull,
        Data2: m.Data2,
    }
}


func (m *TLUserFull) SetBlocked(v bool) { m.Data2.Blocked = v }
func (m *TLUserFull) GetBlocked() bool { return m.Data2.Blocked }

func (m *TLUserFull) SetPhoneCallsAvailable(v bool) { m.Data2.PhoneCallsAvailable = v }
func (m *TLUserFull) GetPhoneCallsAvailable() bool { return m.Data2.PhoneCallsAvailable }

func (m *TLUserFull) SetPhoneCallsPrivate(v bool) { m.Data2.PhoneCallsPrivate = v }
func (m *TLUserFull) GetPhoneCallsPrivate() bool { return m.Data2.PhoneCallsPrivate }

func (m *TLUserFull) SetUser(v *User) { m.Data2.User = v }
func (m *TLUserFull) GetUser() *User { return m.Data2.User }

func (m *TLUserFull) SetAbout(v string) { m.Data2.About = v }
func (m *TLUserFull) GetAbout() string { return m.Data2.About }

func (m *TLUserFull) SetLink(v *Contacts_Link) { m.Data2.Link = v }
func (m *TLUserFull) GetLink() *Contacts_Link { return m.Data2.Link }

func (m *TLUserFull) SetProfilePhoto(v *Photo) { m.Data2.ProfilePhoto = v }
func (m *TLUserFull) GetProfilePhoto() *Photo { return m.Data2.ProfilePhoto }

func (m *TLUserFull) SetNotifySettings(v *PeerNotifySettings) { m.Data2.NotifySettings = v }
func (m *TLUserFull) GetNotifySettings() *PeerNotifySettings { return m.Data2.NotifySettings }

func (m *TLUserFull) SetBotInfo(v *BotInfo) { m.Data2.BotInfo = v }
func (m *TLUserFull) GetBotInfo() *BotInfo { return m.Data2.BotInfo }

func (m *TLUserFull) SetCommonChatsCount(v int32) { m.Data2.CommonChatsCount = v }
func (m *TLUserFull) GetCommonChatsCount() int32 { return m.Data2.CommonChatsCount }


func NewTLUserFull() * TLUserFull {
    return &TLUserFull{ Data2: &UserFull_Data{} }
}

func (m* TLUserFull) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_userFull))

    // flags
    var flags uint32 = 0
    if m.GetBlocked() == true { flags |= 1 << 0 }
    if m.GetPhoneCallsAvailable() == true { flags |= 1 << 4 }
    if m.GetPhoneCallsPrivate() == true { flags |= 1 << 5 }
    if m.GetAbout() != "" { flags |= 1 << 1 }
    if m.GetProfilePhoto() != nil { flags |= 1 << 2 }
    if m.GetBotInfo() != nil { flags |= 1 << 3 }
	x.UInt(flags)

    
    
    
    x.Bytes(m.GetUser().Encode())
    if (flags & (1 << 1)) != 0 { x.String(m.GetAbout()) }
    x.Bytes(m.GetLink().Encode())
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetProfilePhoto().Encode()) }
    x.Bytes(m.GetNotifySettings().Encode())
    if (flags & (1 << 3)) != 0 { x.Bytes(m.GetBotInfo().Encode()) }
    x.Int(m.GetCommonChatsCount())

    return x.buf
}

func (m* TLUserFull) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetBlocked(true) }
    if (flags & (1 << 4)) != 0 { m.SetPhoneCallsAvailable(true) }
    if (flags & (1 << 5)) != 0 { m.SetPhoneCallsPrivate(true) }
    m5 := &User{}
    m5.Decode(dbuf)
    m.SetUser(m5)
    if (flags & (1 << 1)) != 0 { m.SetAbout(dbuf.String()) }
    m7 := &Contacts_Link{}
    m7.Decode(dbuf)
    m.SetLink(m7)
    if (flags & (1 << 2)) != 0 {
 m8 := &Photo{}
    m8.Decode(dbuf)
    m.SetProfilePhoto(m8) 
}
    m9 := &PeerNotifySettings{}
    m9.Decode(dbuf)
    m.SetNotifySettings(m9)
    if (flags & (1 << 3)) != 0 {
 m10 := &BotInfo{}
    m10.Decode(dbuf)
    m.SetBotInfo(m10) 
}
    m.SetCommonChatsCount(dbuf.Int())

    return dbuf.err
}
// userFull#edf17c12 flags:# blocked:flags.0?true phone_calls_available:flags.4?true phone_calls_private:flags.5?true can_pin_message:flags.7?true has_scheduled:flags.12?true video_calls_available:flags.13?true user:User about:flags.1?string settings:PeerSettings profile_photo:flags.2?Photo notify_settings:PeerNotifySettings bot_info:flags.3?BotInfo pinned_msg_id:flags.6?int common_chats_count:int folder_id:flags.11?int = UserFull;
func (m *TLUserFull117) To_UserFull() *UserFull {
    return &UserFull{
        Constructor: TLConstructor_CRC32_userFull117,
        Data2: m.Data2,
    }
}


func (m *TLUserFull117) SetBlocked(v bool) { m.Data2.Blocked = v }
func (m *TLUserFull117) GetBlocked() bool { return m.Data2.Blocked }

func (m *TLUserFull117) SetPhoneCallsAvailable(v bool) { m.Data2.PhoneCallsAvailable = v }
func (m *TLUserFull117) GetPhoneCallsAvailable() bool { return m.Data2.PhoneCallsAvailable }

func (m *TLUserFull117) SetPhoneCallsPrivate(v bool) { m.Data2.PhoneCallsPrivate = v }
func (m *TLUserFull117) GetPhoneCallsPrivate() bool { return m.Data2.PhoneCallsPrivate }

func (m *TLUserFull117) SetCanPinMessage(v bool) { m.Data2.CanPinMessage = v }
func (m *TLUserFull117) GetCanPinMessage() bool { return m.Data2.CanPinMessage }

func (m *TLUserFull117) SetHasScheduled(v bool) { m.Data2.HasScheduled = v }
func (m *TLUserFull117) GetHasScheduled() bool { return m.Data2.HasScheduled }

func (m *TLUserFull117) SetVideoCallsAvailable(v bool) { m.Data2.VideoCallsAvailable = v }
func (m *TLUserFull117) GetVideoCallsAvailable() bool { return m.Data2.VideoCallsAvailable }

func (m *TLUserFull117) SetUser(v *User) { m.Data2.User = v }
func (m *TLUserFull117) GetUser() *User { return m.Data2.User }

func (m *TLUserFull117) SetAbout(v string) { m.Data2.About = v }
func (m *TLUserFull117) GetAbout() string { return m.Data2.About }

func (m *TLUserFull117) SetSettings(v *PeerSettings) { m.Data2.Settings = v }
func (m *TLUserFull117) GetSettings() *PeerSettings { return m.Data2.Settings }

func (m *TLUserFull117) SetProfilePhoto(v *Photo) { m.Data2.ProfilePhoto = v }
func (m *TLUserFull117) GetProfilePhoto() *Photo { return m.Data2.ProfilePhoto }

func (m *TLUserFull117) SetNotifySettings(v *PeerNotifySettings) { m.Data2.NotifySettings = v }
func (m *TLUserFull117) GetNotifySettings() *PeerNotifySettings { return m.Data2.NotifySettings }

func (m *TLUserFull117) SetBotInfo(v *BotInfo) { m.Data2.BotInfo = v }
func (m *TLUserFull117) GetBotInfo() *BotInfo { return m.Data2.BotInfo }

func (m *TLUserFull117) SetPinnedMsgId(v int32) { m.Data2.PinnedMsgId = v }
func (m *TLUserFull117) GetPinnedMsgId() int32 { return m.Data2.PinnedMsgId }

func (m *TLUserFull117) SetCommonChatsCount(v int32) { m.Data2.CommonChatsCount = v }
func (m *TLUserFull117) GetCommonChatsCount() int32 { return m.Data2.CommonChatsCount }

func (m *TLUserFull117) SetFolderId(v int32) { m.Data2.FolderId = v }
func (m *TLUserFull117) GetFolderId() int32 { return m.Data2.FolderId }


func NewTLUserFull117() * TLUserFull117 {
    return &TLUserFull117{ Data2: &UserFull_Data{} }
}

func (m* TLUserFull117) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_userFull117))

    // flags
    var flags uint32 = 0
    if m.GetBlocked() == true { flags |= 1 << 0 }
    if m.GetPhoneCallsAvailable() == true { flags |= 1 << 4 }
    if m.GetPhoneCallsPrivate() == true { flags |= 1 << 5 }
    if m.GetCanPinMessage() == true { flags |= 1 << 7 }
    if m.GetHasScheduled() == true { flags |= 1 << 12 }
    if m.GetVideoCallsAvailable() == true { flags |= 1 << 13 }
    if m.GetAbout() != "" { flags |= 1 << 1 }
    if m.GetProfilePhoto() != nil { flags |= 1 << 2 }
    if m.GetBotInfo() != nil { flags |= 1 << 3 }
    if m.GetPinnedMsgId() != 0 { flags |= 1 << 6 }
    if m.GetFolderId() != 0 { flags |= 1 << 11 }
	x.UInt(flags)

    
    
    
    
    
    
    x.Bytes(m.GetUser().Encode())
    if (flags & (1 << 1)) != 0 { x.String(m.GetAbout()) }
    x.Bytes(m.GetSettings().Encode())
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetProfilePhoto().Encode()) }
    x.Bytes(m.GetNotifySettings().Encode())
    if (flags & (1 << 3)) != 0 { x.Bytes(m.GetBotInfo().Encode()) }
    if (flags & (1 << 6)) != 0 { x.Int(m.GetPinnedMsgId()) }
    x.Int(m.GetCommonChatsCount())
    if (flags & (1 << 11)) != 0 { x.Int(m.GetFolderId()) }

    return x.buf
}

func (m* TLUserFull117) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetBlocked(true) }
    if (flags & (1 << 4)) != 0 { m.SetPhoneCallsAvailable(true) }
    if (flags & (1 << 5)) != 0 { m.SetPhoneCallsPrivate(true) }
    if (flags & (1 << 7)) != 0 { m.SetCanPinMessage(true) }
    if (flags & (1 << 12)) != 0 { m.SetHasScheduled(true) }
    if (flags & (1 << 13)) != 0 { m.SetVideoCallsAvailable(true) }
    m8 := &User{}
    m8.Decode(dbuf)
    m.SetUser(m8)
    if (flags & (1 << 1)) != 0 { m.SetAbout(dbuf.String()) }
    m10 := &PeerSettings{}
    m10.Decode(dbuf)
    m.SetSettings(m10)
    if (flags & (1 << 2)) != 0 {
 m11 := &Photo{}
    m11.Decode(dbuf)
    m.SetProfilePhoto(m11) 
}
    m12 := &PeerNotifySettings{}
    m12.Decode(dbuf)
    m.SetNotifySettings(m12)
    if (flags & (1 << 3)) != 0 {
 m13 := &BotInfo{}
    m13.Decode(dbuf)
    m.SetBotInfo(m13) 
}
    if (flags & (1 << 6)) != 0 { m.SetPinnedMsgId(dbuf.Int()) }
    m.SetCommonChatsCount(dbuf.Int())
    if (flags & (1 << 11)) != 0 { m.SetFolderId(dbuf.Int()) }

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Messages_StickerSet <--
//  + TL_MessagesStickerSet
//

func (m *Messages_StickerSet) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messages_stickerSet:
        t := m.To_MessagesStickerSet()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Messages_StickerSet) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messages_stickerSet:
        m2 := &TLMessagesStickerSet{&Messages_StickerSet_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messages.stickerSet#b60a24a6 set:StickerSet packs:Vector<StickerPack> documents:Vector<Document> = messages.StickerSet;
func (m *Messages_StickerSet) To_MessagesStickerSet() *TLMessagesStickerSet {
    return &TLMessagesStickerSet{
        Data2: m.Data2,
    }
}



// messages.stickerSet#b60a24a6 set:StickerSet packs:Vector<StickerPack> documents:Vector<Document> = messages.StickerSet;
func (m *TLMessagesStickerSet) To_Messages_StickerSet() *Messages_StickerSet {
    return &Messages_StickerSet{
        Constructor: TLConstructor_CRC32_messages_stickerSet,
        Data2: m.Data2,
    }
}


func (m *TLMessagesStickerSet) SetSet(v *StickerSet) { m.Data2.Set = v }
func (m *TLMessagesStickerSet) GetSet() *StickerSet { return m.Data2.Set }

func (m *TLMessagesStickerSet) SetPacks(v []*StickerPack) { m.Data2.Packs = v }
func (m *TLMessagesStickerSet) GetPacks() []*StickerPack { return m.Data2.Packs }

func (m *TLMessagesStickerSet) SetDocuments(v []*Document) { m.Data2.Documents = v }
func (m *TLMessagesStickerSet) GetDocuments() []*Document { return m.Data2.Documents }


func NewTLMessagesStickerSet() * TLMessagesStickerSet {
    return &TLMessagesStickerSet{ Data2: &Messages_StickerSet_Data{} }
}

func (m* TLMessagesStickerSet) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_stickerSet))

    x.Bytes(m.GetSet().Encode())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetPacks())))
for _, v := range m.GetPacks() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetDocuments())))
for _, v := range m.GetDocuments() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLMessagesStickerSet) Decode(dbuf *DecodeBuf) error {
    m1 := &StickerSet{}
    m1.Decode(dbuf)
    m.SetSet(m1)
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*StickerPack, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &StickerPack{}
	v2[i].Decode(dbuf)
}
m.SetPacks(v2)

    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*Document, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &Document{}
	v3[i].Decode(dbuf)
}
m.SetDocuments(v3)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// RecentMeUrl <--
//  + TL_RecentMeUrlUnknown
//  + TL_RecentMeUrlUser
//  + TL_RecentMeUrlChat
//  + TL_RecentMeUrlChatInvite
//  + TL_RecentMeUrlStickerSet
//

func (m *RecentMeUrl) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_recentMeUrlUnknown:
        t := m.To_RecentMeUrlUnknown()
        return t.Encode()
    case TLConstructor_CRC32_recentMeUrlUser:
        t := m.To_RecentMeUrlUser()
        return t.Encode()
    case TLConstructor_CRC32_recentMeUrlChat:
        t := m.To_RecentMeUrlChat()
        return t.Encode()
    case TLConstructor_CRC32_recentMeUrlChatInvite:
        t := m.To_RecentMeUrlChatInvite()
        return t.Encode()
    case TLConstructor_CRC32_recentMeUrlStickerSet:
        t := m.To_RecentMeUrlStickerSet()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *RecentMeUrl) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_recentMeUrlUnknown:
        m2 := &TLRecentMeUrlUnknown{&RecentMeUrl_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_recentMeUrlUser:
        m2 := &TLRecentMeUrlUser{&RecentMeUrl_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_recentMeUrlChat:
        m2 := &TLRecentMeUrlChat{&RecentMeUrl_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_recentMeUrlChatInvite:
        m2 := &TLRecentMeUrlChatInvite{&RecentMeUrl_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_recentMeUrlStickerSet:
        m2 := &TLRecentMeUrlStickerSet{&RecentMeUrl_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// recentMeUrlUnknown#46e1d13d url:string = RecentMeUrl;
func (m *RecentMeUrl) To_RecentMeUrlUnknown() *TLRecentMeUrlUnknown {
    return &TLRecentMeUrlUnknown{
        Data2: m.Data2,
    }
}

// recentMeUrlUser#8dbc3336 url:string user_id:int = RecentMeUrl;
func (m *RecentMeUrl) To_RecentMeUrlUser() *TLRecentMeUrlUser {
    return &TLRecentMeUrlUser{
        Data2: m.Data2,
    }
}

// recentMeUrlChat#a01b22f9 url:string chat_id:int = RecentMeUrl;
func (m *RecentMeUrl) To_RecentMeUrlChat() *TLRecentMeUrlChat {
    return &TLRecentMeUrlChat{
        Data2: m.Data2,
    }
}

// recentMeUrlChatInvite#eb49081d url:string chat_invite:ChatInvite = RecentMeUrl;
func (m *RecentMeUrl) To_RecentMeUrlChatInvite() *TLRecentMeUrlChatInvite {
    return &TLRecentMeUrlChatInvite{
        Data2: m.Data2,
    }
}

// recentMeUrlStickerSet#bc0a57dc url:string set:StickerSetCovered = RecentMeUrl;
func (m *RecentMeUrl) To_RecentMeUrlStickerSet() *TLRecentMeUrlStickerSet {
    return &TLRecentMeUrlStickerSet{
        Data2: m.Data2,
    }
}



// recentMeUrlUnknown#46e1d13d url:string = RecentMeUrl;
func (m *TLRecentMeUrlUnknown) To_RecentMeUrl() *RecentMeUrl {
    return &RecentMeUrl{
        Constructor: TLConstructor_CRC32_recentMeUrlUnknown,
        Data2: m.Data2,
    }
}


func (m *TLRecentMeUrlUnknown) SetUrl(v string) { m.Data2.Url = v }
func (m *TLRecentMeUrlUnknown) GetUrl() string { return m.Data2.Url }


func NewTLRecentMeUrlUnknown() * TLRecentMeUrlUnknown {
    return &TLRecentMeUrlUnknown{ Data2: &RecentMeUrl_Data{} }
}

func (m* TLRecentMeUrlUnknown) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_recentMeUrlUnknown))

    x.String(m.GetUrl())

    return x.buf
}

func (m* TLRecentMeUrlUnknown) Decode(dbuf *DecodeBuf) error {
    m.SetUrl(dbuf.String())

    return dbuf.err
}
// recentMeUrlUser#8dbc3336 url:string user_id:int = RecentMeUrl;
func (m *TLRecentMeUrlUser) To_RecentMeUrl() *RecentMeUrl {
    return &RecentMeUrl{
        Constructor: TLConstructor_CRC32_recentMeUrlUser,
        Data2: m.Data2,
    }
}


func (m *TLRecentMeUrlUser) SetUrl(v string) { m.Data2.Url = v }
func (m *TLRecentMeUrlUser) GetUrl() string { return m.Data2.Url }

func (m *TLRecentMeUrlUser) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLRecentMeUrlUser) GetUserId() int32 { return m.Data2.UserId }


func NewTLRecentMeUrlUser() * TLRecentMeUrlUser {
    return &TLRecentMeUrlUser{ Data2: &RecentMeUrl_Data{} }
}

func (m* TLRecentMeUrlUser) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_recentMeUrlUser))

    x.String(m.GetUrl())
    x.Int(m.GetUserId())

    return x.buf
}

func (m* TLRecentMeUrlUser) Decode(dbuf *DecodeBuf) error {
    m.SetUrl(dbuf.String())
    m.SetUserId(dbuf.Int())

    return dbuf.err
}
// recentMeUrlChat#a01b22f9 url:string chat_id:int = RecentMeUrl;
func (m *TLRecentMeUrlChat) To_RecentMeUrl() *RecentMeUrl {
    return &RecentMeUrl{
        Constructor: TLConstructor_CRC32_recentMeUrlChat,
        Data2: m.Data2,
    }
}


func (m *TLRecentMeUrlChat) SetUrl(v string) { m.Data2.Url = v }
func (m *TLRecentMeUrlChat) GetUrl() string { return m.Data2.Url }

func (m *TLRecentMeUrlChat) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLRecentMeUrlChat) GetChatId() int32 { return m.Data2.ChatId }


func NewTLRecentMeUrlChat() * TLRecentMeUrlChat {
    return &TLRecentMeUrlChat{ Data2: &RecentMeUrl_Data{} }
}

func (m* TLRecentMeUrlChat) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_recentMeUrlChat))

    x.String(m.GetUrl())
    x.Int(m.GetChatId())

    return x.buf
}

func (m* TLRecentMeUrlChat) Decode(dbuf *DecodeBuf) error {
    m.SetUrl(dbuf.String())
    m.SetChatId(dbuf.Int())

    return dbuf.err
}
// recentMeUrlChatInvite#eb49081d url:string chat_invite:ChatInvite = RecentMeUrl;
func (m *TLRecentMeUrlChatInvite) To_RecentMeUrl() *RecentMeUrl {
    return &RecentMeUrl{
        Constructor: TLConstructor_CRC32_recentMeUrlChatInvite,
        Data2: m.Data2,
    }
}


func (m *TLRecentMeUrlChatInvite) SetUrl(v string) { m.Data2.Url = v }
func (m *TLRecentMeUrlChatInvite) GetUrl() string { return m.Data2.Url }

func (m *TLRecentMeUrlChatInvite) SetChatInvite(v *ChatInvite) { m.Data2.ChatInvite = v }
func (m *TLRecentMeUrlChatInvite) GetChatInvite() *ChatInvite { return m.Data2.ChatInvite }


func NewTLRecentMeUrlChatInvite() * TLRecentMeUrlChatInvite {
    return &TLRecentMeUrlChatInvite{ Data2: &RecentMeUrl_Data{} }
}

func (m* TLRecentMeUrlChatInvite) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_recentMeUrlChatInvite))

    x.String(m.GetUrl())
    x.Bytes(m.GetChatInvite().Encode())

    return x.buf
}

func (m* TLRecentMeUrlChatInvite) Decode(dbuf *DecodeBuf) error {
    m.SetUrl(dbuf.String())
    m2 := &ChatInvite{}
    m2.Decode(dbuf)
    m.SetChatInvite(m2)

    return dbuf.err
}
// recentMeUrlStickerSet#bc0a57dc url:string set:StickerSetCovered = RecentMeUrl;
func (m *TLRecentMeUrlStickerSet) To_RecentMeUrl() *RecentMeUrl {
    return &RecentMeUrl{
        Constructor: TLConstructor_CRC32_recentMeUrlStickerSet,
        Data2: m.Data2,
    }
}


func (m *TLRecentMeUrlStickerSet) SetUrl(v string) { m.Data2.Url = v }
func (m *TLRecentMeUrlStickerSet) GetUrl() string { return m.Data2.Url }

func (m *TLRecentMeUrlStickerSet) SetSet(v *StickerSetCovered) { m.Data2.Set = v }
func (m *TLRecentMeUrlStickerSet) GetSet() *StickerSetCovered { return m.Data2.Set }


func NewTLRecentMeUrlStickerSet() * TLRecentMeUrlStickerSet {
    return &TLRecentMeUrlStickerSet{ Data2: &RecentMeUrl_Data{} }
}

func (m* TLRecentMeUrlStickerSet) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_recentMeUrlStickerSet))

    x.String(m.GetUrl())
    x.Bytes(m.GetSet().Encode())

    return x.buf
}

func (m* TLRecentMeUrlStickerSet) Decode(dbuf *DecodeBuf) error {
    m.SetUrl(dbuf.String())
    m2 := &StickerSetCovered{}
    m2.Decode(dbuf)
    m.SetSet(m2)

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Help_UserInfo <--
//  + TL_HelpUserInfoEmpty
//  + TL_HelpUserInfo
//

func (m *Help_UserInfo) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_help_userInfoEmpty:
        t := m.To_HelpUserInfoEmpty()
        return t.Encode()
    case TLConstructor_CRC32_help_userInfo:
        t := m.To_HelpUserInfo()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Help_UserInfo) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_help_userInfoEmpty:
        m2 := &TLHelpUserInfoEmpty{&Help_UserInfo_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_help_userInfo:
        m2 := &TLHelpUserInfo{&Help_UserInfo_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// help.userInfoEmpty#f3ae2eed = help.UserInfo;
func (m *Help_UserInfo) To_HelpUserInfoEmpty() *TLHelpUserInfoEmpty {
    return &TLHelpUserInfoEmpty{
        Data2: m.Data2,
    }
}

// help.userInfo#1eb3758 message:string entities:Vector<MessageEntity> author:string date:int = help.UserInfo;
func (m *Help_UserInfo) To_HelpUserInfo() *TLHelpUserInfo {
    return &TLHelpUserInfo{
        Data2: m.Data2,
    }
}



// help.userInfoEmpty#f3ae2eed = help.UserInfo;
func (m *TLHelpUserInfoEmpty) To_Help_UserInfo() *Help_UserInfo {
    return &Help_UserInfo{
        Constructor: TLConstructor_CRC32_help_userInfoEmpty,
        Data2: m.Data2,
    }
}



func NewTLHelpUserInfoEmpty() * TLHelpUserInfoEmpty {
    return &TLHelpUserInfoEmpty{ Data2: &Help_UserInfo_Data{} }
}

func (m* TLHelpUserInfoEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_help_userInfoEmpty))


    return x.buf
}

func (m* TLHelpUserInfoEmpty) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// help.userInfo#1eb3758 message:string entities:Vector<MessageEntity> author:string date:int = help.UserInfo;
func (m *TLHelpUserInfo) To_Help_UserInfo() *Help_UserInfo {
    return &Help_UserInfo{
        Constructor: TLConstructor_CRC32_help_userInfo,
        Data2: m.Data2,
    }
}


func (m *TLHelpUserInfo) SetMessage(v string) { m.Data2.Message = v }
func (m *TLHelpUserInfo) GetMessage() string { return m.Data2.Message }

func (m *TLHelpUserInfo) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLHelpUserInfo) GetEntities() []*MessageEntity { return m.Data2.Entities }

func (m *TLHelpUserInfo) SetAuthor(v string) { m.Data2.Author = v }
func (m *TLHelpUserInfo) GetAuthor() string { return m.Data2.Author }

func (m *TLHelpUserInfo) SetDate(v int32) { m.Data2.Date = v }
func (m *TLHelpUserInfo) GetDate() int32 { return m.Data2.Date }


func NewTLHelpUserInfo() * TLHelpUserInfo {
    return &TLHelpUserInfo{ Data2: &Help_UserInfo_Data{} }
}

func (m* TLHelpUserInfo) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_help_userInfo))

    x.String(m.GetMessage())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetEntities())))
for _, v := range m.GetEntities() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.String(m.GetAuthor())
    x.Int(m.GetDate())

    return x.buf
}

func (m* TLHelpUserInfo) Decode(dbuf *DecodeBuf) error {
    m.SetMessage(dbuf.String())
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*MessageEntity, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &MessageEntity{}
	v2[i].Decode(dbuf)
}
m.SetEntities(v2)

    m.SetAuthor(dbuf.String())
    m.SetDate(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Account_WallPapers <--
//  + TL_AccountWallPapersNotModified
//  + TL_AccountWallPapers
//

func (m *Account_WallPapers) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_account_wallPapersNotModified:
        t := m.To_AccountWallPapersNotModified()
        return t.Encode()
    case TLConstructor_CRC32_account_wallPapers:
        t := m.To_AccountWallPapers()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Account_WallPapers) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_account_wallPapersNotModified:
        m2 := &TLAccountWallPapersNotModified{&Account_WallPapers_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_account_wallPapers:
        m2 := &TLAccountWallPapers{&Account_WallPapers_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// account.wallPapersNotModified#1c199183 = account.WallPapers;
func (m *Account_WallPapers) To_AccountWallPapersNotModified() *TLAccountWallPapersNotModified {
    return &TLAccountWallPapersNotModified{
        Data2: m.Data2,
    }
}

// account.wallPapers#702b65a9 hash:int wallpapers:Vector<WallPaper> = account.WallPapers;
func (m *Account_WallPapers) To_AccountWallPapers() *TLAccountWallPapers {
    return &TLAccountWallPapers{
        Data2: m.Data2,
    }
}



// account.wallPapersNotModified#1c199183 = account.WallPapers;
func (m *TLAccountWallPapersNotModified) To_Account_WallPapers() *Account_WallPapers {
    return &Account_WallPapers{
        Constructor: TLConstructor_CRC32_account_wallPapersNotModified,
        Data2: m.Data2,
    }
}



func NewTLAccountWallPapersNotModified() * TLAccountWallPapersNotModified {
    return &TLAccountWallPapersNotModified{ Data2: &Account_WallPapers_Data{} }
}

func (m* TLAccountWallPapersNotModified) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_account_wallPapersNotModified))


    return x.buf
}

func (m* TLAccountWallPapersNotModified) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// account.wallPapers#702b65a9 hash:int wallpapers:Vector<WallPaper> = account.WallPapers;
func (m *TLAccountWallPapers) To_Account_WallPapers() *Account_WallPapers {
    return &Account_WallPapers{
        Constructor: TLConstructor_CRC32_account_wallPapers,
        Data2: m.Data2,
    }
}


func (m *TLAccountWallPapers) SetHash(v int32) { m.Data2.Hash = v }
func (m *TLAccountWallPapers) GetHash() int32 { return m.Data2.Hash }

func (m *TLAccountWallPapers) SetWallpapers(v []*WallPaper) { m.Data2.Wallpapers = v }
func (m *TLAccountWallPapers) GetWallpapers() []*WallPaper { return m.Data2.Wallpapers }


func NewTLAccountWallPapers() * TLAccountWallPapers {
    return &TLAccountWallPapers{ Data2: &Account_WallPapers_Data{} }
}

func (m* TLAccountWallPapers) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_account_wallPapers))

    x.Int(m.GetHash())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetWallpapers())))
for _, v := range m.GetWallpapers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLAccountWallPapers) Decode(dbuf *DecodeBuf) error {
    m.SetHash(dbuf.Int())
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*WallPaper, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &WallPaper{}
	v2[i].Decode(dbuf)
}
m.SetWallpapers(v2)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// StatsGraph <--
//  + TL_StatsGraphAsync
//  + TL_StatsGraphError
//  + TL_StatsGraph
//

func (m *StatsGraph) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_statsGraphAsync:
        t := m.To_StatsGraphAsync()
        return t.Encode()
    case TLConstructor_CRC32_statsGraphError:
        t := m.To_StatsGraphError()
        return t.Encode()
    case TLConstructor_CRC32_statsGraph:
        t := m.To_StatsGraph()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *StatsGraph) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_statsGraphAsync:
        m2 := &TLStatsGraphAsync{&StatsGraph_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_statsGraphError:
        m2 := &TLStatsGraphError{&StatsGraph_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_statsGraph:
        m2 := &TLStatsGraph{&StatsGraph_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// statsGraphAsync#4a27eb2d token:string = StatsGraph;
func (m *StatsGraph) To_StatsGraphAsync() *TLStatsGraphAsync {
    return &TLStatsGraphAsync{
        Data2: m.Data2,
    }
}

// statsGraphError#bedc9822 error:string = StatsGraph;
func (m *StatsGraph) To_StatsGraphError() *TLStatsGraphError {
    return &TLStatsGraphError{
        Data2: m.Data2,
    }
}

// statsGraph#8ea464b6 flags:# json:DataJSON zoom_token:flags.0?string = StatsGraph;
func (m *StatsGraph) To_StatsGraph() *TLStatsGraph {
    return &TLStatsGraph{
        Data2: m.Data2,
    }
}



// statsGraphAsync#4a27eb2d token:string = StatsGraph;
func (m *TLStatsGraphAsync) To_StatsGraph() *StatsGraph {
    return &StatsGraph{
        Constructor: TLConstructor_CRC32_statsGraphAsync,
        Data2: m.Data2,
    }
}


func (m *TLStatsGraphAsync) SetToken(v string) { m.Data2.Token = v }
func (m *TLStatsGraphAsync) GetToken() string { return m.Data2.Token }


func NewTLStatsGraphAsync() * TLStatsGraphAsync {
    return &TLStatsGraphAsync{ Data2: &StatsGraph_Data{} }
}

func (m* TLStatsGraphAsync) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_statsGraphAsync))

    x.String(m.GetToken())

    return x.buf
}

func (m* TLStatsGraphAsync) Decode(dbuf *DecodeBuf) error {
    m.SetToken(dbuf.String())

    return dbuf.err
}
// statsGraphError#bedc9822 error:string = StatsGraph;
func (m *TLStatsGraphError) To_StatsGraph() *StatsGraph {
    return &StatsGraph{
        Constructor: TLConstructor_CRC32_statsGraphError,
        Data2: m.Data2,
    }
}


func (m *TLStatsGraphError) SetError(v string) { m.Data2.Error = v }
func (m *TLStatsGraphError) GetError() string { return m.Data2.Error }


func NewTLStatsGraphError() * TLStatsGraphError {
    return &TLStatsGraphError{ Data2: &StatsGraph_Data{} }
}

func (m* TLStatsGraphError) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_statsGraphError))

    x.String(m.GetError())

    return x.buf
}

func (m* TLStatsGraphError) Decode(dbuf *DecodeBuf) error {
    m.SetError(dbuf.String())

    return dbuf.err
}
// statsGraph#8ea464b6 flags:# json:DataJSON zoom_token:flags.0?string = StatsGraph;
func (m *TLStatsGraph) To_StatsGraph() *StatsGraph {
    return &StatsGraph{
        Constructor: TLConstructor_CRC32_statsGraph,
        Data2: m.Data2,
    }
}


func (m *TLStatsGraph) SetJson(v *DataJSON) { m.Data2.Json = v }
func (m *TLStatsGraph) GetJson() *DataJSON { return m.Data2.Json }

func (m *TLStatsGraph) SetZoomToken(v string) { m.Data2.ZoomToken = v }
func (m *TLStatsGraph) GetZoomToken() string { return m.Data2.ZoomToken }


func NewTLStatsGraph() * TLStatsGraph {
    return &TLStatsGraph{ Data2: &StatsGraph_Data{} }
}

func (m* TLStatsGraph) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_statsGraph))

    // flags
    var flags uint32 = 0
    if m.GetZoomToken() != "" { flags |= 1 << 0 }
	x.UInt(flags)

    x.Bytes(m.GetJson().Encode())
    if (flags & (1 << 0)) != 0 { x.String(m.GetZoomToken()) }

    return x.buf
}

func (m* TLStatsGraph) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m2 := &DataJSON{}
    m2.Decode(dbuf)
    m.SetJson(m2)
    if (flags & (1 << 0)) != 0 { m.SetZoomToken(dbuf.String()) }

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Photos_Photo <--
//  + TL_PhotosPhoto
//

func (m *Photos_Photo) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_photos_photo:
        t := m.To_PhotosPhoto()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Photos_Photo) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_photos_photo:
        m2 := &TLPhotosPhoto{&Photos_Photo_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// photos.photo#20212ca8 photo:Photo users:Vector<User> = photos.Photo;
func (m *Photos_Photo) To_PhotosPhoto() *TLPhotosPhoto {
    return &TLPhotosPhoto{
        Data2: m.Data2,
    }
}



// photos.photo#20212ca8 photo:Photo users:Vector<User> = photos.Photo;
func (m *TLPhotosPhoto) To_Photos_Photo() *Photos_Photo {
    return &Photos_Photo{
        Constructor: TLConstructor_CRC32_photos_photo,
        Data2: m.Data2,
    }
}


func (m *TLPhotosPhoto) SetPhoto(v *Photo) { m.Data2.Photo = v }
func (m *TLPhotosPhoto) GetPhoto() *Photo { return m.Data2.Photo }

func (m *TLPhotosPhoto) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLPhotosPhoto) GetUsers() []*User { return m.Data2.Users }


func NewTLPhotosPhoto() * TLPhotosPhoto {
    return &TLPhotosPhoto{ Data2: &Photos_Photo_Data{} }
}

func (m* TLPhotosPhoto) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_photos_photo))

    x.Bytes(m.GetPhoto().Encode())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLPhotosPhoto) Decode(dbuf *DecodeBuf) error {
    m1 := &Photo{}
    m1.Decode(dbuf)
    m.SetPhoto(m1)
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*User, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &User{}
	v2[i].Decode(dbuf)
}
m.SetUsers(v2)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// MessageRange <--
//  + TL_MessageRange
//

func (m *MessageRange) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messageRange:
        t := m.To_MessageRange()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *MessageRange) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messageRange:
        m2 := &TLMessageRange{&MessageRange_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messageRange#ae30253 min_id:int max_id:int = MessageRange;
func (m *MessageRange) To_MessageRange() *TLMessageRange {
    return &TLMessageRange{
        Data2: m.Data2,
    }
}



// messageRange#ae30253 min_id:int max_id:int = MessageRange;
func (m *TLMessageRange) To_MessageRange() *MessageRange {
    return &MessageRange{
        Constructor: TLConstructor_CRC32_messageRange,
        Data2: m.Data2,
    }
}


func (m *TLMessageRange) SetMinId(v int32) { m.Data2.MinId = v }
func (m *TLMessageRange) GetMinId() int32 { return m.Data2.MinId }

func (m *TLMessageRange) SetMaxId(v int32) { m.Data2.MaxId = v }
func (m *TLMessageRange) GetMaxId() int32 { return m.Data2.MaxId }


func NewTLMessageRange() * TLMessageRange {
    return &TLMessageRange{ Data2: &MessageRange_Data{} }
}

func (m* TLMessageRange) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageRange))

    x.Int(m.GetMinId())
    x.Int(m.GetMaxId())

    return x.buf
}

func (m* TLMessageRange) Decode(dbuf *DecodeBuf) error {
    m.SetMinId(dbuf.Int())
    m.SetMaxId(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// MessageFwdHeader <--
//  + TL_MessageFwdHeader
//  + TL_MessageFwdHeader114
//

func (m *MessageFwdHeader) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messageFwdHeader:
        t := m.To_MessageFwdHeader()
        return t.Encode()
    case TLConstructor_CRC32_messageFwdHeader114:
        t := m.To_MessageFwdHeader114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *MessageFwdHeader) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messageFwdHeader:
        m2 := &TLMessageFwdHeader{&MessageFwdHeader_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageFwdHeader114:
        m2 := &TLMessageFwdHeader114{&MessageFwdHeader_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messageFwdHeader#559ebe6d flags:# from_id:flags.0?int date:int channel_id:flags.1?int channel_post:flags.2?int post_author:flags.3?string saved_from_peer:flags.4?Peer saved_from_msg_id:flags.4?int = MessageFwdHeader;
func (m *MessageFwdHeader) To_MessageFwdHeader() *TLMessageFwdHeader {
    return &TLMessageFwdHeader{
        Data2: m.Data2,
    }
}

// messageFwdHeader#353a686b flags:# from_id:flags.0?int from_name:flags.5?string date:int channel_id:flags.1?int channel_post:flags.2?int post_author:flags.3?string saved_from_peer:flags.4?Peer saved_from_msg_id:flags.4?int psa_type:flags.6?string = MessageFwdHeader;
func (m *MessageFwdHeader) To_MessageFwdHeader114() *TLMessageFwdHeader114 {
    return &TLMessageFwdHeader114{
        Data2: m.Data2,
    }
}



// messageFwdHeader#559ebe6d flags:# from_id:flags.0?int date:int channel_id:flags.1?int channel_post:flags.2?int post_author:flags.3?string saved_from_peer:flags.4?Peer saved_from_msg_id:flags.4?int = MessageFwdHeader;
func (m *TLMessageFwdHeader) To_MessageFwdHeader() *MessageFwdHeader {
    return &MessageFwdHeader{
        Constructor: TLConstructor_CRC32_messageFwdHeader,
        Data2: m.Data2,
    }
}


func (m *TLMessageFwdHeader) SetFromId(v int32) { m.Data2.FromId = v }
func (m *TLMessageFwdHeader) GetFromId() int32 { return m.Data2.FromId }

func (m *TLMessageFwdHeader) SetDate(v int32) { m.Data2.Date = v }
func (m *TLMessageFwdHeader) GetDate() int32 { return m.Data2.Date }

func (m *TLMessageFwdHeader) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLMessageFwdHeader) GetChannelId() int32 { return m.Data2.ChannelId }

func (m *TLMessageFwdHeader) SetChannelPost(v int32) { m.Data2.ChannelPost = v }
func (m *TLMessageFwdHeader) GetChannelPost() int32 { return m.Data2.ChannelPost }

func (m *TLMessageFwdHeader) SetPostAuthor(v string) { m.Data2.PostAuthor = v }
func (m *TLMessageFwdHeader) GetPostAuthor() string { return m.Data2.PostAuthor }

func (m *TLMessageFwdHeader) SetSavedFromPeer(v *Peer) { m.Data2.SavedFromPeer = v }
func (m *TLMessageFwdHeader) GetSavedFromPeer() *Peer { return m.Data2.SavedFromPeer }

func (m *TLMessageFwdHeader) SetSavedFromMsgId(v int32) { m.Data2.SavedFromMsgId = v }
func (m *TLMessageFwdHeader) GetSavedFromMsgId() int32 { return m.Data2.SavedFromMsgId }


func NewTLMessageFwdHeader() * TLMessageFwdHeader {
    return &TLMessageFwdHeader{ Data2: &MessageFwdHeader_Data{} }
}

func (m* TLMessageFwdHeader) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageFwdHeader))

    // flags
    var flags uint32 = 0
    if m.GetFromId() != 0 { flags |= 1 << 0 }
    if m.GetChannelId() != 0 { flags |= 1 << 1 }
    if m.GetChannelPost() != 0 { flags |= 1 << 2 }
    if m.GetPostAuthor() != "" { flags |= 1 << 3 }
    if m.GetSavedFromPeer() != nil { flags |= 1 << 4 }
    if m.GetSavedFromMsgId() != 0 { flags |= 1 << 4 }
	x.UInt(flags)

    if (flags & (1 << 0)) != 0 { x.Int(m.GetFromId()) }
    x.Int(m.GetDate())
    if (flags & (1 << 1)) != 0 { x.Int(m.GetChannelId()) }
    if (flags & (1 << 2)) != 0 { x.Int(m.GetChannelPost()) }
    if (flags & (1 << 3)) != 0 { x.String(m.GetPostAuthor()) }
    if (flags & (1 << 4)) != 0 { x.Bytes(m.GetSavedFromPeer().Encode()) }
    if (flags & (1 << 4)) != 0 { x.Int(m.GetSavedFromMsgId()) }

    return x.buf
}

func (m* TLMessageFwdHeader) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetFromId(dbuf.Int()) }
    m.SetDate(dbuf.Int())
    if (flags & (1 << 1)) != 0 { m.SetChannelId(dbuf.Int()) }
    if (flags & (1 << 2)) != 0 { m.SetChannelPost(dbuf.Int()) }
    if (flags & (1 << 3)) != 0 { m.SetPostAuthor(dbuf.String()) }
    if (flags & (1 << 4)) != 0 {
 m7 := &Peer{}
    m7.Decode(dbuf)
    m.SetSavedFromPeer(m7) 
}
    if (flags & (1 << 4)) != 0 { m.SetSavedFromMsgId(dbuf.Int()) }

    return dbuf.err
}
// messageFwdHeader#353a686b flags:# from_id:flags.0?int from_name:flags.5?string date:int channel_id:flags.1?int channel_post:flags.2?int post_author:flags.3?string saved_from_peer:flags.4?Peer saved_from_msg_id:flags.4?int psa_type:flags.6?string = MessageFwdHeader;
func (m *TLMessageFwdHeader114) To_MessageFwdHeader() *MessageFwdHeader {
    return &MessageFwdHeader{
        Constructor: TLConstructor_CRC32_messageFwdHeader114,
        Data2: m.Data2,
    }
}


func (m *TLMessageFwdHeader114) SetFromId(v int32) { m.Data2.FromId = v }
func (m *TLMessageFwdHeader114) GetFromId() int32 { return m.Data2.FromId }

func (m *TLMessageFwdHeader114) SetFromName(v string) { m.Data2.FromName = v }
func (m *TLMessageFwdHeader114) GetFromName() string { return m.Data2.FromName }

func (m *TLMessageFwdHeader114) SetDate(v int32) { m.Data2.Date = v }
func (m *TLMessageFwdHeader114) GetDate() int32 { return m.Data2.Date }

func (m *TLMessageFwdHeader114) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLMessageFwdHeader114) GetChannelId() int32 { return m.Data2.ChannelId }

func (m *TLMessageFwdHeader114) SetChannelPost(v int32) { m.Data2.ChannelPost = v }
func (m *TLMessageFwdHeader114) GetChannelPost() int32 { return m.Data2.ChannelPost }

func (m *TLMessageFwdHeader114) SetPostAuthor(v string) { m.Data2.PostAuthor = v }
func (m *TLMessageFwdHeader114) GetPostAuthor() string { return m.Data2.PostAuthor }

func (m *TLMessageFwdHeader114) SetSavedFromPeer(v *Peer) { m.Data2.SavedFromPeer = v }
func (m *TLMessageFwdHeader114) GetSavedFromPeer() *Peer { return m.Data2.SavedFromPeer }

func (m *TLMessageFwdHeader114) SetSavedFromMsgId(v int32) { m.Data2.SavedFromMsgId = v }
func (m *TLMessageFwdHeader114) GetSavedFromMsgId() int32 { return m.Data2.SavedFromMsgId }

func (m *TLMessageFwdHeader114) SetPsaType(v string) { m.Data2.PsaType = v }
func (m *TLMessageFwdHeader114) GetPsaType() string { return m.Data2.PsaType }


func NewTLMessageFwdHeader114() * TLMessageFwdHeader114 {
    return &TLMessageFwdHeader114{ Data2: &MessageFwdHeader_Data{} }
}

func (m* TLMessageFwdHeader114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageFwdHeader114))

    // flags
    var flags uint32 = 0
    if m.GetFromId() != 0 { flags |= 1 << 0 }
    if m.GetFromName() != "" { flags |= 1 << 5 }
    if m.GetChannelId() != 0 { flags |= 1 << 1 }
    if m.GetChannelPost() != 0 { flags |= 1 << 2 }
    if m.GetPostAuthor() != "" { flags |= 1 << 3 }
    if m.GetSavedFromPeer() != nil { flags |= 1 << 4 }
    if m.GetSavedFromMsgId() != 0 { flags |= 1 << 4 }
    if m.GetPsaType() != "" { flags |= 1 << 6 }
	x.UInt(flags)

    if (flags & (1 << 0)) != 0 { x.Int(m.GetFromId()) }
    if (flags & (1 << 5)) != 0 { x.String(m.GetFromName()) }
    x.Int(m.GetDate())
    if (flags & (1 << 1)) != 0 { x.Int(m.GetChannelId()) }
    if (flags & (1 << 2)) != 0 { x.Int(m.GetChannelPost()) }
    if (flags & (1 << 3)) != 0 { x.String(m.GetPostAuthor()) }
    if (flags & (1 << 4)) != 0 { x.Bytes(m.GetSavedFromPeer().Encode()) }
    if (flags & (1 << 4)) != 0 { x.Int(m.GetSavedFromMsgId()) }
    if (flags & (1 << 6)) != 0 { x.String(m.GetPsaType()) }

    return x.buf
}

func (m* TLMessageFwdHeader114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetFromId(dbuf.Int()) }
    if (flags & (1 << 5)) != 0 { m.SetFromName(dbuf.String()) }
    m.SetDate(dbuf.Int())
    if (flags & (1 << 1)) != 0 { m.SetChannelId(dbuf.Int()) }
    if (flags & (1 << 2)) != 0 { m.SetChannelPost(dbuf.Int()) }
    if (flags & (1 << 3)) != 0 { m.SetPostAuthor(dbuf.String()) }
    if (flags & (1 << 4)) != 0 {
 m8 := &Peer{}
    m8.Decode(dbuf)
    m.SetSavedFromPeer(m8) 
}
    if (flags & (1 << 4)) != 0 { m.SetSavedFromMsgId(dbuf.Int()) }
    if (flags & (1 << 6)) != 0 { m.SetPsaType(dbuf.String()) }

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Poll <--
//  + TL_Poll
//

func (m *Poll) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_poll:
        t := m.To_Poll()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Poll) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_poll:
        m2 := &TLPoll{&Poll_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// poll#86e18161 id:long flags:# closed:flags.0?true public_voters:flags.1?true multiple_choice:flags.2?true quiz:flags.3?true question:string answers:Vector<PollAnswer> close_period:flags.4?int close_date:flags.5?int = Poll;
func (m *Poll) To_Poll() *TLPoll {
    return &TLPoll{
        Data2: m.Data2,
    }
}



// poll#86e18161 id:long flags:# closed:flags.0?true public_voters:flags.1?true multiple_choice:flags.2?true quiz:flags.3?true question:string answers:Vector<PollAnswer> close_period:flags.4?int close_date:flags.5?int = Poll;
func (m *TLPoll) To_Poll() *Poll {
    return &Poll{
        Constructor: TLConstructor_CRC32_poll,
        Data2: m.Data2,
    }
}


func (m *TLPoll) SetId(v int64) { m.Data2.Id = v }
func (m *TLPoll) GetId() int64 { return m.Data2.Id }

func (m *TLPoll) SetClosed(v bool) { m.Data2.Closed = v }
func (m *TLPoll) GetClosed() bool { return m.Data2.Closed }

func (m *TLPoll) SetPublicVoters(v bool) { m.Data2.PublicVoters = v }
func (m *TLPoll) GetPublicVoters() bool { return m.Data2.PublicVoters }

func (m *TLPoll) SetMultipleChoice(v bool) { m.Data2.MultipleChoice = v }
func (m *TLPoll) GetMultipleChoice() bool { return m.Data2.MultipleChoice }

func (m *TLPoll) SetQuiz(v bool) { m.Data2.Quiz = v }
func (m *TLPoll) GetQuiz() bool { return m.Data2.Quiz }

func (m *TLPoll) SetQuestion(v string) { m.Data2.Question = v }
func (m *TLPoll) GetQuestion() string { return m.Data2.Question }

func (m *TLPoll) SetAnswers(v []*PollAnswer) { m.Data2.Answers = v }
func (m *TLPoll) GetAnswers() []*PollAnswer { return m.Data2.Answers }

func (m *TLPoll) SetClosePeriod(v int32) { m.Data2.ClosePeriod = v }
func (m *TLPoll) GetClosePeriod() int32 { return m.Data2.ClosePeriod }

func (m *TLPoll) SetCloseDate(v int32) { m.Data2.CloseDate = v }
func (m *TLPoll) GetCloseDate() int32 { return m.Data2.CloseDate }


func NewTLPoll() * TLPoll {
    return &TLPoll{ Data2: &Poll_Data{} }
}

func (m* TLPoll) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_poll))

    x.Long(m.GetId())
    // flags
    var flags uint32 = 0
    if m.GetClosed() == true { flags |= 1 << 0 }
    if m.GetPublicVoters() == true { flags |= 1 << 1 }
    if m.GetMultipleChoice() == true { flags |= 1 << 2 }
    if m.GetQuiz() == true { flags |= 1 << 3 }
    if m.GetClosePeriod() != 0 { flags |= 1 << 4 }
    if m.GetCloseDate() != 0 { flags |= 1 << 5 }
	x.UInt(flags)

    
    
    
    
    x.String(m.GetQuestion())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetAnswers())))
for _, v := range m.GetAnswers() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    if (flags & (1 << 4)) != 0 { x.Int(m.GetClosePeriod()) }
    if (flags & (1 << 5)) != 0 { x.Int(m.GetCloseDate()) }

    return x.buf
}

func (m* TLPoll) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetClosed(true) }
    if (flags & (1 << 1)) != 0 { m.SetPublicVoters(true) }
    if (flags & (1 << 2)) != 0 { m.SetMultipleChoice(true) }
    if (flags & (1 << 3)) != 0 { m.SetQuiz(true) }
    m.SetQuestion(dbuf.String())
    c8 := dbuf.Int()
if c8 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 8, c8)
	return dbuf.err
}
l8 := dbuf.Int()
v8 := make([]*PollAnswer, l8)
for i := int32(0); i < l8; i++ {
	v8[i] = &PollAnswer{}
	v8[i].Decode(dbuf)
}
m.SetAnswers(v8)

    if (flags & (1 << 4)) != 0 { m.SetClosePeriod(dbuf.Int()) }
    if (flags & (1 << 5)) != 0 { m.SetCloseDate(dbuf.Int()) }

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// AutoDownloadSettings <--
//  + TL_AutoDownloadSettings
//

func (m *AutoDownloadSettings) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_autoDownloadSettings:
        t := m.To_AutoDownloadSettings()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *AutoDownloadSettings) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_autoDownloadSettings:
        m2 := &TLAutoDownloadSettings{&AutoDownloadSettings_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// autoDownloadSettings#e04232f3 flags:# disabled:flags.0?true video_preload_large:flags.1?true audio_preload_next:flags.2?true phonecalls_less_data:flags.3?true photo_size_max:int video_size_max:int file_size_max:int video_upload_maxbitrate:int = AutoDownloadSettings;
func (m *AutoDownloadSettings) To_AutoDownloadSettings() *TLAutoDownloadSettings {
    return &TLAutoDownloadSettings{
        Data2: m.Data2,
    }
}



// autoDownloadSettings#e04232f3 flags:# disabled:flags.0?true video_preload_large:flags.1?true audio_preload_next:flags.2?true phonecalls_less_data:flags.3?true photo_size_max:int video_size_max:int file_size_max:int video_upload_maxbitrate:int = AutoDownloadSettings;
func (m *TLAutoDownloadSettings) To_AutoDownloadSettings() *AutoDownloadSettings {
    return &AutoDownloadSettings{
        Constructor: TLConstructor_CRC32_autoDownloadSettings,
        Data2: m.Data2,
    }
}


func (m *TLAutoDownloadSettings) SetDisabled(v bool) { m.Data2.Disabled = v }
func (m *TLAutoDownloadSettings) GetDisabled() bool { return m.Data2.Disabled }

func (m *TLAutoDownloadSettings) SetVideoPreloadLarge(v bool) { m.Data2.VideoPreloadLarge = v }
func (m *TLAutoDownloadSettings) GetVideoPreloadLarge() bool { return m.Data2.VideoPreloadLarge }

func (m *TLAutoDownloadSettings) SetAudioPreloadNext(v bool) { m.Data2.AudioPreloadNext = v }
func (m *TLAutoDownloadSettings) GetAudioPreloadNext() bool { return m.Data2.AudioPreloadNext }

func (m *TLAutoDownloadSettings) SetPhonecallsLessData(v bool) { m.Data2.PhonecallsLessData = v }
func (m *TLAutoDownloadSettings) GetPhonecallsLessData() bool { return m.Data2.PhonecallsLessData }

func (m *TLAutoDownloadSettings) SetPhotoSizeMax(v int32) { m.Data2.PhotoSizeMax = v }
func (m *TLAutoDownloadSettings) GetPhotoSizeMax() int32 { return m.Data2.PhotoSizeMax }

func (m *TLAutoDownloadSettings) SetVideoSizeMax(v int32) { m.Data2.VideoSizeMax = v }
func (m *TLAutoDownloadSettings) GetVideoSizeMax() int32 { return m.Data2.VideoSizeMax }

func (m *TLAutoDownloadSettings) SetFileSizeMax(v int32) { m.Data2.FileSizeMax = v }
func (m *TLAutoDownloadSettings) GetFileSizeMax() int32 { return m.Data2.FileSizeMax }

func (m *TLAutoDownloadSettings) SetVideoUploadMaxbitrate(v int32) { m.Data2.VideoUploadMaxbitrate = v }
func (m *TLAutoDownloadSettings) GetVideoUploadMaxbitrate() int32 { return m.Data2.VideoUploadMaxbitrate }


func NewTLAutoDownloadSettings() * TLAutoDownloadSettings {
    return &TLAutoDownloadSettings{ Data2: &AutoDownloadSettings_Data{} }
}

func (m* TLAutoDownloadSettings) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_autoDownloadSettings))

    // flags
    var flags uint32 = 0
    if m.GetDisabled() == true { flags |= 1 << 0 }
    if m.GetVideoPreloadLarge() == true { flags |= 1 << 1 }
    if m.GetAudioPreloadNext() == true { flags |= 1 << 2 }
    if m.GetPhonecallsLessData() == true { flags |= 1 << 3 }
	x.UInt(flags)

    
    
    
    
    x.Int(m.GetPhotoSizeMax())
    x.Int(m.GetVideoSizeMax())
    x.Int(m.GetFileSizeMax())
    x.Int(m.GetVideoUploadMaxbitrate())

    return x.buf
}

func (m* TLAutoDownloadSettings) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetDisabled(true) }
    if (flags & (1 << 1)) != 0 { m.SetVideoPreloadLarge(true) }
    if (flags & (1 << 2)) != 0 { m.SetAudioPreloadNext(true) }
    if (flags & (1 << 3)) != 0 { m.SetPhonecallsLessData(true) }
    m.SetPhotoSizeMax(dbuf.Int())
    m.SetVideoSizeMax(dbuf.Int())
    m.SetFileSizeMax(dbuf.Int())
    m.SetVideoUploadMaxbitrate(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Dialog <--
//  + TL_Dialog
//  + TL_Dialog114
//  + TL_DialogFolder
//

func (m *Dialog) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_dialog:
        t := m.To_Dialog()
        return t.Encode()
    case TLConstructor_CRC32_dialog114:
        t := m.To_Dialog114()
        return t.Encode()
    case TLConstructor_CRC32_dialogFolder:
        t := m.To_DialogFolder()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Dialog) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_dialog:
        m2 := &TLDialog{&Dialog_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_dialog114:
        m2 := &TLDialog114{&Dialog_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_dialogFolder:
        m2 := &TLDialogFolder{&Dialog_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// dialog#e4def5db flags:# pinned:flags.2?true peer:Peer top_message:int read_inbox_max_id:int read_outbox_max_id:int unread_count:int unread_mentions_count:int notify_settings:PeerNotifySettings pts:flags.0?int draft:flags.1?DraftMessage = Dialog;
func (m *Dialog) To_Dialog() *TLDialog {
    return &TLDialog{
        Data2: m.Data2,
    }
}

// dialog#2c171f72 flags:# pinned:flags.2?true unread_mark:flags.3?true peer:Peer top_message:int read_inbox_max_id:int read_outbox_max_id:int unread_count:int unread_mentions_count:int notify_settings:PeerNotifySettings pts:flags.0?int draft:flags.1?DraftMessage folder_id:flags.4?int = Dialog;
func (m *Dialog) To_Dialog114() *TLDialog114 {
    return &TLDialog114{
        Data2: m.Data2,
    }
}

// dialogFolder#71bd134c flags:# pinned:flags.2?true folder:Folder peer:Peer top_message:int unread_muted_peers_count:int unread_unmuted_peers_count:int unread_muted_messages_count:int unread_unmuted_messages_count:int = Dialog;
func (m *Dialog) To_DialogFolder() *TLDialogFolder {
    return &TLDialogFolder{
        Data2: m.Data2,
    }
}



// dialog#e4def5db flags:# pinned:flags.2?true peer:Peer top_message:int read_inbox_max_id:int read_outbox_max_id:int unread_count:int unread_mentions_count:int notify_settings:PeerNotifySettings pts:flags.0?int draft:flags.1?DraftMessage = Dialog;
func (m *TLDialog) To_Dialog() *Dialog {
    return &Dialog{
        Constructor: TLConstructor_CRC32_dialog,
        Data2: m.Data2,
    }
}


func (m *TLDialog) SetPinned(v bool) { m.Data2.Pinned = v }
func (m *TLDialog) GetPinned() bool { return m.Data2.Pinned }

func (m *TLDialog) SetPeer(v *Peer) { m.Data2.Peer = v }
func (m *TLDialog) GetPeer() *Peer { return m.Data2.Peer }

func (m *TLDialog) SetTopMessage(v int32) { m.Data2.TopMessage = v }
func (m *TLDialog) GetTopMessage() int32 { return m.Data2.TopMessage }

func (m *TLDialog) SetReadInboxMaxId(v int32) { m.Data2.ReadInboxMaxId = v }
func (m *TLDialog) GetReadInboxMaxId() int32 { return m.Data2.ReadInboxMaxId }

func (m *TLDialog) SetReadOutboxMaxId(v int32) { m.Data2.ReadOutboxMaxId = v }
func (m *TLDialog) GetReadOutboxMaxId() int32 { return m.Data2.ReadOutboxMaxId }

func (m *TLDialog) SetUnreadCount(v int32) { m.Data2.UnreadCount = v }
func (m *TLDialog) GetUnreadCount() int32 { return m.Data2.UnreadCount }

func (m *TLDialog) SetUnreadMentionsCount(v int32) { m.Data2.UnreadMentionsCount = v }
func (m *TLDialog) GetUnreadMentionsCount() int32 { return m.Data2.UnreadMentionsCount }

func (m *TLDialog) SetNotifySettings(v *PeerNotifySettings) { m.Data2.NotifySettings = v }
func (m *TLDialog) GetNotifySettings() *PeerNotifySettings { return m.Data2.NotifySettings }

func (m *TLDialog) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLDialog) GetPts() int32 { return m.Data2.Pts }

func (m *TLDialog) SetDraft(v *DraftMessage) { m.Data2.Draft = v }
func (m *TLDialog) GetDraft() *DraftMessage { return m.Data2.Draft }


func NewTLDialog() * TLDialog {
    return &TLDialog{ Data2: &Dialog_Data{} }
}

func (m* TLDialog) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_dialog))

    // flags
    var flags uint32 = 0
    if m.GetPinned() == true { flags |= 1 << 2 }
    if m.GetPts() != 0 { flags |= 1 << 0 }
    if m.GetDraft() != nil { flags |= 1 << 1 }
	x.UInt(flags)

    
    x.Bytes(m.GetPeer().Encode())
    x.Int(m.GetTopMessage())
    x.Int(m.GetReadInboxMaxId())
    x.Int(m.GetReadOutboxMaxId())
    x.Int(m.GetUnreadCount())
    x.Int(m.GetUnreadMentionsCount())
    x.Bytes(m.GetNotifySettings().Encode())
    if (flags & (1 << 0)) != 0 { x.Int(m.GetPts()) }
    if (flags & (1 << 1)) != 0 { x.Bytes(m.GetDraft().Encode()) }

    return x.buf
}

func (m* TLDialog) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 2)) != 0 { m.SetPinned(true) }
    m3 := &Peer{}
    m3.Decode(dbuf)
    m.SetPeer(m3)
    m.SetTopMessage(dbuf.Int())
    m.SetReadInboxMaxId(dbuf.Int())
    m.SetReadOutboxMaxId(dbuf.Int())
    m.SetUnreadCount(dbuf.Int())
    m.SetUnreadMentionsCount(dbuf.Int())
    m9 := &PeerNotifySettings{}
    m9.Decode(dbuf)
    m.SetNotifySettings(m9)
    if (flags & (1 << 0)) != 0 { m.SetPts(dbuf.Int()) }
    if (flags & (1 << 1)) != 0 {
 m11 := &DraftMessage{}
    m11.Decode(dbuf)
    m.SetDraft(m11) 
}

    return dbuf.err
}
// dialog#2c171f72 flags:# pinned:flags.2?true unread_mark:flags.3?true peer:Peer top_message:int read_inbox_max_id:int read_outbox_max_id:int unread_count:int unread_mentions_count:int notify_settings:PeerNotifySettings pts:flags.0?int draft:flags.1?DraftMessage folder_id:flags.4?int = Dialog;
func (m *TLDialog114) To_Dialog() *Dialog {
    return &Dialog{
        Constructor: TLConstructor_CRC32_dialog114,
        Data2: m.Data2,
    }
}


func (m *TLDialog114) SetPinned(v bool) { m.Data2.Pinned = v }
func (m *TLDialog114) GetPinned() bool { return m.Data2.Pinned }

func (m *TLDialog114) SetUnreadMark(v bool) { m.Data2.UnreadMark = v }
func (m *TLDialog114) GetUnreadMark() bool { return m.Data2.UnreadMark }

func (m *TLDialog114) SetPeer(v *Peer) { m.Data2.Peer = v }
func (m *TLDialog114) GetPeer() *Peer { return m.Data2.Peer }

func (m *TLDialog114) SetTopMessage(v int32) { m.Data2.TopMessage = v }
func (m *TLDialog114) GetTopMessage() int32 { return m.Data2.TopMessage }

func (m *TLDialog114) SetReadInboxMaxId(v int32) { m.Data2.ReadInboxMaxId = v }
func (m *TLDialog114) GetReadInboxMaxId() int32 { return m.Data2.ReadInboxMaxId }

func (m *TLDialog114) SetReadOutboxMaxId(v int32) { m.Data2.ReadOutboxMaxId = v }
func (m *TLDialog114) GetReadOutboxMaxId() int32 { return m.Data2.ReadOutboxMaxId }

func (m *TLDialog114) SetUnreadCount(v int32) { m.Data2.UnreadCount = v }
func (m *TLDialog114) GetUnreadCount() int32 { return m.Data2.UnreadCount }

func (m *TLDialog114) SetUnreadMentionsCount(v int32) { m.Data2.UnreadMentionsCount = v }
func (m *TLDialog114) GetUnreadMentionsCount() int32 { return m.Data2.UnreadMentionsCount }

func (m *TLDialog114) SetNotifySettings(v *PeerNotifySettings) { m.Data2.NotifySettings = v }
func (m *TLDialog114) GetNotifySettings() *PeerNotifySettings { return m.Data2.NotifySettings }

func (m *TLDialog114) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLDialog114) GetPts() int32 { return m.Data2.Pts }

func (m *TLDialog114) SetDraft(v *DraftMessage) { m.Data2.Draft = v }
func (m *TLDialog114) GetDraft() *DraftMessage { return m.Data2.Draft }

func (m *TLDialog114) SetFolderId(v int32) { m.Data2.FolderId = v }
func (m *TLDialog114) GetFolderId() int32 { return m.Data2.FolderId }


func NewTLDialog114() * TLDialog114 {
    return &TLDialog114{ Data2: &Dialog_Data{} }
}

func (m* TLDialog114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_dialog114))

    // flags
    var flags uint32 = 0
    if m.GetPinned() == true { flags |= 1 << 2 }
    if m.GetUnreadMark() == true { flags |= 1 << 3 }
    if m.GetPts() != 0 { flags |= 1 << 0 }
    if m.GetDraft() != nil { flags |= 1 << 1 }
    if m.GetFolderId() != 0 { flags |= 1 << 4 }
	x.UInt(flags)

    
    
    x.Bytes(m.GetPeer().Encode())
    x.Int(m.GetTopMessage())
    x.Int(m.GetReadInboxMaxId())
    x.Int(m.GetReadOutboxMaxId())
    x.Int(m.GetUnreadCount())
    x.Int(m.GetUnreadMentionsCount())
    x.Bytes(m.GetNotifySettings().Encode())
    if (flags & (1 << 0)) != 0 { x.Int(m.GetPts()) }
    if (flags & (1 << 1)) != 0 { x.Bytes(m.GetDraft().Encode()) }
    if (flags & (1 << 4)) != 0 { x.Int(m.GetFolderId()) }

    return x.buf
}

func (m* TLDialog114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 2)) != 0 { m.SetPinned(true) }
    if (flags & (1 << 3)) != 0 { m.SetUnreadMark(true) }
    m4 := &Peer{}
    m4.Decode(dbuf)
    m.SetPeer(m4)
    m.SetTopMessage(dbuf.Int())
    m.SetReadInboxMaxId(dbuf.Int())
    m.SetReadOutboxMaxId(dbuf.Int())
    m.SetUnreadCount(dbuf.Int())
    m.SetUnreadMentionsCount(dbuf.Int())
    m10 := &PeerNotifySettings{}
    m10.Decode(dbuf)
    m.SetNotifySettings(m10)
    if (flags & (1 << 0)) != 0 { m.SetPts(dbuf.Int()) }
    if (flags & (1 << 1)) != 0 {
 m12 := &DraftMessage{}
    m12.Decode(dbuf)
    m.SetDraft(m12) 
}
    if (flags & (1 << 4)) != 0 { m.SetFolderId(dbuf.Int()) }

    return dbuf.err
}
// dialogFolder#71bd134c flags:# pinned:flags.2?true folder:Folder peer:Peer top_message:int unread_muted_peers_count:int unread_unmuted_peers_count:int unread_muted_messages_count:int unread_unmuted_messages_count:int = Dialog;
func (m *TLDialogFolder) To_Dialog() *Dialog {
    return &Dialog{
        Constructor: TLConstructor_CRC32_dialogFolder,
        Data2: m.Data2,
    }
}


func (m *TLDialogFolder) SetPinned(v bool) { m.Data2.Pinned = v }
func (m *TLDialogFolder) GetPinned() bool { return m.Data2.Pinned }

func (m *TLDialogFolder) SetFolder(v *Folder) { m.Data2.Folder = v }
func (m *TLDialogFolder) GetFolder() *Folder { return m.Data2.Folder }

func (m *TLDialogFolder) SetPeer(v *Peer) { m.Data2.Peer = v }
func (m *TLDialogFolder) GetPeer() *Peer { return m.Data2.Peer }

func (m *TLDialogFolder) SetTopMessage(v int32) { m.Data2.TopMessage = v }
func (m *TLDialogFolder) GetTopMessage() int32 { return m.Data2.TopMessage }

func (m *TLDialogFolder) SetUnreadMutedPeersCount(v int32) { m.Data2.UnreadMutedPeersCount = v }
func (m *TLDialogFolder) GetUnreadMutedPeersCount() int32 { return m.Data2.UnreadMutedPeersCount }

func (m *TLDialogFolder) SetUnreadUnmutedPeersCount(v int32) { m.Data2.UnreadUnmutedPeersCount = v }
func (m *TLDialogFolder) GetUnreadUnmutedPeersCount() int32 { return m.Data2.UnreadUnmutedPeersCount }

func (m *TLDialogFolder) SetUnreadMutedMessagesCount(v int32) { m.Data2.UnreadMutedMessagesCount = v }
func (m *TLDialogFolder) GetUnreadMutedMessagesCount() int32 { return m.Data2.UnreadMutedMessagesCount }

func (m *TLDialogFolder) SetUnreadUnmutedMessagesCount(v int32) { m.Data2.UnreadUnmutedMessagesCount = v }
func (m *TLDialogFolder) GetUnreadUnmutedMessagesCount() int32 { return m.Data2.UnreadUnmutedMessagesCount }


func NewTLDialogFolder() * TLDialogFolder {
    return &TLDialogFolder{ Data2: &Dialog_Data{} }
}

func (m* TLDialogFolder) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_dialogFolder))

    // flags
    var flags uint32 = 0
    if m.GetPinned() == true { flags |= 1 << 2 }
	x.UInt(flags)

    
    x.Bytes(m.GetFolder().Encode())
    x.Bytes(m.GetPeer().Encode())
    x.Int(m.GetTopMessage())
    x.Int(m.GetUnreadMutedPeersCount())
    x.Int(m.GetUnreadUnmutedPeersCount())
    x.Int(m.GetUnreadMutedMessagesCount())
    x.Int(m.GetUnreadUnmutedMessagesCount())

    return x.buf
}

func (m* TLDialogFolder) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 2)) != 0 { m.SetPinned(true) }
    m3 := &Folder{}
    m3.Decode(dbuf)
    m.SetFolder(m3)
    m4 := &Peer{}
    m4.Decode(dbuf)
    m.SetPeer(m4)
    m.SetTopMessage(dbuf.Int())
    m.SetUnreadMutedPeersCount(dbuf.Int())
    m.SetUnreadUnmutedPeersCount(dbuf.Int())
    m.SetUnreadMutedMessagesCount(dbuf.Int())
    m.SetUnreadUnmutedMessagesCount(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Account_Takeout <--
//  + TL_AccountTakeout
//

func (m *Account_Takeout) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_account_takeout:
        t := m.To_AccountTakeout()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Account_Takeout) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_account_takeout:
        m2 := &TLAccountTakeout{&Account_Takeout_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// account.takeout#4dba4501 id:long = account.Takeout;
func (m *Account_Takeout) To_AccountTakeout() *TLAccountTakeout {
    return &TLAccountTakeout{
        Data2: m.Data2,
    }
}



// account.takeout#4dba4501 id:long = account.Takeout;
func (m *TLAccountTakeout) To_Account_Takeout() *Account_Takeout {
    return &Account_Takeout{
        Constructor: TLConstructor_CRC32_account_takeout,
        Data2: m.Data2,
    }
}


func (m *TLAccountTakeout) SetId(v int64) { m.Data2.Id = v }
func (m *TLAccountTakeout) GetId() int64 { return m.Data2.Id }


func NewTLAccountTakeout() * TLAccountTakeout {
    return &TLAccountTakeout{ Data2: &Account_Takeout_Data{} }
}

func (m* TLAccountTakeout) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_account_takeout))

    x.Long(m.GetId())

    return x.buf
}

func (m* TLAccountTakeout) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// MessageInteractionCounters <--
//  + TL_MessageInteractionCounters
//

func (m *MessageInteractionCounters) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messageInteractionCounters:
        t := m.To_MessageInteractionCounters()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *MessageInteractionCounters) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messageInteractionCounters:
        m2 := &TLMessageInteractionCounters{&MessageInteractionCounters_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messageInteractionCounters#ad4fc9bd msg_id:int views:int forwards:int = MessageInteractionCounters;
func (m *MessageInteractionCounters) To_MessageInteractionCounters() *TLMessageInteractionCounters {
    return &TLMessageInteractionCounters{
        Data2: m.Data2,
    }
}



// messageInteractionCounters#ad4fc9bd msg_id:int views:int forwards:int = MessageInteractionCounters;
func (m *TLMessageInteractionCounters) To_MessageInteractionCounters() *MessageInteractionCounters {
    return &MessageInteractionCounters{
        Constructor: TLConstructor_CRC32_messageInteractionCounters,
        Data2: m.Data2,
    }
}


func (m *TLMessageInteractionCounters) SetMsgId(v int32) { m.Data2.MsgId = v }
func (m *TLMessageInteractionCounters) GetMsgId() int32 { return m.Data2.MsgId }

func (m *TLMessageInteractionCounters) SetViews(v int32) { m.Data2.Views = v }
func (m *TLMessageInteractionCounters) GetViews() int32 { return m.Data2.Views }

func (m *TLMessageInteractionCounters) SetForwards(v int32) { m.Data2.Forwards = v }
func (m *TLMessageInteractionCounters) GetForwards() int32 { return m.Data2.Forwards }


func NewTLMessageInteractionCounters() * TLMessageInteractionCounters {
    return &TLMessageInteractionCounters{ Data2: &MessageInteractionCounters_Data{} }
}

func (m* TLMessageInteractionCounters) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageInteractionCounters))

    x.Int(m.GetMsgId())
    x.Int(m.GetViews())
    x.Int(m.GetForwards())

    return x.buf
}

func (m* TLMessageInteractionCounters) Decode(dbuf *DecodeBuf) error {
    m.SetMsgId(dbuf.Int())
    m.SetViews(dbuf.Int())
    m.SetForwards(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Auth_CheckedPhone <--
//  + TL_AuthCheckedPhone
//

func (m *Auth_CheckedPhone) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_auth_checkedPhone:
        t := m.To_AuthCheckedPhone()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Auth_CheckedPhone) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_auth_checkedPhone:
        m2 := &TLAuthCheckedPhone{&Auth_CheckedPhone_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// auth.checkedPhone#811ea28e phone_registered:Bool = auth.CheckedPhone;
func (m *Auth_CheckedPhone) To_AuthCheckedPhone() *TLAuthCheckedPhone {
    return &TLAuthCheckedPhone{
        Data2: m.Data2,
    }
}



// auth.checkedPhone#811ea28e phone_registered:Bool = auth.CheckedPhone;
func (m *TLAuthCheckedPhone) To_Auth_CheckedPhone() *Auth_CheckedPhone {
    return &Auth_CheckedPhone{
        Constructor: TLConstructor_CRC32_auth_checkedPhone,
        Data2: m.Data2,
    }
}


func (m *TLAuthCheckedPhone) SetPhoneRegistered(v *Bool) { m.Data2.PhoneRegistered = v }
func (m *TLAuthCheckedPhone) GetPhoneRegistered() *Bool { return m.Data2.PhoneRegistered }


func NewTLAuthCheckedPhone() * TLAuthCheckedPhone {
    return &TLAuthCheckedPhone{ Data2: &Auth_CheckedPhone_Data{} }
}

func (m* TLAuthCheckedPhone) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_auth_checkedPhone))

    x.Bytes(m.GetPhoneRegistered().Encode())

    return x.buf
}

func (m* TLAuthCheckedPhone) Decode(dbuf *DecodeBuf) error {
    m1 := &Bool{}
    m1.Decode(dbuf)
    m.SetPhoneRegistered(m1)

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Auth_PasswordRecovery <--
//  + TL_AuthPasswordRecovery
//

func (m *Auth_PasswordRecovery) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_auth_passwordRecovery:
        t := m.To_AuthPasswordRecovery()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Auth_PasswordRecovery) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_auth_passwordRecovery:
        m2 := &TLAuthPasswordRecovery{&Auth_PasswordRecovery_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// auth.passwordRecovery#137948a5 email_pattern:string = auth.PasswordRecovery;
func (m *Auth_PasswordRecovery) To_AuthPasswordRecovery() *TLAuthPasswordRecovery {
    return &TLAuthPasswordRecovery{
        Data2: m.Data2,
    }
}



// auth.passwordRecovery#137948a5 email_pattern:string = auth.PasswordRecovery;
func (m *TLAuthPasswordRecovery) To_Auth_PasswordRecovery() *Auth_PasswordRecovery {
    return &Auth_PasswordRecovery{
        Constructor: TLConstructor_CRC32_auth_passwordRecovery,
        Data2: m.Data2,
    }
}


func (m *TLAuthPasswordRecovery) SetEmailPattern(v string) { m.Data2.EmailPattern = v }
func (m *TLAuthPasswordRecovery) GetEmailPattern() string { return m.Data2.EmailPattern }


func NewTLAuthPasswordRecovery() * TLAuthPasswordRecovery {
    return &TLAuthPasswordRecovery{ Data2: &Auth_PasswordRecovery_Data{} }
}

func (m* TLAuthPasswordRecovery) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_auth_passwordRecovery))

    x.String(m.GetEmailPattern())

    return x.buf
}

func (m* TLAuthPasswordRecovery) Decode(dbuf *DecodeBuf) error {
    m.SetEmailPattern(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// PhoneCall <--
//  + TL_PhoneCallEmpty
//  + TL_PhoneCallWaiting
//  + TL_PhoneCallRequested
//  + TL_PhoneCallAccepted
//  + TL_PhoneCall
//  + TL_PhoneCallDiscarded
//  + TL_PhoneCallWebrtcOffer
//  + TL_PhoneCallWebrtcAnswer
//  + TL_PhoneCallWebrtcCandidate
//  + TL_PhoneCallRequested114
//  + TL_PhoneCallAccepted114
//  + TL_PhoneCall114
//

func (m *PhoneCall) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_phoneCallEmpty:
        t := m.To_PhoneCallEmpty()
        return t.Encode()
    case TLConstructor_CRC32_phoneCallWaiting:
        t := m.To_PhoneCallWaiting()
        return t.Encode()
    case TLConstructor_CRC32_phoneCallRequested:
        t := m.To_PhoneCallRequested()
        return t.Encode()
    case TLConstructor_CRC32_phoneCallAccepted:
        t := m.To_PhoneCallAccepted()
        return t.Encode()
    case TLConstructor_CRC32_phoneCall:
        t := m.To_PhoneCall()
        return t.Encode()
    case TLConstructor_CRC32_phoneCallDiscarded:
        t := m.To_PhoneCallDiscarded()
        return t.Encode()
    case TLConstructor_CRC32_phoneCallWebrtcOffer:
        t := m.To_PhoneCallWebrtcOffer()
        return t.Encode()
    case TLConstructor_CRC32_phoneCallWebrtcAnswer:
        t := m.To_PhoneCallWebrtcAnswer()
        return t.Encode()
    case TLConstructor_CRC32_phoneCallWebrtcCandidate:
        t := m.To_PhoneCallWebrtcCandidate()
        return t.Encode()
    case TLConstructor_CRC32_phoneCallRequested114:
        t := m.To_PhoneCallRequested114()
        return t.Encode()
    case TLConstructor_CRC32_phoneCallAccepted114:
        t := m.To_PhoneCallAccepted114()
        return t.Encode()
    case TLConstructor_CRC32_phoneCall114:
        t := m.To_PhoneCall114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *PhoneCall) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_phoneCallEmpty:
        m2 := &TLPhoneCallEmpty{&PhoneCall_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_phoneCallWaiting:
        m2 := &TLPhoneCallWaiting{&PhoneCall_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_phoneCallRequested:
        m2 := &TLPhoneCallRequested{&PhoneCall_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_phoneCallAccepted:
        m2 := &TLPhoneCallAccepted{&PhoneCall_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_phoneCall:
        m2 := &TLPhoneCall{&PhoneCall_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_phoneCallDiscarded:
        m2 := &TLPhoneCallDiscarded{&PhoneCall_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_phoneCallWebrtcOffer:
        m2 := &TLPhoneCallWebrtcOffer{&PhoneCall_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_phoneCallWebrtcAnswer:
        m2 := &TLPhoneCallWebrtcAnswer{&PhoneCall_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_phoneCallWebrtcCandidate:
        m2 := &TLPhoneCallWebrtcCandidate{&PhoneCall_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_phoneCallRequested114:
        m2 := &TLPhoneCallRequested114{&PhoneCall_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_phoneCallAccepted114:
        m2 := &TLPhoneCallAccepted114{&PhoneCall_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_phoneCall114:
        m2 := &TLPhoneCall114{&PhoneCall_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// phoneCallEmpty#5366c915 id:long = PhoneCall;
func (m *PhoneCall) To_PhoneCallEmpty() *TLPhoneCallEmpty {
    return &TLPhoneCallEmpty{
        Data2: m.Data2,
    }
}

// phoneCallWaiting#1b8f4ad1 flags:# id:long access_hash:long date:int admin_id:int participant_id:int protocol:PhoneCallProtocol receive_date:flags.0?int = PhoneCall;
func (m *PhoneCall) To_PhoneCallWaiting() *TLPhoneCallWaiting {
    return &TLPhoneCallWaiting{
        Data2: m.Data2,
    }
}

// phoneCallRequested#83761ce4 id:long access_hash:long date:int admin_id:int participant_id:int g_a_hash:bytes protocol:PhoneCallProtocol = PhoneCall;
func (m *PhoneCall) To_PhoneCallRequested() *TLPhoneCallRequested {
    return &TLPhoneCallRequested{
        Data2: m.Data2,
    }
}

// phoneCallAccepted#6d003d3f id:long access_hash:long date:int admin_id:int participant_id:int g_b:bytes protocol:PhoneCallProtocol = PhoneCall;
func (m *PhoneCall) To_PhoneCallAccepted() *TLPhoneCallAccepted {
    return &TLPhoneCallAccepted{
        Data2: m.Data2,
    }
}

// phoneCall#ffe6ab67 id:long access_hash:long date:int admin_id:int participant_id:int g_a_or_b:bytes key_fingerprint:long protocol:PhoneCallProtocol connection:PhoneConnection alternative_connections:Vector<PhoneConnection> start_date:int = PhoneCall;
func (m *PhoneCall) To_PhoneCall() *TLPhoneCall {
    return &TLPhoneCall{
        Data2: m.Data2,
    }
}

// phoneCallDiscarded#50ca4de1 flags:# need_rating:flags.2?true need_debug:flags.3?true id:long reason:flags.0?PhoneCallDiscardReason duration:flags.1?int = PhoneCall;
func (m *PhoneCall) To_PhoneCallDiscarded() *TLPhoneCallDiscarded {
    return &TLPhoneCallDiscarded{
        Data2: m.Data2,
    }
}

// phoneCallWebrtcOffer#9222f46 id:long access_hash:long sdp:string = PhoneCall;
func (m *PhoneCall) To_PhoneCallWebrtcOffer() *TLPhoneCallWebrtcOffer {
    return &TLPhoneCallWebrtcOffer{
        Data2: m.Data2,
    }
}

// phoneCallWebrtcAnswer#190263d5 id:long access_hash:long sdp:string = PhoneCall;
func (m *PhoneCall) To_PhoneCallWebrtcAnswer() *TLPhoneCallWebrtcAnswer {
    return &TLPhoneCallWebrtcAnswer{
        Data2: m.Data2,
    }
}

// phoneCallWebrtcCandidate#abca288a id:long access_hash:long sdp_id:string sdp_index:int sdp:string = PhoneCall;
func (m *PhoneCall) To_PhoneCallWebrtcCandidate() *TLPhoneCallWebrtcCandidate {
    return &TLPhoneCallWebrtcCandidate{
        Data2: m.Data2,
    }
}

// phoneCallRequested#87eabb53 flags:# video:flags.5?true id:long access_hash:long date:int admin_id:int participant_id:int g_a_hash:bytes protocol:PhoneCallProtocol = PhoneCall;
func (m *PhoneCall) To_PhoneCallRequested114() *TLPhoneCallRequested114 {
    return &TLPhoneCallRequested114{
        Data2: m.Data2,
    }
}

// phoneCallAccepted#997c454a flags:# video:flags.5?true id:long access_hash:long date:int admin_id:int participant_id:int g_b:bytes protocol:PhoneCallProtocol = PhoneCall;
func (m *PhoneCall) To_PhoneCallAccepted114() *TLPhoneCallAccepted114 {
    return &TLPhoneCallAccepted114{
        Data2: m.Data2,
    }
}

// phoneCall#8742ae7f flags:# p2p_allowed:flags.5?true id:long access_hash:long date:int admin_id:int participant_id:int g_a_or_b:bytes key_fingerprint:long protocol:PhoneCallProtocol connections:Vector<PhoneConnection> start_date:int = PhoneCall;
func (m *PhoneCall) To_PhoneCall114() *TLPhoneCall114 {
    return &TLPhoneCall114{
        Data2: m.Data2,
    }
}



// phoneCallEmpty#5366c915 id:long = PhoneCall;
func (m *TLPhoneCallEmpty) To_PhoneCall() *PhoneCall {
    return &PhoneCall{
        Constructor: TLConstructor_CRC32_phoneCallEmpty,
        Data2: m.Data2,
    }
}


func (m *TLPhoneCallEmpty) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoneCallEmpty) GetId() int64 { return m.Data2.Id }


func NewTLPhoneCallEmpty() * TLPhoneCallEmpty {
    return &TLPhoneCallEmpty{ Data2: &PhoneCall_Data{} }
}

func (m* TLPhoneCallEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_phoneCallEmpty))

    x.Long(m.GetId())

    return x.buf
}

func (m* TLPhoneCallEmpty) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())

    return dbuf.err
}
// phoneCallWaiting#1b8f4ad1 flags:# id:long access_hash:long date:int admin_id:int participant_id:int protocol:PhoneCallProtocol receive_date:flags.0?int = PhoneCall;
func (m *TLPhoneCallWaiting) To_PhoneCall() *PhoneCall {
    return &PhoneCall{
        Constructor: TLConstructor_CRC32_phoneCallWaiting,
        Data2: m.Data2,
    }
}


func (m *TLPhoneCallWaiting) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoneCallWaiting) GetId() int64 { return m.Data2.Id }

func (m *TLPhoneCallWaiting) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLPhoneCallWaiting) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLPhoneCallWaiting) SetDate(v int32) { m.Data2.Date = v }
func (m *TLPhoneCallWaiting) GetDate() int32 { return m.Data2.Date }

func (m *TLPhoneCallWaiting) SetAdminId(v int32) { m.Data2.AdminId = v }
func (m *TLPhoneCallWaiting) GetAdminId() int32 { return m.Data2.AdminId }

func (m *TLPhoneCallWaiting) SetParticipantId(v int32) { m.Data2.ParticipantId = v }
func (m *TLPhoneCallWaiting) GetParticipantId() int32 { return m.Data2.ParticipantId }

func (m *TLPhoneCallWaiting) SetProtocol(v *PhoneCallProtocol) { m.Data2.Protocol = v }
func (m *TLPhoneCallWaiting) GetProtocol() *PhoneCallProtocol { return m.Data2.Protocol }

func (m *TLPhoneCallWaiting) SetReceiveDate(v int32) { m.Data2.ReceiveDate = v }
func (m *TLPhoneCallWaiting) GetReceiveDate() int32 { return m.Data2.ReceiveDate }


func NewTLPhoneCallWaiting() * TLPhoneCallWaiting {
    return &TLPhoneCallWaiting{ Data2: &PhoneCall_Data{} }
}

func (m* TLPhoneCallWaiting) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_phoneCallWaiting))

    // flags
    var flags uint32 = 0
    if m.GetReceiveDate() != 0 { flags |= 1 << 0 }
	x.UInt(flags)

    x.Long(m.GetId())
    x.Long(m.GetAccessHash())
    x.Int(m.GetDate())
    x.Int(m.GetAdminId())
    x.Int(m.GetParticipantId())
    x.Bytes(m.GetProtocol().Encode())
    if (flags & (1 << 0)) != 0 { x.Int(m.GetReceiveDate()) }

    return x.buf
}

func (m* TLPhoneCallWaiting) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())
    m.SetDate(dbuf.Int())
    m.SetAdminId(dbuf.Int())
    m.SetParticipantId(dbuf.Int())
    m7 := &PhoneCallProtocol{}
    m7.Decode(dbuf)
    m.SetProtocol(m7)
    if (flags & (1 << 0)) != 0 { m.SetReceiveDate(dbuf.Int()) }

    return dbuf.err
}
// phoneCallRequested#83761ce4 id:long access_hash:long date:int admin_id:int participant_id:int g_a_hash:bytes protocol:PhoneCallProtocol = PhoneCall;
func (m *TLPhoneCallRequested) To_PhoneCall() *PhoneCall {
    return &PhoneCall{
        Constructor: TLConstructor_CRC32_phoneCallRequested,
        Data2: m.Data2,
    }
}


func (m *TLPhoneCallRequested) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoneCallRequested) GetId() int64 { return m.Data2.Id }

func (m *TLPhoneCallRequested) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLPhoneCallRequested) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLPhoneCallRequested) SetDate(v int32) { m.Data2.Date = v }
func (m *TLPhoneCallRequested) GetDate() int32 { return m.Data2.Date }

func (m *TLPhoneCallRequested) SetAdminId(v int32) { m.Data2.AdminId = v }
func (m *TLPhoneCallRequested) GetAdminId() int32 { return m.Data2.AdminId }

func (m *TLPhoneCallRequested) SetParticipantId(v int32) { m.Data2.ParticipantId = v }
func (m *TLPhoneCallRequested) GetParticipantId() int32 { return m.Data2.ParticipantId }

func (m *TLPhoneCallRequested) SetGAHash(v []byte) { m.Data2.GAHash = v }
func (m *TLPhoneCallRequested) GetGAHash() []byte { return m.Data2.GAHash }

func (m *TLPhoneCallRequested) SetProtocol(v *PhoneCallProtocol) { m.Data2.Protocol = v }
func (m *TLPhoneCallRequested) GetProtocol() *PhoneCallProtocol { return m.Data2.Protocol }


func NewTLPhoneCallRequested() * TLPhoneCallRequested {
    return &TLPhoneCallRequested{ Data2: &PhoneCall_Data{} }
}

func (m* TLPhoneCallRequested) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_phoneCallRequested))

    x.Long(m.GetId())
    x.Long(m.GetAccessHash())
    x.Int(m.GetDate())
    x.Int(m.GetAdminId())
    x.Int(m.GetParticipantId())
    x.StringBytes(m.GetGAHash())
    x.Bytes(m.GetProtocol().Encode())

    return x.buf
}

func (m* TLPhoneCallRequested) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())
    m.SetDate(dbuf.Int())
    m.SetAdminId(dbuf.Int())
    m.SetParticipantId(dbuf.Int())
    m.SetGAHash(dbuf.StringBytes())
    m7 := &PhoneCallProtocol{}
    m7.Decode(dbuf)
    m.SetProtocol(m7)

    return dbuf.err
}
// phoneCallAccepted#6d003d3f id:long access_hash:long date:int admin_id:int participant_id:int g_b:bytes protocol:PhoneCallProtocol = PhoneCall;
func (m *TLPhoneCallAccepted) To_PhoneCall() *PhoneCall {
    return &PhoneCall{
        Constructor: TLConstructor_CRC32_phoneCallAccepted,
        Data2: m.Data2,
    }
}


func (m *TLPhoneCallAccepted) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoneCallAccepted) GetId() int64 { return m.Data2.Id }

func (m *TLPhoneCallAccepted) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLPhoneCallAccepted) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLPhoneCallAccepted) SetDate(v int32) { m.Data2.Date = v }
func (m *TLPhoneCallAccepted) GetDate() int32 { return m.Data2.Date }

func (m *TLPhoneCallAccepted) SetAdminId(v int32) { m.Data2.AdminId = v }
func (m *TLPhoneCallAccepted) GetAdminId() int32 { return m.Data2.AdminId }

func (m *TLPhoneCallAccepted) SetParticipantId(v int32) { m.Data2.ParticipantId = v }
func (m *TLPhoneCallAccepted) GetParticipantId() int32 { return m.Data2.ParticipantId }

func (m *TLPhoneCallAccepted) SetGB(v []byte) { m.Data2.GB = v }
func (m *TLPhoneCallAccepted) GetGB() []byte { return m.Data2.GB }

func (m *TLPhoneCallAccepted) SetProtocol(v *PhoneCallProtocol) { m.Data2.Protocol = v }
func (m *TLPhoneCallAccepted) GetProtocol() *PhoneCallProtocol { return m.Data2.Protocol }


func NewTLPhoneCallAccepted() * TLPhoneCallAccepted {
    return &TLPhoneCallAccepted{ Data2: &PhoneCall_Data{} }
}

func (m* TLPhoneCallAccepted) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_phoneCallAccepted))

    x.Long(m.GetId())
    x.Long(m.GetAccessHash())
    x.Int(m.GetDate())
    x.Int(m.GetAdminId())
    x.Int(m.GetParticipantId())
    x.StringBytes(m.GetGB())
    x.Bytes(m.GetProtocol().Encode())

    return x.buf
}

func (m* TLPhoneCallAccepted) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())
    m.SetDate(dbuf.Int())
    m.SetAdminId(dbuf.Int())
    m.SetParticipantId(dbuf.Int())
    m.SetGB(dbuf.StringBytes())
    m7 := &PhoneCallProtocol{}
    m7.Decode(dbuf)
    m.SetProtocol(m7)

    return dbuf.err
}
// phoneCall#ffe6ab67 id:long access_hash:long date:int admin_id:int participant_id:int g_a_or_b:bytes key_fingerprint:long protocol:PhoneCallProtocol connection:PhoneConnection alternative_connections:Vector<PhoneConnection> start_date:int = PhoneCall;
func (m *TLPhoneCall) To_PhoneCall() *PhoneCall {
    return &PhoneCall{
        Constructor: TLConstructor_CRC32_phoneCall,
        Data2: m.Data2,
    }
}


func (m *TLPhoneCall) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoneCall) GetId() int64 { return m.Data2.Id }

func (m *TLPhoneCall) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLPhoneCall) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLPhoneCall) SetDate(v int32) { m.Data2.Date = v }
func (m *TLPhoneCall) GetDate() int32 { return m.Data2.Date }

func (m *TLPhoneCall) SetAdminId(v int32) { m.Data2.AdminId = v }
func (m *TLPhoneCall) GetAdminId() int32 { return m.Data2.AdminId }

func (m *TLPhoneCall) SetParticipantId(v int32) { m.Data2.ParticipantId = v }
func (m *TLPhoneCall) GetParticipantId() int32 { return m.Data2.ParticipantId }

func (m *TLPhoneCall) SetGAOrB(v []byte) { m.Data2.GAOrB = v }
func (m *TLPhoneCall) GetGAOrB() []byte { return m.Data2.GAOrB }

func (m *TLPhoneCall) SetKeyFingerprint(v int64) { m.Data2.KeyFingerprint = v }
func (m *TLPhoneCall) GetKeyFingerprint() int64 { return m.Data2.KeyFingerprint }

func (m *TLPhoneCall) SetProtocol(v *PhoneCallProtocol) { m.Data2.Protocol = v }
func (m *TLPhoneCall) GetProtocol() *PhoneCallProtocol { return m.Data2.Protocol }

func (m *TLPhoneCall) SetConnection(v *PhoneConnection) { m.Data2.Connection = v }
func (m *TLPhoneCall) GetConnection() *PhoneConnection { return m.Data2.Connection }

func (m *TLPhoneCall) SetAlternativeConnections(v []*PhoneConnection) { m.Data2.AlternativeConnections = v }
func (m *TLPhoneCall) GetAlternativeConnections() []*PhoneConnection { return m.Data2.AlternativeConnections }

func (m *TLPhoneCall) SetStartDate(v int32) { m.Data2.StartDate = v }
func (m *TLPhoneCall) GetStartDate() int32 { return m.Data2.StartDate }


func NewTLPhoneCall() * TLPhoneCall {
    return &TLPhoneCall{ Data2: &PhoneCall_Data{} }
}

func (m* TLPhoneCall) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_phoneCall))

    x.Long(m.GetId())
    x.Long(m.GetAccessHash())
    x.Int(m.GetDate())
    x.Int(m.GetAdminId())
    x.Int(m.GetParticipantId())
    x.StringBytes(m.GetGAOrB())
    x.Long(m.GetKeyFingerprint())
    x.Bytes(m.GetProtocol().Encode())
    x.Bytes(m.GetConnection().Encode())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetAlternativeConnections())))
for _, v := range m.GetAlternativeConnections() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(m.GetStartDate())

    return x.buf
}

func (m* TLPhoneCall) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())
    m.SetDate(dbuf.Int())
    m.SetAdminId(dbuf.Int())
    m.SetParticipantId(dbuf.Int())
    m.SetGAOrB(dbuf.StringBytes())
    m.SetKeyFingerprint(dbuf.Long())
    m8 := &PhoneCallProtocol{}
    m8.Decode(dbuf)
    m.SetProtocol(m8)
    m9 := &PhoneConnection{}
    m9.Decode(dbuf)
    m.SetConnection(m9)
    c10 := dbuf.Int()
if c10 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 10, c10)
	return dbuf.err
}
l10 := dbuf.Int()
v10 := make([]*PhoneConnection, l10)
for i := int32(0); i < l10; i++ {
	v10[i] = &PhoneConnection{}
	v10[i].Decode(dbuf)
}
m.SetAlternativeConnections(v10)

    m.SetStartDate(dbuf.Int())

    return dbuf.err
}
// phoneCallDiscarded#50ca4de1 flags:# need_rating:flags.2?true need_debug:flags.3?true id:long reason:flags.0?PhoneCallDiscardReason duration:flags.1?int = PhoneCall;
func (m *TLPhoneCallDiscarded) To_PhoneCall() *PhoneCall {
    return &PhoneCall{
        Constructor: TLConstructor_CRC32_phoneCallDiscarded,
        Data2: m.Data2,
    }
}


func (m *TLPhoneCallDiscarded) SetNeedRating(v bool) { m.Data2.NeedRating = v }
func (m *TLPhoneCallDiscarded) GetNeedRating() bool { return m.Data2.NeedRating }

func (m *TLPhoneCallDiscarded) SetNeedDebug(v bool) { m.Data2.NeedDebug = v }
func (m *TLPhoneCallDiscarded) GetNeedDebug() bool { return m.Data2.NeedDebug }

func (m *TLPhoneCallDiscarded) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoneCallDiscarded) GetId() int64 { return m.Data2.Id }

func (m *TLPhoneCallDiscarded) SetReason(v *PhoneCallDiscardReason) { m.Data2.Reason = v }
func (m *TLPhoneCallDiscarded) GetReason() *PhoneCallDiscardReason { return m.Data2.Reason }

func (m *TLPhoneCallDiscarded) SetDuration(v int32) { m.Data2.Duration = v }
func (m *TLPhoneCallDiscarded) GetDuration() int32 { return m.Data2.Duration }


func NewTLPhoneCallDiscarded() * TLPhoneCallDiscarded {
    return &TLPhoneCallDiscarded{ Data2: &PhoneCall_Data{} }
}

func (m* TLPhoneCallDiscarded) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_phoneCallDiscarded))

    // flags
    var flags uint32 = 0
    if m.GetNeedRating() == true { flags |= 1 << 2 }
    if m.GetNeedDebug() == true { flags |= 1 << 3 }
    if m.GetReason() != nil { flags |= 1 << 0 }
    if m.GetDuration() != 0 { flags |= 1 << 1 }
	x.UInt(flags)

    
    
    x.Long(m.GetId())
    if (flags & (1 << 0)) != 0 { x.Bytes(m.GetReason().Encode()) }
    if (flags & (1 << 1)) != 0 { x.Int(m.GetDuration()) }

    return x.buf
}

func (m* TLPhoneCallDiscarded) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 2)) != 0 { m.SetNeedRating(true) }
    if (flags & (1 << 3)) != 0 { m.SetNeedDebug(true) }
    m.SetId(dbuf.Long())
    if (flags & (1 << 0)) != 0 {
 m5 := &PhoneCallDiscardReason{}
    m5.Decode(dbuf)
    m.SetReason(m5) 
}
    if (flags & (1 << 1)) != 0 { m.SetDuration(dbuf.Int()) }

    return dbuf.err
}
// phoneCallWebrtcOffer#9222f46 id:long access_hash:long sdp:string = PhoneCall;
func (m *TLPhoneCallWebrtcOffer) To_PhoneCall() *PhoneCall {
    return &PhoneCall{
        Constructor: TLConstructor_CRC32_phoneCallWebrtcOffer,
        Data2: m.Data2,
    }
}


func (m *TLPhoneCallWebrtcOffer) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoneCallWebrtcOffer) GetId() int64 { return m.Data2.Id }

func (m *TLPhoneCallWebrtcOffer) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLPhoneCallWebrtcOffer) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLPhoneCallWebrtcOffer) SetSdp(v string) { m.Data2.Sdp = v }
func (m *TLPhoneCallWebrtcOffer) GetSdp() string { return m.Data2.Sdp }


func NewTLPhoneCallWebrtcOffer() * TLPhoneCallWebrtcOffer {
    return &TLPhoneCallWebrtcOffer{ Data2: &PhoneCall_Data{} }
}

func (m* TLPhoneCallWebrtcOffer) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_phoneCallWebrtcOffer))

    x.Long(m.GetId())
    x.Long(m.GetAccessHash())
    x.String(m.GetSdp())

    return x.buf
}

func (m* TLPhoneCallWebrtcOffer) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())
    m.SetSdp(dbuf.String())

    return dbuf.err
}
// phoneCallWebrtcAnswer#190263d5 id:long access_hash:long sdp:string = PhoneCall;
func (m *TLPhoneCallWebrtcAnswer) To_PhoneCall() *PhoneCall {
    return &PhoneCall{
        Constructor: TLConstructor_CRC32_phoneCallWebrtcAnswer,
        Data2: m.Data2,
    }
}


func (m *TLPhoneCallWebrtcAnswer) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoneCallWebrtcAnswer) GetId() int64 { return m.Data2.Id }

func (m *TLPhoneCallWebrtcAnswer) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLPhoneCallWebrtcAnswer) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLPhoneCallWebrtcAnswer) SetSdp(v string) { m.Data2.Sdp = v }
func (m *TLPhoneCallWebrtcAnswer) GetSdp() string { return m.Data2.Sdp }


func NewTLPhoneCallWebrtcAnswer() * TLPhoneCallWebrtcAnswer {
    return &TLPhoneCallWebrtcAnswer{ Data2: &PhoneCall_Data{} }
}

func (m* TLPhoneCallWebrtcAnswer) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_phoneCallWebrtcAnswer))

    x.Long(m.GetId())
    x.Long(m.GetAccessHash())
    x.String(m.GetSdp())

    return x.buf
}

func (m* TLPhoneCallWebrtcAnswer) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())
    m.SetSdp(dbuf.String())

    return dbuf.err
}
// phoneCallWebrtcCandidate#abca288a id:long access_hash:long sdp_id:string sdp_index:int sdp:string = PhoneCall;
func (m *TLPhoneCallWebrtcCandidate) To_PhoneCall() *PhoneCall {
    return &PhoneCall{
        Constructor: TLConstructor_CRC32_phoneCallWebrtcCandidate,
        Data2: m.Data2,
    }
}


func (m *TLPhoneCallWebrtcCandidate) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoneCallWebrtcCandidate) GetId() int64 { return m.Data2.Id }

func (m *TLPhoneCallWebrtcCandidate) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLPhoneCallWebrtcCandidate) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLPhoneCallWebrtcCandidate) SetSdpId(v string) { m.Data2.SdpId = v }
func (m *TLPhoneCallWebrtcCandidate) GetSdpId() string { return m.Data2.SdpId }

func (m *TLPhoneCallWebrtcCandidate) SetSdpIndex(v int32) { m.Data2.SdpIndex = v }
func (m *TLPhoneCallWebrtcCandidate) GetSdpIndex() int32 { return m.Data2.SdpIndex }

func (m *TLPhoneCallWebrtcCandidate) SetSdp(v string) { m.Data2.Sdp = v }
func (m *TLPhoneCallWebrtcCandidate) GetSdp() string { return m.Data2.Sdp }


func NewTLPhoneCallWebrtcCandidate() * TLPhoneCallWebrtcCandidate {
    return &TLPhoneCallWebrtcCandidate{ Data2: &PhoneCall_Data{} }
}

func (m* TLPhoneCallWebrtcCandidate) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_phoneCallWebrtcCandidate))

    x.Long(m.GetId())
    x.Long(m.GetAccessHash())
    x.String(m.GetSdpId())
    x.Int(m.GetSdpIndex())
    x.String(m.GetSdp())

    return x.buf
}

func (m* TLPhoneCallWebrtcCandidate) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())
    m.SetSdpId(dbuf.String())
    m.SetSdpIndex(dbuf.Int())
    m.SetSdp(dbuf.String())

    return dbuf.err
}
// phoneCallRequested#87eabb53 flags:# video:flags.5?true id:long access_hash:long date:int admin_id:int participant_id:int g_a_hash:bytes protocol:PhoneCallProtocol = PhoneCall;
func (m *TLPhoneCallRequested114) To_PhoneCall() *PhoneCall {
    return &PhoneCall{
        Constructor: TLConstructor_CRC32_phoneCallRequested114,
        Data2: m.Data2,
    }
}


func (m *TLPhoneCallRequested114) SetVideo(v bool) { m.Data2.Video = v }
func (m *TLPhoneCallRequested114) GetVideo() bool { return m.Data2.Video }

func (m *TLPhoneCallRequested114) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoneCallRequested114) GetId() int64 { return m.Data2.Id }

func (m *TLPhoneCallRequested114) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLPhoneCallRequested114) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLPhoneCallRequested114) SetDate(v int32) { m.Data2.Date = v }
func (m *TLPhoneCallRequested114) GetDate() int32 { return m.Data2.Date }

func (m *TLPhoneCallRequested114) SetAdminId(v int32) { m.Data2.AdminId = v }
func (m *TLPhoneCallRequested114) GetAdminId() int32 { return m.Data2.AdminId }

func (m *TLPhoneCallRequested114) SetParticipantId(v int32) { m.Data2.ParticipantId = v }
func (m *TLPhoneCallRequested114) GetParticipantId() int32 { return m.Data2.ParticipantId }

func (m *TLPhoneCallRequested114) SetGAHash(v []byte) { m.Data2.GAHash = v }
func (m *TLPhoneCallRequested114) GetGAHash() []byte { return m.Data2.GAHash }

func (m *TLPhoneCallRequested114) SetProtocol(v *PhoneCallProtocol) { m.Data2.Protocol = v }
func (m *TLPhoneCallRequested114) GetProtocol() *PhoneCallProtocol { return m.Data2.Protocol }


func NewTLPhoneCallRequested114() * TLPhoneCallRequested114 {
    return &TLPhoneCallRequested114{ Data2: &PhoneCall_Data{} }
}

func (m* TLPhoneCallRequested114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_phoneCallRequested114))

    // flags
    var flags uint32 = 0
    if m.GetVideo() == true { flags |= 1 << 5 }
	x.UInt(flags)

    
    x.Long(m.GetId())
    x.Long(m.GetAccessHash())
    x.Int(m.GetDate())
    x.Int(m.GetAdminId())
    x.Int(m.GetParticipantId())
    x.StringBytes(m.GetGAHash())
    x.Bytes(m.GetProtocol().Encode())

    return x.buf
}

func (m* TLPhoneCallRequested114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 5)) != 0 { m.SetVideo(true) }
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())
    m.SetDate(dbuf.Int())
    m.SetAdminId(dbuf.Int())
    m.SetParticipantId(dbuf.Int())
    m.SetGAHash(dbuf.StringBytes())
    m9 := &PhoneCallProtocol{}
    m9.Decode(dbuf)
    m.SetProtocol(m9)

    return dbuf.err
}
// phoneCallAccepted#997c454a flags:# video:flags.5?true id:long access_hash:long date:int admin_id:int participant_id:int g_b:bytes protocol:PhoneCallProtocol = PhoneCall;
func (m *TLPhoneCallAccepted114) To_PhoneCall() *PhoneCall {
    return &PhoneCall{
        Constructor: TLConstructor_CRC32_phoneCallAccepted114,
        Data2: m.Data2,
    }
}


func (m *TLPhoneCallAccepted114) SetVideo(v bool) { m.Data2.Video = v }
func (m *TLPhoneCallAccepted114) GetVideo() bool { return m.Data2.Video }

func (m *TLPhoneCallAccepted114) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoneCallAccepted114) GetId() int64 { return m.Data2.Id }

func (m *TLPhoneCallAccepted114) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLPhoneCallAccepted114) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLPhoneCallAccepted114) SetDate(v int32) { m.Data2.Date = v }
func (m *TLPhoneCallAccepted114) GetDate() int32 { return m.Data2.Date }

func (m *TLPhoneCallAccepted114) SetAdminId(v int32) { m.Data2.AdminId = v }
func (m *TLPhoneCallAccepted114) GetAdminId() int32 { return m.Data2.AdminId }

func (m *TLPhoneCallAccepted114) SetParticipantId(v int32) { m.Data2.ParticipantId = v }
func (m *TLPhoneCallAccepted114) GetParticipantId() int32 { return m.Data2.ParticipantId }

func (m *TLPhoneCallAccepted114) SetGB(v []byte) { m.Data2.GB = v }
func (m *TLPhoneCallAccepted114) GetGB() []byte { return m.Data2.GB }

func (m *TLPhoneCallAccepted114) SetProtocol(v *PhoneCallProtocol) { m.Data2.Protocol = v }
func (m *TLPhoneCallAccepted114) GetProtocol() *PhoneCallProtocol { return m.Data2.Protocol }


func NewTLPhoneCallAccepted114() * TLPhoneCallAccepted114 {
    return &TLPhoneCallAccepted114{ Data2: &PhoneCall_Data{} }
}

func (m* TLPhoneCallAccepted114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_phoneCallAccepted114))

    // flags
    var flags uint32 = 0
    if m.GetVideo() == true { flags |= 1 << 5 }
	x.UInt(flags)

    
    x.Long(m.GetId())
    x.Long(m.GetAccessHash())
    x.Int(m.GetDate())
    x.Int(m.GetAdminId())
    x.Int(m.GetParticipantId())
    x.StringBytes(m.GetGB())
    x.Bytes(m.GetProtocol().Encode())

    return x.buf
}

func (m* TLPhoneCallAccepted114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 5)) != 0 { m.SetVideo(true) }
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())
    m.SetDate(dbuf.Int())
    m.SetAdminId(dbuf.Int())
    m.SetParticipantId(dbuf.Int())
    m.SetGB(dbuf.StringBytes())
    m9 := &PhoneCallProtocol{}
    m9.Decode(dbuf)
    m.SetProtocol(m9)

    return dbuf.err
}
// phoneCall#8742ae7f flags:# p2p_allowed:flags.5?true id:long access_hash:long date:int admin_id:int participant_id:int g_a_or_b:bytes key_fingerprint:long protocol:PhoneCallProtocol connections:Vector<PhoneConnection> start_date:int = PhoneCall;
func (m *TLPhoneCall114) To_PhoneCall() *PhoneCall {
    return &PhoneCall{
        Constructor: TLConstructor_CRC32_phoneCall114,
        Data2: m.Data2,
    }
}


func (m *TLPhoneCall114) SetP2pAllowed(v bool) { m.Data2.P2PAllowed = v }
func (m *TLPhoneCall114) GetP2pAllowed() bool { return m.Data2.P2PAllowed }

func (m *TLPhoneCall114) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoneCall114) GetId() int64 { return m.Data2.Id }

func (m *TLPhoneCall114) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLPhoneCall114) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLPhoneCall114) SetDate(v int32) { m.Data2.Date = v }
func (m *TLPhoneCall114) GetDate() int32 { return m.Data2.Date }

func (m *TLPhoneCall114) SetAdminId(v int32) { m.Data2.AdminId = v }
func (m *TLPhoneCall114) GetAdminId() int32 { return m.Data2.AdminId }

func (m *TLPhoneCall114) SetParticipantId(v int32) { m.Data2.ParticipantId = v }
func (m *TLPhoneCall114) GetParticipantId() int32 { return m.Data2.ParticipantId }

func (m *TLPhoneCall114) SetGAOrB(v []byte) { m.Data2.GAOrB = v }
func (m *TLPhoneCall114) GetGAOrB() []byte { return m.Data2.GAOrB }

func (m *TLPhoneCall114) SetKeyFingerprint(v int64) { m.Data2.KeyFingerprint = v }
func (m *TLPhoneCall114) GetKeyFingerprint() int64 { return m.Data2.KeyFingerprint }

func (m *TLPhoneCall114) SetProtocol(v *PhoneCallProtocol) { m.Data2.Protocol = v }
func (m *TLPhoneCall114) GetProtocol() *PhoneCallProtocol { return m.Data2.Protocol }

func (m *TLPhoneCall114) SetConnections(v []*PhoneConnection) { m.Data2.Connections = v }
func (m *TLPhoneCall114) GetConnections() []*PhoneConnection { return m.Data2.Connections }

func (m *TLPhoneCall114) SetStartDate(v int32) { m.Data2.StartDate = v }
func (m *TLPhoneCall114) GetStartDate() int32 { return m.Data2.StartDate }


func NewTLPhoneCall114() * TLPhoneCall114 {
    return &TLPhoneCall114{ Data2: &PhoneCall_Data{} }
}

func (m* TLPhoneCall114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_phoneCall114))

    // flags
    var flags uint32 = 0
    if m.GetP2pAllowed() == true { flags |= 1 << 5 }
	x.UInt(flags)

    
    x.Long(m.GetId())
    x.Long(m.GetAccessHash())
    x.Int(m.GetDate())
    x.Int(m.GetAdminId())
    x.Int(m.GetParticipantId())
    x.StringBytes(m.GetGAOrB())
    x.Long(m.GetKeyFingerprint())
    x.Bytes(m.GetProtocol().Encode())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetConnections())))
for _, v := range m.GetConnections() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(m.GetStartDate())

    return x.buf
}

func (m* TLPhoneCall114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 5)) != 0 { m.SetP2pAllowed(true) }
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())
    m.SetDate(dbuf.Int())
    m.SetAdminId(dbuf.Int())
    m.SetParticipantId(dbuf.Int())
    m.SetGAOrB(dbuf.StringBytes())
    m.SetKeyFingerprint(dbuf.Long())
    m10 := &PhoneCallProtocol{}
    m10.Decode(dbuf)
    m.SetProtocol(m10)
    c11 := dbuf.Int()
if c11 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 11, c11)
	return dbuf.err
}
l11 := dbuf.Int()
v11 := make([]*PhoneConnection, l11)
for i := int32(0); i < l11; i++ {
	v11[i] = &PhoneConnection{}
	v11[i].Decode(dbuf)
}
m.SetConnections(v11)

    m.SetStartDate(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Channels_AdminLogResults <--
//  + TL_ChannelsAdminLogResults
//

func (m *Channels_AdminLogResults) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_channels_adminLogResults:
        t := m.To_ChannelsAdminLogResults()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Channels_AdminLogResults) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_channels_adminLogResults:
        m2 := &TLChannelsAdminLogResults{&Channels_AdminLogResults_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// channels.adminLogResults#ed8af74d events:Vector<ChannelAdminLogEvent> chats:Vector<Chat> users:Vector<User> = channels.AdminLogResults;
func (m *Channels_AdminLogResults) To_ChannelsAdminLogResults() *TLChannelsAdminLogResults {
    return &TLChannelsAdminLogResults{
        Data2: m.Data2,
    }
}



// channels.adminLogResults#ed8af74d events:Vector<ChannelAdminLogEvent> chats:Vector<Chat> users:Vector<User> = channels.AdminLogResults;
func (m *TLChannelsAdminLogResults) To_Channels_AdminLogResults() *Channels_AdminLogResults {
    return &Channels_AdminLogResults{
        Constructor: TLConstructor_CRC32_channels_adminLogResults,
        Data2: m.Data2,
    }
}


func (m *TLChannelsAdminLogResults) SetEvents(v []*ChannelAdminLogEvent) { m.Data2.Events = v }
func (m *TLChannelsAdminLogResults) GetEvents() []*ChannelAdminLogEvent { return m.Data2.Events }

func (m *TLChannelsAdminLogResults) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLChannelsAdminLogResults) GetChats() []*Chat { return m.Data2.Chats }

func (m *TLChannelsAdminLogResults) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLChannelsAdminLogResults) GetUsers() []*User { return m.Data2.Users }


func NewTLChannelsAdminLogResults() * TLChannelsAdminLogResults {
    return &TLChannelsAdminLogResults{ Data2: &Channels_AdminLogResults_Data{} }
}

func (m* TLChannelsAdminLogResults) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channels_adminLogResults))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetEvents())))
for _, v := range m.GetEvents() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetChats())))
for _, v := range m.GetChats() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLChannelsAdminLogResults) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*ChannelAdminLogEvent, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &ChannelAdminLogEvent{}
	v1[i].Decode(dbuf)
}
m.SetEvents(v1)

    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*Chat, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &Chat{}
	v2[i].Decode(dbuf)
}
m.SetChats(v2)

    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*User, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &User{}
	v3[i].Decode(dbuf)
}
m.SetUsers(v3)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// JSONValue <--
//  + TL_JsonNull
//  + TL_JsonBool
//  + TL_JsonNumber
//  + TL_JsonString
//  + TL_JsonArray
//  + TL_JsonObject
//

func (m *JSONValue) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_jsonNull:
        t := m.To_JsonNull()
        return t.Encode()
    case TLConstructor_CRC32_jsonBool:
        t := m.To_JsonBool()
        return t.Encode()
    case TLConstructor_CRC32_jsonNumber:
        t := m.To_JsonNumber()
        return t.Encode()
    case TLConstructor_CRC32_jsonString:
        t := m.To_JsonString()
        return t.Encode()
    case TLConstructor_CRC32_jsonArray:
        t := m.To_JsonArray()
        return t.Encode()
    case TLConstructor_CRC32_jsonObject:
        t := m.To_JsonObject()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *JSONValue) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_jsonNull:
        m2 := &TLJsonNull{&JSONValue_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_jsonBool:
        m2 := &TLJsonBool{&JSONValue_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_jsonNumber:
        m2 := &TLJsonNumber{&JSONValue_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_jsonString:
        m2 := &TLJsonString{&JSONValue_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_jsonArray:
        m2 := &TLJsonArray{&JSONValue_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_jsonObject:
        m2 := &TLJsonObject{&JSONValue_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// jsonNull#3f6d7b68 = JSONValue;
func (m *JSONValue) To_JsonNull() *TLJsonNull {
    return &TLJsonNull{
        Data2: m.Data2,
    }
}

// jsonBool#c7345e6a value:Bool = JSONValue;
func (m *JSONValue) To_JsonBool() *TLJsonBool {
    return &TLJsonBool{
        Data2: m.Data2,
    }
}

// jsonNumber#2be0dfa4 value:double = JSONValue;
func (m *JSONValue) To_JsonNumber() *TLJsonNumber {
    return &TLJsonNumber{
        Data2: m.Data2,
    }
}

// jsonString#b71e767a value:string = JSONValue;
func (m *JSONValue) To_JsonString() *TLJsonString {
    return &TLJsonString{
        Data2: m.Data2,
    }
}

// jsonArray#f7444763 value:Vector<JSONValue> = JSONValue;
func (m *JSONValue) To_JsonArray() *TLJsonArray {
    return &TLJsonArray{
        Data2: m.Data2,
    }
}

// jsonObject#99c1d49d value:Vector<JSONObjectValue> = JSONValue;
func (m *JSONValue) To_JsonObject() *TLJsonObject {
    return &TLJsonObject{
        Data2: m.Data2,
    }
}



// jsonNull#3f6d7b68 = JSONValue;
func (m *TLJsonNull) To_JSONValue() *JSONValue {
    return &JSONValue{
        Constructor: TLConstructor_CRC32_jsonNull,
        Data2: m.Data2,
    }
}



func NewTLJsonNull() * TLJsonNull {
    return &TLJsonNull{ Data2: &JSONValue_Data{} }
}

func (m* TLJsonNull) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_jsonNull))


    return x.buf
}

func (m* TLJsonNull) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// jsonBool#c7345e6a value:Bool = JSONValue;
func (m *TLJsonBool) To_JSONValue() *JSONValue {
    return &JSONValue{
        Constructor: TLConstructor_CRC32_jsonBool,
        Data2: m.Data2,
    }
}


func (m *TLJsonBool) SetValue(v *Bool) { m.Data2.Value_1 = v }
func (m *TLJsonBool) GetValue() *Bool { return m.Data2.Value_1 }


func NewTLJsonBool() * TLJsonBool {
    return &TLJsonBool{ Data2: &JSONValue_Data{} }
}

func (m* TLJsonBool) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_jsonBool))

    x.Bytes(m.GetValue().Encode())

    return x.buf
}

func (m* TLJsonBool) Decode(dbuf *DecodeBuf) error {
    m1 := &Bool{}
    m1.Decode(dbuf)
    m.SetValue(m1)

    return dbuf.err
}
// jsonNumber#2be0dfa4 value:double = JSONValue;
func (m *TLJsonNumber) To_JSONValue() *JSONValue {
    return &JSONValue{
        Constructor: TLConstructor_CRC32_jsonNumber,
        Data2: m.Data2,
    }
}


func (m *TLJsonNumber) SetValue(v float64) { m.Data2.Value_2 = v }
func (m *TLJsonNumber) GetValue() float64 { return m.Data2.Value_2 }


func NewTLJsonNumber() * TLJsonNumber {
    return &TLJsonNumber{ Data2: &JSONValue_Data{} }
}

func (m* TLJsonNumber) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_jsonNumber))

    x.Double(m.GetValue())

    return x.buf
}

func (m* TLJsonNumber) Decode(dbuf *DecodeBuf) error {
    m.SetValue(dbuf.Double())

    return dbuf.err
}
// jsonString#b71e767a value:string = JSONValue;
func (m *TLJsonString) To_JSONValue() *JSONValue {
    return &JSONValue{
        Constructor: TLConstructor_CRC32_jsonString,
        Data2: m.Data2,
    }
}


func (m *TLJsonString) SetValue(v string) { m.Data2.Value_3 = v }
func (m *TLJsonString) GetValue() string { return m.Data2.Value_3 }


func NewTLJsonString() * TLJsonString {
    return &TLJsonString{ Data2: &JSONValue_Data{} }
}

func (m* TLJsonString) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_jsonString))

    x.String(m.GetValue())

    return x.buf
}

func (m* TLJsonString) Decode(dbuf *DecodeBuf) error {
    m.SetValue(dbuf.String())

    return dbuf.err
}
// jsonArray#f7444763 value:Vector<JSONValue> = JSONValue;
func (m *TLJsonArray) To_JSONValue() *JSONValue {
    return &JSONValue{
        Constructor: TLConstructor_CRC32_jsonArray,
        Data2: m.Data2,
    }
}


func (m *TLJsonArray) SetValue(v []*JSONValue) { m.Data2.Value_4 = v }
func (m *TLJsonArray) GetValue() []*JSONValue { return m.Data2.Value_4 }


func NewTLJsonArray() * TLJsonArray {
    return &TLJsonArray{ Data2: &JSONValue_Data{} }
}

func (m* TLJsonArray) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_jsonArray))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetValue())))
for _, v := range m.GetValue() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLJsonArray) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*JSONValue, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &JSONValue{}
	v1[i].Decode(dbuf)
}
m.SetValue(v1)


    return dbuf.err
}
// jsonObject#99c1d49d value:Vector<JSONObjectValue> = JSONValue;
func (m *TLJsonObject) To_JSONValue() *JSONValue {
    return &JSONValue{
        Constructor: TLConstructor_CRC32_jsonObject,
        Data2: m.Data2,
    }
}


func (m *TLJsonObject) SetValue(v []*JSONObjectValue) { m.Data2.Value_5 = v }
func (m *TLJsonObject) GetValue() []*JSONObjectValue { return m.Data2.Value_5 }


func NewTLJsonObject() * TLJsonObject {
    return &TLJsonObject{ Data2: &JSONValue_Data{} }
}

func (m* TLJsonObject) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_jsonObject))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetValue())))
for _, v := range m.GetValue() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLJsonObject) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*JSONObjectValue, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &JSONObjectValue{}
	v1[i].Decode(dbuf)
}
m.SetValue(v1)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// MessageUserVote <--
//  + TL_MessageUserVote
//  + TL_MessageUserVoteInputOption
//  + TL_MessageUserVoteMultiple
//

func (m *MessageUserVote) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messageUserVote:
        t := m.To_MessageUserVote()
        return t.Encode()
    case TLConstructor_CRC32_messageUserVoteInputOption:
        t := m.To_MessageUserVoteInputOption()
        return t.Encode()
    case TLConstructor_CRC32_messageUserVoteMultiple:
        t := m.To_MessageUserVoteMultiple()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *MessageUserVote) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messageUserVote:
        m2 := &TLMessageUserVote{&MessageUserVote_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageUserVoteInputOption:
        m2 := &TLMessageUserVoteInputOption{&MessageUserVote_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageUserVoteMultiple:
        m2 := &TLMessageUserVoteMultiple{&MessageUserVote_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messageUserVote#a28e5559 user_id:int option:bytes date:int = MessageUserVote;
func (m *MessageUserVote) To_MessageUserVote() *TLMessageUserVote {
    return &TLMessageUserVote{
        Data2: m.Data2,
    }
}

// messageUserVoteInputOption#36377430 user_id:int date:int = MessageUserVote;
func (m *MessageUserVote) To_MessageUserVoteInputOption() *TLMessageUserVoteInputOption {
    return &TLMessageUserVoteInputOption{
        Data2: m.Data2,
    }
}

// messageUserVoteMultiple#e8fe0de user_id:int options:Vector<bytes> date:int = MessageUserVote;
func (m *MessageUserVote) To_MessageUserVoteMultiple() *TLMessageUserVoteMultiple {
    return &TLMessageUserVoteMultiple{
        Data2: m.Data2,
    }
}



// messageUserVote#a28e5559 user_id:int option:bytes date:int = MessageUserVote;
func (m *TLMessageUserVote) To_MessageUserVote() *MessageUserVote {
    return &MessageUserVote{
        Constructor: TLConstructor_CRC32_messageUserVote,
        Data2: m.Data2,
    }
}


func (m *TLMessageUserVote) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLMessageUserVote) GetUserId() int32 { return m.Data2.UserId }

func (m *TLMessageUserVote) SetOption(v []byte) { m.Data2.Option = v }
func (m *TLMessageUserVote) GetOption() []byte { return m.Data2.Option }

func (m *TLMessageUserVote) SetDate(v int32) { m.Data2.Date = v }
func (m *TLMessageUserVote) GetDate() int32 { return m.Data2.Date }


func NewTLMessageUserVote() * TLMessageUserVote {
    return &TLMessageUserVote{ Data2: &MessageUserVote_Data{} }
}

func (m* TLMessageUserVote) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageUserVote))

    x.Int(m.GetUserId())
    x.StringBytes(m.GetOption())
    x.Int(m.GetDate())

    return x.buf
}

func (m* TLMessageUserVote) Decode(dbuf *DecodeBuf) error {
    m.SetUserId(dbuf.Int())
    m.SetOption(dbuf.StringBytes())
    m.SetDate(dbuf.Int())

    return dbuf.err
}
// messageUserVoteInputOption#36377430 user_id:int date:int = MessageUserVote;
func (m *TLMessageUserVoteInputOption) To_MessageUserVote() *MessageUserVote {
    return &MessageUserVote{
        Constructor: TLConstructor_CRC32_messageUserVoteInputOption,
        Data2: m.Data2,
    }
}


func (m *TLMessageUserVoteInputOption) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLMessageUserVoteInputOption) GetUserId() int32 { return m.Data2.UserId }

func (m *TLMessageUserVoteInputOption) SetDate(v int32) { m.Data2.Date = v }
func (m *TLMessageUserVoteInputOption) GetDate() int32 { return m.Data2.Date }


func NewTLMessageUserVoteInputOption() * TLMessageUserVoteInputOption {
    return &TLMessageUserVoteInputOption{ Data2: &MessageUserVote_Data{} }
}

func (m* TLMessageUserVoteInputOption) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageUserVoteInputOption))

    x.Int(m.GetUserId())
    x.Int(m.GetDate())

    return x.buf
}

func (m* TLMessageUserVoteInputOption) Decode(dbuf *DecodeBuf) error {
    m.SetUserId(dbuf.Int())
    m.SetDate(dbuf.Int())

    return dbuf.err
}
// messageUserVoteMultiple#e8fe0de user_id:int options:Vector<bytes> date:int = MessageUserVote;
func (m *TLMessageUserVoteMultiple) To_MessageUserVote() *MessageUserVote {
    return &MessageUserVote{
        Constructor: TLConstructor_CRC32_messageUserVoteMultiple,
        Data2: m.Data2,
    }
}


func (m *TLMessageUserVoteMultiple) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLMessageUserVoteMultiple) GetUserId() int32 { return m.Data2.UserId }

func (m *TLMessageUserVoteMultiple) SetOptions(v [][]byte) { m.Data2.Options = v }
func (m *TLMessageUserVoteMultiple) GetOptions() [][]byte { return m.Data2.Options }

func (m *TLMessageUserVoteMultiple) SetDate(v int32) { m.Data2.Date = v }
func (m *TLMessageUserVoteMultiple) GetDate() int32 { return m.Data2.Date }


func NewTLMessageUserVoteMultiple() * TLMessageUserVoteMultiple {
    return &TLMessageUserVoteMultiple{ Data2: &MessageUserVote_Data{} }
}

func (m* TLMessageUserVoteMultiple) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageUserVoteMultiple))

    x.Int(m.GetUserId())
    
    x.Int(m.GetDate())

    return x.buf
}

func (m* TLMessageUserVoteMultiple) Decode(dbuf *DecodeBuf) error {
    m.SetUserId(dbuf.Int())
    
    m.SetDate(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// StatsDateRangeDays <--
//  + TL_StatsDateRangeDays
//

func (m *StatsDateRangeDays) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_statsDateRangeDays:
        t := m.To_StatsDateRangeDays()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *StatsDateRangeDays) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_statsDateRangeDays:
        m2 := &TLStatsDateRangeDays{&StatsDateRangeDays_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// statsDateRangeDays#b637edaf min_date:int max_date:int = StatsDateRangeDays;
func (m *StatsDateRangeDays) To_StatsDateRangeDays() *TLStatsDateRangeDays {
    return &TLStatsDateRangeDays{
        Data2: m.Data2,
    }
}



// statsDateRangeDays#b637edaf min_date:int max_date:int = StatsDateRangeDays;
func (m *TLStatsDateRangeDays) To_StatsDateRangeDays() *StatsDateRangeDays {
    return &StatsDateRangeDays{
        Constructor: TLConstructor_CRC32_statsDateRangeDays,
        Data2: m.Data2,
    }
}


func (m *TLStatsDateRangeDays) SetMinDate(v int32) { m.Data2.MinDate = v }
func (m *TLStatsDateRangeDays) GetMinDate() int32 { return m.Data2.MinDate }

func (m *TLStatsDateRangeDays) SetMaxDate(v int32) { m.Data2.MaxDate = v }
func (m *TLStatsDateRangeDays) GetMaxDate() int32 { return m.Data2.MaxDate }


func NewTLStatsDateRangeDays() * TLStatsDateRangeDays {
    return &TLStatsDateRangeDays{ Data2: &StatsDateRangeDays_Data{} }
}

func (m* TLStatsDateRangeDays) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_statsDateRangeDays))

    x.Int(m.GetMinDate())
    x.Int(m.GetMaxDate())

    return x.buf
}

func (m* TLStatsDateRangeDays) Decode(dbuf *DecodeBuf) error {
    m.SetMinDate(dbuf.Int())
    m.SetMaxDate(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Chat <--
//  + TL_ChatEmpty
//  + TL_Chat
//  + TL_ChatForbidden
//  + TL_ChannelForbidden
//  + TL_Channel
//  + TL_Chat114
//  + TL_Channel114
//

func (m *Chat) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_chatEmpty:
        t := m.To_ChatEmpty()
        return t.Encode()
    case TLConstructor_CRC32_chat:
        t := m.To_Chat()
        return t.Encode()
    case TLConstructor_CRC32_chatForbidden:
        t := m.To_ChatForbidden()
        return t.Encode()
    case TLConstructor_CRC32_channelForbidden:
        t := m.To_ChannelForbidden()
        return t.Encode()
    case TLConstructor_CRC32_channel:
        t := m.To_Channel()
        return t.Encode()
    case TLConstructor_CRC32_chat114:
        t := m.To_Chat114()
        return t.Encode()
    case TLConstructor_CRC32_channel114:
        t := m.To_Channel114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Chat) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_chatEmpty:
        m2 := &TLChatEmpty{&Chat_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_chat:
        m2 := &TLChat{&Chat_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_chatForbidden:
        m2 := &TLChatForbidden{&Chat_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelForbidden:
        m2 := &TLChannelForbidden{&Chat_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channel:
        m2 := &TLChannel{&Chat_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_chat114:
        m2 := &TLChat114{&Chat_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channel114:
        m2 := &TLChannel114{&Chat_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// chatEmpty#9ba2d800 id:int = Chat;
func (m *Chat) To_ChatEmpty() *TLChatEmpty {
    return &TLChatEmpty{
        Data2: m.Data2,
    }
}

// chat#d91cdd54 flags:# creator:flags.0?true kicked:flags.1?true left:flags.2?true admins_enabled:flags.3?true admin:flags.4?true deactivated:flags.5?true id:int title:string photo:ChatPhoto participants_count:int date:int version:int migrated_to:flags.6?InputChannel = Chat;
func (m *Chat) To_Chat() *TLChat {
    return &TLChat{
        Data2: m.Data2,
    }
}

// chatForbidden#7328bdb id:int title:string = Chat;
func (m *Chat) To_ChatForbidden() *TLChatForbidden {
    return &TLChatForbidden{
        Data2: m.Data2,
    }
}

// channelForbidden#289da732 flags:# broadcast:flags.5?true megagroup:flags.8?true id:int access_hash:long title:string until_date:flags.16?int = Chat;
func (m *Chat) To_ChannelForbidden() *TLChannelForbidden {
    return &TLChannelForbidden{
        Data2: m.Data2,
    }
}

// channel#450b7115 flags:# creator:flags.0?true left:flags.2?true editor:flags.3?true broadcast:flags.5?true verified:flags.7?true megagroup:flags.8?true restricted:flags.9?true democracy:flags.10?true signatures:flags.11?true min:flags.12?true id:int access_hash:flags.13?long title:string username:flags.6?string photo:ChatPhoto date:int version:int restriction_reason:flags.9?string admin_rights:flags.14?ChannelAdminRights banned_rights:flags.15?ChannelBannedRights participants_count:flags.17?int = Chat;
func (m *Chat) To_Channel() *TLChannel {
    return &TLChannel{
        Data2: m.Data2,
    }
}

// chat#3bda1bde flags:# creator:flags.0?true kicked:flags.1?true left:flags.2?true deactivated:flags.5?true id:int title:string photo:ChatPhoto participants_count:int date:int version:int migrated_to:flags.6?InputChannel admin_rights:flags.14?ChatAdminRights default_banned_rights:flags.18?ChatBannedRights = Chat;
func (m *Chat) To_Chat114() *TLChat114 {
    return &TLChat114{
        Data2: m.Data2,
    }
}

// channel#d31a961e flags:# creator:flags.0?true left:flags.2?true broadcast:flags.5?true verified:flags.7?true megagroup:flags.8?true restricted:flags.9?true signatures:flags.11?true min:flags.12?true scam:flags.19?true has_link:flags.20?true has_geo:flags.21?true slowmode_enabled:flags.22?true id:int access_hash:flags.13?long title:string username:flags.6?string photo:ChatPhoto date:int version:int restriction_reason:flags.9?Vector<RestrictionReason> admin_rights:flags.14?ChatAdminRights banned_rights:flags.15?ChatBannedRights default_banned_rights:flags.18?ChatBannedRights participants_count:flags.17?int = Chat;
func (m *Chat) To_Channel114() *TLChannel114 {
    return &TLChannel114{
        Data2: m.Data2,
    }
}



// chatEmpty#9ba2d800 id:int = Chat;
func (m *TLChatEmpty) To_Chat() *Chat {
    return &Chat{
        Constructor: TLConstructor_CRC32_chatEmpty,
        Data2: m.Data2,
    }
}


func (m *TLChatEmpty) SetId(v int32) { m.Data2.Id = v }
func (m *TLChatEmpty) GetId() int32 { return m.Data2.Id }


func NewTLChatEmpty() * TLChatEmpty {
    return &TLChatEmpty{ Data2: &Chat_Data{} }
}

func (m* TLChatEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_chatEmpty))

    x.Int(m.GetId())

    return x.buf
}

func (m* TLChatEmpty) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Int())

    return dbuf.err
}
// chat#d91cdd54 flags:# creator:flags.0?true kicked:flags.1?true left:flags.2?true admins_enabled:flags.3?true admin:flags.4?true deactivated:flags.5?true id:int title:string photo:ChatPhoto participants_count:int date:int version:int migrated_to:flags.6?InputChannel = Chat;
func (m *TLChat) To_Chat() *Chat {
    return &Chat{
        Constructor: TLConstructor_CRC32_chat,
        Data2: m.Data2,
    }
}


func (m *TLChat) SetCreator(v bool) { m.Data2.Creator = v }
func (m *TLChat) GetCreator() bool { return m.Data2.Creator }

func (m *TLChat) SetKicked(v bool) { m.Data2.Kicked = v }
func (m *TLChat) GetKicked() bool { return m.Data2.Kicked }

func (m *TLChat) SetLeft(v bool) { m.Data2.Left = v }
func (m *TLChat) GetLeft() bool { return m.Data2.Left }

func (m *TLChat) SetAdminsEnabled(v bool) { m.Data2.AdminsEnabled = v }
func (m *TLChat) GetAdminsEnabled() bool { return m.Data2.AdminsEnabled }

func (m *TLChat) SetAdmin(v bool) { m.Data2.Admin = v }
func (m *TLChat) GetAdmin() bool { return m.Data2.Admin }

func (m *TLChat) SetDeactivated(v bool) { m.Data2.Deactivated = v }
func (m *TLChat) GetDeactivated() bool { return m.Data2.Deactivated }

func (m *TLChat) SetId(v int32) { m.Data2.Id = v }
func (m *TLChat) GetId() int32 { return m.Data2.Id }

func (m *TLChat) SetTitle(v string) { m.Data2.Title = v }
func (m *TLChat) GetTitle() string { return m.Data2.Title }

func (m *TLChat) SetPhoto(v *ChatPhoto) { m.Data2.Photo = v }
func (m *TLChat) GetPhoto() *ChatPhoto { return m.Data2.Photo }

func (m *TLChat) SetParticipantsCount(v int32) { m.Data2.ParticipantsCount = v }
func (m *TLChat) GetParticipantsCount() int32 { return m.Data2.ParticipantsCount }

func (m *TLChat) SetDate(v int32) { m.Data2.Date = v }
func (m *TLChat) GetDate() int32 { return m.Data2.Date }

func (m *TLChat) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLChat) GetVersion() int32 { return m.Data2.Version }

func (m *TLChat) SetMigratedTo(v *InputChannel) { m.Data2.MigratedTo = v }
func (m *TLChat) GetMigratedTo() *InputChannel { return m.Data2.MigratedTo }


func NewTLChat() * TLChat {
    return &TLChat{ Data2: &Chat_Data{} }
}

func (m* TLChat) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_chat))

    // flags
    var flags uint32 = 0
    if m.GetCreator() == true { flags |= 1 << 0 }
    if m.GetKicked() == true { flags |= 1 << 1 }
    if m.GetLeft() == true { flags |= 1 << 2 }
    if m.GetAdminsEnabled() == true { flags |= 1 << 3 }
    if m.GetAdmin() == true { flags |= 1 << 4 }
    if m.GetDeactivated() == true { flags |= 1 << 5 }
    if m.GetMigratedTo() != nil { flags |= 1 << 6 }
	x.UInt(flags)

    
    
    
    
    
    
    x.Int(m.GetId())
    x.String(m.GetTitle())
    x.Bytes(m.GetPhoto().Encode())
    x.Int(m.GetParticipantsCount())
    x.Int(m.GetDate())
    x.Int(m.GetVersion())
    if (flags & (1 << 6)) != 0 { x.Bytes(m.GetMigratedTo().Encode()) }

    return x.buf
}

func (m* TLChat) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetCreator(true) }
    if (flags & (1 << 1)) != 0 { m.SetKicked(true) }
    if (flags & (1 << 2)) != 0 { m.SetLeft(true) }
    if (flags & (1 << 3)) != 0 { m.SetAdminsEnabled(true) }
    if (flags & (1 << 4)) != 0 { m.SetAdmin(true) }
    if (flags & (1 << 5)) != 0 { m.SetDeactivated(true) }
    m.SetId(dbuf.Int())
    m.SetTitle(dbuf.String())
    m10 := &ChatPhoto{}
    m10.Decode(dbuf)
    m.SetPhoto(m10)
    m.SetParticipantsCount(dbuf.Int())
    m.SetDate(dbuf.Int())
    m.SetVersion(dbuf.Int())
    if (flags & (1 << 6)) != 0 {
 m14 := &InputChannel{}
    m14.Decode(dbuf)
    m.SetMigratedTo(m14) 
}

    return dbuf.err
}
// chatForbidden#7328bdb id:int title:string = Chat;
func (m *TLChatForbidden) To_Chat() *Chat {
    return &Chat{
        Constructor: TLConstructor_CRC32_chatForbidden,
        Data2: m.Data2,
    }
}


func (m *TLChatForbidden) SetId(v int32) { m.Data2.Id = v }
func (m *TLChatForbidden) GetId() int32 { return m.Data2.Id }

func (m *TLChatForbidden) SetTitle(v string) { m.Data2.Title = v }
func (m *TLChatForbidden) GetTitle() string { return m.Data2.Title }


func NewTLChatForbidden() * TLChatForbidden {
    return &TLChatForbidden{ Data2: &Chat_Data{} }
}

func (m* TLChatForbidden) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_chatForbidden))

    x.Int(m.GetId())
    x.String(m.GetTitle())

    return x.buf
}

func (m* TLChatForbidden) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Int())
    m.SetTitle(dbuf.String())

    return dbuf.err
}
// channelForbidden#289da732 flags:# broadcast:flags.5?true megagroup:flags.8?true id:int access_hash:long title:string until_date:flags.16?int = Chat;
func (m *TLChannelForbidden) To_Chat() *Chat {
    return &Chat{
        Constructor: TLConstructor_CRC32_channelForbidden,
        Data2: m.Data2,
    }
}


func (m *TLChannelForbidden) SetBroadcast(v bool) { m.Data2.Broadcast = v }
func (m *TLChannelForbidden) GetBroadcast() bool { return m.Data2.Broadcast }

func (m *TLChannelForbidden) SetMegagroup(v bool) { m.Data2.Megagroup = v }
func (m *TLChannelForbidden) GetMegagroup() bool { return m.Data2.Megagroup }

func (m *TLChannelForbidden) SetId(v int32) { m.Data2.Id = v }
func (m *TLChannelForbidden) GetId() int32 { return m.Data2.Id }

func (m *TLChannelForbidden) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLChannelForbidden) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLChannelForbidden) SetTitle(v string) { m.Data2.Title = v }
func (m *TLChannelForbidden) GetTitle() string { return m.Data2.Title }

func (m *TLChannelForbidden) SetUntilDate(v int32) { m.Data2.UntilDate = v }
func (m *TLChannelForbidden) GetUntilDate() int32 { return m.Data2.UntilDate }


func NewTLChannelForbidden() * TLChannelForbidden {
    return &TLChannelForbidden{ Data2: &Chat_Data{} }
}

func (m* TLChannelForbidden) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelForbidden))

    // flags
    var flags uint32 = 0
    if m.GetBroadcast() == true { flags |= 1 << 5 }
    if m.GetMegagroup() == true { flags |= 1 << 8 }
    if m.GetUntilDate() != 0 { flags |= 1 << 16 }
	x.UInt(flags)

    
    
    x.Int(m.GetId())
    x.Long(m.GetAccessHash())
    x.String(m.GetTitle())
    if (flags & (1 << 16)) != 0 { x.Int(m.GetUntilDate()) }

    return x.buf
}

func (m* TLChannelForbidden) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 5)) != 0 { m.SetBroadcast(true) }
    if (flags & (1 << 8)) != 0 { m.SetMegagroup(true) }
    m.SetId(dbuf.Int())
    m.SetAccessHash(dbuf.Long())
    m.SetTitle(dbuf.String())
    if (flags & (1 << 16)) != 0 { m.SetUntilDate(dbuf.Int()) }

    return dbuf.err
}
// channel#450b7115 flags:# creator:flags.0?true left:flags.2?true editor:flags.3?true broadcast:flags.5?true verified:flags.7?true megagroup:flags.8?true restricted:flags.9?true democracy:flags.10?true signatures:flags.11?true min:flags.12?true id:int access_hash:flags.13?long title:string username:flags.6?string photo:ChatPhoto date:int version:int restriction_reason:flags.9?string admin_rights:flags.14?ChannelAdminRights banned_rights:flags.15?ChannelBannedRights participants_count:flags.17?int = Chat;
func (m *TLChannel) To_Chat() *Chat {
    return &Chat{
        Constructor: TLConstructor_CRC32_channel,
        Data2: m.Data2,
    }
}


func (m *TLChannel) SetCreator(v bool) { m.Data2.Creator = v }
func (m *TLChannel) GetCreator() bool { return m.Data2.Creator }

func (m *TLChannel) SetLeft(v bool) { m.Data2.Left = v }
func (m *TLChannel) GetLeft() bool { return m.Data2.Left }

func (m *TLChannel) SetEditor(v bool) { m.Data2.Editor = v }
func (m *TLChannel) GetEditor() bool { return m.Data2.Editor }

func (m *TLChannel) SetBroadcast(v bool) { m.Data2.Broadcast = v }
func (m *TLChannel) GetBroadcast() bool { return m.Data2.Broadcast }

func (m *TLChannel) SetVerified(v bool) { m.Data2.Verified = v }
func (m *TLChannel) GetVerified() bool { return m.Data2.Verified }

func (m *TLChannel) SetMegagroup(v bool) { m.Data2.Megagroup = v }
func (m *TLChannel) GetMegagroup() bool { return m.Data2.Megagroup }

func (m *TLChannel) SetRestricted(v bool) { m.Data2.Restricted = v }
func (m *TLChannel) GetRestricted() bool { return m.Data2.Restricted }

func (m *TLChannel) SetDemocracy(v bool) { m.Data2.Democracy = v }
func (m *TLChannel) GetDemocracy() bool { return m.Data2.Democracy }

func (m *TLChannel) SetSignatures(v bool) { m.Data2.Signatures = v }
func (m *TLChannel) GetSignatures() bool { return m.Data2.Signatures }

func (m *TLChannel) SetMin(v bool) { m.Data2.Min = v }
func (m *TLChannel) GetMin() bool { return m.Data2.Min }

func (m *TLChannel) SetId(v int32) { m.Data2.Id = v }
func (m *TLChannel) GetId() int32 { return m.Data2.Id }

func (m *TLChannel) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLChannel) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLChannel) SetTitle(v string) { m.Data2.Title = v }
func (m *TLChannel) GetTitle() string { return m.Data2.Title }

func (m *TLChannel) SetUsername(v string) { m.Data2.Username = v }
func (m *TLChannel) GetUsername() string { return m.Data2.Username }

func (m *TLChannel) SetPhoto(v *ChatPhoto) { m.Data2.Photo = v }
func (m *TLChannel) GetPhoto() *ChatPhoto { return m.Data2.Photo }

func (m *TLChannel) SetDate(v int32) { m.Data2.Date = v }
func (m *TLChannel) GetDate() int32 { return m.Data2.Date }

func (m *TLChannel) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLChannel) GetVersion() int32 { return m.Data2.Version }

func (m *TLChannel) SetRestrictionReason(v string) { m.Data2.RestrictionReason_25 = v }
func (m *TLChannel) GetRestrictionReason() string { return m.Data2.RestrictionReason_25 }

func (m *TLChannel) SetAdminRights(v *ChannelAdminRights) { m.Data2.AdminRights_26 = v }
func (m *TLChannel) GetAdminRights() *ChannelAdminRights { return m.Data2.AdminRights_26 }

func (m *TLChannel) SetBannedRights(v *ChannelBannedRights) { m.Data2.BannedRights_27 = v }
func (m *TLChannel) GetBannedRights() *ChannelBannedRights { return m.Data2.BannedRights_27 }

func (m *TLChannel) SetParticipantsCount(v int32) { m.Data2.ParticipantsCount = v }
func (m *TLChannel) GetParticipantsCount() int32 { return m.Data2.ParticipantsCount }


func NewTLChannel() * TLChannel {
    return &TLChannel{ Data2: &Chat_Data{} }
}

func (m* TLChannel) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channel))

    // flags
    var flags uint32 = 0
    if m.GetCreator() == true { flags |= 1 << 0 }
    if m.GetLeft() == true { flags |= 1 << 2 }
    if m.GetEditor() == true { flags |= 1 << 3 }
    if m.GetBroadcast() == true { flags |= 1 << 5 }
    if m.GetVerified() == true { flags |= 1 << 7 }
    if m.GetMegagroup() == true { flags |= 1 << 8 }
    if m.GetRestricted() == true { flags |= 1 << 9 }
    if m.GetDemocracy() == true { flags |= 1 << 10 }
    if m.GetSignatures() == true { flags |= 1 << 11 }
    if m.GetMin() == true { flags |= 1 << 12 }
    if m.GetAccessHash() != 0 { flags |= 1 << 13 }
    if m.GetUsername() != "" { flags |= 1 << 6 }
    if m.GetRestrictionReason() != "" { flags |= 1 << 9 }
    if m.GetAdminRights() != nil { flags |= 1 << 14 }
    if m.GetBannedRights() != nil { flags |= 1 << 15 }
    if m.GetParticipantsCount() != 0 { flags |= 1 << 17 }
	x.UInt(flags)

    
    
    
    
    
    
    
    
    
    
    x.Int(m.GetId())
    if (flags & (1 << 13)) != 0 { x.Long(m.GetAccessHash()) }
    x.String(m.GetTitle())
    if (flags & (1 << 6)) != 0 { x.String(m.GetUsername()) }
    x.Bytes(m.GetPhoto().Encode())
    x.Int(m.GetDate())
    x.Int(m.GetVersion())
    if (flags & (1 << 9)) != 0 { x.String(m.GetRestrictionReason()) }
    if (flags & (1 << 14)) != 0 { x.Bytes(m.GetAdminRights().Encode()) }
    if (flags & (1 << 15)) != 0 { x.Bytes(m.GetBannedRights().Encode()) }
    if (flags & (1 << 17)) != 0 { x.Int(m.GetParticipantsCount()) }

    return x.buf
}

func (m* TLChannel) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetCreator(true) }
    if (flags & (1 << 2)) != 0 { m.SetLeft(true) }
    if (flags & (1 << 3)) != 0 { m.SetEditor(true) }
    if (flags & (1 << 5)) != 0 { m.SetBroadcast(true) }
    if (flags & (1 << 7)) != 0 { m.SetVerified(true) }
    if (flags & (1 << 8)) != 0 { m.SetMegagroup(true) }
    if (flags & (1 << 9)) != 0 { m.SetRestricted(true) }
    if (flags & (1 << 10)) != 0 { m.SetDemocracy(true) }
    if (flags & (1 << 11)) != 0 { m.SetSignatures(true) }
    if (flags & (1 << 12)) != 0 { m.SetMin(true) }
    m.SetId(dbuf.Int())
    if (flags & (1 << 13)) != 0 { m.SetAccessHash(dbuf.Long()) }
    m.SetTitle(dbuf.String())
    if (flags & (1 << 6)) != 0 { m.SetUsername(dbuf.String()) }
    m16 := &ChatPhoto{}
    m16.Decode(dbuf)
    m.SetPhoto(m16)
    m.SetDate(dbuf.Int())
    m.SetVersion(dbuf.Int())
    if (flags & (1 << 9)) != 0 { m.SetRestrictionReason(dbuf.String()) }
    if (flags & (1 << 14)) != 0 {
 m20 := &ChannelAdminRights{}
    m20.Decode(dbuf)
    m.SetAdminRights(m20) 
}
    if (flags & (1 << 15)) != 0 {
 m21 := &ChannelBannedRights{}
    m21.Decode(dbuf)
    m.SetBannedRights(m21) 
}
    if (flags & (1 << 17)) != 0 { m.SetParticipantsCount(dbuf.Int()) }

    return dbuf.err
}
// chat#3bda1bde flags:# creator:flags.0?true kicked:flags.1?true left:flags.2?true deactivated:flags.5?true id:int title:string photo:ChatPhoto participants_count:int date:int version:int migrated_to:flags.6?InputChannel admin_rights:flags.14?ChatAdminRights default_banned_rights:flags.18?ChatBannedRights = Chat;
func (m *TLChat114) To_Chat() *Chat {
    return &Chat{
        Constructor: TLConstructor_CRC32_chat114,
        Data2: m.Data2,
    }
}


func (m *TLChat114) SetCreator(v bool) { m.Data2.Creator = v }
func (m *TLChat114) GetCreator() bool { return m.Data2.Creator }

func (m *TLChat114) SetKicked(v bool) { m.Data2.Kicked = v }
func (m *TLChat114) GetKicked() bool { return m.Data2.Kicked }

func (m *TLChat114) SetLeft(v bool) { m.Data2.Left = v }
func (m *TLChat114) GetLeft() bool { return m.Data2.Left }

func (m *TLChat114) SetDeactivated(v bool) { m.Data2.Deactivated = v }
func (m *TLChat114) GetDeactivated() bool { return m.Data2.Deactivated }

func (m *TLChat114) SetId(v int32) { m.Data2.Id = v }
func (m *TLChat114) GetId() int32 { return m.Data2.Id }

func (m *TLChat114) SetTitle(v string) { m.Data2.Title = v }
func (m *TLChat114) GetTitle() string { return m.Data2.Title }

func (m *TLChat114) SetPhoto(v *ChatPhoto) { m.Data2.Photo = v }
func (m *TLChat114) GetPhoto() *ChatPhoto { return m.Data2.Photo }

func (m *TLChat114) SetParticipantsCount(v int32) { m.Data2.ParticipantsCount = v }
func (m *TLChat114) GetParticipantsCount() int32 { return m.Data2.ParticipantsCount }

func (m *TLChat114) SetDate(v int32) { m.Data2.Date = v }
func (m *TLChat114) GetDate() int32 { return m.Data2.Date }

func (m *TLChat114) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLChat114) GetVersion() int32 { return m.Data2.Version }

func (m *TLChat114) SetMigratedTo(v *InputChannel) { m.Data2.MigratedTo = v }
func (m *TLChat114) GetMigratedTo() *InputChannel { return m.Data2.MigratedTo }

func (m *TLChat114) SetAdminRights(v *ChatAdminRights) { m.Data2.AdminRights_28 = v }
func (m *TLChat114) GetAdminRights() *ChatAdminRights { return m.Data2.AdminRights_28 }

func (m *TLChat114) SetDefaultBannedRights(v *ChatBannedRights) { m.Data2.DefaultBannedRights = v }
func (m *TLChat114) GetDefaultBannedRights() *ChatBannedRights { return m.Data2.DefaultBannedRights }


func NewTLChat114() * TLChat114 {
    return &TLChat114{ Data2: &Chat_Data{} }
}

func (m* TLChat114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_chat114))

    // flags
    var flags uint32 = 0
    if m.GetCreator() == true { flags |= 1 << 0 }
    if m.GetKicked() == true { flags |= 1 << 1 }
    if m.GetLeft() == true { flags |= 1 << 2 }
    if m.GetDeactivated() == true { flags |= 1 << 5 }
    if m.GetMigratedTo() != nil { flags |= 1 << 6 }
    if m.GetAdminRights() != nil { flags |= 1 << 14 }
    if m.GetDefaultBannedRights() != nil { flags |= 1 << 18 }
	x.UInt(flags)

    
    
    
    
    x.Int(m.GetId())
    x.String(m.GetTitle())
    x.Bytes(m.GetPhoto().Encode())
    x.Int(m.GetParticipantsCount())
    x.Int(m.GetDate())
    x.Int(m.GetVersion())
    if (flags & (1 << 6)) != 0 { x.Bytes(m.GetMigratedTo().Encode()) }
    if (flags & (1 << 14)) != 0 { x.Bytes(m.GetAdminRights().Encode()) }
    if (flags & (1 << 18)) != 0 { x.Bytes(m.GetDefaultBannedRights().Encode()) }

    return x.buf
}

func (m* TLChat114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetCreator(true) }
    if (flags & (1 << 1)) != 0 { m.SetKicked(true) }
    if (flags & (1 << 2)) != 0 { m.SetLeft(true) }
    if (flags & (1 << 5)) != 0 { m.SetDeactivated(true) }
    m.SetId(dbuf.Int())
    m.SetTitle(dbuf.String())
    m8 := &ChatPhoto{}
    m8.Decode(dbuf)
    m.SetPhoto(m8)
    m.SetParticipantsCount(dbuf.Int())
    m.SetDate(dbuf.Int())
    m.SetVersion(dbuf.Int())
    if (flags & (1 << 6)) != 0 {
 m12 := &InputChannel{}
    m12.Decode(dbuf)
    m.SetMigratedTo(m12) 
}
    if (flags & (1 << 14)) != 0 {
 m13 := &ChatAdminRights{}
    m13.Decode(dbuf)
    m.SetAdminRights(m13) 
}
    if (flags & (1 << 18)) != 0 {
 m14 := &ChatBannedRights{}
    m14.Decode(dbuf)
    m.SetDefaultBannedRights(m14) 
}

    return dbuf.err
}
// channel#d31a961e flags:# creator:flags.0?true left:flags.2?true broadcast:flags.5?true verified:flags.7?true megagroup:flags.8?true restricted:flags.9?true signatures:flags.11?true min:flags.12?true scam:flags.19?true has_link:flags.20?true has_geo:flags.21?true slowmode_enabled:flags.22?true id:int access_hash:flags.13?long title:string username:flags.6?string photo:ChatPhoto date:int version:int restriction_reason:flags.9?Vector<RestrictionReason> admin_rights:flags.14?ChatAdminRights banned_rights:flags.15?ChatBannedRights default_banned_rights:flags.18?ChatBannedRights participants_count:flags.17?int = Chat;
func (m *TLChannel114) To_Chat() *Chat {
    return &Chat{
        Constructor: TLConstructor_CRC32_channel114,
        Data2: m.Data2,
    }
}


func (m *TLChannel114) SetCreator(v bool) { m.Data2.Creator = v }
func (m *TLChannel114) GetCreator() bool { return m.Data2.Creator }

func (m *TLChannel114) SetLeft(v bool) { m.Data2.Left = v }
func (m *TLChannel114) GetLeft() bool { return m.Data2.Left }

func (m *TLChannel114) SetBroadcast(v bool) { m.Data2.Broadcast = v }
func (m *TLChannel114) GetBroadcast() bool { return m.Data2.Broadcast }

func (m *TLChannel114) SetVerified(v bool) { m.Data2.Verified = v }
func (m *TLChannel114) GetVerified() bool { return m.Data2.Verified }

func (m *TLChannel114) SetMegagroup(v bool) { m.Data2.Megagroup = v }
func (m *TLChannel114) GetMegagroup() bool { return m.Data2.Megagroup }

func (m *TLChannel114) SetRestricted(v bool) { m.Data2.Restricted = v }
func (m *TLChannel114) GetRestricted() bool { return m.Data2.Restricted }

func (m *TLChannel114) SetSignatures(v bool) { m.Data2.Signatures = v }
func (m *TLChannel114) GetSignatures() bool { return m.Data2.Signatures }

func (m *TLChannel114) SetMin(v bool) { m.Data2.Min = v }
func (m *TLChannel114) GetMin() bool { return m.Data2.Min }

func (m *TLChannel114) SetScam(v bool) { m.Data2.Scam = v }
func (m *TLChannel114) GetScam() bool { return m.Data2.Scam }

func (m *TLChannel114) SetHasLink(v bool) { m.Data2.HasLink = v }
func (m *TLChannel114) GetHasLink() bool { return m.Data2.HasLink }

func (m *TLChannel114) SetHasGeo(v bool) { m.Data2.HasGeo = v }
func (m *TLChannel114) GetHasGeo() bool { return m.Data2.HasGeo }

func (m *TLChannel114) SetSlowmodeEnabled(v bool) { m.Data2.SlowmodeEnabled = v }
func (m *TLChannel114) GetSlowmodeEnabled() bool { return m.Data2.SlowmodeEnabled }

func (m *TLChannel114) SetId(v int32) { m.Data2.Id = v }
func (m *TLChannel114) GetId() int32 { return m.Data2.Id }

func (m *TLChannel114) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLChannel114) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLChannel114) SetTitle(v string) { m.Data2.Title = v }
func (m *TLChannel114) GetTitle() string { return m.Data2.Title }

func (m *TLChannel114) SetUsername(v string) { m.Data2.Username = v }
func (m *TLChannel114) GetUsername() string { return m.Data2.Username }

func (m *TLChannel114) SetPhoto(v *ChatPhoto) { m.Data2.Photo = v }
func (m *TLChannel114) GetPhoto() *ChatPhoto { return m.Data2.Photo }

func (m *TLChannel114) SetDate(v int32) { m.Data2.Date = v }
func (m *TLChannel114) GetDate() int32 { return m.Data2.Date }

func (m *TLChannel114) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLChannel114) GetVersion() int32 { return m.Data2.Version }

func (m *TLChannel114) SetRestrictionReason(v []*RestrictionReason) { m.Data2.RestrictionReason_34 = v }
func (m *TLChannel114) GetRestrictionReason() []*RestrictionReason { return m.Data2.RestrictionReason_34 }

func (m *TLChannel114) SetAdminRights(v *ChatAdminRights) { m.Data2.AdminRights_28 = v }
func (m *TLChannel114) GetAdminRights() *ChatAdminRights { return m.Data2.AdminRights_28 }

func (m *TLChannel114) SetBannedRights(v *ChatBannedRights) { m.Data2.BannedRights_35 = v }
func (m *TLChannel114) GetBannedRights() *ChatBannedRights { return m.Data2.BannedRights_35 }

func (m *TLChannel114) SetDefaultBannedRights(v *ChatBannedRights) { m.Data2.DefaultBannedRights = v }
func (m *TLChannel114) GetDefaultBannedRights() *ChatBannedRights { return m.Data2.DefaultBannedRights }

func (m *TLChannel114) SetParticipantsCount(v int32) { m.Data2.ParticipantsCount = v }
func (m *TLChannel114) GetParticipantsCount() int32 { return m.Data2.ParticipantsCount }


func NewTLChannel114() * TLChannel114 {
    return &TLChannel114{ Data2: &Chat_Data{} }
}

func (m* TLChannel114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channel114))

    // flags
    var flags uint32 = 0
    if m.GetCreator() == true { flags |= 1 << 0 }
    if m.GetLeft() == true { flags |= 1 << 2 }
    if m.GetBroadcast() == true { flags |= 1 << 5 }
    if m.GetVerified() == true { flags |= 1 << 7 }
    if m.GetMegagroup() == true { flags |= 1 << 8 }
    if m.GetRestricted() == true { flags |= 1 << 9 }
    if m.GetSignatures() == true { flags |= 1 << 11 }
    if m.GetMin() == true { flags |= 1 << 12 }
    if m.GetScam() == true { flags |= 1 << 19 }
    if m.GetHasLink() == true { flags |= 1 << 20 }
    if m.GetHasGeo() == true { flags |= 1 << 21 }
    if m.GetSlowmodeEnabled() == true { flags |= 1 << 22 }
    if m.GetAccessHash() != 0 { flags |= 1 << 13 }
    if m.GetUsername() != "" { flags |= 1 << 6 }
    if m.GetRestrictionReason() != nil { flags |= 1 << 9 }
    if m.GetAdminRights() != nil { flags |= 1 << 14 }
    if m.GetBannedRights() != nil { flags |= 1 << 15 }
    if m.GetDefaultBannedRights() != nil { flags |= 1 << 18 }
    if m.GetParticipantsCount() != 0 { flags |= 1 << 17 }
	x.UInt(flags)

    
    
    
    
    
    
    
    
    
    
    
    
    x.Int(m.GetId())
    if (flags & (1 << 13)) != 0 { x.Long(m.GetAccessHash()) }
    x.String(m.GetTitle())
    if (flags & (1 << 6)) != 0 { x.String(m.GetUsername()) }
    x.Bytes(m.GetPhoto().Encode())
    x.Int(m.GetDate())
    x.Int(m.GetVersion())
    if (flags & (1 << 9)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetRestrictionReason())))
for _, v := range m.GetRestrictionReason() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}
    if (flags & (1 << 14)) != 0 { x.Bytes(m.GetAdminRights().Encode()) }
    if (flags & (1 << 15)) != 0 { x.Bytes(m.GetBannedRights().Encode()) }
    if (flags & (1 << 18)) != 0 { x.Bytes(m.GetDefaultBannedRights().Encode()) }
    if (flags & (1 << 17)) != 0 { x.Int(m.GetParticipantsCount()) }

    return x.buf
}

func (m* TLChannel114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetCreator(true) }
    if (flags & (1 << 2)) != 0 { m.SetLeft(true) }
    if (flags & (1 << 5)) != 0 { m.SetBroadcast(true) }
    if (flags & (1 << 7)) != 0 { m.SetVerified(true) }
    if (flags & (1 << 8)) != 0 { m.SetMegagroup(true) }
    if (flags & (1 << 9)) != 0 { m.SetRestricted(true) }
    if (flags & (1 << 11)) != 0 { m.SetSignatures(true) }
    if (flags & (1 << 12)) != 0 { m.SetMin(true) }
    if (flags & (1 << 19)) != 0 { m.SetScam(true) }
    if (flags & (1 << 20)) != 0 { m.SetHasLink(true) }
    if (flags & (1 << 21)) != 0 { m.SetHasGeo(true) }
    if (flags & (1 << 22)) != 0 { m.SetSlowmodeEnabled(true) }
    m.SetId(dbuf.Int())
    if (flags & (1 << 13)) != 0 { m.SetAccessHash(dbuf.Long()) }
    m.SetTitle(dbuf.String())
    if (flags & (1 << 6)) != 0 { m.SetUsername(dbuf.String()) }
    m18 := &ChatPhoto{}
    m18.Decode(dbuf)
    m.SetPhoto(m18)
    m.SetDate(dbuf.Int())
    m.SetVersion(dbuf.Int())
    if (flags & (1 << 9)) != 0 {
 c21 := dbuf.Int()
if c21 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 21, c21)
	return dbuf.err
}
l21 := dbuf.Int()
v21 := make([]*RestrictionReason, l21)
for i := int32(0); i < l21; i++ {
	v21[i] = &RestrictionReason{}
	v21[i].Decode(dbuf)
}
m.SetRestrictionReason(v21)
 
}
    if (flags & (1 << 14)) != 0 {
 m22 := &ChatAdminRights{}
    m22.Decode(dbuf)
    m.SetAdminRights(m22) 
}
    if (flags & (1 << 15)) != 0 {
 m23 := &ChatBannedRights{}
    m23.Decode(dbuf)
    m.SetBannedRights(m23) 
}
    if (flags & (1 << 18)) != 0 {
 m24 := &ChatBannedRights{}
    m24.Decode(dbuf)
    m.SetDefaultBannedRights(m24) 
}
    if (flags & (1 << 17)) != 0 { m.SetParticipantsCount(dbuf.Int()) }

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Contacts_Blocked <--
//  + TL_ContactsBlocked
//  + TL_ContactsBlockedSlice
//

func (m *Contacts_Blocked) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_contacts_blocked:
        t := m.To_ContactsBlocked()
        return t.Encode()
    case TLConstructor_CRC32_contacts_blockedSlice:
        t := m.To_ContactsBlockedSlice()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Contacts_Blocked) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_contacts_blocked:
        m2 := &TLContactsBlocked{&Contacts_Blocked_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_contacts_blockedSlice:
        m2 := &TLContactsBlockedSlice{&Contacts_Blocked_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// contacts.blocked#1c138d15 blocked:Vector<ContactBlocked> users:Vector<User> = contacts.Blocked;
func (m *Contacts_Blocked) To_ContactsBlocked() *TLContactsBlocked {
    return &TLContactsBlocked{
        Data2: m.Data2,
    }
}

// contacts.blockedSlice#900802a1 count:int blocked:Vector<ContactBlocked> users:Vector<User> = contacts.Blocked;
func (m *Contacts_Blocked) To_ContactsBlockedSlice() *TLContactsBlockedSlice {
    return &TLContactsBlockedSlice{
        Data2: m.Data2,
    }
}



// contacts.blocked#1c138d15 blocked:Vector<ContactBlocked> users:Vector<User> = contacts.Blocked;
func (m *TLContactsBlocked) To_Contacts_Blocked() *Contacts_Blocked {
    return &Contacts_Blocked{
        Constructor: TLConstructor_CRC32_contacts_blocked,
        Data2: m.Data2,
    }
}


func (m *TLContactsBlocked) SetBlocked(v []*ContactBlocked) { m.Data2.Blocked = v }
func (m *TLContactsBlocked) GetBlocked() []*ContactBlocked { return m.Data2.Blocked }

func (m *TLContactsBlocked) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLContactsBlocked) GetUsers() []*User { return m.Data2.Users }


func NewTLContactsBlocked() * TLContactsBlocked {
    return &TLContactsBlocked{ Data2: &Contacts_Blocked_Data{} }
}

func (m* TLContactsBlocked) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_contacts_blocked))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetBlocked())))
for _, v := range m.GetBlocked() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLContactsBlocked) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*ContactBlocked, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &ContactBlocked{}
	v1[i].Decode(dbuf)
}
m.SetBlocked(v1)

    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*User, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &User{}
	v2[i].Decode(dbuf)
}
m.SetUsers(v2)


    return dbuf.err
}
// contacts.blockedSlice#900802a1 count:int blocked:Vector<ContactBlocked> users:Vector<User> = contacts.Blocked;
func (m *TLContactsBlockedSlice) To_Contacts_Blocked() *Contacts_Blocked {
    return &Contacts_Blocked{
        Constructor: TLConstructor_CRC32_contacts_blockedSlice,
        Data2: m.Data2,
    }
}


func (m *TLContactsBlockedSlice) SetCount(v int32) { m.Data2.Count = v }
func (m *TLContactsBlockedSlice) GetCount() int32 { return m.Data2.Count }

func (m *TLContactsBlockedSlice) SetBlocked(v []*ContactBlocked) { m.Data2.Blocked = v }
func (m *TLContactsBlockedSlice) GetBlocked() []*ContactBlocked { return m.Data2.Blocked }

func (m *TLContactsBlockedSlice) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLContactsBlockedSlice) GetUsers() []*User { return m.Data2.Users }


func NewTLContactsBlockedSlice() * TLContactsBlockedSlice {
    return &TLContactsBlockedSlice{ Data2: &Contacts_Blocked_Data{} }
}

func (m* TLContactsBlockedSlice) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_contacts_blockedSlice))

    x.Int(m.GetCount())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetBlocked())))
for _, v := range m.GetBlocked() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLContactsBlockedSlice) Decode(dbuf *DecodeBuf) error {
    m.SetCount(dbuf.Int())
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*ContactBlocked, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &ContactBlocked{}
	v2[i].Decode(dbuf)
}
m.SetBlocked(v2)

    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*User, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &User{}
	v3[i].Decode(dbuf)
}
m.SetUsers(v3)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// SecureValue <--
//  + TL_SecureValue
//

func (m *SecureValue) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_secureValue:
        t := m.To_SecureValue()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *SecureValue) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_secureValue:
        m2 := &TLSecureValue{&SecureValue_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// secureValue#187fa0ca flags:# type:SecureValueType data:flags.0?SecureData front_side:flags.1?SecureFile reverse_side:flags.2?SecureFile selfie:flags.3?SecureFile translation:flags.6?Vector<SecureFile> files:flags.4?Vector<SecureFile> plain_data:flags.5?SecurePlainData hash:bytes = SecureValue;
func (m *SecureValue) To_SecureValue() *TLSecureValue {
    return &TLSecureValue{
        Data2: m.Data2,
    }
}



// secureValue#187fa0ca flags:# type:SecureValueType data:flags.0?SecureData front_side:flags.1?SecureFile reverse_side:flags.2?SecureFile selfie:flags.3?SecureFile translation:flags.6?Vector<SecureFile> files:flags.4?Vector<SecureFile> plain_data:flags.5?SecurePlainData hash:bytes = SecureValue;
func (m *TLSecureValue) To_SecureValue() *SecureValue {
    return &SecureValue{
        Constructor: TLConstructor_CRC32_secureValue,
        Data2: m.Data2,
    }
}


func (m *TLSecureValue) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureValue) GetType() *SecureValueType { return m.Data2.Type }

func (m *TLSecureValue) SetData(v *SecureData) { m.Data2.Data = v }
func (m *TLSecureValue) GetData() *SecureData { return m.Data2.Data }

func (m *TLSecureValue) SetFrontSide(v *SecureFile) { m.Data2.FrontSide = v }
func (m *TLSecureValue) GetFrontSide() *SecureFile { return m.Data2.FrontSide }

func (m *TLSecureValue) SetReverseSide(v *SecureFile) { m.Data2.ReverseSide = v }
func (m *TLSecureValue) GetReverseSide() *SecureFile { return m.Data2.ReverseSide }

func (m *TLSecureValue) SetSelfie(v *SecureFile) { m.Data2.Selfie = v }
func (m *TLSecureValue) GetSelfie() *SecureFile { return m.Data2.Selfie }

func (m *TLSecureValue) SetTranslation(v []*SecureFile) { m.Data2.Translation = v }
func (m *TLSecureValue) GetTranslation() []*SecureFile { return m.Data2.Translation }

func (m *TLSecureValue) SetFiles(v []*SecureFile) { m.Data2.Files = v }
func (m *TLSecureValue) GetFiles() []*SecureFile { return m.Data2.Files }

func (m *TLSecureValue) SetPlainData(v *SecurePlainData) { m.Data2.PlainData = v }
func (m *TLSecureValue) GetPlainData() *SecurePlainData { return m.Data2.PlainData }

func (m *TLSecureValue) SetHash(v []byte) { m.Data2.Hash = v }
func (m *TLSecureValue) GetHash() []byte { return m.Data2.Hash }


func NewTLSecureValue() * TLSecureValue {
    return &TLSecureValue{ Data2: &SecureValue_Data{} }
}

func (m* TLSecureValue) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_secureValue))

    // flags
    var flags uint32 = 0
    if m.GetData() != nil { flags |= 1 << 0 }
    if m.GetFrontSide() != nil { flags |= 1 << 1 }
    if m.GetReverseSide() != nil { flags |= 1 << 2 }
    if m.GetSelfie() != nil { flags |= 1 << 3 }
    if m.GetTranslation() != nil { flags |= 1 << 6 }
    if m.GetFiles() != nil { flags |= 1 << 4 }
    if m.GetPlainData() != nil { flags |= 1 << 5 }
	x.UInt(flags)

    x.Bytes(m.GetType().Encode())
    if (flags & (1 << 0)) != 0 { x.Bytes(m.GetData().Encode()) }
    if (flags & (1 << 1)) != 0 { x.Bytes(m.GetFrontSide().Encode()) }
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetReverseSide().Encode()) }
    if (flags & (1 << 3)) != 0 { x.Bytes(m.GetSelfie().Encode()) }
    if (flags & (1 << 6)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetTranslation())))
for _, v := range m.GetTranslation() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}
    if (flags & (1 << 4)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetFiles())))
for _, v := range m.GetFiles() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}
    if (flags & (1 << 5)) != 0 { x.Bytes(m.GetPlainData().Encode()) }
    x.StringBytes(m.GetHash())

    return x.buf
}

func (m* TLSecureValue) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m2 := &SecureValueType{}
    m2.Decode(dbuf)
    m.SetType(m2)
    if (flags & (1 << 0)) != 0 {
 m3 := &SecureData{}
    m3.Decode(dbuf)
    m.SetData(m3) 
}
    if (flags & (1 << 1)) != 0 {
 m4 := &SecureFile{}
    m4.Decode(dbuf)
    m.SetFrontSide(m4) 
}
    if (flags & (1 << 2)) != 0 {
 m5 := &SecureFile{}
    m5.Decode(dbuf)
    m.SetReverseSide(m5) 
}
    if (flags & (1 << 3)) != 0 {
 m6 := &SecureFile{}
    m6.Decode(dbuf)
    m.SetSelfie(m6) 
}
    if (flags & (1 << 6)) != 0 {
 c7 := dbuf.Int()
if c7 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 7, c7)
	return dbuf.err
}
l7 := dbuf.Int()
v7 := make([]*SecureFile, l7)
for i := int32(0); i < l7; i++ {
	v7[i] = &SecureFile{}
	v7[i].Decode(dbuf)
}
m.SetTranslation(v7)
 
}
    if (flags & (1 << 4)) != 0 {
 c8 := dbuf.Int()
if c8 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 8, c8)
	return dbuf.err
}
l8 := dbuf.Int()
v8 := make([]*SecureFile, l8)
for i := int32(0); i < l8; i++ {
	v8[i] = &SecureFile{}
	v8[i].Decode(dbuf)
}
m.SetFiles(v8)
 
}
    if (flags & (1 << 5)) != 0 {
 m9 := &SecurePlainData{}
    m9.Decode(dbuf)
    m.SetPlainData(m9) 
}
    m.SetHash(dbuf.StringBytes())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// ChatAdminRights <--
//  + TL_ChatAdminRights
//

func (m *ChatAdminRights) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_chatAdminRights:
        t := m.To_ChatAdminRights()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *ChatAdminRights) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_chatAdminRights:
        m2 := &TLChatAdminRights{&ChatAdminRights_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// chatAdminRights#5fb224d5 flags:# change_info:flags.0?true post_messages:flags.1?true edit_messages:flags.2?true delete_messages:flags.3?true ban_users:flags.4?true invite_users:flags.5?true pin_messages:flags.7?true add_admins:flags.9?true = ChatAdminRights;
func (m *ChatAdminRights) To_ChatAdminRights() *TLChatAdminRights {
    return &TLChatAdminRights{
        Data2: m.Data2,
    }
}



// chatAdminRights#5fb224d5 flags:# change_info:flags.0?true post_messages:flags.1?true edit_messages:flags.2?true delete_messages:flags.3?true ban_users:flags.4?true invite_users:flags.5?true pin_messages:flags.7?true add_admins:flags.9?true = ChatAdminRights;
func (m *TLChatAdminRights) To_ChatAdminRights() *ChatAdminRights {
    return &ChatAdminRights{
        Constructor: TLConstructor_CRC32_chatAdminRights,
        Data2: m.Data2,
    }
}


func (m *TLChatAdminRights) SetChangeInfo(v bool) { m.Data2.ChangeInfo = v }
func (m *TLChatAdminRights) GetChangeInfo() bool { return m.Data2.ChangeInfo }

func (m *TLChatAdminRights) SetPostMessages(v bool) { m.Data2.PostMessages = v }
func (m *TLChatAdminRights) GetPostMessages() bool { return m.Data2.PostMessages }

func (m *TLChatAdminRights) SetEditMessages(v bool) { m.Data2.EditMessages = v }
func (m *TLChatAdminRights) GetEditMessages() bool { return m.Data2.EditMessages }

func (m *TLChatAdminRights) SetDeleteMessages(v bool) { m.Data2.DeleteMessages = v }
func (m *TLChatAdminRights) GetDeleteMessages() bool { return m.Data2.DeleteMessages }

func (m *TLChatAdminRights) SetBanUsers(v bool) { m.Data2.BanUsers = v }
func (m *TLChatAdminRights) GetBanUsers() bool { return m.Data2.BanUsers }

func (m *TLChatAdminRights) SetInviteUsers(v bool) { m.Data2.InviteUsers = v }
func (m *TLChatAdminRights) GetInviteUsers() bool { return m.Data2.InviteUsers }

func (m *TLChatAdminRights) SetPinMessages(v bool) { m.Data2.PinMessages = v }
func (m *TLChatAdminRights) GetPinMessages() bool { return m.Data2.PinMessages }

func (m *TLChatAdminRights) SetAddAdmins(v bool) { m.Data2.AddAdmins = v }
func (m *TLChatAdminRights) GetAddAdmins() bool { return m.Data2.AddAdmins }


func NewTLChatAdminRights() * TLChatAdminRights {
    return &TLChatAdminRights{ Data2: &ChatAdminRights_Data{} }
}

func (m* TLChatAdminRights) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_chatAdminRights))

    // flags
    var flags uint32 = 0
    if m.GetChangeInfo() == true { flags |= 1 << 0 }
    if m.GetPostMessages() == true { flags |= 1 << 1 }
    if m.GetEditMessages() == true { flags |= 1 << 2 }
    if m.GetDeleteMessages() == true { flags |= 1 << 3 }
    if m.GetBanUsers() == true { flags |= 1 << 4 }
    if m.GetInviteUsers() == true { flags |= 1 << 5 }
    if m.GetPinMessages() == true { flags |= 1 << 7 }
    if m.GetAddAdmins() == true { flags |= 1 << 9 }
	x.UInt(flags)

    
    
    
    
    
    
    
    

    return x.buf
}

func (m* TLChatAdminRights) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetChangeInfo(true) }
    if (flags & (1 << 1)) != 0 { m.SetPostMessages(true) }
    if (flags & (1 << 2)) != 0 { m.SetEditMessages(true) }
    if (flags & (1 << 3)) != 0 { m.SetDeleteMessages(true) }
    if (flags & (1 << 4)) != 0 { m.SetBanUsers(true) }
    if (flags & (1 << 5)) != 0 { m.SetInviteUsers(true) }
    if (flags & (1 << 7)) != 0 { m.SetPinMessages(true) }
    if (flags & (1 << 9)) != 0 { m.SetAddAdmins(true) }

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputFile <--
//  + TL_InputFile
//  + TL_InputFileBig
//

func (m *InputFile) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputFile:
        t := m.To_InputFile()
        return t.Encode()
    case TLConstructor_CRC32_inputFileBig:
        t := m.To_InputFileBig()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputFile) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputFile:
        m2 := &TLInputFile{&InputFile_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputFileBig:
        m2 := &TLInputFileBig{&InputFile_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputFile#f52ff27f id:long parts:int name:string md5_checksum:string = InputFile;
func (m *InputFile) To_InputFile() *TLInputFile {
    return &TLInputFile{
        Data2: m.Data2,
    }
}

// inputFileBig#fa4f0bb5 id:long parts:int name:string = InputFile;
func (m *InputFile) To_InputFileBig() *TLInputFileBig {
    return &TLInputFileBig{
        Data2: m.Data2,
    }
}



// inputFile#f52ff27f id:long parts:int name:string md5_checksum:string = InputFile;
func (m *TLInputFile) To_InputFile() *InputFile {
    return &InputFile{
        Constructor: TLConstructor_CRC32_inputFile,
        Data2: m.Data2,
    }
}


func (m *TLInputFile) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputFile) GetId() int64 { return m.Data2.Id }

func (m *TLInputFile) SetParts(v int32) { m.Data2.Parts = v }
func (m *TLInputFile) GetParts() int32 { return m.Data2.Parts }

func (m *TLInputFile) SetName(v string) { m.Data2.Name = v }
func (m *TLInputFile) GetName() string { return m.Data2.Name }

func (m *TLInputFile) SetMd5Checksum(v string) { m.Data2.Md5Checksum = v }
func (m *TLInputFile) GetMd5Checksum() string { return m.Data2.Md5Checksum }


func NewTLInputFile() * TLInputFile {
    return &TLInputFile{ Data2: &InputFile_Data{} }
}

func (m* TLInputFile) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputFile))

    x.Long(m.GetId())
    x.Int(m.GetParts())
    x.String(m.GetName())
    x.String(m.GetMd5Checksum())

    return x.buf
}

func (m* TLInputFile) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetParts(dbuf.Int())
    m.SetName(dbuf.String())
    m.SetMd5Checksum(dbuf.String())

    return dbuf.err
}
// inputFileBig#fa4f0bb5 id:long parts:int name:string = InputFile;
func (m *TLInputFileBig) To_InputFile() *InputFile {
    return &InputFile{
        Constructor: TLConstructor_CRC32_inputFileBig,
        Data2: m.Data2,
    }
}


func (m *TLInputFileBig) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputFileBig) GetId() int64 { return m.Data2.Id }

func (m *TLInputFileBig) SetParts(v int32) { m.Data2.Parts = v }
func (m *TLInputFileBig) GetParts() int32 { return m.Data2.Parts }

func (m *TLInputFileBig) SetName(v string) { m.Data2.Name = v }
func (m *TLInputFileBig) GetName() string { return m.Data2.Name }


func NewTLInputFileBig() * TLInputFileBig {
    return &TLInputFileBig{ Data2: &InputFile_Data{} }
}

func (m* TLInputFileBig) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputFileBig))

    x.Long(m.GetId())
    x.Int(m.GetParts())
    x.String(m.GetName())

    return x.buf
}

func (m* TLInputFileBig) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetParts(dbuf.Int())
    m.SetName(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// PhotoSize <--
//  + TL_PhotoSizeEmpty
//  + TL_PhotoSize
//  + TL_PhotoCachedSize
//  + TL_PhotoStrippedSize
//

func (m *PhotoSize) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_photoSizeEmpty:
        t := m.To_PhotoSizeEmpty()
        return t.Encode()
    case TLConstructor_CRC32_photoSize:
        t := m.To_PhotoSize()
        return t.Encode()
    case TLConstructor_CRC32_photoCachedSize:
        t := m.To_PhotoCachedSize()
        return t.Encode()
    case TLConstructor_CRC32_photoStrippedSize:
        t := m.To_PhotoStrippedSize()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *PhotoSize) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_photoSizeEmpty:
        m2 := &TLPhotoSizeEmpty{&PhotoSize_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_photoSize:
        m2 := &TLPhotoSize{&PhotoSize_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_photoCachedSize:
        m2 := &TLPhotoCachedSize{&PhotoSize_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_photoStrippedSize:
        m2 := &TLPhotoStrippedSize{&PhotoSize_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// photoSizeEmpty#e17e23c type:string = PhotoSize;
func (m *PhotoSize) To_PhotoSizeEmpty() *TLPhotoSizeEmpty {
    return &TLPhotoSizeEmpty{
        Data2: m.Data2,
    }
}

// photoSize#77bfb61b type:string location:FileLocation w:int h:int size:int = PhotoSize;
func (m *PhotoSize) To_PhotoSize() *TLPhotoSize {
    return &TLPhotoSize{
        Data2: m.Data2,
    }
}

// photoCachedSize#e9a734fa type:string location:FileLocation w:int h:int bytes:bytes = PhotoSize;
func (m *PhotoSize) To_PhotoCachedSize() *TLPhotoCachedSize {
    return &TLPhotoCachedSize{
        Data2: m.Data2,
    }
}

// photoStrippedSize#e0b0bc2e type:string bytes:bytes = PhotoSize;
func (m *PhotoSize) To_PhotoStrippedSize() *TLPhotoStrippedSize {
    return &TLPhotoStrippedSize{
        Data2: m.Data2,
    }
}



// photoSizeEmpty#e17e23c type:string = PhotoSize;
func (m *TLPhotoSizeEmpty) To_PhotoSize() *PhotoSize {
    return &PhotoSize{
        Constructor: TLConstructor_CRC32_photoSizeEmpty,
        Data2: m.Data2,
    }
}


func (m *TLPhotoSizeEmpty) SetType(v string) { m.Data2.Type = v }
func (m *TLPhotoSizeEmpty) GetType() string { return m.Data2.Type }


func NewTLPhotoSizeEmpty() * TLPhotoSizeEmpty {
    return &TLPhotoSizeEmpty{ Data2: &PhotoSize_Data{} }
}

func (m* TLPhotoSizeEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_photoSizeEmpty))

    x.String(m.GetType())

    return x.buf
}

func (m* TLPhotoSizeEmpty) Decode(dbuf *DecodeBuf) error {
    m.SetType(dbuf.String())

    return dbuf.err
}
// photoSize#77bfb61b type:string location:FileLocation w:int h:int size:int = PhotoSize;
func (m *TLPhotoSize) To_PhotoSize() *PhotoSize {
    return &PhotoSize{
        Constructor: TLConstructor_CRC32_photoSize,
        Data2: m.Data2,
    }
}


func (m *TLPhotoSize) SetType(v string) { m.Data2.Type = v }
func (m *TLPhotoSize) GetType() string { return m.Data2.Type }

func (m *TLPhotoSize) SetLocation(v *FileLocation) { m.Data2.Location = v }
func (m *TLPhotoSize) GetLocation() *FileLocation { return m.Data2.Location }

func (m *TLPhotoSize) SetW(v int32) { m.Data2.W = v }
func (m *TLPhotoSize) GetW() int32 { return m.Data2.W }

func (m *TLPhotoSize) SetH(v int32) { m.Data2.H = v }
func (m *TLPhotoSize) GetH() int32 { return m.Data2.H }

func (m *TLPhotoSize) SetSize(v int32) { m.Data2.Size_ = v }
func (m *TLPhotoSize) GetSize() int32 { return m.Data2.Size_ }


func NewTLPhotoSize() * TLPhotoSize {
    return &TLPhotoSize{ Data2: &PhotoSize_Data{} }
}

func (m* TLPhotoSize) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_photoSize))

    x.String(m.GetType())
    x.Bytes(m.GetLocation().Encode())
    x.Int(m.GetW())
    x.Int(m.GetH())
    x.Int(m.GetSize())

    return x.buf
}

func (m* TLPhotoSize) Decode(dbuf *DecodeBuf) error {
    m.SetType(dbuf.String())
    m2 := &FileLocation{}
    m2.Decode(dbuf)
    m.SetLocation(m2)
    m.SetW(dbuf.Int())
    m.SetH(dbuf.Int())
    m.SetSize(dbuf.Int())

    return dbuf.err
}
// photoCachedSize#e9a734fa type:string location:FileLocation w:int h:int bytes:bytes = PhotoSize;
func (m *TLPhotoCachedSize) To_PhotoSize() *PhotoSize {
    return &PhotoSize{
        Constructor: TLConstructor_CRC32_photoCachedSize,
        Data2: m.Data2,
    }
}


func (m *TLPhotoCachedSize) SetType(v string) { m.Data2.Type = v }
func (m *TLPhotoCachedSize) GetType() string { return m.Data2.Type }

func (m *TLPhotoCachedSize) SetLocation(v *FileLocation) { m.Data2.Location = v }
func (m *TLPhotoCachedSize) GetLocation() *FileLocation { return m.Data2.Location }

func (m *TLPhotoCachedSize) SetW(v int32) { m.Data2.W = v }
func (m *TLPhotoCachedSize) GetW() int32 { return m.Data2.W }

func (m *TLPhotoCachedSize) SetH(v int32) { m.Data2.H = v }
func (m *TLPhotoCachedSize) GetH() int32 { return m.Data2.H }

func (m *TLPhotoCachedSize) SetBytes(v []byte) { m.Data2.Bytes = v }
func (m *TLPhotoCachedSize) GetBytes() []byte { return m.Data2.Bytes }


func NewTLPhotoCachedSize() * TLPhotoCachedSize {
    return &TLPhotoCachedSize{ Data2: &PhotoSize_Data{} }
}

func (m* TLPhotoCachedSize) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_photoCachedSize))

    x.String(m.GetType())
    x.Bytes(m.GetLocation().Encode())
    x.Int(m.GetW())
    x.Int(m.GetH())
    x.StringBytes(m.GetBytes())

    return x.buf
}

func (m* TLPhotoCachedSize) Decode(dbuf *DecodeBuf) error {
    m.SetType(dbuf.String())
    m2 := &FileLocation{}
    m2.Decode(dbuf)
    m.SetLocation(m2)
    m.SetW(dbuf.Int())
    m.SetH(dbuf.Int())
    m.SetBytes(dbuf.StringBytes())

    return dbuf.err
}
// photoStrippedSize#e0b0bc2e type:string bytes:bytes = PhotoSize;
func (m *TLPhotoStrippedSize) To_PhotoSize() *PhotoSize {
    return &PhotoSize{
        Constructor: TLConstructor_CRC32_photoStrippedSize,
        Data2: m.Data2,
    }
}


func (m *TLPhotoStrippedSize) SetType(v string) { m.Data2.Type = v }
func (m *TLPhotoStrippedSize) GetType() string { return m.Data2.Type }

func (m *TLPhotoStrippedSize) SetBytes(v []byte) { m.Data2.Bytes = v }
func (m *TLPhotoStrippedSize) GetBytes() []byte { return m.Data2.Bytes }


func NewTLPhotoStrippedSize() * TLPhotoStrippedSize {
    return &TLPhotoStrippedSize{ Data2: &PhotoSize_Data{} }
}

func (m* TLPhotoStrippedSize) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_photoStrippedSize))

    x.String(m.GetType())
    x.StringBytes(m.GetBytes())

    return x.buf
}

func (m* TLPhotoStrippedSize) Decode(dbuf *DecodeBuf) error {
    m.SetType(dbuf.String())
    m.SetBytes(dbuf.StringBytes())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// ContactLink <--
//  + TL_ContactLinkUnknown
//  + TL_ContactLinkNone
//  + TL_ContactLinkHasPhone
//  + TL_ContactLinkContact
//

func (m *ContactLink) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_contactLinkUnknown:
        t := m.To_ContactLinkUnknown()
        return t.Encode()
    case TLConstructor_CRC32_contactLinkNone:
        t := m.To_ContactLinkNone()
        return t.Encode()
    case TLConstructor_CRC32_contactLinkHasPhone:
        t := m.To_ContactLinkHasPhone()
        return t.Encode()
    case TLConstructor_CRC32_contactLinkContact:
        t := m.To_ContactLinkContact()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *ContactLink) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_contactLinkUnknown:
        m2 := &TLContactLinkUnknown{&ContactLink_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_contactLinkNone:
        m2 := &TLContactLinkNone{&ContactLink_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_contactLinkHasPhone:
        m2 := &TLContactLinkHasPhone{&ContactLink_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_contactLinkContact:
        m2 := &TLContactLinkContact{&ContactLink_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// contactLinkUnknown#5f4f9247 = ContactLink;
func (m *ContactLink) To_ContactLinkUnknown() *TLContactLinkUnknown {
    return &TLContactLinkUnknown{
        Data2: m.Data2,
    }
}

// contactLinkNone#feedd3ad = ContactLink;
func (m *ContactLink) To_ContactLinkNone() *TLContactLinkNone {
    return &TLContactLinkNone{
        Data2: m.Data2,
    }
}

// contactLinkHasPhone#268f3f59 = ContactLink;
func (m *ContactLink) To_ContactLinkHasPhone() *TLContactLinkHasPhone {
    return &TLContactLinkHasPhone{
        Data2: m.Data2,
    }
}

// contactLinkContact#d502c2d0 = ContactLink;
func (m *ContactLink) To_ContactLinkContact() *TLContactLinkContact {
    return &TLContactLinkContact{
        Data2: m.Data2,
    }
}



// contactLinkUnknown#5f4f9247 = ContactLink;
func (m *TLContactLinkUnknown) To_ContactLink() *ContactLink {
    return &ContactLink{
        Constructor: TLConstructor_CRC32_contactLinkUnknown,
        Data2: m.Data2,
    }
}



func NewTLContactLinkUnknown() * TLContactLinkUnknown {
    return &TLContactLinkUnknown{ Data2: &ContactLink_Data{} }
}

func (m* TLContactLinkUnknown) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_contactLinkUnknown))


    return x.buf
}

func (m* TLContactLinkUnknown) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// contactLinkNone#feedd3ad = ContactLink;
func (m *TLContactLinkNone) To_ContactLink() *ContactLink {
    return &ContactLink{
        Constructor: TLConstructor_CRC32_contactLinkNone,
        Data2: m.Data2,
    }
}



func NewTLContactLinkNone() * TLContactLinkNone {
    return &TLContactLinkNone{ Data2: &ContactLink_Data{} }
}

func (m* TLContactLinkNone) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_contactLinkNone))


    return x.buf
}

func (m* TLContactLinkNone) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// contactLinkHasPhone#268f3f59 = ContactLink;
func (m *TLContactLinkHasPhone) To_ContactLink() *ContactLink {
    return &ContactLink{
        Constructor: TLConstructor_CRC32_contactLinkHasPhone,
        Data2: m.Data2,
    }
}



func NewTLContactLinkHasPhone() * TLContactLinkHasPhone {
    return &TLContactLinkHasPhone{ Data2: &ContactLink_Data{} }
}

func (m* TLContactLinkHasPhone) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_contactLinkHasPhone))


    return x.buf
}

func (m* TLContactLinkHasPhone) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// contactLinkContact#d502c2d0 = ContactLink;
func (m *TLContactLinkContact) To_ContactLink() *ContactLink {
    return &ContactLink{
        Constructor: TLConstructor_CRC32_contactLinkContact,
        Data2: m.Data2,
    }
}



func NewTLContactLinkContact() * TLContactLinkContact {
    return &TLContactLinkContact{ Data2: &ContactLink_Data{} }
}

func (m* TLContactLinkContact) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_contactLinkContact))


    return x.buf
}

func (m* TLContactLinkContact) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Config <--
//  + TL_Config
//

func (m *Config) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_config:
        t := m.To_Config()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Config) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_config:
        m2 := &TLConfig{&Config_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// config#8df376a4 flags:# phonecalls_enabled:flags.1?true date:int expires:int test_mode:Bool this_dc:int dc_options:Vector<DcOption> chat_size_max:int megagroup_size_max:int forwarded_count_max:int online_update_period_ms:int offline_blur_timeout_ms:int offline_idle_timeout_ms:int online_cloud_timeout_ms:int notify_cloud_delay_ms:int notify_default_delay_ms:int chat_big_size:int push_chat_period_ms:int push_chat_limit:int saved_gifs_limit:int edit_time_limit:int rating_e_decay:int stickers_recent_limit:int stickers_faved_limit:int tmp_sessions:flags.0?int pinned_dialogs_count_max:int call_receive_timeout_ms:int call_ring_timeout_ms:int call_connect_timeout_ms:int call_packet_timeout_ms:int me_url_prefix:string suggested_lang_code:flags.2?string lang_pack_version:flags.2?int disabled_features:Vector<DisabledFeature> = Config;
func (m *Config) To_Config() *TLConfig {
    return &TLConfig{
        Data2: m.Data2,
    }
}



// config#8df376a4 flags:# phonecalls_enabled:flags.1?true date:int expires:int test_mode:Bool this_dc:int dc_options:Vector<DcOption> chat_size_max:int megagroup_size_max:int forwarded_count_max:int online_update_period_ms:int offline_blur_timeout_ms:int offline_idle_timeout_ms:int online_cloud_timeout_ms:int notify_cloud_delay_ms:int notify_default_delay_ms:int chat_big_size:int push_chat_period_ms:int push_chat_limit:int saved_gifs_limit:int edit_time_limit:int rating_e_decay:int stickers_recent_limit:int stickers_faved_limit:int tmp_sessions:flags.0?int pinned_dialogs_count_max:int call_receive_timeout_ms:int call_ring_timeout_ms:int call_connect_timeout_ms:int call_packet_timeout_ms:int me_url_prefix:string suggested_lang_code:flags.2?string lang_pack_version:flags.2?int disabled_features:Vector<DisabledFeature> = Config;
func (m *TLConfig) To_Config() *Config {
    return &Config{
        Constructor: TLConstructor_CRC32_config,
        Data2: m.Data2,
    }
}


func (m *TLConfig) SetPhonecallsEnabled(v bool) { m.Data2.PhonecallsEnabled = v }
func (m *TLConfig) GetPhonecallsEnabled() bool { return m.Data2.PhonecallsEnabled }

func (m *TLConfig) SetDate(v int32) { m.Data2.Date = v }
func (m *TLConfig) GetDate() int32 { return m.Data2.Date }

func (m *TLConfig) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLConfig) GetExpires() int32 { return m.Data2.Expires }

func (m *TLConfig) SetTestMode(v *Bool) { m.Data2.TestMode = v }
func (m *TLConfig) GetTestMode() *Bool { return m.Data2.TestMode }

func (m *TLConfig) SetThisDc(v int32) { m.Data2.ThisDc = v }
func (m *TLConfig) GetThisDc() int32 { return m.Data2.ThisDc }

func (m *TLConfig) SetDcOptions(v []*DcOption) { m.Data2.DcOptions = v }
func (m *TLConfig) GetDcOptions() []*DcOption { return m.Data2.DcOptions }

func (m *TLConfig) SetChatSizeMax(v int32) { m.Data2.ChatSizeMax = v }
func (m *TLConfig) GetChatSizeMax() int32 { return m.Data2.ChatSizeMax }

func (m *TLConfig) SetMegagroupSizeMax(v int32) { m.Data2.MegagroupSizeMax = v }
func (m *TLConfig) GetMegagroupSizeMax() int32 { return m.Data2.MegagroupSizeMax }

func (m *TLConfig) SetForwardedCountMax(v int32) { m.Data2.ForwardedCountMax = v }
func (m *TLConfig) GetForwardedCountMax() int32 { return m.Data2.ForwardedCountMax }

func (m *TLConfig) SetOnlineUpdatePeriodMs(v int32) { m.Data2.OnlineUpdatePeriodMs = v }
func (m *TLConfig) GetOnlineUpdatePeriodMs() int32 { return m.Data2.OnlineUpdatePeriodMs }

func (m *TLConfig) SetOfflineBlurTimeoutMs(v int32) { m.Data2.OfflineBlurTimeoutMs = v }
func (m *TLConfig) GetOfflineBlurTimeoutMs() int32 { return m.Data2.OfflineBlurTimeoutMs }

func (m *TLConfig) SetOfflineIdleTimeoutMs(v int32) { m.Data2.OfflineIdleTimeoutMs = v }
func (m *TLConfig) GetOfflineIdleTimeoutMs() int32 { return m.Data2.OfflineIdleTimeoutMs }

func (m *TLConfig) SetOnlineCloudTimeoutMs(v int32) { m.Data2.OnlineCloudTimeoutMs = v }
func (m *TLConfig) GetOnlineCloudTimeoutMs() int32 { return m.Data2.OnlineCloudTimeoutMs }

func (m *TLConfig) SetNotifyCloudDelayMs(v int32) { m.Data2.NotifyCloudDelayMs = v }
func (m *TLConfig) GetNotifyCloudDelayMs() int32 { return m.Data2.NotifyCloudDelayMs }

func (m *TLConfig) SetNotifyDefaultDelayMs(v int32) { m.Data2.NotifyDefaultDelayMs = v }
func (m *TLConfig) GetNotifyDefaultDelayMs() int32 { return m.Data2.NotifyDefaultDelayMs }

func (m *TLConfig) SetChatBigSize(v int32) { m.Data2.ChatBigSize = v }
func (m *TLConfig) GetChatBigSize() int32 { return m.Data2.ChatBigSize }

func (m *TLConfig) SetPushChatPeriodMs(v int32) { m.Data2.PushChatPeriodMs = v }
func (m *TLConfig) GetPushChatPeriodMs() int32 { return m.Data2.PushChatPeriodMs }

func (m *TLConfig) SetPushChatLimit(v int32) { m.Data2.PushChatLimit = v }
func (m *TLConfig) GetPushChatLimit() int32 { return m.Data2.PushChatLimit }

func (m *TLConfig) SetSavedGifsLimit(v int32) { m.Data2.SavedGifsLimit = v }
func (m *TLConfig) GetSavedGifsLimit() int32 { return m.Data2.SavedGifsLimit }

func (m *TLConfig) SetEditTimeLimit(v int32) { m.Data2.EditTimeLimit = v }
func (m *TLConfig) GetEditTimeLimit() int32 { return m.Data2.EditTimeLimit }

func (m *TLConfig) SetRatingEDecay(v int32) { m.Data2.RatingEDecay = v }
func (m *TLConfig) GetRatingEDecay() int32 { return m.Data2.RatingEDecay }

func (m *TLConfig) SetStickersRecentLimit(v int32) { m.Data2.StickersRecentLimit = v }
func (m *TLConfig) GetStickersRecentLimit() int32 { return m.Data2.StickersRecentLimit }

func (m *TLConfig) SetStickersFavedLimit(v int32) { m.Data2.StickersFavedLimit = v }
func (m *TLConfig) GetStickersFavedLimit() int32 { return m.Data2.StickersFavedLimit }

func (m *TLConfig) SetTmpSessions(v int32) { m.Data2.TmpSessions = v }
func (m *TLConfig) GetTmpSessions() int32 { return m.Data2.TmpSessions }

func (m *TLConfig) SetPinnedDialogsCountMax(v int32) { m.Data2.PinnedDialogsCountMax = v }
func (m *TLConfig) GetPinnedDialogsCountMax() int32 { return m.Data2.PinnedDialogsCountMax }

func (m *TLConfig) SetCallReceiveTimeoutMs(v int32) { m.Data2.CallReceiveTimeoutMs = v }
func (m *TLConfig) GetCallReceiveTimeoutMs() int32 { return m.Data2.CallReceiveTimeoutMs }

func (m *TLConfig) SetCallRingTimeoutMs(v int32) { m.Data2.CallRingTimeoutMs = v }
func (m *TLConfig) GetCallRingTimeoutMs() int32 { return m.Data2.CallRingTimeoutMs }

func (m *TLConfig) SetCallConnectTimeoutMs(v int32) { m.Data2.CallConnectTimeoutMs = v }
func (m *TLConfig) GetCallConnectTimeoutMs() int32 { return m.Data2.CallConnectTimeoutMs }

func (m *TLConfig) SetCallPacketTimeoutMs(v int32) { m.Data2.CallPacketTimeoutMs = v }
func (m *TLConfig) GetCallPacketTimeoutMs() int32 { return m.Data2.CallPacketTimeoutMs }

func (m *TLConfig) SetMeUrlPrefix(v string) { m.Data2.MeUrlPrefix = v }
func (m *TLConfig) GetMeUrlPrefix() string { return m.Data2.MeUrlPrefix }

func (m *TLConfig) SetSuggestedLangCode(v string) { m.Data2.SuggestedLangCode = v }
func (m *TLConfig) GetSuggestedLangCode() string { return m.Data2.SuggestedLangCode }

func (m *TLConfig) SetLangPackVersion(v int32) { m.Data2.LangPackVersion = v }
func (m *TLConfig) GetLangPackVersion() int32 { return m.Data2.LangPackVersion }

func (m *TLConfig) SetDisabledFeatures(v []*DisabledFeature) { m.Data2.DisabledFeatures = v }
func (m *TLConfig) GetDisabledFeatures() []*DisabledFeature { return m.Data2.DisabledFeatures }


func NewTLConfig() * TLConfig {
    return &TLConfig{ Data2: &Config_Data{} }
}

func (m* TLConfig) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_config))

    // flags
    var flags uint32 = 0
    if m.GetPhonecallsEnabled() == true { flags |= 1 << 1 }
    if m.GetTmpSessions() != 0 { flags |= 1 << 0 }
    if m.GetSuggestedLangCode() != "" { flags |= 1 << 2 }
    if m.GetLangPackVersion() != 0 { flags |= 1 << 2 }
	x.UInt(flags)

    
    x.Int(m.GetDate())
    x.Int(m.GetExpires())
    x.Bytes(m.GetTestMode().Encode())
    x.Int(m.GetThisDc())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetDcOptions())))
for _, v := range m.GetDcOptions() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(m.GetChatSizeMax())
    x.Int(m.GetMegagroupSizeMax())
    x.Int(m.GetForwardedCountMax())
    x.Int(m.GetOnlineUpdatePeriodMs())
    x.Int(m.GetOfflineBlurTimeoutMs())
    x.Int(m.GetOfflineIdleTimeoutMs())
    x.Int(m.GetOnlineCloudTimeoutMs())
    x.Int(m.GetNotifyCloudDelayMs())
    x.Int(m.GetNotifyDefaultDelayMs())
    x.Int(m.GetChatBigSize())
    x.Int(m.GetPushChatPeriodMs())
    x.Int(m.GetPushChatLimit())
    x.Int(m.GetSavedGifsLimit())
    x.Int(m.GetEditTimeLimit())
    x.Int(m.GetRatingEDecay())
    x.Int(m.GetStickersRecentLimit())
    x.Int(m.GetStickersFavedLimit())
    if (flags & (1 << 0)) != 0 { x.Int(m.GetTmpSessions()) }
    x.Int(m.GetPinnedDialogsCountMax())
    x.Int(m.GetCallReceiveTimeoutMs())
    x.Int(m.GetCallRingTimeoutMs())
    x.Int(m.GetCallConnectTimeoutMs())
    x.Int(m.GetCallPacketTimeoutMs())
    x.String(m.GetMeUrlPrefix())
    if (flags & (1 << 2)) != 0 { x.String(m.GetSuggestedLangCode()) }
    if (flags & (1 << 2)) != 0 { x.Int(m.GetLangPackVersion()) }
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetDisabledFeatures())))
for _, v := range m.GetDisabledFeatures() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLConfig) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 1)) != 0 { m.SetPhonecallsEnabled(true) }
    m.SetDate(dbuf.Int())
    m.SetExpires(dbuf.Int())
    m5 := &Bool{}
    m5.Decode(dbuf)
    m.SetTestMode(m5)
    m.SetThisDc(dbuf.Int())
    c7 := dbuf.Int()
if c7 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 7, c7)
	return dbuf.err
}
l7 := dbuf.Int()
v7 := make([]*DcOption, l7)
for i := int32(0); i < l7; i++ {
	v7[i] = &DcOption{}
	v7[i].Decode(dbuf)
}
m.SetDcOptions(v7)

    m.SetChatSizeMax(dbuf.Int())
    m.SetMegagroupSizeMax(dbuf.Int())
    m.SetForwardedCountMax(dbuf.Int())
    m.SetOnlineUpdatePeriodMs(dbuf.Int())
    m.SetOfflineBlurTimeoutMs(dbuf.Int())
    m.SetOfflineIdleTimeoutMs(dbuf.Int())
    m.SetOnlineCloudTimeoutMs(dbuf.Int())
    m.SetNotifyCloudDelayMs(dbuf.Int())
    m.SetNotifyDefaultDelayMs(dbuf.Int())
    m.SetChatBigSize(dbuf.Int())
    m.SetPushChatPeriodMs(dbuf.Int())
    m.SetPushChatLimit(dbuf.Int())
    m.SetSavedGifsLimit(dbuf.Int())
    m.SetEditTimeLimit(dbuf.Int())
    m.SetRatingEDecay(dbuf.Int())
    m.SetStickersRecentLimit(dbuf.Int())
    m.SetStickersFavedLimit(dbuf.Int())
    if (flags & (1 << 0)) != 0 { m.SetTmpSessions(dbuf.Int()) }
    m.SetPinnedDialogsCountMax(dbuf.Int())
    m.SetCallReceiveTimeoutMs(dbuf.Int())
    m.SetCallRingTimeoutMs(dbuf.Int())
    m.SetCallConnectTimeoutMs(dbuf.Int())
    m.SetCallPacketTimeoutMs(dbuf.Int())
    m.SetMeUrlPrefix(dbuf.String())
    if (flags & (1 << 2)) != 0 { m.SetSuggestedLangCode(dbuf.String()) }
    if (flags & (1 << 2)) != 0 { m.SetLangPackVersion(dbuf.Int()) }
    c34 := dbuf.Int()
if c34 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 34, c34)
	return dbuf.err
}
l34 := dbuf.Int()
v34 := make([]*DisabledFeature, l34)
for i := int32(0); i < l34; i++ {
	v34[i] = &DisabledFeature{}
	v34[i].Decode(dbuf)
}
m.SetDisabledFeatures(v34)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Payments_PaymentReceipt <--
//  + TL_PaymentsPaymentReceipt
//

func (m *Payments_PaymentReceipt) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_payments_paymentReceipt:
        t := m.To_PaymentsPaymentReceipt()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Payments_PaymentReceipt) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_payments_paymentReceipt:
        m2 := &TLPaymentsPaymentReceipt{&Payments_PaymentReceipt_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// payments.paymentReceipt#500911e1 flags:# date:int bot_id:int invoice:Invoice provider_id:int info:flags.0?PaymentRequestedInfo shipping:flags.1?ShippingOption currency:string total_amount:long credentials_title:string users:Vector<User> = payments.PaymentReceipt;
func (m *Payments_PaymentReceipt) To_PaymentsPaymentReceipt() *TLPaymentsPaymentReceipt {
    return &TLPaymentsPaymentReceipt{
        Data2: m.Data2,
    }
}



// payments.paymentReceipt#500911e1 flags:# date:int bot_id:int invoice:Invoice provider_id:int info:flags.0?PaymentRequestedInfo shipping:flags.1?ShippingOption currency:string total_amount:long credentials_title:string users:Vector<User> = payments.PaymentReceipt;
func (m *TLPaymentsPaymentReceipt) To_Payments_PaymentReceipt() *Payments_PaymentReceipt {
    return &Payments_PaymentReceipt{
        Constructor: TLConstructor_CRC32_payments_paymentReceipt,
        Data2: m.Data2,
    }
}


func (m *TLPaymentsPaymentReceipt) SetDate(v int32) { m.Data2.Date = v }
func (m *TLPaymentsPaymentReceipt) GetDate() int32 { return m.Data2.Date }

func (m *TLPaymentsPaymentReceipt) SetBotId(v int32) { m.Data2.BotId = v }
func (m *TLPaymentsPaymentReceipt) GetBotId() int32 { return m.Data2.BotId }

func (m *TLPaymentsPaymentReceipt) SetInvoice(v *Invoice) { m.Data2.Invoice = v }
func (m *TLPaymentsPaymentReceipt) GetInvoice() *Invoice { return m.Data2.Invoice }

func (m *TLPaymentsPaymentReceipt) SetProviderId(v int32) { m.Data2.ProviderId = v }
func (m *TLPaymentsPaymentReceipt) GetProviderId() int32 { return m.Data2.ProviderId }

func (m *TLPaymentsPaymentReceipt) SetInfo(v *PaymentRequestedInfo) { m.Data2.Info = v }
func (m *TLPaymentsPaymentReceipt) GetInfo() *PaymentRequestedInfo { return m.Data2.Info }

func (m *TLPaymentsPaymentReceipt) SetShipping(v *ShippingOption) { m.Data2.Shipping = v }
func (m *TLPaymentsPaymentReceipt) GetShipping() *ShippingOption { return m.Data2.Shipping }

func (m *TLPaymentsPaymentReceipt) SetCurrency(v string) { m.Data2.Currency = v }
func (m *TLPaymentsPaymentReceipt) GetCurrency() string { return m.Data2.Currency }

func (m *TLPaymentsPaymentReceipt) SetTotalAmount(v int64) { m.Data2.TotalAmount = v }
func (m *TLPaymentsPaymentReceipt) GetTotalAmount() int64 { return m.Data2.TotalAmount }

func (m *TLPaymentsPaymentReceipt) SetCredentialsTitle(v string) { m.Data2.CredentialsTitle = v }
func (m *TLPaymentsPaymentReceipt) GetCredentialsTitle() string { return m.Data2.CredentialsTitle }

func (m *TLPaymentsPaymentReceipt) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLPaymentsPaymentReceipt) GetUsers() []*User { return m.Data2.Users }


func NewTLPaymentsPaymentReceipt() * TLPaymentsPaymentReceipt {
    return &TLPaymentsPaymentReceipt{ Data2: &Payments_PaymentReceipt_Data{} }
}

func (m* TLPaymentsPaymentReceipt) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_payments_paymentReceipt))

    // flags
    var flags uint32 = 0
    if m.GetInfo() != nil { flags |= 1 << 0 }
    if m.GetShipping() != nil { flags |= 1 << 1 }
	x.UInt(flags)

    x.Int(m.GetDate())
    x.Int(m.GetBotId())
    x.Bytes(m.GetInvoice().Encode())
    x.Int(m.GetProviderId())
    if (flags & (1 << 0)) != 0 { x.Bytes(m.GetInfo().Encode()) }
    if (flags & (1 << 1)) != 0 { x.Bytes(m.GetShipping().Encode()) }
    x.String(m.GetCurrency())
    x.Long(m.GetTotalAmount())
    x.String(m.GetCredentialsTitle())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLPaymentsPaymentReceipt) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetDate(dbuf.Int())
    m.SetBotId(dbuf.Int())
    m4 := &Invoice{}
    m4.Decode(dbuf)
    m.SetInvoice(m4)
    m.SetProviderId(dbuf.Int())
    if (flags & (1 << 0)) != 0 {
 m6 := &PaymentRequestedInfo{}
    m6.Decode(dbuf)
    m.SetInfo(m6) 
}
    if (flags & (1 << 1)) != 0 {
 m7 := &ShippingOption{}
    m7.Decode(dbuf)
    m.SetShipping(m7) 
}
    m.SetCurrency(dbuf.String())
    m.SetTotalAmount(dbuf.Long())
    m.SetCredentialsTitle(dbuf.String())
    c11 := dbuf.Int()
if c11 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 11, c11)
	return dbuf.err
}
l11 := dbuf.Int()
v11 := make([]*User, l11)
for i := int32(0); i < l11; i++ {
	v11[i] = &User{}
	v11[i].Decode(dbuf)
}
m.SetUsers(v11)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// PhoneConnection <--
//  + TL_PhoneConnection
//  + TL_PhoneConnectionWebrtc
//

func (m *PhoneConnection) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_phoneConnection:
        t := m.To_PhoneConnection()
        return t.Encode()
    case TLConstructor_CRC32_phoneConnectionWebrtc:
        t := m.To_PhoneConnectionWebrtc()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *PhoneConnection) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_phoneConnection:
        m2 := &TLPhoneConnection{&PhoneConnection_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_phoneConnectionWebrtc:
        m2 := &TLPhoneConnectionWebrtc{&PhoneConnection_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// phoneConnection#9d4c17c0 id:long ip:string ipv6:string port:int peer_tag:bytes = PhoneConnection;
func (m *PhoneConnection) To_PhoneConnection() *TLPhoneConnection {
    return &TLPhoneConnection{
        Data2: m.Data2,
    }
}

// phoneConnectionWebrtc#635fe375 flags:# turn:flags.0?true stun:flags.1?true id:long ip:string ipv6:string port:int username:string password:string = PhoneConnection;
func (m *PhoneConnection) To_PhoneConnectionWebrtc() *TLPhoneConnectionWebrtc {
    return &TLPhoneConnectionWebrtc{
        Data2: m.Data2,
    }
}



// phoneConnection#9d4c17c0 id:long ip:string ipv6:string port:int peer_tag:bytes = PhoneConnection;
func (m *TLPhoneConnection) To_PhoneConnection() *PhoneConnection {
    return &PhoneConnection{
        Constructor: TLConstructor_CRC32_phoneConnection,
        Data2: m.Data2,
    }
}


func (m *TLPhoneConnection) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoneConnection) GetId() int64 { return m.Data2.Id }

func (m *TLPhoneConnection) SetIp(v string) { m.Data2.Ip = v }
func (m *TLPhoneConnection) GetIp() string { return m.Data2.Ip }

func (m *TLPhoneConnection) SetIpv6(v string) { m.Data2.Ipv6 = v }
func (m *TLPhoneConnection) GetIpv6() string { return m.Data2.Ipv6 }

func (m *TLPhoneConnection) SetPort(v int32) { m.Data2.Port = v }
func (m *TLPhoneConnection) GetPort() int32 { return m.Data2.Port }

func (m *TLPhoneConnection) SetPeerTag(v []byte) { m.Data2.PeerTag = v }
func (m *TLPhoneConnection) GetPeerTag() []byte { return m.Data2.PeerTag }


func NewTLPhoneConnection() * TLPhoneConnection {
    return &TLPhoneConnection{ Data2: &PhoneConnection_Data{} }
}

func (m* TLPhoneConnection) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_phoneConnection))

    x.Long(m.GetId())
    x.String(m.GetIp())
    x.String(m.GetIpv6())
    x.Int(m.GetPort())
    x.StringBytes(m.GetPeerTag())

    return x.buf
}

func (m* TLPhoneConnection) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetIp(dbuf.String())
    m.SetIpv6(dbuf.String())
    m.SetPort(dbuf.Int())
    m.SetPeerTag(dbuf.StringBytes())

    return dbuf.err
}
// phoneConnectionWebrtc#635fe375 flags:# turn:flags.0?true stun:flags.1?true id:long ip:string ipv6:string port:int username:string password:string = PhoneConnection;
func (m *TLPhoneConnectionWebrtc) To_PhoneConnection() *PhoneConnection {
    return &PhoneConnection{
        Constructor: TLConstructor_CRC32_phoneConnectionWebrtc,
        Data2: m.Data2,
    }
}


func (m *TLPhoneConnectionWebrtc) SetTurn(v bool) { m.Data2.Turn = v }
func (m *TLPhoneConnectionWebrtc) GetTurn() bool { return m.Data2.Turn }

func (m *TLPhoneConnectionWebrtc) SetStun(v bool) { m.Data2.Stun = v }
func (m *TLPhoneConnectionWebrtc) GetStun() bool { return m.Data2.Stun }

func (m *TLPhoneConnectionWebrtc) SetId(v int64) { m.Data2.Id = v }
func (m *TLPhoneConnectionWebrtc) GetId() int64 { return m.Data2.Id }

func (m *TLPhoneConnectionWebrtc) SetIp(v string) { m.Data2.Ip = v }
func (m *TLPhoneConnectionWebrtc) GetIp() string { return m.Data2.Ip }

func (m *TLPhoneConnectionWebrtc) SetIpv6(v string) { m.Data2.Ipv6 = v }
func (m *TLPhoneConnectionWebrtc) GetIpv6() string { return m.Data2.Ipv6 }

func (m *TLPhoneConnectionWebrtc) SetPort(v int32) { m.Data2.Port = v }
func (m *TLPhoneConnectionWebrtc) GetPort() int32 { return m.Data2.Port }

func (m *TLPhoneConnectionWebrtc) SetUsername(v string) { m.Data2.Username = v }
func (m *TLPhoneConnectionWebrtc) GetUsername() string { return m.Data2.Username }

func (m *TLPhoneConnectionWebrtc) SetPassword(v string) { m.Data2.Password = v }
func (m *TLPhoneConnectionWebrtc) GetPassword() string { return m.Data2.Password }


func NewTLPhoneConnectionWebrtc() * TLPhoneConnectionWebrtc {
    return &TLPhoneConnectionWebrtc{ Data2: &PhoneConnection_Data{} }
}

func (m* TLPhoneConnectionWebrtc) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_phoneConnectionWebrtc))

    // flags
    var flags uint32 = 0
    if m.GetTurn() == true { flags |= 1 << 0 }
    if m.GetStun() == true { flags |= 1 << 1 }
	x.UInt(flags)

    
    
    x.Long(m.GetId())
    x.String(m.GetIp())
    x.String(m.GetIpv6())
    x.Int(m.GetPort())
    x.String(m.GetUsername())
    x.String(m.GetPassword())

    return x.buf
}

func (m* TLPhoneConnectionWebrtc) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetTurn(true) }
    if (flags & (1 << 1)) != 0 { m.SetStun(true) }
    m.SetId(dbuf.Long())
    m.SetIp(dbuf.String())
    m.SetIpv6(dbuf.String())
    m.SetPort(dbuf.Int())
    m.SetUsername(dbuf.String())
    m.SetPassword(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// ChannelBannedRights <--
//  + TL_ChannelBannedRights
//

func (m *ChannelBannedRights) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_channelBannedRights:
        t := m.To_ChannelBannedRights()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *ChannelBannedRights) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_channelBannedRights:
        m2 := &TLChannelBannedRights{&ChannelBannedRights_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// channelBannedRights#58cf4249 flags:# view_messages:flags.0?true send_messages:flags.1?true send_media:flags.2?true send_stickers:flags.3?true send_gifs:flags.4?true send_games:flags.5?true send_inline:flags.6?true embed_links:flags.7?true until_date:int = ChannelBannedRights;
func (m *ChannelBannedRights) To_ChannelBannedRights() *TLChannelBannedRights {
    return &TLChannelBannedRights{
        Data2: m.Data2,
    }
}



// channelBannedRights#58cf4249 flags:# view_messages:flags.0?true send_messages:flags.1?true send_media:flags.2?true send_stickers:flags.3?true send_gifs:flags.4?true send_games:flags.5?true send_inline:flags.6?true embed_links:flags.7?true until_date:int = ChannelBannedRights;
func (m *TLChannelBannedRights) To_ChannelBannedRights() *ChannelBannedRights {
    return &ChannelBannedRights{
        Constructor: TLConstructor_CRC32_channelBannedRights,
        Data2: m.Data2,
    }
}


func (m *TLChannelBannedRights) SetViewMessages(v bool) { m.Data2.ViewMessages = v }
func (m *TLChannelBannedRights) GetViewMessages() bool { return m.Data2.ViewMessages }

func (m *TLChannelBannedRights) SetSendMessages(v bool) { m.Data2.SendMessages = v }
func (m *TLChannelBannedRights) GetSendMessages() bool { return m.Data2.SendMessages }

func (m *TLChannelBannedRights) SetSendMedia(v bool) { m.Data2.SendMedia = v }
func (m *TLChannelBannedRights) GetSendMedia() bool { return m.Data2.SendMedia }

func (m *TLChannelBannedRights) SetSendStickers(v bool) { m.Data2.SendStickers = v }
func (m *TLChannelBannedRights) GetSendStickers() bool { return m.Data2.SendStickers }

func (m *TLChannelBannedRights) SetSendGifs(v bool) { m.Data2.SendGifs = v }
func (m *TLChannelBannedRights) GetSendGifs() bool { return m.Data2.SendGifs }

func (m *TLChannelBannedRights) SetSendGames(v bool) { m.Data2.SendGames = v }
func (m *TLChannelBannedRights) GetSendGames() bool { return m.Data2.SendGames }

func (m *TLChannelBannedRights) SetSendInline(v bool) { m.Data2.SendInline = v }
func (m *TLChannelBannedRights) GetSendInline() bool { return m.Data2.SendInline }

func (m *TLChannelBannedRights) SetEmbedLinks(v bool) { m.Data2.EmbedLinks = v }
func (m *TLChannelBannedRights) GetEmbedLinks() bool { return m.Data2.EmbedLinks }

func (m *TLChannelBannedRights) SetUntilDate(v int32) { m.Data2.UntilDate = v }
func (m *TLChannelBannedRights) GetUntilDate() int32 { return m.Data2.UntilDate }


func NewTLChannelBannedRights() * TLChannelBannedRights {
    return &TLChannelBannedRights{ Data2: &ChannelBannedRights_Data{} }
}

func (m* TLChannelBannedRights) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelBannedRights))

    // flags
    var flags uint32 = 0
    if m.GetViewMessages() == true { flags |= 1 << 0 }
    if m.GetSendMessages() == true { flags |= 1 << 1 }
    if m.GetSendMedia() == true { flags |= 1 << 2 }
    if m.GetSendStickers() == true { flags |= 1 << 3 }
    if m.GetSendGifs() == true { flags |= 1 << 4 }
    if m.GetSendGames() == true { flags |= 1 << 5 }
    if m.GetSendInline() == true { flags |= 1 << 6 }
    if m.GetEmbedLinks() == true { flags |= 1 << 7 }
	x.UInt(flags)

    
    
    
    
    
    
    
    
    x.Int(m.GetUntilDate())

    return x.buf
}

func (m* TLChannelBannedRights) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetViewMessages(true) }
    if (flags & (1 << 1)) != 0 { m.SetSendMessages(true) }
    if (flags & (1 << 2)) != 0 { m.SetSendMedia(true) }
    if (flags & (1 << 3)) != 0 { m.SetSendStickers(true) }
    if (flags & (1 << 4)) != 0 { m.SetSendGifs(true) }
    if (flags & (1 << 5)) != 0 { m.SetSendGames(true) }
    if (flags & (1 << 6)) != 0 { m.SetSendInline(true) }
    if (flags & (1 << 7)) != 0 { m.SetEmbedLinks(true) }
    m.SetUntilDate(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// SchemeType <--
//  + TL_SchemeType
//

func (m *SchemeType) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_schemeType:
        t := m.To_SchemeType()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *SchemeType) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_schemeType:
        m2 := &TLSchemeType{&SchemeType_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// schemeType#a8e1e989 id:int predicate:string params:Vector<SchemeParam> type:string = SchemeType;
func (m *SchemeType) To_SchemeType() *TLSchemeType {
    return &TLSchemeType{
        Data2: m.Data2,
    }
}



// schemeType#a8e1e989 id:int predicate:string params:Vector<SchemeParam> type:string = SchemeType;
func (m *TLSchemeType) To_SchemeType() *SchemeType {
    return &SchemeType{
        Constructor: TLConstructor_CRC32_schemeType,
        Data2: m.Data2,
    }
}


func (m *TLSchemeType) SetId(v int32) { m.Data2.Id = v }
func (m *TLSchemeType) GetId() int32 { return m.Data2.Id }

func (m *TLSchemeType) SetPredicate(v string) { m.Data2.Predicate = v }
func (m *TLSchemeType) GetPredicate() string { return m.Data2.Predicate }

func (m *TLSchemeType) SetParams(v []*SchemeParam) { m.Data2.Params = v }
func (m *TLSchemeType) GetParams() []*SchemeParam { return m.Data2.Params }

func (m *TLSchemeType) SetType(v string) { m.Data2.Type = v }
func (m *TLSchemeType) GetType() string { return m.Data2.Type }


func NewTLSchemeType() * TLSchemeType {
    return &TLSchemeType{ Data2: &SchemeType_Data{} }
}

func (m* TLSchemeType) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_schemeType))

    x.Int(m.GetId())
    x.String(m.GetPredicate())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetParams())))
for _, v := range m.GetParams() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.String(m.GetType())

    return x.buf
}

func (m* TLSchemeType) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Int())
    m.SetPredicate(dbuf.String())
    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*SchemeParam, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &SchemeParam{}
	v3[i].Decode(dbuf)
}
m.SetParams(v3)

    m.SetType(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// WallPaper <--
//  + TL_WallPaper
//  + TL_WallPaperSolid
//  + TL_WallPaper114
//  + TL_WallPaperNoFile
//

func (m *WallPaper) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_wallPaper:
        t := m.To_WallPaper()
        return t.Encode()
    case TLConstructor_CRC32_wallPaperSolid:
        t := m.To_WallPaperSolid()
        return t.Encode()
    case TLConstructor_CRC32_wallPaper114:
        t := m.To_WallPaper114()
        return t.Encode()
    case TLConstructor_CRC32_wallPaperNoFile:
        t := m.To_WallPaperNoFile()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *WallPaper) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_wallPaper:
        m2 := &TLWallPaper{&WallPaper_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_wallPaperSolid:
        m2 := &TLWallPaperSolid{&WallPaper_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_wallPaper114:
        m2 := &TLWallPaper114{&WallPaper_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_wallPaperNoFile:
        m2 := &TLWallPaperNoFile{&WallPaper_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// wallPaper#ccb03657 id:int title:string sizes:Vector<PhotoSize> color:int = WallPaper;
func (m *WallPaper) To_WallPaper() *TLWallPaper {
    return &TLWallPaper{
        Data2: m.Data2,
    }
}

// wallPaperSolid#63117f24 id:int title:string bg_color:int color:int = WallPaper;
func (m *WallPaper) To_WallPaperSolid() *TLWallPaperSolid {
    return &TLWallPaperSolid{
        Data2: m.Data2,
    }
}

// wallPaper#a437c3ed id:long flags:# creator:flags.0?true default:flags.1?true pattern:flags.3?true dark:flags.4?true access_hash:long slug:string document:Document settings:flags.2?WallPaperSettings = WallPaper;
func (m *WallPaper) To_WallPaper114() *TLWallPaper114 {
    return &TLWallPaper114{
        Data2: m.Data2,
    }
}

// wallPaperNoFile#8af40b25 flags:# default:flags.1?true dark:flags.4?true settings:flags.2?WallPaperSettings = WallPaper;
func (m *WallPaper) To_WallPaperNoFile() *TLWallPaperNoFile {
    return &TLWallPaperNoFile{
        Data2: m.Data2,
    }
}



// wallPaper#ccb03657 id:int title:string sizes:Vector<PhotoSize> color:int = WallPaper;
func (m *TLWallPaper) To_WallPaper() *WallPaper {
    return &WallPaper{
        Constructor: TLConstructor_CRC32_wallPaper,
        Data2: m.Data2,
    }
}


func (m *TLWallPaper) SetId(v int32) { m.Data2.Id_1 = v }
func (m *TLWallPaper) GetId() int32 { return m.Data2.Id_1 }

func (m *TLWallPaper) SetTitle(v string) { m.Data2.Title = v }
func (m *TLWallPaper) GetTitle() string { return m.Data2.Title }

func (m *TLWallPaper) SetSizes(v []*PhotoSize) { m.Data2.Sizes = v }
func (m *TLWallPaper) GetSizes() []*PhotoSize { return m.Data2.Sizes }

func (m *TLWallPaper) SetColor(v int32) { m.Data2.Color = v }
func (m *TLWallPaper) GetColor() int32 { return m.Data2.Color }


func NewTLWallPaper() * TLWallPaper {
    return &TLWallPaper{ Data2: &WallPaper_Data{} }
}

func (m* TLWallPaper) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_wallPaper))

    x.Int(m.GetId())
    x.String(m.GetTitle())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetSizes())))
for _, v := range m.GetSizes() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(m.GetColor())

    return x.buf
}

func (m* TLWallPaper) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Int())
    m.SetTitle(dbuf.String())
    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*PhotoSize, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &PhotoSize{}
	v3[i].Decode(dbuf)
}
m.SetSizes(v3)

    m.SetColor(dbuf.Int())

    return dbuf.err
}
// wallPaperSolid#63117f24 id:int title:string bg_color:int color:int = WallPaper;
func (m *TLWallPaperSolid) To_WallPaper() *WallPaper {
    return &WallPaper{
        Constructor: TLConstructor_CRC32_wallPaperSolid,
        Data2: m.Data2,
    }
}


func (m *TLWallPaperSolid) SetId(v int32) { m.Data2.Id_1 = v }
func (m *TLWallPaperSolid) GetId() int32 { return m.Data2.Id_1 }

func (m *TLWallPaperSolid) SetTitle(v string) { m.Data2.Title = v }
func (m *TLWallPaperSolid) GetTitle() string { return m.Data2.Title }

func (m *TLWallPaperSolid) SetBgColor(v int32) { m.Data2.BgColor = v }
func (m *TLWallPaperSolid) GetBgColor() int32 { return m.Data2.BgColor }

func (m *TLWallPaperSolid) SetColor(v int32) { m.Data2.Color = v }
func (m *TLWallPaperSolid) GetColor() int32 { return m.Data2.Color }


func NewTLWallPaperSolid() * TLWallPaperSolid {
    return &TLWallPaperSolid{ Data2: &WallPaper_Data{} }
}

func (m* TLWallPaperSolid) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_wallPaperSolid))

    x.Int(m.GetId())
    x.String(m.GetTitle())
    x.Int(m.GetBgColor())
    x.Int(m.GetColor())

    return x.buf
}

func (m* TLWallPaperSolid) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Int())
    m.SetTitle(dbuf.String())
    m.SetBgColor(dbuf.Int())
    m.SetColor(dbuf.Int())

    return dbuf.err
}
// wallPaper#a437c3ed id:long flags:# creator:flags.0?true default:flags.1?true pattern:flags.3?true dark:flags.4?true access_hash:long slug:string document:Document settings:flags.2?WallPaperSettings = WallPaper;
func (m *TLWallPaper114) To_WallPaper() *WallPaper {
    return &WallPaper{
        Constructor: TLConstructor_CRC32_wallPaper114,
        Data2: m.Data2,
    }
}


func (m *TLWallPaper114) SetId(v int64) { m.Data2.Id_6 = v }
func (m *TLWallPaper114) GetId() int64 { return m.Data2.Id_6 }

func (m *TLWallPaper114) SetCreator(v bool) { m.Data2.Creator = v }
func (m *TLWallPaper114) GetCreator() bool { return m.Data2.Creator }

func (m *TLWallPaper114) SetDefault(v bool) { m.Data2.Default = v }
func (m *TLWallPaper114) GetDefault() bool { return m.Data2.Default }

func (m *TLWallPaper114) SetPattern(v bool) { m.Data2.Pattern = v }
func (m *TLWallPaper114) GetPattern() bool { return m.Data2.Pattern }

func (m *TLWallPaper114) SetDark(v bool) { m.Data2.Dark = v }
func (m *TLWallPaper114) GetDark() bool { return m.Data2.Dark }

func (m *TLWallPaper114) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLWallPaper114) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLWallPaper114) SetSlug(v string) { m.Data2.Slug = v }
func (m *TLWallPaper114) GetSlug() string { return m.Data2.Slug }

func (m *TLWallPaper114) SetDocument(v *Document) { m.Data2.Document = v }
func (m *TLWallPaper114) GetDocument() *Document { return m.Data2.Document }

func (m *TLWallPaper114) SetSettings(v *WallPaperSettings) { m.Data2.Settings = v }
func (m *TLWallPaper114) GetSettings() *WallPaperSettings { return m.Data2.Settings }


func NewTLWallPaper114() * TLWallPaper114 {
    return &TLWallPaper114{ Data2: &WallPaper_Data{} }
}

func (m* TLWallPaper114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_wallPaper114))

    x.Long(m.GetId())
    // flags
    var flags uint32 = 0
    if m.GetCreator() == true { flags |= 1 << 0 }
    if m.GetDefault() == true { flags |= 1 << 1 }
    if m.GetPattern() == true { flags |= 1 << 3 }
    if m.GetDark() == true { flags |= 1 << 4 }
    if m.GetSettings() != nil { flags |= 1 << 2 }
	x.UInt(flags)

    
    
    
    
    x.Long(m.GetAccessHash())
    x.String(m.GetSlug())
    x.Bytes(m.GetDocument().Encode())
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetSettings().Encode()) }

    return x.buf
}

func (m* TLWallPaper114) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetCreator(true) }
    if (flags & (1 << 1)) != 0 { m.SetDefault(true) }
    if (flags & (1 << 3)) != 0 { m.SetPattern(true) }
    if (flags & (1 << 4)) != 0 { m.SetDark(true) }
    m.SetAccessHash(dbuf.Long())
    m.SetSlug(dbuf.String())
    m9 := &Document{}
    m9.Decode(dbuf)
    m.SetDocument(m9)
    if (flags & (1 << 2)) != 0 {
 m10 := &WallPaperSettings{}
    m10.Decode(dbuf)
    m.SetSettings(m10) 
}

    return dbuf.err
}
// wallPaperNoFile#8af40b25 flags:# default:flags.1?true dark:flags.4?true settings:flags.2?WallPaperSettings = WallPaper;
func (m *TLWallPaperNoFile) To_WallPaper() *WallPaper {
    return &WallPaper{
        Constructor: TLConstructor_CRC32_wallPaperNoFile,
        Data2: m.Data2,
    }
}


func (m *TLWallPaperNoFile) SetDefault(v bool) { m.Data2.Default = v }
func (m *TLWallPaperNoFile) GetDefault() bool { return m.Data2.Default }

func (m *TLWallPaperNoFile) SetDark(v bool) { m.Data2.Dark = v }
func (m *TLWallPaperNoFile) GetDark() bool { return m.Data2.Dark }

func (m *TLWallPaperNoFile) SetSettings(v *WallPaperSettings) { m.Data2.Settings = v }
func (m *TLWallPaperNoFile) GetSettings() *WallPaperSettings { return m.Data2.Settings }


func NewTLWallPaperNoFile() * TLWallPaperNoFile {
    return &TLWallPaperNoFile{ Data2: &WallPaper_Data{} }
}

func (m* TLWallPaperNoFile) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_wallPaperNoFile))

    // flags
    var flags uint32 = 0
    if m.GetDefault() == true { flags |= 1 << 1 }
    if m.GetDark() == true { flags |= 1 << 4 }
    if m.GetSettings() != nil { flags |= 1 << 2 }
	x.UInt(flags)

    
    
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetSettings().Encode()) }

    return x.buf
}

func (m* TLWallPaperNoFile) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 1)) != 0 { m.SetDefault(true) }
    if (flags & (1 << 4)) != 0 { m.SetDark(true) }
    if (flags & (1 << 2)) != 0 {
 m4 := &WallPaperSettings{}
    m4.Decode(dbuf)
    m.SetSettings(m4) 
}

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputEncryptedChat <--
//  + TL_InputEncryptedChat
//

func (m *InputEncryptedChat) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputEncryptedChat:
        t := m.To_InputEncryptedChat()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputEncryptedChat) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputEncryptedChat:
        m2 := &TLInputEncryptedChat{&InputEncryptedChat_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputEncryptedChat#f141b5e1 chat_id:int access_hash:long = InputEncryptedChat;
func (m *InputEncryptedChat) To_InputEncryptedChat() *TLInputEncryptedChat {
    return &TLInputEncryptedChat{
        Data2: m.Data2,
    }
}



// inputEncryptedChat#f141b5e1 chat_id:int access_hash:long = InputEncryptedChat;
func (m *TLInputEncryptedChat) To_InputEncryptedChat() *InputEncryptedChat {
    return &InputEncryptedChat{
        Constructor: TLConstructor_CRC32_inputEncryptedChat,
        Data2: m.Data2,
    }
}


func (m *TLInputEncryptedChat) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLInputEncryptedChat) GetChatId() int32 { return m.Data2.ChatId }

func (m *TLInputEncryptedChat) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputEncryptedChat) GetAccessHash() int64 { return m.Data2.AccessHash }


func NewTLInputEncryptedChat() * TLInputEncryptedChat {
    return &TLInputEncryptedChat{ Data2: &InputEncryptedChat_Data{} }
}

func (m* TLInputEncryptedChat) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputEncryptedChat))

    x.Int(m.GetChatId())
    x.Long(m.GetAccessHash())

    return x.buf
}

func (m* TLInputEncryptedChat) Decode(dbuf *DecodeBuf) error {
    m.SetChatId(dbuf.Int())
    m.SetAccessHash(dbuf.Long())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Account_Authorizations <--
//  + TL_AccountAuthorizations
//

func (m *Account_Authorizations) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_account_authorizations:
        t := m.To_AccountAuthorizations()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Account_Authorizations) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_account_authorizations:
        m2 := &TLAccountAuthorizations{&Account_Authorizations_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// account.authorizations#1250abde authorizations:Vector<Authorization> = account.Authorizations;
func (m *Account_Authorizations) To_AccountAuthorizations() *TLAccountAuthorizations {
    return &TLAccountAuthorizations{
        Data2: m.Data2,
    }
}



// account.authorizations#1250abde authorizations:Vector<Authorization> = account.Authorizations;
func (m *TLAccountAuthorizations) To_Account_Authorizations() *Account_Authorizations {
    return &Account_Authorizations{
        Constructor: TLConstructor_CRC32_account_authorizations,
        Data2: m.Data2,
    }
}


func (m *TLAccountAuthorizations) SetAuthorizations(v []*Authorization) { m.Data2.Authorizations = v }
func (m *TLAccountAuthorizations) GetAuthorizations() []*Authorization { return m.Data2.Authorizations }


func NewTLAccountAuthorizations() * TLAccountAuthorizations {
    return &TLAccountAuthorizations{ Data2: &Account_Authorizations_Data{} }
}

func (m* TLAccountAuthorizations) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_account_authorizations))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetAuthorizations())))
for _, v := range m.GetAuthorizations() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLAccountAuthorizations) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*Authorization, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &Authorization{}
	v1[i].Decode(dbuf)
}
m.SetAuthorizations(v1)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputStickerSetItem <--
//  + TL_InputStickerSetItem
//

func (m *InputStickerSetItem) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputStickerSetItem:
        t := m.To_InputStickerSetItem()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputStickerSetItem) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputStickerSetItem:
        m2 := &TLInputStickerSetItem{&InputStickerSetItem_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputStickerSetItem#ffa0a496 flags:# document:InputDocument emoji:string mask_coords:flags.0?MaskCoords = InputStickerSetItem;
func (m *InputStickerSetItem) To_InputStickerSetItem() *TLInputStickerSetItem {
    return &TLInputStickerSetItem{
        Data2: m.Data2,
    }
}



// inputStickerSetItem#ffa0a496 flags:# document:InputDocument emoji:string mask_coords:flags.0?MaskCoords = InputStickerSetItem;
func (m *TLInputStickerSetItem) To_InputStickerSetItem() *InputStickerSetItem {
    return &InputStickerSetItem{
        Constructor: TLConstructor_CRC32_inputStickerSetItem,
        Data2: m.Data2,
    }
}


func (m *TLInputStickerSetItem) SetDocument(v *InputDocument) { m.Data2.Document = v }
func (m *TLInputStickerSetItem) GetDocument() *InputDocument { return m.Data2.Document }

func (m *TLInputStickerSetItem) SetEmoji(v string) { m.Data2.Emoji = v }
func (m *TLInputStickerSetItem) GetEmoji() string { return m.Data2.Emoji }

func (m *TLInputStickerSetItem) SetMaskCoords(v *MaskCoords) { m.Data2.MaskCoords = v }
func (m *TLInputStickerSetItem) GetMaskCoords() *MaskCoords { return m.Data2.MaskCoords }


func NewTLInputStickerSetItem() * TLInputStickerSetItem {
    return &TLInputStickerSetItem{ Data2: &InputStickerSetItem_Data{} }
}

func (m* TLInputStickerSetItem) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputStickerSetItem))

    // flags
    var flags uint32 = 0
    if m.GetMaskCoords() != nil { flags |= 1 << 0 }
	x.UInt(flags)

    x.Bytes(m.GetDocument().Encode())
    x.String(m.GetEmoji())
    if (flags & (1 << 0)) != 0 { x.Bytes(m.GetMaskCoords().Encode()) }

    return x.buf
}

func (m* TLInputStickerSetItem) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m2 := &InputDocument{}
    m2.Decode(dbuf)
    m.SetDocument(m2)
    m.SetEmoji(dbuf.String())
    if (flags & (1 << 0)) != 0 {
 m4 := &MaskCoords{}
    m4.Decode(dbuf)
    m.SetMaskCoords(m4) 
}

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputPhoneCall <--
//  + TL_InputPhoneCall
//

func (m *InputPhoneCall) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputPhoneCall:
        t := m.To_InputPhoneCall()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputPhoneCall) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputPhoneCall:
        m2 := &TLInputPhoneCall{&InputPhoneCall_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputPhoneCall#1e36fded id:long access_hash:long = InputPhoneCall;
func (m *InputPhoneCall) To_InputPhoneCall() *TLInputPhoneCall {
    return &TLInputPhoneCall{
        Data2: m.Data2,
    }
}



// inputPhoneCall#1e36fded id:long access_hash:long = InputPhoneCall;
func (m *TLInputPhoneCall) To_InputPhoneCall() *InputPhoneCall {
    return &InputPhoneCall{
        Constructor: TLConstructor_CRC32_inputPhoneCall,
        Data2: m.Data2,
    }
}


func (m *TLInputPhoneCall) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputPhoneCall) GetId() int64 { return m.Data2.Id }

func (m *TLInputPhoneCall) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputPhoneCall) GetAccessHash() int64 { return m.Data2.AccessHash }


func NewTLInputPhoneCall() * TLInputPhoneCall {
    return &TLInputPhoneCall{ Data2: &InputPhoneCall_Data{} }
}

func (m* TLInputPhoneCall) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPhoneCall))

    x.Long(m.GetId())
    x.Long(m.GetAccessHash())

    return x.buf
}

func (m* TLInputPhoneCall) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// StatsPercentValue <--
//  + TL_StatsPercentValue
//

func (m *StatsPercentValue) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_statsPercentValue:
        t := m.To_StatsPercentValue()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *StatsPercentValue) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_statsPercentValue:
        m2 := &TLStatsPercentValue{&StatsPercentValue_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// statsPercentValue#cbce2fe0 part:double total:double = StatsPercentValue;
func (m *StatsPercentValue) To_StatsPercentValue() *TLStatsPercentValue {
    return &TLStatsPercentValue{
        Data2: m.Data2,
    }
}



// statsPercentValue#cbce2fe0 part:double total:double = StatsPercentValue;
func (m *TLStatsPercentValue) To_StatsPercentValue() *StatsPercentValue {
    return &StatsPercentValue{
        Constructor: TLConstructor_CRC32_statsPercentValue,
        Data2: m.Data2,
    }
}


func (m *TLStatsPercentValue) SetPart(v float64) { m.Data2.Part = v }
func (m *TLStatsPercentValue) GetPart() float64 { return m.Data2.Part }

func (m *TLStatsPercentValue) SetTotal(v float64) { m.Data2.Total = v }
func (m *TLStatsPercentValue) GetTotal() float64 { return m.Data2.Total }


func NewTLStatsPercentValue() * TLStatsPercentValue {
    return &TLStatsPercentValue{ Data2: &StatsPercentValue_Data{} }
}

func (m* TLStatsPercentValue) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_statsPercentValue))

    x.Double(m.GetPart())
    x.Double(m.GetTotal())

    return x.buf
}

func (m* TLStatsPercentValue) Decode(dbuf *DecodeBuf) error {
    m.SetPart(dbuf.Double())
    m.SetTotal(dbuf.Double())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// PollAnswer <--
//  + TL_PollAnswer
//

func (m *PollAnswer) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_pollAnswer:
        t := m.To_PollAnswer()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *PollAnswer) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_pollAnswer:
        m2 := &TLPollAnswer{&PollAnswer_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// pollAnswer#6ca9c2e9 text:string option:bytes = PollAnswer;
func (m *PollAnswer) To_PollAnswer() *TLPollAnswer {
    return &TLPollAnswer{
        Data2: m.Data2,
    }
}



// pollAnswer#6ca9c2e9 text:string option:bytes = PollAnswer;
func (m *TLPollAnswer) To_PollAnswer() *PollAnswer {
    return &PollAnswer{
        Constructor: TLConstructor_CRC32_pollAnswer,
        Data2: m.Data2,
    }
}


func (m *TLPollAnswer) SetText(v string) { m.Data2.Text = v }
func (m *TLPollAnswer) GetText() string { return m.Data2.Text }

func (m *TLPollAnswer) SetOption(v []byte) { m.Data2.Option = v }
func (m *TLPollAnswer) GetOption() []byte { return m.Data2.Option }


func NewTLPollAnswer() * TLPollAnswer {
    return &TLPollAnswer{ Data2: &PollAnswer_Data{} }
}

func (m* TLPollAnswer) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pollAnswer))

    x.String(m.GetText())
    x.StringBytes(m.GetOption())

    return x.buf
}

func (m* TLPollAnswer) Decode(dbuf *DecodeBuf) error {
    m.SetText(dbuf.String())
    m.SetOption(dbuf.StringBytes())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// True <--
//  + TL_True
//

func (m *True) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_true:
        t := m.To_True()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *True) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_true:
        m2 := &TLTrue{&True_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// true#3fedd339 = True;
func (m *True) To_True() *TLTrue {
    return &TLTrue{
        Data2: m.Data2,
    }
}



// true#3fedd339 = True;
func (m *TLTrue) To_True() *True {
    return &True{
        Constructor: TLConstructor_CRC32_true,
        Data2: m.Data2,
    }
}



func NewTLTrue() * TLTrue {
    return &TLTrue{ Data2: &True_Data{} }
}

func (m* TLTrue) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_true))


    return x.buf
}

func (m* TLTrue) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Storage_FileType <--
//  + TL_StorageFileUnknown
//  + TL_StorageFilePartial
//  + TL_StorageFileJpeg
//  + TL_StorageFileGif
//  + TL_StorageFilePng
//  + TL_StorageFilePdf
//  + TL_StorageFileMp3
//  + TL_StorageFileMov
//  + TL_StorageFileMp4
//  + TL_StorageFileWebp
//

func (m *Storage_FileType) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_storage_fileUnknown:
        t := m.To_StorageFileUnknown()
        return t.Encode()
    case TLConstructor_CRC32_storage_filePartial:
        t := m.To_StorageFilePartial()
        return t.Encode()
    case TLConstructor_CRC32_storage_fileJpeg:
        t := m.To_StorageFileJpeg()
        return t.Encode()
    case TLConstructor_CRC32_storage_fileGif:
        t := m.To_StorageFileGif()
        return t.Encode()
    case TLConstructor_CRC32_storage_filePng:
        t := m.To_StorageFilePng()
        return t.Encode()
    case TLConstructor_CRC32_storage_filePdf:
        t := m.To_StorageFilePdf()
        return t.Encode()
    case TLConstructor_CRC32_storage_fileMp3:
        t := m.To_StorageFileMp3()
        return t.Encode()
    case TLConstructor_CRC32_storage_fileMov:
        t := m.To_StorageFileMov()
        return t.Encode()
    case TLConstructor_CRC32_storage_fileMp4:
        t := m.To_StorageFileMp4()
        return t.Encode()
    case TLConstructor_CRC32_storage_fileWebp:
        t := m.To_StorageFileWebp()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Storage_FileType) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_storage_fileUnknown:
        m2 := &TLStorageFileUnknown{&Storage_FileType_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_storage_filePartial:
        m2 := &TLStorageFilePartial{&Storage_FileType_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_storage_fileJpeg:
        m2 := &TLStorageFileJpeg{&Storage_FileType_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_storage_fileGif:
        m2 := &TLStorageFileGif{&Storage_FileType_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_storage_filePng:
        m2 := &TLStorageFilePng{&Storage_FileType_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_storage_filePdf:
        m2 := &TLStorageFilePdf{&Storage_FileType_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_storage_fileMp3:
        m2 := &TLStorageFileMp3{&Storage_FileType_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_storage_fileMov:
        m2 := &TLStorageFileMov{&Storage_FileType_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_storage_fileMp4:
        m2 := &TLStorageFileMp4{&Storage_FileType_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_storage_fileWebp:
        m2 := &TLStorageFileWebp{&Storage_FileType_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// storage.fileUnknown#aa963b05 = storage.FileType;
func (m *Storage_FileType) To_StorageFileUnknown() *TLStorageFileUnknown {
    return &TLStorageFileUnknown{
        Data2: m.Data2,
    }
}

// storage.filePartial#40bc6f52 = storage.FileType;
func (m *Storage_FileType) To_StorageFilePartial() *TLStorageFilePartial {
    return &TLStorageFilePartial{
        Data2: m.Data2,
    }
}

// storage.fileJpeg#7efe0e = storage.FileType;
func (m *Storage_FileType) To_StorageFileJpeg() *TLStorageFileJpeg {
    return &TLStorageFileJpeg{
        Data2: m.Data2,
    }
}

// storage.fileGif#cae1aadf = storage.FileType;
func (m *Storage_FileType) To_StorageFileGif() *TLStorageFileGif {
    return &TLStorageFileGif{
        Data2: m.Data2,
    }
}

// storage.filePng#a4f63c0 = storage.FileType;
func (m *Storage_FileType) To_StorageFilePng() *TLStorageFilePng {
    return &TLStorageFilePng{
        Data2: m.Data2,
    }
}

// storage.filePdf#ae1e508d = storage.FileType;
func (m *Storage_FileType) To_StorageFilePdf() *TLStorageFilePdf {
    return &TLStorageFilePdf{
        Data2: m.Data2,
    }
}

// storage.fileMp3#528a0677 = storage.FileType;
func (m *Storage_FileType) To_StorageFileMp3() *TLStorageFileMp3 {
    return &TLStorageFileMp3{
        Data2: m.Data2,
    }
}

// storage.fileMov#4b09ebbc = storage.FileType;
func (m *Storage_FileType) To_StorageFileMov() *TLStorageFileMov {
    return &TLStorageFileMov{
        Data2: m.Data2,
    }
}

// storage.fileMp4#b3cea0e4 = storage.FileType;
func (m *Storage_FileType) To_StorageFileMp4() *TLStorageFileMp4 {
    return &TLStorageFileMp4{
        Data2: m.Data2,
    }
}

// storage.fileWebp#1081464c = storage.FileType;
func (m *Storage_FileType) To_StorageFileWebp() *TLStorageFileWebp {
    return &TLStorageFileWebp{
        Data2: m.Data2,
    }
}



// storage.fileUnknown#aa963b05 = storage.FileType;
func (m *TLStorageFileUnknown) To_Storage_FileType() *Storage_FileType {
    return &Storage_FileType{
        Constructor: TLConstructor_CRC32_storage_fileUnknown,
        Data2: m.Data2,
    }
}



func NewTLStorageFileUnknown() * TLStorageFileUnknown {
    return &TLStorageFileUnknown{ Data2: &Storage_FileType_Data{} }
}

func (m* TLStorageFileUnknown) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_storage_fileUnknown))


    return x.buf
}

func (m* TLStorageFileUnknown) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// storage.filePartial#40bc6f52 = storage.FileType;
func (m *TLStorageFilePartial) To_Storage_FileType() *Storage_FileType {
    return &Storage_FileType{
        Constructor: TLConstructor_CRC32_storage_filePartial,
        Data2: m.Data2,
    }
}



func NewTLStorageFilePartial() * TLStorageFilePartial {
    return &TLStorageFilePartial{ Data2: &Storage_FileType_Data{} }
}

func (m* TLStorageFilePartial) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_storage_filePartial))


    return x.buf
}

func (m* TLStorageFilePartial) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// storage.fileJpeg#7efe0e = storage.FileType;
func (m *TLStorageFileJpeg) To_Storage_FileType() *Storage_FileType {
    return &Storage_FileType{
        Constructor: TLConstructor_CRC32_storage_fileJpeg,
        Data2: m.Data2,
    }
}



func NewTLStorageFileJpeg() * TLStorageFileJpeg {
    return &TLStorageFileJpeg{ Data2: &Storage_FileType_Data{} }
}

func (m* TLStorageFileJpeg) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_storage_fileJpeg))


    return x.buf
}

func (m* TLStorageFileJpeg) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// storage.fileGif#cae1aadf = storage.FileType;
func (m *TLStorageFileGif) To_Storage_FileType() *Storage_FileType {
    return &Storage_FileType{
        Constructor: TLConstructor_CRC32_storage_fileGif,
        Data2: m.Data2,
    }
}



func NewTLStorageFileGif() * TLStorageFileGif {
    return &TLStorageFileGif{ Data2: &Storage_FileType_Data{} }
}

func (m* TLStorageFileGif) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_storage_fileGif))


    return x.buf
}

func (m* TLStorageFileGif) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// storage.filePng#a4f63c0 = storage.FileType;
func (m *TLStorageFilePng) To_Storage_FileType() *Storage_FileType {
    return &Storage_FileType{
        Constructor: TLConstructor_CRC32_storage_filePng,
        Data2: m.Data2,
    }
}



func NewTLStorageFilePng() * TLStorageFilePng {
    return &TLStorageFilePng{ Data2: &Storage_FileType_Data{} }
}

func (m* TLStorageFilePng) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_storage_filePng))


    return x.buf
}

func (m* TLStorageFilePng) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// storage.filePdf#ae1e508d = storage.FileType;
func (m *TLStorageFilePdf) To_Storage_FileType() *Storage_FileType {
    return &Storage_FileType{
        Constructor: TLConstructor_CRC32_storage_filePdf,
        Data2: m.Data2,
    }
}



func NewTLStorageFilePdf() * TLStorageFilePdf {
    return &TLStorageFilePdf{ Data2: &Storage_FileType_Data{} }
}

func (m* TLStorageFilePdf) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_storage_filePdf))


    return x.buf
}

func (m* TLStorageFilePdf) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// storage.fileMp3#528a0677 = storage.FileType;
func (m *TLStorageFileMp3) To_Storage_FileType() *Storage_FileType {
    return &Storage_FileType{
        Constructor: TLConstructor_CRC32_storage_fileMp3,
        Data2: m.Data2,
    }
}



func NewTLStorageFileMp3() * TLStorageFileMp3 {
    return &TLStorageFileMp3{ Data2: &Storage_FileType_Data{} }
}

func (m* TLStorageFileMp3) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_storage_fileMp3))


    return x.buf
}

func (m* TLStorageFileMp3) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// storage.fileMov#4b09ebbc = storage.FileType;
func (m *TLStorageFileMov) To_Storage_FileType() *Storage_FileType {
    return &Storage_FileType{
        Constructor: TLConstructor_CRC32_storage_fileMov,
        Data2: m.Data2,
    }
}



func NewTLStorageFileMov() * TLStorageFileMov {
    return &TLStorageFileMov{ Data2: &Storage_FileType_Data{} }
}

func (m* TLStorageFileMov) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_storage_fileMov))


    return x.buf
}

func (m* TLStorageFileMov) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// storage.fileMp4#b3cea0e4 = storage.FileType;
func (m *TLStorageFileMp4) To_Storage_FileType() *Storage_FileType {
    return &Storage_FileType{
        Constructor: TLConstructor_CRC32_storage_fileMp4,
        Data2: m.Data2,
    }
}



func NewTLStorageFileMp4() * TLStorageFileMp4 {
    return &TLStorageFileMp4{ Data2: &Storage_FileType_Data{} }
}

func (m* TLStorageFileMp4) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_storage_fileMp4))


    return x.buf
}

func (m* TLStorageFileMp4) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// storage.fileWebp#1081464c = storage.FileType;
func (m *TLStorageFileWebp) To_Storage_FileType() *Storage_FileType {
    return &Storage_FileType{
        Constructor: TLConstructor_CRC32_storage_fileWebp,
        Data2: m.Data2,
    }
}



func NewTLStorageFileWebp() * TLStorageFileWebp {
    return &TLStorageFileWebp{ Data2: &Storage_FileType_Data{} }
}

func (m* TLStorageFileWebp) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_storage_fileWebp))


    return x.buf
}

func (m* TLStorageFileWebp) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// PeerNotifyEvents <--
//  + TL_PeerNotifyEventsEmpty
//  + TL_PeerNotifyEventsAll
//

func (m *PeerNotifyEvents) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_peerNotifyEventsEmpty:
        t := m.To_PeerNotifyEventsEmpty()
        return t.Encode()
    case TLConstructor_CRC32_peerNotifyEventsAll:
        t := m.To_PeerNotifyEventsAll()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *PeerNotifyEvents) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_peerNotifyEventsEmpty:
        m2 := &TLPeerNotifyEventsEmpty{&PeerNotifyEvents_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_peerNotifyEventsAll:
        m2 := &TLPeerNotifyEventsAll{&PeerNotifyEvents_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// peerNotifyEventsEmpty#add53cb3 = PeerNotifyEvents;
func (m *PeerNotifyEvents) To_PeerNotifyEventsEmpty() *TLPeerNotifyEventsEmpty {
    return &TLPeerNotifyEventsEmpty{
        Data2: m.Data2,
    }
}

// peerNotifyEventsAll#6d1ded88 = PeerNotifyEvents;
func (m *PeerNotifyEvents) To_PeerNotifyEventsAll() *TLPeerNotifyEventsAll {
    return &TLPeerNotifyEventsAll{
        Data2: m.Data2,
    }
}



// peerNotifyEventsEmpty#add53cb3 = PeerNotifyEvents;
func (m *TLPeerNotifyEventsEmpty) To_PeerNotifyEvents() *PeerNotifyEvents {
    return &PeerNotifyEvents{
        Constructor: TLConstructor_CRC32_peerNotifyEventsEmpty,
        Data2: m.Data2,
    }
}



func NewTLPeerNotifyEventsEmpty() * TLPeerNotifyEventsEmpty {
    return &TLPeerNotifyEventsEmpty{ Data2: &PeerNotifyEvents_Data{} }
}

func (m* TLPeerNotifyEventsEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_peerNotifyEventsEmpty))


    return x.buf
}

func (m* TLPeerNotifyEventsEmpty) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// peerNotifyEventsAll#6d1ded88 = PeerNotifyEvents;
func (m *TLPeerNotifyEventsAll) To_PeerNotifyEvents() *PeerNotifyEvents {
    return &PeerNotifyEvents{
        Constructor: TLConstructor_CRC32_peerNotifyEventsAll,
        Data2: m.Data2,
    }
}



func NewTLPeerNotifyEventsAll() * TLPeerNotifyEventsAll {
    return &TLPeerNotifyEventsAll{ Data2: &PeerNotifyEvents_Data{} }
}

func (m* TLPeerNotifyEventsAll) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_peerNotifyEventsAll))


    return x.buf
}

func (m* TLPeerNotifyEventsAll) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// ChannelParticipant <--
//  + TL_ChannelParticipant
//  + TL_ChannelParticipantSelf
//  + TL_ChannelParticipantCreator
//  + TL_ChannelParticipantAdmin
//  + TL_ChannelParticipantBanned
//  + TL_ChannelParticipantCreator114
//  + TL_ChannelParticipantAdmin114
//  + TL_ChannelParticipantBanned114
//

func (m *ChannelParticipant) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_channelParticipant:
        t := m.To_ChannelParticipant()
        return t.Encode()
    case TLConstructor_CRC32_channelParticipantSelf:
        t := m.To_ChannelParticipantSelf()
        return t.Encode()
    case TLConstructor_CRC32_channelParticipantCreator:
        t := m.To_ChannelParticipantCreator()
        return t.Encode()
    case TLConstructor_CRC32_channelParticipantAdmin:
        t := m.To_ChannelParticipantAdmin()
        return t.Encode()
    case TLConstructor_CRC32_channelParticipantBanned:
        t := m.To_ChannelParticipantBanned()
        return t.Encode()
    case TLConstructor_CRC32_channelParticipantCreator114:
        t := m.To_ChannelParticipantCreator114()
        return t.Encode()
    case TLConstructor_CRC32_channelParticipantAdmin114:
        t := m.To_ChannelParticipantAdmin114()
        return t.Encode()
    case TLConstructor_CRC32_channelParticipantBanned114:
        t := m.To_ChannelParticipantBanned114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *ChannelParticipant) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_channelParticipant:
        m2 := &TLChannelParticipant{&ChannelParticipant_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelParticipantSelf:
        m2 := &TLChannelParticipantSelf{&ChannelParticipant_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelParticipantCreator:
        m2 := &TLChannelParticipantCreator{&ChannelParticipant_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelParticipantAdmin:
        m2 := &TLChannelParticipantAdmin{&ChannelParticipant_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelParticipantBanned:
        m2 := &TLChannelParticipantBanned{&ChannelParticipant_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelParticipantCreator114:
        m2 := &TLChannelParticipantCreator114{&ChannelParticipant_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelParticipantAdmin114:
        m2 := &TLChannelParticipantAdmin114{&ChannelParticipant_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelParticipantBanned114:
        m2 := &TLChannelParticipantBanned114{&ChannelParticipant_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// channelParticipant#15ebac1d user_id:int date:int = ChannelParticipant;
func (m *ChannelParticipant) To_ChannelParticipant() *TLChannelParticipant {
    return &TLChannelParticipant{
        Data2: m.Data2,
    }
}

// channelParticipantSelf#a3289a6d user_id:int inviter_id:int date:int = ChannelParticipant;
func (m *ChannelParticipant) To_ChannelParticipantSelf() *TLChannelParticipantSelf {
    return &TLChannelParticipantSelf{
        Data2: m.Data2,
    }
}

// channelParticipantCreator#e3e2e1f9 user_id:int = ChannelParticipant;
func (m *ChannelParticipant) To_ChannelParticipantCreator() *TLChannelParticipantCreator {
    return &TLChannelParticipantCreator{
        Data2: m.Data2,
    }
}

// channelParticipantAdmin#a82fa898 flags:# can_edit:flags.0?true user_id:int inviter_id:int promoted_by:int date:int admin_rights:ChannelAdminRights = ChannelParticipant;
func (m *ChannelParticipant) To_ChannelParticipantAdmin() *TLChannelParticipantAdmin {
    return &TLChannelParticipantAdmin{
        Data2: m.Data2,
    }
}

// channelParticipantBanned#222c1886 flags:# left:flags.0?true user_id:int kicked_by:int date:int banned_rights:ChannelBannedRights = ChannelParticipant;
func (m *ChannelParticipant) To_ChannelParticipantBanned() *TLChannelParticipantBanned {
    return &TLChannelParticipantBanned{
        Data2: m.Data2,
    }
}

// channelParticipantCreator#808d15a4 flags:# user_id:int rank:flags.0?string = ChannelParticipant;
func (m *ChannelParticipant) To_ChannelParticipantCreator114() *TLChannelParticipantCreator114 {
    return &TLChannelParticipantCreator114{
        Data2: m.Data2,
    }
}

// channelParticipantAdmin#ccbebbaf flags:# can_edit:flags.0?true self:flags.1?true user_id:int inviter_id:flags.1?int promoted_by:int date:int admin_rights:ChatAdminRights rank:flags.2?string = ChannelParticipant;
func (m *ChannelParticipant) To_ChannelParticipantAdmin114() *TLChannelParticipantAdmin114 {
    return &TLChannelParticipantAdmin114{
        Data2: m.Data2,
    }
}

// channelParticipantBanned#1c0facaf flags:# left:flags.0?true user_id:int kicked_by:int date:int banned_rights:ChatBannedRights = ChannelParticipant;
func (m *ChannelParticipant) To_ChannelParticipantBanned114() *TLChannelParticipantBanned114 {
    return &TLChannelParticipantBanned114{
        Data2: m.Data2,
    }
}



// channelParticipant#15ebac1d user_id:int date:int = ChannelParticipant;
func (m *TLChannelParticipant) To_ChannelParticipant() *ChannelParticipant {
    return &ChannelParticipant{
        Constructor: TLConstructor_CRC32_channelParticipant,
        Data2: m.Data2,
    }
}


func (m *TLChannelParticipant) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLChannelParticipant) GetUserId() int32 { return m.Data2.UserId }

func (m *TLChannelParticipant) SetDate(v int32) { m.Data2.Date = v }
func (m *TLChannelParticipant) GetDate() int32 { return m.Data2.Date }


func NewTLChannelParticipant() * TLChannelParticipant {
    return &TLChannelParticipant{ Data2: &ChannelParticipant_Data{} }
}

func (m* TLChannelParticipant) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelParticipant))

    x.Int(m.GetUserId())
    x.Int(m.GetDate())

    return x.buf
}

func (m* TLChannelParticipant) Decode(dbuf *DecodeBuf) error {
    m.SetUserId(dbuf.Int())
    m.SetDate(dbuf.Int())

    return dbuf.err
}
// channelParticipantSelf#a3289a6d user_id:int inviter_id:int date:int = ChannelParticipant;
func (m *TLChannelParticipantSelf) To_ChannelParticipant() *ChannelParticipant {
    return &ChannelParticipant{
        Constructor: TLConstructor_CRC32_channelParticipantSelf,
        Data2: m.Data2,
    }
}


func (m *TLChannelParticipantSelf) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLChannelParticipantSelf) GetUserId() int32 { return m.Data2.UserId }

func (m *TLChannelParticipantSelf) SetInviterId(v int32) { m.Data2.InviterId = v }
func (m *TLChannelParticipantSelf) GetInviterId() int32 { return m.Data2.InviterId }

func (m *TLChannelParticipantSelf) SetDate(v int32) { m.Data2.Date = v }
func (m *TLChannelParticipantSelf) GetDate() int32 { return m.Data2.Date }


func NewTLChannelParticipantSelf() * TLChannelParticipantSelf {
    return &TLChannelParticipantSelf{ Data2: &ChannelParticipant_Data{} }
}

func (m* TLChannelParticipantSelf) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelParticipantSelf))

    x.Int(m.GetUserId())
    x.Int(m.GetInviterId())
    x.Int(m.GetDate())

    return x.buf
}

func (m* TLChannelParticipantSelf) Decode(dbuf *DecodeBuf) error {
    m.SetUserId(dbuf.Int())
    m.SetInviterId(dbuf.Int())
    m.SetDate(dbuf.Int())

    return dbuf.err
}
// channelParticipantCreator#e3e2e1f9 user_id:int = ChannelParticipant;
func (m *TLChannelParticipantCreator) To_ChannelParticipant() *ChannelParticipant {
    return &ChannelParticipant{
        Constructor: TLConstructor_CRC32_channelParticipantCreator,
        Data2: m.Data2,
    }
}


func (m *TLChannelParticipantCreator) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLChannelParticipantCreator) GetUserId() int32 { return m.Data2.UserId }


func NewTLChannelParticipantCreator() * TLChannelParticipantCreator {
    return &TLChannelParticipantCreator{ Data2: &ChannelParticipant_Data{} }
}

func (m* TLChannelParticipantCreator) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelParticipantCreator))

    x.Int(m.GetUserId())

    return x.buf
}

func (m* TLChannelParticipantCreator) Decode(dbuf *DecodeBuf) error {
    m.SetUserId(dbuf.Int())

    return dbuf.err
}
// channelParticipantAdmin#a82fa898 flags:# can_edit:flags.0?true user_id:int inviter_id:int promoted_by:int date:int admin_rights:ChannelAdminRights = ChannelParticipant;
func (m *TLChannelParticipantAdmin) To_ChannelParticipant() *ChannelParticipant {
    return &ChannelParticipant{
        Constructor: TLConstructor_CRC32_channelParticipantAdmin,
        Data2: m.Data2,
    }
}


func (m *TLChannelParticipantAdmin) SetCanEdit(v bool) { m.Data2.CanEdit = v }
func (m *TLChannelParticipantAdmin) GetCanEdit() bool { return m.Data2.CanEdit }

func (m *TLChannelParticipantAdmin) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLChannelParticipantAdmin) GetUserId() int32 { return m.Data2.UserId }

func (m *TLChannelParticipantAdmin) SetInviterId(v int32) { m.Data2.InviterId = v }
func (m *TLChannelParticipantAdmin) GetInviterId() int32 { return m.Data2.InviterId }

func (m *TLChannelParticipantAdmin) SetPromotedBy(v int32) { m.Data2.PromotedBy = v }
func (m *TLChannelParticipantAdmin) GetPromotedBy() int32 { return m.Data2.PromotedBy }

func (m *TLChannelParticipantAdmin) SetDate(v int32) { m.Data2.Date = v }
func (m *TLChannelParticipantAdmin) GetDate() int32 { return m.Data2.Date }

func (m *TLChannelParticipantAdmin) SetAdminRights(v *ChannelAdminRights) { m.Data2.AdminRights_6 = v }
func (m *TLChannelParticipantAdmin) GetAdminRights() *ChannelAdminRights { return m.Data2.AdminRights_6 }


func NewTLChannelParticipantAdmin() * TLChannelParticipantAdmin {
    return &TLChannelParticipantAdmin{ Data2: &ChannelParticipant_Data{} }
}

func (m* TLChannelParticipantAdmin) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelParticipantAdmin))

    // flags
    var flags uint32 = 0
    if m.GetCanEdit() == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Int(m.GetUserId())
    x.Int(m.GetInviterId())
    x.Int(m.GetPromotedBy())
    x.Int(m.GetDate())
    x.Bytes(m.GetAdminRights().Encode())

    return x.buf
}

func (m* TLChannelParticipantAdmin) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetCanEdit(true) }
    m.SetUserId(dbuf.Int())
    m.SetInviterId(dbuf.Int())
    m.SetPromotedBy(dbuf.Int())
    m.SetDate(dbuf.Int())
    m7 := &ChannelAdminRights{}
    m7.Decode(dbuf)
    m.SetAdminRights(m7)

    return dbuf.err
}
// channelParticipantBanned#222c1886 flags:# left:flags.0?true user_id:int kicked_by:int date:int banned_rights:ChannelBannedRights = ChannelParticipant;
func (m *TLChannelParticipantBanned) To_ChannelParticipant() *ChannelParticipant {
    return &ChannelParticipant{
        Constructor: TLConstructor_CRC32_channelParticipantBanned,
        Data2: m.Data2,
    }
}


func (m *TLChannelParticipantBanned) SetLeft(v bool) { m.Data2.Left = v }
func (m *TLChannelParticipantBanned) GetLeft() bool { return m.Data2.Left }

func (m *TLChannelParticipantBanned) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLChannelParticipantBanned) GetUserId() int32 { return m.Data2.UserId }

func (m *TLChannelParticipantBanned) SetKickedBy(v int32) { m.Data2.KickedBy = v }
func (m *TLChannelParticipantBanned) GetKickedBy() int32 { return m.Data2.KickedBy }

func (m *TLChannelParticipantBanned) SetDate(v int32) { m.Data2.Date = v }
func (m *TLChannelParticipantBanned) GetDate() int32 { return m.Data2.Date }

func (m *TLChannelParticipantBanned) SetBannedRights(v *ChannelBannedRights) { m.Data2.BannedRights_9 = v }
func (m *TLChannelParticipantBanned) GetBannedRights() *ChannelBannedRights { return m.Data2.BannedRights_9 }


func NewTLChannelParticipantBanned() * TLChannelParticipantBanned {
    return &TLChannelParticipantBanned{ Data2: &ChannelParticipant_Data{} }
}

func (m* TLChannelParticipantBanned) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelParticipantBanned))

    // flags
    var flags uint32 = 0
    if m.GetLeft() == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Int(m.GetUserId())
    x.Int(m.GetKickedBy())
    x.Int(m.GetDate())
    x.Bytes(m.GetBannedRights().Encode())

    return x.buf
}

func (m* TLChannelParticipantBanned) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetLeft(true) }
    m.SetUserId(dbuf.Int())
    m.SetKickedBy(dbuf.Int())
    m.SetDate(dbuf.Int())
    m6 := &ChannelBannedRights{}
    m6.Decode(dbuf)
    m.SetBannedRights(m6)

    return dbuf.err
}
// channelParticipantCreator#808d15a4 flags:# user_id:int rank:flags.0?string = ChannelParticipant;
func (m *TLChannelParticipantCreator114) To_ChannelParticipant() *ChannelParticipant {
    return &ChannelParticipant{
        Constructor: TLConstructor_CRC32_channelParticipantCreator114,
        Data2: m.Data2,
    }
}


func (m *TLChannelParticipantCreator114) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLChannelParticipantCreator114) GetUserId() int32 { return m.Data2.UserId }

func (m *TLChannelParticipantCreator114) SetRank(v string) { m.Data2.Rank = v }
func (m *TLChannelParticipantCreator114) GetRank() string { return m.Data2.Rank }


func NewTLChannelParticipantCreator114() * TLChannelParticipantCreator114 {
    return &TLChannelParticipantCreator114{ Data2: &ChannelParticipant_Data{} }
}

func (m* TLChannelParticipantCreator114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelParticipantCreator114))

    // flags
    var flags uint32 = 0
    if m.GetRank() != "" { flags |= 1 << 0 }
	x.UInt(flags)

    x.Int(m.GetUserId())
    if (flags & (1 << 0)) != 0 { x.String(m.GetRank()) }

    return x.buf
}

func (m* TLChannelParticipantCreator114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetUserId(dbuf.Int())
    if (flags & (1 << 0)) != 0 { m.SetRank(dbuf.String()) }

    return dbuf.err
}
// channelParticipantAdmin#ccbebbaf flags:# can_edit:flags.0?true self:flags.1?true user_id:int inviter_id:flags.1?int promoted_by:int date:int admin_rights:ChatAdminRights rank:flags.2?string = ChannelParticipant;
func (m *TLChannelParticipantAdmin114) To_ChannelParticipant() *ChannelParticipant {
    return &ChannelParticipant{
        Constructor: TLConstructor_CRC32_channelParticipantAdmin114,
        Data2: m.Data2,
    }
}


func (m *TLChannelParticipantAdmin114) SetCanEdit(v bool) { m.Data2.CanEdit = v }
func (m *TLChannelParticipantAdmin114) GetCanEdit() bool { return m.Data2.CanEdit }

func (m *TLChannelParticipantAdmin114) SetSelf(v bool) { m.Data2.Self = v }
func (m *TLChannelParticipantAdmin114) GetSelf() bool { return m.Data2.Self }

func (m *TLChannelParticipantAdmin114) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLChannelParticipantAdmin114) GetUserId() int32 { return m.Data2.UserId }

func (m *TLChannelParticipantAdmin114) SetInviterId(v int32) { m.Data2.InviterId = v }
func (m *TLChannelParticipantAdmin114) GetInviterId() int32 { return m.Data2.InviterId }

func (m *TLChannelParticipantAdmin114) SetPromotedBy(v int32) { m.Data2.PromotedBy = v }
func (m *TLChannelParticipantAdmin114) GetPromotedBy() int32 { return m.Data2.PromotedBy }

func (m *TLChannelParticipantAdmin114) SetDate(v int32) { m.Data2.Date = v }
func (m *TLChannelParticipantAdmin114) GetDate() int32 { return m.Data2.Date }

func (m *TLChannelParticipantAdmin114) SetAdminRights(v *ChatAdminRights) { m.Data2.AdminRights_12 = v }
func (m *TLChannelParticipantAdmin114) GetAdminRights() *ChatAdminRights { return m.Data2.AdminRights_12 }

func (m *TLChannelParticipantAdmin114) SetRank(v string) { m.Data2.Rank = v }
func (m *TLChannelParticipantAdmin114) GetRank() string { return m.Data2.Rank }


func NewTLChannelParticipantAdmin114() * TLChannelParticipantAdmin114 {
    return &TLChannelParticipantAdmin114{ Data2: &ChannelParticipant_Data{} }
}

func (m* TLChannelParticipantAdmin114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelParticipantAdmin114))

    // flags
    var flags uint32 = 0
    if m.GetCanEdit() == true { flags |= 1 << 0 }
    if m.GetSelf() == true { flags |= 1 << 1 }
    if m.GetInviterId() != 0 { flags |= 1 << 1 }
    if m.GetRank() != "" { flags |= 1 << 2 }
	x.UInt(flags)

    
    
    x.Int(m.GetUserId())
    if (flags & (1 << 1)) != 0 { x.Int(m.GetInviterId()) }
    x.Int(m.GetPromotedBy())
    x.Int(m.GetDate())
    x.Bytes(m.GetAdminRights().Encode())
    if (flags & (1 << 2)) != 0 { x.String(m.GetRank()) }

    return x.buf
}

func (m* TLChannelParticipantAdmin114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetCanEdit(true) }
    if (flags & (1 << 1)) != 0 { m.SetSelf(true) }
    m.SetUserId(dbuf.Int())
    if (flags & (1 << 1)) != 0 { m.SetInviterId(dbuf.Int()) }
    m.SetPromotedBy(dbuf.Int())
    m.SetDate(dbuf.Int())
    m8 := &ChatAdminRights{}
    m8.Decode(dbuf)
    m.SetAdminRights(m8)
    if (flags & (1 << 2)) != 0 { m.SetRank(dbuf.String()) }

    return dbuf.err
}
// channelParticipantBanned#1c0facaf flags:# left:flags.0?true user_id:int kicked_by:int date:int banned_rights:ChatBannedRights = ChannelParticipant;
func (m *TLChannelParticipantBanned114) To_ChannelParticipant() *ChannelParticipant {
    return &ChannelParticipant{
        Constructor: TLConstructor_CRC32_channelParticipantBanned114,
        Data2: m.Data2,
    }
}


func (m *TLChannelParticipantBanned114) SetLeft(v bool) { m.Data2.Left = v }
func (m *TLChannelParticipantBanned114) GetLeft() bool { return m.Data2.Left }

func (m *TLChannelParticipantBanned114) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLChannelParticipantBanned114) GetUserId() int32 { return m.Data2.UserId }

func (m *TLChannelParticipantBanned114) SetKickedBy(v int32) { m.Data2.KickedBy = v }
func (m *TLChannelParticipantBanned114) GetKickedBy() int32 { return m.Data2.KickedBy }

func (m *TLChannelParticipantBanned114) SetDate(v int32) { m.Data2.Date = v }
func (m *TLChannelParticipantBanned114) GetDate() int32 { return m.Data2.Date }

func (m *TLChannelParticipantBanned114) SetBannedRights(v *ChatBannedRights) { m.Data2.BannedRights_13 = v }
func (m *TLChannelParticipantBanned114) GetBannedRights() *ChatBannedRights { return m.Data2.BannedRights_13 }


func NewTLChannelParticipantBanned114() * TLChannelParticipantBanned114 {
    return &TLChannelParticipantBanned114{ Data2: &ChannelParticipant_Data{} }
}

func (m* TLChannelParticipantBanned114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelParticipantBanned114))

    // flags
    var flags uint32 = 0
    if m.GetLeft() == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Int(m.GetUserId())
    x.Int(m.GetKickedBy())
    x.Int(m.GetDate())
    x.Bytes(m.GetBannedRights().Encode())

    return x.buf
}

func (m* TLChannelParticipantBanned114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetLeft(true) }
    m.SetUserId(dbuf.Int())
    m.SetKickedBy(dbuf.Int())
    m.SetDate(dbuf.Int())
    m6 := &ChatBannedRights{}
    m6.Decode(dbuf)
    m.SetBannedRights(m6)

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// BotInlineMessage <--
//  + TL_BotInlineMessageMediaAuto
//  + TL_BotInlineMessageText
//  + TL_BotInlineMessageMediaGeo
//  + TL_BotInlineMessageMediaVenue
//  + TL_BotInlineMessageMediaContact
//  + TL_BotInlineMessageMediaAuto114
//  + TL_BotInlineMessageMediaGeo114
//  + TL_BotInlineMessageMediaVenue114
//  + TL_BotInlineMessageMediaContact114
//

func (m *BotInlineMessage) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_botInlineMessageMediaAuto:
        t := m.To_BotInlineMessageMediaAuto()
        return t.Encode()
    case TLConstructor_CRC32_botInlineMessageText:
        t := m.To_BotInlineMessageText()
        return t.Encode()
    case TLConstructor_CRC32_botInlineMessageMediaGeo:
        t := m.To_BotInlineMessageMediaGeo()
        return t.Encode()
    case TLConstructor_CRC32_botInlineMessageMediaVenue:
        t := m.To_BotInlineMessageMediaVenue()
        return t.Encode()
    case TLConstructor_CRC32_botInlineMessageMediaContact:
        t := m.To_BotInlineMessageMediaContact()
        return t.Encode()
    case TLConstructor_CRC32_botInlineMessageMediaAuto114:
        t := m.To_BotInlineMessageMediaAuto114()
        return t.Encode()
    case TLConstructor_CRC32_botInlineMessageMediaGeo114:
        t := m.To_BotInlineMessageMediaGeo114()
        return t.Encode()
    case TLConstructor_CRC32_botInlineMessageMediaVenue114:
        t := m.To_BotInlineMessageMediaVenue114()
        return t.Encode()
    case TLConstructor_CRC32_botInlineMessageMediaContact114:
        t := m.To_BotInlineMessageMediaContact114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *BotInlineMessage) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_botInlineMessageMediaAuto:
        m2 := &TLBotInlineMessageMediaAuto{&BotInlineMessage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_botInlineMessageText:
        m2 := &TLBotInlineMessageText{&BotInlineMessage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_botInlineMessageMediaGeo:
        m2 := &TLBotInlineMessageMediaGeo{&BotInlineMessage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_botInlineMessageMediaVenue:
        m2 := &TLBotInlineMessageMediaVenue{&BotInlineMessage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_botInlineMessageMediaContact:
        m2 := &TLBotInlineMessageMediaContact{&BotInlineMessage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_botInlineMessageMediaAuto114:
        m2 := &TLBotInlineMessageMediaAuto114{&BotInlineMessage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_botInlineMessageMediaGeo114:
        m2 := &TLBotInlineMessageMediaGeo114{&BotInlineMessage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_botInlineMessageMediaVenue114:
        m2 := &TLBotInlineMessageMediaVenue114{&BotInlineMessage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_botInlineMessageMediaContact114:
        m2 := &TLBotInlineMessageMediaContact114{&BotInlineMessage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// botInlineMessageMediaAuto#a74b15b flags:# caption:string reply_markup:flags.2?ReplyMarkup = BotInlineMessage;
func (m *BotInlineMessage) To_BotInlineMessageMediaAuto() *TLBotInlineMessageMediaAuto {
    return &TLBotInlineMessageMediaAuto{
        Data2: m.Data2,
    }
}

// botInlineMessageText#8c7f65e2 flags:# no_webpage:flags.0?true message:string entities:flags.1?Vector<MessageEntity> reply_markup:flags.2?ReplyMarkup = BotInlineMessage;
func (m *BotInlineMessage) To_BotInlineMessageText() *TLBotInlineMessageText {
    return &TLBotInlineMessageText{
        Data2: m.Data2,
    }
}

// botInlineMessageMediaGeo#3a8fd8b8 flags:# geo:GeoPoint reply_markup:flags.2?ReplyMarkup = BotInlineMessage;
func (m *BotInlineMessage) To_BotInlineMessageMediaGeo() *TLBotInlineMessageMediaGeo {
    return &TLBotInlineMessageMediaGeo{
        Data2: m.Data2,
    }
}

// botInlineMessageMediaVenue#4366232e flags:# geo:GeoPoint title:string address:string provider:string venue_id:string reply_markup:flags.2?ReplyMarkup = BotInlineMessage;
func (m *BotInlineMessage) To_BotInlineMessageMediaVenue() *TLBotInlineMessageMediaVenue {
    return &TLBotInlineMessageMediaVenue{
        Data2: m.Data2,
    }
}

// botInlineMessageMediaContact#35edb4d4 flags:# phone_number:string first_name:string last_name:string reply_markup:flags.2?ReplyMarkup = BotInlineMessage;
func (m *BotInlineMessage) To_BotInlineMessageMediaContact() *TLBotInlineMessageMediaContact {
    return &TLBotInlineMessageMediaContact{
        Data2: m.Data2,
    }
}

// botInlineMessageMediaAuto#764cf810 flags:# message:string entities:flags.1?Vector<MessageEntity> reply_markup:flags.2?ReplyMarkup = BotInlineMessage;
func (m *BotInlineMessage) To_BotInlineMessageMediaAuto114() *TLBotInlineMessageMediaAuto114 {
    return &TLBotInlineMessageMediaAuto114{
        Data2: m.Data2,
    }
}

// botInlineMessageMediaGeo#b722de65 flags:# geo:GeoPoint period:int reply_markup:flags.2?ReplyMarkup = BotInlineMessage;
func (m *BotInlineMessage) To_BotInlineMessageMediaGeo114() *TLBotInlineMessageMediaGeo114 {
    return &TLBotInlineMessageMediaGeo114{
        Data2: m.Data2,
    }
}

// botInlineMessageMediaVenue#8a86659c flags:# geo:GeoPoint title:string address:string provider:string venue_id:string venue_type:string reply_markup:flags.2?ReplyMarkup = BotInlineMessage;
func (m *BotInlineMessage) To_BotInlineMessageMediaVenue114() *TLBotInlineMessageMediaVenue114 {
    return &TLBotInlineMessageMediaVenue114{
        Data2: m.Data2,
    }
}

// botInlineMessageMediaContact#18d1cdc2 flags:# phone_number:string first_name:string last_name:string vcard:string reply_markup:flags.2?ReplyMarkup = BotInlineMessage;
func (m *BotInlineMessage) To_BotInlineMessageMediaContact114() *TLBotInlineMessageMediaContact114 {
    return &TLBotInlineMessageMediaContact114{
        Data2: m.Data2,
    }
}



// botInlineMessageMediaAuto#a74b15b flags:# caption:string reply_markup:flags.2?ReplyMarkup = BotInlineMessage;
func (m *TLBotInlineMessageMediaAuto) To_BotInlineMessage() *BotInlineMessage {
    return &BotInlineMessage{
        Constructor: TLConstructor_CRC32_botInlineMessageMediaAuto,
        Data2: m.Data2,
    }
}


func (m *TLBotInlineMessageMediaAuto) SetCaption(v string) { m.Data2.Caption = v }
func (m *TLBotInlineMessageMediaAuto) GetCaption() string { return m.Data2.Caption }

func (m *TLBotInlineMessageMediaAuto) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLBotInlineMessageMediaAuto) GetReplyMarkup() *ReplyMarkup { return m.Data2.ReplyMarkup }


func NewTLBotInlineMessageMediaAuto() * TLBotInlineMessageMediaAuto {
    return &TLBotInlineMessageMediaAuto{ Data2: &BotInlineMessage_Data{} }
}

func (m* TLBotInlineMessageMediaAuto) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_botInlineMessageMediaAuto))

    // flags
    var flags uint32 = 0
    if m.GetReplyMarkup() != nil { flags |= 1 << 2 }
	x.UInt(flags)

    x.String(m.GetCaption())
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetReplyMarkup().Encode()) }

    return x.buf
}

func (m* TLBotInlineMessageMediaAuto) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetCaption(dbuf.String())
    if (flags & (1 << 2)) != 0 {
 m3 := &ReplyMarkup{}
    m3.Decode(dbuf)
    m.SetReplyMarkup(m3) 
}

    return dbuf.err
}
// botInlineMessageText#8c7f65e2 flags:# no_webpage:flags.0?true message:string entities:flags.1?Vector<MessageEntity> reply_markup:flags.2?ReplyMarkup = BotInlineMessage;
func (m *TLBotInlineMessageText) To_BotInlineMessage() *BotInlineMessage {
    return &BotInlineMessage{
        Constructor: TLConstructor_CRC32_botInlineMessageText,
        Data2: m.Data2,
    }
}


func (m *TLBotInlineMessageText) SetNoWebpage(v bool) { m.Data2.NoWebpage = v }
func (m *TLBotInlineMessageText) GetNoWebpage() bool { return m.Data2.NoWebpage }

func (m *TLBotInlineMessageText) SetMessage(v string) { m.Data2.Message = v }
func (m *TLBotInlineMessageText) GetMessage() string { return m.Data2.Message }

func (m *TLBotInlineMessageText) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLBotInlineMessageText) GetEntities() []*MessageEntity { return m.Data2.Entities }

func (m *TLBotInlineMessageText) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLBotInlineMessageText) GetReplyMarkup() *ReplyMarkup { return m.Data2.ReplyMarkup }


func NewTLBotInlineMessageText() * TLBotInlineMessageText {
    return &TLBotInlineMessageText{ Data2: &BotInlineMessage_Data{} }
}

func (m* TLBotInlineMessageText) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_botInlineMessageText))

    // flags
    var flags uint32 = 0
    if m.GetNoWebpage() == true { flags |= 1 << 0 }
    if m.GetEntities() != nil { flags |= 1 << 1 }
    if m.GetReplyMarkup() != nil { flags |= 1 << 2 }
	x.UInt(flags)

    
    x.String(m.GetMessage())
    if (flags & (1 << 1)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetEntities())))
for _, v := range m.GetEntities() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetReplyMarkup().Encode()) }

    return x.buf
}

func (m* TLBotInlineMessageText) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetNoWebpage(true) }
    m.SetMessage(dbuf.String())
    if (flags & (1 << 1)) != 0 {
 c4 := dbuf.Int()
if c4 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
	return dbuf.err
}
l4 := dbuf.Int()
v4 := make([]*MessageEntity, l4)
for i := int32(0); i < l4; i++ {
	v4[i] = &MessageEntity{}
	v4[i].Decode(dbuf)
}
m.SetEntities(v4)
 
}
    if (flags & (1 << 2)) != 0 {
 m5 := &ReplyMarkup{}
    m5.Decode(dbuf)
    m.SetReplyMarkup(m5) 
}

    return dbuf.err
}
// botInlineMessageMediaGeo#3a8fd8b8 flags:# geo:GeoPoint reply_markup:flags.2?ReplyMarkup = BotInlineMessage;
func (m *TLBotInlineMessageMediaGeo) To_BotInlineMessage() *BotInlineMessage {
    return &BotInlineMessage{
        Constructor: TLConstructor_CRC32_botInlineMessageMediaGeo,
        Data2: m.Data2,
    }
}


func (m *TLBotInlineMessageMediaGeo) SetGeo(v *GeoPoint) { m.Data2.Geo = v }
func (m *TLBotInlineMessageMediaGeo) GetGeo() *GeoPoint { return m.Data2.Geo }

func (m *TLBotInlineMessageMediaGeo) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLBotInlineMessageMediaGeo) GetReplyMarkup() *ReplyMarkup { return m.Data2.ReplyMarkup }


func NewTLBotInlineMessageMediaGeo() * TLBotInlineMessageMediaGeo {
    return &TLBotInlineMessageMediaGeo{ Data2: &BotInlineMessage_Data{} }
}

func (m* TLBotInlineMessageMediaGeo) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_botInlineMessageMediaGeo))

    // flags
    var flags uint32 = 0
    if m.GetReplyMarkup() != nil { flags |= 1 << 2 }
	x.UInt(flags)

    x.Bytes(m.GetGeo().Encode())
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetReplyMarkup().Encode()) }

    return x.buf
}

func (m* TLBotInlineMessageMediaGeo) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m2 := &GeoPoint{}
    m2.Decode(dbuf)
    m.SetGeo(m2)
    if (flags & (1 << 2)) != 0 {
 m3 := &ReplyMarkup{}
    m3.Decode(dbuf)
    m.SetReplyMarkup(m3) 
}

    return dbuf.err
}
// botInlineMessageMediaVenue#4366232e flags:# geo:GeoPoint title:string address:string provider:string venue_id:string reply_markup:flags.2?ReplyMarkup = BotInlineMessage;
func (m *TLBotInlineMessageMediaVenue) To_BotInlineMessage() *BotInlineMessage {
    return &BotInlineMessage{
        Constructor: TLConstructor_CRC32_botInlineMessageMediaVenue,
        Data2: m.Data2,
    }
}


func (m *TLBotInlineMessageMediaVenue) SetGeo(v *GeoPoint) { m.Data2.Geo = v }
func (m *TLBotInlineMessageMediaVenue) GetGeo() *GeoPoint { return m.Data2.Geo }

func (m *TLBotInlineMessageMediaVenue) SetTitle(v string) { m.Data2.Title = v }
func (m *TLBotInlineMessageMediaVenue) GetTitle() string { return m.Data2.Title }

func (m *TLBotInlineMessageMediaVenue) SetAddress(v string) { m.Data2.Address = v }
func (m *TLBotInlineMessageMediaVenue) GetAddress() string { return m.Data2.Address }

func (m *TLBotInlineMessageMediaVenue) SetProvider(v string) { m.Data2.Provider = v }
func (m *TLBotInlineMessageMediaVenue) GetProvider() string { return m.Data2.Provider }

func (m *TLBotInlineMessageMediaVenue) SetVenueId(v string) { m.Data2.VenueId = v }
func (m *TLBotInlineMessageMediaVenue) GetVenueId() string { return m.Data2.VenueId }

func (m *TLBotInlineMessageMediaVenue) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLBotInlineMessageMediaVenue) GetReplyMarkup() *ReplyMarkup { return m.Data2.ReplyMarkup }


func NewTLBotInlineMessageMediaVenue() * TLBotInlineMessageMediaVenue {
    return &TLBotInlineMessageMediaVenue{ Data2: &BotInlineMessage_Data{} }
}

func (m* TLBotInlineMessageMediaVenue) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_botInlineMessageMediaVenue))

    // flags
    var flags uint32 = 0
    if m.GetReplyMarkup() != nil { flags |= 1 << 2 }
	x.UInt(flags)

    x.Bytes(m.GetGeo().Encode())
    x.String(m.GetTitle())
    x.String(m.GetAddress())
    x.String(m.GetProvider())
    x.String(m.GetVenueId())
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetReplyMarkup().Encode()) }

    return x.buf
}

func (m* TLBotInlineMessageMediaVenue) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m2 := &GeoPoint{}
    m2.Decode(dbuf)
    m.SetGeo(m2)
    m.SetTitle(dbuf.String())
    m.SetAddress(dbuf.String())
    m.SetProvider(dbuf.String())
    m.SetVenueId(dbuf.String())
    if (flags & (1 << 2)) != 0 {
 m7 := &ReplyMarkup{}
    m7.Decode(dbuf)
    m.SetReplyMarkup(m7) 
}

    return dbuf.err
}
// botInlineMessageMediaContact#35edb4d4 flags:# phone_number:string first_name:string last_name:string reply_markup:flags.2?ReplyMarkup = BotInlineMessage;
func (m *TLBotInlineMessageMediaContact) To_BotInlineMessage() *BotInlineMessage {
    return &BotInlineMessage{
        Constructor: TLConstructor_CRC32_botInlineMessageMediaContact,
        Data2: m.Data2,
    }
}


func (m *TLBotInlineMessageMediaContact) SetPhoneNumber(v string) { m.Data2.PhoneNumber = v }
func (m *TLBotInlineMessageMediaContact) GetPhoneNumber() string { return m.Data2.PhoneNumber }

func (m *TLBotInlineMessageMediaContact) SetFirstName(v string) { m.Data2.FirstName = v }
func (m *TLBotInlineMessageMediaContact) GetFirstName() string { return m.Data2.FirstName }

func (m *TLBotInlineMessageMediaContact) SetLastName(v string) { m.Data2.LastName = v }
func (m *TLBotInlineMessageMediaContact) GetLastName() string { return m.Data2.LastName }

func (m *TLBotInlineMessageMediaContact) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLBotInlineMessageMediaContact) GetReplyMarkup() *ReplyMarkup { return m.Data2.ReplyMarkup }


func NewTLBotInlineMessageMediaContact() * TLBotInlineMessageMediaContact {
    return &TLBotInlineMessageMediaContact{ Data2: &BotInlineMessage_Data{} }
}

func (m* TLBotInlineMessageMediaContact) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_botInlineMessageMediaContact))

    // flags
    var flags uint32 = 0
    if m.GetReplyMarkup() != nil { flags |= 1 << 2 }
	x.UInt(flags)

    x.String(m.GetPhoneNumber())
    x.String(m.GetFirstName())
    x.String(m.GetLastName())
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetReplyMarkup().Encode()) }

    return x.buf
}

func (m* TLBotInlineMessageMediaContact) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetPhoneNumber(dbuf.String())
    m.SetFirstName(dbuf.String())
    m.SetLastName(dbuf.String())
    if (flags & (1 << 2)) != 0 {
 m5 := &ReplyMarkup{}
    m5.Decode(dbuf)
    m.SetReplyMarkup(m5) 
}

    return dbuf.err
}
// botInlineMessageMediaAuto#764cf810 flags:# message:string entities:flags.1?Vector<MessageEntity> reply_markup:flags.2?ReplyMarkup = BotInlineMessage;
func (m *TLBotInlineMessageMediaAuto114) To_BotInlineMessage() *BotInlineMessage {
    return &BotInlineMessage{
        Constructor: TLConstructor_CRC32_botInlineMessageMediaAuto114,
        Data2: m.Data2,
    }
}


func (m *TLBotInlineMessageMediaAuto114) SetMessage(v string) { m.Data2.Message = v }
func (m *TLBotInlineMessageMediaAuto114) GetMessage() string { return m.Data2.Message }

func (m *TLBotInlineMessageMediaAuto114) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLBotInlineMessageMediaAuto114) GetEntities() []*MessageEntity { return m.Data2.Entities }

func (m *TLBotInlineMessageMediaAuto114) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLBotInlineMessageMediaAuto114) GetReplyMarkup() *ReplyMarkup { return m.Data2.ReplyMarkup }


func NewTLBotInlineMessageMediaAuto114() * TLBotInlineMessageMediaAuto114 {
    return &TLBotInlineMessageMediaAuto114{ Data2: &BotInlineMessage_Data{} }
}

func (m* TLBotInlineMessageMediaAuto114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_botInlineMessageMediaAuto114))

    // flags
    var flags uint32 = 0
    if m.GetEntities() != nil { flags |= 1 << 1 }
    if m.GetReplyMarkup() != nil { flags |= 1 << 2 }
	x.UInt(flags)

    x.String(m.GetMessage())
    if (flags & (1 << 1)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetEntities())))
for _, v := range m.GetEntities() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetReplyMarkup().Encode()) }

    return x.buf
}

func (m* TLBotInlineMessageMediaAuto114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetMessage(dbuf.String())
    if (flags & (1 << 1)) != 0 {
 c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*MessageEntity, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &MessageEntity{}
	v3[i].Decode(dbuf)
}
m.SetEntities(v3)
 
}
    if (flags & (1 << 2)) != 0 {
 m4 := &ReplyMarkup{}
    m4.Decode(dbuf)
    m.SetReplyMarkup(m4) 
}

    return dbuf.err
}
// botInlineMessageMediaGeo#b722de65 flags:# geo:GeoPoint period:int reply_markup:flags.2?ReplyMarkup = BotInlineMessage;
func (m *TLBotInlineMessageMediaGeo114) To_BotInlineMessage() *BotInlineMessage {
    return &BotInlineMessage{
        Constructor: TLConstructor_CRC32_botInlineMessageMediaGeo114,
        Data2: m.Data2,
    }
}


func (m *TLBotInlineMessageMediaGeo114) SetGeo(v *GeoPoint) { m.Data2.Geo = v }
func (m *TLBotInlineMessageMediaGeo114) GetGeo() *GeoPoint { return m.Data2.Geo }

func (m *TLBotInlineMessageMediaGeo114) SetPeriod(v int32) { m.Data2.Period = v }
func (m *TLBotInlineMessageMediaGeo114) GetPeriod() int32 { return m.Data2.Period }

func (m *TLBotInlineMessageMediaGeo114) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLBotInlineMessageMediaGeo114) GetReplyMarkup() *ReplyMarkup { return m.Data2.ReplyMarkup }


func NewTLBotInlineMessageMediaGeo114() * TLBotInlineMessageMediaGeo114 {
    return &TLBotInlineMessageMediaGeo114{ Data2: &BotInlineMessage_Data{} }
}

func (m* TLBotInlineMessageMediaGeo114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_botInlineMessageMediaGeo114))

    // flags
    var flags uint32 = 0
    if m.GetReplyMarkup() != nil { flags |= 1 << 2 }
	x.UInt(flags)

    x.Bytes(m.GetGeo().Encode())
    x.Int(m.GetPeriod())
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetReplyMarkup().Encode()) }

    return x.buf
}

func (m* TLBotInlineMessageMediaGeo114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m2 := &GeoPoint{}
    m2.Decode(dbuf)
    m.SetGeo(m2)
    m.SetPeriod(dbuf.Int())
    if (flags & (1 << 2)) != 0 {
 m4 := &ReplyMarkup{}
    m4.Decode(dbuf)
    m.SetReplyMarkup(m4) 
}

    return dbuf.err
}
// botInlineMessageMediaVenue#8a86659c flags:# geo:GeoPoint title:string address:string provider:string venue_id:string venue_type:string reply_markup:flags.2?ReplyMarkup = BotInlineMessage;
func (m *TLBotInlineMessageMediaVenue114) To_BotInlineMessage() *BotInlineMessage {
    return &BotInlineMessage{
        Constructor: TLConstructor_CRC32_botInlineMessageMediaVenue114,
        Data2: m.Data2,
    }
}


func (m *TLBotInlineMessageMediaVenue114) SetGeo(v *GeoPoint) { m.Data2.Geo = v }
func (m *TLBotInlineMessageMediaVenue114) GetGeo() *GeoPoint { return m.Data2.Geo }

func (m *TLBotInlineMessageMediaVenue114) SetTitle(v string) { m.Data2.Title = v }
func (m *TLBotInlineMessageMediaVenue114) GetTitle() string { return m.Data2.Title }

func (m *TLBotInlineMessageMediaVenue114) SetAddress(v string) { m.Data2.Address = v }
func (m *TLBotInlineMessageMediaVenue114) GetAddress() string { return m.Data2.Address }

func (m *TLBotInlineMessageMediaVenue114) SetProvider(v string) { m.Data2.Provider = v }
func (m *TLBotInlineMessageMediaVenue114) GetProvider() string { return m.Data2.Provider }

func (m *TLBotInlineMessageMediaVenue114) SetVenueId(v string) { m.Data2.VenueId = v }
func (m *TLBotInlineMessageMediaVenue114) GetVenueId() string { return m.Data2.VenueId }

func (m *TLBotInlineMessageMediaVenue114) SetVenueType(v string) { m.Data2.VenueType = v }
func (m *TLBotInlineMessageMediaVenue114) GetVenueType() string { return m.Data2.VenueType }

func (m *TLBotInlineMessageMediaVenue114) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLBotInlineMessageMediaVenue114) GetReplyMarkup() *ReplyMarkup { return m.Data2.ReplyMarkup }


func NewTLBotInlineMessageMediaVenue114() * TLBotInlineMessageMediaVenue114 {
    return &TLBotInlineMessageMediaVenue114{ Data2: &BotInlineMessage_Data{} }
}

func (m* TLBotInlineMessageMediaVenue114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_botInlineMessageMediaVenue114))

    // flags
    var flags uint32 = 0
    if m.GetReplyMarkup() != nil { flags |= 1 << 2 }
	x.UInt(flags)

    x.Bytes(m.GetGeo().Encode())
    x.String(m.GetTitle())
    x.String(m.GetAddress())
    x.String(m.GetProvider())
    x.String(m.GetVenueId())
    x.String(m.GetVenueType())
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetReplyMarkup().Encode()) }

    return x.buf
}

func (m* TLBotInlineMessageMediaVenue114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m2 := &GeoPoint{}
    m2.Decode(dbuf)
    m.SetGeo(m2)
    m.SetTitle(dbuf.String())
    m.SetAddress(dbuf.String())
    m.SetProvider(dbuf.String())
    m.SetVenueId(dbuf.String())
    m.SetVenueType(dbuf.String())
    if (flags & (1 << 2)) != 0 {
 m8 := &ReplyMarkup{}
    m8.Decode(dbuf)
    m.SetReplyMarkup(m8) 
}

    return dbuf.err
}
// botInlineMessageMediaContact#18d1cdc2 flags:# phone_number:string first_name:string last_name:string vcard:string reply_markup:flags.2?ReplyMarkup = BotInlineMessage;
func (m *TLBotInlineMessageMediaContact114) To_BotInlineMessage() *BotInlineMessage {
    return &BotInlineMessage{
        Constructor: TLConstructor_CRC32_botInlineMessageMediaContact114,
        Data2: m.Data2,
    }
}


func (m *TLBotInlineMessageMediaContact114) SetPhoneNumber(v string) { m.Data2.PhoneNumber = v }
func (m *TLBotInlineMessageMediaContact114) GetPhoneNumber() string { return m.Data2.PhoneNumber }

func (m *TLBotInlineMessageMediaContact114) SetFirstName(v string) { m.Data2.FirstName = v }
func (m *TLBotInlineMessageMediaContact114) GetFirstName() string { return m.Data2.FirstName }

func (m *TLBotInlineMessageMediaContact114) SetLastName(v string) { m.Data2.LastName = v }
func (m *TLBotInlineMessageMediaContact114) GetLastName() string { return m.Data2.LastName }

func (m *TLBotInlineMessageMediaContact114) SetVcard(v string) { m.Data2.Vcard = v }
func (m *TLBotInlineMessageMediaContact114) GetVcard() string { return m.Data2.Vcard }

func (m *TLBotInlineMessageMediaContact114) SetReplyMarkup(v *ReplyMarkup) { m.Data2.ReplyMarkup = v }
func (m *TLBotInlineMessageMediaContact114) GetReplyMarkup() *ReplyMarkup { return m.Data2.ReplyMarkup }


func NewTLBotInlineMessageMediaContact114() * TLBotInlineMessageMediaContact114 {
    return &TLBotInlineMessageMediaContact114{ Data2: &BotInlineMessage_Data{} }
}

func (m* TLBotInlineMessageMediaContact114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_botInlineMessageMediaContact114))

    // flags
    var flags uint32 = 0
    if m.GetReplyMarkup() != nil { flags |= 1 << 2 }
	x.UInt(flags)

    x.String(m.GetPhoneNumber())
    x.String(m.GetFirstName())
    x.String(m.GetLastName())
    x.String(m.GetVcard())
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetReplyMarkup().Encode()) }

    return x.buf
}

func (m* TLBotInlineMessageMediaContact114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetPhoneNumber(dbuf.String())
    m.SetFirstName(dbuf.String())
    m.SetLastName(dbuf.String())
    m.SetVcard(dbuf.String())
    if (flags & (1 << 2)) != 0 {
 m6 := &ReplyMarkup{}
    m6.Decode(dbuf)
    m.SetReplyMarkup(m6) 
}

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// BotInlineResult <--
//  + TL_BotInlineResult
//  + TL_BotInlineMediaResult
//  + TL_BotInlineResult114
//

func (m *BotInlineResult) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_botInlineResult:
        t := m.To_BotInlineResult()
        return t.Encode()
    case TLConstructor_CRC32_botInlineMediaResult:
        t := m.To_BotInlineMediaResult()
        return t.Encode()
    case TLConstructor_CRC32_botInlineResult114:
        t := m.To_BotInlineResult114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *BotInlineResult) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_botInlineResult:
        m2 := &TLBotInlineResult{&BotInlineResult_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_botInlineMediaResult:
        m2 := &TLBotInlineMediaResult{&BotInlineResult_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_botInlineResult114:
        m2 := &TLBotInlineResult114{&BotInlineResult_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// botInlineResult#9bebaeb9 flags:# id:string type:string title:flags.1?string description:flags.2?string url:flags.3?string thumb_url:flags.4?string content_url:flags.5?string content_type:flags.5?string w:flags.6?int h:flags.6?int duration:flags.7?int send_message:BotInlineMessage = BotInlineResult;
func (m *BotInlineResult) To_BotInlineResult() *TLBotInlineResult {
    return &TLBotInlineResult{
        Data2: m.Data2,
    }
}

// botInlineMediaResult#17db940b flags:# id:string type:string photo:flags.0?Photo document:flags.1?Document title:flags.2?string description:flags.3?string send_message:BotInlineMessage = BotInlineResult;
func (m *BotInlineResult) To_BotInlineMediaResult() *TLBotInlineMediaResult {
    return &TLBotInlineMediaResult{
        Data2: m.Data2,
    }
}

// botInlineResult#11965f3a flags:# id:string type:string title:flags.1?string description:flags.2?string url:flags.3?string thumb:flags.4?WebDocument content:flags.5?WebDocument send_message:BotInlineMessage = BotInlineResult;
func (m *BotInlineResult) To_BotInlineResult114() *TLBotInlineResult114 {
    return &TLBotInlineResult114{
        Data2: m.Data2,
    }
}



// botInlineResult#9bebaeb9 flags:# id:string type:string title:flags.1?string description:flags.2?string url:flags.3?string thumb_url:flags.4?string content_url:flags.5?string content_type:flags.5?string w:flags.6?int h:flags.6?int duration:flags.7?int send_message:BotInlineMessage = BotInlineResult;
func (m *TLBotInlineResult) To_BotInlineResult() *BotInlineResult {
    return &BotInlineResult{
        Constructor: TLConstructor_CRC32_botInlineResult,
        Data2: m.Data2,
    }
}


func (m *TLBotInlineResult) SetId(v string) { m.Data2.Id = v }
func (m *TLBotInlineResult) GetId() string { return m.Data2.Id }

func (m *TLBotInlineResult) SetType(v string) { m.Data2.Type = v }
func (m *TLBotInlineResult) GetType() string { return m.Data2.Type }

func (m *TLBotInlineResult) SetTitle(v string) { m.Data2.Title = v }
func (m *TLBotInlineResult) GetTitle() string { return m.Data2.Title }

func (m *TLBotInlineResult) SetDescription(v string) { m.Data2.Description = v }
func (m *TLBotInlineResult) GetDescription() string { return m.Data2.Description }

func (m *TLBotInlineResult) SetUrl(v string) { m.Data2.Url = v }
func (m *TLBotInlineResult) GetUrl() string { return m.Data2.Url }

func (m *TLBotInlineResult) SetThumbUrl(v string) { m.Data2.ThumbUrl = v }
func (m *TLBotInlineResult) GetThumbUrl() string { return m.Data2.ThumbUrl }

func (m *TLBotInlineResult) SetContentUrl(v string) { m.Data2.ContentUrl = v }
func (m *TLBotInlineResult) GetContentUrl() string { return m.Data2.ContentUrl }

func (m *TLBotInlineResult) SetContentType(v string) { m.Data2.ContentType = v }
func (m *TLBotInlineResult) GetContentType() string { return m.Data2.ContentType }

func (m *TLBotInlineResult) SetW(v int32) { m.Data2.W = v }
func (m *TLBotInlineResult) GetW() int32 { return m.Data2.W }

func (m *TLBotInlineResult) SetH(v int32) { m.Data2.H = v }
func (m *TLBotInlineResult) GetH() int32 { return m.Data2.H }

func (m *TLBotInlineResult) SetDuration(v int32) { m.Data2.Duration = v }
func (m *TLBotInlineResult) GetDuration() int32 { return m.Data2.Duration }

func (m *TLBotInlineResult) SetSendMessage(v *BotInlineMessage) { m.Data2.SendMessage = v }
func (m *TLBotInlineResult) GetSendMessage() *BotInlineMessage { return m.Data2.SendMessage }


func NewTLBotInlineResult() * TLBotInlineResult {
    return &TLBotInlineResult{ Data2: &BotInlineResult_Data{} }
}

func (m* TLBotInlineResult) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_botInlineResult))

    // flags
    var flags uint32 = 0
    if m.GetTitle() != "" { flags |= 1 << 1 }
    if m.GetDescription() != "" { flags |= 1 << 2 }
    if m.GetUrl() != "" { flags |= 1 << 3 }
    if m.GetThumbUrl() != "" { flags |= 1 << 4 }
    if m.GetContentUrl() != "" { flags |= 1 << 5 }
    if m.GetContentType() != "" { flags |= 1 << 5 }
    if m.GetW() != 0 { flags |= 1 << 6 }
    if m.GetH() != 0 { flags |= 1 << 6 }
    if m.GetDuration() != 0 { flags |= 1 << 7 }
	x.UInt(flags)

    x.String(m.GetId())
    x.String(m.GetType())
    if (flags & (1 << 1)) != 0 { x.String(m.GetTitle()) }
    if (flags & (1 << 2)) != 0 { x.String(m.GetDescription()) }
    if (flags & (1 << 3)) != 0 { x.String(m.GetUrl()) }
    if (flags & (1 << 4)) != 0 { x.String(m.GetThumbUrl()) }
    if (flags & (1 << 5)) != 0 { x.String(m.GetContentUrl()) }
    if (flags & (1 << 5)) != 0 { x.String(m.GetContentType()) }
    if (flags & (1 << 6)) != 0 { x.Int(m.GetW()) }
    if (flags & (1 << 6)) != 0 { x.Int(m.GetH()) }
    if (flags & (1 << 7)) != 0 { x.Int(m.GetDuration()) }
    x.Bytes(m.GetSendMessage().Encode())

    return x.buf
}

func (m* TLBotInlineResult) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetId(dbuf.String())
    m.SetType(dbuf.String())
    if (flags & (1 << 1)) != 0 { m.SetTitle(dbuf.String()) }
    if (flags & (1 << 2)) != 0 { m.SetDescription(dbuf.String()) }
    if (flags & (1 << 3)) != 0 { m.SetUrl(dbuf.String()) }
    if (flags & (1 << 4)) != 0 { m.SetThumbUrl(dbuf.String()) }
    if (flags & (1 << 5)) != 0 { m.SetContentUrl(dbuf.String()) }
    if (flags & (1 << 5)) != 0 { m.SetContentType(dbuf.String()) }
    if (flags & (1 << 6)) != 0 { m.SetW(dbuf.Int()) }
    if (flags & (1 << 6)) != 0 { m.SetH(dbuf.Int()) }
    if (flags & (1 << 7)) != 0 { m.SetDuration(dbuf.Int()) }
    m13 := &BotInlineMessage{}
    m13.Decode(dbuf)
    m.SetSendMessage(m13)

    return dbuf.err
}
// botInlineMediaResult#17db940b flags:# id:string type:string photo:flags.0?Photo document:flags.1?Document title:flags.2?string description:flags.3?string send_message:BotInlineMessage = BotInlineResult;
func (m *TLBotInlineMediaResult) To_BotInlineResult() *BotInlineResult {
    return &BotInlineResult{
        Constructor: TLConstructor_CRC32_botInlineMediaResult,
        Data2: m.Data2,
    }
}


func (m *TLBotInlineMediaResult) SetId(v string) { m.Data2.Id = v }
func (m *TLBotInlineMediaResult) GetId() string { return m.Data2.Id }

func (m *TLBotInlineMediaResult) SetType(v string) { m.Data2.Type = v }
func (m *TLBotInlineMediaResult) GetType() string { return m.Data2.Type }

func (m *TLBotInlineMediaResult) SetPhoto(v *Photo) { m.Data2.Photo = v }
func (m *TLBotInlineMediaResult) GetPhoto() *Photo { return m.Data2.Photo }

func (m *TLBotInlineMediaResult) SetDocument(v *Document) { m.Data2.Document = v }
func (m *TLBotInlineMediaResult) GetDocument() *Document { return m.Data2.Document }

func (m *TLBotInlineMediaResult) SetTitle(v string) { m.Data2.Title = v }
func (m *TLBotInlineMediaResult) GetTitle() string { return m.Data2.Title }

func (m *TLBotInlineMediaResult) SetDescription(v string) { m.Data2.Description = v }
func (m *TLBotInlineMediaResult) GetDescription() string { return m.Data2.Description }

func (m *TLBotInlineMediaResult) SetSendMessage(v *BotInlineMessage) { m.Data2.SendMessage = v }
func (m *TLBotInlineMediaResult) GetSendMessage() *BotInlineMessage { return m.Data2.SendMessage }


func NewTLBotInlineMediaResult() * TLBotInlineMediaResult {
    return &TLBotInlineMediaResult{ Data2: &BotInlineResult_Data{} }
}

func (m* TLBotInlineMediaResult) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_botInlineMediaResult))

    // flags
    var flags uint32 = 0
    if m.GetPhoto() != nil { flags |= 1 << 0 }
    if m.GetDocument() != nil { flags |= 1 << 1 }
    if m.GetTitle() != "" { flags |= 1 << 2 }
    if m.GetDescription() != "" { flags |= 1 << 3 }
	x.UInt(flags)

    x.String(m.GetId())
    x.String(m.GetType())
    if (flags & (1 << 0)) != 0 { x.Bytes(m.GetPhoto().Encode()) }
    if (flags & (1 << 1)) != 0 { x.Bytes(m.GetDocument().Encode()) }
    if (flags & (1 << 2)) != 0 { x.String(m.GetTitle()) }
    if (flags & (1 << 3)) != 0 { x.String(m.GetDescription()) }
    x.Bytes(m.GetSendMessage().Encode())

    return x.buf
}

func (m* TLBotInlineMediaResult) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetId(dbuf.String())
    m.SetType(dbuf.String())
    if (flags & (1 << 0)) != 0 {
 m4 := &Photo{}
    m4.Decode(dbuf)
    m.SetPhoto(m4) 
}
    if (flags & (1 << 1)) != 0 {
 m5 := &Document{}
    m5.Decode(dbuf)
    m.SetDocument(m5) 
}
    if (flags & (1 << 2)) != 0 { m.SetTitle(dbuf.String()) }
    if (flags & (1 << 3)) != 0 { m.SetDescription(dbuf.String()) }
    m8 := &BotInlineMessage{}
    m8.Decode(dbuf)
    m.SetSendMessage(m8)

    return dbuf.err
}
// botInlineResult#11965f3a flags:# id:string type:string title:flags.1?string description:flags.2?string url:flags.3?string thumb:flags.4?WebDocument content:flags.5?WebDocument send_message:BotInlineMessage = BotInlineResult;
func (m *TLBotInlineResult114) To_BotInlineResult() *BotInlineResult {
    return &BotInlineResult{
        Constructor: TLConstructor_CRC32_botInlineResult114,
        Data2: m.Data2,
    }
}


func (m *TLBotInlineResult114) SetId(v string) { m.Data2.Id = v }
func (m *TLBotInlineResult114) GetId() string { return m.Data2.Id }

func (m *TLBotInlineResult114) SetType(v string) { m.Data2.Type = v }
func (m *TLBotInlineResult114) GetType() string { return m.Data2.Type }

func (m *TLBotInlineResult114) SetTitle(v string) { m.Data2.Title = v }
func (m *TLBotInlineResult114) GetTitle() string { return m.Data2.Title }

func (m *TLBotInlineResult114) SetDescription(v string) { m.Data2.Description = v }
func (m *TLBotInlineResult114) GetDescription() string { return m.Data2.Description }

func (m *TLBotInlineResult114) SetUrl(v string) { m.Data2.Url = v }
func (m *TLBotInlineResult114) GetUrl() string { return m.Data2.Url }

func (m *TLBotInlineResult114) SetThumb(v *WebDocument) { m.Data2.Thumb = v }
func (m *TLBotInlineResult114) GetThumb() *WebDocument { return m.Data2.Thumb }

func (m *TLBotInlineResult114) SetContent(v *WebDocument) { m.Data2.Content = v }
func (m *TLBotInlineResult114) GetContent() *WebDocument { return m.Data2.Content }

func (m *TLBotInlineResult114) SetSendMessage(v *BotInlineMessage) { m.Data2.SendMessage = v }
func (m *TLBotInlineResult114) GetSendMessage() *BotInlineMessage { return m.Data2.SendMessage }


func NewTLBotInlineResult114() * TLBotInlineResult114 {
    return &TLBotInlineResult114{ Data2: &BotInlineResult_Data{} }
}

func (m* TLBotInlineResult114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_botInlineResult114))

    // flags
    var flags uint32 = 0
    if m.GetTitle() != "" { flags |= 1 << 1 }
    if m.GetDescription() != "" { flags |= 1 << 2 }
    if m.GetUrl() != "" { flags |= 1 << 3 }
    if m.GetThumb() != nil { flags |= 1 << 4 }
    if m.GetContent() != nil { flags |= 1 << 5 }
	x.UInt(flags)

    x.String(m.GetId())
    x.String(m.GetType())
    if (flags & (1 << 1)) != 0 { x.String(m.GetTitle()) }
    if (flags & (1 << 2)) != 0 { x.String(m.GetDescription()) }
    if (flags & (1 << 3)) != 0 { x.String(m.GetUrl()) }
    if (flags & (1 << 4)) != 0 { x.Bytes(m.GetThumb().Encode()) }
    if (flags & (1 << 5)) != 0 { x.Bytes(m.GetContent().Encode()) }
    x.Bytes(m.GetSendMessage().Encode())

    return x.buf
}

func (m* TLBotInlineResult114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetId(dbuf.String())
    m.SetType(dbuf.String())
    if (flags & (1 << 1)) != 0 { m.SetTitle(dbuf.String()) }
    if (flags & (1 << 2)) != 0 { m.SetDescription(dbuf.String()) }
    if (flags & (1 << 3)) != 0 { m.SetUrl(dbuf.String()) }
    if (flags & (1 << 4)) != 0 {
 m7 := &WebDocument{}
    m7.Decode(dbuf)
    m.SetThumb(m7) 
}
    if (flags & (1 << 5)) != 0 {
 m8 := &WebDocument{}
    m8.Decode(dbuf)
    m.SetContent(m8) 
}
    m9 := &BotInlineMessage{}
    m9.Decode(dbuf)
    m.SetSendMessage(m9)

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Account_TmpPassword <--
//  + TL_AccountTmpPassword
//

func (m *Account_TmpPassword) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_account_tmpPassword:
        t := m.To_AccountTmpPassword()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Account_TmpPassword) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_account_tmpPassword:
        m2 := &TLAccountTmpPassword{&Account_TmpPassword_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// account.tmpPassword#db64fd34 tmp_password:bytes valid_until:int = account.TmpPassword;
func (m *Account_TmpPassword) To_AccountTmpPassword() *TLAccountTmpPassword {
    return &TLAccountTmpPassword{
        Data2: m.Data2,
    }
}



// account.tmpPassword#db64fd34 tmp_password:bytes valid_until:int = account.TmpPassword;
func (m *TLAccountTmpPassword) To_Account_TmpPassword() *Account_TmpPassword {
    return &Account_TmpPassword{
        Constructor: TLConstructor_CRC32_account_tmpPassword,
        Data2: m.Data2,
    }
}


func (m *TLAccountTmpPassword) SetTmpPassword(v []byte) { m.Data2.TmpPassword = v }
func (m *TLAccountTmpPassword) GetTmpPassword() []byte { return m.Data2.TmpPassword }

func (m *TLAccountTmpPassword) SetValidUntil(v int32) { m.Data2.ValidUntil = v }
func (m *TLAccountTmpPassword) GetValidUntil() int32 { return m.Data2.ValidUntil }


func NewTLAccountTmpPassword() * TLAccountTmpPassword {
    return &TLAccountTmpPassword{ Data2: &Account_TmpPassword_Data{} }
}

func (m* TLAccountTmpPassword) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_account_tmpPassword))

    x.StringBytes(m.GetTmpPassword())
    x.Int(m.GetValidUntil())

    return x.buf
}

func (m* TLAccountTmpPassword) Decode(dbuf *DecodeBuf) error {
    m.SetTmpPassword(dbuf.StringBytes())
    m.SetValidUntil(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// BaseTheme <--
//  + TL_BaseThemeClassic
//  + TL_BaseThemeDay
//  + TL_BaseThemeNight
//  + TL_BaseThemeTinted
//  + TL_BaseThemeArctic
//

func (m *BaseTheme) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_baseThemeClassic:
        t := m.To_BaseThemeClassic()
        return t.Encode()
    case TLConstructor_CRC32_baseThemeDay:
        t := m.To_BaseThemeDay()
        return t.Encode()
    case TLConstructor_CRC32_baseThemeNight:
        t := m.To_BaseThemeNight()
        return t.Encode()
    case TLConstructor_CRC32_baseThemeTinted:
        t := m.To_BaseThemeTinted()
        return t.Encode()
    case TLConstructor_CRC32_baseThemeArctic:
        t := m.To_BaseThemeArctic()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *BaseTheme) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_baseThemeClassic:
        m2 := &TLBaseThemeClassic{&BaseTheme_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_baseThemeDay:
        m2 := &TLBaseThemeDay{&BaseTheme_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_baseThemeNight:
        m2 := &TLBaseThemeNight{&BaseTheme_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_baseThemeTinted:
        m2 := &TLBaseThemeTinted{&BaseTheme_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_baseThemeArctic:
        m2 := &TLBaseThemeArctic{&BaseTheme_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// baseThemeClassic#c3a12462 = BaseTheme;
func (m *BaseTheme) To_BaseThemeClassic() *TLBaseThemeClassic {
    return &TLBaseThemeClassic{
        Data2: m.Data2,
    }
}

// baseThemeDay#fbd81688 = BaseTheme;
func (m *BaseTheme) To_BaseThemeDay() *TLBaseThemeDay {
    return &TLBaseThemeDay{
        Data2: m.Data2,
    }
}

// baseThemeNight#b7b31ea8 = BaseTheme;
func (m *BaseTheme) To_BaseThemeNight() *TLBaseThemeNight {
    return &TLBaseThemeNight{
        Data2: m.Data2,
    }
}

// baseThemeTinted#6d5f77ee = BaseTheme;
func (m *BaseTheme) To_BaseThemeTinted() *TLBaseThemeTinted {
    return &TLBaseThemeTinted{
        Data2: m.Data2,
    }
}

// baseThemeArctic#5b11125a = BaseTheme;
func (m *BaseTheme) To_BaseThemeArctic() *TLBaseThemeArctic {
    return &TLBaseThemeArctic{
        Data2: m.Data2,
    }
}



// baseThemeClassic#c3a12462 = BaseTheme;
func (m *TLBaseThemeClassic) To_BaseTheme() *BaseTheme {
    return &BaseTheme{
        Constructor: TLConstructor_CRC32_baseThemeClassic,
        Data2: m.Data2,
    }
}



func NewTLBaseThemeClassic() * TLBaseThemeClassic {
    return &TLBaseThemeClassic{ Data2: &BaseTheme_Data{} }
}

func (m* TLBaseThemeClassic) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_baseThemeClassic))


    return x.buf
}

func (m* TLBaseThemeClassic) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// baseThemeDay#fbd81688 = BaseTheme;
func (m *TLBaseThemeDay) To_BaseTheme() *BaseTheme {
    return &BaseTheme{
        Constructor: TLConstructor_CRC32_baseThemeDay,
        Data2: m.Data2,
    }
}



func NewTLBaseThemeDay() * TLBaseThemeDay {
    return &TLBaseThemeDay{ Data2: &BaseTheme_Data{} }
}

func (m* TLBaseThemeDay) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_baseThemeDay))


    return x.buf
}

func (m* TLBaseThemeDay) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// baseThemeNight#b7b31ea8 = BaseTheme;
func (m *TLBaseThemeNight) To_BaseTheme() *BaseTheme {
    return &BaseTheme{
        Constructor: TLConstructor_CRC32_baseThemeNight,
        Data2: m.Data2,
    }
}



func NewTLBaseThemeNight() * TLBaseThemeNight {
    return &TLBaseThemeNight{ Data2: &BaseTheme_Data{} }
}

func (m* TLBaseThemeNight) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_baseThemeNight))


    return x.buf
}

func (m* TLBaseThemeNight) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// baseThemeTinted#6d5f77ee = BaseTheme;
func (m *TLBaseThemeTinted) To_BaseTheme() *BaseTheme {
    return &BaseTheme{
        Constructor: TLConstructor_CRC32_baseThemeTinted,
        Data2: m.Data2,
    }
}



func NewTLBaseThemeTinted() * TLBaseThemeTinted {
    return &TLBaseThemeTinted{ Data2: &BaseTheme_Data{} }
}

func (m* TLBaseThemeTinted) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_baseThemeTinted))


    return x.buf
}

func (m* TLBaseThemeTinted) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// baseThemeArctic#5b11125a = BaseTheme;
func (m *TLBaseThemeArctic) To_BaseTheme() *BaseTheme {
    return &BaseTheme{
        Constructor: TLConstructor_CRC32_baseThemeArctic,
        Data2: m.Data2,
    }
}



func NewTLBaseThemeArctic() * TLBaseThemeArctic {
    return &TLBaseThemeArctic{ Data2: &BaseTheme_Data{} }
}

func (m* TLBaseThemeArctic) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_baseThemeArctic))


    return x.buf
}

func (m* TLBaseThemeArctic) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// StatsGroupTopInviter <--
//  + TL_StatsGroupTopInviter
//

func (m *StatsGroupTopInviter) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_statsGroupTopInviter:
        t := m.To_StatsGroupTopInviter()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *StatsGroupTopInviter) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_statsGroupTopInviter:
        m2 := &TLStatsGroupTopInviter{&StatsGroupTopInviter_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// statsGroupTopInviter#31962a4c user_id:int invitations:int = StatsGroupTopInviter;
func (m *StatsGroupTopInviter) To_StatsGroupTopInviter() *TLStatsGroupTopInviter {
    return &TLStatsGroupTopInviter{
        Data2: m.Data2,
    }
}



// statsGroupTopInviter#31962a4c user_id:int invitations:int = StatsGroupTopInviter;
func (m *TLStatsGroupTopInviter) To_StatsGroupTopInviter() *StatsGroupTopInviter {
    return &StatsGroupTopInviter{
        Constructor: TLConstructor_CRC32_statsGroupTopInviter,
        Data2: m.Data2,
    }
}


func (m *TLStatsGroupTopInviter) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLStatsGroupTopInviter) GetUserId() int32 { return m.Data2.UserId }

func (m *TLStatsGroupTopInviter) SetInvitations(v int32) { m.Data2.Invitations = v }
func (m *TLStatsGroupTopInviter) GetInvitations() int32 { return m.Data2.Invitations }


func NewTLStatsGroupTopInviter() * TLStatsGroupTopInviter {
    return &TLStatsGroupTopInviter{ Data2: &StatsGroupTopInviter_Data{} }
}

func (m* TLStatsGroupTopInviter) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_statsGroupTopInviter))

    x.Int(m.GetUserId())
    x.Int(m.GetInvitations())

    return x.buf
}

func (m* TLStatsGroupTopInviter) Decode(dbuf *DecodeBuf) error {
    m.SetUserId(dbuf.Int())
    m.SetInvitations(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputFileLocation <--
//  + TL_InputFileLocation
//  + TL_InputEncryptedFileLocation
//  + TL_InputDocumentFileLocation
//  + TL_InputDocumentFileLocation54
//  + TL_InputFileLocation114
//  + TL_InputDocumentFileLocation114
//  + TL_InputSecureFileLocation
//  + TL_InputTakeoutFileLocation
//  + TL_InputPhotoFileLocation
//  + TL_InputPhotoLegacyFileLocation
//  + TL_InputPeerPhotoFileLocation
//  + TL_InputStickerSetThumb
//

func (m *InputFileLocation) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputFileLocation:
        t := m.To_InputFileLocation()
        return t.Encode()
    case TLConstructor_CRC32_inputEncryptedFileLocation:
        t := m.To_InputEncryptedFileLocation()
        return t.Encode()
    case TLConstructor_CRC32_inputDocumentFileLocation:
        t := m.To_InputDocumentFileLocation()
        return t.Encode()
    case TLConstructor_CRC32_inputDocumentFileLocation54:
        t := m.To_InputDocumentFileLocation54()
        return t.Encode()
    case TLConstructor_CRC32_inputFileLocation114:
        t := m.To_InputFileLocation114()
        return t.Encode()
    case TLConstructor_CRC32_inputDocumentFileLocation114:
        t := m.To_InputDocumentFileLocation114()
        return t.Encode()
    case TLConstructor_CRC32_inputSecureFileLocation:
        t := m.To_InputSecureFileLocation()
        return t.Encode()
    case TLConstructor_CRC32_inputTakeoutFileLocation:
        t := m.To_InputTakeoutFileLocation()
        return t.Encode()
    case TLConstructor_CRC32_inputPhotoFileLocation:
        t := m.To_InputPhotoFileLocation()
        return t.Encode()
    case TLConstructor_CRC32_inputPhotoLegacyFileLocation:
        t := m.To_InputPhotoLegacyFileLocation()
        return t.Encode()
    case TLConstructor_CRC32_inputPeerPhotoFileLocation:
        t := m.To_InputPeerPhotoFileLocation()
        return t.Encode()
    case TLConstructor_CRC32_inputStickerSetThumb:
        t := m.To_InputStickerSetThumb()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputFileLocation) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputFileLocation:
        m2 := &TLInputFileLocation{&InputFileLocation_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputEncryptedFileLocation:
        m2 := &TLInputEncryptedFileLocation{&InputFileLocation_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputDocumentFileLocation:
        m2 := &TLInputDocumentFileLocation{&InputFileLocation_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputDocumentFileLocation54:
        m2 := &TLInputDocumentFileLocation54{&InputFileLocation_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputFileLocation114:
        m2 := &TLInputFileLocation114{&InputFileLocation_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputDocumentFileLocation114:
        m2 := &TLInputDocumentFileLocation114{&InputFileLocation_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputSecureFileLocation:
        m2 := &TLInputSecureFileLocation{&InputFileLocation_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputTakeoutFileLocation:
        m2 := &TLInputTakeoutFileLocation{&InputFileLocation_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputPhotoFileLocation:
        m2 := &TLInputPhotoFileLocation{&InputFileLocation_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputPhotoLegacyFileLocation:
        m2 := &TLInputPhotoLegacyFileLocation{&InputFileLocation_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputPeerPhotoFileLocation:
        m2 := &TLInputPeerPhotoFileLocation{&InputFileLocation_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputStickerSetThumb:
        m2 := &TLInputStickerSetThumb{&InputFileLocation_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputFileLocation#14637196 volume_id:long local_id:int secret:long = InputFileLocation;
func (m *InputFileLocation) To_InputFileLocation() *TLInputFileLocation {
    return &TLInputFileLocation{
        Data2: m.Data2,
    }
}

// inputEncryptedFileLocation#f5235d55 id:long access_hash:long = InputFileLocation;
func (m *InputFileLocation) To_InputEncryptedFileLocation() *TLInputEncryptedFileLocation {
    return &TLInputEncryptedFileLocation{
        Data2: m.Data2,
    }
}

// inputDocumentFileLocation#430f0724 id:long access_hash:long version:int = InputFileLocation;
func (m *InputFileLocation) To_InputDocumentFileLocation() *TLInputDocumentFileLocation {
    return &TLInputDocumentFileLocation{
        Data2: m.Data2,
    }
}

// inputDocumentFileLocation#4e45abe9 id:long access_hash:long = InputFileLocation;
func (m *InputFileLocation) To_InputDocumentFileLocation54() *TLInputDocumentFileLocation54 {
    return &TLInputDocumentFileLocation54{
        Data2: m.Data2,
    }
}

// inputFileLocation#dfdaabe1 volume_id:long local_id:int secret:long file_reference:bytes = InputFileLocation;
func (m *InputFileLocation) To_InputFileLocation114() *TLInputFileLocation114 {
    return &TLInputFileLocation114{
        Data2: m.Data2,
    }
}

// inputDocumentFileLocation#bad07584 id:long access_hash:long file_reference:bytes thumb_size:string = InputFileLocation;
func (m *InputFileLocation) To_InputDocumentFileLocation114() *TLInputDocumentFileLocation114 {
    return &TLInputDocumentFileLocation114{
        Data2: m.Data2,
    }
}

// inputSecureFileLocation#cbc7ee28 id:long access_hash:long = InputFileLocation;
func (m *InputFileLocation) To_InputSecureFileLocation() *TLInputSecureFileLocation {
    return &TLInputSecureFileLocation{
        Data2: m.Data2,
    }
}

// inputTakeoutFileLocation#29be5899 = InputFileLocation;
func (m *InputFileLocation) To_InputTakeoutFileLocation() *TLInputTakeoutFileLocation {
    return &TLInputTakeoutFileLocation{
        Data2: m.Data2,
    }
}

// inputPhotoFileLocation#40181ffe id:long access_hash:long file_reference:bytes thumb_size:string = InputFileLocation;
func (m *InputFileLocation) To_InputPhotoFileLocation() *TLInputPhotoFileLocation {
    return &TLInputPhotoFileLocation{
        Data2: m.Data2,
    }
}

// inputPhotoLegacyFileLocation#d83466f3 id:long access_hash:long file_reference:bytes volume_id:long local_id:int secret:long = InputFileLocation;
func (m *InputFileLocation) To_InputPhotoLegacyFileLocation() *TLInputPhotoLegacyFileLocation {
    return &TLInputPhotoLegacyFileLocation{
        Data2: m.Data2,
    }
}

// inputPeerPhotoFileLocation#27d69997 flags:# big:flags.0?true peer:InputPeer volume_id:long local_id:int = InputFileLocation;
func (m *InputFileLocation) To_InputPeerPhotoFileLocation() *TLInputPeerPhotoFileLocation {
    return &TLInputPeerPhotoFileLocation{
        Data2: m.Data2,
    }
}

// inputStickerSetThumb#dbaeae9 stickerset:InputStickerSet volume_id:long local_id:int = InputFileLocation;
func (m *InputFileLocation) To_InputStickerSetThumb() *TLInputStickerSetThumb {
    return &TLInputStickerSetThumb{
        Data2: m.Data2,
    }
}



// inputFileLocation#14637196 volume_id:long local_id:int secret:long = InputFileLocation;
func (m *TLInputFileLocation) To_InputFileLocation() *InputFileLocation {
    return &InputFileLocation{
        Constructor: TLConstructor_CRC32_inputFileLocation,
        Data2: m.Data2,
    }
}


func (m *TLInputFileLocation) SetVolumeId(v int64) { m.Data2.VolumeId = v }
func (m *TLInputFileLocation) GetVolumeId() int64 { return m.Data2.VolumeId }

func (m *TLInputFileLocation) SetLocalId(v int32) { m.Data2.LocalId = v }
func (m *TLInputFileLocation) GetLocalId() int32 { return m.Data2.LocalId }

func (m *TLInputFileLocation) SetSecret(v int64) { m.Data2.Secret = v }
func (m *TLInputFileLocation) GetSecret() int64 { return m.Data2.Secret }


func NewTLInputFileLocation() * TLInputFileLocation {
    return &TLInputFileLocation{ Data2: &InputFileLocation_Data{} }
}

func (m* TLInputFileLocation) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputFileLocation))

    x.Long(m.GetVolumeId())
    x.Int(m.GetLocalId())
    x.Long(m.GetSecret())

    return x.buf
}

func (m* TLInputFileLocation) Decode(dbuf *DecodeBuf) error {
    m.SetVolumeId(dbuf.Long())
    m.SetLocalId(dbuf.Int())
    m.SetSecret(dbuf.Long())

    return dbuf.err
}
// inputEncryptedFileLocation#f5235d55 id:long access_hash:long = InputFileLocation;
func (m *TLInputEncryptedFileLocation) To_InputFileLocation() *InputFileLocation {
    return &InputFileLocation{
        Constructor: TLConstructor_CRC32_inputEncryptedFileLocation,
        Data2: m.Data2,
    }
}


func (m *TLInputEncryptedFileLocation) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputEncryptedFileLocation) GetId() int64 { return m.Data2.Id }

func (m *TLInputEncryptedFileLocation) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputEncryptedFileLocation) GetAccessHash() int64 { return m.Data2.AccessHash }


func NewTLInputEncryptedFileLocation() * TLInputEncryptedFileLocation {
    return &TLInputEncryptedFileLocation{ Data2: &InputFileLocation_Data{} }
}

func (m* TLInputEncryptedFileLocation) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputEncryptedFileLocation))

    x.Long(m.GetId())
    x.Long(m.GetAccessHash())

    return x.buf
}

func (m* TLInputEncryptedFileLocation) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())

    return dbuf.err
}
// inputDocumentFileLocation#430f0724 id:long access_hash:long version:int = InputFileLocation;
func (m *TLInputDocumentFileLocation) To_InputFileLocation() *InputFileLocation {
    return &InputFileLocation{
        Constructor: TLConstructor_CRC32_inputDocumentFileLocation,
        Data2: m.Data2,
    }
}


func (m *TLInputDocumentFileLocation) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputDocumentFileLocation) GetId() int64 { return m.Data2.Id }

func (m *TLInputDocumentFileLocation) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputDocumentFileLocation) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLInputDocumentFileLocation) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLInputDocumentFileLocation) GetVersion() int32 { return m.Data2.Version }


func NewTLInputDocumentFileLocation() * TLInputDocumentFileLocation {
    return &TLInputDocumentFileLocation{ Data2: &InputFileLocation_Data{} }
}

func (m* TLInputDocumentFileLocation) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputDocumentFileLocation))

    x.Long(m.GetId())
    x.Long(m.GetAccessHash())
    x.Int(m.GetVersion())

    return x.buf
}

func (m* TLInputDocumentFileLocation) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())
    m.SetVersion(dbuf.Int())

    return dbuf.err
}
// inputDocumentFileLocation#4e45abe9 id:long access_hash:long = InputFileLocation;
func (m *TLInputDocumentFileLocation54) To_InputFileLocation() *InputFileLocation {
    return &InputFileLocation{
        Constructor: TLConstructor_CRC32_inputDocumentFileLocation54,
        Data2: m.Data2,
    }
}


func (m *TLInputDocumentFileLocation54) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputDocumentFileLocation54) GetId() int64 { return m.Data2.Id }

func (m *TLInputDocumentFileLocation54) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputDocumentFileLocation54) GetAccessHash() int64 { return m.Data2.AccessHash }


func NewTLInputDocumentFileLocation54() * TLInputDocumentFileLocation54 {
    return &TLInputDocumentFileLocation54{ Data2: &InputFileLocation_Data{} }
}

func (m* TLInputDocumentFileLocation54) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputDocumentFileLocation54))

    x.Long(m.GetId())
    x.Long(m.GetAccessHash())

    return x.buf
}

func (m* TLInputDocumentFileLocation54) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())

    return dbuf.err
}
// inputFileLocation#dfdaabe1 volume_id:long local_id:int secret:long file_reference:bytes = InputFileLocation;
func (m *TLInputFileLocation114) To_InputFileLocation() *InputFileLocation {
    return &InputFileLocation{
        Constructor: TLConstructor_CRC32_inputFileLocation114,
        Data2: m.Data2,
    }
}


func (m *TLInputFileLocation114) SetVolumeId(v int64) { m.Data2.VolumeId = v }
func (m *TLInputFileLocation114) GetVolumeId() int64 { return m.Data2.VolumeId }

func (m *TLInputFileLocation114) SetLocalId(v int32) { m.Data2.LocalId = v }
func (m *TLInputFileLocation114) GetLocalId() int32 { return m.Data2.LocalId }

func (m *TLInputFileLocation114) SetSecret(v int64) { m.Data2.Secret = v }
func (m *TLInputFileLocation114) GetSecret() int64 { return m.Data2.Secret }

func (m *TLInputFileLocation114) SetFileReference(v []byte) { m.Data2.FileReference = v }
func (m *TLInputFileLocation114) GetFileReference() []byte { return m.Data2.FileReference }


func NewTLInputFileLocation114() * TLInputFileLocation114 {
    return &TLInputFileLocation114{ Data2: &InputFileLocation_Data{} }
}

func (m* TLInputFileLocation114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputFileLocation114))

    x.Long(m.GetVolumeId())
    x.Int(m.GetLocalId())
    x.Long(m.GetSecret())
    x.StringBytes(m.GetFileReference())

    return x.buf
}

func (m* TLInputFileLocation114) Decode(dbuf *DecodeBuf) error {
    m.SetVolumeId(dbuf.Long())
    m.SetLocalId(dbuf.Int())
    m.SetSecret(dbuf.Long())
    m.SetFileReference(dbuf.StringBytes())

    return dbuf.err
}
// inputDocumentFileLocation#bad07584 id:long access_hash:long file_reference:bytes thumb_size:string = InputFileLocation;
func (m *TLInputDocumentFileLocation114) To_InputFileLocation() *InputFileLocation {
    return &InputFileLocation{
        Constructor: TLConstructor_CRC32_inputDocumentFileLocation114,
        Data2: m.Data2,
    }
}


func (m *TLInputDocumentFileLocation114) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputDocumentFileLocation114) GetId() int64 { return m.Data2.Id }

func (m *TLInputDocumentFileLocation114) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputDocumentFileLocation114) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLInputDocumentFileLocation114) SetFileReference(v []byte) { m.Data2.FileReference = v }
func (m *TLInputDocumentFileLocation114) GetFileReference() []byte { return m.Data2.FileReference }

func (m *TLInputDocumentFileLocation114) SetThumbSize(v string) { m.Data2.ThumbSize = v }
func (m *TLInputDocumentFileLocation114) GetThumbSize() string { return m.Data2.ThumbSize }


func NewTLInputDocumentFileLocation114() * TLInputDocumentFileLocation114 {
    return &TLInputDocumentFileLocation114{ Data2: &InputFileLocation_Data{} }
}

func (m* TLInputDocumentFileLocation114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputDocumentFileLocation114))

    x.Long(m.GetId())
    x.Long(m.GetAccessHash())
    x.StringBytes(m.GetFileReference())
    x.String(m.GetThumbSize())

    return x.buf
}

func (m* TLInputDocumentFileLocation114) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())
    m.SetFileReference(dbuf.StringBytes())
    m.SetThumbSize(dbuf.String())

    return dbuf.err
}
// inputSecureFileLocation#cbc7ee28 id:long access_hash:long = InputFileLocation;
func (m *TLInputSecureFileLocation) To_InputFileLocation() *InputFileLocation {
    return &InputFileLocation{
        Constructor: TLConstructor_CRC32_inputSecureFileLocation,
        Data2: m.Data2,
    }
}


func (m *TLInputSecureFileLocation) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputSecureFileLocation) GetId() int64 { return m.Data2.Id }

func (m *TLInputSecureFileLocation) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputSecureFileLocation) GetAccessHash() int64 { return m.Data2.AccessHash }


func NewTLInputSecureFileLocation() * TLInputSecureFileLocation {
    return &TLInputSecureFileLocation{ Data2: &InputFileLocation_Data{} }
}

func (m* TLInputSecureFileLocation) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputSecureFileLocation))

    x.Long(m.GetId())
    x.Long(m.GetAccessHash())

    return x.buf
}

func (m* TLInputSecureFileLocation) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())

    return dbuf.err
}
// inputTakeoutFileLocation#29be5899 = InputFileLocation;
func (m *TLInputTakeoutFileLocation) To_InputFileLocation() *InputFileLocation {
    return &InputFileLocation{
        Constructor: TLConstructor_CRC32_inputTakeoutFileLocation,
        Data2: m.Data2,
    }
}



func NewTLInputTakeoutFileLocation() * TLInputTakeoutFileLocation {
    return &TLInputTakeoutFileLocation{ Data2: &InputFileLocation_Data{} }
}

func (m* TLInputTakeoutFileLocation) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputTakeoutFileLocation))


    return x.buf
}

func (m* TLInputTakeoutFileLocation) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputPhotoFileLocation#40181ffe id:long access_hash:long file_reference:bytes thumb_size:string = InputFileLocation;
func (m *TLInputPhotoFileLocation) To_InputFileLocation() *InputFileLocation {
    return &InputFileLocation{
        Constructor: TLConstructor_CRC32_inputPhotoFileLocation,
        Data2: m.Data2,
    }
}


func (m *TLInputPhotoFileLocation) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputPhotoFileLocation) GetId() int64 { return m.Data2.Id }

func (m *TLInputPhotoFileLocation) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputPhotoFileLocation) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLInputPhotoFileLocation) SetFileReference(v []byte) { m.Data2.FileReference = v }
func (m *TLInputPhotoFileLocation) GetFileReference() []byte { return m.Data2.FileReference }

func (m *TLInputPhotoFileLocation) SetThumbSize(v string) { m.Data2.ThumbSize = v }
func (m *TLInputPhotoFileLocation) GetThumbSize() string { return m.Data2.ThumbSize }


func NewTLInputPhotoFileLocation() * TLInputPhotoFileLocation {
    return &TLInputPhotoFileLocation{ Data2: &InputFileLocation_Data{} }
}

func (m* TLInputPhotoFileLocation) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPhotoFileLocation))

    x.Long(m.GetId())
    x.Long(m.GetAccessHash())
    x.StringBytes(m.GetFileReference())
    x.String(m.GetThumbSize())

    return x.buf
}

func (m* TLInputPhotoFileLocation) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())
    m.SetFileReference(dbuf.StringBytes())
    m.SetThumbSize(dbuf.String())

    return dbuf.err
}
// inputPhotoLegacyFileLocation#d83466f3 id:long access_hash:long file_reference:bytes volume_id:long local_id:int secret:long = InputFileLocation;
func (m *TLInputPhotoLegacyFileLocation) To_InputFileLocation() *InputFileLocation {
    return &InputFileLocation{
        Constructor: TLConstructor_CRC32_inputPhotoLegacyFileLocation,
        Data2: m.Data2,
    }
}


func (m *TLInputPhotoLegacyFileLocation) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputPhotoLegacyFileLocation) GetId() int64 { return m.Data2.Id }

func (m *TLInputPhotoLegacyFileLocation) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputPhotoLegacyFileLocation) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLInputPhotoLegacyFileLocation) SetFileReference(v []byte) { m.Data2.FileReference = v }
func (m *TLInputPhotoLegacyFileLocation) GetFileReference() []byte { return m.Data2.FileReference }

func (m *TLInputPhotoLegacyFileLocation) SetVolumeId(v int64) { m.Data2.VolumeId = v }
func (m *TLInputPhotoLegacyFileLocation) GetVolumeId() int64 { return m.Data2.VolumeId }

func (m *TLInputPhotoLegacyFileLocation) SetLocalId(v int32) { m.Data2.LocalId = v }
func (m *TLInputPhotoLegacyFileLocation) GetLocalId() int32 { return m.Data2.LocalId }

func (m *TLInputPhotoLegacyFileLocation) SetSecret(v int64) { m.Data2.Secret = v }
func (m *TLInputPhotoLegacyFileLocation) GetSecret() int64 { return m.Data2.Secret }


func NewTLInputPhotoLegacyFileLocation() * TLInputPhotoLegacyFileLocation {
    return &TLInputPhotoLegacyFileLocation{ Data2: &InputFileLocation_Data{} }
}

func (m* TLInputPhotoLegacyFileLocation) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPhotoLegacyFileLocation))

    x.Long(m.GetId())
    x.Long(m.GetAccessHash())
    x.StringBytes(m.GetFileReference())
    x.Long(m.GetVolumeId())
    x.Int(m.GetLocalId())
    x.Long(m.GetSecret())

    return x.buf
}

func (m* TLInputPhotoLegacyFileLocation) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())
    m.SetFileReference(dbuf.StringBytes())
    m.SetVolumeId(dbuf.Long())
    m.SetLocalId(dbuf.Int())
    m.SetSecret(dbuf.Long())

    return dbuf.err
}
// inputPeerPhotoFileLocation#27d69997 flags:# big:flags.0?true peer:InputPeer volume_id:long local_id:int = InputFileLocation;
func (m *TLInputPeerPhotoFileLocation) To_InputFileLocation() *InputFileLocation {
    return &InputFileLocation{
        Constructor: TLConstructor_CRC32_inputPeerPhotoFileLocation,
        Data2: m.Data2,
    }
}


func (m *TLInputPeerPhotoFileLocation) SetBig(v bool) { m.Data2.Big = v }
func (m *TLInputPeerPhotoFileLocation) GetBig() bool { return m.Data2.Big }

func (m *TLInputPeerPhotoFileLocation) SetPeer(v *InputPeer) { m.Data2.Peer = v }
func (m *TLInputPeerPhotoFileLocation) GetPeer() *InputPeer { return m.Data2.Peer }

func (m *TLInputPeerPhotoFileLocation) SetVolumeId(v int64) { m.Data2.VolumeId = v }
func (m *TLInputPeerPhotoFileLocation) GetVolumeId() int64 { return m.Data2.VolumeId }

func (m *TLInputPeerPhotoFileLocation) SetLocalId(v int32) { m.Data2.LocalId = v }
func (m *TLInputPeerPhotoFileLocation) GetLocalId() int32 { return m.Data2.LocalId }


func NewTLInputPeerPhotoFileLocation() * TLInputPeerPhotoFileLocation {
    return &TLInputPeerPhotoFileLocation{ Data2: &InputFileLocation_Data{} }
}

func (m* TLInputPeerPhotoFileLocation) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPeerPhotoFileLocation))

    // flags
    var flags uint32 = 0
    if m.GetBig() == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Bytes(m.GetPeer().Encode())
    x.Long(m.GetVolumeId())
    x.Int(m.GetLocalId())

    return x.buf
}

func (m* TLInputPeerPhotoFileLocation) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetBig(true) }
    m3 := &InputPeer{}
    m3.Decode(dbuf)
    m.SetPeer(m3)
    m.SetVolumeId(dbuf.Long())
    m.SetLocalId(dbuf.Int())

    return dbuf.err
}
// inputStickerSetThumb#dbaeae9 stickerset:InputStickerSet volume_id:long local_id:int = InputFileLocation;
func (m *TLInputStickerSetThumb) To_InputFileLocation() *InputFileLocation {
    return &InputFileLocation{
        Constructor: TLConstructor_CRC32_inputStickerSetThumb,
        Data2: m.Data2,
    }
}


func (m *TLInputStickerSetThumb) SetStickerset(v *InputStickerSet) { m.Data2.Stickerset = v }
func (m *TLInputStickerSetThumb) GetStickerset() *InputStickerSet { return m.Data2.Stickerset }

func (m *TLInputStickerSetThumb) SetVolumeId(v int64) { m.Data2.VolumeId = v }
func (m *TLInputStickerSetThumb) GetVolumeId() int64 { return m.Data2.VolumeId }

func (m *TLInputStickerSetThumb) SetLocalId(v int32) { m.Data2.LocalId = v }
func (m *TLInputStickerSetThumb) GetLocalId() int32 { return m.Data2.LocalId }


func NewTLInputStickerSetThumb() * TLInputStickerSetThumb {
    return &TLInputStickerSetThumb{ Data2: &InputFileLocation_Data{} }
}

func (m* TLInputStickerSetThumb) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputStickerSetThumb))

    x.Bytes(m.GetStickerset().Encode())
    x.Long(m.GetVolumeId())
    x.Int(m.GetLocalId())

    return x.buf
}

func (m* TLInputStickerSetThumb) Decode(dbuf *DecodeBuf) error {
    m1 := &InputStickerSet{}
    m1.Decode(dbuf)
    m.SetStickerset(m1)
    m.SetVolumeId(dbuf.Long())
    m.SetLocalId(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// PeerSettings <--
//  + TL_PeerSettings
//  + TL_PeerSettings117
//

func (m *PeerSettings) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_peerSettings:
        t := m.To_PeerSettings()
        return t.Encode()
    case TLConstructor_CRC32_peerSettings117:
        t := m.To_PeerSettings117()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *PeerSettings) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_peerSettings:
        m2 := &TLPeerSettings{&PeerSettings_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_peerSettings117:
        m2 := &TLPeerSettings117{&PeerSettings_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// peerSettings#818426cd flags:# report_spam:flags.0?true add_contact:flags.1?true block_contact:flags.2?true share_contact:flags.3?true need_contacts_exception:flags.4?true report_geo:flags.5?true = PeerSettings;
func (m *PeerSettings) To_PeerSettings() *TLPeerSettings {
    return &TLPeerSettings{
        Data2: m.Data2,
    }
}

// peerSettings#733f2961 flags:# report_spam:flags.0?true add_contact:flags.1?true block_contact:flags.2?true share_contact:flags.3?true need_contacts_exception:flags.4?true report_geo:flags.5?true autoarchived:flags.7?true geo_distance:flags.6?int = PeerSettings;
func (m *PeerSettings) To_PeerSettings117() *TLPeerSettings117 {
    return &TLPeerSettings117{
        Data2: m.Data2,
    }
}



// peerSettings#818426cd flags:# report_spam:flags.0?true add_contact:flags.1?true block_contact:flags.2?true share_contact:flags.3?true need_contacts_exception:flags.4?true report_geo:flags.5?true = PeerSettings;
func (m *TLPeerSettings) To_PeerSettings() *PeerSettings {
    return &PeerSettings{
        Constructor: TLConstructor_CRC32_peerSettings,
        Data2: m.Data2,
    }
}


func (m *TLPeerSettings) SetReportSpam(v bool) { m.Data2.ReportSpam = v }
func (m *TLPeerSettings) GetReportSpam() bool { return m.Data2.ReportSpam }

func (m *TLPeerSettings) SetAddContact(v bool) { m.Data2.AddContact = v }
func (m *TLPeerSettings) GetAddContact() bool { return m.Data2.AddContact }

func (m *TLPeerSettings) SetBlockContact(v bool) { m.Data2.BlockContact = v }
func (m *TLPeerSettings) GetBlockContact() bool { return m.Data2.BlockContact }

func (m *TLPeerSettings) SetShareContact(v bool) { m.Data2.ShareContact = v }
func (m *TLPeerSettings) GetShareContact() bool { return m.Data2.ShareContact }

func (m *TLPeerSettings) SetNeedContactsException(v bool) { m.Data2.NeedContactsException = v }
func (m *TLPeerSettings) GetNeedContactsException() bool { return m.Data2.NeedContactsException }

func (m *TLPeerSettings) SetReportGeo(v bool) { m.Data2.ReportGeo = v }
func (m *TLPeerSettings) GetReportGeo() bool { return m.Data2.ReportGeo }


func NewTLPeerSettings() * TLPeerSettings {
    return &TLPeerSettings{ Data2: &PeerSettings_Data{} }
}

func (m* TLPeerSettings) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_peerSettings))

    // flags
    var flags uint32 = 0
    if m.GetReportSpam() == true { flags |= 1 << 0 }
    if m.GetAddContact() == true { flags |= 1 << 1 }
    if m.GetBlockContact() == true { flags |= 1 << 2 }
    if m.GetShareContact() == true { flags |= 1 << 3 }
    if m.GetNeedContactsException() == true { flags |= 1 << 4 }
    if m.GetReportGeo() == true { flags |= 1 << 5 }
	x.UInt(flags)

    
    
    
    
    
    

    return x.buf
}

func (m* TLPeerSettings) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetReportSpam(true) }
    if (flags & (1 << 1)) != 0 { m.SetAddContact(true) }
    if (flags & (1 << 2)) != 0 { m.SetBlockContact(true) }
    if (flags & (1 << 3)) != 0 { m.SetShareContact(true) }
    if (flags & (1 << 4)) != 0 { m.SetNeedContactsException(true) }
    if (flags & (1 << 5)) != 0 { m.SetReportGeo(true) }

    return dbuf.err
}
// peerSettings#733f2961 flags:# report_spam:flags.0?true add_contact:flags.1?true block_contact:flags.2?true share_contact:flags.3?true need_contacts_exception:flags.4?true report_geo:flags.5?true autoarchived:flags.7?true geo_distance:flags.6?int = PeerSettings;
func (m *TLPeerSettings117) To_PeerSettings() *PeerSettings {
    return &PeerSettings{
        Constructor: TLConstructor_CRC32_peerSettings117,
        Data2: m.Data2,
    }
}


func (m *TLPeerSettings117) SetReportSpam(v bool) { m.Data2.ReportSpam = v }
func (m *TLPeerSettings117) GetReportSpam() bool { return m.Data2.ReportSpam }

func (m *TLPeerSettings117) SetAddContact(v bool) { m.Data2.AddContact = v }
func (m *TLPeerSettings117) GetAddContact() bool { return m.Data2.AddContact }

func (m *TLPeerSettings117) SetBlockContact(v bool) { m.Data2.BlockContact = v }
func (m *TLPeerSettings117) GetBlockContact() bool { return m.Data2.BlockContact }

func (m *TLPeerSettings117) SetShareContact(v bool) { m.Data2.ShareContact = v }
func (m *TLPeerSettings117) GetShareContact() bool { return m.Data2.ShareContact }

func (m *TLPeerSettings117) SetNeedContactsException(v bool) { m.Data2.NeedContactsException = v }
func (m *TLPeerSettings117) GetNeedContactsException() bool { return m.Data2.NeedContactsException }

func (m *TLPeerSettings117) SetReportGeo(v bool) { m.Data2.ReportGeo = v }
func (m *TLPeerSettings117) GetReportGeo() bool { return m.Data2.ReportGeo }

func (m *TLPeerSettings117) SetAutoarchived(v bool) { m.Data2.Autoarchived = v }
func (m *TLPeerSettings117) GetAutoarchived() bool { return m.Data2.Autoarchived }

func (m *TLPeerSettings117) SetGeoDistance(v int32) { m.Data2.GeoDistance = v }
func (m *TLPeerSettings117) GetGeoDistance() int32 { return m.Data2.GeoDistance }


func NewTLPeerSettings117() * TLPeerSettings117 {
    return &TLPeerSettings117{ Data2: &PeerSettings_Data{} }
}

func (m* TLPeerSettings117) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_peerSettings117))

    // flags
    var flags uint32 = 0
    if m.GetReportSpam() == true { flags |= 1 << 0 }
    if m.GetAddContact() == true { flags |= 1 << 1 }
    if m.GetBlockContact() == true { flags |= 1 << 2 }
    if m.GetShareContact() == true { flags |= 1 << 3 }
    if m.GetNeedContactsException() == true { flags |= 1 << 4 }
    if m.GetReportGeo() == true { flags |= 1 << 5 }
    if m.GetAutoarchived() == true { flags |= 1 << 7 }
    if m.GetGeoDistance() != 0 { flags |= 1 << 6 }
	x.UInt(flags)

    
    
    
    
    
    
    
    if (flags & (1 << 6)) != 0 { x.Int(m.GetGeoDistance()) }

    return x.buf
}

func (m* TLPeerSettings117) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetReportSpam(true) }
    if (flags & (1 << 1)) != 0 { m.SetAddContact(true) }
    if (flags & (1 << 2)) != 0 { m.SetBlockContact(true) }
    if (flags & (1 << 3)) != 0 { m.SetShareContact(true) }
    if (flags & (1 << 4)) != 0 { m.SetNeedContactsException(true) }
    if (flags & (1 << 5)) != 0 { m.SetReportGeo(true) }
    if (flags & (1 << 7)) != 0 { m.SetAutoarchived(true) }
    if (flags & (1 << 6)) != 0 { m.SetGeoDistance(dbuf.Int()) }

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// NearestDc <--
//  + TL_NearestDc
//

func (m *NearestDc) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_nearestDc:
        t := m.To_NearestDc()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *NearestDc) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_nearestDc:
        m2 := &TLNearestDc{&NearestDc_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// nearestDc#8e1a1775 country:string this_dc:int nearest_dc:int = NearestDc;
func (m *NearestDc) To_NearestDc() *TLNearestDc {
    return &TLNearestDc{
        Data2: m.Data2,
    }
}



// nearestDc#8e1a1775 country:string this_dc:int nearest_dc:int = NearestDc;
func (m *TLNearestDc) To_NearestDc() *NearestDc {
    return &NearestDc{
        Constructor: TLConstructor_CRC32_nearestDc,
        Data2: m.Data2,
    }
}


func (m *TLNearestDc) SetCountry(v string) { m.Data2.Country = v }
func (m *TLNearestDc) GetCountry() string { return m.Data2.Country }

func (m *TLNearestDc) SetThisDc(v int32) { m.Data2.ThisDc = v }
func (m *TLNearestDc) GetThisDc() int32 { return m.Data2.ThisDc }

func (m *TLNearestDc) SetNearestDc(v int32) { m.Data2.NearestDc = v }
func (m *TLNearestDc) GetNearestDc() int32 { return m.Data2.NearestDc }


func NewTLNearestDc() * TLNearestDc {
    return &TLNearestDc{ Data2: &NearestDc_Data{} }
}

func (m* TLNearestDc) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_nearestDc))

    x.String(m.GetCountry())
    x.Int(m.GetThisDc())
    x.Int(m.GetNearestDc())

    return x.buf
}

func (m* TLNearestDc) Decode(dbuf *DecodeBuf) error {
    m.SetCountry(dbuf.String())
    m.SetThisDc(dbuf.Int())
    m.SetNearestDc(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputPrivacyKey <--
//  + TL_InputPrivacyKeyStatusTimestamp
//  + TL_InputPrivacyKeyChatInvite
//  + TL_InputPrivacyKeyPhoneCall
//  + TL_InputPrivacyKeyPhoneP2P
//  + TL_InputPrivacyKeyForwards
//  + TL_InputPrivacyKeyProfilePhoto
//  + TL_InputPrivacyKeyPhoneNumber
//  + TL_InputPrivacyKeyAddedByPhone
//

func (m *InputPrivacyKey) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputPrivacyKeyStatusTimestamp:
        t := m.To_InputPrivacyKeyStatusTimestamp()
        return t.Encode()
    case TLConstructor_CRC32_inputPrivacyKeyChatInvite:
        t := m.To_InputPrivacyKeyChatInvite()
        return t.Encode()
    case TLConstructor_CRC32_inputPrivacyKeyPhoneCall:
        t := m.To_InputPrivacyKeyPhoneCall()
        return t.Encode()
    case TLConstructor_CRC32_inputPrivacyKeyPhoneP2P:
        t := m.To_InputPrivacyKeyPhoneP2P()
        return t.Encode()
    case TLConstructor_CRC32_inputPrivacyKeyForwards:
        t := m.To_InputPrivacyKeyForwards()
        return t.Encode()
    case TLConstructor_CRC32_inputPrivacyKeyProfilePhoto:
        t := m.To_InputPrivacyKeyProfilePhoto()
        return t.Encode()
    case TLConstructor_CRC32_inputPrivacyKeyPhoneNumber:
        t := m.To_InputPrivacyKeyPhoneNumber()
        return t.Encode()
    case TLConstructor_CRC32_inputPrivacyKeyAddedByPhone:
        t := m.To_InputPrivacyKeyAddedByPhone()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputPrivacyKey) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputPrivacyKeyStatusTimestamp:
        m2 := &TLInputPrivacyKeyStatusTimestamp{&InputPrivacyKey_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputPrivacyKeyChatInvite:
        m2 := &TLInputPrivacyKeyChatInvite{&InputPrivacyKey_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputPrivacyKeyPhoneCall:
        m2 := &TLInputPrivacyKeyPhoneCall{&InputPrivacyKey_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputPrivacyKeyPhoneP2P:
        m2 := &TLInputPrivacyKeyPhoneP2P{&InputPrivacyKey_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputPrivacyKeyForwards:
        m2 := &TLInputPrivacyKeyForwards{&InputPrivacyKey_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputPrivacyKeyProfilePhoto:
        m2 := &TLInputPrivacyKeyProfilePhoto{&InputPrivacyKey_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputPrivacyKeyPhoneNumber:
        m2 := &TLInputPrivacyKeyPhoneNumber{&InputPrivacyKey_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputPrivacyKeyAddedByPhone:
        m2 := &TLInputPrivacyKeyAddedByPhone{&InputPrivacyKey_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputPrivacyKeyStatusTimestamp#4f96cb18 = InputPrivacyKey;
func (m *InputPrivacyKey) To_InputPrivacyKeyStatusTimestamp() *TLInputPrivacyKeyStatusTimestamp {
    return &TLInputPrivacyKeyStatusTimestamp{
        Data2: m.Data2,
    }
}

// inputPrivacyKeyChatInvite#bdfb0426 = InputPrivacyKey;
func (m *InputPrivacyKey) To_InputPrivacyKeyChatInvite() *TLInputPrivacyKeyChatInvite {
    return &TLInputPrivacyKeyChatInvite{
        Data2: m.Data2,
    }
}

// inputPrivacyKeyPhoneCall#fabadc5f = InputPrivacyKey;
func (m *InputPrivacyKey) To_InputPrivacyKeyPhoneCall() *TLInputPrivacyKeyPhoneCall {
    return &TLInputPrivacyKeyPhoneCall{
        Data2: m.Data2,
    }
}

// inputPrivacyKeyPhoneP2P#db9e70d2 = InputPrivacyKey;
func (m *InputPrivacyKey) To_InputPrivacyKeyPhoneP2P() *TLInputPrivacyKeyPhoneP2P {
    return &TLInputPrivacyKeyPhoneP2P{
        Data2: m.Data2,
    }
}

// inputPrivacyKeyForwards#a4dd4c08 = InputPrivacyKey;
func (m *InputPrivacyKey) To_InputPrivacyKeyForwards() *TLInputPrivacyKeyForwards {
    return &TLInputPrivacyKeyForwards{
        Data2: m.Data2,
    }
}

// inputPrivacyKeyProfilePhoto#5719bacc = InputPrivacyKey;
func (m *InputPrivacyKey) To_InputPrivacyKeyProfilePhoto() *TLInputPrivacyKeyProfilePhoto {
    return &TLInputPrivacyKeyProfilePhoto{
        Data2: m.Data2,
    }
}

// inputPrivacyKeyPhoneNumber#352dafa = InputPrivacyKey;
func (m *InputPrivacyKey) To_InputPrivacyKeyPhoneNumber() *TLInputPrivacyKeyPhoneNumber {
    return &TLInputPrivacyKeyPhoneNumber{
        Data2: m.Data2,
    }
}

// inputPrivacyKeyAddedByPhone#d1219bdd = InputPrivacyKey;
func (m *InputPrivacyKey) To_InputPrivacyKeyAddedByPhone() *TLInputPrivacyKeyAddedByPhone {
    return &TLInputPrivacyKeyAddedByPhone{
        Data2: m.Data2,
    }
}



// inputPrivacyKeyStatusTimestamp#4f96cb18 = InputPrivacyKey;
func (m *TLInputPrivacyKeyStatusTimestamp) To_InputPrivacyKey() *InputPrivacyKey {
    return &InputPrivacyKey{
        Constructor: TLConstructor_CRC32_inputPrivacyKeyStatusTimestamp,
        Data2: m.Data2,
    }
}



func NewTLInputPrivacyKeyStatusTimestamp() * TLInputPrivacyKeyStatusTimestamp {
    return &TLInputPrivacyKeyStatusTimestamp{ Data2: &InputPrivacyKey_Data{} }
}

func (m* TLInputPrivacyKeyStatusTimestamp) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPrivacyKeyStatusTimestamp))


    return x.buf
}

func (m* TLInputPrivacyKeyStatusTimestamp) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputPrivacyKeyChatInvite#bdfb0426 = InputPrivacyKey;
func (m *TLInputPrivacyKeyChatInvite) To_InputPrivacyKey() *InputPrivacyKey {
    return &InputPrivacyKey{
        Constructor: TLConstructor_CRC32_inputPrivacyKeyChatInvite,
        Data2: m.Data2,
    }
}



func NewTLInputPrivacyKeyChatInvite() * TLInputPrivacyKeyChatInvite {
    return &TLInputPrivacyKeyChatInvite{ Data2: &InputPrivacyKey_Data{} }
}

func (m* TLInputPrivacyKeyChatInvite) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPrivacyKeyChatInvite))


    return x.buf
}

func (m* TLInputPrivacyKeyChatInvite) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputPrivacyKeyPhoneCall#fabadc5f = InputPrivacyKey;
func (m *TLInputPrivacyKeyPhoneCall) To_InputPrivacyKey() *InputPrivacyKey {
    return &InputPrivacyKey{
        Constructor: TLConstructor_CRC32_inputPrivacyKeyPhoneCall,
        Data2: m.Data2,
    }
}



func NewTLInputPrivacyKeyPhoneCall() * TLInputPrivacyKeyPhoneCall {
    return &TLInputPrivacyKeyPhoneCall{ Data2: &InputPrivacyKey_Data{} }
}

func (m* TLInputPrivacyKeyPhoneCall) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPrivacyKeyPhoneCall))


    return x.buf
}

func (m* TLInputPrivacyKeyPhoneCall) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputPrivacyKeyPhoneP2P#db9e70d2 = InputPrivacyKey;
func (m *TLInputPrivacyKeyPhoneP2P) To_InputPrivacyKey() *InputPrivacyKey {
    return &InputPrivacyKey{
        Constructor: TLConstructor_CRC32_inputPrivacyKeyPhoneP2P,
        Data2: m.Data2,
    }
}



func NewTLInputPrivacyKeyPhoneP2P() * TLInputPrivacyKeyPhoneP2P {
    return &TLInputPrivacyKeyPhoneP2P{ Data2: &InputPrivacyKey_Data{} }
}

func (m* TLInputPrivacyKeyPhoneP2P) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPrivacyKeyPhoneP2P))


    return x.buf
}

func (m* TLInputPrivacyKeyPhoneP2P) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputPrivacyKeyForwards#a4dd4c08 = InputPrivacyKey;
func (m *TLInputPrivacyKeyForwards) To_InputPrivacyKey() *InputPrivacyKey {
    return &InputPrivacyKey{
        Constructor: TLConstructor_CRC32_inputPrivacyKeyForwards,
        Data2: m.Data2,
    }
}



func NewTLInputPrivacyKeyForwards() * TLInputPrivacyKeyForwards {
    return &TLInputPrivacyKeyForwards{ Data2: &InputPrivacyKey_Data{} }
}

func (m* TLInputPrivacyKeyForwards) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPrivacyKeyForwards))


    return x.buf
}

func (m* TLInputPrivacyKeyForwards) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputPrivacyKeyProfilePhoto#5719bacc = InputPrivacyKey;
func (m *TLInputPrivacyKeyProfilePhoto) To_InputPrivacyKey() *InputPrivacyKey {
    return &InputPrivacyKey{
        Constructor: TLConstructor_CRC32_inputPrivacyKeyProfilePhoto,
        Data2: m.Data2,
    }
}



func NewTLInputPrivacyKeyProfilePhoto() * TLInputPrivacyKeyProfilePhoto {
    return &TLInputPrivacyKeyProfilePhoto{ Data2: &InputPrivacyKey_Data{} }
}

func (m* TLInputPrivacyKeyProfilePhoto) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPrivacyKeyProfilePhoto))


    return x.buf
}

func (m* TLInputPrivacyKeyProfilePhoto) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputPrivacyKeyPhoneNumber#352dafa = InputPrivacyKey;
func (m *TLInputPrivacyKeyPhoneNumber) To_InputPrivacyKey() *InputPrivacyKey {
    return &InputPrivacyKey{
        Constructor: TLConstructor_CRC32_inputPrivacyKeyPhoneNumber,
        Data2: m.Data2,
    }
}



func NewTLInputPrivacyKeyPhoneNumber() * TLInputPrivacyKeyPhoneNumber {
    return &TLInputPrivacyKeyPhoneNumber{ Data2: &InputPrivacyKey_Data{} }
}

func (m* TLInputPrivacyKeyPhoneNumber) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPrivacyKeyPhoneNumber))


    return x.buf
}

func (m* TLInputPrivacyKeyPhoneNumber) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputPrivacyKeyAddedByPhone#d1219bdd = InputPrivacyKey;
func (m *TLInputPrivacyKeyAddedByPhone) To_InputPrivacyKey() *InputPrivacyKey {
    return &InputPrivacyKey{
        Constructor: TLConstructor_CRC32_inputPrivacyKeyAddedByPhone,
        Data2: m.Data2,
    }
}



func NewTLInputPrivacyKeyAddedByPhone() * TLInputPrivacyKeyAddedByPhone {
    return &TLInputPrivacyKeyAddedByPhone{ Data2: &InputPrivacyKey_Data{} }
}

func (m* TLInputPrivacyKeyAddedByPhone) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPrivacyKeyAddedByPhone))


    return x.buf
}

func (m* TLInputPrivacyKeyAddedByPhone) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputPrivacyRule <--
//  + TL_InputPrivacyValueAllowContacts
//  + TL_InputPrivacyValueAllowAll
//  + TL_InputPrivacyValueAllowUsers
//  + TL_InputPrivacyValueDisallowContacts
//  + TL_InputPrivacyValueDisallowAll
//  + TL_InputPrivacyValueDisallowUsers
//  + TL_InputPrivacyValueAllowChatParticipants
//  + TL_InputPrivacyValueDisallowChatParticipants
//

func (m *InputPrivacyRule) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputPrivacyValueAllowContacts:
        t := m.To_InputPrivacyValueAllowContacts()
        return t.Encode()
    case TLConstructor_CRC32_inputPrivacyValueAllowAll:
        t := m.To_InputPrivacyValueAllowAll()
        return t.Encode()
    case TLConstructor_CRC32_inputPrivacyValueAllowUsers:
        t := m.To_InputPrivacyValueAllowUsers()
        return t.Encode()
    case TLConstructor_CRC32_inputPrivacyValueDisallowContacts:
        t := m.To_InputPrivacyValueDisallowContacts()
        return t.Encode()
    case TLConstructor_CRC32_inputPrivacyValueDisallowAll:
        t := m.To_InputPrivacyValueDisallowAll()
        return t.Encode()
    case TLConstructor_CRC32_inputPrivacyValueDisallowUsers:
        t := m.To_InputPrivacyValueDisallowUsers()
        return t.Encode()
    case TLConstructor_CRC32_inputPrivacyValueAllowChatParticipants:
        t := m.To_InputPrivacyValueAllowChatParticipants()
        return t.Encode()
    case TLConstructor_CRC32_inputPrivacyValueDisallowChatParticipants:
        t := m.To_InputPrivacyValueDisallowChatParticipants()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputPrivacyRule) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputPrivacyValueAllowContacts:
        m2 := &TLInputPrivacyValueAllowContacts{&InputPrivacyRule_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputPrivacyValueAllowAll:
        m2 := &TLInputPrivacyValueAllowAll{&InputPrivacyRule_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputPrivacyValueAllowUsers:
        m2 := &TLInputPrivacyValueAllowUsers{&InputPrivacyRule_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputPrivacyValueDisallowContacts:
        m2 := &TLInputPrivacyValueDisallowContacts{&InputPrivacyRule_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputPrivacyValueDisallowAll:
        m2 := &TLInputPrivacyValueDisallowAll{&InputPrivacyRule_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputPrivacyValueDisallowUsers:
        m2 := &TLInputPrivacyValueDisallowUsers{&InputPrivacyRule_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputPrivacyValueAllowChatParticipants:
        m2 := &TLInputPrivacyValueAllowChatParticipants{&InputPrivacyRule_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputPrivacyValueDisallowChatParticipants:
        m2 := &TLInputPrivacyValueDisallowChatParticipants{&InputPrivacyRule_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputPrivacyValueAllowContacts#d09e07b = InputPrivacyRule;
func (m *InputPrivacyRule) To_InputPrivacyValueAllowContacts() *TLInputPrivacyValueAllowContacts {
    return &TLInputPrivacyValueAllowContacts{
        Data2: m.Data2,
    }
}

// inputPrivacyValueAllowAll#184b35ce = InputPrivacyRule;
func (m *InputPrivacyRule) To_InputPrivacyValueAllowAll() *TLInputPrivacyValueAllowAll {
    return &TLInputPrivacyValueAllowAll{
        Data2: m.Data2,
    }
}

// inputPrivacyValueAllowUsers#131cc67f users:Vector<InputUser> = InputPrivacyRule;
func (m *InputPrivacyRule) To_InputPrivacyValueAllowUsers() *TLInputPrivacyValueAllowUsers {
    return &TLInputPrivacyValueAllowUsers{
        Data2: m.Data2,
    }
}

// inputPrivacyValueDisallowContacts#ba52007 = InputPrivacyRule;
func (m *InputPrivacyRule) To_InputPrivacyValueDisallowContacts() *TLInputPrivacyValueDisallowContacts {
    return &TLInputPrivacyValueDisallowContacts{
        Data2: m.Data2,
    }
}

// inputPrivacyValueDisallowAll#d66b66c9 = InputPrivacyRule;
func (m *InputPrivacyRule) To_InputPrivacyValueDisallowAll() *TLInputPrivacyValueDisallowAll {
    return &TLInputPrivacyValueDisallowAll{
        Data2: m.Data2,
    }
}

// inputPrivacyValueDisallowUsers#90110467 users:Vector<InputUser> = InputPrivacyRule;
func (m *InputPrivacyRule) To_InputPrivacyValueDisallowUsers() *TLInputPrivacyValueDisallowUsers {
    return &TLInputPrivacyValueDisallowUsers{
        Data2: m.Data2,
    }
}

// inputPrivacyValueAllowChatParticipants#4c81c1ba chats:Vector<int> = InputPrivacyRule;
func (m *InputPrivacyRule) To_InputPrivacyValueAllowChatParticipants() *TLInputPrivacyValueAllowChatParticipants {
    return &TLInputPrivacyValueAllowChatParticipants{
        Data2: m.Data2,
    }
}

// inputPrivacyValueDisallowChatParticipants#d82363af chats:Vector<int> = InputPrivacyRule;
func (m *InputPrivacyRule) To_InputPrivacyValueDisallowChatParticipants() *TLInputPrivacyValueDisallowChatParticipants {
    return &TLInputPrivacyValueDisallowChatParticipants{
        Data2: m.Data2,
    }
}



// inputPrivacyValueAllowContacts#d09e07b = InputPrivacyRule;
func (m *TLInputPrivacyValueAllowContacts) To_InputPrivacyRule() *InputPrivacyRule {
    return &InputPrivacyRule{
        Constructor: TLConstructor_CRC32_inputPrivacyValueAllowContacts,
        Data2: m.Data2,
    }
}



func NewTLInputPrivacyValueAllowContacts() * TLInputPrivacyValueAllowContacts {
    return &TLInputPrivacyValueAllowContacts{ Data2: &InputPrivacyRule_Data{} }
}

func (m* TLInputPrivacyValueAllowContacts) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPrivacyValueAllowContacts))


    return x.buf
}

func (m* TLInputPrivacyValueAllowContacts) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputPrivacyValueAllowAll#184b35ce = InputPrivacyRule;
func (m *TLInputPrivacyValueAllowAll) To_InputPrivacyRule() *InputPrivacyRule {
    return &InputPrivacyRule{
        Constructor: TLConstructor_CRC32_inputPrivacyValueAllowAll,
        Data2: m.Data2,
    }
}



func NewTLInputPrivacyValueAllowAll() * TLInputPrivacyValueAllowAll {
    return &TLInputPrivacyValueAllowAll{ Data2: &InputPrivacyRule_Data{} }
}

func (m* TLInputPrivacyValueAllowAll) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPrivacyValueAllowAll))


    return x.buf
}

func (m* TLInputPrivacyValueAllowAll) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputPrivacyValueAllowUsers#131cc67f users:Vector<InputUser> = InputPrivacyRule;
func (m *TLInputPrivacyValueAllowUsers) To_InputPrivacyRule() *InputPrivacyRule {
    return &InputPrivacyRule{
        Constructor: TLConstructor_CRC32_inputPrivacyValueAllowUsers,
        Data2: m.Data2,
    }
}


func (m *TLInputPrivacyValueAllowUsers) SetUsers(v []*InputUser) { m.Data2.Users = v }
func (m *TLInputPrivacyValueAllowUsers) GetUsers() []*InputUser { return m.Data2.Users }


func NewTLInputPrivacyValueAllowUsers() * TLInputPrivacyValueAllowUsers {
    return &TLInputPrivacyValueAllowUsers{ Data2: &InputPrivacyRule_Data{} }
}

func (m* TLInputPrivacyValueAllowUsers) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPrivacyValueAllowUsers))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLInputPrivacyValueAllowUsers) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*InputUser, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &InputUser{}
	v1[i].Decode(dbuf)
}
m.SetUsers(v1)


    return dbuf.err
}
// inputPrivacyValueDisallowContacts#ba52007 = InputPrivacyRule;
func (m *TLInputPrivacyValueDisallowContacts) To_InputPrivacyRule() *InputPrivacyRule {
    return &InputPrivacyRule{
        Constructor: TLConstructor_CRC32_inputPrivacyValueDisallowContacts,
        Data2: m.Data2,
    }
}



func NewTLInputPrivacyValueDisallowContacts() * TLInputPrivacyValueDisallowContacts {
    return &TLInputPrivacyValueDisallowContacts{ Data2: &InputPrivacyRule_Data{} }
}

func (m* TLInputPrivacyValueDisallowContacts) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPrivacyValueDisallowContacts))


    return x.buf
}

func (m* TLInputPrivacyValueDisallowContacts) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputPrivacyValueDisallowAll#d66b66c9 = InputPrivacyRule;
func (m *TLInputPrivacyValueDisallowAll) To_InputPrivacyRule() *InputPrivacyRule {
    return &InputPrivacyRule{
        Constructor: TLConstructor_CRC32_inputPrivacyValueDisallowAll,
        Data2: m.Data2,
    }
}



func NewTLInputPrivacyValueDisallowAll() * TLInputPrivacyValueDisallowAll {
    return &TLInputPrivacyValueDisallowAll{ Data2: &InputPrivacyRule_Data{} }
}

func (m* TLInputPrivacyValueDisallowAll) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPrivacyValueDisallowAll))


    return x.buf
}

func (m* TLInputPrivacyValueDisallowAll) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputPrivacyValueDisallowUsers#90110467 users:Vector<InputUser> = InputPrivacyRule;
func (m *TLInputPrivacyValueDisallowUsers) To_InputPrivacyRule() *InputPrivacyRule {
    return &InputPrivacyRule{
        Constructor: TLConstructor_CRC32_inputPrivacyValueDisallowUsers,
        Data2: m.Data2,
    }
}


func (m *TLInputPrivacyValueDisallowUsers) SetUsers(v []*InputUser) { m.Data2.Users = v }
func (m *TLInputPrivacyValueDisallowUsers) GetUsers() []*InputUser { return m.Data2.Users }


func NewTLInputPrivacyValueDisallowUsers() * TLInputPrivacyValueDisallowUsers {
    return &TLInputPrivacyValueDisallowUsers{ Data2: &InputPrivacyRule_Data{} }
}

func (m* TLInputPrivacyValueDisallowUsers) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPrivacyValueDisallowUsers))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLInputPrivacyValueDisallowUsers) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*InputUser, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &InputUser{}
	v1[i].Decode(dbuf)
}
m.SetUsers(v1)


    return dbuf.err
}
// inputPrivacyValueAllowChatParticipants#4c81c1ba chats:Vector<int> = InputPrivacyRule;
func (m *TLInputPrivacyValueAllowChatParticipants) To_InputPrivacyRule() *InputPrivacyRule {
    return &InputPrivacyRule{
        Constructor: TLConstructor_CRC32_inputPrivacyValueAllowChatParticipants,
        Data2: m.Data2,
    }
}


func (m *TLInputPrivacyValueAllowChatParticipants) SetChats(v []int32) { m.Data2.Chats = v }
func (m *TLInputPrivacyValueAllowChatParticipants) GetChats() []int32 { return m.Data2.Chats }


func NewTLInputPrivacyValueAllowChatParticipants() * TLInputPrivacyValueAllowChatParticipants {
    return &TLInputPrivacyValueAllowChatParticipants{ Data2: &InputPrivacyRule_Data{} }
}

func (m* TLInputPrivacyValueAllowChatParticipants) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPrivacyValueAllowChatParticipants))

    x.VectorInt(m.GetChats())


    return x.buf
}

func (m* TLInputPrivacyValueAllowChatParticipants) Decode(dbuf *DecodeBuf) error {
    m.SetChats(dbuf.VectorInt())

    return dbuf.err
}
// inputPrivacyValueDisallowChatParticipants#d82363af chats:Vector<int> = InputPrivacyRule;
func (m *TLInputPrivacyValueDisallowChatParticipants) To_InputPrivacyRule() *InputPrivacyRule {
    return &InputPrivacyRule{
        Constructor: TLConstructor_CRC32_inputPrivacyValueDisallowChatParticipants,
        Data2: m.Data2,
    }
}


func (m *TLInputPrivacyValueDisallowChatParticipants) SetChats(v []int32) { m.Data2.Chats = v }
func (m *TLInputPrivacyValueDisallowChatParticipants) GetChats() []int32 { return m.Data2.Chats }


func NewTLInputPrivacyValueDisallowChatParticipants() * TLInputPrivacyValueDisallowChatParticipants {
    return &TLInputPrivacyValueDisallowChatParticipants{ Data2: &InputPrivacyRule_Data{} }
}

func (m* TLInputPrivacyValueDisallowChatParticipants) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPrivacyValueDisallowChatParticipants))

    x.VectorInt(m.GetChats())


    return x.buf
}

func (m* TLInputPrivacyValueDisallowChatParticipants) Decode(dbuf *DecodeBuf) error {
    m.SetChats(dbuf.VectorInt())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// ChatInvite <--
//  + TL_ChatInviteAlready
//  + TL_ChatInvite
//  + TL_ChatInvite114
//  + TL_ChatInvitePeek
//

func (m *ChatInvite) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_chatInviteAlready:
        t := m.To_ChatInviteAlready()
        return t.Encode()
    case TLConstructor_CRC32_chatInvite:
        t := m.To_ChatInvite()
        return t.Encode()
    case TLConstructor_CRC32_chatInvite114:
        t := m.To_ChatInvite114()
        return t.Encode()
    case TLConstructor_CRC32_chatInvitePeek:
        t := m.To_ChatInvitePeek()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *ChatInvite) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_chatInviteAlready:
        m2 := &TLChatInviteAlready{&ChatInvite_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_chatInvite:
        m2 := &TLChatInvite{&ChatInvite_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_chatInvite114:
        m2 := &TLChatInvite114{&ChatInvite_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_chatInvitePeek:
        m2 := &TLChatInvitePeek{&ChatInvite_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// chatInviteAlready#5a686d7c chat:Chat = ChatInvite;
func (m *ChatInvite) To_ChatInviteAlready() *TLChatInviteAlready {
    return &TLChatInviteAlready{
        Data2: m.Data2,
    }
}

// chatInvite#db74f558 flags:# channel:flags.0?true broadcast:flags.1?true public:flags.2?true megagroup:flags.3?true title:string photo:ChatPhoto participants_count:int participants:flags.4?Vector<User> = ChatInvite;
func (m *ChatInvite) To_ChatInvite() *TLChatInvite {
    return &TLChatInvite{
        Data2: m.Data2,
    }
}

// chatInvite#dfc2f58e flags:# channel:flags.0?true broadcast:flags.1?true public:flags.2?true megagroup:flags.3?true title:string photo:Photo participants_count:int participants:flags.4?Vector<User> = ChatInvite;
func (m *ChatInvite) To_ChatInvite114() *TLChatInvite114 {
    return &TLChatInvite114{
        Data2: m.Data2,
    }
}

// chatInvitePeek#61695cb0 chat:Chat expires:int = ChatInvite;
func (m *ChatInvite) To_ChatInvitePeek() *TLChatInvitePeek {
    return &TLChatInvitePeek{
        Data2: m.Data2,
    }
}



// chatInviteAlready#5a686d7c chat:Chat = ChatInvite;
func (m *TLChatInviteAlready) To_ChatInvite() *ChatInvite {
    return &ChatInvite{
        Constructor: TLConstructor_CRC32_chatInviteAlready,
        Data2: m.Data2,
    }
}


func (m *TLChatInviteAlready) SetChat(v *Chat) { m.Data2.Chat = v }
func (m *TLChatInviteAlready) GetChat() *Chat { return m.Data2.Chat }


func NewTLChatInviteAlready() * TLChatInviteAlready {
    return &TLChatInviteAlready{ Data2: &ChatInvite_Data{} }
}

func (m* TLChatInviteAlready) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_chatInviteAlready))

    x.Bytes(m.GetChat().Encode())

    return x.buf
}

func (m* TLChatInviteAlready) Decode(dbuf *DecodeBuf) error {
    m1 := &Chat{}
    m1.Decode(dbuf)
    m.SetChat(m1)

    return dbuf.err
}
// chatInvite#db74f558 flags:# channel:flags.0?true broadcast:flags.1?true public:flags.2?true megagroup:flags.3?true title:string photo:ChatPhoto participants_count:int participants:flags.4?Vector<User> = ChatInvite;
func (m *TLChatInvite) To_ChatInvite() *ChatInvite {
    return &ChatInvite{
        Constructor: TLConstructor_CRC32_chatInvite,
        Data2: m.Data2,
    }
}


func (m *TLChatInvite) SetChannel(v bool) { m.Data2.Channel = v }
func (m *TLChatInvite) GetChannel() bool { return m.Data2.Channel }

func (m *TLChatInvite) SetBroadcast(v bool) { m.Data2.Broadcast = v }
func (m *TLChatInvite) GetBroadcast() bool { return m.Data2.Broadcast }

func (m *TLChatInvite) SetPublic(v bool) { m.Data2.Public = v }
func (m *TLChatInvite) GetPublic() bool { return m.Data2.Public }

func (m *TLChatInvite) SetMegagroup(v bool) { m.Data2.Megagroup = v }
func (m *TLChatInvite) GetMegagroup() bool { return m.Data2.Megagroup }

func (m *TLChatInvite) SetTitle(v string) { m.Data2.Title = v }
func (m *TLChatInvite) GetTitle() string { return m.Data2.Title }

func (m *TLChatInvite) SetPhoto(v *ChatPhoto) { m.Data2.Photo_7 = v }
func (m *TLChatInvite) GetPhoto() *ChatPhoto { return m.Data2.Photo_7 }

func (m *TLChatInvite) SetParticipantsCount(v int32) { m.Data2.ParticipantsCount = v }
func (m *TLChatInvite) GetParticipantsCount() int32 { return m.Data2.ParticipantsCount }

func (m *TLChatInvite) SetParticipants(v []*User) { m.Data2.Participants = v }
func (m *TLChatInvite) GetParticipants() []*User { return m.Data2.Participants }


func NewTLChatInvite() * TLChatInvite {
    return &TLChatInvite{ Data2: &ChatInvite_Data{} }
}

func (m* TLChatInvite) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_chatInvite))

    // flags
    var flags uint32 = 0
    if m.GetChannel() == true { flags |= 1 << 0 }
    if m.GetBroadcast() == true { flags |= 1 << 1 }
    if m.GetPublic() == true { flags |= 1 << 2 }
    if m.GetMegagroup() == true { flags |= 1 << 3 }
    if m.GetParticipants() != nil { flags |= 1 << 4 }
	x.UInt(flags)

    
    
    
    
    x.String(m.GetTitle())
    x.Bytes(m.GetPhoto().Encode())
    x.Int(m.GetParticipantsCount())
    if (flags & (1 << 4)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetParticipants())))
for _, v := range m.GetParticipants() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}

    return x.buf
}

func (m* TLChatInvite) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetChannel(true) }
    if (flags & (1 << 1)) != 0 { m.SetBroadcast(true) }
    if (flags & (1 << 2)) != 0 { m.SetPublic(true) }
    if (flags & (1 << 3)) != 0 { m.SetMegagroup(true) }
    m.SetTitle(dbuf.String())
    m7 := &ChatPhoto{}
    m7.Decode(dbuf)
    m.SetPhoto(m7)
    m.SetParticipantsCount(dbuf.Int())
    if (flags & (1 << 4)) != 0 {
 c9 := dbuf.Int()
if c9 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 9, c9)
	return dbuf.err
}
l9 := dbuf.Int()
v9 := make([]*User, l9)
for i := int32(0); i < l9; i++ {
	v9[i] = &User{}
	v9[i].Decode(dbuf)
}
m.SetParticipants(v9)
 
}

    return dbuf.err
}
// chatInvite#dfc2f58e flags:# channel:flags.0?true broadcast:flags.1?true public:flags.2?true megagroup:flags.3?true title:string photo:Photo participants_count:int participants:flags.4?Vector<User> = ChatInvite;
func (m *TLChatInvite114) To_ChatInvite() *ChatInvite {
    return &ChatInvite{
        Constructor: TLConstructor_CRC32_chatInvite114,
        Data2: m.Data2,
    }
}


func (m *TLChatInvite114) SetChannel(v bool) { m.Data2.Channel = v }
func (m *TLChatInvite114) GetChannel() bool { return m.Data2.Channel }

func (m *TLChatInvite114) SetBroadcast(v bool) { m.Data2.Broadcast = v }
func (m *TLChatInvite114) GetBroadcast() bool { return m.Data2.Broadcast }

func (m *TLChatInvite114) SetPublic(v bool) { m.Data2.Public = v }
func (m *TLChatInvite114) GetPublic() bool { return m.Data2.Public }

func (m *TLChatInvite114) SetMegagroup(v bool) { m.Data2.Megagroup = v }
func (m *TLChatInvite114) GetMegagroup() bool { return m.Data2.Megagroup }

func (m *TLChatInvite114) SetTitle(v string) { m.Data2.Title = v }
func (m *TLChatInvite114) GetTitle() string { return m.Data2.Title }

func (m *TLChatInvite114) SetPhoto(v *Photo) { m.Data2.Photo_10 = v }
func (m *TLChatInvite114) GetPhoto() *Photo { return m.Data2.Photo_10 }

func (m *TLChatInvite114) SetParticipantsCount(v int32) { m.Data2.ParticipantsCount = v }
func (m *TLChatInvite114) GetParticipantsCount() int32 { return m.Data2.ParticipantsCount }

func (m *TLChatInvite114) SetParticipants(v []*User) { m.Data2.Participants = v }
func (m *TLChatInvite114) GetParticipants() []*User { return m.Data2.Participants }


func NewTLChatInvite114() * TLChatInvite114 {
    return &TLChatInvite114{ Data2: &ChatInvite_Data{} }
}

func (m* TLChatInvite114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_chatInvite114))

    // flags
    var flags uint32 = 0
    if m.GetChannel() == true { flags |= 1 << 0 }
    if m.GetBroadcast() == true { flags |= 1 << 1 }
    if m.GetPublic() == true { flags |= 1 << 2 }
    if m.GetMegagroup() == true { flags |= 1 << 3 }
    if m.GetParticipants() != nil { flags |= 1 << 4 }
	x.UInt(flags)

    
    
    
    
    x.String(m.GetTitle())
    x.Bytes(m.GetPhoto().Encode())
    x.Int(m.GetParticipantsCount())
    if (flags & (1 << 4)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetParticipants())))
for _, v := range m.GetParticipants() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}

    return x.buf
}

func (m* TLChatInvite114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetChannel(true) }
    if (flags & (1 << 1)) != 0 { m.SetBroadcast(true) }
    if (flags & (1 << 2)) != 0 { m.SetPublic(true) }
    if (flags & (1 << 3)) != 0 { m.SetMegagroup(true) }
    m.SetTitle(dbuf.String())
    m7 := &Photo{}
    m7.Decode(dbuf)
    m.SetPhoto(m7)
    m.SetParticipantsCount(dbuf.Int())
    if (flags & (1 << 4)) != 0 {
 c9 := dbuf.Int()
if c9 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 9, c9)
	return dbuf.err
}
l9 := dbuf.Int()
v9 := make([]*User, l9)
for i := int32(0); i < l9; i++ {
	v9[i] = &User{}
	v9[i].Decode(dbuf)
}
m.SetParticipants(v9)
 
}

    return dbuf.err
}
// chatInvitePeek#61695cb0 chat:Chat expires:int = ChatInvite;
func (m *TLChatInvitePeek) To_ChatInvite() *ChatInvite {
    return &ChatInvite{
        Constructor: TLConstructor_CRC32_chatInvitePeek,
        Data2: m.Data2,
    }
}


func (m *TLChatInvitePeek) SetChat(v *Chat) { m.Data2.Chat = v }
func (m *TLChatInvitePeek) GetChat() *Chat { return m.Data2.Chat }

func (m *TLChatInvitePeek) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLChatInvitePeek) GetExpires() int32 { return m.Data2.Expires }


func NewTLChatInvitePeek() * TLChatInvitePeek {
    return &TLChatInvitePeek{ Data2: &ChatInvite_Data{} }
}

func (m* TLChatInvitePeek) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_chatInvitePeek))

    x.Bytes(m.GetChat().Encode())
    x.Int(m.GetExpires())

    return x.buf
}

func (m* TLChatInvitePeek) Decode(dbuf *DecodeBuf) error {
    m1 := &Chat{}
    m1.Decode(dbuf)
    m.SetChat(m1)
    m.SetExpires(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// EncryptedMessage <--
//  + TL_EncryptedMessage
//  + TL_EncryptedMessageService
//

func (m *EncryptedMessage) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_encryptedMessage:
        t := m.To_EncryptedMessage()
        return t.Encode()
    case TLConstructor_CRC32_encryptedMessageService:
        t := m.To_EncryptedMessageService()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *EncryptedMessage) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_encryptedMessage:
        m2 := &TLEncryptedMessage{&EncryptedMessage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_encryptedMessageService:
        m2 := &TLEncryptedMessageService{&EncryptedMessage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// encryptedMessage#ed18c118 random_id:long chat_id:int date:int bytes:bytes file:EncryptedFile = EncryptedMessage;
func (m *EncryptedMessage) To_EncryptedMessage() *TLEncryptedMessage {
    return &TLEncryptedMessage{
        Data2: m.Data2,
    }
}

// encryptedMessageService#23734b06 random_id:long chat_id:int date:int bytes:bytes = EncryptedMessage;
func (m *EncryptedMessage) To_EncryptedMessageService() *TLEncryptedMessageService {
    return &TLEncryptedMessageService{
        Data2: m.Data2,
    }
}



// encryptedMessage#ed18c118 random_id:long chat_id:int date:int bytes:bytes file:EncryptedFile = EncryptedMessage;
func (m *TLEncryptedMessage) To_EncryptedMessage() *EncryptedMessage {
    return &EncryptedMessage{
        Constructor: TLConstructor_CRC32_encryptedMessage,
        Data2: m.Data2,
    }
}


func (m *TLEncryptedMessage) SetRandomId(v int64) { m.Data2.RandomId = v }
func (m *TLEncryptedMessage) GetRandomId() int64 { return m.Data2.RandomId }

func (m *TLEncryptedMessage) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLEncryptedMessage) GetChatId() int32 { return m.Data2.ChatId }

func (m *TLEncryptedMessage) SetDate(v int32) { m.Data2.Date = v }
func (m *TLEncryptedMessage) GetDate() int32 { return m.Data2.Date }

func (m *TLEncryptedMessage) SetBytes(v []byte) { m.Data2.Bytes = v }
func (m *TLEncryptedMessage) GetBytes() []byte { return m.Data2.Bytes }

func (m *TLEncryptedMessage) SetFile(v *EncryptedFile) { m.Data2.File = v }
func (m *TLEncryptedMessage) GetFile() *EncryptedFile { return m.Data2.File }


func NewTLEncryptedMessage() * TLEncryptedMessage {
    return &TLEncryptedMessage{ Data2: &EncryptedMessage_Data{} }
}

func (m* TLEncryptedMessage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_encryptedMessage))

    x.Long(m.GetRandomId())
    x.Int(m.GetChatId())
    x.Int(m.GetDate())
    x.StringBytes(m.GetBytes())
    x.Bytes(m.GetFile().Encode())

    return x.buf
}

func (m* TLEncryptedMessage) Decode(dbuf *DecodeBuf) error {
    m.SetRandomId(dbuf.Long())
    m.SetChatId(dbuf.Int())
    m.SetDate(dbuf.Int())
    m.SetBytes(dbuf.StringBytes())
    m5 := &EncryptedFile{}
    m5.Decode(dbuf)
    m.SetFile(m5)

    return dbuf.err
}
// encryptedMessageService#23734b06 random_id:long chat_id:int date:int bytes:bytes = EncryptedMessage;
func (m *TLEncryptedMessageService) To_EncryptedMessage() *EncryptedMessage {
    return &EncryptedMessage{
        Constructor: TLConstructor_CRC32_encryptedMessageService,
        Data2: m.Data2,
    }
}


func (m *TLEncryptedMessageService) SetRandomId(v int64) { m.Data2.RandomId = v }
func (m *TLEncryptedMessageService) GetRandomId() int64 { return m.Data2.RandomId }

func (m *TLEncryptedMessageService) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLEncryptedMessageService) GetChatId() int32 { return m.Data2.ChatId }

func (m *TLEncryptedMessageService) SetDate(v int32) { m.Data2.Date = v }
func (m *TLEncryptedMessageService) GetDate() int32 { return m.Data2.Date }

func (m *TLEncryptedMessageService) SetBytes(v []byte) { m.Data2.Bytes = v }
func (m *TLEncryptedMessageService) GetBytes() []byte { return m.Data2.Bytes }


func NewTLEncryptedMessageService() * TLEncryptedMessageService {
    return &TLEncryptedMessageService{ Data2: &EncryptedMessage_Data{} }
}

func (m* TLEncryptedMessageService) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_encryptedMessageService))

    x.Long(m.GetRandomId())
    x.Int(m.GetChatId())
    x.Int(m.GetDate())
    x.StringBytes(m.GetBytes())

    return x.buf
}

func (m* TLEncryptedMessageService) Decode(dbuf *DecodeBuf) error {
    m.SetRandomId(dbuf.Long())
    m.SetChatId(dbuf.Int())
    m.SetDate(dbuf.Int())
    m.SetBytes(dbuf.StringBytes())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Authorization <--
//  + TL_Authorization
//  + TL_Authorization114
//

func (m *Authorization) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_authorization:
        t := m.To_Authorization()
        return t.Encode()
    case TLConstructor_CRC32_authorization114:
        t := m.To_Authorization114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Authorization) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_authorization:
        m2 := &TLAuthorization{&Authorization_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_authorization114:
        m2 := &TLAuthorization114{&Authorization_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// authorization#7bf2e6f6 hash:long flags:int device_model:string platform:string system_version:string api_id:int app_name:string app_version:string date_created:int date_active:int ip:string country:string region:string = Authorization;
func (m *Authorization) To_Authorization() *TLAuthorization {
    return &TLAuthorization{
        Data2: m.Data2,
    }
}

// authorization#ad01d61d flags:# current:flags.0?true official_app:flags.1?true password_pending:flags.2?true hash:long device_model:string platform:string system_version:string api_id:int app_name:string app_version:string date_created:int date_active:int ip:string country:string region:string = Authorization;
func (m *Authorization) To_Authorization114() *TLAuthorization114 {
    return &TLAuthorization114{
        Data2: m.Data2,
    }
}



// authorization#7bf2e6f6 hash:long flags:int device_model:string platform:string system_version:string api_id:int app_name:string app_version:string date_created:int date_active:int ip:string country:string region:string = Authorization;
func (m *TLAuthorization) To_Authorization() *Authorization {
    return &Authorization{
        Constructor: TLConstructor_CRC32_authorization,
        Data2: m.Data2,
    }
}


func (m *TLAuthorization) SetHash(v int64) { m.Data2.Hash = v }
func (m *TLAuthorization) GetHash() int64 { return m.Data2.Hash }

func (m *TLAuthorization) SetFlags(v int32) { m.Data2.Flags = v }
func (m *TLAuthorization) GetFlags() int32 { return m.Data2.Flags }

func (m *TLAuthorization) SetDeviceModel(v string) { m.Data2.DeviceModel = v }
func (m *TLAuthorization) GetDeviceModel() string { return m.Data2.DeviceModel }

func (m *TLAuthorization) SetPlatform(v string) { m.Data2.Platform = v }
func (m *TLAuthorization) GetPlatform() string { return m.Data2.Platform }

func (m *TLAuthorization) SetSystemVersion(v string) { m.Data2.SystemVersion = v }
func (m *TLAuthorization) GetSystemVersion() string { return m.Data2.SystemVersion }

func (m *TLAuthorization) SetApiId(v int32) { m.Data2.ApiId = v }
func (m *TLAuthorization) GetApiId() int32 { return m.Data2.ApiId }

func (m *TLAuthorization) SetAppName(v string) { m.Data2.AppName = v }
func (m *TLAuthorization) GetAppName() string { return m.Data2.AppName }

func (m *TLAuthorization) SetAppVersion(v string) { m.Data2.AppVersion = v }
func (m *TLAuthorization) GetAppVersion() string { return m.Data2.AppVersion }

func (m *TLAuthorization) SetDateCreated(v int32) { m.Data2.DateCreated = v }
func (m *TLAuthorization) GetDateCreated() int32 { return m.Data2.DateCreated }

func (m *TLAuthorization) SetDateActive(v int32) { m.Data2.DateActive = v }
func (m *TLAuthorization) GetDateActive() int32 { return m.Data2.DateActive }

func (m *TLAuthorization) SetIp(v string) { m.Data2.Ip = v }
func (m *TLAuthorization) GetIp() string { return m.Data2.Ip }

func (m *TLAuthorization) SetCountry(v string) { m.Data2.Country = v }
func (m *TLAuthorization) GetCountry() string { return m.Data2.Country }

func (m *TLAuthorization) SetRegion(v string) { m.Data2.Region = v }
func (m *TLAuthorization) GetRegion() string { return m.Data2.Region }


func NewTLAuthorization() * TLAuthorization {
    return &TLAuthorization{ Data2: &Authorization_Data{} }
}

func (m* TLAuthorization) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_authorization))

    x.Long(m.GetHash())
    x.Int(m.GetFlags())
    x.String(m.GetDeviceModel())
    x.String(m.GetPlatform())
    x.String(m.GetSystemVersion())
    x.Int(m.GetApiId())
    x.String(m.GetAppName())
    x.String(m.GetAppVersion())
    x.Int(m.GetDateCreated())
    x.Int(m.GetDateActive())
    x.String(m.GetIp())
    x.String(m.GetCountry())
    x.String(m.GetRegion())

    return x.buf
}

func (m* TLAuthorization) Decode(dbuf *DecodeBuf) error {
    m.SetHash(dbuf.Long())
    m.SetFlags(dbuf.Int())
    m.SetDeviceModel(dbuf.String())
    m.SetPlatform(dbuf.String())
    m.SetSystemVersion(dbuf.String())
    m.SetApiId(dbuf.Int())
    m.SetAppName(dbuf.String())
    m.SetAppVersion(dbuf.String())
    m.SetDateCreated(dbuf.Int())
    m.SetDateActive(dbuf.Int())
    m.SetIp(dbuf.String())
    m.SetCountry(dbuf.String())
    m.SetRegion(dbuf.String())

    return dbuf.err
}
// authorization#ad01d61d flags:# current:flags.0?true official_app:flags.1?true password_pending:flags.2?true hash:long device_model:string platform:string system_version:string api_id:int app_name:string app_version:string date_created:int date_active:int ip:string country:string region:string = Authorization;
func (m *TLAuthorization114) To_Authorization() *Authorization {
    return &Authorization{
        Constructor: TLConstructor_CRC32_authorization114,
        Data2: m.Data2,
    }
}


func (m *TLAuthorization114) SetCurrent(v bool) { m.Data2.Current = v }
func (m *TLAuthorization114) GetCurrent() bool { return m.Data2.Current }

func (m *TLAuthorization114) SetOfficialApp(v bool) { m.Data2.OfficialApp = v }
func (m *TLAuthorization114) GetOfficialApp() bool { return m.Data2.OfficialApp }

func (m *TLAuthorization114) SetPasswordPending(v bool) { m.Data2.PasswordPending = v }
func (m *TLAuthorization114) GetPasswordPending() bool { return m.Data2.PasswordPending }

func (m *TLAuthorization114) SetHash(v int64) { m.Data2.Hash = v }
func (m *TLAuthorization114) GetHash() int64 { return m.Data2.Hash }

func (m *TLAuthorization114) SetDeviceModel(v string) { m.Data2.DeviceModel = v }
func (m *TLAuthorization114) GetDeviceModel() string { return m.Data2.DeviceModel }

func (m *TLAuthorization114) SetPlatform(v string) { m.Data2.Platform = v }
func (m *TLAuthorization114) GetPlatform() string { return m.Data2.Platform }

func (m *TLAuthorization114) SetSystemVersion(v string) { m.Data2.SystemVersion = v }
func (m *TLAuthorization114) GetSystemVersion() string { return m.Data2.SystemVersion }

func (m *TLAuthorization114) SetApiId(v int32) { m.Data2.ApiId = v }
func (m *TLAuthorization114) GetApiId() int32 { return m.Data2.ApiId }

func (m *TLAuthorization114) SetAppName(v string) { m.Data2.AppName = v }
func (m *TLAuthorization114) GetAppName() string { return m.Data2.AppName }

func (m *TLAuthorization114) SetAppVersion(v string) { m.Data2.AppVersion = v }
func (m *TLAuthorization114) GetAppVersion() string { return m.Data2.AppVersion }

func (m *TLAuthorization114) SetDateCreated(v int32) { m.Data2.DateCreated = v }
func (m *TLAuthorization114) GetDateCreated() int32 { return m.Data2.DateCreated }

func (m *TLAuthorization114) SetDateActive(v int32) { m.Data2.DateActive = v }
func (m *TLAuthorization114) GetDateActive() int32 { return m.Data2.DateActive }

func (m *TLAuthorization114) SetIp(v string) { m.Data2.Ip = v }
func (m *TLAuthorization114) GetIp() string { return m.Data2.Ip }

func (m *TLAuthorization114) SetCountry(v string) { m.Data2.Country = v }
func (m *TLAuthorization114) GetCountry() string { return m.Data2.Country }

func (m *TLAuthorization114) SetRegion(v string) { m.Data2.Region = v }
func (m *TLAuthorization114) GetRegion() string { return m.Data2.Region }


func NewTLAuthorization114() * TLAuthorization114 {
    return &TLAuthorization114{ Data2: &Authorization_Data{} }
}

func (m* TLAuthorization114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_authorization114))

    // flags
    var flags uint32 = 0
    if m.GetCurrent() == true { flags |= 1 << 0 }
    if m.GetOfficialApp() == true { flags |= 1 << 1 }
    if m.GetPasswordPending() == true { flags |= 1 << 2 }
	x.UInt(flags)

    
    
    
    x.Long(m.GetHash())
    x.String(m.GetDeviceModel())
    x.String(m.GetPlatform())
    x.String(m.GetSystemVersion())
    x.Int(m.GetApiId())
    x.String(m.GetAppName())
    x.String(m.GetAppVersion())
    x.Int(m.GetDateCreated())
    x.Int(m.GetDateActive())
    x.String(m.GetIp())
    x.String(m.GetCountry())
    x.String(m.GetRegion())

    return x.buf
}

func (m* TLAuthorization114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetCurrent(true) }
    if (flags & (1 << 1)) != 0 { m.SetOfficialApp(true) }
    if (flags & (1 << 2)) != 0 { m.SetPasswordPending(true) }
    m.SetHash(dbuf.Long())
    m.SetDeviceModel(dbuf.String())
    m.SetPlatform(dbuf.String())
    m.SetSystemVersion(dbuf.String())
    m.SetApiId(dbuf.Int())
    m.SetAppName(dbuf.String())
    m.SetAppVersion(dbuf.String())
    m.SetDateCreated(dbuf.Int())
    m.SetDateActive(dbuf.Int())
    m.SetIp(dbuf.String())
    m.SetCountry(dbuf.String())
    m.SetRegion(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// ChannelAdminLogEvent <--
//  + TL_ChannelAdminLogEvent
//

func (m *ChannelAdminLogEvent) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_channelAdminLogEvent:
        t := m.To_ChannelAdminLogEvent()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *ChannelAdminLogEvent) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_channelAdminLogEvent:
        m2 := &TLChannelAdminLogEvent{&ChannelAdminLogEvent_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// channelAdminLogEvent#3b5a3e40 id:long date:int user_id:int action:ChannelAdminLogEventAction = ChannelAdminLogEvent;
func (m *ChannelAdminLogEvent) To_ChannelAdminLogEvent() *TLChannelAdminLogEvent {
    return &TLChannelAdminLogEvent{
        Data2: m.Data2,
    }
}



// channelAdminLogEvent#3b5a3e40 id:long date:int user_id:int action:ChannelAdminLogEventAction = ChannelAdminLogEvent;
func (m *TLChannelAdminLogEvent) To_ChannelAdminLogEvent() *ChannelAdminLogEvent {
    return &ChannelAdminLogEvent{
        Constructor: TLConstructor_CRC32_channelAdminLogEvent,
        Data2: m.Data2,
    }
}


func (m *TLChannelAdminLogEvent) SetId(v int64) { m.Data2.Id = v }
func (m *TLChannelAdminLogEvent) GetId() int64 { return m.Data2.Id }

func (m *TLChannelAdminLogEvent) SetDate(v int32) { m.Data2.Date = v }
func (m *TLChannelAdminLogEvent) GetDate() int32 { return m.Data2.Date }

func (m *TLChannelAdminLogEvent) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLChannelAdminLogEvent) GetUserId() int32 { return m.Data2.UserId }

func (m *TLChannelAdminLogEvent) SetAction(v *ChannelAdminLogEventAction) { m.Data2.Action = v }
func (m *TLChannelAdminLogEvent) GetAction() *ChannelAdminLogEventAction { return m.Data2.Action }


func NewTLChannelAdminLogEvent() * TLChannelAdminLogEvent {
    return &TLChannelAdminLogEvent{ Data2: &ChannelAdminLogEvent_Data{} }
}

func (m* TLChannelAdminLogEvent) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelAdminLogEvent))

    x.Long(m.GetId())
    x.Int(m.GetDate())
    x.Int(m.GetUserId())
    x.Bytes(m.GetAction().Encode())

    return x.buf
}

func (m* TLChannelAdminLogEvent) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetDate(dbuf.Int())
    m.SetUserId(dbuf.Int())
    m4 := &ChannelAdminLogEventAction{}
    m4.Decode(dbuf)
    m.SetAction(m4)

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// EnvelopeState <--
//  + TL_EnvelopeStateGrabed
//  + TL_EnvelopeStateExpired
//  + TL_EnvelopeStateDone
//  + TL_EnvelopeStateCanGrab
//

func (m *EnvelopeState) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_envelopeStateGrabed:
        t := m.To_EnvelopeStateGrabed()
        return t.Encode()
    case TLConstructor_CRC32_envelopeStateExpired:
        t := m.To_EnvelopeStateExpired()
        return t.Encode()
    case TLConstructor_CRC32_envelopeStateDone:
        t := m.To_EnvelopeStateDone()
        return t.Encode()
    case TLConstructor_CRC32_envelopeStateCanGrab:
        t := m.To_EnvelopeStateCanGrab()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *EnvelopeState) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_envelopeStateGrabed:
        m2 := &TLEnvelopeStateGrabed{&EnvelopeState_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_envelopeStateExpired:
        m2 := &TLEnvelopeStateExpired{&EnvelopeState_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_envelopeStateDone:
        m2 := &TLEnvelopeStateDone{&EnvelopeState_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_envelopeStateCanGrab:
        m2 := &TLEnvelopeStateCanGrab{&EnvelopeState_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// envelopeStateGrabed#dbe9aef7 = EnvelopeState;
func (m *EnvelopeState) To_EnvelopeStateGrabed() *TLEnvelopeStateGrabed {
    return &TLEnvelopeStateGrabed{
        Data2: m.Data2,
    }
}

// envelopeStateExpired#246d4e8e = EnvelopeState;
func (m *EnvelopeState) To_EnvelopeStateExpired() *TLEnvelopeStateExpired {
    return &TLEnvelopeStateExpired{
        Data2: m.Data2,
    }
}

// envelopeStateDone#c81711a = EnvelopeState;
func (m *EnvelopeState) To_EnvelopeStateDone() *TLEnvelopeStateDone {
    return &TLEnvelopeStateDone{
        Data2: m.Data2,
    }
}

// envelopeStateCanGrab#f988514b = EnvelopeState;
func (m *EnvelopeState) To_EnvelopeStateCanGrab() *TLEnvelopeStateCanGrab {
    return &TLEnvelopeStateCanGrab{
        Data2: m.Data2,
    }
}



// envelopeStateGrabed#dbe9aef7 = EnvelopeState;
func (m *TLEnvelopeStateGrabed) To_EnvelopeState() *EnvelopeState {
    return &EnvelopeState{
        Constructor: TLConstructor_CRC32_envelopeStateGrabed,
        Data2: m.Data2,
    }
}



func NewTLEnvelopeStateGrabed() * TLEnvelopeStateGrabed {
    return &TLEnvelopeStateGrabed{ Data2: &EnvelopeState_Data{} }
}

func (m* TLEnvelopeStateGrabed) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_envelopeStateGrabed))


    return x.buf
}

func (m* TLEnvelopeStateGrabed) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// envelopeStateExpired#246d4e8e = EnvelopeState;
func (m *TLEnvelopeStateExpired) To_EnvelopeState() *EnvelopeState {
    return &EnvelopeState{
        Constructor: TLConstructor_CRC32_envelopeStateExpired,
        Data2: m.Data2,
    }
}



func NewTLEnvelopeStateExpired() * TLEnvelopeStateExpired {
    return &TLEnvelopeStateExpired{ Data2: &EnvelopeState_Data{} }
}

func (m* TLEnvelopeStateExpired) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_envelopeStateExpired))


    return x.buf
}

func (m* TLEnvelopeStateExpired) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// envelopeStateDone#c81711a = EnvelopeState;
func (m *TLEnvelopeStateDone) To_EnvelopeState() *EnvelopeState {
    return &EnvelopeState{
        Constructor: TLConstructor_CRC32_envelopeStateDone,
        Data2: m.Data2,
    }
}



func NewTLEnvelopeStateDone() * TLEnvelopeStateDone {
    return &TLEnvelopeStateDone{ Data2: &EnvelopeState_Data{} }
}

func (m* TLEnvelopeStateDone) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_envelopeStateDone))


    return x.buf
}

func (m* TLEnvelopeStateDone) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// envelopeStateCanGrab#f988514b = EnvelopeState;
func (m *TLEnvelopeStateCanGrab) To_EnvelopeState() *EnvelopeState {
    return &EnvelopeState{
        Constructor: TLConstructor_CRC32_envelopeStateCanGrab,
        Data2: m.Data2,
    }
}



func NewTLEnvelopeStateCanGrab() * TLEnvelopeStateCanGrab {
    return &TLEnvelopeStateCanGrab{ Data2: &EnvelopeState_Data{} }
}

func (m* TLEnvelopeStateCanGrab) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_envelopeStateCanGrab))


    return x.buf
}

func (m* TLEnvelopeStateCanGrab) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// SchemeParam <--
//  + TL_SchemeParam
//

func (m *SchemeParam) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_schemeParam:
        t := m.To_SchemeParam()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *SchemeParam) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_schemeParam:
        m2 := &TLSchemeParam{&SchemeParam_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// schemeParam#21b59bef name:string type:string = SchemeParam;
func (m *SchemeParam) To_SchemeParam() *TLSchemeParam {
    return &TLSchemeParam{
        Data2: m.Data2,
    }
}



// schemeParam#21b59bef name:string type:string = SchemeParam;
func (m *TLSchemeParam) To_SchemeParam() *SchemeParam {
    return &SchemeParam{
        Constructor: TLConstructor_CRC32_schemeParam,
        Data2: m.Data2,
    }
}


func (m *TLSchemeParam) SetName(v string) { m.Data2.Name = v }
func (m *TLSchemeParam) GetName() string { return m.Data2.Name }

func (m *TLSchemeParam) SetType(v string) { m.Data2.Type = v }
func (m *TLSchemeParam) GetType() string { return m.Data2.Type }


func NewTLSchemeParam() * TLSchemeParam {
    return &TLSchemeParam{ Data2: &SchemeParam_Data{} }
}

func (m* TLSchemeParam) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_schemeParam))

    x.String(m.GetName())
    x.String(m.GetType())

    return x.buf
}

func (m* TLSchemeParam) Decode(dbuf *DecodeBuf) error {
    m.SetName(dbuf.String())
    m.SetType(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// DcOption82 <--
//  + TL_DcOption82
//

func (m *DcOption82) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_dcOption82:
        t := m.To_DcOption82()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *DcOption82) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_dcOption82:
        m2 := &TLDcOption82{&DcOption82_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// dcOption#18b7a10d flags:# ipv6:flags.0?true media_only:flags.1?true tcpo_only:flags.2?true cdn:flags.3?true static:flags.4?true id:int ip_address:string port:int secret:flags.10?bytes = DcOption;
func (m *DcOption82) To_DcOption82() *TLDcOption82 {
    return &TLDcOption82{
        Data2: m.Data2,
    }
}



// dcOption#18b7a10d flags:# ipv6:flags.0?true media_only:flags.1?true tcpo_only:flags.2?true cdn:flags.3?true static:flags.4?true id:int ip_address:string port:int secret:flags.10?bytes = DcOption;
func (m *TLDcOption82) To_DcOption82() *DcOption82 {
    return &DcOption82{
        Constructor: TLConstructor_CRC32_dcOption82,
        Data2: m.Data2,
    }
}


func (m *TLDcOption82) SetIpv6(v bool) { m.Data2.Ipv6 = v }
func (m *TLDcOption82) GetIpv6() bool { return m.Data2.Ipv6 }

func (m *TLDcOption82) SetMediaOnly(v bool) { m.Data2.MediaOnly = v }
func (m *TLDcOption82) GetMediaOnly() bool { return m.Data2.MediaOnly }

func (m *TLDcOption82) SetTcpoOnly(v bool) { m.Data2.TcpoOnly = v }
func (m *TLDcOption82) GetTcpoOnly() bool { return m.Data2.TcpoOnly }

func (m *TLDcOption82) SetCdn(v bool) { m.Data2.Cdn = v }
func (m *TLDcOption82) GetCdn() bool { return m.Data2.Cdn }

func (m *TLDcOption82) SetStatic(v bool) { m.Data2.Static = v }
func (m *TLDcOption82) GetStatic() bool { return m.Data2.Static }

func (m *TLDcOption82) SetId(v int32) { m.Data2.Id = v }
func (m *TLDcOption82) GetId() int32 { return m.Data2.Id }

func (m *TLDcOption82) SetIpAddress(v string) { m.Data2.IpAddress = v }
func (m *TLDcOption82) GetIpAddress() string { return m.Data2.IpAddress }

func (m *TLDcOption82) SetPort(v int32) { m.Data2.Port = v }
func (m *TLDcOption82) GetPort() int32 { return m.Data2.Port }

func (m *TLDcOption82) SetSecret(v []byte) { m.Data2.Secret = v }
func (m *TLDcOption82) GetSecret() []byte { return m.Data2.Secret }


func NewTLDcOption82() * TLDcOption82 {
    return &TLDcOption82{ Data2: &DcOption82_Data{} }
}

func (m* TLDcOption82) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_dcOption82))

    // flags
    var flags uint32 = 0
    if m.GetIpv6() == true { flags |= 1 << 0 }
    if m.GetMediaOnly() == true { flags |= 1 << 1 }
    if m.GetTcpoOnly() == true { flags |= 1 << 2 }
    if m.GetCdn() == true { flags |= 1 << 3 }
    if m.GetStatic() == true { flags |= 1 << 4 }
    if m.GetSecret() != nil { flags |= 1 << 10 }
	x.UInt(flags)

    
    
    
    
    
    x.Int(m.GetId())
    x.String(m.GetIpAddress())
    x.Int(m.GetPort())
    if (flags & (1 << 10)) != 0 { x.StringBytes(m.GetSecret()) }

    return x.buf
}

func (m* TLDcOption82) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetIpv6(true) }
    if (flags & (1 << 1)) != 0 { m.SetMediaOnly(true) }
    if (flags & (1 << 2)) != 0 { m.SetTcpoOnly(true) }
    if (flags & (1 << 3)) != 0 { m.SetCdn(true) }
    if (flags & (1 << 4)) != 0 { m.SetStatic(true) }
    m.SetId(dbuf.Int())
    m.SetIpAddress(dbuf.String())
    m.SetPort(dbuf.Int())
    if (flags & (1 << 10)) != 0 {
 m.SetSecret(dbuf.StringBytes()) 
}

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// SecureValueHash <--
//  + TL_SecureValueHash
//

func (m *SecureValueHash) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_secureValueHash:
        t := m.To_SecureValueHash()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *SecureValueHash) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_secureValueHash:
        m2 := &TLSecureValueHash{&SecureValueHash_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// secureValueHash#ed1ecdb0 type:SecureValueType hash:bytes = SecureValueHash;
func (m *SecureValueHash) To_SecureValueHash() *TLSecureValueHash {
    return &TLSecureValueHash{
        Data2: m.Data2,
    }
}



// secureValueHash#ed1ecdb0 type:SecureValueType hash:bytes = SecureValueHash;
func (m *TLSecureValueHash) To_SecureValueHash() *SecureValueHash {
    return &SecureValueHash{
        Constructor: TLConstructor_CRC32_secureValueHash,
        Data2: m.Data2,
    }
}


func (m *TLSecureValueHash) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureValueHash) GetType() *SecureValueType { return m.Data2.Type }

func (m *TLSecureValueHash) SetHash(v []byte) { m.Data2.Hash = v }
func (m *TLSecureValueHash) GetHash() []byte { return m.Data2.Hash }


func NewTLSecureValueHash() * TLSecureValueHash {
    return &TLSecureValueHash{ Data2: &SecureValueHash_Data{} }
}

func (m* TLSecureValueHash) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_secureValueHash))

    x.Bytes(m.GetType().Encode())
    x.StringBytes(m.GetHash())

    return x.buf
}

func (m* TLSecureValueHash) Decode(dbuf *DecodeBuf) error {
    m1 := &SecureValueType{}
    m1.Decode(dbuf)
    m.SetType(m1)
    m.SetHash(dbuf.StringBytes())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// MessageAction <--
//  + TL_MessageActionEmpty
//  + TL_MessageActionChatCreate
//  + TL_MessageActionChatEditTitle
//  + TL_MessageActionChatEditPhoto
//  + TL_MessageActionChatDeletePhoto
//  + TL_MessageActionChatAddUser
//  + TL_MessageActionChatDeleteUser
//  + TL_MessageActionChatJoinedByLink
//  + TL_MessageActionChannelCreate
//  + TL_MessageActionChatMigrateTo
//  + TL_MessageActionChannelMigrateFrom
//  + TL_MessageActionPinMessage
//  + TL_MessageActionHistoryClear
//  + TL_MessageActionGameScore
//  + TL_MessageActionPaymentSentMe
//  + TL_MessageActionPaymentSent
//  + TL_MessageActionPhoneCall
//  + TL_MessageActionScreenshotTaken
//  + TL_MessageActionCustomAction
//  + TL_MessageActionBotAllowed
//  + TL_MessageActionSecureValuesSentMe
//  + TL_MessageActionSecureValuesSent
//  + TL_MessageActionContactSignUp
//

func (m *MessageAction) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messageActionEmpty:
        t := m.To_MessageActionEmpty()
        return t.Encode()
    case TLConstructor_CRC32_messageActionChatCreate:
        t := m.To_MessageActionChatCreate()
        return t.Encode()
    case TLConstructor_CRC32_messageActionChatEditTitle:
        t := m.To_MessageActionChatEditTitle()
        return t.Encode()
    case TLConstructor_CRC32_messageActionChatEditPhoto:
        t := m.To_MessageActionChatEditPhoto()
        return t.Encode()
    case TLConstructor_CRC32_messageActionChatDeletePhoto:
        t := m.To_MessageActionChatDeletePhoto()
        return t.Encode()
    case TLConstructor_CRC32_messageActionChatAddUser:
        t := m.To_MessageActionChatAddUser()
        return t.Encode()
    case TLConstructor_CRC32_messageActionChatDeleteUser:
        t := m.To_MessageActionChatDeleteUser()
        return t.Encode()
    case TLConstructor_CRC32_messageActionChatJoinedByLink:
        t := m.To_MessageActionChatJoinedByLink()
        return t.Encode()
    case TLConstructor_CRC32_messageActionChannelCreate:
        t := m.To_MessageActionChannelCreate()
        return t.Encode()
    case TLConstructor_CRC32_messageActionChatMigrateTo:
        t := m.To_MessageActionChatMigrateTo()
        return t.Encode()
    case TLConstructor_CRC32_messageActionChannelMigrateFrom:
        t := m.To_MessageActionChannelMigrateFrom()
        return t.Encode()
    case TLConstructor_CRC32_messageActionPinMessage:
        t := m.To_MessageActionPinMessage()
        return t.Encode()
    case TLConstructor_CRC32_messageActionHistoryClear:
        t := m.To_MessageActionHistoryClear()
        return t.Encode()
    case TLConstructor_CRC32_messageActionGameScore:
        t := m.To_MessageActionGameScore()
        return t.Encode()
    case TLConstructor_CRC32_messageActionPaymentSentMe:
        t := m.To_MessageActionPaymentSentMe()
        return t.Encode()
    case TLConstructor_CRC32_messageActionPaymentSent:
        t := m.To_MessageActionPaymentSent()
        return t.Encode()
    case TLConstructor_CRC32_messageActionPhoneCall:
        t := m.To_MessageActionPhoneCall()
        return t.Encode()
    case TLConstructor_CRC32_messageActionScreenshotTaken:
        t := m.To_MessageActionScreenshotTaken()
        return t.Encode()
    case TLConstructor_CRC32_messageActionCustomAction:
        t := m.To_MessageActionCustomAction()
        return t.Encode()
    case TLConstructor_CRC32_messageActionBotAllowed:
        t := m.To_MessageActionBotAllowed()
        return t.Encode()
    case TLConstructor_CRC32_messageActionSecureValuesSentMe:
        t := m.To_MessageActionSecureValuesSentMe()
        return t.Encode()
    case TLConstructor_CRC32_messageActionSecureValuesSent:
        t := m.To_MessageActionSecureValuesSent()
        return t.Encode()
    case TLConstructor_CRC32_messageActionContactSignUp:
        t := m.To_MessageActionContactSignUp()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *MessageAction) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messageActionEmpty:
        m2 := &TLMessageActionEmpty{&MessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageActionChatCreate:
        m2 := &TLMessageActionChatCreate{&MessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageActionChatEditTitle:
        m2 := &TLMessageActionChatEditTitle{&MessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageActionChatEditPhoto:
        m2 := &TLMessageActionChatEditPhoto{&MessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageActionChatDeletePhoto:
        m2 := &TLMessageActionChatDeletePhoto{&MessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageActionChatAddUser:
        m2 := &TLMessageActionChatAddUser{&MessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageActionChatDeleteUser:
        m2 := &TLMessageActionChatDeleteUser{&MessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageActionChatJoinedByLink:
        m2 := &TLMessageActionChatJoinedByLink{&MessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageActionChannelCreate:
        m2 := &TLMessageActionChannelCreate{&MessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageActionChatMigrateTo:
        m2 := &TLMessageActionChatMigrateTo{&MessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageActionChannelMigrateFrom:
        m2 := &TLMessageActionChannelMigrateFrom{&MessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageActionPinMessage:
        m2 := &TLMessageActionPinMessage{&MessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageActionHistoryClear:
        m2 := &TLMessageActionHistoryClear{&MessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageActionGameScore:
        m2 := &TLMessageActionGameScore{&MessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageActionPaymentSentMe:
        m2 := &TLMessageActionPaymentSentMe{&MessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageActionPaymentSent:
        m2 := &TLMessageActionPaymentSent{&MessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageActionPhoneCall:
        m2 := &TLMessageActionPhoneCall{&MessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageActionScreenshotTaken:
        m2 := &TLMessageActionScreenshotTaken{&MessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageActionCustomAction:
        m2 := &TLMessageActionCustomAction{&MessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageActionBotAllowed:
        m2 := &TLMessageActionBotAllowed{&MessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageActionSecureValuesSentMe:
        m2 := &TLMessageActionSecureValuesSentMe{&MessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageActionSecureValuesSent:
        m2 := &TLMessageActionSecureValuesSent{&MessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageActionContactSignUp:
        m2 := &TLMessageActionContactSignUp{&MessageAction_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messageActionEmpty#b6aef7b0 = MessageAction;
func (m *MessageAction) To_MessageActionEmpty() *TLMessageActionEmpty {
    return &TLMessageActionEmpty{
        Data2: m.Data2,
    }
}

// messageActionChatCreate#a6638b9a title:string users:Vector<int> = MessageAction;
func (m *MessageAction) To_MessageActionChatCreate() *TLMessageActionChatCreate {
    return &TLMessageActionChatCreate{
        Data2: m.Data2,
    }
}

// messageActionChatEditTitle#b5a1ce5a title:string = MessageAction;
func (m *MessageAction) To_MessageActionChatEditTitle() *TLMessageActionChatEditTitle {
    return &TLMessageActionChatEditTitle{
        Data2: m.Data2,
    }
}

// messageActionChatEditPhoto#7fcb13a8 photo:Photo = MessageAction;
func (m *MessageAction) To_MessageActionChatEditPhoto() *TLMessageActionChatEditPhoto {
    return &TLMessageActionChatEditPhoto{
        Data2: m.Data2,
    }
}

// messageActionChatDeletePhoto#95e3fbef = MessageAction;
func (m *MessageAction) To_MessageActionChatDeletePhoto() *TLMessageActionChatDeletePhoto {
    return &TLMessageActionChatDeletePhoto{
        Data2: m.Data2,
    }
}

// messageActionChatAddUser#488a7337 users:Vector<int> = MessageAction;
func (m *MessageAction) To_MessageActionChatAddUser() *TLMessageActionChatAddUser {
    return &TLMessageActionChatAddUser{
        Data2: m.Data2,
    }
}

// messageActionChatDeleteUser#b2ae9b0c user_id:int = MessageAction;
func (m *MessageAction) To_MessageActionChatDeleteUser() *TLMessageActionChatDeleteUser {
    return &TLMessageActionChatDeleteUser{
        Data2: m.Data2,
    }
}

// messageActionChatJoinedByLink#f89cf5e8 inviter_id:int = MessageAction;
func (m *MessageAction) To_MessageActionChatJoinedByLink() *TLMessageActionChatJoinedByLink {
    return &TLMessageActionChatJoinedByLink{
        Data2: m.Data2,
    }
}

// messageActionChannelCreate#95d2ac92 title:string = MessageAction;
func (m *MessageAction) To_MessageActionChannelCreate() *TLMessageActionChannelCreate {
    return &TLMessageActionChannelCreate{
        Data2: m.Data2,
    }
}

// messageActionChatMigrateTo#51bdb021 channel_id:int = MessageAction;
func (m *MessageAction) To_MessageActionChatMigrateTo() *TLMessageActionChatMigrateTo {
    return &TLMessageActionChatMigrateTo{
        Data2: m.Data2,
    }
}

// messageActionChannelMigrateFrom#b055eaee title:string chat_id:int = MessageAction;
func (m *MessageAction) To_MessageActionChannelMigrateFrom() *TLMessageActionChannelMigrateFrom {
    return &TLMessageActionChannelMigrateFrom{
        Data2: m.Data2,
    }
}

// messageActionPinMessage#94bd38ed = MessageAction;
func (m *MessageAction) To_MessageActionPinMessage() *TLMessageActionPinMessage {
    return &TLMessageActionPinMessage{
        Data2: m.Data2,
    }
}

// messageActionHistoryClear#9fbab604 = MessageAction;
func (m *MessageAction) To_MessageActionHistoryClear() *TLMessageActionHistoryClear {
    return &TLMessageActionHistoryClear{
        Data2: m.Data2,
    }
}

// messageActionGameScore#92a72876 game_id:long score:int = MessageAction;
func (m *MessageAction) To_MessageActionGameScore() *TLMessageActionGameScore {
    return &TLMessageActionGameScore{
        Data2: m.Data2,
    }
}

// messageActionPaymentSentMe#8f31b327 flags:# currency:string total_amount:long payload:bytes info:flags.0?PaymentRequestedInfo shipping_option_id:flags.1?string charge:PaymentCharge = MessageAction;
func (m *MessageAction) To_MessageActionPaymentSentMe() *TLMessageActionPaymentSentMe {
    return &TLMessageActionPaymentSentMe{
        Data2: m.Data2,
    }
}

// messageActionPaymentSent#40699cd0 currency:string total_amount:long = MessageAction;
func (m *MessageAction) To_MessageActionPaymentSent() *TLMessageActionPaymentSent {
    return &TLMessageActionPaymentSent{
        Data2: m.Data2,
    }
}

// messageActionPhoneCall#80e11a7f flags:# call_id:long reason:flags.0?PhoneCallDiscardReason duration:flags.1?int = MessageAction;
func (m *MessageAction) To_MessageActionPhoneCall() *TLMessageActionPhoneCall {
    return &TLMessageActionPhoneCall{
        Data2: m.Data2,
    }
}

// messageActionScreenshotTaken#4792929b = MessageAction;
func (m *MessageAction) To_MessageActionScreenshotTaken() *TLMessageActionScreenshotTaken {
    return &TLMessageActionScreenshotTaken{
        Data2: m.Data2,
    }
}

// messageActionCustomAction#fae69f56 message:string = MessageAction;
func (m *MessageAction) To_MessageActionCustomAction() *TLMessageActionCustomAction {
    return &TLMessageActionCustomAction{
        Data2: m.Data2,
    }
}

// messageActionBotAllowed#abe9affe domain:string = MessageAction;
func (m *MessageAction) To_MessageActionBotAllowed() *TLMessageActionBotAllowed {
    return &TLMessageActionBotAllowed{
        Data2: m.Data2,
    }
}

// messageActionSecureValuesSentMe#1b287353 values:Vector<SecureValue> credentials:SecureCredentialsEncrypted = MessageAction;
func (m *MessageAction) To_MessageActionSecureValuesSentMe() *TLMessageActionSecureValuesSentMe {
    return &TLMessageActionSecureValuesSentMe{
        Data2: m.Data2,
    }
}

// messageActionSecureValuesSent#d95c6154 types:Vector<SecureValueType> = MessageAction;
func (m *MessageAction) To_MessageActionSecureValuesSent() *TLMessageActionSecureValuesSent {
    return &TLMessageActionSecureValuesSent{
        Data2: m.Data2,
    }
}

// messageActionContactSignUp#f3f25f76 = MessageAction;
func (m *MessageAction) To_MessageActionContactSignUp() *TLMessageActionContactSignUp {
    return &TLMessageActionContactSignUp{
        Data2: m.Data2,
    }
}



// messageActionEmpty#b6aef7b0 = MessageAction;
func (m *TLMessageActionEmpty) To_MessageAction() *MessageAction {
    return &MessageAction{
        Constructor: TLConstructor_CRC32_messageActionEmpty,
        Data2: m.Data2,
    }
}



func NewTLMessageActionEmpty() * TLMessageActionEmpty {
    return &TLMessageActionEmpty{ Data2: &MessageAction_Data{} }
}

func (m* TLMessageActionEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageActionEmpty))


    return x.buf
}

func (m* TLMessageActionEmpty) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// messageActionChatCreate#a6638b9a title:string users:Vector<int> = MessageAction;
func (m *TLMessageActionChatCreate) To_MessageAction() *MessageAction {
    return &MessageAction{
        Constructor: TLConstructor_CRC32_messageActionChatCreate,
        Data2: m.Data2,
    }
}


func (m *TLMessageActionChatCreate) SetTitle(v string) { m.Data2.Title = v }
func (m *TLMessageActionChatCreate) GetTitle() string { return m.Data2.Title }

func (m *TLMessageActionChatCreate) SetUsers(v []int32) { m.Data2.Users = v }
func (m *TLMessageActionChatCreate) GetUsers() []int32 { return m.Data2.Users }


func NewTLMessageActionChatCreate() * TLMessageActionChatCreate {
    return &TLMessageActionChatCreate{ Data2: &MessageAction_Data{} }
}

func (m* TLMessageActionChatCreate) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageActionChatCreate))

    x.String(m.GetTitle())
    x.VectorInt(m.GetUsers())


    return x.buf
}

func (m* TLMessageActionChatCreate) Decode(dbuf *DecodeBuf) error {
    m.SetTitle(dbuf.String())
    m.SetUsers(dbuf.VectorInt())

    return dbuf.err
}
// messageActionChatEditTitle#b5a1ce5a title:string = MessageAction;
func (m *TLMessageActionChatEditTitle) To_MessageAction() *MessageAction {
    return &MessageAction{
        Constructor: TLConstructor_CRC32_messageActionChatEditTitle,
        Data2: m.Data2,
    }
}


func (m *TLMessageActionChatEditTitle) SetTitle(v string) { m.Data2.Title = v }
func (m *TLMessageActionChatEditTitle) GetTitle() string { return m.Data2.Title }


func NewTLMessageActionChatEditTitle() * TLMessageActionChatEditTitle {
    return &TLMessageActionChatEditTitle{ Data2: &MessageAction_Data{} }
}

func (m* TLMessageActionChatEditTitle) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageActionChatEditTitle))

    x.String(m.GetTitle())

    return x.buf
}

func (m* TLMessageActionChatEditTitle) Decode(dbuf *DecodeBuf) error {
    m.SetTitle(dbuf.String())

    return dbuf.err
}
// messageActionChatEditPhoto#7fcb13a8 photo:Photo = MessageAction;
func (m *TLMessageActionChatEditPhoto) To_MessageAction() *MessageAction {
    return &MessageAction{
        Constructor: TLConstructor_CRC32_messageActionChatEditPhoto,
        Data2: m.Data2,
    }
}


func (m *TLMessageActionChatEditPhoto) SetPhoto(v *Photo) { m.Data2.Photo = v }
func (m *TLMessageActionChatEditPhoto) GetPhoto() *Photo { return m.Data2.Photo }


func NewTLMessageActionChatEditPhoto() * TLMessageActionChatEditPhoto {
    return &TLMessageActionChatEditPhoto{ Data2: &MessageAction_Data{} }
}

func (m* TLMessageActionChatEditPhoto) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageActionChatEditPhoto))

    x.Bytes(m.GetPhoto().Encode())

    return x.buf
}

func (m* TLMessageActionChatEditPhoto) Decode(dbuf *DecodeBuf) error {
    m1 := &Photo{}
    m1.Decode(dbuf)
    m.SetPhoto(m1)

    return dbuf.err
}
// messageActionChatDeletePhoto#95e3fbef = MessageAction;
func (m *TLMessageActionChatDeletePhoto) To_MessageAction() *MessageAction {
    return &MessageAction{
        Constructor: TLConstructor_CRC32_messageActionChatDeletePhoto,
        Data2: m.Data2,
    }
}



func NewTLMessageActionChatDeletePhoto() * TLMessageActionChatDeletePhoto {
    return &TLMessageActionChatDeletePhoto{ Data2: &MessageAction_Data{} }
}

func (m* TLMessageActionChatDeletePhoto) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageActionChatDeletePhoto))


    return x.buf
}

func (m* TLMessageActionChatDeletePhoto) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// messageActionChatAddUser#488a7337 users:Vector<int> = MessageAction;
func (m *TLMessageActionChatAddUser) To_MessageAction() *MessageAction {
    return &MessageAction{
        Constructor: TLConstructor_CRC32_messageActionChatAddUser,
        Data2: m.Data2,
    }
}


func (m *TLMessageActionChatAddUser) SetUsers(v []int32) { m.Data2.Users = v }
func (m *TLMessageActionChatAddUser) GetUsers() []int32 { return m.Data2.Users }


func NewTLMessageActionChatAddUser() * TLMessageActionChatAddUser {
    return &TLMessageActionChatAddUser{ Data2: &MessageAction_Data{} }
}

func (m* TLMessageActionChatAddUser) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageActionChatAddUser))

    x.VectorInt(m.GetUsers())


    return x.buf
}

func (m* TLMessageActionChatAddUser) Decode(dbuf *DecodeBuf) error {
    m.SetUsers(dbuf.VectorInt())

    return dbuf.err
}
// messageActionChatDeleteUser#b2ae9b0c user_id:int = MessageAction;
func (m *TLMessageActionChatDeleteUser) To_MessageAction() *MessageAction {
    return &MessageAction{
        Constructor: TLConstructor_CRC32_messageActionChatDeleteUser,
        Data2: m.Data2,
    }
}


func (m *TLMessageActionChatDeleteUser) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLMessageActionChatDeleteUser) GetUserId() int32 { return m.Data2.UserId }


func NewTLMessageActionChatDeleteUser() * TLMessageActionChatDeleteUser {
    return &TLMessageActionChatDeleteUser{ Data2: &MessageAction_Data{} }
}

func (m* TLMessageActionChatDeleteUser) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageActionChatDeleteUser))

    x.Int(m.GetUserId())

    return x.buf
}

func (m* TLMessageActionChatDeleteUser) Decode(dbuf *DecodeBuf) error {
    m.SetUserId(dbuf.Int())

    return dbuf.err
}
// messageActionChatJoinedByLink#f89cf5e8 inviter_id:int = MessageAction;
func (m *TLMessageActionChatJoinedByLink) To_MessageAction() *MessageAction {
    return &MessageAction{
        Constructor: TLConstructor_CRC32_messageActionChatJoinedByLink,
        Data2: m.Data2,
    }
}


func (m *TLMessageActionChatJoinedByLink) SetInviterId(v int32) { m.Data2.InviterId = v }
func (m *TLMessageActionChatJoinedByLink) GetInviterId() int32 { return m.Data2.InviterId }


func NewTLMessageActionChatJoinedByLink() * TLMessageActionChatJoinedByLink {
    return &TLMessageActionChatJoinedByLink{ Data2: &MessageAction_Data{} }
}

func (m* TLMessageActionChatJoinedByLink) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageActionChatJoinedByLink))

    x.Int(m.GetInviterId())

    return x.buf
}

func (m* TLMessageActionChatJoinedByLink) Decode(dbuf *DecodeBuf) error {
    m.SetInviterId(dbuf.Int())

    return dbuf.err
}
// messageActionChannelCreate#95d2ac92 title:string = MessageAction;
func (m *TLMessageActionChannelCreate) To_MessageAction() *MessageAction {
    return &MessageAction{
        Constructor: TLConstructor_CRC32_messageActionChannelCreate,
        Data2: m.Data2,
    }
}


func (m *TLMessageActionChannelCreate) SetTitle(v string) { m.Data2.Title = v }
func (m *TLMessageActionChannelCreate) GetTitle() string { return m.Data2.Title }


func NewTLMessageActionChannelCreate() * TLMessageActionChannelCreate {
    return &TLMessageActionChannelCreate{ Data2: &MessageAction_Data{} }
}

func (m* TLMessageActionChannelCreate) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageActionChannelCreate))

    x.String(m.GetTitle())

    return x.buf
}

func (m* TLMessageActionChannelCreate) Decode(dbuf *DecodeBuf) error {
    m.SetTitle(dbuf.String())

    return dbuf.err
}
// messageActionChatMigrateTo#51bdb021 channel_id:int = MessageAction;
func (m *TLMessageActionChatMigrateTo) To_MessageAction() *MessageAction {
    return &MessageAction{
        Constructor: TLConstructor_CRC32_messageActionChatMigrateTo,
        Data2: m.Data2,
    }
}


func (m *TLMessageActionChatMigrateTo) SetChannelId(v int32) { m.Data2.ChannelId = v }
func (m *TLMessageActionChatMigrateTo) GetChannelId() int32 { return m.Data2.ChannelId }


func NewTLMessageActionChatMigrateTo() * TLMessageActionChatMigrateTo {
    return &TLMessageActionChatMigrateTo{ Data2: &MessageAction_Data{} }
}

func (m* TLMessageActionChatMigrateTo) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageActionChatMigrateTo))

    x.Int(m.GetChannelId())

    return x.buf
}

func (m* TLMessageActionChatMigrateTo) Decode(dbuf *DecodeBuf) error {
    m.SetChannelId(dbuf.Int())

    return dbuf.err
}
// messageActionChannelMigrateFrom#b055eaee title:string chat_id:int = MessageAction;
func (m *TLMessageActionChannelMigrateFrom) To_MessageAction() *MessageAction {
    return &MessageAction{
        Constructor: TLConstructor_CRC32_messageActionChannelMigrateFrom,
        Data2: m.Data2,
    }
}


func (m *TLMessageActionChannelMigrateFrom) SetTitle(v string) { m.Data2.Title = v }
func (m *TLMessageActionChannelMigrateFrom) GetTitle() string { return m.Data2.Title }

func (m *TLMessageActionChannelMigrateFrom) SetChatId(v int32) { m.Data2.ChatId = v }
func (m *TLMessageActionChannelMigrateFrom) GetChatId() int32 { return m.Data2.ChatId }


func NewTLMessageActionChannelMigrateFrom() * TLMessageActionChannelMigrateFrom {
    return &TLMessageActionChannelMigrateFrom{ Data2: &MessageAction_Data{} }
}

func (m* TLMessageActionChannelMigrateFrom) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageActionChannelMigrateFrom))

    x.String(m.GetTitle())
    x.Int(m.GetChatId())

    return x.buf
}

func (m* TLMessageActionChannelMigrateFrom) Decode(dbuf *DecodeBuf) error {
    m.SetTitle(dbuf.String())
    m.SetChatId(dbuf.Int())

    return dbuf.err
}
// messageActionPinMessage#94bd38ed = MessageAction;
func (m *TLMessageActionPinMessage) To_MessageAction() *MessageAction {
    return &MessageAction{
        Constructor: TLConstructor_CRC32_messageActionPinMessage,
        Data2: m.Data2,
    }
}



func NewTLMessageActionPinMessage() * TLMessageActionPinMessage {
    return &TLMessageActionPinMessage{ Data2: &MessageAction_Data{} }
}

func (m* TLMessageActionPinMessage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageActionPinMessage))


    return x.buf
}

func (m* TLMessageActionPinMessage) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// messageActionHistoryClear#9fbab604 = MessageAction;
func (m *TLMessageActionHistoryClear) To_MessageAction() *MessageAction {
    return &MessageAction{
        Constructor: TLConstructor_CRC32_messageActionHistoryClear,
        Data2: m.Data2,
    }
}



func NewTLMessageActionHistoryClear() * TLMessageActionHistoryClear {
    return &TLMessageActionHistoryClear{ Data2: &MessageAction_Data{} }
}

func (m* TLMessageActionHistoryClear) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageActionHistoryClear))


    return x.buf
}

func (m* TLMessageActionHistoryClear) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// messageActionGameScore#92a72876 game_id:long score:int = MessageAction;
func (m *TLMessageActionGameScore) To_MessageAction() *MessageAction {
    return &MessageAction{
        Constructor: TLConstructor_CRC32_messageActionGameScore,
        Data2: m.Data2,
    }
}


func (m *TLMessageActionGameScore) SetGameId(v int64) { m.Data2.GameId = v }
func (m *TLMessageActionGameScore) GetGameId() int64 { return m.Data2.GameId }

func (m *TLMessageActionGameScore) SetScore(v int32) { m.Data2.Score = v }
func (m *TLMessageActionGameScore) GetScore() int32 { return m.Data2.Score }


func NewTLMessageActionGameScore() * TLMessageActionGameScore {
    return &TLMessageActionGameScore{ Data2: &MessageAction_Data{} }
}

func (m* TLMessageActionGameScore) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageActionGameScore))

    x.Long(m.GetGameId())
    x.Int(m.GetScore())

    return x.buf
}

func (m* TLMessageActionGameScore) Decode(dbuf *DecodeBuf) error {
    m.SetGameId(dbuf.Long())
    m.SetScore(dbuf.Int())

    return dbuf.err
}
// messageActionPaymentSentMe#8f31b327 flags:# currency:string total_amount:long payload:bytes info:flags.0?PaymentRequestedInfo shipping_option_id:flags.1?string charge:PaymentCharge = MessageAction;
func (m *TLMessageActionPaymentSentMe) To_MessageAction() *MessageAction {
    return &MessageAction{
        Constructor: TLConstructor_CRC32_messageActionPaymentSentMe,
        Data2: m.Data2,
    }
}


func (m *TLMessageActionPaymentSentMe) SetCurrency(v string) { m.Data2.Currency = v }
func (m *TLMessageActionPaymentSentMe) GetCurrency() string { return m.Data2.Currency }

func (m *TLMessageActionPaymentSentMe) SetTotalAmount(v int64) { m.Data2.TotalAmount = v }
func (m *TLMessageActionPaymentSentMe) GetTotalAmount() int64 { return m.Data2.TotalAmount }

func (m *TLMessageActionPaymentSentMe) SetPayload(v []byte) { m.Data2.Payload = v }
func (m *TLMessageActionPaymentSentMe) GetPayload() []byte { return m.Data2.Payload }

func (m *TLMessageActionPaymentSentMe) SetInfo(v *PaymentRequestedInfo) { m.Data2.Info = v }
func (m *TLMessageActionPaymentSentMe) GetInfo() *PaymentRequestedInfo { return m.Data2.Info }

func (m *TLMessageActionPaymentSentMe) SetShippingOptionId(v string) { m.Data2.ShippingOptionId = v }
func (m *TLMessageActionPaymentSentMe) GetShippingOptionId() string { return m.Data2.ShippingOptionId }

func (m *TLMessageActionPaymentSentMe) SetCharge(v *PaymentCharge) { m.Data2.Charge = v }
func (m *TLMessageActionPaymentSentMe) GetCharge() *PaymentCharge { return m.Data2.Charge }


func NewTLMessageActionPaymentSentMe() * TLMessageActionPaymentSentMe {
    return &TLMessageActionPaymentSentMe{ Data2: &MessageAction_Data{} }
}

func (m* TLMessageActionPaymentSentMe) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageActionPaymentSentMe))

    // flags
    var flags uint32 = 0
    if m.GetInfo() != nil { flags |= 1 << 0 }
    if m.GetShippingOptionId() != "" { flags |= 1 << 1 }
	x.UInt(flags)

    x.String(m.GetCurrency())
    x.Long(m.GetTotalAmount())
    x.StringBytes(m.GetPayload())
    if (flags & (1 << 0)) != 0 { x.Bytes(m.GetInfo().Encode()) }
    if (flags & (1 << 1)) != 0 { x.String(m.GetShippingOptionId()) }
    x.Bytes(m.GetCharge().Encode())

    return x.buf
}

func (m* TLMessageActionPaymentSentMe) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetCurrency(dbuf.String())
    m.SetTotalAmount(dbuf.Long())
    m.SetPayload(dbuf.StringBytes())
    if (flags & (1 << 0)) != 0 {
 m5 := &PaymentRequestedInfo{}
    m5.Decode(dbuf)
    m.SetInfo(m5) 
}
    if (flags & (1 << 1)) != 0 { m.SetShippingOptionId(dbuf.String()) }
    m7 := &PaymentCharge{}
    m7.Decode(dbuf)
    m.SetCharge(m7)

    return dbuf.err
}
// messageActionPaymentSent#40699cd0 currency:string total_amount:long = MessageAction;
func (m *TLMessageActionPaymentSent) To_MessageAction() *MessageAction {
    return &MessageAction{
        Constructor: TLConstructor_CRC32_messageActionPaymentSent,
        Data2: m.Data2,
    }
}


func (m *TLMessageActionPaymentSent) SetCurrency(v string) { m.Data2.Currency = v }
func (m *TLMessageActionPaymentSent) GetCurrency() string { return m.Data2.Currency }

func (m *TLMessageActionPaymentSent) SetTotalAmount(v int64) { m.Data2.TotalAmount = v }
func (m *TLMessageActionPaymentSent) GetTotalAmount() int64 { return m.Data2.TotalAmount }


func NewTLMessageActionPaymentSent() * TLMessageActionPaymentSent {
    return &TLMessageActionPaymentSent{ Data2: &MessageAction_Data{} }
}

func (m* TLMessageActionPaymentSent) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageActionPaymentSent))

    x.String(m.GetCurrency())
    x.Long(m.GetTotalAmount())

    return x.buf
}

func (m* TLMessageActionPaymentSent) Decode(dbuf *DecodeBuf) error {
    m.SetCurrency(dbuf.String())
    m.SetTotalAmount(dbuf.Long())

    return dbuf.err
}
// messageActionPhoneCall#80e11a7f flags:# call_id:long reason:flags.0?PhoneCallDiscardReason duration:flags.1?int = MessageAction;
func (m *TLMessageActionPhoneCall) To_MessageAction() *MessageAction {
    return &MessageAction{
        Constructor: TLConstructor_CRC32_messageActionPhoneCall,
        Data2: m.Data2,
    }
}


func (m *TLMessageActionPhoneCall) SetCallId(v int64) { m.Data2.CallId = v }
func (m *TLMessageActionPhoneCall) GetCallId() int64 { return m.Data2.CallId }

func (m *TLMessageActionPhoneCall) SetReason(v *PhoneCallDiscardReason) { m.Data2.Reason = v }
func (m *TLMessageActionPhoneCall) GetReason() *PhoneCallDiscardReason { return m.Data2.Reason }

func (m *TLMessageActionPhoneCall) SetDuration(v int32) { m.Data2.Duration = v }
func (m *TLMessageActionPhoneCall) GetDuration() int32 { return m.Data2.Duration }


func NewTLMessageActionPhoneCall() * TLMessageActionPhoneCall {
    return &TLMessageActionPhoneCall{ Data2: &MessageAction_Data{} }
}

func (m* TLMessageActionPhoneCall) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageActionPhoneCall))

    // flags
    var flags uint32 = 0
    if m.GetReason() != nil { flags |= 1 << 0 }
    if m.GetDuration() != 0 { flags |= 1 << 1 }
	x.UInt(flags)

    x.Long(m.GetCallId())
    if (flags & (1 << 0)) != 0 { x.Bytes(m.GetReason().Encode()) }
    if (flags & (1 << 1)) != 0 { x.Int(m.GetDuration()) }

    return x.buf
}

func (m* TLMessageActionPhoneCall) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetCallId(dbuf.Long())
    if (flags & (1 << 0)) != 0 {
 m3 := &PhoneCallDiscardReason{}
    m3.Decode(dbuf)
    m.SetReason(m3) 
}
    if (flags & (1 << 1)) != 0 { m.SetDuration(dbuf.Int()) }

    return dbuf.err
}
// messageActionScreenshotTaken#4792929b = MessageAction;
func (m *TLMessageActionScreenshotTaken) To_MessageAction() *MessageAction {
    return &MessageAction{
        Constructor: TLConstructor_CRC32_messageActionScreenshotTaken,
        Data2: m.Data2,
    }
}



func NewTLMessageActionScreenshotTaken() * TLMessageActionScreenshotTaken {
    return &TLMessageActionScreenshotTaken{ Data2: &MessageAction_Data{} }
}

func (m* TLMessageActionScreenshotTaken) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageActionScreenshotTaken))


    return x.buf
}

func (m* TLMessageActionScreenshotTaken) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// messageActionCustomAction#fae69f56 message:string = MessageAction;
func (m *TLMessageActionCustomAction) To_MessageAction() *MessageAction {
    return &MessageAction{
        Constructor: TLConstructor_CRC32_messageActionCustomAction,
        Data2: m.Data2,
    }
}


func (m *TLMessageActionCustomAction) SetMessage(v string) { m.Data2.Message = v }
func (m *TLMessageActionCustomAction) GetMessage() string { return m.Data2.Message }


func NewTLMessageActionCustomAction() * TLMessageActionCustomAction {
    return &TLMessageActionCustomAction{ Data2: &MessageAction_Data{} }
}

func (m* TLMessageActionCustomAction) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageActionCustomAction))

    x.String(m.GetMessage())

    return x.buf
}

func (m* TLMessageActionCustomAction) Decode(dbuf *DecodeBuf) error {
    m.SetMessage(dbuf.String())

    return dbuf.err
}
// messageActionBotAllowed#abe9affe domain:string = MessageAction;
func (m *TLMessageActionBotAllowed) To_MessageAction() *MessageAction {
    return &MessageAction{
        Constructor: TLConstructor_CRC32_messageActionBotAllowed,
        Data2: m.Data2,
    }
}


func (m *TLMessageActionBotAllowed) SetDomain(v string) { m.Data2.Domain = v }
func (m *TLMessageActionBotAllowed) GetDomain() string { return m.Data2.Domain }


func NewTLMessageActionBotAllowed() * TLMessageActionBotAllowed {
    return &TLMessageActionBotAllowed{ Data2: &MessageAction_Data{} }
}

func (m* TLMessageActionBotAllowed) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageActionBotAllowed))

    x.String(m.GetDomain())

    return x.buf
}

func (m* TLMessageActionBotAllowed) Decode(dbuf *DecodeBuf) error {
    m.SetDomain(dbuf.String())

    return dbuf.err
}
// messageActionSecureValuesSentMe#1b287353 values:Vector<SecureValue> credentials:SecureCredentialsEncrypted = MessageAction;
func (m *TLMessageActionSecureValuesSentMe) To_MessageAction() *MessageAction {
    return &MessageAction{
        Constructor: TLConstructor_CRC32_messageActionSecureValuesSentMe,
        Data2: m.Data2,
    }
}


func (m *TLMessageActionSecureValuesSentMe) SetValues(v []*SecureValue) { m.Data2.Values = v }
func (m *TLMessageActionSecureValuesSentMe) GetValues() []*SecureValue { return m.Data2.Values }

func (m *TLMessageActionSecureValuesSentMe) SetCredentials(v *SecureCredentialsEncrypted) { m.Data2.Credentials = v }
func (m *TLMessageActionSecureValuesSentMe) GetCredentials() *SecureCredentialsEncrypted { return m.Data2.Credentials }


func NewTLMessageActionSecureValuesSentMe() * TLMessageActionSecureValuesSentMe {
    return &TLMessageActionSecureValuesSentMe{ Data2: &MessageAction_Data{} }
}

func (m* TLMessageActionSecureValuesSentMe) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageActionSecureValuesSentMe))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetValues())))
for _, v := range m.GetValues() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Bytes(m.GetCredentials().Encode())

    return x.buf
}

func (m* TLMessageActionSecureValuesSentMe) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*SecureValue, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &SecureValue{}
	v1[i].Decode(dbuf)
}
m.SetValues(v1)

    m2 := &SecureCredentialsEncrypted{}
    m2.Decode(dbuf)
    m.SetCredentials(m2)

    return dbuf.err
}
// messageActionSecureValuesSent#d95c6154 types:Vector<SecureValueType> = MessageAction;
func (m *TLMessageActionSecureValuesSent) To_MessageAction() *MessageAction {
    return &MessageAction{
        Constructor: TLConstructor_CRC32_messageActionSecureValuesSent,
        Data2: m.Data2,
    }
}


func (m *TLMessageActionSecureValuesSent) SetTypes(v []*SecureValueType) { m.Data2.Types = v }
func (m *TLMessageActionSecureValuesSent) GetTypes() []*SecureValueType { return m.Data2.Types }


func NewTLMessageActionSecureValuesSent() * TLMessageActionSecureValuesSent {
    return &TLMessageActionSecureValuesSent{ Data2: &MessageAction_Data{} }
}

func (m* TLMessageActionSecureValuesSent) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageActionSecureValuesSent))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetTypes())))
for _, v := range m.GetTypes() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLMessageActionSecureValuesSent) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*SecureValueType, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &SecureValueType{}
	v1[i].Decode(dbuf)
}
m.SetTypes(v1)


    return dbuf.err
}
// messageActionContactSignUp#f3f25f76 = MessageAction;
func (m *TLMessageActionContactSignUp) To_MessageAction() *MessageAction {
    return &MessageAction{
        Constructor: TLConstructor_CRC32_messageActionContactSignUp,
        Data2: m.Data2,
    }
}



func NewTLMessageActionContactSignUp() * TLMessageActionContactSignUp {
    return &TLMessageActionContactSignUp{ Data2: &MessageAction_Data{} }
}

func (m* TLMessageActionContactSignUp) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageActionContactSignUp))


    return x.buf
}

func (m* TLMessageActionContactSignUp) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Contact <--
//  + TL_Contact
//

func (m *Contact) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_contact:
        t := m.To_Contact()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Contact) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_contact:
        m2 := &TLContact{&Contact_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// contact#f911c994 user_id:int mutual:Bool = Contact;
func (m *Contact) To_Contact() *TLContact {
    return &TLContact{
        Data2: m.Data2,
    }
}



// contact#f911c994 user_id:int mutual:Bool = Contact;
func (m *TLContact) To_Contact() *Contact {
    return &Contact{
        Constructor: TLConstructor_CRC32_contact,
        Data2: m.Data2,
    }
}


func (m *TLContact) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLContact) GetUserId() int32 { return m.Data2.UserId }

func (m *TLContact) SetMutual(v *Bool) { m.Data2.Mutual = v }
func (m *TLContact) GetMutual() *Bool { return m.Data2.Mutual }


func NewTLContact() * TLContact {
    return &TLContact{ Data2: &Contact_Data{} }
}

func (m* TLContact) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_contact))

    x.Int(m.GetUserId())
    x.Bytes(m.GetMutual().Encode())

    return x.buf
}

func (m* TLContact) Decode(dbuf *DecodeBuf) error {
    m.SetUserId(dbuf.Int())
    m2 := &Bool{}
    m2.Decode(dbuf)
    m.SetMutual(m2)

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Help_InviteText <--
//  + TL_HelpInviteText
//

func (m *Help_InviteText) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_help_inviteText:
        t := m.To_HelpInviteText()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Help_InviteText) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_help_inviteText:
        m2 := &TLHelpInviteText{&Help_InviteText_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// help.inviteText#18cb9f78 message:string = help.InviteText;
func (m *Help_InviteText) To_HelpInviteText() *TLHelpInviteText {
    return &TLHelpInviteText{
        Data2: m.Data2,
    }
}



// help.inviteText#18cb9f78 message:string = help.InviteText;
func (m *TLHelpInviteText) To_Help_InviteText() *Help_InviteText {
    return &Help_InviteText{
        Constructor: TLConstructor_CRC32_help_inviteText,
        Data2: m.Data2,
    }
}


func (m *TLHelpInviteText) SetMessage(v string) { m.Data2.Message = v }
func (m *TLHelpInviteText) GetMessage() string { return m.Data2.Message }


func NewTLHelpInviteText() * TLHelpInviteText {
    return &TLHelpInviteText{ Data2: &Help_InviteText_Data{} }
}

func (m* TLHelpInviteText) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_help_inviteText))

    x.String(m.GetMessage())

    return x.buf
}

func (m* TLHelpInviteText) Decode(dbuf *DecodeBuf) error {
    m.SetMessage(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// EncryptedFile <--
//  + TL_EncryptedFileEmpty
//  + TL_EncryptedFile
//

func (m *EncryptedFile) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_encryptedFileEmpty:
        t := m.To_EncryptedFileEmpty()
        return t.Encode()
    case TLConstructor_CRC32_encryptedFile:
        t := m.To_EncryptedFile()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *EncryptedFile) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_encryptedFileEmpty:
        m2 := &TLEncryptedFileEmpty{&EncryptedFile_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_encryptedFile:
        m2 := &TLEncryptedFile{&EncryptedFile_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// encryptedFileEmpty#c21f497e = EncryptedFile;
func (m *EncryptedFile) To_EncryptedFileEmpty() *TLEncryptedFileEmpty {
    return &TLEncryptedFileEmpty{
        Data2: m.Data2,
    }
}

// encryptedFile#4a70994c id:long access_hash:long size:int dc_id:int key_fingerprint:int = EncryptedFile;
func (m *EncryptedFile) To_EncryptedFile() *TLEncryptedFile {
    return &TLEncryptedFile{
        Data2: m.Data2,
    }
}



// encryptedFileEmpty#c21f497e = EncryptedFile;
func (m *TLEncryptedFileEmpty) To_EncryptedFile() *EncryptedFile {
    return &EncryptedFile{
        Constructor: TLConstructor_CRC32_encryptedFileEmpty,
        Data2: m.Data2,
    }
}



func NewTLEncryptedFileEmpty() * TLEncryptedFileEmpty {
    return &TLEncryptedFileEmpty{ Data2: &EncryptedFile_Data{} }
}

func (m* TLEncryptedFileEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_encryptedFileEmpty))


    return x.buf
}

func (m* TLEncryptedFileEmpty) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// encryptedFile#4a70994c id:long access_hash:long size:int dc_id:int key_fingerprint:int = EncryptedFile;
func (m *TLEncryptedFile) To_EncryptedFile() *EncryptedFile {
    return &EncryptedFile{
        Constructor: TLConstructor_CRC32_encryptedFile,
        Data2: m.Data2,
    }
}


func (m *TLEncryptedFile) SetId(v int64) { m.Data2.Id = v }
func (m *TLEncryptedFile) GetId() int64 { return m.Data2.Id }

func (m *TLEncryptedFile) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLEncryptedFile) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLEncryptedFile) SetSize(v int32) { m.Data2.Size_ = v }
func (m *TLEncryptedFile) GetSize() int32 { return m.Data2.Size_ }

func (m *TLEncryptedFile) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLEncryptedFile) GetDcId() int32 { return m.Data2.DcId }

func (m *TLEncryptedFile) SetKeyFingerprint(v int32) { m.Data2.KeyFingerprint = v }
func (m *TLEncryptedFile) GetKeyFingerprint() int32 { return m.Data2.KeyFingerprint }


func NewTLEncryptedFile() * TLEncryptedFile {
    return &TLEncryptedFile{ Data2: &EncryptedFile_Data{} }
}

func (m* TLEncryptedFile) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_encryptedFile))

    x.Long(m.GetId())
    x.Long(m.GetAccessHash())
    x.Int(m.GetSize())
    x.Int(m.GetDcId())
    x.Int(m.GetKeyFingerprint())

    return x.buf
}

func (m* TLEncryptedFile) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())
    m.SetSize(dbuf.Int())
    m.SetDcId(dbuf.Int())
    m.SetKeyFingerprint(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// RestrictionReason <--
//  + TL_RestrictionReason
//

func (m *RestrictionReason) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_restrictionReason:
        t := m.To_RestrictionReason()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *RestrictionReason) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_restrictionReason:
        m2 := &TLRestrictionReason{&RestrictionReason_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// restrictionReason#d072acb4 platform:string reason:string text:string = RestrictionReason;
func (m *RestrictionReason) To_RestrictionReason() *TLRestrictionReason {
    return &TLRestrictionReason{
        Data2: m.Data2,
    }
}



// restrictionReason#d072acb4 platform:string reason:string text:string = RestrictionReason;
func (m *TLRestrictionReason) To_RestrictionReason() *RestrictionReason {
    return &RestrictionReason{
        Constructor: TLConstructor_CRC32_restrictionReason,
        Data2: m.Data2,
    }
}


func (m *TLRestrictionReason) SetPlatform(v string) { m.Data2.Platform = v }
func (m *TLRestrictionReason) GetPlatform() string { return m.Data2.Platform }

func (m *TLRestrictionReason) SetReason(v string) { m.Data2.Reason = v }
func (m *TLRestrictionReason) GetReason() string { return m.Data2.Reason }

func (m *TLRestrictionReason) SetText(v string) { m.Data2.Text = v }
func (m *TLRestrictionReason) GetText() string { return m.Data2.Text }


func NewTLRestrictionReason() * TLRestrictionReason {
    return &TLRestrictionReason{ Data2: &RestrictionReason_Data{} }
}

func (m* TLRestrictionReason) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_restrictionReason))

    x.String(m.GetPlatform())
    x.String(m.GetReason())
    x.String(m.GetText())

    return x.buf
}

func (m* TLRestrictionReason) Decode(dbuf *DecodeBuf) error {
    m.SetPlatform(dbuf.String())
    m.SetReason(dbuf.String())
    m.SetText(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Help_Country <--
//  + TL_HelpCountry
//

func (m *Help_Country) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_help_country:
        t := m.To_HelpCountry()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Help_Country) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_help_country:
        m2 := &TLHelpCountry{&Help_Country_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// help.country#c3878e23 flags:# hidden:flags.0?true iso2:string default_name:string name:flags.1?string country_codes:Vector<help.CountryCode> = help.Country;
func (m *Help_Country) To_HelpCountry() *TLHelpCountry {
    return &TLHelpCountry{
        Data2: m.Data2,
    }
}



// help.country#c3878e23 flags:# hidden:flags.0?true iso2:string default_name:string name:flags.1?string country_codes:Vector<help.CountryCode> = help.Country;
func (m *TLHelpCountry) To_Help_Country() *Help_Country {
    return &Help_Country{
        Constructor: TLConstructor_CRC32_help_country,
        Data2: m.Data2,
    }
}


func (m *TLHelpCountry) SetHidden(v bool) { m.Data2.Hidden = v }
func (m *TLHelpCountry) GetHidden() bool { return m.Data2.Hidden }

func (m *TLHelpCountry) SetIso2(v string) { m.Data2.Iso2 = v }
func (m *TLHelpCountry) GetIso2() string { return m.Data2.Iso2 }

func (m *TLHelpCountry) SetDefaultName(v string) { m.Data2.DefaultName = v }
func (m *TLHelpCountry) GetDefaultName() string { return m.Data2.DefaultName }

func (m *TLHelpCountry) SetName(v string) { m.Data2.Name = v }
func (m *TLHelpCountry) GetName() string { return m.Data2.Name }

func (m *TLHelpCountry) SetCountryCodes(v []*Help_CountryCode) { m.Data2.CountryCodes = v }
func (m *TLHelpCountry) GetCountryCodes() []*Help_CountryCode { return m.Data2.CountryCodes }


func NewTLHelpCountry() * TLHelpCountry {
    return &TLHelpCountry{ Data2: &Help_Country_Data{} }
}

func (m* TLHelpCountry) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_help_country))

    // flags
    var flags uint32 = 0
    if m.GetHidden() == true { flags |= 1 << 0 }
    if m.GetName() != "" { flags |= 1 << 1 }
	x.UInt(flags)

    
    x.String(m.GetIso2())
    x.String(m.GetDefaultName())
    if (flags & (1 << 1)) != 0 { x.String(m.GetName()) }
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetCountryCodes())))
for _, v := range m.GetCountryCodes() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLHelpCountry) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetHidden(true) }
    m.SetIso2(dbuf.String())
    m.SetDefaultName(dbuf.String())
    if (flags & (1 << 1)) != 0 { m.SetName(dbuf.String()) }
    c6 := dbuf.Int()
if c6 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 6, c6)
	return dbuf.err
}
l6 := dbuf.Int()
v6 := make([]*Help_CountryCode, l6)
for i := int32(0); i < l6; i++ {
	v6[i] = &Help_CountryCode{}
	v6[i].Decode(dbuf)
}
m.SetCountryCodes(v6)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// MessagesFilter <--
//  + TL_InputMessagesFilterEmpty
//  + TL_InputMessagesFilterPhotos
//  + TL_InputMessagesFilterVideo
//  + TL_InputMessagesFilterPhotoVideo
//  + TL_InputMessagesFilterPhotoVideoDocuments
//  + TL_InputMessagesFilterDocument
//  + TL_InputMessagesFilterUrl
//  + TL_InputMessagesFilterGif
//  + TL_InputMessagesFilterVoice
//  + TL_InputMessagesFilterMusic
//  + TL_InputMessagesFilterChatPhotos
//  + TL_InputMessagesFilterPhoneCalls
//  + TL_InputMessagesFilterRoundVoice
//  + TL_InputMessagesFilterRoundVideo
//  + TL_InputMessagesFilterMyMentions
//  + TL_InputMessagesFilterGeo
//  + TL_InputMessagesFilterContacts
//

func (m *MessagesFilter) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputMessagesFilterEmpty:
        t := m.To_InputMessagesFilterEmpty()
        return t.Encode()
    case TLConstructor_CRC32_inputMessagesFilterPhotos:
        t := m.To_InputMessagesFilterPhotos()
        return t.Encode()
    case TLConstructor_CRC32_inputMessagesFilterVideo:
        t := m.To_InputMessagesFilterVideo()
        return t.Encode()
    case TLConstructor_CRC32_inputMessagesFilterPhotoVideo:
        t := m.To_InputMessagesFilterPhotoVideo()
        return t.Encode()
    case TLConstructor_CRC32_inputMessagesFilterPhotoVideoDocuments:
        t := m.To_InputMessagesFilterPhotoVideoDocuments()
        return t.Encode()
    case TLConstructor_CRC32_inputMessagesFilterDocument:
        t := m.To_InputMessagesFilterDocument()
        return t.Encode()
    case TLConstructor_CRC32_inputMessagesFilterUrl:
        t := m.To_InputMessagesFilterUrl()
        return t.Encode()
    case TLConstructor_CRC32_inputMessagesFilterGif:
        t := m.To_InputMessagesFilterGif()
        return t.Encode()
    case TLConstructor_CRC32_inputMessagesFilterVoice:
        t := m.To_InputMessagesFilterVoice()
        return t.Encode()
    case TLConstructor_CRC32_inputMessagesFilterMusic:
        t := m.To_InputMessagesFilterMusic()
        return t.Encode()
    case TLConstructor_CRC32_inputMessagesFilterChatPhotos:
        t := m.To_InputMessagesFilterChatPhotos()
        return t.Encode()
    case TLConstructor_CRC32_inputMessagesFilterPhoneCalls:
        t := m.To_InputMessagesFilterPhoneCalls()
        return t.Encode()
    case TLConstructor_CRC32_inputMessagesFilterRoundVoice:
        t := m.To_InputMessagesFilterRoundVoice()
        return t.Encode()
    case TLConstructor_CRC32_inputMessagesFilterRoundVideo:
        t := m.To_InputMessagesFilterRoundVideo()
        return t.Encode()
    case TLConstructor_CRC32_inputMessagesFilterMyMentions:
        t := m.To_InputMessagesFilterMyMentions()
        return t.Encode()
    case TLConstructor_CRC32_inputMessagesFilterGeo:
        t := m.To_InputMessagesFilterGeo()
        return t.Encode()
    case TLConstructor_CRC32_inputMessagesFilterContacts:
        t := m.To_InputMessagesFilterContacts()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *MessagesFilter) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputMessagesFilterEmpty:
        m2 := &TLInputMessagesFilterEmpty{&MessagesFilter_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMessagesFilterPhotos:
        m2 := &TLInputMessagesFilterPhotos{&MessagesFilter_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMessagesFilterVideo:
        m2 := &TLInputMessagesFilterVideo{&MessagesFilter_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMessagesFilterPhotoVideo:
        m2 := &TLInputMessagesFilterPhotoVideo{&MessagesFilter_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMessagesFilterPhotoVideoDocuments:
        m2 := &TLInputMessagesFilterPhotoVideoDocuments{&MessagesFilter_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMessagesFilterDocument:
        m2 := &TLInputMessagesFilterDocument{&MessagesFilter_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMessagesFilterUrl:
        m2 := &TLInputMessagesFilterUrl{&MessagesFilter_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMessagesFilterGif:
        m2 := &TLInputMessagesFilterGif{&MessagesFilter_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMessagesFilterVoice:
        m2 := &TLInputMessagesFilterVoice{&MessagesFilter_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMessagesFilterMusic:
        m2 := &TLInputMessagesFilterMusic{&MessagesFilter_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMessagesFilterChatPhotos:
        m2 := &TLInputMessagesFilterChatPhotos{&MessagesFilter_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMessagesFilterPhoneCalls:
        m2 := &TLInputMessagesFilterPhoneCalls{&MessagesFilter_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMessagesFilterRoundVoice:
        m2 := &TLInputMessagesFilterRoundVoice{&MessagesFilter_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMessagesFilterRoundVideo:
        m2 := &TLInputMessagesFilterRoundVideo{&MessagesFilter_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMessagesFilterMyMentions:
        m2 := &TLInputMessagesFilterMyMentions{&MessagesFilter_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMessagesFilterGeo:
        m2 := &TLInputMessagesFilterGeo{&MessagesFilter_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMessagesFilterContacts:
        m2 := &TLInputMessagesFilterContacts{&MessagesFilter_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputMessagesFilterEmpty#57e2f66c = MessagesFilter;
func (m *MessagesFilter) To_InputMessagesFilterEmpty() *TLInputMessagesFilterEmpty {
    return &TLInputMessagesFilterEmpty{
        Data2: m.Data2,
    }
}

// inputMessagesFilterPhotos#9609a51c = MessagesFilter;
func (m *MessagesFilter) To_InputMessagesFilterPhotos() *TLInputMessagesFilterPhotos {
    return &TLInputMessagesFilterPhotos{
        Data2: m.Data2,
    }
}

// inputMessagesFilterVideo#9fc00e65 = MessagesFilter;
func (m *MessagesFilter) To_InputMessagesFilterVideo() *TLInputMessagesFilterVideo {
    return &TLInputMessagesFilterVideo{
        Data2: m.Data2,
    }
}

// inputMessagesFilterPhotoVideo#56e9f0e4 = MessagesFilter;
func (m *MessagesFilter) To_InputMessagesFilterPhotoVideo() *TLInputMessagesFilterPhotoVideo {
    return &TLInputMessagesFilterPhotoVideo{
        Data2: m.Data2,
    }
}

// inputMessagesFilterPhotoVideoDocuments#d95e73bb = MessagesFilter;
func (m *MessagesFilter) To_InputMessagesFilterPhotoVideoDocuments() *TLInputMessagesFilterPhotoVideoDocuments {
    return &TLInputMessagesFilterPhotoVideoDocuments{
        Data2: m.Data2,
    }
}

// inputMessagesFilterDocument#9eddf188 = MessagesFilter;
func (m *MessagesFilter) To_InputMessagesFilterDocument() *TLInputMessagesFilterDocument {
    return &TLInputMessagesFilterDocument{
        Data2: m.Data2,
    }
}

// inputMessagesFilterUrl#7ef0dd87 = MessagesFilter;
func (m *MessagesFilter) To_InputMessagesFilterUrl() *TLInputMessagesFilterUrl {
    return &TLInputMessagesFilterUrl{
        Data2: m.Data2,
    }
}

// inputMessagesFilterGif#ffc86587 = MessagesFilter;
func (m *MessagesFilter) To_InputMessagesFilterGif() *TLInputMessagesFilterGif {
    return &TLInputMessagesFilterGif{
        Data2: m.Data2,
    }
}

// inputMessagesFilterVoice#50f5c392 = MessagesFilter;
func (m *MessagesFilter) To_InputMessagesFilterVoice() *TLInputMessagesFilterVoice {
    return &TLInputMessagesFilterVoice{
        Data2: m.Data2,
    }
}

// inputMessagesFilterMusic#3751b49e = MessagesFilter;
func (m *MessagesFilter) To_InputMessagesFilterMusic() *TLInputMessagesFilterMusic {
    return &TLInputMessagesFilterMusic{
        Data2: m.Data2,
    }
}

// inputMessagesFilterChatPhotos#3a20ecb8 = MessagesFilter;
func (m *MessagesFilter) To_InputMessagesFilterChatPhotos() *TLInputMessagesFilterChatPhotos {
    return &TLInputMessagesFilterChatPhotos{
        Data2: m.Data2,
    }
}

// inputMessagesFilterPhoneCalls#80c99768 flags:# missed:flags.0?true = MessagesFilter;
func (m *MessagesFilter) To_InputMessagesFilterPhoneCalls() *TLInputMessagesFilterPhoneCalls {
    return &TLInputMessagesFilterPhoneCalls{
        Data2: m.Data2,
    }
}

// inputMessagesFilterRoundVoice#7a7c17a4 = MessagesFilter;
func (m *MessagesFilter) To_InputMessagesFilterRoundVoice() *TLInputMessagesFilterRoundVoice {
    return &TLInputMessagesFilterRoundVoice{
        Data2: m.Data2,
    }
}

// inputMessagesFilterRoundVideo#b549da53 = MessagesFilter;
func (m *MessagesFilter) To_InputMessagesFilterRoundVideo() *TLInputMessagesFilterRoundVideo {
    return &TLInputMessagesFilterRoundVideo{
        Data2: m.Data2,
    }
}

// inputMessagesFilterMyMentions#c1f8e69a = MessagesFilter;
func (m *MessagesFilter) To_InputMessagesFilterMyMentions() *TLInputMessagesFilterMyMentions {
    return &TLInputMessagesFilterMyMentions{
        Data2: m.Data2,
    }
}

// inputMessagesFilterGeo#e7026d0d = MessagesFilter;
func (m *MessagesFilter) To_InputMessagesFilterGeo() *TLInputMessagesFilterGeo {
    return &TLInputMessagesFilterGeo{
        Data2: m.Data2,
    }
}

// inputMessagesFilterContacts#e062db83 = MessagesFilter;
func (m *MessagesFilter) To_InputMessagesFilterContacts() *TLInputMessagesFilterContacts {
    return &TLInputMessagesFilterContacts{
        Data2: m.Data2,
    }
}



// inputMessagesFilterEmpty#57e2f66c = MessagesFilter;
func (m *TLInputMessagesFilterEmpty) To_MessagesFilter() *MessagesFilter {
    return &MessagesFilter{
        Constructor: TLConstructor_CRC32_inputMessagesFilterEmpty,
        Data2: m.Data2,
    }
}



func NewTLInputMessagesFilterEmpty() * TLInputMessagesFilterEmpty {
    return &TLInputMessagesFilterEmpty{ Data2: &MessagesFilter_Data{} }
}

func (m* TLInputMessagesFilterEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMessagesFilterEmpty))


    return x.buf
}

func (m* TLInputMessagesFilterEmpty) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputMessagesFilterPhotos#9609a51c = MessagesFilter;
func (m *TLInputMessagesFilterPhotos) To_MessagesFilter() *MessagesFilter {
    return &MessagesFilter{
        Constructor: TLConstructor_CRC32_inputMessagesFilterPhotos,
        Data2: m.Data2,
    }
}



func NewTLInputMessagesFilterPhotos() * TLInputMessagesFilterPhotos {
    return &TLInputMessagesFilterPhotos{ Data2: &MessagesFilter_Data{} }
}

func (m* TLInputMessagesFilterPhotos) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMessagesFilterPhotos))


    return x.buf
}

func (m* TLInputMessagesFilterPhotos) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputMessagesFilterVideo#9fc00e65 = MessagesFilter;
func (m *TLInputMessagesFilterVideo) To_MessagesFilter() *MessagesFilter {
    return &MessagesFilter{
        Constructor: TLConstructor_CRC32_inputMessagesFilterVideo,
        Data2: m.Data2,
    }
}



func NewTLInputMessagesFilterVideo() * TLInputMessagesFilterVideo {
    return &TLInputMessagesFilterVideo{ Data2: &MessagesFilter_Data{} }
}

func (m* TLInputMessagesFilterVideo) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMessagesFilterVideo))


    return x.buf
}

func (m* TLInputMessagesFilterVideo) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputMessagesFilterPhotoVideo#56e9f0e4 = MessagesFilter;
func (m *TLInputMessagesFilterPhotoVideo) To_MessagesFilter() *MessagesFilter {
    return &MessagesFilter{
        Constructor: TLConstructor_CRC32_inputMessagesFilterPhotoVideo,
        Data2: m.Data2,
    }
}



func NewTLInputMessagesFilterPhotoVideo() * TLInputMessagesFilterPhotoVideo {
    return &TLInputMessagesFilterPhotoVideo{ Data2: &MessagesFilter_Data{} }
}

func (m* TLInputMessagesFilterPhotoVideo) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMessagesFilterPhotoVideo))


    return x.buf
}

func (m* TLInputMessagesFilterPhotoVideo) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputMessagesFilterPhotoVideoDocuments#d95e73bb = MessagesFilter;
func (m *TLInputMessagesFilterPhotoVideoDocuments) To_MessagesFilter() *MessagesFilter {
    return &MessagesFilter{
        Constructor: TLConstructor_CRC32_inputMessagesFilterPhotoVideoDocuments,
        Data2: m.Data2,
    }
}



func NewTLInputMessagesFilterPhotoVideoDocuments() * TLInputMessagesFilterPhotoVideoDocuments {
    return &TLInputMessagesFilterPhotoVideoDocuments{ Data2: &MessagesFilter_Data{} }
}

func (m* TLInputMessagesFilterPhotoVideoDocuments) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMessagesFilterPhotoVideoDocuments))


    return x.buf
}

func (m* TLInputMessagesFilterPhotoVideoDocuments) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputMessagesFilterDocument#9eddf188 = MessagesFilter;
func (m *TLInputMessagesFilterDocument) To_MessagesFilter() *MessagesFilter {
    return &MessagesFilter{
        Constructor: TLConstructor_CRC32_inputMessagesFilterDocument,
        Data2: m.Data2,
    }
}



func NewTLInputMessagesFilterDocument() * TLInputMessagesFilterDocument {
    return &TLInputMessagesFilterDocument{ Data2: &MessagesFilter_Data{} }
}

func (m* TLInputMessagesFilterDocument) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMessagesFilterDocument))


    return x.buf
}

func (m* TLInputMessagesFilterDocument) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputMessagesFilterUrl#7ef0dd87 = MessagesFilter;
func (m *TLInputMessagesFilterUrl) To_MessagesFilter() *MessagesFilter {
    return &MessagesFilter{
        Constructor: TLConstructor_CRC32_inputMessagesFilterUrl,
        Data2: m.Data2,
    }
}



func NewTLInputMessagesFilterUrl() * TLInputMessagesFilterUrl {
    return &TLInputMessagesFilterUrl{ Data2: &MessagesFilter_Data{} }
}

func (m* TLInputMessagesFilterUrl) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMessagesFilterUrl))


    return x.buf
}

func (m* TLInputMessagesFilterUrl) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputMessagesFilterGif#ffc86587 = MessagesFilter;
func (m *TLInputMessagesFilterGif) To_MessagesFilter() *MessagesFilter {
    return &MessagesFilter{
        Constructor: TLConstructor_CRC32_inputMessagesFilterGif,
        Data2: m.Data2,
    }
}



func NewTLInputMessagesFilterGif() * TLInputMessagesFilterGif {
    return &TLInputMessagesFilterGif{ Data2: &MessagesFilter_Data{} }
}

func (m* TLInputMessagesFilterGif) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMessagesFilterGif))


    return x.buf
}

func (m* TLInputMessagesFilterGif) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputMessagesFilterVoice#50f5c392 = MessagesFilter;
func (m *TLInputMessagesFilterVoice) To_MessagesFilter() *MessagesFilter {
    return &MessagesFilter{
        Constructor: TLConstructor_CRC32_inputMessagesFilterVoice,
        Data2: m.Data2,
    }
}



func NewTLInputMessagesFilterVoice() * TLInputMessagesFilterVoice {
    return &TLInputMessagesFilterVoice{ Data2: &MessagesFilter_Data{} }
}

func (m* TLInputMessagesFilterVoice) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMessagesFilterVoice))


    return x.buf
}

func (m* TLInputMessagesFilterVoice) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputMessagesFilterMusic#3751b49e = MessagesFilter;
func (m *TLInputMessagesFilterMusic) To_MessagesFilter() *MessagesFilter {
    return &MessagesFilter{
        Constructor: TLConstructor_CRC32_inputMessagesFilterMusic,
        Data2: m.Data2,
    }
}



func NewTLInputMessagesFilterMusic() * TLInputMessagesFilterMusic {
    return &TLInputMessagesFilterMusic{ Data2: &MessagesFilter_Data{} }
}

func (m* TLInputMessagesFilterMusic) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMessagesFilterMusic))


    return x.buf
}

func (m* TLInputMessagesFilterMusic) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputMessagesFilterChatPhotos#3a20ecb8 = MessagesFilter;
func (m *TLInputMessagesFilterChatPhotos) To_MessagesFilter() *MessagesFilter {
    return &MessagesFilter{
        Constructor: TLConstructor_CRC32_inputMessagesFilterChatPhotos,
        Data2: m.Data2,
    }
}



func NewTLInputMessagesFilterChatPhotos() * TLInputMessagesFilterChatPhotos {
    return &TLInputMessagesFilterChatPhotos{ Data2: &MessagesFilter_Data{} }
}

func (m* TLInputMessagesFilterChatPhotos) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMessagesFilterChatPhotos))


    return x.buf
}

func (m* TLInputMessagesFilterChatPhotos) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputMessagesFilterPhoneCalls#80c99768 flags:# missed:flags.0?true = MessagesFilter;
func (m *TLInputMessagesFilterPhoneCalls) To_MessagesFilter() *MessagesFilter {
    return &MessagesFilter{
        Constructor: TLConstructor_CRC32_inputMessagesFilterPhoneCalls,
        Data2: m.Data2,
    }
}


func (m *TLInputMessagesFilterPhoneCalls) SetMissed(v bool) { m.Data2.Missed = v }
func (m *TLInputMessagesFilterPhoneCalls) GetMissed() bool { return m.Data2.Missed }


func NewTLInputMessagesFilterPhoneCalls() * TLInputMessagesFilterPhoneCalls {
    return &TLInputMessagesFilterPhoneCalls{ Data2: &MessagesFilter_Data{} }
}

func (m* TLInputMessagesFilterPhoneCalls) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMessagesFilterPhoneCalls))

    // flags
    var flags uint32 = 0
    if m.GetMissed() == true { flags |= 1 << 0 }
	x.UInt(flags)

    

    return x.buf
}

func (m* TLInputMessagesFilterPhoneCalls) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetMissed(true) }

    return dbuf.err
}
// inputMessagesFilterRoundVoice#7a7c17a4 = MessagesFilter;
func (m *TLInputMessagesFilterRoundVoice) To_MessagesFilter() *MessagesFilter {
    return &MessagesFilter{
        Constructor: TLConstructor_CRC32_inputMessagesFilterRoundVoice,
        Data2: m.Data2,
    }
}



func NewTLInputMessagesFilterRoundVoice() * TLInputMessagesFilterRoundVoice {
    return &TLInputMessagesFilterRoundVoice{ Data2: &MessagesFilter_Data{} }
}

func (m* TLInputMessagesFilterRoundVoice) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMessagesFilterRoundVoice))


    return x.buf
}

func (m* TLInputMessagesFilterRoundVoice) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputMessagesFilterRoundVideo#b549da53 = MessagesFilter;
func (m *TLInputMessagesFilterRoundVideo) To_MessagesFilter() *MessagesFilter {
    return &MessagesFilter{
        Constructor: TLConstructor_CRC32_inputMessagesFilterRoundVideo,
        Data2: m.Data2,
    }
}



func NewTLInputMessagesFilterRoundVideo() * TLInputMessagesFilterRoundVideo {
    return &TLInputMessagesFilterRoundVideo{ Data2: &MessagesFilter_Data{} }
}

func (m* TLInputMessagesFilterRoundVideo) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMessagesFilterRoundVideo))


    return x.buf
}

func (m* TLInputMessagesFilterRoundVideo) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputMessagesFilterMyMentions#c1f8e69a = MessagesFilter;
func (m *TLInputMessagesFilterMyMentions) To_MessagesFilter() *MessagesFilter {
    return &MessagesFilter{
        Constructor: TLConstructor_CRC32_inputMessagesFilterMyMentions,
        Data2: m.Data2,
    }
}



func NewTLInputMessagesFilterMyMentions() * TLInputMessagesFilterMyMentions {
    return &TLInputMessagesFilterMyMentions{ Data2: &MessagesFilter_Data{} }
}

func (m* TLInputMessagesFilterMyMentions) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMessagesFilterMyMentions))


    return x.buf
}

func (m* TLInputMessagesFilterMyMentions) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputMessagesFilterGeo#e7026d0d = MessagesFilter;
func (m *TLInputMessagesFilterGeo) To_MessagesFilter() *MessagesFilter {
    return &MessagesFilter{
        Constructor: TLConstructor_CRC32_inputMessagesFilterGeo,
        Data2: m.Data2,
    }
}



func NewTLInputMessagesFilterGeo() * TLInputMessagesFilterGeo {
    return &TLInputMessagesFilterGeo{ Data2: &MessagesFilter_Data{} }
}

func (m* TLInputMessagesFilterGeo) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMessagesFilterGeo))


    return x.buf
}

func (m* TLInputMessagesFilterGeo) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputMessagesFilterContacts#e062db83 = MessagesFilter;
func (m *TLInputMessagesFilterContacts) To_MessagesFilter() *MessagesFilter {
    return &MessagesFilter{
        Constructor: TLConstructor_CRC32_inputMessagesFilterContacts,
        Data2: m.Data2,
    }
}



func NewTLInputMessagesFilterContacts() * TLInputMessagesFilterContacts {
    return &TLInputMessagesFilterContacts{ Data2: &MessagesFilter_Data{} }
}

func (m* TLInputMessagesFilterContacts) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMessagesFilterContacts))


    return x.buf
}

func (m* TLInputMessagesFilterContacts) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// ReceivedNotifyMessage <--
//  + TL_ReceivedNotifyMessage
//

func (m *ReceivedNotifyMessage) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_receivedNotifyMessage:
        t := m.To_ReceivedNotifyMessage()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *ReceivedNotifyMessage) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_receivedNotifyMessage:
        m2 := &TLReceivedNotifyMessage{&ReceivedNotifyMessage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// receivedNotifyMessage#a384b779 id:int flags:int = ReceivedNotifyMessage;
func (m *ReceivedNotifyMessage) To_ReceivedNotifyMessage() *TLReceivedNotifyMessage {
    return &TLReceivedNotifyMessage{
        Data2: m.Data2,
    }
}



// receivedNotifyMessage#a384b779 id:int flags:int = ReceivedNotifyMessage;
func (m *TLReceivedNotifyMessage) To_ReceivedNotifyMessage() *ReceivedNotifyMessage {
    return &ReceivedNotifyMessage{
        Constructor: TLConstructor_CRC32_receivedNotifyMessage,
        Data2: m.Data2,
    }
}


func (m *TLReceivedNotifyMessage) SetId(v int32) { m.Data2.Id = v }
func (m *TLReceivedNotifyMessage) GetId() int32 { return m.Data2.Id }

func (m *TLReceivedNotifyMessage) SetFlags(v int32) { m.Data2.Flags = v }
func (m *TLReceivedNotifyMessage) GetFlags() int32 { return m.Data2.Flags }


func NewTLReceivedNotifyMessage() * TLReceivedNotifyMessage {
    return &TLReceivedNotifyMessage{ Data2: &ReceivedNotifyMessage_Data{} }
}

func (m* TLReceivedNotifyMessage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_receivedNotifyMessage))

    x.Int(m.GetId())
    x.Int(m.GetFlags())

    return x.buf
}

func (m* TLReceivedNotifyMessage) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Int())
    m.SetFlags(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Messages_SavedGifs <--
//  + TL_MessagesSavedGifsNotModified
//  + TL_MessagesSavedGifs
//

func (m *Messages_SavedGifs) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messages_savedGifsNotModified:
        t := m.To_MessagesSavedGifsNotModified()
        return t.Encode()
    case TLConstructor_CRC32_messages_savedGifs:
        t := m.To_MessagesSavedGifs()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Messages_SavedGifs) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messages_savedGifsNotModified:
        m2 := &TLMessagesSavedGifsNotModified{&Messages_SavedGifs_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messages_savedGifs:
        m2 := &TLMessagesSavedGifs{&Messages_SavedGifs_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messages.savedGifsNotModified#e8025ca2 = messages.SavedGifs;
func (m *Messages_SavedGifs) To_MessagesSavedGifsNotModified() *TLMessagesSavedGifsNotModified {
    return &TLMessagesSavedGifsNotModified{
        Data2: m.Data2,
    }
}

// messages.savedGifs#2e0709a5 hash:int gifs:Vector<Document> = messages.SavedGifs;
func (m *Messages_SavedGifs) To_MessagesSavedGifs() *TLMessagesSavedGifs {
    return &TLMessagesSavedGifs{
        Data2: m.Data2,
    }
}



// messages.savedGifsNotModified#e8025ca2 = messages.SavedGifs;
func (m *TLMessagesSavedGifsNotModified) To_Messages_SavedGifs() *Messages_SavedGifs {
    return &Messages_SavedGifs{
        Constructor: TLConstructor_CRC32_messages_savedGifsNotModified,
        Data2: m.Data2,
    }
}



func NewTLMessagesSavedGifsNotModified() * TLMessagesSavedGifsNotModified {
    return &TLMessagesSavedGifsNotModified{ Data2: &Messages_SavedGifs_Data{} }
}

func (m* TLMessagesSavedGifsNotModified) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_savedGifsNotModified))


    return x.buf
}

func (m* TLMessagesSavedGifsNotModified) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// messages.savedGifs#2e0709a5 hash:int gifs:Vector<Document> = messages.SavedGifs;
func (m *TLMessagesSavedGifs) To_Messages_SavedGifs() *Messages_SavedGifs {
    return &Messages_SavedGifs{
        Constructor: TLConstructor_CRC32_messages_savedGifs,
        Data2: m.Data2,
    }
}


func (m *TLMessagesSavedGifs) SetHash(v int32) { m.Data2.Hash = v }
func (m *TLMessagesSavedGifs) GetHash() int32 { return m.Data2.Hash }

func (m *TLMessagesSavedGifs) SetGifs(v []*Document) { m.Data2.Gifs = v }
func (m *TLMessagesSavedGifs) GetGifs() []*Document { return m.Data2.Gifs }


func NewTLMessagesSavedGifs() * TLMessagesSavedGifs {
    return &TLMessagesSavedGifs{ Data2: &Messages_SavedGifs_Data{} }
}

func (m* TLMessagesSavedGifs) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_savedGifs))

    x.Int(m.GetHash())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetGifs())))
for _, v := range m.GetGifs() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLMessagesSavedGifs) Decode(dbuf *DecodeBuf) error {
    m.SetHash(dbuf.Int())
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*Document, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &Document{}
	v2[i].Decode(dbuf)
}
m.SetGifs(v2)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Auth_CodeType <--
//  + TL_AuthCodeTypeSms
//  + TL_AuthCodeTypeCall
//  + TL_AuthCodeTypeFlashCall
//

func (m *Auth_CodeType) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_auth_codeTypeSms:
        t := m.To_AuthCodeTypeSms()
        return t.Encode()
    case TLConstructor_CRC32_auth_codeTypeCall:
        t := m.To_AuthCodeTypeCall()
        return t.Encode()
    case TLConstructor_CRC32_auth_codeTypeFlashCall:
        t := m.To_AuthCodeTypeFlashCall()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Auth_CodeType) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_auth_codeTypeSms:
        m2 := &TLAuthCodeTypeSms{&Auth_CodeType_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_auth_codeTypeCall:
        m2 := &TLAuthCodeTypeCall{&Auth_CodeType_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_auth_codeTypeFlashCall:
        m2 := &TLAuthCodeTypeFlashCall{&Auth_CodeType_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// auth.codeTypeSms#72a3158c = auth.CodeType;
func (m *Auth_CodeType) To_AuthCodeTypeSms() *TLAuthCodeTypeSms {
    return &TLAuthCodeTypeSms{
        Data2: m.Data2,
    }
}

// auth.codeTypeCall#741cd3e3 = auth.CodeType;
func (m *Auth_CodeType) To_AuthCodeTypeCall() *TLAuthCodeTypeCall {
    return &TLAuthCodeTypeCall{
        Data2: m.Data2,
    }
}

// auth.codeTypeFlashCall#226ccefb = auth.CodeType;
func (m *Auth_CodeType) To_AuthCodeTypeFlashCall() *TLAuthCodeTypeFlashCall {
    return &TLAuthCodeTypeFlashCall{
        Data2: m.Data2,
    }
}



// auth.codeTypeSms#72a3158c = auth.CodeType;
func (m *TLAuthCodeTypeSms) To_Auth_CodeType() *Auth_CodeType {
    return &Auth_CodeType{
        Constructor: TLConstructor_CRC32_auth_codeTypeSms,
        Data2: m.Data2,
    }
}



func NewTLAuthCodeTypeSms() * TLAuthCodeTypeSms {
    return &TLAuthCodeTypeSms{ Data2: &Auth_CodeType_Data{} }
}

func (m* TLAuthCodeTypeSms) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_auth_codeTypeSms))


    return x.buf
}

func (m* TLAuthCodeTypeSms) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// auth.codeTypeCall#741cd3e3 = auth.CodeType;
func (m *TLAuthCodeTypeCall) To_Auth_CodeType() *Auth_CodeType {
    return &Auth_CodeType{
        Constructor: TLConstructor_CRC32_auth_codeTypeCall,
        Data2: m.Data2,
    }
}



func NewTLAuthCodeTypeCall() * TLAuthCodeTypeCall {
    return &TLAuthCodeTypeCall{ Data2: &Auth_CodeType_Data{} }
}

func (m* TLAuthCodeTypeCall) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_auth_codeTypeCall))


    return x.buf
}

func (m* TLAuthCodeTypeCall) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// auth.codeTypeFlashCall#226ccefb = auth.CodeType;
func (m *TLAuthCodeTypeFlashCall) To_Auth_CodeType() *Auth_CodeType {
    return &Auth_CodeType{
        Constructor: TLConstructor_CRC32_auth_codeTypeFlashCall,
        Data2: m.Data2,
    }
}



func NewTLAuthCodeTypeFlashCall() * TLAuthCodeTypeFlashCall {
    return &TLAuthCodeTypeFlashCall{ Data2: &Auth_CodeType_Data{} }
}

func (m* TLAuthCodeTypeFlashCall) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_auth_codeTypeFlashCall))


    return x.buf
}

func (m* TLAuthCodeTypeFlashCall) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// ChannelLocation <--
//  + TL_ChannelLocationEmpty
//  + TL_ChannelLocation
//

func (m *ChannelLocation) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_channelLocationEmpty:
        t := m.To_ChannelLocationEmpty()
        return t.Encode()
    case TLConstructor_CRC32_channelLocation:
        t := m.To_ChannelLocation()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *ChannelLocation) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_channelLocationEmpty:
        m2 := &TLChannelLocationEmpty{&ChannelLocation_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelLocation:
        m2 := &TLChannelLocation{&ChannelLocation_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// channelLocationEmpty#bfb5ad8b = ChannelLocation;
func (m *ChannelLocation) To_ChannelLocationEmpty() *TLChannelLocationEmpty {
    return &TLChannelLocationEmpty{
        Data2: m.Data2,
    }
}

// channelLocation#209b82db geo_point:GeoPoint address:string = ChannelLocation;
func (m *ChannelLocation) To_ChannelLocation() *TLChannelLocation {
    return &TLChannelLocation{
        Data2: m.Data2,
    }
}



// channelLocationEmpty#bfb5ad8b = ChannelLocation;
func (m *TLChannelLocationEmpty) To_ChannelLocation() *ChannelLocation {
    return &ChannelLocation{
        Constructor: TLConstructor_CRC32_channelLocationEmpty,
        Data2: m.Data2,
    }
}



func NewTLChannelLocationEmpty() * TLChannelLocationEmpty {
    return &TLChannelLocationEmpty{ Data2: &ChannelLocation_Data{} }
}

func (m* TLChannelLocationEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelLocationEmpty))


    return x.buf
}

func (m* TLChannelLocationEmpty) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// channelLocation#209b82db geo_point:GeoPoint address:string = ChannelLocation;
func (m *TLChannelLocation) To_ChannelLocation() *ChannelLocation {
    return &ChannelLocation{
        Constructor: TLConstructor_CRC32_channelLocation,
        Data2: m.Data2,
    }
}


func (m *TLChannelLocation) SetGeoPoint(v *GeoPoint) { m.Data2.GeoPoint = v }
func (m *TLChannelLocation) GetGeoPoint() *GeoPoint { return m.Data2.GeoPoint }

func (m *TLChannelLocation) SetAddress(v string) { m.Data2.Address = v }
func (m *TLChannelLocation) GetAddress() string { return m.Data2.Address }


func NewTLChannelLocation() * TLChannelLocation {
    return &TLChannelLocation{ Data2: &ChannelLocation_Data{} }
}

func (m* TLChannelLocation) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelLocation))

    x.Bytes(m.GetGeoPoint().Encode())
    x.String(m.GetAddress())

    return x.buf
}

func (m* TLChannelLocation) Decode(dbuf *DecodeBuf) error {
    m1 := &GeoPoint{}
    m1.Decode(dbuf)
    m.SetGeoPoint(m1)
    m.SetAddress(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// ThemeSettings <--
//  + TL_ThemeSettings
//

func (m *ThemeSettings) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_themeSettings:
        t := m.To_ThemeSettings()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *ThemeSettings) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_themeSettings:
        m2 := &TLThemeSettings{&ThemeSettings_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// themeSettings#9c14984a flags:# base_theme:BaseTheme accent_color:int message_top_color:flags.0?int message_bottom_color:flags.0?int wallpaper:flags.1?WallPaper = ThemeSettings;
func (m *ThemeSettings) To_ThemeSettings() *TLThemeSettings {
    return &TLThemeSettings{
        Data2: m.Data2,
    }
}



// themeSettings#9c14984a flags:# base_theme:BaseTheme accent_color:int message_top_color:flags.0?int message_bottom_color:flags.0?int wallpaper:flags.1?WallPaper = ThemeSettings;
func (m *TLThemeSettings) To_ThemeSettings() *ThemeSettings {
    return &ThemeSettings{
        Constructor: TLConstructor_CRC32_themeSettings,
        Data2: m.Data2,
    }
}


func (m *TLThemeSettings) SetBaseTheme(v *BaseTheme) { m.Data2.BaseTheme = v }
func (m *TLThemeSettings) GetBaseTheme() *BaseTheme { return m.Data2.BaseTheme }

func (m *TLThemeSettings) SetAccentColor(v int32) { m.Data2.AccentColor = v }
func (m *TLThemeSettings) GetAccentColor() int32 { return m.Data2.AccentColor }

func (m *TLThemeSettings) SetMessageTopColor(v int32) { m.Data2.MessageTopColor = v }
func (m *TLThemeSettings) GetMessageTopColor() int32 { return m.Data2.MessageTopColor }

func (m *TLThemeSettings) SetMessageBottomColor(v int32) { m.Data2.MessageBottomColor = v }
func (m *TLThemeSettings) GetMessageBottomColor() int32 { return m.Data2.MessageBottomColor }

func (m *TLThemeSettings) SetWallpaper(v *WallPaper) { m.Data2.Wallpaper = v }
func (m *TLThemeSettings) GetWallpaper() *WallPaper { return m.Data2.Wallpaper }


func NewTLThemeSettings() * TLThemeSettings {
    return &TLThemeSettings{ Data2: &ThemeSettings_Data{} }
}

func (m* TLThemeSettings) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_themeSettings))

    // flags
    var flags uint32 = 0
    if m.GetMessageTopColor() != 0 { flags |= 1 << 0 }
    if m.GetMessageBottomColor() != 0 { flags |= 1 << 0 }
    if m.GetWallpaper() != nil { flags |= 1 << 1 }
	x.UInt(flags)

    x.Bytes(m.GetBaseTheme().Encode())
    x.Int(m.GetAccentColor())
    if (flags & (1 << 0)) != 0 { x.Int(m.GetMessageTopColor()) }
    if (flags & (1 << 0)) != 0 { x.Int(m.GetMessageBottomColor()) }
    if (flags & (1 << 1)) != 0 { x.Bytes(m.GetWallpaper().Encode()) }

    return x.buf
}

func (m* TLThemeSettings) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m2 := &BaseTheme{}
    m2.Decode(dbuf)
    m.SetBaseTheme(m2)
    m.SetAccentColor(dbuf.Int())
    if (flags & (1 << 0)) != 0 { m.SetMessageTopColor(dbuf.Int()) }
    if (flags & (1 << 0)) != 0 { m.SetMessageBottomColor(dbuf.Int()) }
    if (flags & (1 << 1)) != 0 {
 m6 := &WallPaper{}
    m6.Decode(dbuf)
    m.SetWallpaper(m6) 
}

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// StatsAbsValueAndPrev <--
//  + TL_StatsAbsValueAndPrev
//

func (m *StatsAbsValueAndPrev) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_statsAbsValueAndPrev:
        t := m.To_StatsAbsValueAndPrev()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *StatsAbsValueAndPrev) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_statsAbsValueAndPrev:
        m2 := &TLStatsAbsValueAndPrev{&StatsAbsValueAndPrev_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// statsAbsValueAndPrev#cb43acde current:double previous:double = StatsAbsValueAndPrev;
func (m *StatsAbsValueAndPrev) To_StatsAbsValueAndPrev() *TLStatsAbsValueAndPrev {
    return &TLStatsAbsValueAndPrev{
        Data2: m.Data2,
    }
}



// statsAbsValueAndPrev#cb43acde current:double previous:double = StatsAbsValueAndPrev;
func (m *TLStatsAbsValueAndPrev) To_StatsAbsValueAndPrev() *StatsAbsValueAndPrev {
    return &StatsAbsValueAndPrev{
        Constructor: TLConstructor_CRC32_statsAbsValueAndPrev,
        Data2: m.Data2,
    }
}


func (m *TLStatsAbsValueAndPrev) SetCurrent(v float64) { m.Data2.Current = v }
func (m *TLStatsAbsValueAndPrev) GetCurrent() float64 { return m.Data2.Current }

func (m *TLStatsAbsValueAndPrev) SetPrevious(v float64) { m.Data2.Previous = v }
func (m *TLStatsAbsValueAndPrev) GetPrevious() float64 { return m.Data2.Previous }


func NewTLStatsAbsValueAndPrev() * TLStatsAbsValueAndPrev {
    return &TLStatsAbsValueAndPrev{ Data2: &StatsAbsValueAndPrev_Data{} }
}

func (m* TLStatsAbsValueAndPrev) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_statsAbsValueAndPrev))

    x.Double(m.GetCurrent())
    x.Double(m.GetPrevious())

    return x.buf
}

func (m* TLStatsAbsValueAndPrev) Decode(dbuf *DecodeBuf) error {
    m.SetCurrent(dbuf.Double())
    m.SetPrevious(dbuf.Double())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// UserStatus <--
//  + TL_UserStatusEmpty
//  + TL_UserStatusOnline
//  + TL_UserStatusOffline
//  + TL_UserStatusRecently
//  + TL_UserStatusLastWeek
//  + TL_UserStatusLastMonth
//

func (m *UserStatus) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_userStatusEmpty:
        t := m.To_UserStatusEmpty()
        return t.Encode()
    case TLConstructor_CRC32_userStatusOnline:
        t := m.To_UserStatusOnline()
        return t.Encode()
    case TLConstructor_CRC32_userStatusOffline:
        t := m.To_UserStatusOffline()
        return t.Encode()
    case TLConstructor_CRC32_userStatusRecently:
        t := m.To_UserStatusRecently()
        return t.Encode()
    case TLConstructor_CRC32_userStatusLastWeek:
        t := m.To_UserStatusLastWeek()
        return t.Encode()
    case TLConstructor_CRC32_userStatusLastMonth:
        t := m.To_UserStatusLastMonth()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *UserStatus) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_userStatusEmpty:
        m2 := &TLUserStatusEmpty{&UserStatus_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_userStatusOnline:
        m2 := &TLUserStatusOnline{&UserStatus_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_userStatusOffline:
        m2 := &TLUserStatusOffline{&UserStatus_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_userStatusRecently:
        m2 := &TLUserStatusRecently{&UserStatus_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_userStatusLastWeek:
        m2 := &TLUserStatusLastWeek{&UserStatus_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_userStatusLastMonth:
        m2 := &TLUserStatusLastMonth{&UserStatus_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// userStatusEmpty#9d05049 = UserStatus;
func (m *UserStatus) To_UserStatusEmpty() *TLUserStatusEmpty {
    return &TLUserStatusEmpty{
        Data2: m.Data2,
    }
}

// userStatusOnline#edb93949 expires:int = UserStatus;
func (m *UserStatus) To_UserStatusOnline() *TLUserStatusOnline {
    return &TLUserStatusOnline{
        Data2: m.Data2,
    }
}

// userStatusOffline#8c703f was_online:int = UserStatus;
func (m *UserStatus) To_UserStatusOffline() *TLUserStatusOffline {
    return &TLUserStatusOffline{
        Data2: m.Data2,
    }
}

// userStatusRecently#e26f42f1 = UserStatus;
func (m *UserStatus) To_UserStatusRecently() *TLUserStatusRecently {
    return &TLUserStatusRecently{
        Data2: m.Data2,
    }
}

// userStatusLastWeek#7bf09fc = UserStatus;
func (m *UserStatus) To_UserStatusLastWeek() *TLUserStatusLastWeek {
    return &TLUserStatusLastWeek{
        Data2: m.Data2,
    }
}

// userStatusLastMonth#77ebc742 = UserStatus;
func (m *UserStatus) To_UserStatusLastMonth() *TLUserStatusLastMonth {
    return &TLUserStatusLastMonth{
        Data2: m.Data2,
    }
}



// userStatusEmpty#9d05049 = UserStatus;
func (m *TLUserStatusEmpty) To_UserStatus() *UserStatus {
    return &UserStatus{
        Constructor: TLConstructor_CRC32_userStatusEmpty,
        Data2: m.Data2,
    }
}



func NewTLUserStatusEmpty() * TLUserStatusEmpty {
    return &TLUserStatusEmpty{ Data2: &UserStatus_Data{} }
}

func (m* TLUserStatusEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_userStatusEmpty))


    return x.buf
}

func (m* TLUserStatusEmpty) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// userStatusOnline#edb93949 expires:int = UserStatus;
func (m *TLUserStatusOnline) To_UserStatus() *UserStatus {
    return &UserStatus{
        Constructor: TLConstructor_CRC32_userStatusOnline,
        Data2: m.Data2,
    }
}


func (m *TLUserStatusOnline) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLUserStatusOnline) GetExpires() int32 { return m.Data2.Expires }


func NewTLUserStatusOnline() * TLUserStatusOnline {
    return &TLUserStatusOnline{ Data2: &UserStatus_Data{} }
}

func (m* TLUserStatusOnline) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_userStatusOnline))

    x.Int(m.GetExpires())

    return x.buf
}

func (m* TLUserStatusOnline) Decode(dbuf *DecodeBuf) error {
    m.SetExpires(dbuf.Int())

    return dbuf.err
}
// userStatusOffline#8c703f was_online:int = UserStatus;
func (m *TLUserStatusOffline) To_UserStatus() *UserStatus {
    return &UserStatus{
        Constructor: TLConstructor_CRC32_userStatusOffline,
        Data2: m.Data2,
    }
}


func (m *TLUserStatusOffline) SetWasOnline(v int32) { m.Data2.WasOnline = v }
func (m *TLUserStatusOffline) GetWasOnline() int32 { return m.Data2.WasOnline }


func NewTLUserStatusOffline() * TLUserStatusOffline {
    return &TLUserStatusOffline{ Data2: &UserStatus_Data{} }
}

func (m* TLUserStatusOffline) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_userStatusOffline))

    x.Int(m.GetWasOnline())

    return x.buf
}

func (m* TLUserStatusOffline) Decode(dbuf *DecodeBuf) error {
    m.SetWasOnline(dbuf.Int())

    return dbuf.err
}
// userStatusRecently#e26f42f1 = UserStatus;
func (m *TLUserStatusRecently) To_UserStatus() *UserStatus {
    return &UserStatus{
        Constructor: TLConstructor_CRC32_userStatusRecently,
        Data2: m.Data2,
    }
}



func NewTLUserStatusRecently() * TLUserStatusRecently {
    return &TLUserStatusRecently{ Data2: &UserStatus_Data{} }
}

func (m* TLUserStatusRecently) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_userStatusRecently))


    return x.buf
}

func (m* TLUserStatusRecently) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// userStatusLastWeek#7bf09fc = UserStatus;
func (m *TLUserStatusLastWeek) To_UserStatus() *UserStatus {
    return &UserStatus{
        Constructor: TLConstructor_CRC32_userStatusLastWeek,
        Data2: m.Data2,
    }
}



func NewTLUserStatusLastWeek() * TLUserStatusLastWeek {
    return &TLUserStatusLastWeek{ Data2: &UserStatus_Data{} }
}

func (m* TLUserStatusLastWeek) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_userStatusLastWeek))


    return x.buf
}

func (m* TLUserStatusLastWeek) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// userStatusLastMonth#77ebc742 = UserStatus;
func (m *TLUserStatusLastMonth) To_UserStatus() *UserStatus {
    return &UserStatus{
        Constructor: TLConstructor_CRC32_userStatusLastMonth,
        Data2: m.Data2,
    }
}



func NewTLUserStatusLastMonth() * TLUserStatusLastMonth {
    return &TLUserStatusLastMonth{ Data2: &UserStatus_Data{} }
}

func (m* TLUserStatusLastMonth) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_userStatusLastMonth))


    return x.buf
}

func (m* TLUserStatusLastMonth) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Messages_FeaturedStickers <--
//  + TL_MessagesFeaturedStickersNotModified
//  + TL_MessagesFeaturedStickers
//  + TL_MessagesFeaturedStickersNotModified114
//  + TL_MessagesFeaturedStickers114
//

func (m *Messages_FeaturedStickers) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messages_featuredStickersNotModified:
        t := m.To_MessagesFeaturedStickersNotModified()
        return t.Encode()
    case TLConstructor_CRC32_messages_featuredStickers:
        t := m.To_MessagesFeaturedStickers()
        return t.Encode()
    case TLConstructor_CRC32_messages_featuredStickersNotModified114:
        t := m.To_MessagesFeaturedStickersNotModified114()
        return t.Encode()
    case TLConstructor_CRC32_messages_featuredStickers114:
        t := m.To_MessagesFeaturedStickers114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Messages_FeaturedStickers) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messages_featuredStickersNotModified:
        m2 := &TLMessagesFeaturedStickersNotModified{&Messages_FeaturedStickers_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messages_featuredStickers:
        m2 := &TLMessagesFeaturedStickers{&Messages_FeaturedStickers_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messages_featuredStickersNotModified114:
        m2 := &TLMessagesFeaturedStickersNotModified114{&Messages_FeaturedStickers_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messages_featuredStickers114:
        m2 := &TLMessagesFeaturedStickers114{&Messages_FeaturedStickers_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messages.featuredStickersNotModified#4ede3cf = messages.FeaturedStickers;
func (m *Messages_FeaturedStickers) To_MessagesFeaturedStickersNotModified() *TLMessagesFeaturedStickersNotModified {
    return &TLMessagesFeaturedStickersNotModified{
        Data2: m.Data2,
    }
}

// messages.featuredStickers#f89d88e5 hash:int sets:Vector<StickerSetCovered> unread:Vector<long> = messages.FeaturedStickers;
func (m *Messages_FeaturedStickers) To_MessagesFeaturedStickers() *TLMessagesFeaturedStickers {
    return &TLMessagesFeaturedStickers{
        Data2: m.Data2,
    }
}

// messages.featuredStickersNotModified#c6dc0c66 count:int = messages.FeaturedStickers;
func (m *Messages_FeaturedStickers) To_MessagesFeaturedStickersNotModified114() *TLMessagesFeaturedStickersNotModified114 {
    return &TLMessagesFeaturedStickersNotModified114{
        Data2: m.Data2,
    }
}

// messages.featuredStickers#b6abc341 hash:int count:int sets:Vector<StickerSetCovered> unread:Vector<long> = messages.FeaturedStickers;
func (m *Messages_FeaturedStickers) To_MessagesFeaturedStickers114() *TLMessagesFeaturedStickers114 {
    return &TLMessagesFeaturedStickers114{
        Data2: m.Data2,
    }
}



// messages.featuredStickersNotModified#4ede3cf = messages.FeaturedStickers;
func (m *TLMessagesFeaturedStickersNotModified) To_Messages_FeaturedStickers() *Messages_FeaturedStickers {
    return &Messages_FeaturedStickers{
        Constructor: TLConstructor_CRC32_messages_featuredStickersNotModified,
        Data2: m.Data2,
    }
}



func NewTLMessagesFeaturedStickersNotModified() * TLMessagesFeaturedStickersNotModified {
    return &TLMessagesFeaturedStickersNotModified{ Data2: &Messages_FeaturedStickers_Data{} }
}

func (m* TLMessagesFeaturedStickersNotModified) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_featuredStickersNotModified))


    return x.buf
}

func (m* TLMessagesFeaturedStickersNotModified) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// messages.featuredStickers#f89d88e5 hash:int sets:Vector<StickerSetCovered> unread:Vector<long> = messages.FeaturedStickers;
func (m *TLMessagesFeaturedStickers) To_Messages_FeaturedStickers() *Messages_FeaturedStickers {
    return &Messages_FeaturedStickers{
        Constructor: TLConstructor_CRC32_messages_featuredStickers,
        Data2: m.Data2,
    }
}


func (m *TLMessagesFeaturedStickers) SetHash(v int32) { m.Data2.Hash = v }
func (m *TLMessagesFeaturedStickers) GetHash() int32 { return m.Data2.Hash }

func (m *TLMessagesFeaturedStickers) SetSets(v []*StickerSetCovered) { m.Data2.Sets = v }
func (m *TLMessagesFeaturedStickers) GetSets() []*StickerSetCovered { return m.Data2.Sets }

func (m *TLMessagesFeaturedStickers) SetUnread(v []int64) { m.Data2.Unread = v }
func (m *TLMessagesFeaturedStickers) GetUnread() []int64 { return m.Data2.Unread }


func NewTLMessagesFeaturedStickers() * TLMessagesFeaturedStickers {
    return &TLMessagesFeaturedStickers{ Data2: &Messages_FeaturedStickers_Data{} }
}

func (m* TLMessagesFeaturedStickers) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_featuredStickers))

    x.Int(m.GetHash())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetSets())))
for _, v := range m.GetSets() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.VectorLong(m.GetUnread())


    return x.buf
}

func (m* TLMessagesFeaturedStickers) Decode(dbuf *DecodeBuf) error {
    m.SetHash(dbuf.Int())
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*StickerSetCovered, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &StickerSetCovered{}
	v2[i].Decode(dbuf)
}
m.SetSets(v2)

    m.SetUnread(dbuf.VectorLong())

    return dbuf.err
}
// messages.featuredStickersNotModified#c6dc0c66 count:int = messages.FeaturedStickers;
func (m *TLMessagesFeaturedStickersNotModified114) To_Messages_FeaturedStickers() *Messages_FeaturedStickers {
    return &Messages_FeaturedStickers{
        Constructor: TLConstructor_CRC32_messages_featuredStickersNotModified114,
        Data2: m.Data2,
    }
}


func (m *TLMessagesFeaturedStickersNotModified114) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesFeaturedStickersNotModified114) GetCount() int32 { return m.Data2.Count }


func NewTLMessagesFeaturedStickersNotModified114() * TLMessagesFeaturedStickersNotModified114 {
    return &TLMessagesFeaturedStickersNotModified114{ Data2: &Messages_FeaturedStickers_Data{} }
}

func (m* TLMessagesFeaturedStickersNotModified114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_featuredStickersNotModified114))

    x.Int(m.GetCount())

    return x.buf
}

func (m* TLMessagesFeaturedStickersNotModified114) Decode(dbuf *DecodeBuf) error {
    m.SetCount(dbuf.Int())

    return dbuf.err
}
// messages.featuredStickers#b6abc341 hash:int count:int sets:Vector<StickerSetCovered> unread:Vector<long> = messages.FeaturedStickers;
func (m *TLMessagesFeaturedStickers114) To_Messages_FeaturedStickers() *Messages_FeaturedStickers {
    return &Messages_FeaturedStickers{
        Constructor: TLConstructor_CRC32_messages_featuredStickers114,
        Data2: m.Data2,
    }
}


func (m *TLMessagesFeaturedStickers114) SetHash(v int32) { m.Data2.Hash = v }
func (m *TLMessagesFeaturedStickers114) GetHash() int32 { return m.Data2.Hash }

func (m *TLMessagesFeaturedStickers114) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesFeaturedStickers114) GetCount() int32 { return m.Data2.Count }

func (m *TLMessagesFeaturedStickers114) SetSets(v []*StickerSetCovered) { m.Data2.Sets = v }
func (m *TLMessagesFeaturedStickers114) GetSets() []*StickerSetCovered { return m.Data2.Sets }

func (m *TLMessagesFeaturedStickers114) SetUnread(v []int64) { m.Data2.Unread = v }
func (m *TLMessagesFeaturedStickers114) GetUnread() []int64 { return m.Data2.Unread }


func NewTLMessagesFeaturedStickers114() * TLMessagesFeaturedStickers114 {
    return &TLMessagesFeaturedStickers114{ Data2: &Messages_FeaturedStickers_Data{} }
}

func (m* TLMessagesFeaturedStickers114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_featuredStickers114))

    x.Int(m.GetHash())
    x.Int(m.GetCount())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetSets())))
for _, v := range m.GetSets() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.VectorLong(m.GetUnread())


    return x.buf
}

func (m* TLMessagesFeaturedStickers114) Decode(dbuf *DecodeBuf) error {
    m.SetHash(dbuf.Int())
    m.SetCount(dbuf.Int())
    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*StickerSetCovered, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &StickerSetCovered{}
	v3[i].Decode(dbuf)
}
m.SetSets(v3)

    m.SetUnread(dbuf.VectorLong())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Config73 <--
//  + TL_Config73
//

func (m *Config73) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_config73:
        t := m.To_Config73()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Config73) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_config73:
        m2 := &TLConfig73{&Config73_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// config#9c840964 flags:# phonecalls_enabled:flags.1?true date:int expires:int test_mode:Bool this_dc:int dc_options:Vector<DcOption> chat_size_max:int megagroup_size_max:int forwarded_count_max:int online_update_period_ms:int offline_blur_timeout_ms:int offline_idle_timeout_ms:int online_cloud_timeout_ms:int notify_cloud_delay_ms:int notify_default_delay_ms:int chat_big_size:int push_chat_period_ms:int push_chat_limit:int saved_gifs_limit:int edit_time_limit:int rating_e_decay:int stickers_recent_limit:int stickers_faved_limit:int channels_read_media_period:int tmp_sessions:flags.0?int pinned_dialogs_count_max:int call_receive_timeout_ms:int call_ring_timeout_ms:int call_connect_timeout_ms:int call_packet_timeout_ms:int me_url_prefix:string suggested_lang_code:flags.2?string lang_pack_version:flags.2?int disabled_features:Vector<DisabledFeature> = Config;
func (m *Config73) To_Config73() *TLConfig73 {
    return &TLConfig73{
        Data2: m.Data2,
    }
}



// config#9c840964 flags:# phonecalls_enabled:flags.1?true date:int expires:int test_mode:Bool this_dc:int dc_options:Vector<DcOption> chat_size_max:int megagroup_size_max:int forwarded_count_max:int online_update_period_ms:int offline_blur_timeout_ms:int offline_idle_timeout_ms:int online_cloud_timeout_ms:int notify_cloud_delay_ms:int notify_default_delay_ms:int chat_big_size:int push_chat_period_ms:int push_chat_limit:int saved_gifs_limit:int edit_time_limit:int rating_e_decay:int stickers_recent_limit:int stickers_faved_limit:int channels_read_media_period:int tmp_sessions:flags.0?int pinned_dialogs_count_max:int call_receive_timeout_ms:int call_ring_timeout_ms:int call_connect_timeout_ms:int call_packet_timeout_ms:int me_url_prefix:string suggested_lang_code:flags.2?string lang_pack_version:flags.2?int disabled_features:Vector<DisabledFeature> = Config;
func (m *TLConfig73) To_Config73() *Config73 {
    return &Config73{
        Constructor: TLConstructor_CRC32_config73,
        Data2: m.Data2,
    }
}


func (m *TLConfig73) SetPhonecallsEnabled(v bool) { m.Data2.PhonecallsEnabled = v }
func (m *TLConfig73) GetPhonecallsEnabled() bool { return m.Data2.PhonecallsEnabled }

func (m *TLConfig73) SetDate(v int32) { m.Data2.Date = v }
func (m *TLConfig73) GetDate() int32 { return m.Data2.Date }

func (m *TLConfig73) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLConfig73) GetExpires() int32 { return m.Data2.Expires }

func (m *TLConfig73) SetTestMode(v *Bool) { m.Data2.TestMode = v }
func (m *TLConfig73) GetTestMode() *Bool { return m.Data2.TestMode }

func (m *TLConfig73) SetThisDc(v int32) { m.Data2.ThisDc = v }
func (m *TLConfig73) GetThisDc() int32 { return m.Data2.ThisDc }

func (m *TLConfig73) SetDcOptions(v []*DcOption) { m.Data2.DcOptions = v }
func (m *TLConfig73) GetDcOptions() []*DcOption { return m.Data2.DcOptions }

func (m *TLConfig73) SetChatSizeMax(v int32) { m.Data2.ChatSizeMax = v }
func (m *TLConfig73) GetChatSizeMax() int32 { return m.Data2.ChatSizeMax }

func (m *TLConfig73) SetMegagroupSizeMax(v int32) { m.Data2.MegagroupSizeMax = v }
func (m *TLConfig73) GetMegagroupSizeMax() int32 { return m.Data2.MegagroupSizeMax }

func (m *TLConfig73) SetForwardedCountMax(v int32) { m.Data2.ForwardedCountMax = v }
func (m *TLConfig73) GetForwardedCountMax() int32 { return m.Data2.ForwardedCountMax }

func (m *TLConfig73) SetOnlineUpdatePeriodMs(v int32) { m.Data2.OnlineUpdatePeriodMs = v }
func (m *TLConfig73) GetOnlineUpdatePeriodMs() int32 { return m.Data2.OnlineUpdatePeriodMs }

func (m *TLConfig73) SetOfflineBlurTimeoutMs(v int32) { m.Data2.OfflineBlurTimeoutMs = v }
func (m *TLConfig73) GetOfflineBlurTimeoutMs() int32 { return m.Data2.OfflineBlurTimeoutMs }

func (m *TLConfig73) SetOfflineIdleTimeoutMs(v int32) { m.Data2.OfflineIdleTimeoutMs = v }
func (m *TLConfig73) GetOfflineIdleTimeoutMs() int32 { return m.Data2.OfflineIdleTimeoutMs }

func (m *TLConfig73) SetOnlineCloudTimeoutMs(v int32) { m.Data2.OnlineCloudTimeoutMs = v }
func (m *TLConfig73) GetOnlineCloudTimeoutMs() int32 { return m.Data2.OnlineCloudTimeoutMs }

func (m *TLConfig73) SetNotifyCloudDelayMs(v int32) { m.Data2.NotifyCloudDelayMs = v }
func (m *TLConfig73) GetNotifyCloudDelayMs() int32 { return m.Data2.NotifyCloudDelayMs }

func (m *TLConfig73) SetNotifyDefaultDelayMs(v int32) { m.Data2.NotifyDefaultDelayMs = v }
func (m *TLConfig73) GetNotifyDefaultDelayMs() int32 { return m.Data2.NotifyDefaultDelayMs }

func (m *TLConfig73) SetChatBigSize(v int32) { m.Data2.ChatBigSize = v }
func (m *TLConfig73) GetChatBigSize() int32 { return m.Data2.ChatBigSize }

func (m *TLConfig73) SetPushChatPeriodMs(v int32) { m.Data2.PushChatPeriodMs = v }
func (m *TLConfig73) GetPushChatPeriodMs() int32 { return m.Data2.PushChatPeriodMs }

func (m *TLConfig73) SetPushChatLimit(v int32) { m.Data2.PushChatLimit = v }
func (m *TLConfig73) GetPushChatLimit() int32 { return m.Data2.PushChatLimit }

func (m *TLConfig73) SetSavedGifsLimit(v int32) { m.Data2.SavedGifsLimit = v }
func (m *TLConfig73) GetSavedGifsLimit() int32 { return m.Data2.SavedGifsLimit }

func (m *TLConfig73) SetEditTimeLimit(v int32) { m.Data2.EditTimeLimit = v }
func (m *TLConfig73) GetEditTimeLimit() int32 { return m.Data2.EditTimeLimit }

func (m *TLConfig73) SetRatingEDecay(v int32) { m.Data2.RatingEDecay = v }
func (m *TLConfig73) GetRatingEDecay() int32 { return m.Data2.RatingEDecay }

func (m *TLConfig73) SetStickersRecentLimit(v int32) { m.Data2.StickersRecentLimit = v }
func (m *TLConfig73) GetStickersRecentLimit() int32 { return m.Data2.StickersRecentLimit }

func (m *TLConfig73) SetStickersFavedLimit(v int32) { m.Data2.StickersFavedLimit = v }
func (m *TLConfig73) GetStickersFavedLimit() int32 { return m.Data2.StickersFavedLimit }

func (m *TLConfig73) SetChannelsReadMediaPeriod(v int32) { m.Data2.ChannelsReadMediaPeriod = v }
func (m *TLConfig73) GetChannelsReadMediaPeriod() int32 { return m.Data2.ChannelsReadMediaPeriod }

func (m *TLConfig73) SetTmpSessions(v int32) { m.Data2.TmpSessions = v }
func (m *TLConfig73) GetTmpSessions() int32 { return m.Data2.TmpSessions }

func (m *TLConfig73) SetPinnedDialogsCountMax(v int32) { m.Data2.PinnedDialogsCountMax = v }
func (m *TLConfig73) GetPinnedDialogsCountMax() int32 { return m.Data2.PinnedDialogsCountMax }

func (m *TLConfig73) SetCallReceiveTimeoutMs(v int32) { m.Data2.CallReceiveTimeoutMs = v }
func (m *TLConfig73) GetCallReceiveTimeoutMs() int32 { return m.Data2.CallReceiveTimeoutMs }

func (m *TLConfig73) SetCallRingTimeoutMs(v int32) { m.Data2.CallRingTimeoutMs = v }
func (m *TLConfig73) GetCallRingTimeoutMs() int32 { return m.Data2.CallRingTimeoutMs }

func (m *TLConfig73) SetCallConnectTimeoutMs(v int32) { m.Data2.CallConnectTimeoutMs = v }
func (m *TLConfig73) GetCallConnectTimeoutMs() int32 { return m.Data2.CallConnectTimeoutMs }

func (m *TLConfig73) SetCallPacketTimeoutMs(v int32) { m.Data2.CallPacketTimeoutMs = v }
func (m *TLConfig73) GetCallPacketTimeoutMs() int32 { return m.Data2.CallPacketTimeoutMs }

func (m *TLConfig73) SetMeUrlPrefix(v string) { m.Data2.MeUrlPrefix = v }
func (m *TLConfig73) GetMeUrlPrefix() string { return m.Data2.MeUrlPrefix }

func (m *TLConfig73) SetSuggestedLangCode(v string) { m.Data2.SuggestedLangCode = v }
func (m *TLConfig73) GetSuggestedLangCode() string { return m.Data2.SuggestedLangCode }

func (m *TLConfig73) SetLangPackVersion(v int32) { m.Data2.LangPackVersion = v }
func (m *TLConfig73) GetLangPackVersion() int32 { return m.Data2.LangPackVersion }

func (m *TLConfig73) SetDisabledFeatures(v []*DisabledFeature) { m.Data2.DisabledFeatures = v }
func (m *TLConfig73) GetDisabledFeatures() []*DisabledFeature { return m.Data2.DisabledFeatures }


func NewTLConfig73() * TLConfig73 {
    return &TLConfig73{ Data2: &Config73_Data{} }
}

func (m* TLConfig73) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_config73))

    // flags
    var flags uint32 = 0
    if m.GetPhonecallsEnabled() == true { flags |= 1 << 1 }
    if m.GetTmpSessions() != 0 { flags |= 1 << 0 }
    if m.GetSuggestedLangCode() != "" { flags |= 1 << 2 }
    if m.GetLangPackVersion() != 0 { flags |= 1 << 2 }
	x.UInt(flags)

    
    x.Int(m.GetDate())
    x.Int(m.GetExpires())
    x.Bytes(m.GetTestMode().Encode())
    x.Int(m.GetThisDc())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetDcOptions())))
for _, v := range m.GetDcOptions() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(m.GetChatSizeMax())
    x.Int(m.GetMegagroupSizeMax())
    x.Int(m.GetForwardedCountMax())
    x.Int(m.GetOnlineUpdatePeriodMs())
    x.Int(m.GetOfflineBlurTimeoutMs())
    x.Int(m.GetOfflineIdleTimeoutMs())
    x.Int(m.GetOnlineCloudTimeoutMs())
    x.Int(m.GetNotifyCloudDelayMs())
    x.Int(m.GetNotifyDefaultDelayMs())
    x.Int(m.GetChatBigSize())
    x.Int(m.GetPushChatPeriodMs())
    x.Int(m.GetPushChatLimit())
    x.Int(m.GetSavedGifsLimit())
    x.Int(m.GetEditTimeLimit())
    x.Int(m.GetRatingEDecay())
    x.Int(m.GetStickersRecentLimit())
    x.Int(m.GetStickersFavedLimit())
    x.Int(m.GetChannelsReadMediaPeriod())
    if (flags & (1 << 0)) != 0 { x.Int(m.GetTmpSessions()) }
    x.Int(m.GetPinnedDialogsCountMax())
    x.Int(m.GetCallReceiveTimeoutMs())
    x.Int(m.GetCallRingTimeoutMs())
    x.Int(m.GetCallConnectTimeoutMs())
    x.Int(m.GetCallPacketTimeoutMs())
    x.String(m.GetMeUrlPrefix())
    if (flags & (1 << 2)) != 0 { x.String(m.GetSuggestedLangCode()) }
    if (flags & (1 << 2)) != 0 { x.Int(m.GetLangPackVersion()) }
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetDisabledFeatures())))
for _, v := range m.GetDisabledFeatures() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLConfig73) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 1)) != 0 { m.SetPhonecallsEnabled(true) }
    m.SetDate(dbuf.Int())
    m.SetExpires(dbuf.Int())
    m5 := &Bool{}
    m5.Decode(dbuf)
    m.SetTestMode(m5)
    m.SetThisDc(dbuf.Int())
    c7 := dbuf.Int()
if c7 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 7, c7)
	return dbuf.err
}
l7 := dbuf.Int()
v7 := make([]*DcOption, l7)
for i := int32(0); i < l7; i++ {
	v7[i] = &DcOption{}
	v7[i].Decode(dbuf)
}
m.SetDcOptions(v7)

    m.SetChatSizeMax(dbuf.Int())
    m.SetMegagroupSizeMax(dbuf.Int())
    m.SetForwardedCountMax(dbuf.Int())
    m.SetOnlineUpdatePeriodMs(dbuf.Int())
    m.SetOfflineBlurTimeoutMs(dbuf.Int())
    m.SetOfflineIdleTimeoutMs(dbuf.Int())
    m.SetOnlineCloudTimeoutMs(dbuf.Int())
    m.SetNotifyCloudDelayMs(dbuf.Int())
    m.SetNotifyDefaultDelayMs(dbuf.Int())
    m.SetChatBigSize(dbuf.Int())
    m.SetPushChatPeriodMs(dbuf.Int())
    m.SetPushChatLimit(dbuf.Int())
    m.SetSavedGifsLimit(dbuf.Int())
    m.SetEditTimeLimit(dbuf.Int())
    m.SetRatingEDecay(dbuf.Int())
    m.SetStickersRecentLimit(dbuf.Int())
    m.SetStickersFavedLimit(dbuf.Int())
    m.SetChannelsReadMediaPeriod(dbuf.Int())
    if (flags & (1 << 0)) != 0 { m.SetTmpSessions(dbuf.Int()) }
    m.SetPinnedDialogsCountMax(dbuf.Int())
    m.SetCallReceiveTimeoutMs(dbuf.Int())
    m.SetCallRingTimeoutMs(dbuf.Int())
    m.SetCallConnectTimeoutMs(dbuf.Int())
    m.SetCallPacketTimeoutMs(dbuf.Int())
    m.SetMeUrlPrefix(dbuf.String())
    if (flags & (1 << 2)) != 0 { m.SetSuggestedLangCode(dbuf.String()) }
    if (flags & (1 << 2)) != 0 { m.SetLangPackVersion(dbuf.Int()) }
    c35 := dbuf.Int()
if c35 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 35, c35)
	return dbuf.err
}
l35 := dbuf.Int()
v35 := make([]*DisabledFeature, l35)
for i := int32(0); i < l35; i++ {
	v35[i] = &DisabledFeature{}
	v35[i].Decode(dbuf)
}
m.SetDisabledFeatures(v35)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Help_PromoData <--
//  + TL_HelpPromoDataEmpty
//  + TL_HelpPromoData
//

func (m *Help_PromoData) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_help_promoDataEmpty:
        t := m.To_HelpPromoDataEmpty()
        return t.Encode()
    case TLConstructor_CRC32_help_promoData:
        t := m.To_HelpPromoData()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Help_PromoData) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_help_promoDataEmpty:
        m2 := &TLHelpPromoDataEmpty{&Help_PromoData_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_help_promoData:
        m2 := &TLHelpPromoData{&Help_PromoData_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// help.promoDataEmpty#98f6ac75 expires:int = help.PromoData;
func (m *Help_PromoData) To_HelpPromoDataEmpty() *TLHelpPromoDataEmpty {
    return &TLHelpPromoDataEmpty{
        Data2: m.Data2,
    }
}

// help.promoData#8c39793f flags:# proxy:flags.0?true expires:int peer:Peer chats:Vector<Chat> users:Vector<User> psa_type:flags.1?string psa_message:flags.2?string = help.PromoData;
func (m *Help_PromoData) To_HelpPromoData() *TLHelpPromoData {
    return &TLHelpPromoData{
        Data2: m.Data2,
    }
}



// help.promoDataEmpty#98f6ac75 expires:int = help.PromoData;
func (m *TLHelpPromoDataEmpty) To_Help_PromoData() *Help_PromoData {
    return &Help_PromoData{
        Constructor: TLConstructor_CRC32_help_promoDataEmpty,
        Data2: m.Data2,
    }
}


func (m *TLHelpPromoDataEmpty) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLHelpPromoDataEmpty) GetExpires() int32 { return m.Data2.Expires }


func NewTLHelpPromoDataEmpty() * TLHelpPromoDataEmpty {
    return &TLHelpPromoDataEmpty{ Data2: &Help_PromoData_Data{} }
}

func (m* TLHelpPromoDataEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_help_promoDataEmpty))

    x.Int(m.GetExpires())

    return x.buf
}

func (m* TLHelpPromoDataEmpty) Decode(dbuf *DecodeBuf) error {
    m.SetExpires(dbuf.Int())

    return dbuf.err
}
// help.promoData#8c39793f flags:# proxy:flags.0?true expires:int peer:Peer chats:Vector<Chat> users:Vector<User> psa_type:flags.1?string psa_message:flags.2?string = help.PromoData;
func (m *TLHelpPromoData) To_Help_PromoData() *Help_PromoData {
    return &Help_PromoData{
        Constructor: TLConstructor_CRC32_help_promoData,
        Data2: m.Data2,
    }
}


func (m *TLHelpPromoData) SetProxy(v bool) { m.Data2.Proxy = v }
func (m *TLHelpPromoData) GetProxy() bool { return m.Data2.Proxy }

func (m *TLHelpPromoData) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLHelpPromoData) GetExpires() int32 { return m.Data2.Expires }

func (m *TLHelpPromoData) SetPeer(v *Peer) { m.Data2.Peer = v }
func (m *TLHelpPromoData) GetPeer() *Peer { return m.Data2.Peer }

func (m *TLHelpPromoData) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLHelpPromoData) GetChats() []*Chat { return m.Data2.Chats }

func (m *TLHelpPromoData) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLHelpPromoData) GetUsers() []*User { return m.Data2.Users }

func (m *TLHelpPromoData) SetPsaType(v string) { m.Data2.PsaType = v }
func (m *TLHelpPromoData) GetPsaType() string { return m.Data2.PsaType }

func (m *TLHelpPromoData) SetPsaMessage(v string) { m.Data2.PsaMessage = v }
func (m *TLHelpPromoData) GetPsaMessage() string { return m.Data2.PsaMessage }


func NewTLHelpPromoData() * TLHelpPromoData {
    return &TLHelpPromoData{ Data2: &Help_PromoData_Data{} }
}

func (m* TLHelpPromoData) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_help_promoData))

    // flags
    var flags uint32 = 0
    if m.GetProxy() == true { flags |= 1 << 0 }
    if m.GetPsaType() != "" { flags |= 1 << 1 }
    if m.GetPsaMessage() != "" { flags |= 1 << 2 }
	x.UInt(flags)

    
    x.Int(m.GetExpires())
    x.Bytes(m.GetPeer().Encode())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetChats())))
for _, v := range m.GetChats() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    if (flags & (1 << 1)) != 0 { x.String(m.GetPsaType()) }
    if (flags & (1 << 2)) != 0 { x.String(m.GetPsaMessage()) }

    return x.buf
}

func (m* TLHelpPromoData) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetProxy(true) }
    m.SetExpires(dbuf.Int())
    m4 := &Peer{}
    m4.Decode(dbuf)
    m.SetPeer(m4)
    c5 := dbuf.Int()
if c5 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 5, c5)
	return dbuf.err
}
l5 := dbuf.Int()
v5 := make([]*Chat, l5)
for i := int32(0); i < l5; i++ {
	v5[i] = &Chat{}
	v5[i].Decode(dbuf)
}
m.SetChats(v5)

    c6 := dbuf.Int()
if c6 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 6, c6)
	return dbuf.err
}
l6 := dbuf.Int()
v6 := make([]*User, l6)
for i := int32(0); i < l6; i++ {
	v6[i] = &User{}
	v6[i].Decode(dbuf)
}
m.SetUsers(v6)

    if (flags & (1 << 1)) != 0 { m.SetPsaType(dbuf.String()) }
    if (flags & (1 << 2)) != 0 { m.SetPsaMessage(dbuf.String()) }

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// ImportedContact <--
//  + TL_ImportedContact
//

func (m *ImportedContact) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_importedContact:
        t := m.To_ImportedContact()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *ImportedContact) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_importedContact:
        m2 := &TLImportedContact{&ImportedContact_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// importedContact#d0028438 user_id:int client_id:long = ImportedContact;
func (m *ImportedContact) To_ImportedContact() *TLImportedContact {
    return &TLImportedContact{
        Data2: m.Data2,
    }
}



// importedContact#d0028438 user_id:int client_id:long = ImportedContact;
func (m *TLImportedContact) To_ImportedContact() *ImportedContact {
    return &ImportedContact{
        Constructor: TLConstructor_CRC32_importedContact,
        Data2: m.Data2,
    }
}


func (m *TLImportedContact) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLImportedContact) GetUserId() int32 { return m.Data2.UserId }

func (m *TLImportedContact) SetClientId(v int64) { m.Data2.ClientId = v }
func (m *TLImportedContact) GetClientId() int64 { return m.Data2.ClientId }


func NewTLImportedContact() * TLImportedContact {
    return &TLImportedContact{ Data2: &ImportedContact_Data{} }
}

func (m* TLImportedContact) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_importedContact))

    x.Int(m.GetUserId())
    x.Long(m.GetClientId())

    return x.buf
}

func (m* TLImportedContact) Decode(dbuf *DecodeBuf) error {
    m.SetUserId(dbuf.Int())
    m.SetClientId(dbuf.Long())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Messages_Messages <--
//  + TL_MessagesMessages
//  + TL_MessagesMessagesSlice
//  + TL_MessagesChannelMessages
//  + TL_MessagesMessagesSlice114
//  + TL_MessagesMessagesNotModified
//

func (m *Messages_Messages) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messages_messages:
        t := m.To_MessagesMessages()
        return t.Encode()
    case TLConstructor_CRC32_messages_messagesSlice:
        t := m.To_MessagesMessagesSlice()
        return t.Encode()
    case TLConstructor_CRC32_messages_channelMessages:
        t := m.To_MessagesChannelMessages()
        return t.Encode()
    case TLConstructor_CRC32_messages_messagesSlice114:
        t := m.To_MessagesMessagesSlice114()
        return t.Encode()
    case TLConstructor_CRC32_messages_messagesNotModified:
        t := m.To_MessagesMessagesNotModified()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Messages_Messages) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messages_messages:
        m2 := &TLMessagesMessages{&Messages_Messages_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messages_messagesSlice:
        m2 := &TLMessagesMessagesSlice{&Messages_Messages_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messages_channelMessages:
        m2 := &TLMessagesChannelMessages{&Messages_Messages_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messages_messagesSlice114:
        m2 := &TLMessagesMessagesSlice114{&Messages_Messages_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messages_messagesNotModified:
        m2 := &TLMessagesMessagesNotModified{&Messages_Messages_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messages.messages#8c718e87 messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Messages;
func (m *Messages_Messages) To_MessagesMessages() *TLMessagesMessages {
    return &TLMessagesMessages{
        Data2: m.Data2,
    }
}

// messages.messagesSlice#b446ae3 count:int messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Messages;
func (m *Messages_Messages) To_MessagesMessagesSlice() *TLMessagesMessagesSlice {
    return &TLMessagesMessagesSlice{
        Data2: m.Data2,
    }
}

// messages.channelMessages#99262e37 flags:# pts:int count:int messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Messages;
func (m *Messages_Messages) To_MessagesChannelMessages() *TLMessagesChannelMessages {
    return &TLMessagesChannelMessages{
        Data2: m.Data2,
    }
}

// messages.messagesSlice#c8edce1e flags:# inexact:flags.1?true count:int next_rate:flags.0?int messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Messages;
func (m *Messages_Messages) To_MessagesMessagesSlice114() *TLMessagesMessagesSlice114 {
    return &TLMessagesMessagesSlice114{
        Data2: m.Data2,
    }
}

// messages.messagesNotModified#74535f21 count:int = messages.Messages;
func (m *Messages_Messages) To_MessagesMessagesNotModified() *TLMessagesMessagesNotModified {
    return &TLMessagesMessagesNotModified{
        Data2: m.Data2,
    }
}



// messages.messages#8c718e87 messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Messages;
func (m *TLMessagesMessages) To_Messages_Messages() *Messages_Messages {
    return &Messages_Messages{
        Constructor: TLConstructor_CRC32_messages_messages,
        Data2: m.Data2,
    }
}


func (m *TLMessagesMessages) SetMessages(v []*Message) { m.Data2.Messages = v }
func (m *TLMessagesMessages) GetMessages() []*Message { return m.Data2.Messages }

func (m *TLMessagesMessages) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesMessages) GetChats() []*Chat { return m.Data2.Chats }

func (m *TLMessagesMessages) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesMessages) GetUsers() []*User { return m.Data2.Users }


func NewTLMessagesMessages() * TLMessagesMessages {
    return &TLMessagesMessages{ Data2: &Messages_Messages_Data{} }
}

func (m* TLMessagesMessages) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_messages))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetMessages())))
for _, v := range m.GetMessages() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetChats())))
for _, v := range m.GetChats() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLMessagesMessages) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*Message, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &Message{}
	v1[i].Decode(dbuf)
}
m.SetMessages(v1)

    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*Chat, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &Chat{}
	v2[i].Decode(dbuf)
}
m.SetChats(v2)

    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*User, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &User{}
	v3[i].Decode(dbuf)
}
m.SetUsers(v3)


    return dbuf.err
}
// messages.messagesSlice#b446ae3 count:int messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Messages;
func (m *TLMessagesMessagesSlice) To_Messages_Messages() *Messages_Messages {
    return &Messages_Messages{
        Constructor: TLConstructor_CRC32_messages_messagesSlice,
        Data2: m.Data2,
    }
}


func (m *TLMessagesMessagesSlice) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesMessagesSlice) GetCount() int32 { return m.Data2.Count }

func (m *TLMessagesMessagesSlice) SetMessages(v []*Message) { m.Data2.Messages = v }
func (m *TLMessagesMessagesSlice) GetMessages() []*Message { return m.Data2.Messages }

func (m *TLMessagesMessagesSlice) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesMessagesSlice) GetChats() []*Chat { return m.Data2.Chats }

func (m *TLMessagesMessagesSlice) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesMessagesSlice) GetUsers() []*User { return m.Data2.Users }


func NewTLMessagesMessagesSlice() * TLMessagesMessagesSlice {
    return &TLMessagesMessagesSlice{ Data2: &Messages_Messages_Data{} }
}

func (m* TLMessagesMessagesSlice) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_messagesSlice))

    x.Int(m.GetCount())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetMessages())))
for _, v := range m.GetMessages() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetChats())))
for _, v := range m.GetChats() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLMessagesMessagesSlice) Decode(dbuf *DecodeBuf) error {
    m.SetCount(dbuf.Int())
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*Message, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &Message{}
	v2[i].Decode(dbuf)
}
m.SetMessages(v2)

    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*Chat, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &Chat{}
	v3[i].Decode(dbuf)
}
m.SetChats(v3)

    c4 := dbuf.Int()
if c4 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
	return dbuf.err
}
l4 := dbuf.Int()
v4 := make([]*User, l4)
for i := int32(0); i < l4; i++ {
	v4[i] = &User{}
	v4[i].Decode(dbuf)
}
m.SetUsers(v4)


    return dbuf.err
}
// messages.channelMessages#99262e37 flags:# pts:int count:int messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Messages;
func (m *TLMessagesChannelMessages) To_Messages_Messages() *Messages_Messages {
    return &Messages_Messages{
        Constructor: TLConstructor_CRC32_messages_channelMessages,
        Data2: m.Data2,
    }
}


func (m *TLMessagesChannelMessages) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLMessagesChannelMessages) GetPts() int32 { return m.Data2.Pts }

func (m *TLMessagesChannelMessages) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesChannelMessages) GetCount() int32 { return m.Data2.Count }

func (m *TLMessagesChannelMessages) SetMessages(v []*Message) { m.Data2.Messages = v }
func (m *TLMessagesChannelMessages) GetMessages() []*Message { return m.Data2.Messages }

func (m *TLMessagesChannelMessages) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesChannelMessages) GetChats() []*Chat { return m.Data2.Chats }

func (m *TLMessagesChannelMessages) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesChannelMessages) GetUsers() []*User { return m.Data2.Users }


func NewTLMessagesChannelMessages() * TLMessagesChannelMessages {
    return &TLMessagesChannelMessages{ Data2: &Messages_Messages_Data{} }
}

func (m* TLMessagesChannelMessages) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_channelMessages))

    // flags
    var flags uint32 = 0
	x.UInt(flags)

    x.Int(m.GetPts())
    x.Int(m.GetCount())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetMessages())))
for _, v := range m.GetMessages() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetChats())))
for _, v := range m.GetChats() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLMessagesChannelMessages) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetPts(dbuf.Int())
    m.SetCount(dbuf.Int())
    c4 := dbuf.Int()
if c4 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
	return dbuf.err
}
l4 := dbuf.Int()
v4 := make([]*Message, l4)
for i := int32(0); i < l4; i++ {
	v4[i] = &Message{}
	v4[i].Decode(dbuf)
}
m.SetMessages(v4)

    c5 := dbuf.Int()
if c5 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 5, c5)
	return dbuf.err
}
l5 := dbuf.Int()
v5 := make([]*Chat, l5)
for i := int32(0); i < l5; i++ {
	v5[i] = &Chat{}
	v5[i].Decode(dbuf)
}
m.SetChats(v5)

    c6 := dbuf.Int()
if c6 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 6, c6)
	return dbuf.err
}
l6 := dbuf.Int()
v6 := make([]*User, l6)
for i := int32(0); i < l6; i++ {
	v6[i] = &User{}
	v6[i].Decode(dbuf)
}
m.SetUsers(v6)


    return dbuf.err
}
// messages.messagesSlice#c8edce1e flags:# inexact:flags.1?true count:int next_rate:flags.0?int messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = messages.Messages;
func (m *TLMessagesMessagesSlice114) To_Messages_Messages() *Messages_Messages {
    return &Messages_Messages{
        Constructor: TLConstructor_CRC32_messages_messagesSlice114,
        Data2: m.Data2,
    }
}


func (m *TLMessagesMessagesSlice114) SetInexact(v bool) { m.Data2.Inexact = v }
func (m *TLMessagesMessagesSlice114) GetInexact() bool { return m.Data2.Inexact }

func (m *TLMessagesMessagesSlice114) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesMessagesSlice114) GetCount() int32 { return m.Data2.Count }

func (m *TLMessagesMessagesSlice114) SetNextRate(v int32) { m.Data2.NextRate = v }
func (m *TLMessagesMessagesSlice114) GetNextRate() int32 { return m.Data2.NextRate }

func (m *TLMessagesMessagesSlice114) SetMessages(v []*Message) { m.Data2.Messages = v }
func (m *TLMessagesMessagesSlice114) GetMessages() []*Message { return m.Data2.Messages }

func (m *TLMessagesMessagesSlice114) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesMessagesSlice114) GetChats() []*Chat { return m.Data2.Chats }

func (m *TLMessagesMessagesSlice114) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesMessagesSlice114) GetUsers() []*User { return m.Data2.Users }


func NewTLMessagesMessagesSlice114() * TLMessagesMessagesSlice114 {
    return &TLMessagesMessagesSlice114{ Data2: &Messages_Messages_Data{} }
}

func (m* TLMessagesMessagesSlice114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_messagesSlice114))

    // flags
    var flags uint32 = 0
    if m.GetInexact() == true { flags |= 1 << 1 }
    if m.GetNextRate() != 0 { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Int(m.GetCount())
    if (flags & (1 << 0)) != 0 { x.Int(m.GetNextRate()) }
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetMessages())))
for _, v := range m.GetMessages() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetChats())))
for _, v := range m.GetChats() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLMessagesMessagesSlice114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 1)) != 0 { m.SetInexact(true) }
    m.SetCount(dbuf.Int())
    if (flags & (1 << 0)) != 0 { m.SetNextRate(dbuf.Int()) }
    c5 := dbuf.Int()
if c5 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 5, c5)
	return dbuf.err
}
l5 := dbuf.Int()
v5 := make([]*Message, l5)
for i := int32(0); i < l5; i++ {
	v5[i] = &Message{}
	v5[i].Decode(dbuf)
}
m.SetMessages(v5)

    c6 := dbuf.Int()
if c6 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 6, c6)
	return dbuf.err
}
l6 := dbuf.Int()
v6 := make([]*Chat, l6)
for i := int32(0); i < l6; i++ {
	v6[i] = &Chat{}
	v6[i].Decode(dbuf)
}
m.SetChats(v6)

    c7 := dbuf.Int()
if c7 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 7, c7)
	return dbuf.err
}
l7 := dbuf.Int()
v7 := make([]*User, l7)
for i := int32(0); i < l7; i++ {
	v7[i] = &User{}
	v7[i].Decode(dbuf)
}
m.SetUsers(v7)


    return dbuf.err
}
// messages.messagesNotModified#74535f21 count:int = messages.Messages;
func (m *TLMessagesMessagesNotModified) To_Messages_Messages() *Messages_Messages {
    return &Messages_Messages{
        Constructor: TLConstructor_CRC32_messages_messagesNotModified,
        Data2: m.Data2,
    }
}


func (m *TLMessagesMessagesNotModified) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesMessagesNotModified) GetCount() int32 { return m.Data2.Count }


func NewTLMessagesMessagesNotModified() * TLMessagesMessagesNotModified {
    return &TLMessagesMessagesNotModified{ Data2: &Messages_Messages_Data{} }
}

func (m* TLMessagesMessagesNotModified) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_messagesNotModified))

    x.Int(m.GetCount())

    return x.buf
}

func (m* TLMessagesMessagesNotModified) Decode(dbuf *DecodeBuf) error {
    m.SetCount(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputWebFileLocation <--
//  + TL_InputWebFileLocation
//  + TL_InputWebFileGeoPointLocation
//

func (m *InputWebFileLocation) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputWebFileLocation:
        t := m.To_InputWebFileLocation()
        return t.Encode()
    case TLConstructor_CRC32_inputWebFileGeoPointLocation:
        t := m.To_InputWebFileGeoPointLocation()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputWebFileLocation) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputWebFileLocation:
        m2 := &TLInputWebFileLocation{&InputWebFileLocation_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputWebFileGeoPointLocation:
        m2 := &TLInputWebFileGeoPointLocation{&InputWebFileLocation_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputWebFileLocation#c239d686 url:string access_hash:long = InputWebFileLocation;
func (m *InputWebFileLocation) To_InputWebFileLocation() *TLInputWebFileLocation {
    return &TLInputWebFileLocation{
        Data2: m.Data2,
    }
}

// inputWebFileGeoPointLocation#9f2221c9 geo_point:InputGeoPoint access_hash:long w:int h:int zoom:int scale:int = InputWebFileLocation;
func (m *InputWebFileLocation) To_InputWebFileGeoPointLocation() *TLInputWebFileGeoPointLocation {
    return &TLInputWebFileGeoPointLocation{
        Data2: m.Data2,
    }
}



// inputWebFileLocation#c239d686 url:string access_hash:long = InputWebFileLocation;
func (m *TLInputWebFileLocation) To_InputWebFileLocation() *InputWebFileLocation {
    return &InputWebFileLocation{
        Constructor: TLConstructor_CRC32_inputWebFileLocation,
        Data2: m.Data2,
    }
}


func (m *TLInputWebFileLocation) SetUrl(v string) { m.Data2.Url = v }
func (m *TLInputWebFileLocation) GetUrl() string { return m.Data2.Url }

func (m *TLInputWebFileLocation) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputWebFileLocation) GetAccessHash() int64 { return m.Data2.AccessHash }


func NewTLInputWebFileLocation() * TLInputWebFileLocation {
    return &TLInputWebFileLocation{ Data2: &InputWebFileLocation_Data{} }
}

func (m* TLInputWebFileLocation) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputWebFileLocation))

    x.String(m.GetUrl())
    x.Long(m.GetAccessHash())

    return x.buf
}

func (m* TLInputWebFileLocation) Decode(dbuf *DecodeBuf) error {
    m.SetUrl(dbuf.String())
    m.SetAccessHash(dbuf.Long())

    return dbuf.err
}
// inputWebFileGeoPointLocation#9f2221c9 geo_point:InputGeoPoint access_hash:long w:int h:int zoom:int scale:int = InputWebFileLocation;
func (m *TLInputWebFileGeoPointLocation) To_InputWebFileLocation() *InputWebFileLocation {
    return &InputWebFileLocation{
        Constructor: TLConstructor_CRC32_inputWebFileGeoPointLocation,
        Data2: m.Data2,
    }
}


func (m *TLInputWebFileGeoPointLocation) SetGeoPoint(v *InputGeoPoint) { m.Data2.GeoPoint = v }
func (m *TLInputWebFileGeoPointLocation) GetGeoPoint() *InputGeoPoint { return m.Data2.GeoPoint }

func (m *TLInputWebFileGeoPointLocation) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputWebFileGeoPointLocation) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLInputWebFileGeoPointLocation) SetW(v int32) { m.Data2.W = v }
func (m *TLInputWebFileGeoPointLocation) GetW() int32 { return m.Data2.W }

func (m *TLInputWebFileGeoPointLocation) SetH(v int32) { m.Data2.H = v }
func (m *TLInputWebFileGeoPointLocation) GetH() int32 { return m.Data2.H }

func (m *TLInputWebFileGeoPointLocation) SetZoom(v int32) { m.Data2.Zoom = v }
func (m *TLInputWebFileGeoPointLocation) GetZoom() int32 { return m.Data2.Zoom }

func (m *TLInputWebFileGeoPointLocation) SetScale(v int32) { m.Data2.Scale = v }
func (m *TLInputWebFileGeoPointLocation) GetScale() int32 { return m.Data2.Scale }


func NewTLInputWebFileGeoPointLocation() * TLInputWebFileGeoPointLocation {
    return &TLInputWebFileGeoPointLocation{ Data2: &InputWebFileLocation_Data{} }
}

func (m* TLInputWebFileGeoPointLocation) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputWebFileGeoPointLocation))

    x.Bytes(m.GetGeoPoint().Encode())
    x.Long(m.GetAccessHash())
    x.Int(m.GetW())
    x.Int(m.GetH())
    x.Int(m.GetZoom())
    x.Int(m.GetScale())

    return x.buf
}

func (m* TLInputWebFileGeoPointLocation) Decode(dbuf *DecodeBuf) error {
    m1 := &InputGeoPoint{}
    m1.Decode(dbuf)
    m.SetGeoPoint(m1)
    m.SetAccessHash(dbuf.Long())
    m.SetW(dbuf.Int())
    m.SetH(dbuf.Int())
    m.SetZoom(dbuf.Int())
    m.SetScale(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputSecureFile <--
//  + TL_InputSecureFileUploaded
//  + TL_InputSecureFile
//

func (m *InputSecureFile) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputSecureFileUploaded:
        t := m.To_InputSecureFileUploaded()
        return t.Encode()
    case TLConstructor_CRC32_inputSecureFile:
        t := m.To_InputSecureFile()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputSecureFile) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputSecureFileUploaded:
        m2 := &TLInputSecureFileUploaded{&InputSecureFile_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputSecureFile:
        m2 := &TLInputSecureFile{&InputSecureFile_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputSecureFileUploaded#3334b0f0 id:long parts:int md5_checksum:string file_hash:bytes secret:bytes = InputSecureFile;
func (m *InputSecureFile) To_InputSecureFileUploaded() *TLInputSecureFileUploaded {
    return &TLInputSecureFileUploaded{
        Data2: m.Data2,
    }
}

// inputSecureFile#5367e5be id:long access_hash:long = InputSecureFile;
func (m *InputSecureFile) To_InputSecureFile() *TLInputSecureFile {
    return &TLInputSecureFile{
        Data2: m.Data2,
    }
}



// inputSecureFileUploaded#3334b0f0 id:long parts:int md5_checksum:string file_hash:bytes secret:bytes = InputSecureFile;
func (m *TLInputSecureFileUploaded) To_InputSecureFile() *InputSecureFile {
    return &InputSecureFile{
        Constructor: TLConstructor_CRC32_inputSecureFileUploaded,
        Data2: m.Data2,
    }
}


func (m *TLInputSecureFileUploaded) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputSecureFileUploaded) GetId() int64 { return m.Data2.Id }

func (m *TLInputSecureFileUploaded) SetParts(v int32) { m.Data2.Parts = v }
func (m *TLInputSecureFileUploaded) GetParts() int32 { return m.Data2.Parts }

func (m *TLInputSecureFileUploaded) SetMd5Checksum(v string) { m.Data2.Md5Checksum = v }
func (m *TLInputSecureFileUploaded) GetMd5Checksum() string { return m.Data2.Md5Checksum }

func (m *TLInputSecureFileUploaded) SetFileHash(v []byte) { m.Data2.FileHash = v }
func (m *TLInputSecureFileUploaded) GetFileHash() []byte { return m.Data2.FileHash }

func (m *TLInputSecureFileUploaded) SetSecret(v []byte) { m.Data2.Secret = v }
func (m *TLInputSecureFileUploaded) GetSecret() []byte { return m.Data2.Secret }


func NewTLInputSecureFileUploaded() * TLInputSecureFileUploaded {
    return &TLInputSecureFileUploaded{ Data2: &InputSecureFile_Data{} }
}

func (m* TLInputSecureFileUploaded) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputSecureFileUploaded))

    x.Long(m.GetId())
    x.Int(m.GetParts())
    x.String(m.GetMd5Checksum())
    x.StringBytes(m.GetFileHash())
    x.StringBytes(m.GetSecret())

    return x.buf
}

func (m* TLInputSecureFileUploaded) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetParts(dbuf.Int())
    m.SetMd5Checksum(dbuf.String())
    m.SetFileHash(dbuf.StringBytes())
    m.SetSecret(dbuf.StringBytes())

    return dbuf.err
}
// inputSecureFile#5367e5be id:long access_hash:long = InputSecureFile;
func (m *TLInputSecureFile) To_InputSecureFile() *InputSecureFile {
    return &InputSecureFile{
        Constructor: TLConstructor_CRC32_inputSecureFile,
        Data2: m.Data2,
    }
}


func (m *TLInputSecureFile) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputSecureFile) GetId() int64 { return m.Data2.Id }

func (m *TLInputSecureFile) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputSecureFile) GetAccessHash() int64 { return m.Data2.AccessHash }


func NewTLInputSecureFile() * TLInputSecureFile {
    return &TLInputSecureFile{ Data2: &InputSecureFile_Data{} }
}

func (m* TLInputSecureFile) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputSecureFile))

    x.Long(m.GetId())
    x.Long(m.GetAccessHash())

    return x.buf
}

func (m* TLInputSecureFile) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// SecureValueError <--
//  + TL_SecureValueErrorData
//  + TL_SecureValueErrorFrontSide
//  + TL_SecureValueErrorReverseSide
//  + TL_SecureValueErrorSelfie
//  + TL_SecureValueErrorFile
//  + TL_SecureValueErrorFiles
//  + TL_SecureValueError
//  + TL_SecureValueErrorTranslationFile
//  + TL_SecureValueErrorTranslationFiles
//

func (m *SecureValueError) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_secureValueErrorData:
        t := m.To_SecureValueErrorData()
        return t.Encode()
    case TLConstructor_CRC32_secureValueErrorFrontSide:
        t := m.To_SecureValueErrorFrontSide()
        return t.Encode()
    case TLConstructor_CRC32_secureValueErrorReverseSide:
        t := m.To_SecureValueErrorReverseSide()
        return t.Encode()
    case TLConstructor_CRC32_secureValueErrorSelfie:
        t := m.To_SecureValueErrorSelfie()
        return t.Encode()
    case TLConstructor_CRC32_secureValueErrorFile:
        t := m.To_SecureValueErrorFile()
        return t.Encode()
    case TLConstructor_CRC32_secureValueErrorFiles:
        t := m.To_SecureValueErrorFiles()
        return t.Encode()
    case TLConstructor_CRC32_secureValueError:
        t := m.To_SecureValueError()
        return t.Encode()
    case TLConstructor_CRC32_secureValueErrorTranslationFile:
        t := m.To_SecureValueErrorTranslationFile()
        return t.Encode()
    case TLConstructor_CRC32_secureValueErrorTranslationFiles:
        t := m.To_SecureValueErrorTranslationFiles()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *SecureValueError) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_secureValueErrorData:
        m2 := &TLSecureValueErrorData{&SecureValueError_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_secureValueErrorFrontSide:
        m2 := &TLSecureValueErrorFrontSide{&SecureValueError_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_secureValueErrorReverseSide:
        m2 := &TLSecureValueErrorReverseSide{&SecureValueError_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_secureValueErrorSelfie:
        m2 := &TLSecureValueErrorSelfie{&SecureValueError_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_secureValueErrorFile:
        m2 := &TLSecureValueErrorFile{&SecureValueError_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_secureValueErrorFiles:
        m2 := &TLSecureValueErrorFiles{&SecureValueError_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_secureValueError:
        m2 := &TLSecureValueError{&SecureValueError_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_secureValueErrorTranslationFile:
        m2 := &TLSecureValueErrorTranslationFile{&SecureValueError_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_secureValueErrorTranslationFiles:
        m2 := &TLSecureValueErrorTranslationFiles{&SecureValueError_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// secureValueErrorData#e8a40bd9 type:SecureValueType data_hash:bytes field:string text:string = SecureValueError;
func (m *SecureValueError) To_SecureValueErrorData() *TLSecureValueErrorData {
    return &TLSecureValueErrorData{
        Data2: m.Data2,
    }
}

// secureValueErrorFrontSide#be3dfa type:SecureValueType file_hash:bytes text:string = SecureValueError;
func (m *SecureValueError) To_SecureValueErrorFrontSide() *TLSecureValueErrorFrontSide {
    return &TLSecureValueErrorFrontSide{
        Data2: m.Data2,
    }
}

// secureValueErrorReverseSide#868a2aa5 type:SecureValueType file_hash:bytes text:string = SecureValueError;
func (m *SecureValueError) To_SecureValueErrorReverseSide() *TLSecureValueErrorReverseSide {
    return &TLSecureValueErrorReverseSide{
        Data2: m.Data2,
    }
}

// secureValueErrorSelfie#e537ced6 type:SecureValueType file_hash:bytes text:string = SecureValueError;
func (m *SecureValueError) To_SecureValueErrorSelfie() *TLSecureValueErrorSelfie {
    return &TLSecureValueErrorSelfie{
        Data2: m.Data2,
    }
}

// secureValueErrorFile#7a700873 type:SecureValueType file_hash:bytes text:string = SecureValueError;
func (m *SecureValueError) To_SecureValueErrorFile() *TLSecureValueErrorFile {
    return &TLSecureValueErrorFile{
        Data2: m.Data2,
    }
}

// secureValueErrorFiles#666220e9 type:SecureValueType file_hash:Vector<bytes> text:string = SecureValueError;
func (m *SecureValueError) To_SecureValueErrorFiles() *TLSecureValueErrorFiles {
    return &TLSecureValueErrorFiles{
        Data2: m.Data2,
    }
}

// secureValueError#869d758f type:SecureValueType hash:bytes text:string = SecureValueError;
func (m *SecureValueError) To_SecureValueError() *TLSecureValueError {
    return &TLSecureValueError{
        Data2: m.Data2,
    }
}

// secureValueErrorTranslationFile#a1144770 type:SecureValueType file_hash:bytes text:string = SecureValueError;
func (m *SecureValueError) To_SecureValueErrorTranslationFile() *TLSecureValueErrorTranslationFile {
    return &TLSecureValueErrorTranslationFile{
        Data2: m.Data2,
    }
}

// secureValueErrorTranslationFiles#34636dd8 type:SecureValueType file_hash:Vector<bytes> text:string = SecureValueError;
func (m *SecureValueError) To_SecureValueErrorTranslationFiles() *TLSecureValueErrorTranslationFiles {
    return &TLSecureValueErrorTranslationFiles{
        Data2: m.Data2,
    }
}



// secureValueErrorData#e8a40bd9 type:SecureValueType data_hash:bytes field:string text:string = SecureValueError;
func (m *TLSecureValueErrorData) To_SecureValueError() *SecureValueError {
    return &SecureValueError{
        Constructor: TLConstructor_CRC32_secureValueErrorData,
        Data2: m.Data2,
    }
}


func (m *TLSecureValueErrorData) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureValueErrorData) GetType() *SecureValueType { return m.Data2.Type }

func (m *TLSecureValueErrorData) SetDataHash(v []byte) { m.Data2.DataHash = v }
func (m *TLSecureValueErrorData) GetDataHash() []byte { return m.Data2.DataHash }

func (m *TLSecureValueErrorData) SetField(v string) { m.Data2.Field = v }
func (m *TLSecureValueErrorData) GetField() string { return m.Data2.Field }

func (m *TLSecureValueErrorData) SetText(v string) { m.Data2.Text = v }
func (m *TLSecureValueErrorData) GetText() string { return m.Data2.Text }


func NewTLSecureValueErrorData() * TLSecureValueErrorData {
    return &TLSecureValueErrorData{ Data2: &SecureValueError_Data{} }
}

func (m* TLSecureValueErrorData) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_secureValueErrorData))

    x.Bytes(m.GetType().Encode())
    x.StringBytes(m.GetDataHash())
    x.String(m.GetField())
    x.String(m.GetText())

    return x.buf
}

func (m* TLSecureValueErrorData) Decode(dbuf *DecodeBuf) error {
    m1 := &SecureValueType{}
    m1.Decode(dbuf)
    m.SetType(m1)
    m.SetDataHash(dbuf.StringBytes())
    m.SetField(dbuf.String())
    m.SetText(dbuf.String())

    return dbuf.err
}
// secureValueErrorFrontSide#be3dfa type:SecureValueType file_hash:bytes text:string = SecureValueError;
func (m *TLSecureValueErrorFrontSide) To_SecureValueError() *SecureValueError {
    return &SecureValueError{
        Constructor: TLConstructor_CRC32_secureValueErrorFrontSide,
        Data2: m.Data2,
    }
}


func (m *TLSecureValueErrorFrontSide) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureValueErrorFrontSide) GetType() *SecureValueType { return m.Data2.Type }

func (m *TLSecureValueErrorFrontSide) SetFileHash(v []byte) { m.Data2.FileHash_5 = v }
func (m *TLSecureValueErrorFrontSide) GetFileHash() []byte { return m.Data2.FileHash_5 }

func (m *TLSecureValueErrorFrontSide) SetText(v string) { m.Data2.Text = v }
func (m *TLSecureValueErrorFrontSide) GetText() string { return m.Data2.Text }


func NewTLSecureValueErrorFrontSide() * TLSecureValueErrorFrontSide {
    return &TLSecureValueErrorFrontSide{ Data2: &SecureValueError_Data{} }
}

func (m* TLSecureValueErrorFrontSide) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_secureValueErrorFrontSide))

    x.Bytes(m.GetType().Encode())
    x.StringBytes(m.GetFileHash())
    x.String(m.GetText())

    return x.buf
}

func (m* TLSecureValueErrorFrontSide) Decode(dbuf *DecodeBuf) error {
    m1 := &SecureValueType{}
    m1.Decode(dbuf)
    m.SetType(m1)
    m.SetFileHash(dbuf.StringBytes())
    m.SetText(dbuf.String())

    return dbuf.err
}
// secureValueErrorReverseSide#868a2aa5 type:SecureValueType file_hash:bytes text:string = SecureValueError;
func (m *TLSecureValueErrorReverseSide) To_SecureValueError() *SecureValueError {
    return &SecureValueError{
        Constructor: TLConstructor_CRC32_secureValueErrorReverseSide,
        Data2: m.Data2,
    }
}


func (m *TLSecureValueErrorReverseSide) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureValueErrorReverseSide) GetType() *SecureValueType { return m.Data2.Type }

func (m *TLSecureValueErrorReverseSide) SetFileHash(v []byte) { m.Data2.FileHash_5 = v }
func (m *TLSecureValueErrorReverseSide) GetFileHash() []byte { return m.Data2.FileHash_5 }

func (m *TLSecureValueErrorReverseSide) SetText(v string) { m.Data2.Text = v }
func (m *TLSecureValueErrorReverseSide) GetText() string { return m.Data2.Text }


func NewTLSecureValueErrorReverseSide() * TLSecureValueErrorReverseSide {
    return &TLSecureValueErrorReverseSide{ Data2: &SecureValueError_Data{} }
}

func (m* TLSecureValueErrorReverseSide) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_secureValueErrorReverseSide))

    x.Bytes(m.GetType().Encode())
    x.StringBytes(m.GetFileHash())
    x.String(m.GetText())

    return x.buf
}

func (m* TLSecureValueErrorReverseSide) Decode(dbuf *DecodeBuf) error {
    m1 := &SecureValueType{}
    m1.Decode(dbuf)
    m.SetType(m1)
    m.SetFileHash(dbuf.StringBytes())
    m.SetText(dbuf.String())

    return dbuf.err
}
// secureValueErrorSelfie#e537ced6 type:SecureValueType file_hash:bytes text:string = SecureValueError;
func (m *TLSecureValueErrorSelfie) To_SecureValueError() *SecureValueError {
    return &SecureValueError{
        Constructor: TLConstructor_CRC32_secureValueErrorSelfie,
        Data2: m.Data2,
    }
}


func (m *TLSecureValueErrorSelfie) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureValueErrorSelfie) GetType() *SecureValueType { return m.Data2.Type }

func (m *TLSecureValueErrorSelfie) SetFileHash(v []byte) { m.Data2.FileHash_5 = v }
func (m *TLSecureValueErrorSelfie) GetFileHash() []byte { return m.Data2.FileHash_5 }

func (m *TLSecureValueErrorSelfie) SetText(v string) { m.Data2.Text = v }
func (m *TLSecureValueErrorSelfie) GetText() string { return m.Data2.Text }


func NewTLSecureValueErrorSelfie() * TLSecureValueErrorSelfie {
    return &TLSecureValueErrorSelfie{ Data2: &SecureValueError_Data{} }
}

func (m* TLSecureValueErrorSelfie) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_secureValueErrorSelfie))

    x.Bytes(m.GetType().Encode())
    x.StringBytes(m.GetFileHash())
    x.String(m.GetText())

    return x.buf
}

func (m* TLSecureValueErrorSelfie) Decode(dbuf *DecodeBuf) error {
    m1 := &SecureValueType{}
    m1.Decode(dbuf)
    m.SetType(m1)
    m.SetFileHash(dbuf.StringBytes())
    m.SetText(dbuf.String())

    return dbuf.err
}
// secureValueErrorFile#7a700873 type:SecureValueType file_hash:bytes text:string = SecureValueError;
func (m *TLSecureValueErrorFile) To_SecureValueError() *SecureValueError {
    return &SecureValueError{
        Constructor: TLConstructor_CRC32_secureValueErrorFile,
        Data2: m.Data2,
    }
}


func (m *TLSecureValueErrorFile) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureValueErrorFile) GetType() *SecureValueType { return m.Data2.Type }

func (m *TLSecureValueErrorFile) SetFileHash(v []byte) { m.Data2.FileHash_5 = v }
func (m *TLSecureValueErrorFile) GetFileHash() []byte { return m.Data2.FileHash_5 }

func (m *TLSecureValueErrorFile) SetText(v string) { m.Data2.Text = v }
func (m *TLSecureValueErrorFile) GetText() string { return m.Data2.Text }


func NewTLSecureValueErrorFile() * TLSecureValueErrorFile {
    return &TLSecureValueErrorFile{ Data2: &SecureValueError_Data{} }
}

func (m* TLSecureValueErrorFile) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_secureValueErrorFile))

    x.Bytes(m.GetType().Encode())
    x.StringBytes(m.GetFileHash())
    x.String(m.GetText())

    return x.buf
}

func (m* TLSecureValueErrorFile) Decode(dbuf *DecodeBuf) error {
    m1 := &SecureValueType{}
    m1.Decode(dbuf)
    m.SetType(m1)
    m.SetFileHash(dbuf.StringBytes())
    m.SetText(dbuf.String())

    return dbuf.err
}
// secureValueErrorFiles#666220e9 type:SecureValueType file_hash:Vector<bytes> text:string = SecureValueError;
func (m *TLSecureValueErrorFiles) To_SecureValueError() *SecureValueError {
    return &SecureValueError{
        Constructor: TLConstructor_CRC32_secureValueErrorFiles,
        Data2: m.Data2,
    }
}


func (m *TLSecureValueErrorFiles) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureValueErrorFiles) GetType() *SecureValueType { return m.Data2.Type }

func (m *TLSecureValueErrorFiles) SetFileHash(v [][]byte) { m.Data2.FileHash_6 = v }
func (m *TLSecureValueErrorFiles) GetFileHash() [][]byte { return m.Data2.FileHash_6 }

func (m *TLSecureValueErrorFiles) SetText(v string) { m.Data2.Text = v }
func (m *TLSecureValueErrorFiles) GetText() string { return m.Data2.Text }


func NewTLSecureValueErrorFiles() * TLSecureValueErrorFiles {
    return &TLSecureValueErrorFiles{ Data2: &SecureValueError_Data{} }
}

func (m* TLSecureValueErrorFiles) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_secureValueErrorFiles))

    x.Bytes(m.GetType().Encode())
    
    x.String(m.GetText())

    return x.buf
}

func (m* TLSecureValueErrorFiles) Decode(dbuf *DecodeBuf) error {
    m1 := &SecureValueType{}
    m1.Decode(dbuf)
    m.SetType(m1)
    
    m.SetText(dbuf.String())

    return dbuf.err
}
// secureValueError#869d758f type:SecureValueType hash:bytes text:string = SecureValueError;
func (m *TLSecureValueError) To_SecureValueError() *SecureValueError {
    return &SecureValueError{
        Constructor: TLConstructor_CRC32_secureValueError,
        Data2: m.Data2,
    }
}


func (m *TLSecureValueError) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureValueError) GetType() *SecureValueType { return m.Data2.Type }

func (m *TLSecureValueError) SetHash(v []byte) { m.Data2.Hash = v }
func (m *TLSecureValueError) GetHash() []byte { return m.Data2.Hash }

func (m *TLSecureValueError) SetText(v string) { m.Data2.Text = v }
func (m *TLSecureValueError) GetText() string { return m.Data2.Text }


func NewTLSecureValueError() * TLSecureValueError {
    return &TLSecureValueError{ Data2: &SecureValueError_Data{} }
}

func (m* TLSecureValueError) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_secureValueError))

    x.Bytes(m.GetType().Encode())
    x.StringBytes(m.GetHash())
    x.String(m.GetText())

    return x.buf
}

func (m* TLSecureValueError) Decode(dbuf *DecodeBuf) error {
    m1 := &SecureValueType{}
    m1.Decode(dbuf)
    m.SetType(m1)
    m.SetHash(dbuf.StringBytes())
    m.SetText(dbuf.String())

    return dbuf.err
}
// secureValueErrorTranslationFile#a1144770 type:SecureValueType file_hash:bytes text:string = SecureValueError;
func (m *TLSecureValueErrorTranslationFile) To_SecureValueError() *SecureValueError {
    return &SecureValueError{
        Constructor: TLConstructor_CRC32_secureValueErrorTranslationFile,
        Data2: m.Data2,
    }
}


func (m *TLSecureValueErrorTranslationFile) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureValueErrorTranslationFile) GetType() *SecureValueType { return m.Data2.Type }

func (m *TLSecureValueErrorTranslationFile) SetFileHash(v []byte) { m.Data2.FileHash_5 = v }
func (m *TLSecureValueErrorTranslationFile) GetFileHash() []byte { return m.Data2.FileHash_5 }

func (m *TLSecureValueErrorTranslationFile) SetText(v string) { m.Data2.Text = v }
func (m *TLSecureValueErrorTranslationFile) GetText() string { return m.Data2.Text }


func NewTLSecureValueErrorTranslationFile() * TLSecureValueErrorTranslationFile {
    return &TLSecureValueErrorTranslationFile{ Data2: &SecureValueError_Data{} }
}

func (m* TLSecureValueErrorTranslationFile) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_secureValueErrorTranslationFile))

    x.Bytes(m.GetType().Encode())
    x.StringBytes(m.GetFileHash())
    x.String(m.GetText())

    return x.buf
}

func (m* TLSecureValueErrorTranslationFile) Decode(dbuf *DecodeBuf) error {
    m1 := &SecureValueType{}
    m1.Decode(dbuf)
    m.SetType(m1)
    m.SetFileHash(dbuf.StringBytes())
    m.SetText(dbuf.String())

    return dbuf.err
}
// secureValueErrorTranslationFiles#34636dd8 type:SecureValueType file_hash:Vector<bytes> text:string = SecureValueError;
func (m *TLSecureValueErrorTranslationFiles) To_SecureValueError() *SecureValueError {
    return &SecureValueError{
        Constructor: TLConstructor_CRC32_secureValueErrorTranslationFiles,
        Data2: m.Data2,
    }
}


func (m *TLSecureValueErrorTranslationFiles) SetType(v *SecureValueType) { m.Data2.Type = v }
func (m *TLSecureValueErrorTranslationFiles) GetType() *SecureValueType { return m.Data2.Type }

func (m *TLSecureValueErrorTranslationFiles) SetFileHash(v [][]byte) { m.Data2.FileHash_6 = v }
func (m *TLSecureValueErrorTranslationFiles) GetFileHash() [][]byte { return m.Data2.FileHash_6 }

func (m *TLSecureValueErrorTranslationFiles) SetText(v string) { m.Data2.Text = v }
func (m *TLSecureValueErrorTranslationFiles) GetText() string { return m.Data2.Text }


func NewTLSecureValueErrorTranslationFiles() * TLSecureValueErrorTranslationFiles {
    return &TLSecureValueErrorTranslationFiles{ Data2: &SecureValueError_Data{} }
}

func (m* TLSecureValueErrorTranslationFiles) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_secureValueErrorTranslationFiles))

    x.Bytes(m.GetType().Encode())
    
    x.String(m.GetText())

    return x.buf
}

func (m* TLSecureValueErrorTranslationFiles) Decode(dbuf *DecodeBuf) error {
    m1 := &SecureValueType{}
    m1.Decode(dbuf)
    m.SetType(m1)
    
    m.SetText(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// SecurePasswordKdfAlgo <--
//  + TL_SecurePasswordKdfAlgoUnknown
//  + TL_SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000
//  + TL_SecurePasswordKdfAlgoSHA512
//

func (m *SecurePasswordKdfAlgo) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_securePasswordKdfAlgoUnknown:
        t := m.To_SecurePasswordKdfAlgoUnknown()
        return t.Encode()
    case TLConstructor_CRC32_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000:
        t := m.To_SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000()
        return t.Encode()
    case TLConstructor_CRC32_securePasswordKdfAlgoSHA512:
        t := m.To_SecurePasswordKdfAlgoSHA512()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *SecurePasswordKdfAlgo) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_securePasswordKdfAlgoUnknown:
        m2 := &TLSecurePasswordKdfAlgoUnknown{&SecurePasswordKdfAlgo_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000:
        m2 := &TLSecurePasswordKdf512{&SecurePasswordKdfAlgo_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_securePasswordKdfAlgoSHA512:
        m2 := &TLSecurePasswordKdfAlgoSHA512{&SecurePasswordKdfAlgo_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// securePasswordKdfAlgoUnknown#4a8537 = SecurePasswordKdfAlgo;
func (m *SecurePasswordKdfAlgo) To_SecurePasswordKdfAlgoUnknown() *TLSecurePasswordKdfAlgoUnknown {
    return &TLSecurePasswordKdfAlgoUnknown{
        Data2: m.Data2,
    }
}

// securePasswordKdfAlgoPBKDF2HMACSHA512iter100000#bbf2dda0 salt:bytes = SecurePasswordKdfAlgo;
func (m *SecurePasswordKdfAlgo) To_SecurePasswordKdfAlgoPBKDF2HMACSHA512iter100000() *TLSecurePasswordKdf512 {
    return &TLSecurePasswordKdf512{
        Data2: m.Data2,
    }
}

// securePasswordKdfAlgoSHA512#86471d92 salt:bytes = SecurePasswordKdfAlgo;
func (m *SecurePasswordKdfAlgo) To_SecurePasswordKdfAlgoSHA512() *TLSecurePasswordKdfAlgoSHA512 {
    return &TLSecurePasswordKdfAlgoSHA512{
        Data2: m.Data2,
    }
}



// securePasswordKdfAlgoUnknown#4a8537 = SecurePasswordKdfAlgo;
func (m *TLSecurePasswordKdfAlgoUnknown) To_SecurePasswordKdfAlgo() *SecurePasswordKdfAlgo {
    return &SecurePasswordKdfAlgo{
        Constructor: TLConstructor_CRC32_securePasswordKdfAlgoUnknown,
        Data2: m.Data2,
    }
}



func NewTLSecurePasswordKdfAlgoUnknown() * TLSecurePasswordKdfAlgoUnknown {
    return &TLSecurePasswordKdfAlgoUnknown{ Data2: &SecurePasswordKdfAlgo_Data{} }
}

func (m* TLSecurePasswordKdfAlgoUnknown) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_securePasswordKdfAlgoUnknown))


    return x.buf
}

func (m* TLSecurePasswordKdfAlgoUnknown) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// securePasswordKdfAlgoPBKDF2HMACSHA512iter100000#bbf2dda0 salt:bytes = SecurePasswordKdfAlgo;
func (m *TLSecurePasswordKdf512) To_SecurePasswordKdfAlgo() *SecurePasswordKdfAlgo {
    return &SecurePasswordKdfAlgo{
        Constructor: TLConstructor_CRC32_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000,
        Data2: m.Data2,
    }
}


func (m *TLSecurePasswordKdf512) SetSalt(v []byte) { m.Data2.Salt = v }
func (m *TLSecurePasswordKdf512) GetSalt() []byte { return m.Data2.Salt }


func NewTLSecurePasswordKdf512() * TLSecurePasswordKdf512 {
    return &TLSecurePasswordKdf512{ Data2: &SecurePasswordKdfAlgo_Data{} }
}

func (m* TLSecurePasswordKdf512) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000))

    x.StringBytes(m.GetSalt())

    return x.buf
}

func (m* TLSecurePasswordKdf512) Decode(dbuf *DecodeBuf) error {
    m.SetSalt(dbuf.StringBytes())

    return dbuf.err
}
// securePasswordKdfAlgoSHA512#86471d92 salt:bytes = SecurePasswordKdfAlgo;
func (m *TLSecurePasswordKdfAlgoSHA512) To_SecurePasswordKdfAlgo() *SecurePasswordKdfAlgo {
    return &SecurePasswordKdfAlgo{
        Constructor: TLConstructor_CRC32_securePasswordKdfAlgoSHA512,
        Data2: m.Data2,
    }
}


func (m *TLSecurePasswordKdfAlgoSHA512) SetSalt(v []byte) { m.Data2.Salt = v }
func (m *TLSecurePasswordKdfAlgoSHA512) GetSalt() []byte { return m.Data2.Salt }


func NewTLSecurePasswordKdfAlgoSHA512() * TLSecurePasswordKdfAlgoSHA512 {
    return &TLSecurePasswordKdfAlgoSHA512{ Data2: &SecurePasswordKdfAlgo_Data{} }
}

func (m* TLSecurePasswordKdfAlgoSHA512) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_securePasswordKdfAlgoSHA512))

    x.StringBytes(m.GetSalt())

    return x.buf
}

func (m* TLSecurePasswordKdfAlgoSHA512) Decode(dbuf *DecodeBuf) error {
    m.SetSalt(dbuf.StringBytes())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// EmojiLanguage <--
//  + TL_EmojiLanguage
//

func (m *EmojiLanguage) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_emojiLanguage:
        t := m.To_EmojiLanguage()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *EmojiLanguage) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_emojiLanguage:
        m2 := &TLEmojiLanguage{&EmojiLanguage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// emojiLanguage#b3fb5361 lang_code:string = EmojiLanguage;
func (m *EmojiLanguage) To_EmojiLanguage() *TLEmojiLanguage {
    return &TLEmojiLanguage{
        Data2: m.Data2,
    }
}



// emojiLanguage#b3fb5361 lang_code:string = EmojiLanguage;
func (m *TLEmojiLanguage) To_EmojiLanguage() *EmojiLanguage {
    return &EmojiLanguage{
        Constructor: TLConstructor_CRC32_emojiLanguage,
        Data2: m.Data2,
    }
}


func (m *TLEmojiLanguage) SetLangCode(v string) { m.Data2.LangCode = v }
func (m *TLEmojiLanguage) GetLangCode() string { return m.Data2.LangCode }


func NewTLEmojiLanguage() * TLEmojiLanguage {
    return &TLEmojiLanguage{ Data2: &EmojiLanguage_Data{} }
}

func (m* TLEmojiLanguage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_emojiLanguage))

    x.String(m.GetLangCode())

    return x.buf
}

func (m* TLEmojiLanguage) Decode(dbuf *DecodeBuf) error {
    m.SetLangCode(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// ChatFull <--
//  + TL_ChatFull
//  + TL_ChannelFull
//  + TL_ChatFull114
//  + TL_ChannelFull114
//

func (m *ChatFull) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_chatFull:
        t := m.To_ChatFull()
        return t.Encode()
    case TLConstructor_CRC32_channelFull:
        t := m.To_ChannelFull()
        return t.Encode()
    case TLConstructor_CRC32_chatFull114:
        t := m.To_ChatFull114()
        return t.Encode()
    case TLConstructor_CRC32_channelFull114:
        t := m.To_ChannelFull114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *ChatFull) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_chatFull:
        m2 := &TLChatFull{&ChatFull_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelFull:
        m2 := &TLChannelFull{&ChatFull_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_chatFull114:
        m2 := &TLChatFull114{&ChatFull_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_channelFull114:
        m2 := &TLChannelFull114{&ChatFull_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// chatFull#2e02a614 id:int participants:ChatParticipants chat_photo:Photo notify_settings:PeerNotifySettings exported_invite:ExportedChatInvite bot_info:Vector<BotInfo> = ChatFull;
func (m *ChatFull) To_ChatFull() *TLChatFull {
    return &TLChatFull{
        Data2: m.Data2,
    }
}

// channelFull#76af5481 flags:# can_view_participants:flags.3?true can_set_username:flags.6?true can_set_stickers:flags.7?true hidden_prehistory:flags.10?true id:int about:string participants_count:flags.0?int admins_count:flags.1?int kicked_count:flags.2?int banned_count:flags.2?int read_inbox_max_id:int read_outbox_max_id:int unread_count:int chat_photo:Photo notify_settings:PeerNotifySettings exported_invite:ExportedChatInvite bot_info:Vector<BotInfo> migrated_from_chat_id:flags.4?int migrated_from_max_id:flags.4?int pinned_msg_id:flags.5?int stickerset:flags.8?StickerSet available_min_id:flags.9?int = ChatFull;
func (m *ChatFull) To_ChannelFull() *TLChannelFull {
    return &TLChannelFull{
        Data2: m.Data2,
    }
}

// chatFull#1b7c9db3 flags:# can_set_username:flags.7?true has_scheduled:flags.8?true id:int about:string participants:ChatParticipants chat_photo:flags.2?Photo notify_settings:PeerNotifySettings exported_invite:ExportedChatInvite bot_info:flags.3?Vector<BotInfo> pinned_msg_id:flags.6?int folder_id:flags.11?int = ChatFull;
func (m *ChatFull) To_ChatFull114() *TLChatFull114 {
    return &TLChatFull114{
        Data2: m.Data2,
    }
}

// channelFull#f0e6672a flags:# can_view_participants:flags.3?true can_set_username:flags.6?true can_set_stickers:flags.7?true hidden_prehistory:flags.10?true can_view_stats:flags.12?true can_set_location:flags.16?true has_scheduled:flags.19?true id:int about:string participants_count:flags.0?int admins_count:flags.1?int kicked_count:flags.2?int banned_count:flags.2?int online_count:flags.13?int read_inbox_max_id:int read_outbox_max_id:int unread_count:int chat_photo:Photo notify_settings:PeerNotifySettings exported_invite:ExportedChatInvite bot_info:Vector<BotInfo> migrated_from_chat_id:flags.4?int migrated_from_max_id:flags.4?int pinned_msg_id:flags.5?int stickerset:flags.8?StickerSet available_min_id:flags.9?int folder_id:flags.11?int linked_chat_id:flags.14?int location:flags.15?ChannelLocation slowmode_seconds:flags.17?int slowmode_next_send_date:flags.18?int stats_dc:flags.12?int pts:int = ChatFull;
func (m *ChatFull) To_ChannelFull114() *TLChannelFull114 {
    return &TLChannelFull114{
        Data2: m.Data2,
    }
}



// chatFull#2e02a614 id:int participants:ChatParticipants chat_photo:Photo notify_settings:PeerNotifySettings exported_invite:ExportedChatInvite bot_info:Vector<BotInfo> = ChatFull;
func (m *TLChatFull) To_ChatFull() *ChatFull {
    return &ChatFull{
        Constructor: TLConstructor_CRC32_chatFull,
        Data2: m.Data2,
    }
}


func (m *TLChatFull) SetId(v int32) { m.Data2.Id = v }
func (m *TLChatFull) GetId() int32 { return m.Data2.Id }

func (m *TLChatFull) SetParticipants(v *ChatParticipants) { m.Data2.Participants = v }
func (m *TLChatFull) GetParticipants() *ChatParticipants { return m.Data2.Participants }

func (m *TLChatFull) SetChatPhoto(v *Photo) { m.Data2.ChatPhoto = v }
func (m *TLChatFull) GetChatPhoto() *Photo { return m.Data2.ChatPhoto }

func (m *TLChatFull) SetNotifySettings(v *PeerNotifySettings) { m.Data2.NotifySettings = v }
func (m *TLChatFull) GetNotifySettings() *PeerNotifySettings { return m.Data2.NotifySettings }

func (m *TLChatFull) SetExportedInvite(v *ExportedChatInvite) { m.Data2.ExportedInvite = v }
func (m *TLChatFull) GetExportedInvite() *ExportedChatInvite { return m.Data2.ExportedInvite }

func (m *TLChatFull) SetBotInfo(v []*BotInfo) { m.Data2.BotInfo = v }
func (m *TLChatFull) GetBotInfo() []*BotInfo { return m.Data2.BotInfo }


func NewTLChatFull() * TLChatFull {
    return &TLChatFull{ Data2: &ChatFull_Data{} }
}

func (m* TLChatFull) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_chatFull))

    x.Int(m.GetId())
    x.Bytes(m.GetParticipants().Encode())
    x.Bytes(m.GetChatPhoto().Encode())
    x.Bytes(m.GetNotifySettings().Encode())
    x.Bytes(m.GetExportedInvite().Encode())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetBotInfo())))
for _, v := range m.GetBotInfo() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLChatFull) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Int())
    m2 := &ChatParticipants{}
    m2.Decode(dbuf)
    m.SetParticipants(m2)
    m3 := &Photo{}
    m3.Decode(dbuf)
    m.SetChatPhoto(m3)
    m4 := &PeerNotifySettings{}
    m4.Decode(dbuf)
    m.SetNotifySettings(m4)
    m5 := &ExportedChatInvite{}
    m5.Decode(dbuf)
    m.SetExportedInvite(m5)
    c6 := dbuf.Int()
if c6 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 6, c6)
	return dbuf.err
}
l6 := dbuf.Int()
v6 := make([]*BotInfo, l6)
for i := int32(0); i < l6; i++ {
	v6[i] = &BotInfo{}
	v6[i].Decode(dbuf)
}
m.SetBotInfo(v6)


    return dbuf.err
}
// channelFull#76af5481 flags:# can_view_participants:flags.3?true can_set_username:flags.6?true can_set_stickers:flags.7?true hidden_prehistory:flags.10?true id:int about:string participants_count:flags.0?int admins_count:flags.1?int kicked_count:flags.2?int banned_count:flags.2?int read_inbox_max_id:int read_outbox_max_id:int unread_count:int chat_photo:Photo notify_settings:PeerNotifySettings exported_invite:ExportedChatInvite bot_info:Vector<BotInfo> migrated_from_chat_id:flags.4?int migrated_from_max_id:flags.4?int pinned_msg_id:flags.5?int stickerset:flags.8?StickerSet available_min_id:flags.9?int = ChatFull;
func (m *TLChannelFull) To_ChatFull() *ChatFull {
    return &ChatFull{
        Constructor: TLConstructor_CRC32_channelFull,
        Data2: m.Data2,
    }
}


func (m *TLChannelFull) SetCanViewParticipants(v bool) { m.Data2.CanViewParticipants = v }
func (m *TLChannelFull) GetCanViewParticipants() bool { return m.Data2.CanViewParticipants }

func (m *TLChannelFull) SetCanSetUsername(v bool) { m.Data2.CanSetUsername = v }
func (m *TLChannelFull) GetCanSetUsername() bool { return m.Data2.CanSetUsername }

func (m *TLChannelFull) SetCanSetStickers(v bool) { m.Data2.CanSetStickers = v }
func (m *TLChannelFull) GetCanSetStickers() bool { return m.Data2.CanSetStickers }

func (m *TLChannelFull) SetHiddenPrehistory(v bool) { m.Data2.HiddenPrehistory = v }
func (m *TLChannelFull) GetHiddenPrehistory() bool { return m.Data2.HiddenPrehistory }

func (m *TLChannelFull) SetId(v int32) { m.Data2.Id = v }
func (m *TLChannelFull) GetId() int32 { return m.Data2.Id }

func (m *TLChannelFull) SetAbout(v string) { m.Data2.About = v }
func (m *TLChannelFull) GetAbout() string { return m.Data2.About }

func (m *TLChannelFull) SetParticipantsCount(v int32) { m.Data2.ParticipantsCount = v }
func (m *TLChannelFull) GetParticipantsCount() int32 { return m.Data2.ParticipantsCount }

func (m *TLChannelFull) SetAdminsCount(v int32) { m.Data2.AdminsCount = v }
func (m *TLChannelFull) GetAdminsCount() int32 { return m.Data2.AdminsCount }

func (m *TLChannelFull) SetKickedCount(v int32) { m.Data2.KickedCount = v }
func (m *TLChannelFull) GetKickedCount() int32 { return m.Data2.KickedCount }

func (m *TLChannelFull) SetBannedCount(v int32) { m.Data2.BannedCount = v }
func (m *TLChannelFull) GetBannedCount() int32 { return m.Data2.BannedCount }

func (m *TLChannelFull) SetReadInboxMaxId(v int32) { m.Data2.ReadInboxMaxId = v }
func (m *TLChannelFull) GetReadInboxMaxId() int32 { return m.Data2.ReadInboxMaxId }

func (m *TLChannelFull) SetReadOutboxMaxId(v int32) { m.Data2.ReadOutboxMaxId = v }
func (m *TLChannelFull) GetReadOutboxMaxId() int32 { return m.Data2.ReadOutboxMaxId }

func (m *TLChannelFull) SetUnreadCount(v int32) { m.Data2.UnreadCount = v }
func (m *TLChannelFull) GetUnreadCount() int32 { return m.Data2.UnreadCount }

func (m *TLChannelFull) SetChatPhoto(v *Photo) { m.Data2.ChatPhoto = v }
func (m *TLChannelFull) GetChatPhoto() *Photo { return m.Data2.ChatPhoto }

func (m *TLChannelFull) SetNotifySettings(v *PeerNotifySettings) { m.Data2.NotifySettings = v }
func (m *TLChannelFull) GetNotifySettings() *PeerNotifySettings { return m.Data2.NotifySettings }

func (m *TLChannelFull) SetExportedInvite(v *ExportedChatInvite) { m.Data2.ExportedInvite = v }
func (m *TLChannelFull) GetExportedInvite() *ExportedChatInvite { return m.Data2.ExportedInvite }

func (m *TLChannelFull) SetBotInfo(v []*BotInfo) { m.Data2.BotInfo = v }
func (m *TLChannelFull) GetBotInfo() []*BotInfo { return m.Data2.BotInfo }

func (m *TLChannelFull) SetMigratedFromChatId(v int32) { m.Data2.MigratedFromChatId = v }
func (m *TLChannelFull) GetMigratedFromChatId() int32 { return m.Data2.MigratedFromChatId }

func (m *TLChannelFull) SetMigratedFromMaxId(v int32) { m.Data2.MigratedFromMaxId = v }
func (m *TLChannelFull) GetMigratedFromMaxId() int32 { return m.Data2.MigratedFromMaxId }

func (m *TLChannelFull) SetPinnedMsgId(v int32) { m.Data2.PinnedMsgId = v }
func (m *TLChannelFull) GetPinnedMsgId() int32 { return m.Data2.PinnedMsgId }

func (m *TLChannelFull) SetStickerset(v *StickerSet) { m.Data2.Stickerset = v }
func (m *TLChannelFull) GetStickerset() *StickerSet { return m.Data2.Stickerset }

func (m *TLChannelFull) SetAvailableMinId(v int32) { m.Data2.AvailableMinId = v }
func (m *TLChannelFull) GetAvailableMinId() int32 { return m.Data2.AvailableMinId }


func NewTLChannelFull() * TLChannelFull {
    return &TLChannelFull{ Data2: &ChatFull_Data{} }
}

func (m* TLChannelFull) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelFull))

    // flags
    var flags uint32 = 0
    if m.GetCanViewParticipants() == true { flags |= 1 << 3 }
    if m.GetCanSetUsername() == true { flags |= 1 << 6 }
    if m.GetCanSetStickers() == true { flags |= 1 << 7 }
    if m.GetHiddenPrehistory() == true { flags |= 1 << 10 }
    if m.GetParticipantsCount() != 0 { flags |= 1 << 0 }
    if m.GetAdminsCount() != 0 { flags |= 1 << 1 }
    if m.GetKickedCount() != 0 { flags |= 1 << 2 }
    if m.GetBannedCount() != 0 { flags |= 1 << 2 }
    if m.GetMigratedFromChatId() != 0 { flags |= 1 << 4 }
    if m.GetMigratedFromMaxId() != 0 { flags |= 1 << 4 }
    if m.GetPinnedMsgId() != 0 { flags |= 1 << 5 }
    if m.GetStickerset() != nil { flags |= 1 << 8 }
    if m.GetAvailableMinId() != 0 { flags |= 1 << 9 }
	x.UInt(flags)

    
    
    
    
    x.Int(m.GetId())
    x.String(m.GetAbout())
    if (flags & (1 << 0)) != 0 { x.Int(m.GetParticipantsCount()) }
    if (flags & (1 << 1)) != 0 { x.Int(m.GetAdminsCount()) }
    if (flags & (1 << 2)) != 0 { x.Int(m.GetKickedCount()) }
    if (flags & (1 << 2)) != 0 { x.Int(m.GetBannedCount()) }
    x.Int(m.GetReadInboxMaxId())
    x.Int(m.GetReadOutboxMaxId())
    x.Int(m.GetUnreadCount())
    x.Bytes(m.GetChatPhoto().Encode())
    x.Bytes(m.GetNotifySettings().Encode())
    x.Bytes(m.GetExportedInvite().Encode())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetBotInfo())))
for _, v := range m.GetBotInfo() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    if (flags & (1 << 4)) != 0 { x.Int(m.GetMigratedFromChatId()) }
    if (flags & (1 << 4)) != 0 { x.Int(m.GetMigratedFromMaxId()) }
    if (flags & (1 << 5)) != 0 { x.Int(m.GetPinnedMsgId()) }
    if (flags & (1 << 8)) != 0 { x.Bytes(m.GetStickerset().Encode()) }
    if (flags & (1 << 9)) != 0 { x.Int(m.GetAvailableMinId()) }

    return x.buf
}

func (m* TLChannelFull) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 3)) != 0 { m.SetCanViewParticipants(true) }
    if (flags & (1 << 6)) != 0 { m.SetCanSetUsername(true) }
    if (flags & (1 << 7)) != 0 { m.SetCanSetStickers(true) }
    if (flags & (1 << 10)) != 0 { m.SetHiddenPrehistory(true) }
    m.SetId(dbuf.Int())
    m.SetAbout(dbuf.String())
    if (flags & (1 << 0)) != 0 { m.SetParticipantsCount(dbuf.Int()) }
    if (flags & (1 << 1)) != 0 { m.SetAdminsCount(dbuf.Int()) }
    if (flags & (1 << 2)) != 0 { m.SetKickedCount(dbuf.Int()) }
    if (flags & (1 << 2)) != 0 { m.SetBannedCount(dbuf.Int()) }
    m.SetReadInboxMaxId(dbuf.Int())
    m.SetReadOutboxMaxId(dbuf.Int())
    m.SetUnreadCount(dbuf.Int())
    m15 := &Photo{}
    m15.Decode(dbuf)
    m.SetChatPhoto(m15)
    m16 := &PeerNotifySettings{}
    m16.Decode(dbuf)
    m.SetNotifySettings(m16)
    m17 := &ExportedChatInvite{}
    m17.Decode(dbuf)
    m.SetExportedInvite(m17)
    c18 := dbuf.Int()
if c18 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 18, c18)
	return dbuf.err
}
l18 := dbuf.Int()
v18 := make([]*BotInfo, l18)
for i := int32(0); i < l18; i++ {
	v18[i] = &BotInfo{}
	v18[i].Decode(dbuf)
}
m.SetBotInfo(v18)

    if (flags & (1 << 4)) != 0 { m.SetMigratedFromChatId(dbuf.Int()) }
    if (flags & (1 << 4)) != 0 { m.SetMigratedFromMaxId(dbuf.Int()) }
    if (flags & (1 << 5)) != 0 { m.SetPinnedMsgId(dbuf.Int()) }
    if (flags & (1 << 8)) != 0 {
 m22 := &StickerSet{}
    m22.Decode(dbuf)
    m.SetStickerset(m22) 
}
    if (flags & (1 << 9)) != 0 { m.SetAvailableMinId(dbuf.Int()) }

    return dbuf.err
}
// chatFull#1b7c9db3 flags:# can_set_username:flags.7?true has_scheduled:flags.8?true id:int about:string participants:ChatParticipants chat_photo:flags.2?Photo notify_settings:PeerNotifySettings exported_invite:ExportedChatInvite bot_info:flags.3?Vector<BotInfo> pinned_msg_id:flags.6?int folder_id:flags.11?int = ChatFull;
func (m *TLChatFull114) To_ChatFull() *ChatFull {
    return &ChatFull{
        Constructor: TLConstructor_CRC32_chatFull114,
        Data2: m.Data2,
    }
}


func (m *TLChatFull114) SetCanSetUsername(v bool) { m.Data2.CanSetUsername = v }
func (m *TLChatFull114) GetCanSetUsername() bool { return m.Data2.CanSetUsername }

func (m *TLChatFull114) SetHasScheduled(v bool) { m.Data2.HasScheduled = v }
func (m *TLChatFull114) GetHasScheduled() bool { return m.Data2.HasScheduled }

func (m *TLChatFull114) SetId(v int32) { m.Data2.Id = v }
func (m *TLChatFull114) GetId() int32 { return m.Data2.Id }

func (m *TLChatFull114) SetAbout(v string) { m.Data2.About = v }
func (m *TLChatFull114) GetAbout() string { return m.Data2.About }

func (m *TLChatFull114) SetParticipants(v *ChatParticipants) { m.Data2.Participants = v }
func (m *TLChatFull114) GetParticipants() *ChatParticipants { return m.Data2.Participants }

func (m *TLChatFull114) SetChatPhoto(v *Photo) { m.Data2.ChatPhoto = v }
func (m *TLChatFull114) GetChatPhoto() *Photo { return m.Data2.ChatPhoto }

func (m *TLChatFull114) SetNotifySettings(v *PeerNotifySettings) { m.Data2.NotifySettings = v }
func (m *TLChatFull114) GetNotifySettings() *PeerNotifySettings { return m.Data2.NotifySettings }

func (m *TLChatFull114) SetExportedInvite(v *ExportedChatInvite) { m.Data2.ExportedInvite = v }
func (m *TLChatFull114) GetExportedInvite() *ExportedChatInvite { return m.Data2.ExportedInvite }

func (m *TLChatFull114) SetBotInfo(v []*BotInfo) { m.Data2.BotInfo = v }
func (m *TLChatFull114) GetBotInfo() []*BotInfo { return m.Data2.BotInfo }

func (m *TLChatFull114) SetPinnedMsgId(v int32) { m.Data2.PinnedMsgId = v }
func (m *TLChatFull114) GetPinnedMsgId() int32 { return m.Data2.PinnedMsgId }

func (m *TLChatFull114) SetFolderId(v int32) { m.Data2.FolderId = v }
func (m *TLChatFull114) GetFolderId() int32 { return m.Data2.FolderId }


func NewTLChatFull114() * TLChatFull114 {
    return &TLChatFull114{ Data2: &ChatFull_Data{} }
}

func (m* TLChatFull114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_chatFull114))

    // flags
    var flags uint32 = 0
    if m.GetCanSetUsername() == true { flags |= 1 << 7 }
    if m.GetHasScheduled() == true { flags |= 1 << 8 }
    if m.GetChatPhoto() != nil { flags |= 1 << 2 }
    if m.GetBotInfo() != nil { flags |= 1 << 3 }
    if m.GetPinnedMsgId() != 0 { flags |= 1 << 6 }
    if m.GetFolderId() != 0 { flags |= 1 << 11 }
	x.UInt(flags)

    
    
    x.Int(m.GetId())
    x.String(m.GetAbout())
    x.Bytes(m.GetParticipants().Encode())
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetChatPhoto().Encode()) }
    x.Bytes(m.GetNotifySettings().Encode())
    x.Bytes(m.GetExportedInvite().Encode())
    if (flags & (1 << 3)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetBotInfo())))
for _, v := range m.GetBotInfo() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}
    if (flags & (1 << 6)) != 0 { x.Int(m.GetPinnedMsgId()) }
    if (flags & (1 << 11)) != 0 { x.Int(m.GetFolderId()) }

    return x.buf
}

func (m* TLChatFull114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 7)) != 0 { m.SetCanSetUsername(true) }
    if (flags & (1 << 8)) != 0 { m.SetHasScheduled(true) }
    m.SetId(dbuf.Int())
    m.SetAbout(dbuf.String())
    m6 := &ChatParticipants{}
    m6.Decode(dbuf)
    m.SetParticipants(m6)
    if (flags & (1 << 2)) != 0 {
 m7 := &Photo{}
    m7.Decode(dbuf)
    m.SetChatPhoto(m7) 
}
    m8 := &PeerNotifySettings{}
    m8.Decode(dbuf)
    m.SetNotifySettings(m8)
    m9 := &ExportedChatInvite{}
    m9.Decode(dbuf)
    m.SetExportedInvite(m9)
    if (flags & (1 << 3)) != 0 {
 c10 := dbuf.Int()
if c10 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 10, c10)
	return dbuf.err
}
l10 := dbuf.Int()
v10 := make([]*BotInfo, l10)
for i := int32(0); i < l10; i++ {
	v10[i] = &BotInfo{}
	v10[i].Decode(dbuf)
}
m.SetBotInfo(v10)
 
}
    if (flags & (1 << 6)) != 0 { m.SetPinnedMsgId(dbuf.Int()) }
    if (flags & (1 << 11)) != 0 { m.SetFolderId(dbuf.Int()) }

    return dbuf.err
}
// channelFull#f0e6672a flags:# can_view_participants:flags.3?true can_set_username:flags.6?true can_set_stickers:flags.7?true hidden_prehistory:flags.10?true can_view_stats:flags.12?true can_set_location:flags.16?true has_scheduled:flags.19?true id:int about:string participants_count:flags.0?int admins_count:flags.1?int kicked_count:flags.2?int banned_count:flags.2?int online_count:flags.13?int read_inbox_max_id:int read_outbox_max_id:int unread_count:int chat_photo:Photo notify_settings:PeerNotifySettings exported_invite:ExportedChatInvite bot_info:Vector<BotInfo> migrated_from_chat_id:flags.4?int migrated_from_max_id:flags.4?int pinned_msg_id:flags.5?int stickerset:flags.8?StickerSet available_min_id:flags.9?int folder_id:flags.11?int linked_chat_id:flags.14?int location:flags.15?ChannelLocation slowmode_seconds:flags.17?int slowmode_next_send_date:flags.18?int stats_dc:flags.12?int pts:int = ChatFull;
func (m *TLChannelFull114) To_ChatFull() *ChatFull {
    return &ChatFull{
        Constructor: TLConstructor_CRC32_channelFull114,
        Data2: m.Data2,
    }
}


func (m *TLChannelFull114) SetCanViewParticipants(v bool) { m.Data2.CanViewParticipants = v }
func (m *TLChannelFull114) GetCanViewParticipants() bool { return m.Data2.CanViewParticipants }

func (m *TLChannelFull114) SetCanSetUsername(v bool) { m.Data2.CanSetUsername = v }
func (m *TLChannelFull114) GetCanSetUsername() bool { return m.Data2.CanSetUsername }

func (m *TLChannelFull114) SetCanSetStickers(v bool) { m.Data2.CanSetStickers = v }
func (m *TLChannelFull114) GetCanSetStickers() bool { return m.Data2.CanSetStickers }

func (m *TLChannelFull114) SetHiddenPrehistory(v bool) { m.Data2.HiddenPrehistory = v }
func (m *TLChannelFull114) GetHiddenPrehistory() bool { return m.Data2.HiddenPrehistory }

func (m *TLChannelFull114) SetCanViewStats(v bool) { m.Data2.CanViewStats = v }
func (m *TLChannelFull114) GetCanViewStats() bool { return m.Data2.CanViewStats }

func (m *TLChannelFull114) SetCanSetLocation(v bool) { m.Data2.CanSetLocation = v }
func (m *TLChannelFull114) GetCanSetLocation() bool { return m.Data2.CanSetLocation }

func (m *TLChannelFull114) SetHasScheduled(v bool) { m.Data2.HasScheduled = v }
func (m *TLChannelFull114) GetHasScheduled() bool { return m.Data2.HasScheduled }

func (m *TLChannelFull114) SetId(v int32) { m.Data2.Id = v }
func (m *TLChannelFull114) GetId() int32 { return m.Data2.Id }

func (m *TLChannelFull114) SetAbout(v string) { m.Data2.About = v }
func (m *TLChannelFull114) GetAbout() string { return m.Data2.About }

func (m *TLChannelFull114) SetParticipantsCount(v int32) { m.Data2.ParticipantsCount = v }
func (m *TLChannelFull114) GetParticipantsCount() int32 { return m.Data2.ParticipantsCount }

func (m *TLChannelFull114) SetAdminsCount(v int32) { m.Data2.AdminsCount = v }
func (m *TLChannelFull114) GetAdminsCount() int32 { return m.Data2.AdminsCount }

func (m *TLChannelFull114) SetKickedCount(v int32) { m.Data2.KickedCount = v }
func (m *TLChannelFull114) GetKickedCount() int32 { return m.Data2.KickedCount }

func (m *TLChannelFull114) SetBannedCount(v int32) { m.Data2.BannedCount = v }
func (m *TLChannelFull114) GetBannedCount() int32 { return m.Data2.BannedCount }

func (m *TLChannelFull114) SetOnlineCount(v int32) { m.Data2.OnlineCount = v }
func (m *TLChannelFull114) GetOnlineCount() int32 { return m.Data2.OnlineCount }

func (m *TLChannelFull114) SetReadInboxMaxId(v int32) { m.Data2.ReadInboxMaxId = v }
func (m *TLChannelFull114) GetReadInboxMaxId() int32 { return m.Data2.ReadInboxMaxId }

func (m *TLChannelFull114) SetReadOutboxMaxId(v int32) { m.Data2.ReadOutboxMaxId = v }
func (m *TLChannelFull114) GetReadOutboxMaxId() int32 { return m.Data2.ReadOutboxMaxId }

func (m *TLChannelFull114) SetUnreadCount(v int32) { m.Data2.UnreadCount = v }
func (m *TLChannelFull114) GetUnreadCount() int32 { return m.Data2.UnreadCount }

func (m *TLChannelFull114) SetChatPhoto(v *Photo) { m.Data2.ChatPhoto = v }
func (m *TLChannelFull114) GetChatPhoto() *Photo { return m.Data2.ChatPhoto }

func (m *TLChannelFull114) SetNotifySettings(v *PeerNotifySettings) { m.Data2.NotifySettings = v }
func (m *TLChannelFull114) GetNotifySettings() *PeerNotifySettings { return m.Data2.NotifySettings }

func (m *TLChannelFull114) SetExportedInvite(v *ExportedChatInvite) { m.Data2.ExportedInvite = v }
func (m *TLChannelFull114) GetExportedInvite() *ExportedChatInvite { return m.Data2.ExportedInvite }

func (m *TLChannelFull114) SetBotInfo(v []*BotInfo) { m.Data2.BotInfo = v }
func (m *TLChannelFull114) GetBotInfo() []*BotInfo { return m.Data2.BotInfo }

func (m *TLChannelFull114) SetMigratedFromChatId(v int32) { m.Data2.MigratedFromChatId = v }
func (m *TLChannelFull114) GetMigratedFromChatId() int32 { return m.Data2.MigratedFromChatId }

func (m *TLChannelFull114) SetMigratedFromMaxId(v int32) { m.Data2.MigratedFromMaxId = v }
func (m *TLChannelFull114) GetMigratedFromMaxId() int32 { return m.Data2.MigratedFromMaxId }

func (m *TLChannelFull114) SetPinnedMsgId(v int32) { m.Data2.PinnedMsgId = v }
func (m *TLChannelFull114) GetPinnedMsgId() int32 { return m.Data2.PinnedMsgId }

func (m *TLChannelFull114) SetStickerset(v *StickerSet) { m.Data2.Stickerset = v }
func (m *TLChannelFull114) GetStickerset() *StickerSet { return m.Data2.Stickerset }

func (m *TLChannelFull114) SetAvailableMinId(v int32) { m.Data2.AvailableMinId = v }
func (m *TLChannelFull114) GetAvailableMinId() int32 { return m.Data2.AvailableMinId }

func (m *TLChannelFull114) SetFolderId(v int32) { m.Data2.FolderId = v }
func (m *TLChannelFull114) GetFolderId() int32 { return m.Data2.FolderId }

func (m *TLChannelFull114) SetLinkedChatId(v int32) { m.Data2.LinkedChatId = v }
func (m *TLChannelFull114) GetLinkedChatId() int32 { return m.Data2.LinkedChatId }

func (m *TLChannelFull114) SetLocation(v *ChannelLocation) { m.Data2.Location = v }
func (m *TLChannelFull114) GetLocation() *ChannelLocation { return m.Data2.Location }

func (m *TLChannelFull114) SetSlowmodeSeconds(v int32) { m.Data2.SlowmodeSeconds = v }
func (m *TLChannelFull114) GetSlowmodeSeconds() int32 { return m.Data2.SlowmodeSeconds }

func (m *TLChannelFull114) SetSlowmodeNextSendDate(v int32) { m.Data2.SlowmodeNextSendDate = v }
func (m *TLChannelFull114) GetSlowmodeNextSendDate() int32 { return m.Data2.SlowmodeNextSendDate }

func (m *TLChannelFull114) SetStatsDc(v int32) { m.Data2.StatsDc = v }
func (m *TLChannelFull114) GetStatsDc() int32 { return m.Data2.StatsDc }

func (m *TLChannelFull114) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLChannelFull114) GetPts() int32 { return m.Data2.Pts }


func NewTLChannelFull114() * TLChannelFull114 {
    return &TLChannelFull114{ Data2: &ChatFull_Data{} }
}

func (m* TLChannelFull114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelFull114))

    // flags
    var flags uint32 = 0
    if m.GetCanViewParticipants() == true { flags |= 1 << 3 }
    if m.GetCanSetUsername() == true { flags |= 1 << 6 }
    if m.GetCanSetStickers() == true { flags |= 1 << 7 }
    if m.GetHiddenPrehistory() == true { flags |= 1 << 10 }
    if m.GetCanViewStats() == true { flags |= 1 << 12 }
    if m.GetCanSetLocation() == true { flags |= 1 << 16 }
    if m.GetHasScheduled() == true { flags |= 1 << 19 }
    if m.GetParticipantsCount() != 0 { flags |= 1 << 0 }
    if m.GetAdminsCount() != 0 { flags |= 1 << 1 }
    if m.GetKickedCount() != 0 { flags |= 1 << 2 }
    if m.GetBannedCount() != 0 { flags |= 1 << 2 }
    if m.GetOnlineCount() != 0 { flags |= 1 << 13 }
    if m.GetMigratedFromChatId() != 0 { flags |= 1 << 4 }
    if m.GetMigratedFromMaxId() != 0 { flags |= 1 << 4 }
    if m.GetPinnedMsgId() != 0 { flags |= 1 << 5 }
    if m.GetStickerset() != nil { flags |= 1 << 8 }
    if m.GetAvailableMinId() != 0 { flags |= 1 << 9 }
    if m.GetFolderId() != 0 { flags |= 1 << 11 }
    if m.GetLinkedChatId() != 0 { flags |= 1 << 14 }
    if m.GetLocation() != nil { flags |= 1 << 15 }
    if m.GetSlowmodeSeconds() != 0 { flags |= 1 << 17 }
    if m.GetSlowmodeNextSendDate() != 0 { flags |= 1 << 18 }
    if m.GetStatsDc() != 0 { flags |= 1 << 12 }
	x.UInt(flags)

    
    
    
    
    
    
    
    x.Int(m.GetId())
    x.String(m.GetAbout())
    if (flags & (1 << 0)) != 0 { x.Int(m.GetParticipantsCount()) }
    if (flags & (1 << 1)) != 0 { x.Int(m.GetAdminsCount()) }
    if (flags & (1 << 2)) != 0 { x.Int(m.GetKickedCount()) }
    if (flags & (1 << 2)) != 0 { x.Int(m.GetBannedCount()) }
    if (flags & (1 << 13)) != 0 { x.Int(m.GetOnlineCount()) }
    x.Int(m.GetReadInboxMaxId())
    x.Int(m.GetReadOutboxMaxId())
    x.Int(m.GetUnreadCount())
    x.Bytes(m.GetChatPhoto().Encode())
    x.Bytes(m.GetNotifySettings().Encode())
    x.Bytes(m.GetExportedInvite().Encode())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetBotInfo())))
for _, v := range m.GetBotInfo() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    if (flags & (1 << 4)) != 0 { x.Int(m.GetMigratedFromChatId()) }
    if (flags & (1 << 4)) != 0 { x.Int(m.GetMigratedFromMaxId()) }
    if (flags & (1 << 5)) != 0 { x.Int(m.GetPinnedMsgId()) }
    if (flags & (1 << 8)) != 0 { x.Bytes(m.GetStickerset().Encode()) }
    if (flags & (1 << 9)) != 0 { x.Int(m.GetAvailableMinId()) }
    if (flags & (1 << 11)) != 0 { x.Int(m.GetFolderId()) }
    if (flags & (1 << 14)) != 0 { x.Int(m.GetLinkedChatId()) }
    if (flags & (1 << 15)) != 0 { x.Bytes(m.GetLocation().Encode()) }
    if (flags & (1 << 17)) != 0 { x.Int(m.GetSlowmodeSeconds()) }
    if (flags & (1 << 18)) != 0 { x.Int(m.GetSlowmodeNextSendDate()) }
    if (flags & (1 << 12)) != 0 { x.Int(m.GetStatsDc()) }
    x.Int(m.GetPts())

    return x.buf
}

func (m* TLChannelFull114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 3)) != 0 { m.SetCanViewParticipants(true) }
    if (flags & (1 << 6)) != 0 { m.SetCanSetUsername(true) }
    if (flags & (1 << 7)) != 0 { m.SetCanSetStickers(true) }
    if (flags & (1 << 10)) != 0 { m.SetHiddenPrehistory(true) }
    if (flags & (1 << 12)) != 0 { m.SetCanViewStats(true) }
    if (flags & (1 << 16)) != 0 { m.SetCanSetLocation(true) }
    if (flags & (1 << 19)) != 0 { m.SetHasScheduled(true) }
    m.SetId(dbuf.Int())
    m.SetAbout(dbuf.String())
    if (flags & (1 << 0)) != 0 { m.SetParticipantsCount(dbuf.Int()) }
    if (flags & (1 << 1)) != 0 { m.SetAdminsCount(dbuf.Int()) }
    if (flags & (1 << 2)) != 0 { m.SetKickedCount(dbuf.Int()) }
    if (flags & (1 << 2)) != 0 { m.SetBannedCount(dbuf.Int()) }
    if (flags & (1 << 13)) != 0 { m.SetOnlineCount(dbuf.Int()) }
    m.SetReadInboxMaxId(dbuf.Int())
    m.SetReadOutboxMaxId(dbuf.Int())
    m.SetUnreadCount(dbuf.Int())
    m19 := &Photo{}
    m19.Decode(dbuf)
    m.SetChatPhoto(m19)
    m20 := &PeerNotifySettings{}
    m20.Decode(dbuf)
    m.SetNotifySettings(m20)
    m21 := &ExportedChatInvite{}
    m21.Decode(dbuf)
    m.SetExportedInvite(m21)
    c22 := dbuf.Int()
if c22 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 22, c22)
	return dbuf.err
}
l22 := dbuf.Int()
v22 := make([]*BotInfo, l22)
for i := int32(0); i < l22; i++ {
	v22[i] = &BotInfo{}
	v22[i].Decode(dbuf)
}
m.SetBotInfo(v22)

    if (flags & (1 << 4)) != 0 { m.SetMigratedFromChatId(dbuf.Int()) }
    if (flags & (1 << 4)) != 0 { m.SetMigratedFromMaxId(dbuf.Int()) }
    if (flags & (1 << 5)) != 0 { m.SetPinnedMsgId(dbuf.Int()) }
    if (flags & (1 << 8)) != 0 {
 m26 := &StickerSet{}
    m26.Decode(dbuf)
    m.SetStickerset(m26) 
}
    if (flags & (1 << 9)) != 0 { m.SetAvailableMinId(dbuf.Int()) }
    if (flags & (1 << 11)) != 0 { m.SetFolderId(dbuf.Int()) }
    if (flags & (1 << 14)) != 0 { m.SetLinkedChatId(dbuf.Int()) }
    if (flags & (1 << 15)) != 0 {
 m30 := &ChannelLocation{}
    m30.Decode(dbuf)
    m.SetLocation(m30) 
}
    if (flags & (1 << 17)) != 0 { m.SetSlowmodeSeconds(dbuf.Int()) }
    if (flags & (1 << 18)) != 0 { m.SetSlowmodeNextSendDate(dbuf.Int()) }
    if (flags & (1 << 12)) != 0 { m.SetStatsDc(dbuf.Int()) }
    m.SetPts(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Updates_ChannelDifference <--
//  + TL_UpdatesChannelDifferenceEmpty
//  + TL_UpdatesChannelDifferenceTooLong
//  + TL_UpdatesChannelDifference
//  + TL_UpdatesChannelDifferenceTooLong114
//

func (m *Updates_ChannelDifference) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_updates_channelDifferenceEmpty:
        t := m.To_UpdatesChannelDifferenceEmpty()
        return t.Encode()
    case TLConstructor_CRC32_updates_channelDifferenceTooLong:
        t := m.To_UpdatesChannelDifferenceTooLong()
        return t.Encode()
    case TLConstructor_CRC32_updates_channelDifference:
        t := m.To_UpdatesChannelDifference()
        return t.Encode()
    case TLConstructor_CRC32_updates_channelDifferenceTooLong114:
        t := m.To_UpdatesChannelDifferenceTooLong114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Updates_ChannelDifference) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_updates_channelDifferenceEmpty:
        m2 := &TLUpdatesChannelDifferenceEmpty{&Updates_ChannelDifference_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updates_channelDifferenceTooLong:
        m2 := &TLUpdatesChannelDifferenceTooLong{&Updates_ChannelDifference_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updates_channelDifference:
        m2 := &TLUpdatesChannelDifference{&Updates_ChannelDifference_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_updates_channelDifferenceTooLong114:
        m2 := &TLUpdatesChannelDifferenceTooLong114{&Updates_ChannelDifference_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// updates.channelDifferenceEmpty#3e11affb flags:# final:flags.0?true pts:int timeout:flags.1?int = updates.ChannelDifference;
func (m *Updates_ChannelDifference) To_UpdatesChannelDifferenceEmpty() *TLUpdatesChannelDifferenceEmpty {
    return &TLUpdatesChannelDifferenceEmpty{
        Data2: m.Data2,
    }
}

// updates.channelDifferenceTooLong#6a9d7b35 flags:# final:flags.0?true pts:int timeout:flags.1?int top_message:int read_inbox_max_id:int read_outbox_max_id:int unread_count:int unread_mentions_count:int messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = updates.ChannelDifference;
func (m *Updates_ChannelDifference) To_UpdatesChannelDifferenceTooLong() *TLUpdatesChannelDifferenceTooLong {
    return &TLUpdatesChannelDifferenceTooLong{
        Data2: m.Data2,
    }
}

// updates.channelDifference#2064674e flags:# final:flags.0?true pts:int timeout:flags.1?int new_messages:Vector<Message> other_updates:Vector<Update> chats:Vector<Chat> users:Vector<User> = updates.ChannelDifference;
func (m *Updates_ChannelDifference) To_UpdatesChannelDifference() *TLUpdatesChannelDifference {
    return &TLUpdatesChannelDifference{
        Data2: m.Data2,
    }
}

// updates.channelDifferenceTooLong#a4bcc6fe flags:# final:flags.0?true timeout:flags.1?int dialog:Dialog messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = updates.ChannelDifference;
func (m *Updates_ChannelDifference) To_UpdatesChannelDifferenceTooLong114() *TLUpdatesChannelDifferenceTooLong114 {
    return &TLUpdatesChannelDifferenceTooLong114{
        Data2: m.Data2,
    }
}



// updates.channelDifferenceEmpty#3e11affb flags:# final:flags.0?true pts:int timeout:flags.1?int = updates.ChannelDifference;
func (m *TLUpdatesChannelDifferenceEmpty) To_Updates_ChannelDifference() *Updates_ChannelDifference {
    return &Updates_ChannelDifference{
        Constructor: TLConstructor_CRC32_updates_channelDifferenceEmpty,
        Data2: m.Data2,
    }
}


func (m *TLUpdatesChannelDifferenceEmpty) SetFinal(v bool) { m.Data2.Final = v }
func (m *TLUpdatesChannelDifferenceEmpty) GetFinal() bool { return m.Data2.Final }

func (m *TLUpdatesChannelDifferenceEmpty) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdatesChannelDifferenceEmpty) GetPts() int32 { return m.Data2.Pts }

func (m *TLUpdatesChannelDifferenceEmpty) SetTimeout(v int32) { m.Data2.Timeout = v }
func (m *TLUpdatesChannelDifferenceEmpty) GetTimeout() int32 { return m.Data2.Timeout }


func NewTLUpdatesChannelDifferenceEmpty() * TLUpdatesChannelDifferenceEmpty {
    return &TLUpdatesChannelDifferenceEmpty{ Data2: &Updates_ChannelDifference_Data{} }
}

func (m* TLUpdatesChannelDifferenceEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updates_channelDifferenceEmpty))

    // flags
    var flags uint32 = 0
    if m.GetFinal() == true { flags |= 1 << 0 }
    if m.GetTimeout() != 0 { flags |= 1 << 1 }
	x.UInt(flags)

    
    x.Int(m.GetPts())
    if (flags & (1 << 1)) != 0 { x.Int(m.GetTimeout()) }

    return x.buf
}

func (m* TLUpdatesChannelDifferenceEmpty) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetFinal(true) }
    m.SetPts(dbuf.Int())
    if (flags & (1 << 1)) != 0 { m.SetTimeout(dbuf.Int()) }

    return dbuf.err
}
// updates.channelDifferenceTooLong#6a9d7b35 flags:# final:flags.0?true pts:int timeout:flags.1?int top_message:int read_inbox_max_id:int read_outbox_max_id:int unread_count:int unread_mentions_count:int messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = updates.ChannelDifference;
func (m *TLUpdatesChannelDifferenceTooLong) To_Updates_ChannelDifference() *Updates_ChannelDifference {
    return &Updates_ChannelDifference{
        Constructor: TLConstructor_CRC32_updates_channelDifferenceTooLong,
        Data2: m.Data2,
    }
}


func (m *TLUpdatesChannelDifferenceTooLong) SetFinal(v bool) { m.Data2.Final = v }
func (m *TLUpdatesChannelDifferenceTooLong) GetFinal() bool { return m.Data2.Final }

func (m *TLUpdatesChannelDifferenceTooLong) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdatesChannelDifferenceTooLong) GetPts() int32 { return m.Data2.Pts }

func (m *TLUpdatesChannelDifferenceTooLong) SetTimeout(v int32) { m.Data2.Timeout = v }
func (m *TLUpdatesChannelDifferenceTooLong) GetTimeout() int32 { return m.Data2.Timeout }

func (m *TLUpdatesChannelDifferenceTooLong) SetTopMessage(v int32) { m.Data2.TopMessage = v }
func (m *TLUpdatesChannelDifferenceTooLong) GetTopMessage() int32 { return m.Data2.TopMessage }

func (m *TLUpdatesChannelDifferenceTooLong) SetReadInboxMaxId(v int32) { m.Data2.ReadInboxMaxId = v }
func (m *TLUpdatesChannelDifferenceTooLong) GetReadInboxMaxId() int32 { return m.Data2.ReadInboxMaxId }

func (m *TLUpdatesChannelDifferenceTooLong) SetReadOutboxMaxId(v int32) { m.Data2.ReadOutboxMaxId = v }
func (m *TLUpdatesChannelDifferenceTooLong) GetReadOutboxMaxId() int32 { return m.Data2.ReadOutboxMaxId }

func (m *TLUpdatesChannelDifferenceTooLong) SetUnreadCount(v int32) { m.Data2.UnreadCount = v }
func (m *TLUpdatesChannelDifferenceTooLong) GetUnreadCount() int32 { return m.Data2.UnreadCount }

func (m *TLUpdatesChannelDifferenceTooLong) SetUnreadMentionsCount(v int32) { m.Data2.UnreadMentionsCount = v }
func (m *TLUpdatesChannelDifferenceTooLong) GetUnreadMentionsCount() int32 { return m.Data2.UnreadMentionsCount }

func (m *TLUpdatesChannelDifferenceTooLong) SetMessages(v []*Message) { m.Data2.Messages = v }
func (m *TLUpdatesChannelDifferenceTooLong) GetMessages() []*Message { return m.Data2.Messages }

func (m *TLUpdatesChannelDifferenceTooLong) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLUpdatesChannelDifferenceTooLong) GetChats() []*Chat { return m.Data2.Chats }

func (m *TLUpdatesChannelDifferenceTooLong) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLUpdatesChannelDifferenceTooLong) GetUsers() []*User { return m.Data2.Users }


func NewTLUpdatesChannelDifferenceTooLong() * TLUpdatesChannelDifferenceTooLong {
    return &TLUpdatesChannelDifferenceTooLong{ Data2: &Updates_ChannelDifference_Data{} }
}

func (m* TLUpdatesChannelDifferenceTooLong) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updates_channelDifferenceTooLong))

    // flags
    var flags uint32 = 0
    if m.GetFinal() == true { flags |= 1 << 0 }
    if m.GetTimeout() != 0 { flags |= 1 << 1 }
	x.UInt(flags)

    
    x.Int(m.GetPts())
    if (flags & (1 << 1)) != 0 { x.Int(m.GetTimeout()) }
    x.Int(m.GetTopMessage())
    x.Int(m.GetReadInboxMaxId())
    x.Int(m.GetReadOutboxMaxId())
    x.Int(m.GetUnreadCount())
    x.Int(m.GetUnreadMentionsCount())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetMessages())))
for _, v := range m.GetMessages() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetChats())))
for _, v := range m.GetChats() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLUpdatesChannelDifferenceTooLong) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetFinal(true) }
    m.SetPts(dbuf.Int())
    if (flags & (1 << 1)) != 0 { m.SetTimeout(dbuf.Int()) }
    m.SetTopMessage(dbuf.Int())
    m.SetReadInboxMaxId(dbuf.Int())
    m.SetReadOutboxMaxId(dbuf.Int())
    m.SetUnreadCount(dbuf.Int())
    m.SetUnreadMentionsCount(dbuf.Int())
    c10 := dbuf.Int()
if c10 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 10, c10)
	return dbuf.err
}
l10 := dbuf.Int()
v10 := make([]*Message, l10)
for i := int32(0); i < l10; i++ {
	v10[i] = &Message{}
	v10[i].Decode(dbuf)
}
m.SetMessages(v10)

    c11 := dbuf.Int()
if c11 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 11, c11)
	return dbuf.err
}
l11 := dbuf.Int()
v11 := make([]*Chat, l11)
for i := int32(0); i < l11; i++ {
	v11[i] = &Chat{}
	v11[i].Decode(dbuf)
}
m.SetChats(v11)

    c12 := dbuf.Int()
if c12 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 12, c12)
	return dbuf.err
}
l12 := dbuf.Int()
v12 := make([]*User, l12)
for i := int32(0); i < l12; i++ {
	v12[i] = &User{}
	v12[i].Decode(dbuf)
}
m.SetUsers(v12)


    return dbuf.err
}
// updates.channelDifference#2064674e flags:# final:flags.0?true pts:int timeout:flags.1?int new_messages:Vector<Message> other_updates:Vector<Update> chats:Vector<Chat> users:Vector<User> = updates.ChannelDifference;
func (m *TLUpdatesChannelDifference) To_Updates_ChannelDifference() *Updates_ChannelDifference {
    return &Updates_ChannelDifference{
        Constructor: TLConstructor_CRC32_updates_channelDifference,
        Data2: m.Data2,
    }
}


func (m *TLUpdatesChannelDifference) SetFinal(v bool) { m.Data2.Final = v }
func (m *TLUpdatesChannelDifference) GetFinal() bool { return m.Data2.Final }

func (m *TLUpdatesChannelDifference) SetPts(v int32) { m.Data2.Pts = v }
func (m *TLUpdatesChannelDifference) GetPts() int32 { return m.Data2.Pts }

func (m *TLUpdatesChannelDifference) SetTimeout(v int32) { m.Data2.Timeout = v }
func (m *TLUpdatesChannelDifference) GetTimeout() int32 { return m.Data2.Timeout }

func (m *TLUpdatesChannelDifference) SetNewMessages(v []*Message) { m.Data2.NewMessages = v }
func (m *TLUpdatesChannelDifference) GetNewMessages() []*Message { return m.Data2.NewMessages }

func (m *TLUpdatesChannelDifference) SetOtherUpdates(v []*Update) { m.Data2.OtherUpdates = v }
func (m *TLUpdatesChannelDifference) GetOtherUpdates() []*Update { return m.Data2.OtherUpdates }

func (m *TLUpdatesChannelDifference) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLUpdatesChannelDifference) GetChats() []*Chat { return m.Data2.Chats }

func (m *TLUpdatesChannelDifference) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLUpdatesChannelDifference) GetUsers() []*User { return m.Data2.Users }


func NewTLUpdatesChannelDifference() * TLUpdatesChannelDifference {
    return &TLUpdatesChannelDifference{ Data2: &Updates_ChannelDifference_Data{} }
}

func (m* TLUpdatesChannelDifference) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updates_channelDifference))

    // flags
    var flags uint32 = 0
    if m.GetFinal() == true { flags |= 1 << 0 }
    if m.GetTimeout() != 0 { flags |= 1 << 1 }
	x.UInt(flags)

    
    x.Int(m.GetPts())
    if (flags & (1 << 1)) != 0 { x.Int(m.GetTimeout()) }
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetNewMessages())))
for _, v := range m.GetNewMessages() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetOtherUpdates())))
for _, v := range m.GetOtherUpdates() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetChats())))
for _, v := range m.GetChats() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLUpdatesChannelDifference) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetFinal(true) }
    m.SetPts(dbuf.Int())
    if (flags & (1 << 1)) != 0 { m.SetTimeout(dbuf.Int()) }
    c5 := dbuf.Int()
if c5 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 5, c5)
	return dbuf.err
}
l5 := dbuf.Int()
v5 := make([]*Message, l5)
for i := int32(0); i < l5; i++ {
	v5[i] = &Message{}
	v5[i].Decode(dbuf)
}
m.SetNewMessages(v5)

    c6 := dbuf.Int()
if c6 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 6, c6)
	return dbuf.err
}
l6 := dbuf.Int()
v6 := make([]*Update, l6)
for i := int32(0); i < l6; i++ {
	v6[i] = &Update{}
	v6[i].Decode(dbuf)
}
m.SetOtherUpdates(v6)

    c7 := dbuf.Int()
if c7 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 7, c7)
	return dbuf.err
}
l7 := dbuf.Int()
v7 := make([]*Chat, l7)
for i := int32(0); i < l7; i++ {
	v7[i] = &Chat{}
	v7[i].Decode(dbuf)
}
m.SetChats(v7)

    c8 := dbuf.Int()
if c8 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 8, c8)
	return dbuf.err
}
l8 := dbuf.Int()
v8 := make([]*User, l8)
for i := int32(0); i < l8; i++ {
	v8[i] = &User{}
	v8[i].Decode(dbuf)
}
m.SetUsers(v8)


    return dbuf.err
}
// updates.channelDifferenceTooLong#a4bcc6fe flags:# final:flags.0?true timeout:flags.1?int dialog:Dialog messages:Vector<Message> chats:Vector<Chat> users:Vector<User> = updates.ChannelDifference;
func (m *TLUpdatesChannelDifferenceTooLong114) To_Updates_ChannelDifference() *Updates_ChannelDifference {
    return &Updates_ChannelDifference{
        Constructor: TLConstructor_CRC32_updates_channelDifferenceTooLong114,
        Data2: m.Data2,
    }
}


func (m *TLUpdatesChannelDifferenceTooLong114) SetFinal(v bool) { m.Data2.Final = v }
func (m *TLUpdatesChannelDifferenceTooLong114) GetFinal() bool { return m.Data2.Final }

func (m *TLUpdatesChannelDifferenceTooLong114) SetTimeout(v int32) { m.Data2.Timeout = v }
func (m *TLUpdatesChannelDifferenceTooLong114) GetTimeout() int32 { return m.Data2.Timeout }

func (m *TLUpdatesChannelDifferenceTooLong114) SetDialog(v *Dialog) { m.Data2.Dialog = v }
func (m *TLUpdatesChannelDifferenceTooLong114) GetDialog() *Dialog { return m.Data2.Dialog }

func (m *TLUpdatesChannelDifferenceTooLong114) SetMessages(v []*Message) { m.Data2.Messages = v }
func (m *TLUpdatesChannelDifferenceTooLong114) GetMessages() []*Message { return m.Data2.Messages }

func (m *TLUpdatesChannelDifferenceTooLong114) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLUpdatesChannelDifferenceTooLong114) GetChats() []*Chat { return m.Data2.Chats }

func (m *TLUpdatesChannelDifferenceTooLong114) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLUpdatesChannelDifferenceTooLong114) GetUsers() []*User { return m.Data2.Users }


func NewTLUpdatesChannelDifferenceTooLong114() * TLUpdatesChannelDifferenceTooLong114 {
    return &TLUpdatesChannelDifferenceTooLong114{ Data2: &Updates_ChannelDifference_Data{} }
}

func (m* TLUpdatesChannelDifferenceTooLong114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_updates_channelDifferenceTooLong114))

    // flags
    var flags uint32 = 0
    if m.GetFinal() == true { flags |= 1 << 0 }
    if m.GetTimeout() != 0 { flags |= 1 << 1 }
	x.UInt(flags)

    
    if (flags & (1 << 1)) != 0 { x.Int(m.GetTimeout()) }
    x.Bytes(m.GetDialog().Encode())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetMessages())))
for _, v := range m.GetMessages() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetChats())))
for _, v := range m.GetChats() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLUpdatesChannelDifferenceTooLong114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetFinal(true) }
    if (flags & (1 << 1)) != 0 { m.SetTimeout(dbuf.Int()) }
    m4 := &Dialog{}
    m4.Decode(dbuf)
    m.SetDialog(m4)
    c5 := dbuf.Int()
if c5 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 5, c5)
	return dbuf.err
}
l5 := dbuf.Int()
v5 := make([]*Message, l5)
for i := int32(0); i < l5; i++ {
	v5[i] = &Message{}
	v5[i].Decode(dbuf)
}
m.SetMessages(v5)

    c6 := dbuf.Int()
if c6 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 6, c6)
	return dbuf.err
}
l6 := dbuf.Int()
v6 := make([]*Chat, l6)
for i := int32(0); i < l6; i++ {
	v6[i] = &Chat{}
	v6[i].Decode(dbuf)
}
m.SetChats(v6)

    c7 := dbuf.Int()
if c7 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 7, c7)
	return dbuf.err
}
l7 := dbuf.Int()
v7 := make([]*User, l7)
for i := int32(0); i < l7; i++ {
	v7[i] = &User{}
	v7[i].Decode(dbuf)
}
m.SetUsers(v7)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// PaymentRequestedInfo <--
//  + TL_PaymentRequestedInfo
//

func (m *PaymentRequestedInfo) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_paymentRequestedInfo:
        t := m.To_PaymentRequestedInfo()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *PaymentRequestedInfo) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_paymentRequestedInfo:
        m2 := &TLPaymentRequestedInfo{&PaymentRequestedInfo_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// paymentRequestedInfo#909c3f94 flags:# name:flags.0?string phone:flags.1?string email:flags.2?string shipping_address:flags.3?PostAddress = PaymentRequestedInfo;
func (m *PaymentRequestedInfo) To_PaymentRequestedInfo() *TLPaymentRequestedInfo {
    return &TLPaymentRequestedInfo{
        Data2: m.Data2,
    }
}



// paymentRequestedInfo#909c3f94 flags:# name:flags.0?string phone:flags.1?string email:flags.2?string shipping_address:flags.3?PostAddress = PaymentRequestedInfo;
func (m *TLPaymentRequestedInfo) To_PaymentRequestedInfo() *PaymentRequestedInfo {
    return &PaymentRequestedInfo{
        Constructor: TLConstructor_CRC32_paymentRequestedInfo,
        Data2: m.Data2,
    }
}


func (m *TLPaymentRequestedInfo) SetName(v string) { m.Data2.Name = v }
func (m *TLPaymentRequestedInfo) GetName() string { return m.Data2.Name }

func (m *TLPaymentRequestedInfo) SetPhone(v string) { m.Data2.Phone = v }
func (m *TLPaymentRequestedInfo) GetPhone() string { return m.Data2.Phone }

func (m *TLPaymentRequestedInfo) SetEmail(v string) { m.Data2.Email = v }
func (m *TLPaymentRequestedInfo) GetEmail() string { return m.Data2.Email }

func (m *TLPaymentRequestedInfo) SetShippingAddress(v *PostAddress) { m.Data2.ShippingAddress = v }
func (m *TLPaymentRequestedInfo) GetShippingAddress() *PostAddress { return m.Data2.ShippingAddress }


func NewTLPaymentRequestedInfo() * TLPaymentRequestedInfo {
    return &TLPaymentRequestedInfo{ Data2: &PaymentRequestedInfo_Data{} }
}

func (m* TLPaymentRequestedInfo) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_paymentRequestedInfo))

    // flags
    var flags uint32 = 0
    if m.GetName() != "" { flags |= 1 << 0 }
    if m.GetPhone() != "" { flags |= 1 << 1 }
    if m.GetEmail() != "" { flags |= 1 << 2 }
    if m.GetShippingAddress() != nil { flags |= 1 << 3 }
	x.UInt(flags)

    if (flags & (1 << 0)) != 0 { x.String(m.GetName()) }
    if (flags & (1 << 1)) != 0 { x.String(m.GetPhone()) }
    if (flags & (1 << 2)) != 0 { x.String(m.GetEmail()) }
    if (flags & (1 << 3)) != 0 { x.Bytes(m.GetShippingAddress().Encode()) }

    return x.buf
}

func (m* TLPaymentRequestedInfo) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetName(dbuf.String()) }
    if (flags & (1 << 1)) != 0 { m.SetPhone(dbuf.String()) }
    if (flags & (1 << 2)) != 0 { m.SetEmail(dbuf.String()) }
    if (flags & (1 << 3)) != 0 {
 m5 := &PostAddress{}
    m5.Decode(dbuf)
    m.SetShippingAddress(m5) 
}

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// CdnPublicKey <--
//  + TL_CdnPublicKey
//

func (m *CdnPublicKey) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_cdnPublicKey:
        t := m.To_CdnPublicKey()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *CdnPublicKey) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_cdnPublicKey:
        m2 := &TLCdnPublicKey{&CdnPublicKey_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// cdnPublicKey#c982eaba dc_id:int public_key:string = CdnPublicKey;
func (m *CdnPublicKey) To_CdnPublicKey() *TLCdnPublicKey {
    return &TLCdnPublicKey{
        Data2: m.Data2,
    }
}



// cdnPublicKey#c982eaba dc_id:int public_key:string = CdnPublicKey;
func (m *TLCdnPublicKey) To_CdnPublicKey() *CdnPublicKey {
    return &CdnPublicKey{
        Constructor: TLConstructor_CRC32_cdnPublicKey,
        Data2: m.Data2,
    }
}


func (m *TLCdnPublicKey) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLCdnPublicKey) GetDcId() int32 { return m.Data2.DcId }

func (m *TLCdnPublicKey) SetPublicKey(v string) { m.Data2.PublicKey = v }
func (m *TLCdnPublicKey) GetPublicKey() string { return m.Data2.PublicKey }


func NewTLCdnPublicKey() * TLCdnPublicKey {
    return &TLCdnPublicKey{ Data2: &CdnPublicKey_Data{} }
}

func (m* TLCdnPublicKey) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_cdnPublicKey))

    x.Int(m.GetDcId())
    x.String(m.GetPublicKey())

    return x.buf
}

func (m* TLCdnPublicKey) Decode(dbuf *DecodeBuf) error {
    m.SetDcId(dbuf.Int())
    m.SetPublicKey(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// PollResults <--
//  + TL_PollResults
//

func (m *PollResults) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_pollResults:
        t := m.To_PollResults()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *PollResults) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_pollResults:
        m2 := &TLPollResults{&PollResults_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// pollResults#badcc1a3 flags:# min:flags.0?true results:flags.1?Vector<PollAnswerVoters> total_voters:flags.2?int recent_voters:flags.3?Vector<int> solution:flags.4?string solution_entities:flags.4?Vector<MessageEntity> = PollResults;
func (m *PollResults) To_PollResults() *TLPollResults {
    return &TLPollResults{
        Data2: m.Data2,
    }
}



// pollResults#badcc1a3 flags:# min:flags.0?true results:flags.1?Vector<PollAnswerVoters> total_voters:flags.2?int recent_voters:flags.3?Vector<int> solution:flags.4?string solution_entities:flags.4?Vector<MessageEntity> = PollResults;
func (m *TLPollResults) To_PollResults() *PollResults {
    return &PollResults{
        Constructor: TLConstructor_CRC32_pollResults,
        Data2: m.Data2,
    }
}


func (m *TLPollResults) SetMin(v bool) { m.Data2.Min = v }
func (m *TLPollResults) GetMin() bool { return m.Data2.Min }

func (m *TLPollResults) SetResults(v []*PollAnswerVoters) { m.Data2.Results = v }
func (m *TLPollResults) GetResults() []*PollAnswerVoters { return m.Data2.Results }

func (m *TLPollResults) SetTotalVoters(v int32) { m.Data2.TotalVoters = v }
func (m *TLPollResults) GetTotalVoters() int32 { return m.Data2.TotalVoters }

func (m *TLPollResults) SetRecentVoters(v []int32) { m.Data2.RecentVoters = v }
func (m *TLPollResults) GetRecentVoters() []int32 { return m.Data2.RecentVoters }

func (m *TLPollResults) SetSolution(v string) { m.Data2.Solution = v }
func (m *TLPollResults) GetSolution() string { return m.Data2.Solution }

func (m *TLPollResults) SetSolutionEntities(v []*MessageEntity) { m.Data2.SolutionEntities = v }
func (m *TLPollResults) GetSolutionEntities() []*MessageEntity { return m.Data2.SolutionEntities }


func NewTLPollResults() * TLPollResults {
    return &TLPollResults{ Data2: &PollResults_Data{} }
}

func (m* TLPollResults) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pollResults))

    // flags
    var flags uint32 = 0
    if m.GetMin() == true { flags |= 1 << 0 }
    if m.GetResults() != nil { flags |= 1 << 1 }
    if m.GetTotalVoters() != 0 { flags |= 1 << 2 }
    if m.GetRecentVoters() != nil { flags |= 1 << 3 }
    if m.GetSolution() != "" { flags |= 1 << 4 }
    if m.GetSolutionEntities() != nil { flags |= 1 << 4 }
	x.UInt(flags)

    
    if (flags & (1 << 1)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetResults())))
for _, v := range m.GetResults() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}
    if (flags & (1 << 2)) != 0 { x.Int(m.GetTotalVoters()) }
    if (flags & (1 << 3)) != 0 {
 x.VectorInt(m.GetRecentVoters())
 
}
    if (flags & (1 << 4)) != 0 { x.String(m.GetSolution()) }
    if (flags & (1 << 4)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetSolutionEntities())))
for _, v := range m.GetSolutionEntities() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}

    return x.buf
}

func (m* TLPollResults) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetMin(true) }
    if (flags & (1 << 1)) != 0 {
 c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*PollAnswerVoters, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &PollAnswerVoters{}
	v3[i].Decode(dbuf)
}
m.SetResults(v3)
 
}
    if (flags & (1 << 2)) != 0 { m.SetTotalVoters(dbuf.Int()) }
    if (flags & (1 << 3)) != 0 {
 m.SetRecentVoters(dbuf.VectorInt()) 
}
    if (flags & (1 << 4)) != 0 { m.SetSolution(dbuf.String()) }
    if (flags & (1 << 4)) != 0 {
 c7 := dbuf.Int()
if c7 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 7, c7)
	return dbuf.err
}
l7 := dbuf.Int()
v7 := make([]*MessageEntity, l7)
for i := int32(0); i < l7; i++ {
	v7[i] = &MessageEntity{}
	v7[i].Decode(dbuf)
}
m.SetSolutionEntities(v7)
 
}

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// GlobalPrivacySettings <--
//  + TL_GlobalPrivacySettings
//

func (m *GlobalPrivacySettings) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_globalPrivacySettings:
        t := m.To_GlobalPrivacySettings()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *GlobalPrivacySettings) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_globalPrivacySettings:
        m2 := &TLGlobalPrivacySettings{&GlobalPrivacySettings_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// globalPrivacySettings#bea2f424 flags:# archive_and_mute_new_noncontact_peers:flags.0?Bool = GlobalPrivacySettings;
func (m *GlobalPrivacySettings) To_GlobalPrivacySettings() *TLGlobalPrivacySettings {
    return &TLGlobalPrivacySettings{
        Data2: m.Data2,
    }
}



// globalPrivacySettings#bea2f424 flags:# archive_and_mute_new_noncontact_peers:flags.0?Bool = GlobalPrivacySettings;
func (m *TLGlobalPrivacySettings) To_GlobalPrivacySettings() *GlobalPrivacySettings {
    return &GlobalPrivacySettings{
        Constructor: TLConstructor_CRC32_globalPrivacySettings,
        Data2: m.Data2,
    }
}


func (m *TLGlobalPrivacySettings) SetArchiveAndMuteNewNoncontactPeers(v *Bool) { m.Data2.ArchiveAndMuteNewNoncontactPeers = v }
func (m *TLGlobalPrivacySettings) GetArchiveAndMuteNewNoncontactPeers() *Bool { return m.Data2.ArchiveAndMuteNewNoncontactPeers }


func NewTLGlobalPrivacySettings() * TLGlobalPrivacySettings {
    return &TLGlobalPrivacySettings{ Data2: &GlobalPrivacySettings_Data{} }
}

func (m* TLGlobalPrivacySettings) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_globalPrivacySettings))

    // flags
    var flags uint32 = 0
    if m.GetArchiveAndMuteNewNoncontactPeers() != nil { flags |= 1 << 0 }
	x.UInt(flags)

    if (flags & (1 << 0)) != 0 { x.Bytes(m.GetArchiveAndMuteNewNoncontactPeers().Encode()) }

    return x.buf
}

func (m* TLGlobalPrivacySettings) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 {
 m2 := &Bool{}
    m2.Decode(dbuf)
    m.SetArchiveAndMuteNewNoncontactPeers(m2) 
}

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// PageListItem <--
//  + TL_PageListItemText
//  + TL_PageListItemBlocks
//

func (m *PageListItem) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_pageListItemText:
        t := m.To_PageListItemText()
        return t.Encode()
    case TLConstructor_CRC32_pageListItemBlocks:
        t := m.To_PageListItemBlocks()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *PageListItem) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_pageListItemText:
        m2 := &TLPageListItemText{&PageListItem_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageListItemBlocks:
        m2 := &TLPageListItemBlocks{&PageListItem_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// pageListItemText#b92fb6cd text:RichText = PageListItem;
func (m *PageListItem) To_PageListItemText() *TLPageListItemText {
    return &TLPageListItemText{
        Data2: m.Data2,
    }
}

// pageListItemBlocks#25e073fc blocks:Vector<PageBlock> = PageListItem;
func (m *PageListItem) To_PageListItemBlocks() *TLPageListItemBlocks {
    return &TLPageListItemBlocks{
        Data2: m.Data2,
    }
}



// pageListItemText#b92fb6cd text:RichText = PageListItem;
func (m *TLPageListItemText) To_PageListItem() *PageListItem {
    return &PageListItem{
        Constructor: TLConstructor_CRC32_pageListItemText,
        Data2: m.Data2,
    }
}


func (m *TLPageListItemText) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageListItemText) GetText() *RichText { return m.Data2.Text }


func NewTLPageListItemText() * TLPageListItemText {
    return &TLPageListItemText{ Data2: &PageListItem_Data{} }
}

func (m* TLPageListItemText) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageListItemText))

    x.Bytes(m.GetText().Encode())

    return x.buf
}

func (m* TLPageListItemText) Decode(dbuf *DecodeBuf) error {
    m1 := &RichText{}
    m1.Decode(dbuf)
    m.SetText(m1)

    return dbuf.err
}
// pageListItemBlocks#25e073fc blocks:Vector<PageBlock> = PageListItem;
func (m *TLPageListItemBlocks) To_PageListItem() *PageListItem {
    return &PageListItem{
        Constructor: TLConstructor_CRC32_pageListItemBlocks,
        Data2: m.Data2,
    }
}


func (m *TLPageListItemBlocks) SetBlocks(v []*PageBlock) { m.Data2.Blocks = v }
func (m *TLPageListItemBlocks) GetBlocks() []*PageBlock { return m.Data2.Blocks }


func NewTLPageListItemBlocks() * TLPageListItemBlocks {
    return &TLPageListItemBlocks{ Data2: &PageListItem_Data{} }
}

func (m* TLPageListItemBlocks) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageListItemBlocks))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetBlocks())))
for _, v := range m.GetBlocks() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLPageListItemBlocks) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*PageBlock, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &PageBlock{}
	v1[i].Decode(dbuf)
}
m.SetBlocks(v1)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// KeyboardButtonRow <--
//  + TL_KeyboardButtonRow
//

func (m *KeyboardButtonRow) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_keyboardButtonRow:
        t := m.To_KeyboardButtonRow()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *KeyboardButtonRow) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_keyboardButtonRow:
        m2 := &TLKeyboardButtonRow{&KeyboardButtonRow_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// keyboardButtonRow#77608b83 buttons:Vector<KeyboardButton> = KeyboardButtonRow;
func (m *KeyboardButtonRow) To_KeyboardButtonRow() *TLKeyboardButtonRow {
    return &TLKeyboardButtonRow{
        Data2: m.Data2,
    }
}



// keyboardButtonRow#77608b83 buttons:Vector<KeyboardButton> = KeyboardButtonRow;
func (m *TLKeyboardButtonRow) To_KeyboardButtonRow() *KeyboardButtonRow {
    return &KeyboardButtonRow{
        Constructor: TLConstructor_CRC32_keyboardButtonRow,
        Data2: m.Data2,
    }
}


func (m *TLKeyboardButtonRow) SetButtons(v []*KeyboardButton) { m.Data2.Buttons = v }
func (m *TLKeyboardButtonRow) GetButtons() []*KeyboardButton { return m.Data2.Buttons }


func NewTLKeyboardButtonRow() * TLKeyboardButtonRow {
    return &TLKeyboardButtonRow{ Data2: &KeyboardButtonRow_Data{} }
}

func (m* TLKeyboardButtonRow) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_keyboardButtonRow))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetButtons())))
for _, v := range m.GetButtons() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLKeyboardButtonRow) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*KeyboardButton, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &KeyboardButton{}
	v1[i].Decode(dbuf)
}
m.SetButtons(v1)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Messages_PeerDialogs <--
//  + TL_MessagesPeerDialogs
//

func (m *Messages_PeerDialogs) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messages_peerDialogs:
        t := m.To_MessagesPeerDialogs()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Messages_PeerDialogs) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messages_peerDialogs:
        m2 := &TLMessagesPeerDialogs{&Messages_PeerDialogs_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messages.peerDialogs#3371c354 dialogs:Vector<Dialog> messages:Vector<Message> chats:Vector<Chat> users:Vector<User> state:updates.State = messages.PeerDialogs;
func (m *Messages_PeerDialogs) To_MessagesPeerDialogs() *TLMessagesPeerDialogs {
    return &TLMessagesPeerDialogs{
        Data2: m.Data2,
    }
}



// messages.peerDialogs#3371c354 dialogs:Vector<Dialog> messages:Vector<Message> chats:Vector<Chat> users:Vector<User> state:updates.State = messages.PeerDialogs;
func (m *TLMessagesPeerDialogs) To_Messages_PeerDialogs() *Messages_PeerDialogs {
    return &Messages_PeerDialogs{
        Constructor: TLConstructor_CRC32_messages_peerDialogs,
        Data2: m.Data2,
    }
}


func (m *TLMessagesPeerDialogs) SetDialogs(v []*Dialog) { m.Data2.Dialogs = v }
func (m *TLMessagesPeerDialogs) GetDialogs() []*Dialog { return m.Data2.Dialogs }

func (m *TLMessagesPeerDialogs) SetMessages(v []*Message) { m.Data2.Messages = v }
func (m *TLMessagesPeerDialogs) GetMessages() []*Message { return m.Data2.Messages }

func (m *TLMessagesPeerDialogs) SetChats(v []*Chat) { m.Data2.Chats = v }
func (m *TLMessagesPeerDialogs) GetChats() []*Chat { return m.Data2.Chats }

func (m *TLMessagesPeerDialogs) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesPeerDialogs) GetUsers() []*User { return m.Data2.Users }

func (m *TLMessagesPeerDialogs) SetState(v *Updates_State) { m.Data2.State = v }
func (m *TLMessagesPeerDialogs) GetState() *Updates_State { return m.Data2.State }


func NewTLMessagesPeerDialogs() * TLMessagesPeerDialogs {
    return &TLMessagesPeerDialogs{ Data2: &Messages_PeerDialogs_Data{} }
}

func (m* TLMessagesPeerDialogs) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_peerDialogs))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetDialogs())))
for _, v := range m.GetDialogs() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetMessages())))
for _, v := range m.GetMessages() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetChats())))
for _, v := range m.GetChats() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Bytes(m.GetState().Encode())

    return x.buf
}

func (m* TLMessagesPeerDialogs) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*Dialog, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &Dialog{}
	v1[i].Decode(dbuf)
}
m.SetDialogs(v1)

    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*Message, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &Message{}
	v2[i].Decode(dbuf)
}
m.SetMessages(v2)

    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*Chat, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &Chat{}
	v3[i].Decode(dbuf)
}
m.SetChats(v3)

    c4 := dbuf.Int()
if c4 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
	return dbuf.err
}
l4 := dbuf.Int()
v4 := make([]*User, l4)
for i := int32(0); i < l4; i++ {
	v4[i] = &User{}
	v4[i].Decode(dbuf)
}
m.SetUsers(v4)

    m5 := &Updates_State{}
    m5.Decode(dbuf)
    m.SetState(m5)

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Invoice <--
//  + TL_Invoice
//

func (m *Invoice) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_invoice:
        t := m.To_Invoice()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Invoice) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_invoice:
        m2 := &TLInvoice{&Invoice_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// invoice#c30aa358 flags:# test:flags.0?true name_requested:flags.1?true phone_requested:flags.2?true email_requested:flags.3?true shipping_address_requested:flags.4?true flexible:flags.5?true phone_to_provider:flags.6?true email_to_provider:flags.7?true currency:string prices:Vector<LabeledPrice> = Invoice;
func (m *Invoice) To_Invoice() *TLInvoice {
    return &TLInvoice{
        Data2: m.Data2,
    }
}



// invoice#c30aa358 flags:# test:flags.0?true name_requested:flags.1?true phone_requested:flags.2?true email_requested:flags.3?true shipping_address_requested:flags.4?true flexible:flags.5?true phone_to_provider:flags.6?true email_to_provider:flags.7?true currency:string prices:Vector<LabeledPrice> = Invoice;
func (m *TLInvoice) To_Invoice() *Invoice {
    return &Invoice{
        Constructor: TLConstructor_CRC32_invoice,
        Data2: m.Data2,
    }
}


func (m *TLInvoice) SetTest(v bool) { m.Data2.Test = v }
func (m *TLInvoice) GetTest() bool { return m.Data2.Test }

func (m *TLInvoice) SetNameRequested(v bool) { m.Data2.NameRequested = v }
func (m *TLInvoice) GetNameRequested() bool { return m.Data2.NameRequested }

func (m *TLInvoice) SetPhoneRequested(v bool) { m.Data2.PhoneRequested = v }
func (m *TLInvoice) GetPhoneRequested() bool { return m.Data2.PhoneRequested }

func (m *TLInvoice) SetEmailRequested(v bool) { m.Data2.EmailRequested = v }
func (m *TLInvoice) GetEmailRequested() bool { return m.Data2.EmailRequested }

func (m *TLInvoice) SetShippingAddressRequested(v bool) { m.Data2.ShippingAddressRequested = v }
func (m *TLInvoice) GetShippingAddressRequested() bool { return m.Data2.ShippingAddressRequested }

func (m *TLInvoice) SetFlexible(v bool) { m.Data2.Flexible = v }
func (m *TLInvoice) GetFlexible() bool { return m.Data2.Flexible }

func (m *TLInvoice) SetPhoneToProvider(v bool) { m.Data2.PhoneToProvider = v }
func (m *TLInvoice) GetPhoneToProvider() bool { return m.Data2.PhoneToProvider }

func (m *TLInvoice) SetEmailToProvider(v bool) { m.Data2.EmailToProvider = v }
func (m *TLInvoice) GetEmailToProvider() bool { return m.Data2.EmailToProvider }

func (m *TLInvoice) SetCurrency(v string) { m.Data2.Currency = v }
func (m *TLInvoice) GetCurrency() string { return m.Data2.Currency }

func (m *TLInvoice) SetPrices(v []*LabeledPrice) { m.Data2.Prices = v }
func (m *TLInvoice) GetPrices() []*LabeledPrice { return m.Data2.Prices }


func NewTLInvoice() * TLInvoice {
    return &TLInvoice{ Data2: &Invoice_Data{} }
}

func (m* TLInvoice) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_invoice))

    // flags
    var flags uint32 = 0
    if m.GetTest() == true { flags |= 1 << 0 }
    if m.GetNameRequested() == true { flags |= 1 << 1 }
    if m.GetPhoneRequested() == true { flags |= 1 << 2 }
    if m.GetEmailRequested() == true { flags |= 1 << 3 }
    if m.GetShippingAddressRequested() == true { flags |= 1 << 4 }
    if m.GetFlexible() == true { flags |= 1 << 5 }
    if m.GetPhoneToProvider() == true { flags |= 1 << 6 }
    if m.GetEmailToProvider() == true { flags |= 1 << 7 }
	x.UInt(flags)

    
    
    
    
    
    
    
    
    x.String(m.GetCurrency())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetPrices())))
for _, v := range m.GetPrices() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLInvoice) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetTest(true) }
    if (flags & (1 << 1)) != 0 { m.SetNameRequested(true) }
    if (flags & (1 << 2)) != 0 { m.SetPhoneRequested(true) }
    if (flags & (1 << 3)) != 0 { m.SetEmailRequested(true) }
    if (flags & (1 << 4)) != 0 { m.SetShippingAddressRequested(true) }
    if (flags & (1 << 5)) != 0 { m.SetFlexible(true) }
    if (flags & (1 << 6)) != 0 { m.SetPhoneToProvider(true) }
    if (flags & (1 << 7)) != 0 { m.SetEmailToProvider(true) }
    m.SetCurrency(dbuf.String())
    c11 := dbuf.Int()
if c11 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 11, c11)
	return dbuf.err
}
l11 := dbuf.Int()
v11 := make([]*LabeledPrice, l11)
for i := int32(0); i < l11; i++ {
	v11[i] = &LabeledPrice{}
	v11[i].Decode(dbuf)
}
m.SetPrices(v11)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// EnvelopeItem <--
//  + TL_EnvelopeItem
//

func (m *EnvelopeItem) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_envelopeItem:
        t := m.To_EnvelopeItem()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *EnvelopeItem) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_envelopeItem:
        m2 := &TLEnvelopeItem{&EnvelopeItem_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// envelopeItem#75934550 user_id:int grab_time:int grab_points:int is_best:int = EnvelopeItem;
func (m *EnvelopeItem) To_EnvelopeItem() *TLEnvelopeItem {
    return &TLEnvelopeItem{
        Data2: m.Data2,
    }
}



// envelopeItem#75934550 user_id:int grab_time:int grab_points:int is_best:int = EnvelopeItem;
func (m *TLEnvelopeItem) To_EnvelopeItem() *EnvelopeItem {
    return &EnvelopeItem{
        Constructor: TLConstructor_CRC32_envelopeItem,
        Data2: m.Data2,
    }
}


func (m *TLEnvelopeItem) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLEnvelopeItem) GetUserId() int32 { return m.Data2.UserId }

func (m *TLEnvelopeItem) SetGrabTime(v int32) { m.Data2.GrabTime = v }
func (m *TLEnvelopeItem) GetGrabTime() int32 { return m.Data2.GrabTime }

func (m *TLEnvelopeItem) SetGrabPoints(v int32) { m.Data2.GrabPoints = v }
func (m *TLEnvelopeItem) GetGrabPoints() int32 { return m.Data2.GrabPoints }

func (m *TLEnvelopeItem) SetIsBest(v int32) { m.Data2.IsBest = v }
func (m *TLEnvelopeItem) GetIsBest() int32 { return m.Data2.IsBest }


func NewTLEnvelopeItem() * TLEnvelopeItem {
    return &TLEnvelopeItem{ Data2: &EnvelopeItem_Data{} }
}

func (m* TLEnvelopeItem) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_envelopeItem))

    x.Int(m.GetUserId())
    x.Int(m.GetGrabTime())
    x.Int(m.GetGrabPoints())
    x.Int(m.GetIsBest())

    return x.buf
}

func (m* TLEnvelopeItem) Decode(dbuf *DecodeBuf) error {
    m.SetUserId(dbuf.Int())
    m.SetGrabTime(dbuf.Int())
    m.SetGrabPoints(dbuf.Int())
    m.SetIsBest(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// PointsEventItem <--
//  + TL_PointsEventItem
//

func (m *PointsEventItem) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_pointsEventItem:
        t := m.To_PointsEventItem()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *PointsEventItem) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_pointsEventItem:
        m2 := &TLPointsEventItem{&PointsEventItem_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// pointsEventItem#3aea199a id:long type:int reason:string change_points:int end_points:int created_at:int long1:long int1:int int2:int int3:int int4:int = PointsEventItem;
func (m *PointsEventItem) To_PointsEventItem() *TLPointsEventItem {
    return &TLPointsEventItem{
        Data2: m.Data2,
    }
}



// pointsEventItem#3aea199a id:long type:int reason:string change_points:int end_points:int created_at:int long1:long int1:int int2:int int3:int int4:int = PointsEventItem;
func (m *TLPointsEventItem) To_PointsEventItem() *PointsEventItem {
    return &PointsEventItem{
        Constructor: TLConstructor_CRC32_pointsEventItem,
        Data2: m.Data2,
    }
}


func (m *TLPointsEventItem) SetId(v int64) { m.Data2.Id = v }
func (m *TLPointsEventItem) GetId() int64 { return m.Data2.Id }

func (m *TLPointsEventItem) SetType(v int32) { m.Data2.Type = v }
func (m *TLPointsEventItem) GetType() int32 { return m.Data2.Type }

func (m *TLPointsEventItem) SetReason(v string) { m.Data2.Reason = v }
func (m *TLPointsEventItem) GetReason() string { return m.Data2.Reason }

func (m *TLPointsEventItem) SetChangePoints(v int32) { m.Data2.ChangePoints = v }
func (m *TLPointsEventItem) GetChangePoints() int32 { return m.Data2.ChangePoints }

func (m *TLPointsEventItem) SetEndPoints(v int32) { m.Data2.EndPoints = v }
func (m *TLPointsEventItem) GetEndPoints() int32 { return m.Data2.EndPoints }

func (m *TLPointsEventItem) SetCreatedAt(v int32) { m.Data2.CreatedAt = v }
func (m *TLPointsEventItem) GetCreatedAt() int32 { return m.Data2.CreatedAt }

func (m *TLPointsEventItem) SetLong1(v int64) { m.Data2.Long1 = v }
func (m *TLPointsEventItem) GetLong1() int64 { return m.Data2.Long1 }

func (m *TLPointsEventItem) SetInt1(v int32) { m.Data2.Int1 = v }
func (m *TLPointsEventItem) GetInt1() int32 { return m.Data2.Int1 }

func (m *TLPointsEventItem) SetInt2(v int32) { m.Data2.Int2 = v }
func (m *TLPointsEventItem) GetInt2() int32 { return m.Data2.Int2 }

func (m *TLPointsEventItem) SetInt3(v int32) { m.Data2.Int3 = v }
func (m *TLPointsEventItem) GetInt3() int32 { return m.Data2.Int3 }

func (m *TLPointsEventItem) SetInt4(v int32) { m.Data2.Int4 = v }
func (m *TLPointsEventItem) GetInt4() int32 { return m.Data2.Int4 }


func NewTLPointsEventItem() * TLPointsEventItem {
    return &TLPointsEventItem{ Data2: &PointsEventItem_Data{} }
}

func (m* TLPointsEventItem) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pointsEventItem))

    x.Long(m.GetId())
    x.Int(m.GetType())
    x.String(m.GetReason())
    x.Int(m.GetChangePoints())
    x.Int(m.GetEndPoints())
    x.Int(m.GetCreatedAt())
    x.Long(m.GetLong1())
    x.Int(m.GetInt1())
    x.Int(m.GetInt2())
    x.Int(m.GetInt3())
    x.Int(m.GetInt4())

    return x.buf
}

func (m* TLPointsEventItem) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetType(dbuf.Int())
    m.SetReason(dbuf.String())
    m.SetChangePoints(dbuf.Int())
    m.SetEndPoints(dbuf.Int())
    m.SetCreatedAt(dbuf.Int())
    m.SetLong1(dbuf.Long())
    m.SetInt1(dbuf.Int())
    m.SetInt2(dbuf.Int())
    m.SetInt3(dbuf.Int())
    m.SetInt4(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// WkOption <--
//  + TL_WkOption
//

func (m *WkOption) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_wkOption:
        t := m.To_WkOption()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *WkOption) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_wkOption:
        m2 := &TLWkOption{&WkOption_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// wkOption#ac76737b flags:# ipv6:flags.0?true media_only:flags.1?true https_only:flags.2?true cdn:flags.3?true static:flags.4?true id:int pack_type:int ip_address:string port:int = WkOption;
func (m *WkOption) To_WkOption() *TLWkOption {
    return &TLWkOption{
        Data2: m.Data2,
    }
}



// wkOption#ac76737b flags:# ipv6:flags.0?true media_only:flags.1?true https_only:flags.2?true cdn:flags.3?true static:flags.4?true id:int pack_type:int ip_address:string port:int = WkOption;
func (m *TLWkOption) To_WkOption() *WkOption {
    return &WkOption{
        Constructor: TLConstructor_CRC32_wkOption,
        Data2: m.Data2,
    }
}


func (m *TLWkOption) SetIpv6(v bool) { m.Data2.Ipv6 = v }
func (m *TLWkOption) GetIpv6() bool { return m.Data2.Ipv6 }

func (m *TLWkOption) SetMediaOnly(v bool) { m.Data2.MediaOnly = v }
func (m *TLWkOption) GetMediaOnly() bool { return m.Data2.MediaOnly }

func (m *TLWkOption) SetHttpsOnly(v bool) { m.Data2.HttpsOnly = v }
func (m *TLWkOption) GetHttpsOnly() bool { return m.Data2.HttpsOnly }

func (m *TLWkOption) SetCdn(v bool) { m.Data2.Cdn = v }
func (m *TLWkOption) GetCdn() bool { return m.Data2.Cdn }

func (m *TLWkOption) SetStatic(v bool) { m.Data2.Static = v }
func (m *TLWkOption) GetStatic() bool { return m.Data2.Static }

func (m *TLWkOption) SetId(v int32) { m.Data2.Id = v }
func (m *TLWkOption) GetId() int32 { return m.Data2.Id }

func (m *TLWkOption) SetPackType(v int32) { m.Data2.PackType = v }
func (m *TLWkOption) GetPackType() int32 { return m.Data2.PackType }

func (m *TLWkOption) SetIpAddress(v string) { m.Data2.IpAddress = v }
func (m *TLWkOption) GetIpAddress() string { return m.Data2.IpAddress }

func (m *TLWkOption) SetPort(v int32) { m.Data2.Port = v }
func (m *TLWkOption) GetPort() int32 { return m.Data2.Port }


func NewTLWkOption() * TLWkOption {
    return &TLWkOption{ Data2: &WkOption_Data{} }
}

func (m* TLWkOption) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_wkOption))

    // flags
    var flags uint32 = 0
    if m.GetIpv6() == true { flags |= 1 << 0 }
    if m.GetMediaOnly() == true { flags |= 1 << 1 }
    if m.GetHttpsOnly() == true { flags |= 1 << 2 }
    if m.GetCdn() == true { flags |= 1 << 3 }
    if m.GetStatic() == true { flags |= 1 << 4 }
	x.UInt(flags)

    
    
    
    
    
    x.Int(m.GetId())
    x.Int(m.GetPackType())
    x.String(m.GetIpAddress())
    x.Int(m.GetPort())

    return x.buf
}

func (m* TLWkOption) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetIpv6(true) }
    if (flags & (1 << 1)) != 0 { m.SetMediaOnly(true) }
    if (flags & (1 << 2)) != 0 { m.SetHttpsOnly(true) }
    if (flags & (1 << 3)) != 0 { m.SetCdn(true) }
    if (flags & (1 << 4)) != 0 { m.SetStatic(true) }
    m.SetId(dbuf.Int())
    m.SetPackType(dbuf.Int())
    m.SetIpAddress(dbuf.String())
    m.SetPort(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// SavedContact <--
//  + TL_SavedPhoneContact
//

func (m *SavedContact) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_savedPhoneContact:
        t := m.To_SavedPhoneContact()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *SavedContact) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_savedPhoneContact:
        m2 := &TLSavedPhoneContact{&SavedContact_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// savedPhoneContact#1142bd56 phone:string first_name:string last_name:string date:int = SavedContact;
func (m *SavedContact) To_SavedPhoneContact() *TLSavedPhoneContact {
    return &TLSavedPhoneContact{
        Data2: m.Data2,
    }
}



// savedPhoneContact#1142bd56 phone:string first_name:string last_name:string date:int = SavedContact;
func (m *TLSavedPhoneContact) To_SavedContact() *SavedContact {
    return &SavedContact{
        Constructor: TLConstructor_CRC32_savedPhoneContact,
        Data2: m.Data2,
    }
}


func (m *TLSavedPhoneContact) SetPhone(v string) { m.Data2.Phone = v }
func (m *TLSavedPhoneContact) GetPhone() string { return m.Data2.Phone }

func (m *TLSavedPhoneContact) SetFirstName(v string) { m.Data2.FirstName = v }
func (m *TLSavedPhoneContact) GetFirstName() string { return m.Data2.FirstName }

func (m *TLSavedPhoneContact) SetLastName(v string) { m.Data2.LastName = v }
func (m *TLSavedPhoneContact) GetLastName() string { return m.Data2.LastName }

func (m *TLSavedPhoneContact) SetDate(v int32) { m.Data2.Date = v }
func (m *TLSavedPhoneContact) GetDate() int32 { return m.Data2.Date }


func NewTLSavedPhoneContact() * TLSavedPhoneContact {
    return &TLSavedPhoneContact{ Data2: &SavedContact_Data{} }
}

func (m* TLSavedPhoneContact) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_savedPhoneContact))

    x.String(m.GetPhone())
    x.String(m.GetFirstName())
    x.String(m.GetLastName())
    x.Int(m.GetDate())

    return x.buf
}

func (m* TLSavedPhoneContact) Decode(dbuf *DecodeBuf) error {
    m.SetPhone(dbuf.String())
    m.SetFirstName(dbuf.String())
    m.SetLastName(dbuf.String())
    m.SetDate(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Account_AutoDownloadSettings <--
//  + TL_AccountAutoDownloadSettings
//

func (m *Account_AutoDownloadSettings) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_account_autoDownloadSettings:
        t := m.To_AccountAutoDownloadSettings()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Account_AutoDownloadSettings) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_account_autoDownloadSettings:
        m2 := &TLAccountAutoDownloadSettings{&Account_AutoDownloadSettings_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// account.autoDownloadSettings#63cacf26 low:AutoDownloadSettings medium:AutoDownloadSettings high:AutoDownloadSettings = account.AutoDownloadSettings;
func (m *Account_AutoDownloadSettings) To_AccountAutoDownloadSettings() *TLAccountAutoDownloadSettings {
    return &TLAccountAutoDownloadSettings{
        Data2: m.Data2,
    }
}



// account.autoDownloadSettings#63cacf26 low:AutoDownloadSettings medium:AutoDownloadSettings high:AutoDownloadSettings = account.AutoDownloadSettings;
func (m *TLAccountAutoDownloadSettings) To_Account_AutoDownloadSettings() *Account_AutoDownloadSettings {
    return &Account_AutoDownloadSettings{
        Constructor: TLConstructor_CRC32_account_autoDownloadSettings,
        Data2: m.Data2,
    }
}


func (m *TLAccountAutoDownloadSettings) SetLow(v *AutoDownloadSettings) { m.Data2.Low = v }
func (m *TLAccountAutoDownloadSettings) GetLow() *AutoDownloadSettings { return m.Data2.Low }

func (m *TLAccountAutoDownloadSettings) SetMedium(v *AutoDownloadSettings) { m.Data2.Medium = v }
func (m *TLAccountAutoDownloadSettings) GetMedium() *AutoDownloadSettings { return m.Data2.Medium }

func (m *TLAccountAutoDownloadSettings) SetHigh(v *AutoDownloadSettings) { m.Data2.High = v }
func (m *TLAccountAutoDownloadSettings) GetHigh() *AutoDownloadSettings { return m.Data2.High }


func NewTLAccountAutoDownloadSettings() * TLAccountAutoDownloadSettings {
    return &TLAccountAutoDownloadSettings{ Data2: &Account_AutoDownloadSettings_Data{} }
}

func (m* TLAccountAutoDownloadSettings) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_account_autoDownloadSettings))

    x.Bytes(m.GetLow().Encode())
    x.Bytes(m.GetMedium().Encode())
    x.Bytes(m.GetHigh().Encode())

    return x.buf
}

func (m* TLAccountAutoDownloadSettings) Decode(dbuf *DecodeBuf) error {
    m1 := &AutoDownloadSettings{}
    m1.Decode(dbuf)
    m.SetLow(m1)
    m2 := &AutoDownloadSettings{}
    m2.Decode(dbuf)
    m.SetMedium(m2)
    m3 := &AutoDownloadSettings{}
    m3.Decode(dbuf)
    m.SetHigh(m3)

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// DialogFilter <--
//  + TL_DialogFilter
//

func (m *DialogFilter) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_dialogFilter:
        t := m.To_DialogFilter()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *DialogFilter) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_dialogFilter:
        m2 := &TLDialogFilter{&DialogFilter_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// dialogFilter#7438f7e8 flags:# contacts:flags.0?true non_contacts:flags.1?true groups:flags.2?true broadcasts:flags.3?true bots:flags.4?true exclude_muted:flags.11?true exclude_read:flags.12?true exclude_archived:flags.13?true id:int title:string emoticon:flags.25?string pinned_peers:Vector<InputPeer> include_peers:Vector<InputPeer> exclude_peers:Vector<InputPeer> = DialogFilter;
func (m *DialogFilter) To_DialogFilter() *TLDialogFilter {
    return &TLDialogFilter{
        Data2: m.Data2,
    }
}



// dialogFilter#7438f7e8 flags:# contacts:flags.0?true non_contacts:flags.1?true groups:flags.2?true broadcasts:flags.3?true bots:flags.4?true exclude_muted:flags.11?true exclude_read:flags.12?true exclude_archived:flags.13?true id:int title:string emoticon:flags.25?string pinned_peers:Vector<InputPeer> include_peers:Vector<InputPeer> exclude_peers:Vector<InputPeer> = DialogFilter;
func (m *TLDialogFilter) To_DialogFilter() *DialogFilter {
    return &DialogFilter{
        Constructor: TLConstructor_CRC32_dialogFilter,
        Data2: m.Data2,
    }
}


func (m *TLDialogFilter) SetContacts(v bool) { m.Data2.Contacts = v }
func (m *TLDialogFilter) GetContacts() bool { return m.Data2.Contacts }

func (m *TLDialogFilter) SetNonContacts(v bool) { m.Data2.NonContacts = v }
func (m *TLDialogFilter) GetNonContacts() bool { return m.Data2.NonContacts }

func (m *TLDialogFilter) SetGroups(v bool) { m.Data2.Groups = v }
func (m *TLDialogFilter) GetGroups() bool { return m.Data2.Groups }

func (m *TLDialogFilter) SetBroadcasts(v bool) { m.Data2.Broadcasts = v }
func (m *TLDialogFilter) GetBroadcasts() bool { return m.Data2.Broadcasts }

func (m *TLDialogFilter) SetBots(v bool) { m.Data2.Bots = v }
func (m *TLDialogFilter) GetBots() bool { return m.Data2.Bots }

func (m *TLDialogFilter) SetExcludeMuted(v bool) { m.Data2.ExcludeMuted = v }
func (m *TLDialogFilter) GetExcludeMuted() bool { return m.Data2.ExcludeMuted }

func (m *TLDialogFilter) SetExcludeRead(v bool) { m.Data2.ExcludeRead = v }
func (m *TLDialogFilter) GetExcludeRead() bool { return m.Data2.ExcludeRead }

func (m *TLDialogFilter) SetExcludeArchived(v bool) { m.Data2.ExcludeArchived = v }
func (m *TLDialogFilter) GetExcludeArchived() bool { return m.Data2.ExcludeArchived }

func (m *TLDialogFilter) SetId(v int32) { m.Data2.Id = v }
func (m *TLDialogFilter) GetId() int32 { return m.Data2.Id }

func (m *TLDialogFilter) SetTitle(v string) { m.Data2.Title = v }
func (m *TLDialogFilter) GetTitle() string { return m.Data2.Title }

func (m *TLDialogFilter) SetEmoticon(v string) { m.Data2.Emoticon = v }
func (m *TLDialogFilter) GetEmoticon() string { return m.Data2.Emoticon }

func (m *TLDialogFilter) SetPinnedPeers(v []*InputPeer) { m.Data2.PinnedPeers = v }
func (m *TLDialogFilter) GetPinnedPeers() []*InputPeer { return m.Data2.PinnedPeers }

func (m *TLDialogFilter) SetIncludePeers(v []*InputPeer) { m.Data2.IncludePeers = v }
func (m *TLDialogFilter) GetIncludePeers() []*InputPeer { return m.Data2.IncludePeers }

func (m *TLDialogFilter) SetExcludePeers(v []*InputPeer) { m.Data2.ExcludePeers = v }
func (m *TLDialogFilter) GetExcludePeers() []*InputPeer { return m.Data2.ExcludePeers }


func NewTLDialogFilter() * TLDialogFilter {
    return &TLDialogFilter{ Data2: &DialogFilter_Data{} }
}

func (m* TLDialogFilter) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_dialogFilter))

    // flags
    var flags uint32 = 0
    if m.GetContacts() == true { flags |= 1 << 0 }
    if m.GetNonContacts() == true { flags |= 1 << 1 }
    if m.GetGroups() == true { flags |= 1 << 2 }
    if m.GetBroadcasts() == true { flags |= 1 << 3 }
    if m.GetBots() == true { flags |= 1 << 4 }
    if m.GetExcludeMuted() == true { flags |= 1 << 11 }
    if m.GetExcludeRead() == true { flags |= 1 << 12 }
    if m.GetExcludeArchived() == true { flags |= 1 << 13 }
    if m.GetEmoticon() != "" { flags |= 1 << 25 }
	x.UInt(flags)

    
    
    
    
    
    
    
    
    x.Int(m.GetId())
    x.String(m.GetTitle())
    if (flags & (1 << 25)) != 0 { x.String(m.GetEmoticon()) }
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetPinnedPeers())))
for _, v := range m.GetPinnedPeers() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetIncludePeers())))
for _, v := range m.GetIncludePeers() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetExcludePeers())))
for _, v := range m.GetExcludePeers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLDialogFilter) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetContacts(true) }
    if (flags & (1 << 1)) != 0 { m.SetNonContacts(true) }
    if (flags & (1 << 2)) != 0 { m.SetGroups(true) }
    if (flags & (1 << 3)) != 0 { m.SetBroadcasts(true) }
    if (flags & (1 << 4)) != 0 { m.SetBots(true) }
    if (flags & (1 << 11)) != 0 { m.SetExcludeMuted(true) }
    if (flags & (1 << 12)) != 0 { m.SetExcludeRead(true) }
    if (flags & (1 << 13)) != 0 { m.SetExcludeArchived(true) }
    m.SetId(dbuf.Int())
    m.SetTitle(dbuf.String())
    if (flags & (1 << 25)) != 0 { m.SetEmoticon(dbuf.String()) }
    c13 := dbuf.Int()
if c13 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 13, c13)
	return dbuf.err
}
l13 := dbuf.Int()
v13 := make([]*InputPeer, l13)
for i := int32(0); i < l13; i++ {
	v13[i] = &InputPeer{}
	v13[i].Decode(dbuf)
}
m.SetPinnedPeers(v13)

    c14 := dbuf.Int()
if c14 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 14, c14)
	return dbuf.err
}
l14 := dbuf.Int()
v14 := make([]*InputPeer, l14)
for i := int32(0); i < l14; i++ {
	v14[i] = &InputPeer{}
	v14[i].Decode(dbuf)
}
m.SetIncludePeers(v14)

    c15 := dbuf.Int()
if c15 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 15, c15)
	return dbuf.err
}
l15 := dbuf.Int()
v15 := make([]*InputPeer, l15)
for i := int32(0); i < l15; i++ {
	v15[i] = &InputPeer{}
	v15[i].Decode(dbuf)
}
m.SetExcludePeers(v15)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Account_Themes <--
//  + TL_AccountThemesNotModified
//  + TL_AccountThemes
//

func (m *Account_Themes) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_account_themesNotModified:
        t := m.To_AccountThemesNotModified()
        return t.Encode()
    case TLConstructor_CRC32_account_themes:
        t := m.To_AccountThemes()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Account_Themes) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_account_themesNotModified:
        m2 := &TLAccountThemesNotModified{&Account_Themes_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_account_themes:
        m2 := &TLAccountThemes{&Account_Themes_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// account.themesNotModified#f41eb622 = account.Themes;
func (m *Account_Themes) To_AccountThemesNotModified() *TLAccountThemesNotModified {
    return &TLAccountThemesNotModified{
        Data2: m.Data2,
    }
}

// account.themes#7f676421 hash:int themes:Vector<Theme> = account.Themes;
func (m *Account_Themes) To_AccountThemes() *TLAccountThemes {
    return &TLAccountThemes{
        Data2: m.Data2,
    }
}



// account.themesNotModified#f41eb622 = account.Themes;
func (m *TLAccountThemesNotModified) To_Account_Themes() *Account_Themes {
    return &Account_Themes{
        Constructor: TLConstructor_CRC32_account_themesNotModified,
        Data2: m.Data2,
    }
}



func NewTLAccountThemesNotModified() * TLAccountThemesNotModified {
    return &TLAccountThemesNotModified{ Data2: &Account_Themes_Data{} }
}

func (m* TLAccountThemesNotModified) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_account_themesNotModified))


    return x.buf
}

func (m* TLAccountThemesNotModified) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// account.themes#7f676421 hash:int themes:Vector<Theme> = account.Themes;
func (m *TLAccountThemes) To_Account_Themes() *Account_Themes {
    return &Account_Themes{
        Constructor: TLConstructor_CRC32_account_themes,
        Data2: m.Data2,
    }
}


func (m *TLAccountThemes) SetHash(v int32) { m.Data2.Hash = v }
func (m *TLAccountThemes) GetHash() int32 { return m.Data2.Hash }

func (m *TLAccountThemes) SetThemes(v []*Theme) { m.Data2.Themes = v }
func (m *TLAccountThemes) GetThemes() []*Theme { return m.Data2.Themes }


func NewTLAccountThemes() * TLAccountThemes {
    return &TLAccountThemes{ Data2: &Account_Themes_Data{} }
}

func (m* TLAccountThemes) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_account_themes))

    x.Int(m.GetHash())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetThemes())))
for _, v := range m.GetThemes() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLAccountThemes) Decode(dbuf *DecodeBuf) error {
    m.SetHash(dbuf.Int())
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*Theme, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &Theme{}
	v2[i].Decode(dbuf)
}
m.SetThemes(v2)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputAppEvent <--
//  + TL_InputAppEvent
//  + TL_InputAppEvent114
//

func (m *InputAppEvent) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputAppEvent:
        t := m.To_InputAppEvent()
        return t.Encode()
    case TLConstructor_CRC32_inputAppEvent114:
        t := m.To_InputAppEvent114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputAppEvent) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputAppEvent:
        m2 := &TLInputAppEvent{&InputAppEvent_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputAppEvent114:
        m2 := &TLInputAppEvent114{&InputAppEvent_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputAppEvent#770656a8 time:double type:string peer:long data:string = InputAppEvent;
func (m *InputAppEvent) To_InputAppEvent() *TLInputAppEvent {
    return &TLInputAppEvent{
        Data2: m.Data2,
    }
}

// inputAppEvent#1d1b1245 time:double type:string peer:long data:JSONValue = InputAppEvent;
func (m *InputAppEvent) To_InputAppEvent114() *TLInputAppEvent114 {
    return &TLInputAppEvent114{
        Data2: m.Data2,
    }
}



// inputAppEvent#770656a8 time:double type:string peer:long data:string = InputAppEvent;
func (m *TLInputAppEvent) To_InputAppEvent() *InputAppEvent {
    return &InputAppEvent{
        Constructor: TLConstructor_CRC32_inputAppEvent,
        Data2: m.Data2,
    }
}


func (m *TLInputAppEvent) SetTime(v float64) { m.Data2.Time = v }
func (m *TLInputAppEvent) GetTime() float64 { return m.Data2.Time }

func (m *TLInputAppEvent) SetType(v string) { m.Data2.Type = v }
func (m *TLInputAppEvent) GetType() string { return m.Data2.Type }

func (m *TLInputAppEvent) SetPeer(v int64) { m.Data2.Peer = v }
func (m *TLInputAppEvent) GetPeer() int64 { return m.Data2.Peer }

func (m *TLInputAppEvent) SetData(v string) { m.Data2.Data_4 = v }
func (m *TLInputAppEvent) GetData() string { return m.Data2.Data_4 }


func NewTLInputAppEvent() * TLInputAppEvent {
    return &TLInputAppEvent{ Data2: &InputAppEvent_Data{} }
}

func (m* TLInputAppEvent) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputAppEvent))

    x.Double(m.GetTime())
    x.String(m.GetType())
    x.Long(m.GetPeer())
    x.String(m.GetData())

    return x.buf
}

func (m* TLInputAppEvent) Decode(dbuf *DecodeBuf) error {
    m.SetTime(dbuf.Double())
    m.SetType(dbuf.String())
    m.SetPeer(dbuf.Long())
    m.SetData(dbuf.String())

    return dbuf.err
}
// inputAppEvent#1d1b1245 time:double type:string peer:long data:JSONValue = InputAppEvent;
func (m *TLInputAppEvent114) To_InputAppEvent() *InputAppEvent {
    return &InputAppEvent{
        Constructor: TLConstructor_CRC32_inputAppEvent114,
        Data2: m.Data2,
    }
}


func (m *TLInputAppEvent114) SetTime(v float64) { m.Data2.Time = v }
func (m *TLInputAppEvent114) GetTime() float64 { return m.Data2.Time }

func (m *TLInputAppEvent114) SetType(v string) { m.Data2.Type = v }
func (m *TLInputAppEvent114) GetType() string { return m.Data2.Type }

func (m *TLInputAppEvent114) SetPeer(v int64) { m.Data2.Peer = v }
func (m *TLInputAppEvent114) GetPeer() int64 { return m.Data2.Peer }

func (m *TLInputAppEvent114) SetData(v *JSONValue) { m.Data2.Data_5 = v }
func (m *TLInputAppEvent114) GetData() *JSONValue { return m.Data2.Data_5 }


func NewTLInputAppEvent114() * TLInputAppEvent114 {
    return &TLInputAppEvent114{ Data2: &InputAppEvent_Data{} }
}

func (m* TLInputAppEvent114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputAppEvent114))

    x.Double(m.GetTime())
    x.String(m.GetType())
    x.Long(m.GetPeer())
    x.Bytes(m.GetData().Encode())

    return x.buf
}

func (m* TLInputAppEvent114) Decode(dbuf *DecodeBuf) error {
    m.SetTime(dbuf.Double())
    m.SetType(dbuf.String())
    m.SetPeer(dbuf.Long())
    m4 := &JSONValue{}
    m4.Decode(dbuf)
    m.SetData(m4)

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Account_PasswordSettings <--
//  + TL_AccountPasswordSettings
//  + TL_AccountPasswordSettings114
//

func (m *Account_PasswordSettings) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_account_passwordSettings:
        t := m.To_AccountPasswordSettings()
        return t.Encode()
    case TLConstructor_CRC32_account_passwordSettings114:
        t := m.To_AccountPasswordSettings114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Account_PasswordSettings) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_account_passwordSettings:
        m2 := &TLAccountPasswordSettings{&Account_PasswordSettings_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_account_passwordSettings114:
        m2 := &TLAccountPasswordSettings114{&Account_PasswordSettings_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// account.passwordSettings#b7b72ab3 email:string = account.PasswordSettings;
func (m *Account_PasswordSettings) To_AccountPasswordSettings() *TLAccountPasswordSettings {
    return &TLAccountPasswordSettings{
        Data2: m.Data2,
    }
}

// account.passwordSettings#9a5c33e5 flags:# email:flags.0?string secure_settings:flags.1?SecureSecretSettings = account.PasswordSettings;
func (m *Account_PasswordSettings) To_AccountPasswordSettings114() *TLAccountPasswordSettings114 {
    return &TLAccountPasswordSettings114{
        Data2: m.Data2,
    }
}



// account.passwordSettings#b7b72ab3 email:string = account.PasswordSettings;
func (m *TLAccountPasswordSettings) To_Account_PasswordSettings() *Account_PasswordSettings {
    return &Account_PasswordSettings{
        Constructor: TLConstructor_CRC32_account_passwordSettings,
        Data2: m.Data2,
    }
}


func (m *TLAccountPasswordSettings) SetEmail(v string) { m.Data2.Email = v }
func (m *TLAccountPasswordSettings) GetEmail() string { return m.Data2.Email }


func NewTLAccountPasswordSettings() * TLAccountPasswordSettings {
    return &TLAccountPasswordSettings{ Data2: &Account_PasswordSettings_Data{} }
}

func (m* TLAccountPasswordSettings) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_account_passwordSettings))

    x.String(m.GetEmail())

    return x.buf
}

func (m* TLAccountPasswordSettings) Decode(dbuf *DecodeBuf) error {
    m.SetEmail(dbuf.String())

    return dbuf.err
}
// account.passwordSettings#9a5c33e5 flags:# email:flags.0?string secure_settings:flags.1?SecureSecretSettings = account.PasswordSettings;
func (m *TLAccountPasswordSettings114) To_Account_PasswordSettings() *Account_PasswordSettings {
    return &Account_PasswordSettings{
        Constructor: TLConstructor_CRC32_account_passwordSettings114,
        Data2: m.Data2,
    }
}


func (m *TLAccountPasswordSettings114) SetEmail(v string) { m.Data2.Email = v }
func (m *TLAccountPasswordSettings114) GetEmail() string { return m.Data2.Email }

func (m *TLAccountPasswordSettings114) SetSecureSettings(v *SecureSecretSettings) { m.Data2.SecureSettings = v }
func (m *TLAccountPasswordSettings114) GetSecureSettings() *SecureSecretSettings { return m.Data2.SecureSettings }


func NewTLAccountPasswordSettings114() * TLAccountPasswordSettings114 {
    return &TLAccountPasswordSettings114{ Data2: &Account_PasswordSettings_Data{} }
}

func (m* TLAccountPasswordSettings114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_account_passwordSettings114))

    // flags
    var flags uint32 = 0
    if m.GetEmail() != "" { flags |= 1 << 0 }
    if m.GetSecureSettings() != nil { flags |= 1 << 1 }
	x.UInt(flags)

    if (flags & (1 << 0)) != 0 { x.String(m.GetEmail()) }
    if (flags & (1 << 1)) != 0 { x.Bytes(m.GetSecureSettings().Encode()) }

    return x.buf
}

func (m* TLAccountPasswordSettings114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetEmail(dbuf.String()) }
    if (flags & (1 << 1)) != 0 {
 m3 := &SecureSecretSettings{}
    m3.Decode(dbuf)
    m.SetSecureSettings(m3) 
}

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// ExportedChatInvite <--
//  + TL_ChatInviteEmpty
//  + TL_ChatInviteExported
//

func (m *ExportedChatInvite) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_chatInviteEmpty:
        t := m.To_ChatInviteEmpty()
        return t.Encode()
    case TLConstructor_CRC32_chatInviteExported:
        t := m.To_ChatInviteExported()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *ExportedChatInvite) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_chatInviteEmpty:
        m2 := &TLChatInviteEmpty{&ExportedChatInvite_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_chatInviteExported:
        m2 := &TLChatInviteExported{&ExportedChatInvite_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// chatInviteEmpty#69df3769 = ExportedChatInvite;
func (m *ExportedChatInvite) To_ChatInviteEmpty() *TLChatInviteEmpty {
    return &TLChatInviteEmpty{
        Data2: m.Data2,
    }
}

// chatInviteExported#fc2e05bc link:string = ExportedChatInvite;
func (m *ExportedChatInvite) To_ChatInviteExported() *TLChatInviteExported {
    return &TLChatInviteExported{
        Data2: m.Data2,
    }
}



// chatInviteEmpty#69df3769 = ExportedChatInvite;
func (m *TLChatInviteEmpty) To_ExportedChatInvite() *ExportedChatInvite {
    return &ExportedChatInvite{
        Constructor: TLConstructor_CRC32_chatInviteEmpty,
        Data2: m.Data2,
    }
}



func NewTLChatInviteEmpty() * TLChatInviteEmpty {
    return &TLChatInviteEmpty{ Data2: &ExportedChatInvite_Data{} }
}

func (m* TLChatInviteEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_chatInviteEmpty))


    return x.buf
}

func (m* TLChatInviteEmpty) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// chatInviteExported#fc2e05bc link:string = ExportedChatInvite;
func (m *TLChatInviteExported) To_ExportedChatInvite() *ExportedChatInvite {
    return &ExportedChatInvite{
        Constructor: TLConstructor_CRC32_chatInviteExported,
        Data2: m.Data2,
    }
}


func (m *TLChatInviteExported) SetLink(v string) { m.Data2.Link = v }
func (m *TLChatInviteExported) GetLink() string { return m.Data2.Link }


func NewTLChatInviteExported() * TLChatInviteExported {
    return &TLChatInviteExported{ Data2: &ExportedChatInvite_Data{} }
}

func (m* TLChatInviteExported) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_chatInviteExported))

    x.String(m.GetLink())

    return x.buf
}

func (m* TLChatInviteExported) Decode(dbuf *DecodeBuf) error {
    m.SetLink(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Help_TermsOfService <--
//  + TL_HelpTermsOfService
//  + TL_HelpTermsOfService114
//

func (m *Help_TermsOfService) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_help_termsOfService:
        t := m.To_HelpTermsOfService()
        return t.Encode()
    case TLConstructor_CRC32_help_termsOfService114:
        t := m.To_HelpTermsOfService114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Help_TermsOfService) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_help_termsOfService:
        m2 := &TLHelpTermsOfService{&Help_TermsOfService_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_help_termsOfService114:
        m2 := &TLHelpTermsOfService114{&Help_TermsOfService_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// help.termsOfService#f1ee3e90 text:string = help.TermsOfService;
func (m *Help_TermsOfService) To_HelpTermsOfService() *TLHelpTermsOfService {
    return &TLHelpTermsOfService{
        Data2: m.Data2,
    }
}

// help.termsOfService#780a0310 flags:# popup:flags.0?true id:DataJSON text:string entities:Vector<MessageEntity> min_age_confirm:flags.1?int = help.TermsOfService;
func (m *Help_TermsOfService) To_HelpTermsOfService114() *TLHelpTermsOfService114 {
    return &TLHelpTermsOfService114{
        Data2: m.Data2,
    }
}



// help.termsOfService#f1ee3e90 text:string = help.TermsOfService;
func (m *TLHelpTermsOfService) To_Help_TermsOfService() *Help_TermsOfService {
    return &Help_TermsOfService{
        Constructor: TLConstructor_CRC32_help_termsOfService,
        Data2: m.Data2,
    }
}


func (m *TLHelpTermsOfService) SetText(v string) { m.Data2.Text = v }
func (m *TLHelpTermsOfService) GetText() string { return m.Data2.Text }


func NewTLHelpTermsOfService() * TLHelpTermsOfService {
    return &TLHelpTermsOfService{ Data2: &Help_TermsOfService_Data{} }
}

func (m* TLHelpTermsOfService) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_help_termsOfService))

    x.String(m.GetText())

    return x.buf
}

func (m* TLHelpTermsOfService) Decode(dbuf *DecodeBuf) error {
    m.SetText(dbuf.String())

    return dbuf.err
}
// help.termsOfService#780a0310 flags:# popup:flags.0?true id:DataJSON text:string entities:Vector<MessageEntity> min_age_confirm:flags.1?int = help.TermsOfService;
func (m *TLHelpTermsOfService114) To_Help_TermsOfService() *Help_TermsOfService {
    return &Help_TermsOfService{
        Constructor: TLConstructor_CRC32_help_termsOfService114,
        Data2: m.Data2,
    }
}


func (m *TLHelpTermsOfService114) SetPopup(v bool) { m.Data2.Popup = v }
func (m *TLHelpTermsOfService114) GetPopup() bool { return m.Data2.Popup }

func (m *TLHelpTermsOfService114) SetId(v *DataJSON) { m.Data2.Id = v }
func (m *TLHelpTermsOfService114) GetId() *DataJSON { return m.Data2.Id }

func (m *TLHelpTermsOfService114) SetText(v string) { m.Data2.Text = v }
func (m *TLHelpTermsOfService114) GetText() string { return m.Data2.Text }

func (m *TLHelpTermsOfService114) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLHelpTermsOfService114) GetEntities() []*MessageEntity { return m.Data2.Entities }

func (m *TLHelpTermsOfService114) SetMinAgeConfirm(v int32) { m.Data2.MinAgeConfirm = v }
func (m *TLHelpTermsOfService114) GetMinAgeConfirm() int32 { return m.Data2.MinAgeConfirm }


func NewTLHelpTermsOfService114() * TLHelpTermsOfService114 {
    return &TLHelpTermsOfService114{ Data2: &Help_TermsOfService_Data{} }
}

func (m* TLHelpTermsOfService114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_help_termsOfService114))

    // flags
    var flags uint32 = 0
    if m.GetPopup() == true { flags |= 1 << 0 }
    if m.GetMinAgeConfirm() != 0 { flags |= 1 << 1 }
	x.UInt(flags)

    
    x.Bytes(m.GetId().Encode())
    x.String(m.GetText())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetEntities())))
for _, v := range m.GetEntities() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    if (flags & (1 << 1)) != 0 { x.Int(m.GetMinAgeConfirm()) }

    return x.buf
}

func (m* TLHelpTermsOfService114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetPopup(true) }
    m3 := &DataJSON{}
    m3.Decode(dbuf)
    m.SetId(m3)
    m.SetText(dbuf.String())
    c5 := dbuf.Int()
if c5 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 5, c5)
	return dbuf.err
}
l5 := dbuf.Int()
v5 := make([]*MessageEntity, l5)
for i := int32(0); i < l5; i++ {
	v5[i] = &MessageEntity{}
	v5[i].Decode(dbuf)
}
m.SetEntities(v5)

    if (flags & (1 << 1)) != 0 { m.SetMinAgeConfirm(dbuf.Int()) }

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Messages_FoundGifs <--
//  + TL_MessagesFoundGifs
//

func (m *Messages_FoundGifs) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messages_foundGifs:
        t := m.To_MessagesFoundGifs()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Messages_FoundGifs) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messages_foundGifs:
        m2 := &TLMessagesFoundGifs{&Messages_FoundGifs_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messages.foundGifs#450a1c0a next_offset:int results:Vector<FoundGif> = messages.FoundGifs;
func (m *Messages_FoundGifs) To_MessagesFoundGifs() *TLMessagesFoundGifs {
    return &TLMessagesFoundGifs{
        Data2: m.Data2,
    }
}



// messages.foundGifs#450a1c0a next_offset:int results:Vector<FoundGif> = messages.FoundGifs;
func (m *TLMessagesFoundGifs) To_Messages_FoundGifs() *Messages_FoundGifs {
    return &Messages_FoundGifs{
        Constructor: TLConstructor_CRC32_messages_foundGifs,
        Data2: m.Data2,
    }
}


func (m *TLMessagesFoundGifs) SetNextOffset(v int32) { m.Data2.NextOffset = v }
func (m *TLMessagesFoundGifs) GetNextOffset() int32 { return m.Data2.NextOffset }

func (m *TLMessagesFoundGifs) SetResults(v []*FoundGif) { m.Data2.Results = v }
func (m *TLMessagesFoundGifs) GetResults() []*FoundGif { return m.Data2.Results }


func NewTLMessagesFoundGifs() * TLMessagesFoundGifs {
    return &TLMessagesFoundGifs{ Data2: &Messages_FoundGifs_Data{} }
}

func (m* TLMessagesFoundGifs) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_foundGifs))

    x.Int(m.GetNextOffset())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetResults())))
for _, v := range m.GetResults() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLMessagesFoundGifs) Decode(dbuf *DecodeBuf) error {
    m.SetNextOffset(dbuf.Int())
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*FoundGif, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &FoundGif{}
	v2[i].Decode(dbuf)
}
m.SetResults(v2)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// LangPackLanguage <--
//  + TL_LangPackLanguage
//  + TL_LangPackLanguage114
//

func (m *LangPackLanguage) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_langPackLanguage:
        t := m.To_LangPackLanguage()
        return t.Encode()
    case TLConstructor_CRC32_langPackLanguage114:
        t := m.To_LangPackLanguage114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *LangPackLanguage) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_langPackLanguage:
        m2 := &TLLangPackLanguage{&LangPackLanguage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_langPackLanguage114:
        m2 := &TLLangPackLanguage114{&LangPackLanguage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// langPackLanguage#117698f1 name:string native_name:string lang_code:string = LangPackLanguage;
func (m *LangPackLanguage) To_LangPackLanguage() *TLLangPackLanguage {
    return &TLLangPackLanguage{
        Data2: m.Data2,
    }
}

// langPackLanguage#eeca5ce3 flags:# official:flags.0?true rtl:flags.2?true beta:flags.3?true name:string native_name:string lang_code:string base_lang_code:flags.1?string plural_code:string strings_count:int translated_count:int translations_url:string = LangPackLanguage;
func (m *LangPackLanguage) To_LangPackLanguage114() *TLLangPackLanguage114 {
    return &TLLangPackLanguage114{
        Data2: m.Data2,
    }
}



// langPackLanguage#117698f1 name:string native_name:string lang_code:string = LangPackLanguage;
func (m *TLLangPackLanguage) To_LangPackLanguage() *LangPackLanguage {
    return &LangPackLanguage{
        Constructor: TLConstructor_CRC32_langPackLanguage,
        Data2: m.Data2,
    }
}


func (m *TLLangPackLanguage) SetName(v string) { m.Data2.Name = v }
func (m *TLLangPackLanguage) GetName() string { return m.Data2.Name }

func (m *TLLangPackLanguage) SetNativeName(v string) { m.Data2.NativeName = v }
func (m *TLLangPackLanguage) GetNativeName() string { return m.Data2.NativeName }

func (m *TLLangPackLanguage) SetLangCode(v string) { m.Data2.LangCode = v }
func (m *TLLangPackLanguage) GetLangCode() string { return m.Data2.LangCode }


func NewTLLangPackLanguage() * TLLangPackLanguage {
    return &TLLangPackLanguage{ Data2: &LangPackLanguage_Data{} }
}

func (m* TLLangPackLanguage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_langPackLanguage))

    x.String(m.GetName())
    x.String(m.GetNativeName())
    x.String(m.GetLangCode())

    return x.buf
}

func (m* TLLangPackLanguage) Decode(dbuf *DecodeBuf) error {
    m.SetName(dbuf.String())
    m.SetNativeName(dbuf.String())
    m.SetLangCode(dbuf.String())

    return dbuf.err
}
// langPackLanguage#eeca5ce3 flags:# official:flags.0?true rtl:flags.2?true beta:flags.3?true name:string native_name:string lang_code:string base_lang_code:flags.1?string plural_code:string strings_count:int translated_count:int translations_url:string = LangPackLanguage;
func (m *TLLangPackLanguage114) To_LangPackLanguage() *LangPackLanguage {
    return &LangPackLanguage{
        Constructor: TLConstructor_CRC32_langPackLanguage114,
        Data2: m.Data2,
    }
}


func (m *TLLangPackLanguage114) SetOfficial(v bool) { m.Data2.Official = v }
func (m *TLLangPackLanguage114) GetOfficial() bool { return m.Data2.Official }

func (m *TLLangPackLanguage114) SetRtl(v bool) { m.Data2.Rtl = v }
func (m *TLLangPackLanguage114) GetRtl() bool { return m.Data2.Rtl }

func (m *TLLangPackLanguage114) SetBeta(v bool) { m.Data2.Beta = v }
func (m *TLLangPackLanguage114) GetBeta() bool { return m.Data2.Beta }

func (m *TLLangPackLanguage114) SetName(v string) { m.Data2.Name = v }
func (m *TLLangPackLanguage114) GetName() string { return m.Data2.Name }

func (m *TLLangPackLanguage114) SetNativeName(v string) { m.Data2.NativeName = v }
func (m *TLLangPackLanguage114) GetNativeName() string { return m.Data2.NativeName }

func (m *TLLangPackLanguage114) SetLangCode(v string) { m.Data2.LangCode = v }
func (m *TLLangPackLanguage114) GetLangCode() string { return m.Data2.LangCode }

func (m *TLLangPackLanguage114) SetBaseLangCode(v string) { m.Data2.BaseLangCode = v }
func (m *TLLangPackLanguage114) GetBaseLangCode() string { return m.Data2.BaseLangCode }

func (m *TLLangPackLanguage114) SetPluralCode(v string) { m.Data2.PluralCode = v }
func (m *TLLangPackLanguage114) GetPluralCode() string { return m.Data2.PluralCode }

func (m *TLLangPackLanguage114) SetStringsCount(v int32) { m.Data2.StringsCount = v }
func (m *TLLangPackLanguage114) GetStringsCount() int32 { return m.Data2.StringsCount }

func (m *TLLangPackLanguage114) SetTranslatedCount(v int32) { m.Data2.TranslatedCount = v }
func (m *TLLangPackLanguage114) GetTranslatedCount() int32 { return m.Data2.TranslatedCount }

func (m *TLLangPackLanguage114) SetTranslationsUrl(v string) { m.Data2.TranslationsUrl = v }
func (m *TLLangPackLanguage114) GetTranslationsUrl() string { return m.Data2.TranslationsUrl }


func NewTLLangPackLanguage114() * TLLangPackLanguage114 {
    return &TLLangPackLanguage114{ Data2: &LangPackLanguage_Data{} }
}

func (m* TLLangPackLanguage114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_langPackLanguage114))

    // flags
    var flags uint32 = 0
    if m.GetOfficial() == true { flags |= 1 << 0 }
    if m.GetRtl() == true { flags |= 1 << 2 }
    if m.GetBeta() == true { flags |= 1 << 3 }
    if m.GetBaseLangCode() != "" { flags |= 1 << 1 }
	x.UInt(flags)

    
    
    
    x.String(m.GetName())
    x.String(m.GetNativeName())
    x.String(m.GetLangCode())
    if (flags & (1 << 1)) != 0 { x.String(m.GetBaseLangCode()) }
    x.String(m.GetPluralCode())
    x.Int(m.GetStringsCount())
    x.Int(m.GetTranslatedCount())
    x.String(m.GetTranslationsUrl())

    return x.buf
}

func (m* TLLangPackLanguage114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetOfficial(true) }
    if (flags & (1 << 2)) != 0 { m.SetRtl(true) }
    if (flags & (1 << 3)) != 0 { m.SetBeta(true) }
    m.SetName(dbuf.String())
    m.SetNativeName(dbuf.String())
    m.SetLangCode(dbuf.String())
    if (flags & (1 << 1)) != 0 { m.SetBaseLangCode(dbuf.String()) }
    m.SetPluralCode(dbuf.String())
    m.SetStringsCount(dbuf.Int())
    m.SetTranslatedCount(dbuf.Int())
    m.SetTranslationsUrl(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// JSONObjectValue <--
//  + TL_JsonObjectValue
//

func (m *JSONObjectValue) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_jsonObjectValue:
        t := m.To_JsonObjectValue()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *JSONObjectValue) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_jsonObjectValue:
        m2 := &TLJsonObjectValue{&JSONObjectValue_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// jsonObjectValue#c0de1bd9 key:string value:JSONValue = JSONObjectValue;
func (m *JSONObjectValue) To_JsonObjectValue() *TLJsonObjectValue {
    return &TLJsonObjectValue{
        Data2: m.Data2,
    }
}



// jsonObjectValue#c0de1bd9 key:string value:JSONValue = JSONObjectValue;
func (m *TLJsonObjectValue) To_JSONObjectValue() *JSONObjectValue {
    return &JSONObjectValue{
        Constructor: TLConstructor_CRC32_jsonObjectValue,
        Data2: m.Data2,
    }
}


func (m *TLJsonObjectValue) SetKey(v string) { m.Data2.Key = v }
func (m *TLJsonObjectValue) GetKey() string { return m.Data2.Key }

func (m *TLJsonObjectValue) SetValue(v *JSONValue) { m.Data2.Value = v }
func (m *TLJsonObjectValue) GetValue() *JSONValue { return m.Data2.Value }


func NewTLJsonObjectValue() * TLJsonObjectValue {
    return &TLJsonObjectValue{ Data2: &JSONObjectValue_Data{} }
}

func (m* TLJsonObjectValue) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_jsonObjectValue))

    x.String(m.GetKey())
    x.Bytes(m.GetValue().Encode())

    return x.buf
}

func (m* TLJsonObjectValue) Decode(dbuf *DecodeBuf) error {
    m.SetKey(dbuf.String())
    m2 := &JSONValue{}
    m2.Decode(dbuf)
    m.SetValue(m2)

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// WebAuthorization <--
//  + TL_WebAuthorization
//

func (m *WebAuthorization) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_webAuthorization:
        t := m.To_WebAuthorization()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *WebAuthorization) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_webAuthorization:
        m2 := &TLWebAuthorization{&WebAuthorization_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// webAuthorization#cac943f2 hash:long bot_id:int domain:string browser:string platform:string date_created:int date_active:int ip:string region:string = WebAuthorization;
func (m *WebAuthorization) To_WebAuthorization() *TLWebAuthorization {
    return &TLWebAuthorization{
        Data2: m.Data2,
    }
}



// webAuthorization#cac943f2 hash:long bot_id:int domain:string browser:string platform:string date_created:int date_active:int ip:string region:string = WebAuthorization;
func (m *TLWebAuthorization) To_WebAuthorization() *WebAuthorization {
    return &WebAuthorization{
        Constructor: TLConstructor_CRC32_webAuthorization,
        Data2: m.Data2,
    }
}


func (m *TLWebAuthorization) SetHash(v int64) { m.Data2.Hash = v }
func (m *TLWebAuthorization) GetHash() int64 { return m.Data2.Hash }

func (m *TLWebAuthorization) SetBotId(v int32) { m.Data2.BotId = v }
func (m *TLWebAuthorization) GetBotId() int32 { return m.Data2.BotId }

func (m *TLWebAuthorization) SetDomain(v string) { m.Data2.Domain = v }
func (m *TLWebAuthorization) GetDomain() string { return m.Data2.Domain }

func (m *TLWebAuthorization) SetBrowser(v string) { m.Data2.Browser = v }
func (m *TLWebAuthorization) GetBrowser() string { return m.Data2.Browser }

func (m *TLWebAuthorization) SetPlatform(v string) { m.Data2.Platform = v }
func (m *TLWebAuthorization) GetPlatform() string { return m.Data2.Platform }

func (m *TLWebAuthorization) SetDateCreated(v int32) { m.Data2.DateCreated = v }
func (m *TLWebAuthorization) GetDateCreated() int32 { return m.Data2.DateCreated }

func (m *TLWebAuthorization) SetDateActive(v int32) { m.Data2.DateActive = v }
func (m *TLWebAuthorization) GetDateActive() int32 { return m.Data2.DateActive }

func (m *TLWebAuthorization) SetIp(v string) { m.Data2.Ip = v }
func (m *TLWebAuthorization) GetIp() string { return m.Data2.Ip }

func (m *TLWebAuthorization) SetRegion(v string) { m.Data2.Region = v }
func (m *TLWebAuthorization) GetRegion() string { return m.Data2.Region }


func NewTLWebAuthorization() * TLWebAuthorization {
    return &TLWebAuthorization{ Data2: &WebAuthorization_Data{} }
}

func (m* TLWebAuthorization) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_webAuthorization))

    x.Long(m.GetHash())
    x.Int(m.GetBotId())
    x.String(m.GetDomain())
    x.String(m.GetBrowser())
    x.String(m.GetPlatform())
    x.Int(m.GetDateCreated())
    x.Int(m.GetDateActive())
    x.String(m.GetIp())
    x.String(m.GetRegion())

    return x.buf
}

func (m* TLWebAuthorization) Decode(dbuf *DecodeBuf) error {
    m.SetHash(dbuf.Long())
    m.SetBotId(dbuf.Int())
    m.SetDomain(dbuf.String())
    m.SetBrowser(dbuf.String())
    m.SetPlatform(dbuf.String())
    m.SetDateCreated(dbuf.Int())
    m.SetDateActive(dbuf.Int())
    m.SetIp(dbuf.String())
    m.SetRegion(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputBotInlineMessageID <--
//  + TL_InputBotInlineMessageID
//

func (m *InputBotInlineMessageID) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputBotInlineMessageID:
        t := m.To_InputBotInlineMessageID()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputBotInlineMessageID) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputBotInlineMessageID:
        m2 := &TLInputBotInlineMessageID{&InputBotInlineMessageID_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputBotInlineMessageID#890c3d89 dc_id:int id:long access_hash:long = InputBotInlineMessageID;
func (m *InputBotInlineMessageID) To_InputBotInlineMessageID() *TLInputBotInlineMessageID {
    return &TLInputBotInlineMessageID{
        Data2: m.Data2,
    }
}



// inputBotInlineMessageID#890c3d89 dc_id:int id:long access_hash:long = InputBotInlineMessageID;
func (m *TLInputBotInlineMessageID) To_InputBotInlineMessageID() *InputBotInlineMessageID {
    return &InputBotInlineMessageID{
        Constructor: TLConstructor_CRC32_inputBotInlineMessageID,
        Data2: m.Data2,
    }
}


func (m *TLInputBotInlineMessageID) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLInputBotInlineMessageID) GetDcId() int32 { return m.Data2.DcId }

func (m *TLInputBotInlineMessageID) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputBotInlineMessageID) GetId() int64 { return m.Data2.Id }

func (m *TLInputBotInlineMessageID) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputBotInlineMessageID) GetAccessHash() int64 { return m.Data2.AccessHash }


func NewTLInputBotInlineMessageID() * TLInputBotInlineMessageID {
    return &TLInputBotInlineMessageID{ Data2: &InputBotInlineMessageID_Data{} }
}

func (m* TLInputBotInlineMessageID) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputBotInlineMessageID))

    x.Int(m.GetDcId())
    x.Long(m.GetId())
    x.Long(m.GetAccessHash())

    return x.buf
}

func (m* TLInputBotInlineMessageID) Decode(dbuf *DecodeBuf) error {
    m.SetDcId(dbuf.Int())
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputStickeredMedia <--
//  + TL_InputStickeredMediaPhoto
//  + TL_InputStickeredMediaDocument
//

func (m *InputStickeredMedia) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputStickeredMediaPhoto:
        t := m.To_InputStickeredMediaPhoto()
        return t.Encode()
    case TLConstructor_CRC32_inputStickeredMediaDocument:
        t := m.To_InputStickeredMediaDocument()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputStickeredMedia) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputStickeredMediaPhoto:
        m2 := &TLInputStickeredMediaPhoto{&InputStickeredMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputStickeredMediaDocument:
        m2 := &TLInputStickeredMediaDocument{&InputStickeredMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputStickeredMediaPhoto#4a992157 id:InputPhoto = InputStickeredMedia;
func (m *InputStickeredMedia) To_InputStickeredMediaPhoto() *TLInputStickeredMediaPhoto {
    return &TLInputStickeredMediaPhoto{
        Data2: m.Data2,
    }
}

// inputStickeredMediaDocument#438865b id:InputDocument = InputStickeredMedia;
func (m *InputStickeredMedia) To_InputStickeredMediaDocument() *TLInputStickeredMediaDocument {
    return &TLInputStickeredMediaDocument{
        Data2: m.Data2,
    }
}



// inputStickeredMediaPhoto#4a992157 id:InputPhoto = InputStickeredMedia;
func (m *TLInputStickeredMediaPhoto) To_InputStickeredMedia() *InputStickeredMedia {
    return &InputStickeredMedia{
        Constructor: TLConstructor_CRC32_inputStickeredMediaPhoto,
        Data2: m.Data2,
    }
}


func (m *TLInputStickeredMediaPhoto) SetId(v *InputPhoto) { m.Data2.Id_1 = v }
func (m *TLInputStickeredMediaPhoto) GetId() *InputPhoto { return m.Data2.Id_1 }


func NewTLInputStickeredMediaPhoto() * TLInputStickeredMediaPhoto {
    return &TLInputStickeredMediaPhoto{ Data2: &InputStickeredMedia_Data{} }
}

func (m* TLInputStickeredMediaPhoto) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputStickeredMediaPhoto))

    x.Bytes(m.GetId().Encode())

    return x.buf
}

func (m* TLInputStickeredMediaPhoto) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPhoto{}
    m1.Decode(dbuf)
    m.SetId(m1)

    return dbuf.err
}
// inputStickeredMediaDocument#438865b id:InputDocument = InputStickeredMedia;
func (m *TLInputStickeredMediaDocument) To_InputStickeredMedia() *InputStickeredMedia {
    return &InputStickeredMedia{
        Constructor: TLConstructor_CRC32_inputStickeredMediaDocument,
        Data2: m.Data2,
    }
}


func (m *TLInputStickeredMediaDocument) SetId(v *InputDocument) { m.Data2.Id_2 = v }
func (m *TLInputStickeredMediaDocument) GetId() *InputDocument { return m.Data2.Id_2 }


func NewTLInputStickeredMediaDocument() * TLInputStickeredMediaDocument {
    return &TLInputStickeredMediaDocument{ Data2: &InputStickeredMedia_Data{} }
}

func (m* TLInputStickeredMediaDocument) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputStickeredMediaDocument))

    x.Bytes(m.GetId().Encode())

    return x.buf
}

func (m* TLInputStickeredMediaDocument) Decode(dbuf *DecodeBuf) error {
    m1 := &InputDocument{}
    m1.Decode(dbuf)
    m.SetId(m1)

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// PointsRankItem <--
//  + TL_PointsRankItem
//

func (m *PointsRankItem) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_pointsRankItem:
        t := m.To_PointsRankItem()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *PointsRankItem) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_pointsRankItem:
        m2 := &TLPointsRankItem{&PointsRankItem_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// pointsRankItem#e335f0f5 rank:int user_id:int points:int json_content:string = PointsRankItem;
func (m *PointsRankItem) To_PointsRankItem() *TLPointsRankItem {
    return &TLPointsRankItem{
        Data2: m.Data2,
    }
}



// pointsRankItem#e335f0f5 rank:int user_id:int points:int json_content:string = PointsRankItem;
func (m *TLPointsRankItem) To_PointsRankItem() *PointsRankItem {
    return &PointsRankItem{
        Constructor: TLConstructor_CRC32_pointsRankItem,
        Data2: m.Data2,
    }
}


func (m *TLPointsRankItem) SetRank(v int32) { m.Data2.Rank = v }
func (m *TLPointsRankItem) GetRank() int32 { return m.Data2.Rank }

func (m *TLPointsRankItem) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLPointsRankItem) GetUserId() int32 { return m.Data2.UserId }

func (m *TLPointsRankItem) SetPoints(v int32) { m.Data2.Points = v }
func (m *TLPointsRankItem) GetPoints() int32 { return m.Data2.Points }

func (m *TLPointsRankItem) SetJsonContent(v string) { m.Data2.JsonContent = v }
func (m *TLPointsRankItem) GetJsonContent() string { return m.Data2.JsonContent }


func NewTLPointsRankItem() * TLPointsRankItem {
    return &TLPointsRankItem{ Data2: &PointsRankItem_Data{} }
}

func (m* TLPointsRankItem) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pointsRankItem))

    x.Int(m.GetRank())
    x.Int(m.GetUserId())
    x.Int(m.GetPoints())
    x.String(m.GetJsonContent())

    return x.buf
}

func (m* TLPointsRankItem) Decode(dbuf *DecodeBuf) error {
    m.SetRank(dbuf.Int())
    m.SetUserId(dbuf.Int())
    m.SetPoints(dbuf.Int())
    m.SetJsonContent(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Help_DeepLinkInfo <--
//  + TL_HelpDeepLinkInfoEmpty
//  + TL_HelpDeepLinkInfo
//

func (m *Help_DeepLinkInfo) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_help_deepLinkInfoEmpty:
        t := m.To_HelpDeepLinkInfoEmpty()
        return t.Encode()
    case TLConstructor_CRC32_help_deepLinkInfo:
        t := m.To_HelpDeepLinkInfo()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Help_DeepLinkInfo) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_help_deepLinkInfoEmpty:
        m2 := &TLHelpDeepLinkInfoEmpty{&Help_DeepLinkInfo_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_help_deepLinkInfo:
        m2 := &TLHelpDeepLinkInfo{&Help_DeepLinkInfo_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// help.deepLinkInfoEmpty#66afa166 = help.DeepLinkInfo;
func (m *Help_DeepLinkInfo) To_HelpDeepLinkInfoEmpty() *TLHelpDeepLinkInfoEmpty {
    return &TLHelpDeepLinkInfoEmpty{
        Data2: m.Data2,
    }
}

// help.deepLinkInfo#6a4ee832 flags:# update_app:flags.0?true message:string entities:flags.1?Vector<MessageEntity> = help.DeepLinkInfo;
func (m *Help_DeepLinkInfo) To_HelpDeepLinkInfo() *TLHelpDeepLinkInfo {
    return &TLHelpDeepLinkInfo{
        Data2: m.Data2,
    }
}



// help.deepLinkInfoEmpty#66afa166 = help.DeepLinkInfo;
func (m *TLHelpDeepLinkInfoEmpty) To_Help_DeepLinkInfo() *Help_DeepLinkInfo {
    return &Help_DeepLinkInfo{
        Constructor: TLConstructor_CRC32_help_deepLinkInfoEmpty,
        Data2: m.Data2,
    }
}



func NewTLHelpDeepLinkInfoEmpty() * TLHelpDeepLinkInfoEmpty {
    return &TLHelpDeepLinkInfoEmpty{ Data2: &Help_DeepLinkInfo_Data{} }
}

func (m* TLHelpDeepLinkInfoEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_help_deepLinkInfoEmpty))


    return x.buf
}

func (m* TLHelpDeepLinkInfoEmpty) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// help.deepLinkInfo#6a4ee832 flags:# update_app:flags.0?true message:string entities:flags.1?Vector<MessageEntity> = help.DeepLinkInfo;
func (m *TLHelpDeepLinkInfo) To_Help_DeepLinkInfo() *Help_DeepLinkInfo {
    return &Help_DeepLinkInfo{
        Constructor: TLConstructor_CRC32_help_deepLinkInfo,
        Data2: m.Data2,
    }
}


func (m *TLHelpDeepLinkInfo) SetUpdateApp(v bool) { m.Data2.UpdateApp = v }
func (m *TLHelpDeepLinkInfo) GetUpdateApp() bool { return m.Data2.UpdateApp }

func (m *TLHelpDeepLinkInfo) SetMessage(v string) { m.Data2.Message = v }
func (m *TLHelpDeepLinkInfo) GetMessage() string { return m.Data2.Message }

func (m *TLHelpDeepLinkInfo) SetEntities(v []*MessageEntity) { m.Data2.Entities = v }
func (m *TLHelpDeepLinkInfo) GetEntities() []*MessageEntity { return m.Data2.Entities }


func NewTLHelpDeepLinkInfo() * TLHelpDeepLinkInfo {
    return &TLHelpDeepLinkInfo{ Data2: &Help_DeepLinkInfo_Data{} }
}

func (m* TLHelpDeepLinkInfo) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_help_deepLinkInfo))

    // flags
    var flags uint32 = 0
    if m.GetUpdateApp() == true { flags |= 1 << 0 }
    if m.GetEntities() != nil { flags |= 1 << 1 }
	x.UInt(flags)

    
    x.String(m.GetMessage())
    if (flags & (1 << 1)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetEntities())))
for _, v := range m.GetEntities() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}

    return x.buf
}

func (m* TLHelpDeepLinkInfo) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetUpdateApp(true) }
    m.SetMessage(dbuf.String())
    if (flags & (1 << 1)) != 0 {
 c4 := dbuf.Int()
if c4 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
	return dbuf.err
}
l4 := dbuf.Int()
v4 := make([]*MessageEntity, l4)
for i := int32(0); i < l4; i++ {
	v4[i] = &MessageEntity{}
	v4[i].Decode(dbuf)
}
m.SetEntities(v4)
 
}

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// SecureValueType <--
//  + TL_SecureValueTypePersonalDetails
//  + TL_SecureValueTypePassport
//  + TL_SecureValueTypeDriverLicense
//  + TL_SecureValueTypeIdentityCard
//  + TL_SecureValueTypeInternalPassport
//  + TL_SecureValueTypeAddress
//  + TL_SecureValueTypeUtilityBill
//  + TL_SecureValueTypeBankStatement
//  + TL_SecureValueTypeRentalAgreement
//  + TL_SecureValueTypePassportRegistration
//  + TL_SecureValueTypeTemporaryRegistration
//  + TL_SecureValueTypePhone
//  + TL_SecureValueTypeEmail
//

func (m *SecureValueType) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_secureValueTypePersonalDetails:
        t := m.To_SecureValueTypePersonalDetails()
        return t.Encode()
    case TLConstructor_CRC32_secureValueTypePassport:
        t := m.To_SecureValueTypePassport()
        return t.Encode()
    case TLConstructor_CRC32_secureValueTypeDriverLicense:
        t := m.To_SecureValueTypeDriverLicense()
        return t.Encode()
    case TLConstructor_CRC32_secureValueTypeIdentityCard:
        t := m.To_SecureValueTypeIdentityCard()
        return t.Encode()
    case TLConstructor_CRC32_secureValueTypeInternalPassport:
        t := m.To_SecureValueTypeInternalPassport()
        return t.Encode()
    case TLConstructor_CRC32_secureValueTypeAddress:
        t := m.To_SecureValueTypeAddress()
        return t.Encode()
    case TLConstructor_CRC32_secureValueTypeUtilityBill:
        t := m.To_SecureValueTypeUtilityBill()
        return t.Encode()
    case TLConstructor_CRC32_secureValueTypeBankStatement:
        t := m.To_SecureValueTypeBankStatement()
        return t.Encode()
    case TLConstructor_CRC32_secureValueTypeRentalAgreement:
        t := m.To_SecureValueTypeRentalAgreement()
        return t.Encode()
    case TLConstructor_CRC32_secureValueTypePassportRegistration:
        t := m.To_SecureValueTypePassportRegistration()
        return t.Encode()
    case TLConstructor_CRC32_secureValueTypeTemporaryRegistration:
        t := m.To_SecureValueTypeTemporaryRegistration()
        return t.Encode()
    case TLConstructor_CRC32_secureValueTypePhone:
        t := m.To_SecureValueTypePhone()
        return t.Encode()
    case TLConstructor_CRC32_secureValueTypeEmail:
        t := m.To_SecureValueTypeEmail()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *SecureValueType) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_secureValueTypePersonalDetails:
        m2 := &TLSecureValueTypePersonalDetails{&SecureValueType_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_secureValueTypePassport:
        m2 := &TLSecureValueTypePassport{&SecureValueType_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_secureValueTypeDriverLicense:
        m2 := &TLSecureValueTypeDriverLicense{&SecureValueType_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_secureValueTypeIdentityCard:
        m2 := &TLSecureValueTypeIdentityCard{&SecureValueType_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_secureValueTypeInternalPassport:
        m2 := &TLSecureValueTypeInternalPassport{&SecureValueType_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_secureValueTypeAddress:
        m2 := &TLSecureValueTypeAddress{&SecureValueType_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_secureValueTypeUtilityBill:
        m2 := &TLSecureValueTypeUtilityBill{&SecureValueType_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_secureValueTypeBankStatement:
        m2 := &TLSecureValueTypeBankStatement{&SecureValueType_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_secureValueTypeRentalAgreement:
        m2 := &TLSecureValueTypeRentalAgreement{&SecureValueType_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_secureValueTypePassportRegistration:
        m2 := &TLSecureValueTypePassportRegistration{&SecureValueType_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_secureValueTypeTemporaryRegistration:
        m2 := &TLSecureValueTypeTemporaryRegistration{&SecureValueType_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_secureValueTypePhone:
        m2 := &TLSecureValueTypePhone{&SecureValueType_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_secureValueTypeEmail:
        m2 := &TLSecureValueTypeEmail{&SecureValueType_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// secureValueTypePersonalDetails#9d2a81e3 = SecureValueType;
func (m *SecureValueType) To_SecureValueTypePersonalDetails() *TLSecureValueTypePersonalDetails {
    return &TLSecureValueTypePersonalDetails{
        Data2: m.Data2,
    }
}

// secureValueTypePassport#3dac6a00 = SecureValueType;
func (m *SecureValueType) To_SecureValueTypePassport() *TLSecureValueTypePassport {
    return &TLSecureValueTypePassport{
        Data2: m.Data2,
    }
}

// secureValueTypeDriverLicense#6e425c4 = SecureValueType;
func (m *SecureValueType) To_SecureValueTypeDriverLicense() *TLSecureValueTypeDriverLicense {
    return &TLSecureValueTypeDriverLicense{
        Data2: m.Data2,
    }
}

// secureValueTypeIdentityCard#a0d0744b = SecureValueType;
func (m *SecureValueType) To_SecureValueTypeIdentityCard() *TLSecureValueTypeIdentityCard {
    return &TLSecureValueTypeIdentityCard{
        Data2: m.Data2,
    }
}

// secureValueTypeInternalPassport#99a48f23 = SecureValueType;
func (m *SecureValueType) To_SecureValueTypeInternalPassport() *TLSecureValueTypeInternalPassport {
    return &TLSecureValueTypeInternalPassport{
        Data2: m.Data2,
    }
}

// secureValueTypeAddress#cbe31e26 = SecureValueType;
func (m *SecureValueType) To_SecureValueTypeAddress() *TLSecureValueTypeAddress {
    return &TLSecureValueTypeAddress{
        Data2: m.Data2,
    }
}

// secureValueTypeUtilityBill#fc36954e = SecureValueType;
func (m *SecureValueType) To_SecureValueTypeUtilityBill() *TLSecureValueTypeUtilityBill {
    return &TLSecureValueTypeUtilityBill{
        Data2: m.Data2,
    }
}

// secureValueTypeBankStatement#89137c0d = SecureValueType;
func (m *SecureValueType) To_SecureValueTypeBankStatement() *TLSecureValueTypeBankStatement {
    return &TLSecureValueTypeBankStatement{
        Data2: m.Data2,
    }
}

// secureValueTypeRentalAgreement#8b883488 = SecureValueType;
func (m *SecureValueType) To_SecureValueTypeRentalAgreement() *TLSecureValueTypeRentalAgreement {
    return &TLSecureValueTypeRentalAgreement{
        Data2: m.Data2,
    }
}

// secureValueTypePassportRegistration#99e3806a = SecureValueType;
func (m *SecureValueType) To_SecureValueTypePassportRegistration() *TLSecureValueTypePassportRegistration {
    return &TLSecureValueTypePassportRegistration{
        Data2: m.Data2,
    }
}

// secureValueTypeTemporaryRegistration#ea02ec33 = SecureValueType;
func (m *SecureValueType) To_SecureValueTypeTemporaryRegistration() *TLSecureValueTypeTemporaryRegistration {
    return &TLSecureValueTypeTemporaryRegistration{
        Data2: m.Data2,
    }
}

// secureValueTypePhone#b320aadb = SecureValueType;
func (m *SecureValueType) To_SecureValueTypePhone() *TLSecureValueTypePhone {
    return &TLSecureValueTypePhone{
        Data2: m.Data2,
    }
}

// secureValueTypeEmail#8e3ca7ee = SecureValueType;
func (m *SecureValueType) To_SecureValueTypeEmail() *TLSecureValueTypeEmail {
    return &TLSecureValueTypeEmail{
        Data2: m.Data2,
    }
}



// secureValueTypePersonalDetails#9d2a81e3 = SecureValueType;
func (m *TLSecureValueTypePersonalDetails) To_SecureValueType() *SecureValueType {
    return &SecureValueType{
        Constructor: TLConstructor_CRC32_secureValueTypePersonalDetails,
        Data2: m.Data2,
    }
}



func NewTLSecureValueTypePersonalDetails() * TLSecureValueTypePersonalDetails {
    return &TLSecureValueTypePersonalDetails{ Data2: &SecureValueType_Data{} }
}

func (m* TLSecureValueTypePersonalDetails) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_secureValueTypePersonalDetails))


    return x.buf
}

func (m* TLSecureValueTypePersonalDetails) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// secureValueTypePassport#3dac6a00 = SecureValueType;
func (m *TLSecureValueTypePassport) To_SecureValueType() *SecureValueType {
    return &SecureValueType{
        Constructor: TLConstructor_CRC32_secureValueTypePassport,
        Data2: m.Data2,
    }
}



func NewTLSecureValueTypePassport() * TLSecureValueTypePassport {
    return &TLSecureValueTypePassport{ Data2: &SecureValueType_Data{} }
}

func (m* TLSecureValueTypePassport) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_secureValueTypePassport))


    return x.buf
}

func (m* TLSecureValueTypePassport) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// secureValueTypeDriverLicense#6e425c4 = SecureValueType;
func (m *TLSecureValueTypeDriverLicense) To_SecureValueType() *SecureValueType {
    return &SecureValueType{
        Constructor: TLConstructor_CRC32_secureValueTypeDriverLicense,
        Data2: m.Data2,
    }
}



func NewTLSecureValueTypeDriverLicense() * TLSecureValueTypeDriverLicense {
    return &TLSecureValueTypeDriverLicense{ Data2: &SecureValueType_Data{} }
}

func (m* TLSecureValueTypeDriverLicense) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_secureValueTypeDriverLicense))


    return x.buf
}

func (m* TLSecureValueTypeDriverLicense) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// secureValueTypeIdentityCard#a0d0744b = SecureValueType;
func (m *TLSecureValueTypeIdentityCard) To_SecureValueType() *SecureValueType {
    return &SecureValueType{
        Constructor: TLConstructor_CRC32_secureValueTypeIdentityCard,
        Data2: m.Data2,
    }
}



func NewTLSecureValueTypeIdentityCard() * TLSecureValueTypeIdentityCard {
    return &TLSecureValueTypeIdentityCard{ Data2: &SecureValueType_Data{} }
}

func (m* TLSecureValueTypeIdentityCard) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_secureValueTypeIdentityCard))


    return x.buf
}

func (m* TLSecureValueTypeIdentityCard) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// secureValueTypeInternalPassport#99a48f23 = SecureValueType;
func (m *TLSecureValueTypeInternalPassport) To_SecureValueType() *SecureValueType {
    return &SecureValueType{
        Constructor: TLConstructor_CRC32_secureValueTypeInternalPassport,
        Data2: m.Data2,
    }
}



func NewTLSecureValueTypeInternalPassport() * TLSecureValueTypeInternalPassport {
    return &TLSecureValueTypeInternalPassport{ Data2: &SecureValueType_Data{} }
}

func (m* TLSecureValueTypeInternalPassport) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_secureValueTypeInternalPassport))


    return x.buf
}

func (m* TLSecureValueTypeInternalPassport) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// secureValueTypeAddress#cbe31e26 = SecureValueType;
func (m *TLSecureValueTypeAddress) To_SecureValueType() *SecureValueType {
    return &SecureValueType{
        Constructor: TLConstructor_CRC32_secureValueTypeAddress,
        Data2: m.Data2,
    }
}



func NewTLSecureValueTypeAddress() * TLSecureValueTypeAddress {
    return &TLSecureValueTypeAddress{ Data2: &SecureValueType_Data{} }
}

func (m* TLSecureValueTypeAddress) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_secureValueTypeAddress))


    return x.buf
}

func (m* TLSecureValueTypeAddress) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// secureValueTypeUtilityBill#fc36954e = SecureValueType;
func (m *TLSecureValueTypeUtilityBill) To_SecureValueType() *SecureValueType {
    return &SecureValueType{
        Constructor: TLConstructor_CRC32_secureValueTypeUtilityBill,
        Data2: m.Data2,
    }
}



func NewTLSecureValueTypeUtilityBill() * TLSecureValueTypeUtilityBill {
    return &TLSecureValueTypeUtilityBill{ Data2: &SecureValueType_Data{} }
}

func (m* TLSecureValueTypeUtilityBill) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_secureValueTypeUtilityBill))


    return x.buf
}

func (m* TLSecureValueTypeUtilityBill) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// secureValueTypeBankStatement#89137c0d = SecureValueType;
func (m *TLSecureValueTypeBankStatement) To_SecureValueType() *SecureValueType {
    return &SecureValueType{
        Constructor: TLConstructor_CRC32_secureValueTypeBankStatement,
        Data2: m.Data2,
    }
}



func NewTLSecureValueTypeBankStatement() * TLSecureValueTypeBankStatement {
    return &TLSecureValueTypeBankStatement{ Data2: &SecureValueType_Data{} }
}

func (m* TLSecureValueTypeBankStatement) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_secureValueTypeBankStatement))


    return x.buf
}

func (m* TLSecureValueTypeBankStatement) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// secureValueTypeRentalAgreement#8b883488 = SecureValueType;
func (m *TLSecureValueTypeRentalAgreement) To_SecureValueType() *SecureValueType {
    return &SecureValueType{
        Constructor: TLConstructor_CRC32_secureValueTypeRentalAgreement,
        Data2: m.Data2,
    }
}



func NewTLSecureValueTypeRentalAgreement() * TLSecureValueTypeRentalAgreement {
    return &TLSecureValueTypeRentalAgreement{ Data2: &SecureValueType_Data{} }
}

func (m* TLSecureValueTypeRentalAgreement) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_secureValueTypeRentalAgreement))


    return x.buf
}

func (m* TLSecureValueTypeRentalAgreement) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// secureValueTypePassportRegistration#99e3806a = SecureValueType;
func (m *TLSecureValueTypePassportRegistration) To_SecureValueType() *SecureValueType {
    return &SecureValueType{
        Constructor: TLConstructor_CRC32_secureValueTypePassportRegistration,
        Data2: m.Data2,
    }
}



func NewTLSecureValueTypePassportRegistration() * TLSecureValueTypePassportRegistration {
    return &TLSecureValueTypePassportRegistration{ Data2: &SecureValueType_Data{} }
}

func (m* TLSecureValueTypePassportRegistration) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_secureValueTypePassportRegistration))


    return x.buf
}

func (m* TLSecureValueTypePassportRegistration) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// secureValueTypeTemporaryRegistration#ea02ec33 = SecureValueType;
func (m *TLSecureValueTypeTemporaryRegistration) To_SecureValueType() *SecureValueType {
    return &SecureValueType{
        Constructor: TLConstructor_CRC32_secureValueTypeTemporaryRegistration,
        Data2: m.Data2,
    }
}



func NewTLSecureValueTypeTemporaryRegistration() * TLSecureValueTypeTemporaryRegistration {
    return &TLSecureValueTypeTemporaryRegistration{ Data2: &SecureValueType_Data{} }
}

func (m* TLSecureValueTypeTemporaryRegistration) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_secureValueTypeTemporaryRegistration))


    return x.buf
}

func (m* TLSecureValueTypeTemporaryRegistration) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// secureValueTypePhone#b320aadb = SecureValueType;
func (m *TLSecureValueTypePhone) To_SecureValueType() *SecureValueType {
    return &SecureValueType{
        Constructor: TLConstructor_CRC32_secureValueTypePhone,
        Data2: m.Data2,
    }
}



func NewTLSecureValueTypePhone() * TLSecureValueTypePhone {
    return &TLSecureValueTypePhone{ Data2: &SecureValueType_Data{} }
}

func (m* TLSecureValueTypePhone) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_secureValueTypePhone))


    return x.buf
}

func (m* TLSecureValueTypePhone) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// secureValueTypeEmail#8e3ca7ee = SecureValueType;
func (m *TLSecureValueTypeEmail) To_SecureValueType() *SecureValueType {
    return &SecureValueType{
        Constructor: TLConstructor_CRC32_secureValueTypeEmail,
        Data2: m.Data2,
    }
}



func NewTLSecureValueTypeEmail() * TLSecureValueTypeEmail {
    return &TLSecureValueTypeEmail{ Data2: &SecureValueType_Data{} }
}

func (m* TLSecureValueTypeEmail) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_secureValueTypeEmail))


    return x.buf
}

func (m* TLSecureValueTypeEmail) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// PageTableCell <--
//  + TL_PageTableCell
//

func (m *PageTableCell) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_pageTableCell:
        t := m.To_PageTableCell()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *PageTableCell) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_pageTableCell:
        m2 := &TLPageTableCell{&PageTableCell_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// pageTableCell#34566b6a flags:# header:flags.0?true align_center:flags.3?true align_right:flags.4?true valign_middle:flags.5?true valign_bottom:flags.6?true text:flags.7?RichText colspan:flags.1?int rowspan:flags.2?int = PageTableCell;
func (m *PageTableCell) To_PageTableCell() *TLPageTableCell {
    return &TLPageTableCell{
        Data2: m.Data2,
    }
}



// pageTableCell#34566b6a flags:# header:flags.0?true align_center:flags.3?true align_right:flags.4?true valign_middle:flags.5?true valign_bottom:flags.6?true text:flags.7?RichText colspan:flags.1?int rowspan:flags.2?int = PageTableCell;
func (m *TLPageTableCell) To_PageTableCell() *PageTableCell {
    return &PageTableCell{
        Constructor: TLConstructor_CRC32_pageTableCell,
        Data2: m.Data2,
    }
}


func (m *TLPageTableCell) SetHeader(v bool) { m.Data2.Header = v }
func (m *TLPageTableCell) GetHeader() bool { return m.Data2.Header }

func (m *TLPageTableCell) SetAlignCenter(v bool) { m.Data2.AlignCenter = v }
func (m *TLPageTableCell) GetAlignCenter() bool { return m.Data2.AlignCenter }

func (m *TLPageTableCell) SetAlignRight(v bool) { m.Data2.AlignRight = v }
func (m *TLPageTableCell) GetAlignRight() bool { return m.Data2.AlignRight }

func (m *TLPageTableCell) SetValignMiddle(v bool) { m.Data2.ValignMiddle = v }
func (m *TLPageTableCell) GetValignMiddle() bool { return m.Data2.ValignMiddle }

func (m *TLPageTableCell) SetValignBottom(v bool) { m.Data2.ValignBottom = v }
func (m *TLPageTableCell) GetValignBottom() bool { return m.Data2.ValignBottom }

func (m *TLPageTableCell) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageTableCell) GetText() *RichText { return m.Data2.Text }

func (m *TLPageTableCell) SetColspan(v int32) { m.Data2.Colspan = v }
func (m *TLPageTableCell) GetColspan() int32 { return m.Data2.Colspan }

func (m *TLPageTableCell) SetRowspan(v int32) { m.Data2.Rowspan = v }
func (m *TLPageTableCell) GetRowspan() int32 { return m.Data2.Rowspan }


func NewTLPageTableCell() * TLPageTableCell {
    return &TLPageTableCell{ Data2: &PageTableCell_Data{} }
}

func (m* TLPageTableCell) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageTableCell))

    // flags
    var flags uint32 = 0
    if m.GetHeader() == true { flags |= 1 << 0 }
    if m.GetAlignCenter() == true { flags |= 1 << 3 }
    if m.GetAlignRight() == true { flags |= 1 << 4 }
    if m.GetValignMiddle() == true { flags |= 1 << 5 }
    if m.GetValignBottom() == true { flags |= 1 << 6 }
    if m.GetText() != nil { flags |= 1 << 7 }
    if m.GetColspan() != 0 { flags |= 1 << 1 }
    if m.GetRowspan() != 0 { flags |= 1 << 2 }
	x.UInt(flags)

    
    
    
    
    
    if (flags & (1 << 7)) != 0 { x.Bytes(m.GetText().Encode()) }
    if (flags & (1 << 1)) != 0 { x.Int(m.GetColspan()) }
    if (flags & (1 << 2)) != 0 { x.Int(m.GetRowspan()) }

    return x.buf
}

func (m* TLPageTableCell) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetHeader(true) }
    if (flags & (1 << 3)) != 0 { m.SetAlignCenter(true) }
    if (flags & (1 << 4)) != 0 { m.SetAlignRight(true) }
    if (flags & (1 << 5)) != 0 { m.SetValignMiddle(true) }
    if (flags & (1 << 6)) != 0 { m.SetValignBottom(true) }
    if (flags & (1 << 7)) != 0 {
 m7 := &RichText{}
    m7.Decode(dbuf)
    m.SetText(m7) 
}
    if (flags & (1 << 1)) != 0 { m.SetColspan(dbuf.Int()) }
    if (flags & (1 << 2)) != 0 { m.SetRowspan(dbuf.Int()) }

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Stats_BroadcastStats <--
//  + TL_StatsBroadcastStats
//

func (m *Stats_BroadcastStats) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_stats_broadcastStats:
        t := m.To_StatsBroadcastStats()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Stats_BroadcastStats) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_stats_broadcastStats:
        m2 := &TLStatsBroadcastStats{&Stats_BroadcastStats_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// stats.broadcastStats#bdf78394 period:StatsDateRangeDays followers:StatsAbsValueAndPrev views_per_post:StatsAbsValueAndPrev shares_per_post:StatsAbsValueAndPrev enabled_notifications:StatsPercentValue growth_graph:StatsGraph followers_graph:StatsGraph mute_graph:StatsGraph top_hours_graph:StatsGraph interactions_graph:StatsGraph iv_interactions_graph:StatsGraph views_by_source_graph:StatsGraph new_followers_by_source_graph:StatsGraph languages_graph:StatsGraph recent_message_interactions:Vector<MessageInteractionCounters> = stats.BroadcastStats;
func (m *Stats_BroadcastStats) To_StatsBroadcastStats() *TLStatsBroadcastStats {
    return &TLStatsBroadcastStats{
        Data2: m.Data2,
    }
}



// stats.broadcastStats#bdf78394 period:StatsDateRangeDays followers:StatsAbsValueAndPrev views_per_post:StatsAbsValueAndPrev shares_per_post:StatsAbsValueAndPrev enabled_notifications:StatsPercentValue growth_graph:StatsGraph followers_graph:StatsGraph mute_graph:StatsGraph top_hours_graph:StatsGraph interactions_graph:StatsGraph iv_interactions_graph:StatsGraph views_by_source_graph:StatsGraph new_followers_by_source_graph:StatsGraph languages_graph:StatsGraph recent_message_interactions:Vector<MessageInteractionCounters> = stats.BroadcastStats;
func (m *TLStatsBroadcastStats) To_Stats_BroadcastStats() *Stats_BroadcastStats {
    return &Stats_BroadcastStats{
        Constructor: TLConstructor_CRC32_stats_broadcastStats,
        Data2: m.Data2,
    }
}


func (m *TLStatsBroadcastStats) SetPeriod(v *StatsDateRangeDays) { m.Data2.Period = v }
func (m *TLStatsBroadcastStats) GetPeriod() *StatsDateRangeDays { return m.Data2.Period }

func (m *TLStatsBroadcastStats) SetFollowers(v *StatsAbsValueAndPrev) { m.Data2.Followers = v }
func (m *TLStatsBroadcastStats) GetFollowers() *StatsAbsValueAndPrev { return m.Data2.Followers }

func (m *TLStatsBroadcastStats) SetViewsPerPost(v *StatsAbsValueAndPrev) { m.Data2.ViewsPerPost = v }
func (m *TLStatsBroadcastStats) GetViewsPerPost() *StatsAbsValueAndPrev { return m.Data2.ViewsPerPost }

func (m *TLStatsBroadcastStats) SetSharesPerPost(v *StatsAbsValueAndPrev) { m.Data2.SharesPerPost = v }
func (m *TLStatsBroadcastStats) GetSharesPerPost() *StatsAbsValueAndPrev { return m.Data2.SharesPerPost }

func (m *TLStatsBroadcastStats) SetEnabledNotifications(v *StatsPercentValue) { m.Data2.EnabledNotifications = v }
func (m *TLStatsBroadcastStats) GetEnabledNotifications() *StatsPercentValue { return m.Data2.EnabledNotifications }

func (m *TLStatsBroadcastStats) SetGrowthGraph(v *StatsGraph) { m.Data2.GrowthGraph = v }
func (m *TLStatsBroadcastStats) GetGrowthGraph() *StatsGraph { return m.Data2.GrowthGraph }

func (m *TLStatsBroadcastStats) SetFollowersGraph(v *StatsGraph) { m.Data2.FollowersGraph = v }
func (m *TLStatsBroadcastStats) GetFollowersGraph() *StatsGraph { return m.Data2.FollowersGraph }

func (m *TLStatsBroadcastStats) SetMuteGraph(v *StatsGraph) { m.Data2.MuteGraph = v }
func (m *TLStatsBroadcastStats) GetMuteGraph() *StatsGraph { return m.Data2.MuteGraph }

func (m *TLStatsBroadcastStats) SetTopHoursGraph(v *StatsGraph) { m.Data2.TopHoursGraph = v }
func (m *TLStatsBroadcastStats) GetTopHoursGraph() *StatsGraph { return m.Data2.TopHoursGraph }

func (m *TLStatsBroadcastStats) SetInteractionsGraph(v *StatsGraph) { m.Data2.InteractionsGraph = v }
func (m *TLStatsBroadcastStats) GetInteractionsGraph() *StatsGraph { return m.Data2.InteractionsGraph }

func (m *TLStatsBroadcastStats) SetIvInteractionsGraph(v *StatsGraph) { m.Data2.IvInteractionsGraph = v }
func (m *TLStatsBroadcastStats) GetIvInteractionsGraph() *StatsGraph { return m.Data2.IvInteractionsGraph }

func (m *TLStatsBroadcastStats) SetViewsBySourceGraph(v *StatsGraph) { m.Data2.ViewsBySourceGraph = v }
func (m *TLStatsBroadcastStats) GetViewsBySourceGraph() *StatsGraph { return m.Data2.ViewsBySourceGraph }

func (m *TLStatsBroadcastStats) SetNewFollowersBySourceGraph(v *StatsGraph) { m.Data2.NewFollowersBySourceGraph = v }
func (m *TLStatsBroadcastStats) GetNewFollowersBySourceGraph() *StatsGraph { return m.Data2.NewFollowersBySourceGraph }

func (m *TLStatsBroadcastStats) SetLanguagesGraph(v *StatsGraph) { m.Data2.LanguagesGraph = v }
func (m *TLStatsBroadcastStats) GetLanguagesGraph() *StatsGraph { return m.Data2.LanguagesGraph }

func (m *TLStatsBroadcastStats) SetRecentMessageInteractions(v []*MessageInteractionCounters) { m.Data2.RecentMessageInteractions = v }
func (m *TLStatsBroadcastStats) GetRecentMessageInteractions() []*MessageInteractionCounters { return m.Data2.RecentMessageInteractions }


func NewTLStatsBroadcastStats() * TLStatsBroadcastStats {
    return &TLStatsBroadcastStats{ Data2: &Stats_BroadcastStats_Data{} }
}

func (m* TLStatsBroadcastStats) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_stats_broadcastStats))

    x.Bytes(m.GetPeriod().Encode())
    x.Bytes(m.GetFollowers().Encode())
    x.Bytes(m.GetViewsPerPost().Encode())
    x.Bytes(m.GetSharesPerPost().Encode())
    x.Bytes(m.GetEnabledNotifications().Encode())
    x.Bytes(m.GetGrowthGraph().Encode())
    x.Bytes(m.GetFollowersGraph().Encode())
    x.Bytes(m.GetMuteGraph().Encode())
    x.Bytes(m.GetTopHoursGraph().Encode())
    x.Bytes(m.GetInteractionsGraph().Encode())
    x.Bytes(m.GetIvInteractionsGraph().Encode())
    x.Bytes(m.GetViewsBySourceGraph().Encode())
    x.Bytes(m.GetNewFollowersBySourceGraph().Encode())
    x.Bytes(m.GetLanguagesGraph().Encode())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetRecentMessageInteractions())))
for _, v := range m.GetRecentMessageInteractions() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLStatsBroadcastStats) Decode(dbuf *DecodeBuf) error {
    m1 := &StatsDateRangeDays{}
    m1.Decode(dbuf)
    m.SetPeriod(m1)
    m2 := &StatsAbsValueAndPrev{}
    m2.Decode(dbuf)
    m.SetFollowers(m2)
    m3 := &StatsAbsValueAndPrev{}
    m3.Decode(dbuf)
    m.SetViewsPerPost(m3)
    m4 := &StatsAbsValueAndPrev{}
    m4.Decode(dbuf)
    m.SetSharesPerPost(m4)
    m5 := &StatsPercentValue{}
    m5.Decode(dbuf)
    m.SetEnabledNotifications(m5)
    m6 := &StatsGraph{}
    m6.Decode(dbuf)
    m.SetGrowthGraph(m6)
    m7 := &StatsGraph{}
    m7.Decode(dbuf)
    m.SetFollowersGraph(m7)
    m8 := &StatsGraph{}
    m8.Decode(dbuf)
    m.SetMuteGraph(m8)
    m9 := &StatsGraph{}
    m9.Decode(dbuf)
    m.SetTopHoursGraph(m9)
    m10 := &StatsGraph{}
    m10.Decode(dbuf)
    m.SetInteractionsGraph(m10)
    m11 := &StatsGraph{}
    m11.Decode(dbuf)
    m.SetIvInteractionsGraph(m11)
    m12 := &StatsGraph{}
    m12.Decode(dbuf)
    m.SetViewsBySourceGraph(m12)
    m13 := &StatsGraph{}
    m13.Decode(dbuf)
    m.SetNewFollowersBySourceGraph(m13)
    m14 := &StatsGraph{}
    m14.Decode(dbuf)
    m.SetLanguagesGraph(m14)
    c15 := dbuf.Int()
if c15 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 15, c15)
	return dbuf.err
}
l15 := dbuf.Int()
v15 := make([]*MessageInteractionCounters, l15)
for i := int32(0); i < l15; i++ {
	v15[i] = &MessageInteractionCounters{}
	v15[i].Decode(dbuf)
}
m.SetRecentMessageInteractions(v15)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Messages_DhConfig <--
//  + TL_MessagesDhConfigNotModified
//  + TL_MessagesDhConfig
//

func (m *Messages_DhConfig) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messages_dhConfigNotModified:
        t := m.To_MessagesDhConfigNotModified()
        return t.Encode()
    case TLConstructor_CRC32_messages_dhConfig:
        t := m.To_MessagesDhConfig()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Messages_DhConfig) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messages_dhConfigNotModified:
        m2 := &TLMessagesDhConfigNotModified{&Messages_DhConfig_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messages_dhConfig:
        m2 := &TLMessagesDhConfig{&Messages_DhConfig_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messages.dhConfigNotModified#c0e24635 random:bytes = messages.DhConfig;
func (m *Messages_DhConfig) To_MessagesDhConfigNotModified() *TLMessagesDhConfigNotModified {
    return &TLMessagesDhConfigNotModified{
        Data2: m.Data2,
    }
}

// messages.dhConfig#2c221edd g:int p:bytes version:int random:bytes = messages.DhConfig;
func (m *Messages_DhConfig) To_MessagesDhConfig() *TLMessagesDhConfig {
    return &TLMessagesDhConfig{
        Data2: m.Data2,
    }
}



// messages.dhConfigNotModified#c0e24635 random:bytes = messages.DhConfig;
func (m *TLMessagesDhConfigNotModified) To_Messages_DhConfig() *Messages_DhConfig {
    return &Messages_DhConfig{
        Constructor: TLConstructor_CRC32_messages_dhConfigNotModified,
        Data2: m.Data2,
    }
}


func (m *TLMessagesDhConfigNotModified) SetRandom(v []byte) { m.Data2.Random = v }
func (m *TLMessagesDhConfigNotModified) GetRandom() []byte { return m.Data2.Random }


func NewTLMessagesDhConfigNotModified() * TLMessagesDhConfigNotModified {
    return &TLMessagesDhConfigNotModified{ Data2: &Messages_DhConfig_Data{} }
}

func (m* TLMessagesDhConfigNotModified) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_dhConfigNotModified))

    x.StringBytes(m.GetRandom())

    return x.buf
}

func (m* TLMessagesDhConfigNotModified) Decode(dbuf *DecodeBuf) error {
    m.SetRandom(dbuf.StringBytes())

    return dbuf.err
}
// messages.dhConfig#2c221edd g:int p:bytes version:int random:bytes = messages.DhConfig;
func (m *TLMessagesDhConfig) To_Messages_DhConfig() *Messages_DhConfig {
    return &Messages_DhConfig{
        Constructor: TLConstructor_CRC32_messages_dhConfig,
        Data2: m.Data2,
    }
}


func (m *TLMessagesDhConfig) SetG(v int32) { m.Data2.G = v }
func (m *TLMessagesDhConfig) GetG() int32 { return m.Data2.G }

func (m *TLMessagesDhConfig) SetP(v []byte) { m.Data2.P = v }
func (m *TLMessagesDhConfig) GetP() []byte { return m.Data2.P }

func (m *TLMessagesDhConfig) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLMessagesDhConfig) GetVersion() int32 { return m.Data2.Version }

func (m *TLMessagesDhConfig) SetRandom(v []byte) { m.Data2.Random = v }
func (m *TLMessagesDhConfig) GetRandom() []byte { return m.Data2.Random }


func NewTLMessagesDhConfig() * TLMessagesDhConfig {
    return &TLMessagesDhConfig{ Data2: &Messages_DhConfig_Data{} }
}

func (m* TLMessagesDhConfig) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_dhConfig))

    x.Int(m.GetG())
    x.StringBytes(m.GetP())
    x.Int(m.GetVersion())
    x.StringBytes(m.GetRandom())

    return x.buf
}

func (m* TLMessagesDhConfig) Decode(dbuf *DecodeBuf) error {
    m.SetG(dbuf.Int())
    m.SetP(dbuf.StringBytes())
    m.SetVersion(dbuf.Int())
    m.SetRandom(dbuf.StringBytes())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Messages_RecentStickers <--
//  + TL_MessagesRecentStickersNotModified
//  + TL_MessagesRecentStickers
//  + TL_MessagesRecentStickers114
//

func (m *Messages_RecentStickers) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messages_recentStickersNotModified:
        t := m.To_MessagesRecentStickersNotModified()
        return t.Encode()
    case TLConstructor_CRC32_messages_recentStickers:
        t := m.To_MessagesRecentStickers()
        return t.Encode()
    case TLConstructor_CRC32_messages_recentStickers114:
        t := m.To_MessagesRecentStickers114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Messages_RecentStickers) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messages_recentStickersNotModified:
        m2 := &TLMessagesRecentStickersNotModified{&Messages_RecentStickers_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messages_recentStickers:
        m2 := &TLMessagesRecentStickers{&Messages_RecentStickers_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messages_recentStickers114:
        m2 := &TLMessagesRecentStickers114{&Messages_RecentStickers_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messages.recentStickersNotModified#b17f890 = messages.RecentStickers;
func (m *Messages_RecentStickers) To_MessagesRecentStickersNotModified() *TLMessagesRecentStickersNotModified {
    return &TLMessagesRecentStickersNotModified{
        Data2: m.Data2,
    }
}

// messages.recentStickers#5ce20970 hash:int stickers:Vector<Document> = messages.RecentStickers;
func (m *Messages_RecentStickers) To_MessagesRecentStickers() *TLMessagesRecentStickers {
    return &TLMessagesRecentStickers{
        Data2: m.Data2,
    }
}

// messages.recentStickers#22f3afb3 hash:int packs:Vector<StickerPack> stickers:Vector<Document> dates:Vector<int> = messages.RecentStickers;
func (m *Messages_RecentStickers) To_MessagesRecentStickers114() *TLMessagesRecentStickers114 {
    return &TLMessagesRecentStickers114{
        Data2: m.Data2,
    }
}



// messages.recentStickersNotModified#b17f890 = messages.RecentStickers;
func (m *TLMessagesRecentStickersNotModified) To_Messages_RecentStickers() *Messages_RecentStickers {
    return &Messages_RecentStickers{
        Constructor: TLConstructor_CRC32_messages_recentStickersNotModified,
        Data2: m.Data2,
    }
}



func NewTLMessagesRecentStickersNotModified() * TLMessagesRecentStickersNotModified {
    return &TLMessagesRecentStickersNotModified{ Data2: &Messages_RecentStickers_Data{} }
}

func (m* TLMessagesRecentStickersNotModified) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_recentStickersNotModified))


    return x.buf
}

func (m* TLMessagesRecentStickersNotModified) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// messages.recentStickers#5ce20970 hash:int stickers:Vector<Document> = messages.RecentStickers;
func (m *TLMessagesRecentStickers) To_Messages_RecentStickers() *Messages_RecentStickers {
    return &Messages_RecentStickers{
        Constructor: TLConstructor_CRC32_messages_recentStickers,
        Data2: m.Data2,
    }
}


func (m *TLMessagesRecentStickers) SetHash(v int32) { m.Data2.Hash = v }
func (m *TLMessagesRecentStickers) GetHash() int32 { return m.Data2.Hash }

func (m *TLMessagesRecentStickers) SetStickers(v []*Document) { m.Data2.Stickers = v }
func (m *TLMessagesRecentStickers) GetStickers() []*Document { return m.Data2.Stickers }


func NewTLMessagesRecentStickers() * TLMessagesRecentStickers {
    return &TLMessagesRecentStickers{ Data2: &Messages_RecentStickers_Data{} }
}

func (m* TLMessagesRecentStickers) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_recentStickers))

    x.Int(m.GetHash())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetStickers())))
for _, v := range m.GetStickers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLMessagesRecentStickers) Decode(dbuf *DecodeBuf) error {
    m.SetHash(dbuf.Int())
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*Document, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &Document{}
	v2[i].Decode(dbuf)
}
m.SetStickers(v2)


    return dbuf.err
}
// messages.recentStickers#22f3afb3 hash:int packs:Vector<StickerPack> stickers:Vector<Document> dates:Vector<int> = messages.RecentStickers;
func (m *TLMessagesRecentStickers114) To_Messages_RecentStickers() *Messages_RecentStickers {
    return &Messages_RecentStickers{
        Constructor: TLConstructor_CRC32_messages_recentStickers114,
        Data2: m.Data2,
    }
}


func (m *TLMessagesRecentStickers114) SetHash(v int32) { m.Data2.Hash = v }
func (m *TLMessagesRecentStickers114) GetHash() int32 { return m.Data2.Hash }

func (m *TLMessagesRecentStickers114) SetPacks(v []*StickerPack) { m.Data2.Packs = v }
func (m *TLMessagesRecentStickers114) GetPacks() []*StickerPack { return m.Data2.Packs }

func (m *TLMessagesRecentStickers114) SetStickers(v []*Document) { m.Data2.Stickers = v }
func (m *TLMessagesRecentStickers114) GetStickers() []*Document { return m.Data2.Stickers }

func (m *TLMessagesRecentStickers114) SetDates(v []int32) { m.Data2.Dates = v }
func (m *TLMessagesRecentStickers114) GetDates() []int32 { return m.Data2.Dates }


func NewTLMessagesRecentStickers114() * TLMessagesRecentStickers114 {
    return &TLMessagesRecentStickers114{ Data2: &Messages_RecentStickers_Data{} }
}

func (m* TLMessagesRecentStickers114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_recentStickers114))

    x.Int(m.GetHash())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetPacks())))
for _, v := range m.GetPacks() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetStickers())))
for _, v := range m.GetStickers() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.VectorInt(m.GetDates())


    return x.buf
}

func (m* TLMessagesRecentStickers114) Decode(dbuf *DecodeBuf) error {
    m.SetHash(dbuf.Int())
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*StickerPack, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &StickerPack{}
	v2[i].Decode(dbuf)
}
m.SetPacks(v2)

    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*Document, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &Document{}
	v3[i].Decode(dbuf)
}
m.SetStickers(v3)

    m.SetDates(dbuf.VectorInt())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputGame <--
//  + TL_InputGameID
//  + TL_InputGameShortName
//

func (m *InputGame) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputGameID:
        t := m.To_InputGameID()
        return t.Encode()
    case TLConstructor_CRC32_inputGameShortName:
        t := m.To_InputGameShortName()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputGame) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputGameID:
        m2 := &TLInputGameID{&InputGame_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputGameShortName:
        m2 := &TLInputGameShortName{&InputGame_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputGameID#32c3e77 id:long access_hash:long = InputGame;
func (m *InputGame) To_InputGameID() *TLInputGameID {
    return &TLInputGameID{
        Data2: m.Data2,
    }
}

// inputGameShortName#c331e80a bot_id:InputUser short_name:string = InputGame;
func (m *InputGame) To_InputGameShortName() *TLInputGameShortName {
    return &TLInputGameShortName{
        Data2: m.Data2,
    }
}



// inputGameID#32c3e77 id:long access_hash:long = InputGame;
func (m *TLInputGameID) To_InputGame() *InputGame {
    return &InputGame{
        Constructor: TLConstructor_CRC32_inputGameID,
        Data2: m.Data2,
    }
}


func (m *TLInputGameID) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputGameID) GetId() int64 { return m.Data2.Id }

func (m *TLInputGameID) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputGameID) GetAccessHash() int64 { return m.Data2.AccessHash }


func NewTLInputGameID() * TLInputGameID {
    return &TLInputGameID{ Data2: &InputGame_Data{} }
}

func (m* TLInputGameID) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputGameID))

    x.Long(m.GetId())
    x.Long(m.GetAccessHash())

    return x.buf
}

func (m* TLInputGameID) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())

    return dbuf.err
}
// inputGameShortName#c331e80a bot_id:InputUser short_name:string = InputGame;
func (m *TLInputGameShortName) To_InputGame() *InputGame {
    return &InputGame{
        Constructor: TLConstructor_CRC32_inputGameShortName,
        Data2: m.Data2,
    }
}


func (m *TLInputGameShortName) SetBotId(v *InputUser) { m.Data2.BotId = v }
func (m *TLInputGameShortName) GetBotId() *InputUser { return m.Data2.BotId }

func (m *TLInputGameShortName) SetShortName(v string) { m.Data2.ShortName = v }
func (m *TLInputGameShortName) GetShortName() string { return m.Data2.ShortName }


func NewTLInputGameShortName() * TLInputGameShortName {
    return &TLInputGameShortName{ Data2: &InputGame_Data{} }
}

func (m* TLInputGameShortName) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputGameShortName))

    x.Bytes(m.GetBotId().Encode())
    x.String(m.GetShortName())

    return x.buf
}

func (m* TLInputGameShortName) Decode(dbuf *DecodeBuf) error {
    m1 := &InputUser{}
    m1.Decode(dbuf)
    m.SetBotId(m1)
    m.SetShortName(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Page <--
//  + TL_PagePart
//  + TL_PageFull
//  + TL_Page
//

func (m *Page) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_pagePart:
        t := m.To_PagePart()
        return t.Encode()
    case TLConstructor_CRC32_pageFull:
        t := m.To_PageFull()
        return t.Encode()
    case TLConstructor_CRC32_page:
        t := m.To_Page()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Page) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_pagePart:
        m2 := &TLPagePart{&Page_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageFull:
        m2 := &TLPageFull{&Page_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_page:
        m2 := &TLPage{&Page_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// pagePart#8e3f9ebe blocks:Vector<PageBlock> photos:Vector<Photo> documents:Vector<Document> = Page;
func (m *Page) To_PagePart() *TLPagePart {
    return &TLPagePart{
        Data2: m.Data2,
    }
}

// pageFull#556ec7aa blocks:Vector<PageBlock> photos:Vector<Photo> documents:Vector<Document> = Page;
func (m *Page) To_PageFull() *TLPageFull {
    return &TLPageFull{
        Data2: m.Data2,
    }
}

// page#98657f0d flags:# part:flags.0?true rtl:flags.1?true v2:flags.2?true url:string blocks:Vector<PageBlock> photos:Vector<Photo> documents:Vector<Document> views:flags.3?int = Page;
func (m *Page) To_Page() *TLPage {
    return &TLPage{
        Data2: m.Data2,
    }
}



// pagePart#8e3f9ebe blocks:Vector<PageBlock> photos:Vector<Photo> documents:Vector<Document> = Page;
func (m *TLPagePart) To_Page() *Page {
    return &Page{
        Constructor: TLConstructor_CRC32_pagePart,
        Data2: m.Data2,
    }
}


func (m *TLPagePart) SetBlocks(v []*PageBlock) { m.Data2.Blocks = v }
func (m *TLPagePart) GetBlocks() []*PageBlock { return m.Data2.Blocks }

func (m *TLPagePart) SetPhotos(v []*Photo) { m.Data2.Photos = v }
func (m *TLPagePart) GetPhotos() []*Photo { return m.Data2.Photos }

func (m *TLPagePart) SetDocuments(v []*Document) { m.Data2.Documents = v }
func (m *TLPagePart) GetDocuments() []*Document { return m.Data2.Documents }


func NewTLPagePart() * TLPagePart {
    return &TLPagePart{ Data2: &Page_Data{} }
}

func (m* TLPagePart) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pagePart))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetBlocks())))
for _, v := range m.GetBlocks() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetPhotos())))
for _, v := range m.GetPhotos() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetDocuments())))
for _, v := range m.GetDocuments() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLPagePart) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*PageBlock, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &PageBlock{}
	v1[i].Decode(dbuf)
}
m.SetBlocks(v1)

    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*Photo, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &Photo{}
	v2[i].Decode(dbuf)
}
m.SetPhotos(v2)

    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*Document, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &Document{}
	v3[i].Decode(dbuf)
}
m.SetDocuments(v3)


    return dbuf.err
}
// pageFull#556ec7aa blocks:Vector<PageBlock> photos:Vector<Photo> documents:Vector<Document> = Page;
func (m *TLPageFull) To_Page() *Page {
    return &Page{
        Constructor: TLConstructor_CRC32_pageFull,
        Data2: m.Data2,
    }
}


func (m *TLPageFull) SetBlocks(v []*PageBlock) { m.Data2.Blocks = v }
func (m *TLPageFull) GetBlocks() []*PageBlock { return m.Data2.Blocks }

func (m *TLPageFull) SetPhotos(v []*Photo) { m.Data2.Photos = v }
func (m *TLPageFull) GetPhotos() []*Photo { return m.Data2.Photos }

func (m *TLPageFull) SetDocuments(v []*Document) { m.Data2.Documents = v }
func (m *TLPageFull) GetDocuments() []*Document { return m.Data2.Documents }


func NewTLPageFull() * TLPageFull {
    return &TLPageFull{ Data2: &Page_Data{} }
}

func (m* TLPageFull) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageFull))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetBlocks())))
for _, v := range m.GetBlocks() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetPhotos())))
for _, v := range m.GetPhotos() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetDocuments())))
for _, v := range m.GetDocuments() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLPageFull) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*PageBlock, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &PageBlock{}
	v1[i].Decode(dbuf)
}
m.SetBlocks(v1)

    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*Photo, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &Photo{}
	v2[i].Decode(dbuf)
}
m.SetPhotos(v2)

    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*Document, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &Document{}
	v3[i].Decode(dbuf)
}
m.SetDocuments(v3)


    return dbuf.err
}
// page#98657f0d flags:# part:flags.0?true rtl:flags.1?true v2:flags.2?true url:string blocks:Vector<PageBlock> photos:Vector<Photo> documents:Vector<Document> views:flags.3?int = Page;
func (m *TLPage) To_Page() *Page {
    return &Page{
        Constructor: TLConstructor_CRC32_page,
        Data2: m.Data2,
    }
}


func (m *TLPage) SetPart(v bool) { m.Data2.Part = v }
func (m *TLPage) GetPart() bool { return m.Data2.Part }

func (m *TLPage) SetRtl(v bool) { m.Data2.Rtl = v }
func (m *TLPage) GetRtl() bool { return m.Data2.Rtl }

func (m *TLPage) SetV2(v bool) { m.Data2.V2 = v }
func (m *TLPage) GetV2() bool { return m.Data2.V2 }

func (m *TLPage) SetUrl(v string) { m.Data2.Url = v }
func (m *TLPage) GetUrl() string { return m.Data2.Url }

func (m *TLPage) SetBlocks(v []*PageBlock) { m.Data2.Blocks = v }
func (m *TLPage) GetBlocks() []*PageBlock { return m.Data2.Blocks }

func (m *TLPage) SetPhotos(v []*Photo) { m.Data2.Photos = v }
func (m *TLPage) GetPhotos() []*Photo { return m.Data2.Photos }

func (m *TLPage) SetDocuments(v []*Document) { m.Data2.Documents = v }
func (m *TLPage) GetDocuments() []*Document { return m.Data2.Documents }

func (m *TLPage) SetViews(v int32) { m.Data2.Views = v }
func (m *TLPage) GetViews() int32 { return m.Data2.Views }


func NewTLPage() * TLPage {
    return &TLPage{ Data2: &Page_Data{} }
}

func (m* TLPage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_page))

    // flags
    var flags uint32 = 0
    if m.GetPart() == true { flags |= 1 << 0 }
    if m.GetRtl() == true { flags |= 1 << 1 }
    if m.GetV2() == true { flags |= 1 << 2 }
    if m.GetViews() != 0 { flags |= 1 << 3 }
	x.UInt(flags)

    
    
    
    x.String(m.GetUrl())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetBlocks())))
for _, v := range m.GetBlocks() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetPhotos())))
for _, v := range m.GetPhotos() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetDocuments())))
for _, v := range m.GetDocuments() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    if (flags & (1 << 3)) != 0 { x.Int(m.GetViews()) }

    return x.buf
}

func (m* TLPage) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetPart(true) }
    if (flags & (1 << 1)) != 0 { m.SetRtl(true) }
    if (flags & (1 << 2)) != 0 { m.SetV2(true) }
    m.SetUrl(dbuf.String())
    c6 := dbuf.Int()
if c6 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 6, c6)
	return dbuf.err
}
l6 := dbuf.Int()
v6 := make([]*PageBlock, l6)
for i := int32(0); i < l6; i++ {
	v6[i] = &PageBlock{}
	v6[i].Decode(dbuf)
}
m.SetBlocks(v6)

    c7 := dbuf.Int()
if c7 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 7, c7)
	return dbuf.err
}
l7 := dbuf.Int()
v7 := make([]*Photo, l7)
for i := int32(0); i < l7; i++ {
	v7[i] = &Photo{}
	v7[i].Decode(dbuf)
}
m.SetPhotos(v7)

    c8 := dbuf.Int()
if c8 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 8, c8)
	return dbuf.err
}
l8 := dbuf.Int()
v8 := make([]*Document, l8)
for i := int32(0); i < l8; i++ {
	v8[i] = &Document{}
	v8[i].Decode(dbuf)
}
m.SetDocuments(v8)

    if (flags & (1 << 3)) != 0 { m.SetViews(dbuf.Int()) }

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputPeerNotifyEvents <--
//  + TL_InputPeerNotifyEventsEmpty
//  + TL_InputPeerNotifyEventsAll
//

func (m *InputPeerNotifyEvents) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputPeerNotifyEventsEmpty:
        t := m.To_InputPeerNotifyEventsEmpty()
        return t.Encode()
    case TLConstructor_CRC32_inputPeerNotifyEventsAll:
        t := m.To_InputPeerNotifyEventsAll()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputPeerNotifyEvents) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputPeerNotifyEventsEmpty:
        m2 := &TLInputPeerNotifyEventsEmpty{&InputPeerNotifyEvents_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputPeerNotifyEventsAll:
        m2 := &TLInputPeerNotifyEventsAll{&InputPeerNotifyEvents_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputPeerNotifyEventsEmpty#f03064d8 = InputPeerNotifyEvents;
func (m *InputPeerNotifyEvents) To_InputPeerNotifyEventsEmpty() *TLInputPeerNotifyEventsEmpty {
    return &TLInputPeerNotifyEventsEmpty{
        Data2: m.Data2,
    }
}

// inputPeerNotifyEventsAll#e86a2c74 = InputPeerNotifyEvents;
func (m *InputPeerNotifyEvents) To_InputPeerNotifyEventsAll() *TLInputPeerNotifyEventsAll {
    return &TLInputPeerNotifyEventsAll{
        Data2: m.Data2,
    }
}



// inputPeerNotifyEventsEmpty#f03064d8 = InputPeerNotifyEvents;
func (m *TLInputPeerNotifyEventsEmpty) To_InputPeerNotifyEvents() *InputPeerNotifyEvents {
    return &InputPeerNotifyEvents{
        Constructor: TLConstructor_CRC32_inputPeerNotifyEventsEmpty,
        Data2: m.Data2,
    }
}



func NewTLInputPeerNotifyEventsEmpty() * TLInputPeerNotifyEventsEmpty {
    return &TLInputPeerNotifyEventsEmpty{ Data2: &InputPeerNotifyEvents_Data{} }
}

func (m* TLInputPeerNotifyEventsEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPeerNotifyEventsEmpty))


    return x.buf
}

func (m* TLInputPeerNotifyEventsEmpty) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputPeerNotifyEventsAll#e86a2c74 = InputPeerNotifyEvents;
func (m *TLInputPeerNotifyEventsAll) To_InputPeerNotifyEvents() *InputPeerNotifyEvents {
    return &InputPeerNotifyEvents{
        Constructor: TLConstructor_CRC32_inputPeerNotifyEventsAll,
        Data2: m.Data2,
    }
}



func NewTLInputPeerNotifyEventsAll() * TLInputPeerNotifyEventsAll {
    return &TLInputPeerNotifyEventsAll{ Data2: &InputPeerNotifyEvents_Data{} }
}

func (m* TLInputPeerNotifyEventsAll) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPeerNotifyEventsAll))


    return x.buf
}

func (m* TLInputPeerNotifyEventsAll) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// StickerSet <--
//  + TL_StickerSet
//  + TL_StickerSet114
//

func (m *StickerSet) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_stickerSet:
        t := m.To_StickerSet()
        return t.Encode()
    case TLConstructor_CRC32_stickerSet114:
        t := m.To_StickerSet114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *StickerSet) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_stickerSet:
        m2 := &TLStickerSet{&StickerSet_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_stickerSet114:
        m2 := &TLStickerSet114{&StickerSet_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// stickerSet#cd303b41 flags:# installed:flags.0?true archived:flags.1?true official:flags.2?true masks:flags.3?true id:long access_hash:long title:string short_name:string count:int hash:int = StickerSet;
func (m *StickerSet) To_StickerSet() *TLStickerSet {
    return &TLStickerSet{
        Data2: m.Data2,
    }
}

// stickerSet#eeb46f27 flags:# archived:flags.1?true official:flags.2?true masks:flags.3?true animated:flags.5?true installed_date:flags.0?int id:long access_hash:long title:string short_name:string thumb:flags.4?PhotoSize thumb_dc_id:flags.4?int count:int hash:int = StickerSet;
func (m *StickerSet) To_StickerSet114() *TLStickerSet114 {
    return &TLStickerSet114{
        Data2: m.Data2,
    }
}



// stickerSet#cd303b41 flags:# installed:flags.0?true archived:flags.1?true official:flags.2?true masks:flags.3?true id:long access_hash:long title:string short_name:string count:int hash:int = StickerSet;
func (m *TLStickerSet) To_StickerSet() *StickerSet {
    return &StickerSet{
        Constructor: TLConstructor_CRC32_stickerSet,
        Data2: m.Data2,
    }
}


func (m *TLStickerSet) SetInstalled(v bool) { m.Data2.Installed = v }
func (m *TLStickerSet) GetInstalled() bool { return m.Data2.Installed }

func (m *TLStickerSet) SetArchived(v bool) { m.Data2.Archived = v }
func (m *TLStickerSet) GetArchived() bool { return m.Data2.Archived }

func (m *TLStickerSet) SetOfficial(v bool) { m.Data2.Official = v }
func (m *TLStickerSet) GetOfficial() bool { return m.Data2.Official }

func (m *TLStickerSet) SetMasks(v bool) { m.Data2.Masks = v }
func (m *TLStickerSet) GetMasks() bool { return m.Data2.Masks }

func (m *TLStickerSet) SetId(v int64) { m.Data2.Id = v }
func (m *TLStickerSet) GetId() int64 { return m.Data2.Id }

func (m *TLStickerSet) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLStickerSet) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLStickerSet) SetTitle(v string) { m.Data2.Title = v }
func (m *TLStickerSet) GetTitle() string { return m.Data2.Title }

func (m *TLStickerSet) SetShortName(v string) { m.Data2.ShortName = v }
func (m *TLStickerSet) GetShortName() string { return m.Data2.ShortName }

func (m *TLStickerSet) SetCount(v int32) { m.Data2.Count = v }
func (m *TLStickerSet) GetCount() int32 { return m.Data2.Count }

func (m *TLStickerSet) SetHash(v int32) { m.Data2.Hash = v }
func (m *TLStickerSet) GetHash() int32 { return m.Data2.Hash }


func NewTLStickerSet() * TLStickerSet {
    return &TLStickerSet{ Data2: &StickerSet_Data{} }
}

func (m* TLStickerSet) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_stickerSet))

    // flags
    var flags uint32 = 0
    if m.GetInstalled() == true { flags |= 1 << 0 }
    if m.GetArchived() == true { flags |= 1 << 1 }
    if m.GetOfficial() == true { flags |= 1 << 2 }
    if m.GetMasks() == true { flags |= 1 << 3 }
	x.UInt(flags)

    
    
    
    
    x.Long(m.GetId())
    x.Long(m.GetAccessHash())
    x.String(m.GetTitle())
    x.String(m.GetShortName())
    x.Int(m.GetCount())
    x.Int(m.GetHash())

    return x.buf
}

func (m* TLStickerSet) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetInstalled(true) }
    if (flags & (1 << 1)) != 0 { m.SetArchived(true) }
    if (flags & (1 << 2)) != 0 { m.SetOfficial(true) }
    if (flags & (1 << 3)) != 0 { m.SetMasks(true) }
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())
    m.SetTitle(dbuf.String())
    m.SetShortName(dbuf.String())
    m.SetCount(dbuf.Int())
    m.SetHash(dbuf.Int())

    return dbuf.err
}
// stickerSet#eeb46f27 flags:# archived:flags.1?true official:flags.2?true masks:flags.3?true animated:flags.5?true installed_date:flags.0?int id:long access_hash:long title:string short_name:string thumb:flags.4?PhotoSize thumb_dc_id:flags.4?int count:int hash:int = StickerSet;
func (m *TLStickerSet114) To_StickerSet() *StickerSet {
    return &StickerSet{
        Constructor: TLConstructor_CRC32_stickerSet114,
        Data2: m.Data2,
    }
}


func (m *TLStickerSet114) SetArchived(v bool) { m.Data2.Archived = v }
func (m *TLStickerSet114) GetArchived() bool { return m.Data2.Archived }

func (m *TLStickerSet114) SetOfficial(v bool) { m.Data2.Official = v }
func (m *TLStickerSet114) GetOfficial() bool { return m.Data2.Official }

func (m *TLStickerSet114) SetMasks(v bool) { m.Data2.Masks = v }
func (m *TLStickerSet114) GetMasks() bool { return m.Data2.Masks }

func (m *TLStickerSet114) SetAnimated(v bool) { m.Data2.Animated = v }
func (m *TLStickerSet114) GetAnimated() bool { return m.Data2.Animated }

func (m *TLStickerSet114) SetInstalledDate(v int32) { m.Data2.InstalledDate = v }
func (m *TLStickerSet114) GetInstalledDate() int32 { return m.Data2.InstalledDate }

func (m *TLStickerSet114) SetId(v int64) { m.Data2.Id = v }
func (m *TLStickerSet114) GetId() int64 { return m.Data2.Id }

func (m *TLStickerSet114) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLStickerSet114) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLStickerSet114) SetTitle(v string) { m.Data2.Title = v }
func (m *TLStickerSet114) GetTitle() string { return m.Data2.Title }

func (m *TLStickerSet114) SetShortName(v string) { m.Data2.ShortName = v }
func (m *TLStickerSet114) GetShortName() string { return m.Data2.ShortName }

func (m *TLStickerSet114) SetThumb(v *PhotoSize) { m.Data2.Thumb = v }
func (m *TLStickerSet114) GetThumb() *PhotoSize { return m.Data2.Thumb }

func (m *TLStickerSet114) SetThumbDcId(v int32) { m.Data2.ThumbDcId = v }
func (m *TLStickerSet114) GetThumbDcId() int32 { return m.Data2.ThumbDcId }

func (m *TLStickerSet114) SetCount(v int32) { m.Data2.Count = v }
func (m *TLStickerSet114) GetCount() int32 { return m.Data2.Count }

func (m *TLStickerSet114) SetHash(v int32) { m.Data2.Hash = v }
func (m *TLStickerSet114) GetHash() int32 { return m.Data2.Hash }


func NewTLStickerSet114() * TLStickerSet114 {
    return &TLStickerSet114{ Data2: &StickerSet_Data{} }
}

func (m* TLStickerSet114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_stickerSet114))

    // flags
    var flags uint32 = 0
    if m.GetArchived() == true { flags |= 1 << 1 }
    if m.GetOfficial() == true { flags |= 1 << 2 }
    if m.GetMasks() == true { flags |= 1 << 3 }
    if m.GetAnimated() == true { flags |= 1 << 5 }
    if m.GetInstalledDate() != 0 { flags |= 1 << 0 }
    if m.GetThumb() != nil { flags |= 1 << 4 }
    if m.GetThumbDcId() != 0 { flags |= 1 << 4 }
	x.UInt(flags)

    
    
    
    
    if (flags & (1 << 0)) != 0 { x.Int(m.GetInstalledDate()) }
    x.Long(m.GetId())
    x.Long(m.GetAccessHash())
    x.String(m.GetTitle())
    x.String(m.GetShortName())
    if (flags & (1 << 4)) != 0 { x.Bytes(m.GetThumb().Encode()) }
    if (flags & (1 << 4)) != 0 { x.Int(m.GetThumbDcId()) }
    x.Int(m.GetCount())
    x.Int(m.GetHash())

    return x.buf
}

func (m* TLStickerSet114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 1)) != 0 { m.SetArchived(true) }
    if (flags & (1 << 2)) != 0 { m.SetOfficial(true) }
    if (flags & (1 << 3)) != 0 { m.SetMasks(true) }
    if (flags & (1 << 5)) != 0 { m.SetAnimated(true) }
    if (flags & (1 << 0)) != 0 { m.SetInstalledDate(dbuf.Int()) }
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())
    m.SetTitle(dbuf.String())
    m.SetShortName(dbuf.String())
    if (flags & (1 << 4)) != 0 {
 m11 := &PhotoSize{}
    m11.Decode(dbuf)
    m.SetThumb(m11) 
}
    if (flags & (1 << 4)) != 0 { m.SetThumbDcId(dbuf.Int()) }
    m.SetCount(dbuf.Int())
    m.SetHash(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Theme <--
//  + TL_Theme
//

func (m *Theme) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_theme:
        t := m.To_Theme()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Theme) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_theme:
        m2 := &TLTheme{&Theme_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// theme#28f1114 flags:# creator:flags.0?true default:flags.1?true id:long access_hash:long slug:string title:string document:flags.2?Document settings:flags.3?ThemeSettings installs_count:int = Theme;
func (m *Theme) To_Theme() *TLTheme {
    return &TLTheme{
        Data2: m.Data2,
    }
}



// theme#28f1114 flags:# creator:flags.0?true default:flags.1?true id:long access_hash:long slug:string title:string document:flags.2?Document settings:flags.3?ThemeSettings installs_count:int = Theme;
func (m *TLTheme) To_Theme() *Theme {
    return &Theme{
        Constructor: TLConstructor_CRC32_theme,
        Data2: m.Data2,
    }
}


func (m *TLTheme) SetCreator(v bool) { m.Data2.Creator = v }
func (m *TLTheme) GetCreator() bool { return m.Data2.Creator }

func (m *TLTheme) SetDefault(v bool) { m.Data2.Default = v }
func (m *TLTheme) GetDefault() bool { return m.Data2.Default }

func (m *TLTheme) SetId(v int64) { m.Data2.Id = v }
func (m *TLTheme) GetId() int64 { return m.Data2.Id }

func (m *TLTheme) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLTheme) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLTheme) SetSlug(v string) { m.Data2.Slug = v }
func (m *TLTheme) GetSlug() string { return m.Data2.Slug }

func (m *TLTheme) SetTitle(v string) { m.Data2.Title = v }
func (m *TLTheme) GetTitle() string { return m.Data2.Title }

func (m *TLTheme) SetDocument(v *Document) { m.Data2.Document = v }
func (m *TLTheme) GetDocument() *Document { return m.Data2.Document }

func (m *TLTheme) SetSettings(v *ThemeSettings) { m.Data2.Settings = v }
func (m *TLTheme) GetSettings() *ThemeSettings { return m.Data2.Settings }

func (m *TLTheme) SetInstallsCount(v int32) { m.Data2.InstallsCount = v }
func (m *TLTheme) GetInstallsCount() int32 { return m.Data2.InstallsCount }


func NewTLTheme() * TLTheme {
    return &TLTheme{ Data2: &Theme_Data{} }
}

func (m* TLTheme) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_theme))

    // flags
    var flags uint32 = 0
    if m.GetCreator() == true { flags |= 1 << 0 }
    if m.GetDefault() == true { flags |= 1 << 1 }
    if m.GetDocument() != nil { flags |= 1 << 2 }
    if m.GetSettings() != nil { flags |= 1 << 3 }
	x.UInt(flags)

    
    
    x.Long(m.GetId())
    x.Long(m.GetAccessHash())
    x.String(m.GetSlug())
    x.String(m.GetTitle())
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetDocument().Encode()) }
    if (flags & (1 << 3)) != 0 { x.Bytes(m.GetSettings().Encode()) }
    x.Int(m.GetInstallsCount())

    return x.buf
}

func (m* TLTheme) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetCreator(true) }
    if (flags & (1 << 1)) != 0 { m.SetDefault(true) }
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())
    m.SetSlug(dbuf.String())
    m.SetTitle(dbuf.String())
    if (flags & (1 << 2)) != 0 {
 m8 := &Document{}
    m8.Decode(dbuf)
    m.SetDocument(m8) 
}
    if (flags & (1 << 3)) != 0 {
 m9 := &ThemeSettings{}
    m9.Decode(dbuf)
    m.SetSettings(m9) 
}
    m.SetInstallsCount(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputThemeSettings <--
//  + TL_InputThemeSettings
//

func (m *InputThemeSettings) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputThemeSettings:
        t := m.To_InputThemeSettings()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputThemeSettings) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputThemeSettings:
        m2 := &TLInputThemeSettings{&InputThemeSettings_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputThemeSettings#bd507cd1 flags:# base_theme:BaseTheme accent_color:int message_top_color:flags.0?int message_bottom_color:flags.0?int wallpaper:flags.1?InputWallPaper wallpaper_settings:flags.1?WallPaperSettings = InputThemeSettings;
func (m *InputThemeSettings) To_InputThemeSettings() *TLInputThemeSettings {
    return &TLInputThemeSettings{
        Data2: m.Data2,
    }
}



// inputThemeSettings#bd507cd1 flags:# base_theme:BaseTheme accent_color:int message_top_color:flags.0?int message_bottom_color:flags.0?int wallpaper:flags.1?InputWallPaper wallpaper_settings:flags.1?WallPaperSettings = InputThemeSettings;
func (m *TLInputThemeSettings) To_InputThemeSettings() *InputThemeSettings {
    return &InputThemeSettings{
        Constructor: TLConstructor_CRC32_inputThemeSettings,
        Data2: m.Data2,
    }
}


func (m *TLInputThemeSettings) SetBaseTheme(v *BaseTheme) { m.Data2.BaseTheme = v }
func (m *TLInputThemeSettings) GetBaseTheme() *BaseTheme { return m.Data2.BaseTheme }

func (m *TLInputThemeSettings) SetAccentColor(v int32) { m.Data2.AccentColor = v }
func (m *TLInputThemeSettings) GetAccentColor() int32 { return m.Data2.AccentColor }

func (m *TLInputThemeSettings) SetMessageTopColor(v int32) { m.Data2.MessageTopColor = v }
func (m *TLInputThemeSettings) GetMessageTopColor() int32 { return m.Data2.MessageTopColor }

func (m *TLInputThemeSettings) SetMessageBottomColor(v int32) { m.Data2.MessageBottomColor = v }
func (m *TLInputThemeSettings) GetMessageBottomColor() int32 { return m.Data2.MessageBottomColor }

func (m *TLInputThemeSettings) SetWallpaper(v *InputWallPaper) { m.Data2.Wallpaper = v }
func (m *TLInputThemeSettings) GetWallpaper() *InputWallPaper { return m.Data2.Wallpaper }

func (m *TLInputThemeSettings) SetWallpaperSettings(v *WallPaperSettings) { m.Data2.WallpaperSettings = v }
func (m *TLInputThemeSettings) GetWallpaperSettings() *WallPaperSettings { return m.Data2.WallpaperSettings }


func NewTLInputThemeSettings() * TLInputThemeSettings {
    return &TLInputThemeSettings{ Data2: &InputThemeSettings_Data{} }
}

func (m* TLInputThemeSettings) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputThemeSettings))

    // flags
    var flags uint32 = 0
    if m.GetMessageTopColor() != 0 { flags |= 1 << 0 }
    if m.GetMessageBottomColor() != 0 { flags |= 1 << 0 }
    if m.GetWallpaper() != nil { flags |= 1 << 1 }
    if m.GetWallpaperSettings() != nil { flags |= 1 << 1 }
	x.UInt(flags)

    x.Bytes(m.GetBaseTheme().Encode())
    x.Int(m.GetAccentColor())
    if (flags & (1 << 0)) != 0 { x.Int(m.GetMessageTopColor()) }
    if (flags & (1 << 0)) != 0 { x.Int(m.GetMessageBottomColor()) }
    if (flags & (1 << 1)) != 0 { x.Bytes(m.GetWallpaper().Encode()) }
    if (flags & (1 << 1)) != 0 { x.Bytes(m.GetWallpaperSettings().Encode()) }

    return x.buf
}

func (m* TLInputThemeSettings) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m2 := &BaseTheme{}
    m2.Decode(dbuf)
    m.SetBaseTheme(m2)
    m.SetAccentColor(dbuf.Int())
    if (flags & (1 << 0)) != 0 { m.SetMessageTopColor(dbuf.Int()) }
    if (flags & (1 << 0)) != 0 { m.SetMessageBottomColor(dbuf.Int()) }
    if (flags & (1 << 1)) != 0 {
 m6 := &InputWallPaper{}
    m6.Decode(dbuf)
    m.SetWallpaper(m6) 
}
    if (flags & (1 << 1)) != 0 {
 m7 := &WallPaperSettings{}
    m7.Decode(dbuf)
    m.SetWallpaperSettings(m7) 
}

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Messages_ArchivedStickers <--
//  + TL_MessagesArchivedStickers
//

func (m *Messages_ArchivedStickers) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messages_archivedStickers:
        t := m.To_MessagesArchivedStickers()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Messages_ArchivedStickers) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messages_archivedStickers:
        m2 := &TLMessagesArchivedStickers{&Messages_ArchivedStickers_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messages.archivedStickers#4fcba9c8 count:int sets:Vector<StickerSetCovered> = messages.ArchivedStickers;
func (m *Messages_ArchivedStickers) To_MessagesArchivedStickers() *TLMessagesArchivedStickers {
    return &TLMessagesArchivedStickers{
        Data2: m.Data2,
    }
}



// messages.archivedStickers#4fcba9c8 count:int sets:Vector<StickerSetCovered> = messages.ArchivedStickers;
func (m *TLMessagesArchivedStickers) To_Messages_ArchivedStickers() *Messages_ArchivedStickers {
    return &Messages_ArchivedStickers{
        Constructor: TLConstructor_CRC32_messages_archivedStickers,
        Data2: m.Data2,
    }
}


func (m *TLMessagesArchivedStickers) SetCount(v int32) { m.Data2.Count = v }
func (m *TLMessagesArchivedStickers) GetCount() int32 { return m.Data2.Count }

func (m *TLMessagesArchivedStickers) SetSets(v []*StickerSetCovered) { m.Data2.Sets = v }
func (m *TLMessagesArchivedStickers) GetSets() []*StickerSetCovered { return m.Data2.Sets }


func NewTLMessagesArchivedStickers() * TLMessagesArchivedStickers {
    return &TLMessagesArchivedStickers{ Data2: &Messages_ArchivedStickers_Data{} }
}

func (m* TLMessagesArchivedStickers) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_archivedStickers))

    x.Int(m.GetCount())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetSets())))
for _, v := range m.GetSets() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLMessagesArchivedStickers) Decode(dbuf *DecodeBuf) error {
    m.SetCount(dbuf.Int())
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*StickerSetCovered, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &StickerSetCovered{}
	v2[i].Decode(dbuf)
}
m.SetSets(v2)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// ChatBannedRights <--
//  + TL_ChatBannedRights
//

func (m *ChatBannedRights) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_chatBannedRights:
        t := m.To_ChatBannedRights()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *ChatBannedRights) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_chatBannedRights:
        m2 := &TLChatBannedRights{&ChatBannedRights_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// chatBannedRights#9f120418 flags:# view_messages:flags.0?true send_messages:flags.1?true send_media:flags.2?true send_stickers:flags.3?true send_gifs:flags.4?true send_games:flags.5?true send_inline:flags.6?true embed_links:flags.7?true send_polls:flags.8?true change_info:flags.10?true invite_users:flags.15?true pin_messages:flags.17?true until_date:int = ChatBannedRights;
func (m *ChatBannedRights) To_ChatBannedRights() *TLChatBannedRights {
    return &TLChatBannedRights{
        Data2: m.Data2,
    }
}



// chatBannedRights#9f120418 flags:# view_messages:flags.0?true send_messages:flags.1?true send_media:flags.2?true send_stickers:flags.3?true send_gifs:flags.4?true send_games:flags.5?true send_inline:flags.6?true embed_links:flags.7?true send_polls:flags.8?true change_info:flags.10?true invite_users:flags.15?true pin_messages:flags.17?true until_date:int = ChatBannedRights;
func (m *TLChatBannedRights) To_ChatBannedRights() *ChatBannedRights {
    return &ChatBannedRights{
        Constructor: TLConstructor_CRC32_chatBannedRights,
        Data2: m.Data2,
    }
}


func (m *TLChatBannedRights) SetViewMessages(v bool) { m.Data2.ViewMessages = v }
func (m *TLChatBannedRights) GetViewMessages() bool { return m.Data2.ViewMessages }

func (m *TLChatBannedRights) SetSendMessages(v bool) { m.Data2.SendMessages = v }
func (m *TLChatBannedRights) GetSendMessages() bool { return m.Data2.SendMessages }

func (m *TLChatBannedRights) SetSendMedia(v bool) { m.Data2.SendMedia = v }
func (m *TLChatBannedRights) GetSendMedia() bool { return m.Data2.SendMedia }

func (m *TLChatBannedRights) SetSendStickers(v bool) { m.Data2.SendStickers = v }
func (m *TLChatBannedRights) GetSendStickers() bool { return m.Data2.SendStickers }

func (m *TLChatBannedRights) SetSendGifs(v bool) { m.Data2.SendGifs = v }
func (m *TLChatBannedRights) GetSendGifs() bool { return m.Data2.SendGifs }

func (m *TLChatBannedRights) SetSendGames(v bool) { m.Data2.SendGames = v }
func (m *TLChatBannedRights) GetSendGames() bool { return m.Data2.SendGames }

func (m *TLChatBannedRights) SetSendInline(v bool) { m.Data2.SendInline = v }
func (m *TLChatBannedRights) GetSendInline() bool { return m.Data2.SendInline }

func (m *TLChatBannedRights) SetEmbedLinks(v bool) { m.Data2.EmbedLinks = v }
func (m *TLChatBannedRights) GetEmbedLinks() bool { return m.Data2.EmbedLinks }

func (m *TLChatBannedRights) SetSendPolls(v bool) { m.Data2.SendPolls = v }
func (m *TLChatBannedRights) GetSendPolls() bool { return m.Data2.SendPolls }

func (m *TLChatBannedRights) SetChangeInfo(v bool) { m.Data2.ChangeInfo = v }
func (m *TLChatBannedRights) GetChangeInfo() bool { return m.Data2.ChangeInfo }

func (m *TLChatBannedRights) SetInviteUsers(v bool) { m.Data2.InviteUsers = v }
func (m *TLChatBannedRights) GetInviteUsers() bool { return m.Data2.InviteUsers }

func (m *TLChatBannedRights) SetPinMessages(v bool) { m.Data2.PinMessages = v }
func (m *TLChatBannedRights) GetPinMessages() bool { return m.Data2.PinMessages }

func (m *TLChatBannedRights) SetUntilDate(v int32) { m.Data2.UntilDate = v }
func (m *TLChatBannedRights) GetUntilDate() int32 { return m.Data2.UntilDate }


func NewTLChatBannedRights() * TLChatBannedRights {
    return &TLChatBannedRights{ Data2: &ChatBannedRights_Data{} }
}

func (m* TLChatBannedRights) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_chatBannedRights))

    // flags
    var flags uint32 = 0
    if m.GetViewMessages() == true { flags |= 1 << 0 }
    if m.GetSendMessages() == true { flags |= 1 << 1 }
    if m.GetSendMedia() == true { flags |= 1 << 2 }
    if m.GetSendStickers() == true { flags |= 1 << 3 }
    if m.GetSendGifs() == true { flags |= 1 << 4 }
    if m.GetSendGames() == true { flags |= 1 << 5 }
    if m.GetSendInline() == true { flags |= 1 << 6 }
    if m.GetEmbedLinks() == true { flags |= 1 << 7 }
    if m.GetSendPolls() == true { flags |= 1 << 8 }
    if m.GetChangeInfo() == true { flags |= 1 << 10 }
    if m.GetInviteUsers() == true { flags |= 1 << 15 }
    if m.GetPinMessages() == true { flags |= 1 << 17 }
	x.UInt(flags)

    
    
    
    
    
    
    
    
    
    
    
    
    x.Int(m.GetUntilDate())

    return x.buf
}

func (m* TLChatBannedRights) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetViewMessages(true) }
    if (flags & (1 << 1)) != 0 { m.SetSendMessages(true) }
    if (flags & (1 << 2)) != 0 { m.SetSendMedia(true) }
    if (flags & (1 << 3)) != 0 { m.SetSendStickers(true) }
    if (flags & (1 << 4)) != 0 { m.SetSendGifs(true) }
    if (flags & (1 << 5)) != 0 { m.SetSendGames(true) }
    if (flags & (1 << 6)) != 0 { m.SetSendInline(true) }
    if (flags & (1 << 7)) != 0 { m.SetEmbedLinks(true) }
    if (flags & (1 << 8)) != 0 { m.SetSendPolls(true) }
    if (flags & (1 << 10)) != 0 { m.SetChangeInfo(true) }
    if (flags & (1 << 15)) != 0 { m.SetInviteUsers(true) }
    if (flags & (1 << 17)) != 0 { m.SetPinMessages(true) }
    m.SetUntilDate(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// EmojiKeywordsDifference <--
//  + TL_EmojiKeywordsDifference
//

func (m *EmojiKeywordsDifference) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_emojiKeywordsDifference:
        t := m.To_EmojiKeywordsDifference()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *EmojiKeywordsDifference) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_emojiKeywordsDifference:
        m2 := &TLEmojiKeywordsDifference{&EmojiKeywordsDifference_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// emojiKeywordsDifference#5cc761bd lang_code:string from_version:int version:int keywords:Vector<EmojiKeyword> = EmojiKeywordsDifference;
func (m *EmojiKeywordsDifference) To_EmojiKeywordsDifference() *TLEmojiKeywordsDifference {
    return &TLEmojiKeywordsDifference{
        Data2: m.Data2,
    }
}



// emojiKeywordsDifference#5cc761bd lang_code:string from_version:int version:int keywords:Vector<EmojiKeyword> = EmojiKeywordsDifference;
func (m *TLEmojiKeywordsDifference) To_EmojiKeywordsDifference() *EmojiKeywordsDifference {
    return &EmojiKeywordsDifference{
        Constructor: TLConstructor_CRC32_emojiKeywordsDifference,
        Data2: m.Data2,
    }
}


func (m *TLEmojiKeywordsDifference) SetLangCode(v string) { m.Data2.LangCode = v }
func (m *TLEmojiKeywordsDifference) GetLangCode() string { return m.Data2.LangCode }

func (m *TLEmojiKeywordsDifference) SetFromVersion(v int32) { m.Data2.FromVersion = v }
func (m *TLEmojiKeywordsDifference) GetFromVersion() int32 { return m.Data2.FromVersion }

func (m *TLEmojiKeywordsDifference) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLEmojiKeywordsDifference) GetVersion() int32 { return m.Data2.Version }

func (m *TLEmojiKeywordsDifference) SetKeywords(v []*EmojiKeyword) { m.Data2.Keywords = v }
func (m *TLEmojiKeywordsDifference) GetKeywords() []*EmojiKeyword { return m.Data2.Keywords }


func NewTLEmojiKeywordsDifference() * TLEmojiKeywordsDifference {
    return &TLEmojiKeywordsDifference{ Data2: &EmojiKeywordsDifference_Data{} }
}

func (m* TLEmojiKeywordsDifference) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_emojiKeywordsDifference))

    x.String(m.GetLangCode())
    x.Int(m.GetFromVersion())
    x.Int(m.GetVersion())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetKeywords())))
for _, v := range m.GetKeywords() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLEmojiKeywordsDifference) Decode(dbuf *DecodeBuf) error {
    m.SetLangCode(dbuf.String())
    m.SetFromVersion(dbuf.Int())
    m.SetVersion(dbuf.Int())
    c4 := dbuf.Int()
if c4 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
	return dbuf.err
}
l4 := dbuf.Int()
v4 := make([]*EmojiKeyword, l4)
for i := int32(0); i < l4; i++ {
	v4[i] = &EmojiKeyword{}
	v4[i].Decode(dbuf)
}
m.SetKeywords(v4)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// HighScore <--
//  + TL_HighScore
//

func (m *HighScore) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_highScore:
        t := m.To_HighScore()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *HighScore) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_highScore:
        m2 := &TLHighScore{&HighScore_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// highScore#58fffcd0 pos:int user_id:int score:int = HighScore;
func (m *HighScore) To_HighScore() *TLHighScore {
    return &TLHighScore{
        Data2: m.Data2,
    }
}



// highScore#58fffcd0 pos:int user_id:int score:int = HighScore;
func (m *TLHighScore) To_HighScore() *HighScore {
    return &HighScore{
        Constructor: TLConstructor_CRC32_highScore,
        Data2: m.Data2,
    }
}


func (m *TLHighScore) SetPos(v int32) { m.Data2.Pos = v }
func (m *TLHighScore) GetPos() int32 { return m.Data2.Pos }

func (m *TLHighScore) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLHighScore) GetUserId() int32 { return m.Data2.UserId }

func (m *TLHighScore) SetScore(v int32) { m.Data2.Score = v }
func (m *TLHighScore) GetScore() int32 { return m.Data2.Score }


func NewTLHighScore() * TLHighScore {
    return &TLHighScore{ Data2: &HighScore_Data{} }
}

func (m* TLHighScore) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_highScore))

    x.Int(m.GetPos())
    x.Int(m.GetUserId())
    x.Int(m.GetScore())

    return x.buf
}

func (m* TLHighScore) Decode(dbuf *DecodeBuf) error {
    m.SetPos(dbuf.Int())
    m.SetUserId(dbuf.Int())
    m.SetScore(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputContact <--
//  + TL_InputPhoneContact
//

func (m *InputContact) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputPhoneContact:
        t := m.To_InputPhoneContact()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputContact) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputPhoneContact:
        m2 := &TLInputPhoneContact{&InputContact_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputPhoneContact#f392b7f4 client_id:long phone:string first_name:string last_name:string = InputContact;
func (m *InputContact) To_InputPhoneContact() *TLInputPhoneContact {
    return &TLInputPhoneContact{
        Data2: m.Data2,
    }
}



// inputPhoneContact#f392b7f4 client_id:long phone:string first_name:string last_name:string = InputContact;
func (m *TLInputPhoneContact) To_InputContact() *InputContact {
    return &InputContact{
        Constructor: TLConstructor_CRC32_inputPhoneContact,
        Data2: m.Data2,
    }
}


func (m *TLInputPhoneContact) SetClientId(v int64) { m.Data2.ClientId = v }
func (m *TLInputPhoneContact) GetClientId() int64 { return m.Data2.ClientId }

func (m *TLInputPhoneContact) SetPhone(v string) { m.Data2.Phone = v }
func (m *TLInputPhoneContact) GetPhone() string { return m.Data2.Phone }

func (m *TLInputPhoneContact) SetFirstName(v string) { m.Data2.FirstName = v }
func (m *TLInputPhoneContact) GetFirstName() string { return m.Data2.FirstName }

func (m *TLInputPhoneContact) SetLastName(v string) { m.Data2.LastName = v }
func (m *TLInputPhoneContact) GetLastName() string { return m.Data2.LastName }


func NewTLInputPhoneContact() * TLInputPhoneContact {
    return &TLInputPhoneContact{ Data2: &InputContact_Data{} }
}

func (m* TLInputPhoneContact) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPhoneContact))

    x.Long(m.GetClientId())
    x.String(m.GetPhone())
    x.String(m.GetFirstName())
    x.String(m.GetLastName())

    return x.buf
}

func (m* TLInputPhoneContact) Decode(dbuf *DecodeBuf) error {
    m.SetClientId(dbuf.Long())
    m.SetPhone(dbuf.String())
    m.SetFirstName(dbuf.String())
    m.SetLastName(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputPhoto <--
//  + TL_InputPhotoEmpty
//  + TL_InputPhoto
//  + TL_InputPhoto114
//

func (m *InputPhoto) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputPhotoEmpty:
        t := m.To_InputPhotoEmpty()
        return t.Encode()
    case TLConstructor_CRC32_inputPhoto:
        t := m.To_InputPhoto()
        return t.Encode()
    case TLConstructor_CRC32_inputPhoto114:
        t := m.To_InputPhoto114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputPhoto) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputPhotoEmpty:
        m2 := &TLInputPhotoEmpty{&InputPhoto_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputPhoto:
        m2 := &TLInputPhoto{&InputPhoto_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputPhoto114:
        m2 := &TLInputPhoto114{&InputPhoto_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputPhotoEmpty#1cd7bf0d = InputPhoto;
func (m *InputPhoto) To_InputPhotoEmpty() *TLInputPhotoEmpty {
    return &TLInputPhotoEmpty{
        Data2: m.Data2,
    }
}

// inputPhoto#fb95c6c4 id:long access_hash:long = InputPhoto;
func (m *InputPhoto) To_InputPhoto() *TLInputPhoto {
    return &TLInputPhoto{
        Data2: m.Data2,
    }
}

// inputPhoto#3bb3b94a id:long access_hash:long file_reference:bytes = InputPhoto;
func (m *InputPhoto) To_InputPhoto114() *TLInputPhoto114 {
    return &TLInputPhoto114{
        Data2: m.Data2,
    }
}



// inputPhotoEmpty#1cd7bf0d = InputPhoto;
func (m *TLInputPhotoEmpty) To_InputPhoto() *InputPhoto {
    return &InputPhoto{
        Constructor: TLConstructor_CRC32_inputPhotoEmpty,
        Data2: m.Data2,
    }
}



func NewTLInputPhotoEmpty() * TLInputPhotoEmpty {
    return &TLInputPhotoEmpty{ Data2: &InputPhoto_Data{} }
}

func (m* TLInputPhotoEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPhotoEmpty))


    return x.buf
}

func (m* TLInputPhotoEmpty) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputPhoto#fb95c6c4 id:long access_hash:long = InputPhoto;
func (m *TLInputPhoto) To_InputPhoto() *InputPhoto {
    return &InputPhoto{
        Constructor: TLConstructor_CRC32_inputPhoto,
        Data2: m.Data2,
    }
}


func (m *TLInputPhoto) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputPhoto) GetId() int64 { return m.Data2.Id }

func (m *TLInputPhoto) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputPhoto) GetAccessHash() int64 { return m.Data2.AccessHash }


func NewTLInputPhoto() * TLInputPhoto {
    return &TLInputPhoto{ Data2: &InputPhoto_Data{} }
}

func (m* TLInputPhoto) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPhoto))

    x.Long(m.GetId())
    x.Long(m.GetAccessHash())

    return x.buf
}

func (m* TLInputPhoto) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())

    return dbuf.err
}
// inputPhoto#3bb3b94a id:long access_hash:long file_reference:bytes = InputPhoto;
func (m *TLInputPhoto114) To_InputPhoto() *InputPhoto {
    return &InputPhoto{
        Constructor: TLConstructor_CRC32_inputPhoto114,
        Data2: m.Data2,
    }
}


func (m *TLInputPhoto114) SetId(v int64) { m.Data2.Id = v }
func (m *TLInputPhoto114) GetId() int64 { return m.Data2.Id }

func (m *TLInputPhoto114) SetAccessHash(v int64) { m.Data2.AccessHash = v }
func (m *TLInputPhoto114) GetAccessHash() int64 { return m.Data2.AccessHash }

func (m *TLInputPhoto114) SetFileReference(v []byte) { m.Data2.FileReference = v }
func (m *TLInputPhoto114) GetFileReference() []byte { return m.Data2.FileReference }


func NewTLInputPhoto114() * TLInputPhoto114 {
    return &TLInputPhoto114{ Data2: &InputPhoto_Data{} }
}

func (m* TLInputPhoto114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputPhoto114))

    x.Long(m.GetId())
    x.Long(m.GetAccessHash())
    x.StringBytes(m.GetFileReference())

    return x.buf
}

func (m* TLInputPhoto114) Decode(dbuf *DecodeBuf) error {
    m.SetId(dbuf.Long())
    m.SetAccessHash(dbuf.Long())
    m.SetFileReference(dbuf.StringBytes())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// BotCommand <--
//  + TL_BotCommand
//

func (m *BotCommand) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_botCommand:
        t := m.To_BotCommand()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *BotCommand) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_botCommand:
        m2 := &TLBotCommand{&BotCommand_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// botCommand#c27ac8c7 command:string description:string = BotCommand;
func (m *BotCommand) To_BotCommand() *TLBotCommand {
    return &TLBotCommand{
        Data2: m.Data2,
    }
}



// botCommand#c27ac8c7 command:string description:string = BotCommand;
func (m *TLBotCommand) To_BotCommand() *BotCommand {
    return &BotCommand{
        Constructor: TLConstructor_CRC32_botCommand,
        Data2: m.Data2,
    }
}


func (m *TLBotCommand) SetCommand(v string) { m.Data2.Command = v }
func (m *TLBotCommand) GetCommand() string { return m.Data2.Command }

func (m *TLBotCommand) SetDescription(v string) { m.Data2.Description = v }
func (m *TLBotCommand) GetDescription() string { return m.Data2.Description }


func NewTLBotCommand() * TLBotCommand {
    return &TLBotCommand{ Data2: &BotCommand_Data{} }
}

func (m* TLBotCommand) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_botCommand))

    x.String(m.GetCommand())
    x.String(m.GetDescription())

    return x.buf
}

func (m* TLBotCommand) Decode(dbuf *DecodeBuf) error {
    m.SetCommand(dbuf.String())
    m.SetDescription(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// StickerSetCovered <--
//  + TL_StickerSetCovered
//  + TL_StickerSetMultiCovered
//

func (m *StickerSetCovered) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_stickerSetCovered:
        t := m.To_StickerSetCovered()
        return t.Encode()
    case TLConstructor_CRC32_stickerSetMultiCovered:
        t := m.To_StickerSetMultiCovered()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *StickerSetCovered) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_stickerSetCovered:
        m2 := &TLStickerSetCovered{&StickerSetCovered_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_stickerSetMultiCovered:
        m2 := &TLStickerSetMultiCovered{&StickerSetCovered_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// stickerSetCovered#6410a5d2 set:StickerSet cover:Document = StickerSetCovered;
func (m *StickerSetCovered) To_StickerSetCovered() *TLStickerSetCovered {
    return &TLStickerSetCovered{
        Data2: m.Data2,
    }
}

// stickerSetMultiCovered#3407e51b set:StickerSet covers:Vector<Document> = StickerSetCovered;
func (m *StickerSetCovered) To_StickerSetMultiCovered() *TLStickerSetMultiCovered {
    return &TLStickerSetMultiCovered{
        Data2: m.Data2,
    }
}



// stickerSetCovered#6410a5d2 set:StickerSet cover:Document = StickerSetCovered;
func (m *TLStickerSetCovered) To_StickerSetCovered() *StickerSetCovered {
    return &StickerSetCovered{
        Constructor: TLConstructor_CRC32_stickerSetCovered,
        Data2: m.Data2,
    }
}


func (m *TLStickerSetCovered) SetSet(v *StickerSet) { m.Data2.Set = v }
func (m *TLStickerSetCovered) GetSet() *StickerSet { return m.Data2.Set }

func (m *TLStickerSetCovered) SetCover(v *Document) { m.Data2.Cover = v }
func (m *TLStickerSetCovered) GetCover() *Document { return m.Data2.Cover }


func NewTLStickerSetCovered() * TLStickerSetCovered {
    return &TLStickerSetCovered{ Data2: &StickerSetCovered_Data{} }
}

func (m* TLStickerSetCovered) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_stickerSetCovered))

    x.Bytes(m.GetSet().Encode())
    x.Bytes(m.GetCover().Encode())

    return x.buf
}

func (m* TLStickerSetCovered) Decode(dbuf *DecodeBuf) error {
    m1 := &StickerSet{}
    m1.Decode(dbuf)
    m.SetSet(m1)
    m2 := &Document{}
    m2.Decode(dbuf)
    m.SetCover(m2)

    return dbuf.err
}
// stickerSetMultiCovered#3407e51b set:StickerSet covers:Vector<Document> = StickerSetCovered;
func (m *TLStickerSetMultiCovered) To_StickerSetCovered() *StickerSetCovered {
    return &StickerSetCovered{
        Constructor: TLConstructor_CRC32_stickerSetMultiCovered,
        Data2: m.Data2,
    }
}


func (m *TLStickerSetMultiCovered) SetSet(v *StickerSet) { m.Data2.Set = v }
func (m *TLStickerSetMultiCovered) GetSet() *StickerSet { return m.Data2.Set }

func (m *TLStickerSetMultiCovered) SetCovers(v []*Document) { m.Data2.Covers = v }
func (m *TLStickerSetMultiCovered) GetCovers() []*Document { return m.Data2.Covers }


func NewTLStickerSetMultiCovered() * TLStickerSetMultiCovered {
    return &TLStickerSetMultiCovered{ Data2: &StickerSetCovered_Data{} }
}

func (m* TLStickerSetMultiCovered) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_stickerSetMultiCovered))

    x.Bytes(m.GetSet().Encode())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetCovers())))
for _, v := range m.GetCovers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLStickerSetMultiCovered) Decode(dbuf *DecodeBuf) error {
    m1 := &StickerSet{}
    m1.Decode(dbuf)
    m.SetSet(m1)
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*Document, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &Document{}
	v2[i].Decode(dbuf)
}
m.SetCovers(v2)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Messages_FavedStickers <--
//  + TL_MessagesFavedStickersNotModified
//  + TL_MessagesFavedStickers
//

func (m *Messages_FavedStickers) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messages_favedStickersNotModified:
        t := m.To_MessagesFavedStickersNotModified()
        return t.Encode()
    case TLConstructor_CRC32_messages_favedStickers:
        t := m.To_MessagesFavedStickers()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Messages_FavedStickers) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messages_favedStickersNotModified:
        m2 := &TLMessagesFavedStickersNotModified{&Messages_FavedStickers_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messages_favedStickers:
        m2 := &TLMessagesFavedStickers{&Messages_FavedStickers_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messages.favedStickersNotModified#9e8fa6d3 = messages.FavedStickers;
func (m *Messages_FavedStickers) To_MessagesFavedStickersNotModified() *TLMessagesFavedStickersNotModified {
    return &TLMessagesFavedStickersNotModified{
        Data2: m.Data2,
    }
}

// messages.favedStickers#f37f2f16 hash:int packs:Vector<StickerPack> stickers:Vector<Document> = messages.FavedStickers;
func (m *Messages_FavedStickers) To_MessagesFavedStickers() *TLMessagesFavedStickers {
    return &TLMessagesFavedStickers{
        Data2: m.Data2,
    }
}



// messages.favedStickersNotModified#9e8fa6d3 = messages.FavedStickers;
func (m *TLMessagesFavedStickersNotModified) To_Messages_FavedStickers() *Messages_FavedStickers {
    return &Messages_FavedStickers{
        Constructor: TLConstructor_CRC32_messages_favedStickersNotModified,
        Data2: m.Data2,
    }
}



func NewTLMessagesFavedStickersNotModified() * TLMessagesFavedStickersNotModified {
    return &TLMessagesFavedStickersNotModified{ Data2: &Messages_FavedStickers_Data{} }
}

func (m* TLMessagesFavedStickersNotModified) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_favedStickersNotModified))


    return x.buf
}

func (m* TLMessagesFavedStickersNotModified) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// messages.favedStickers#f37f2f16 hash:int packs:Vector<StickerPack> stickers:Vector<Document> = messages.FavedStickers;
func (m *TLMessagesFavedStickers) To_Messages_FavedStickers() *Messages_FavedStickers {
    return &Messages_FavedStickers{
        Constructor: TLConstructor_CRC32_messages_favedStickers,
        Data2: m.Data2,
    }
}


func (m *TLMessagesFavedStickers) SetHash(v int32) { m.Data2.Hash = v }
func (m *TLMessagesFavedStickers) GetHash() int32 { return m.Data2.Hash }

func (m *TLMessagesFavedStickers) SetPacks(v []*StickerPack) { m.Data2.Packs = v }
func (m *TLMessagesFavedStickers) GetPacks() []*StickerPack { return m.Data2.Packs }

func (m *TLMessagesFavedStickers) SetStickers(v []*Document) { m.Data2.Stickers = v }
func (m *TLMessagesFavedStickers) GetStickers() []*Document { return m.Data2.Stickers }


func NewTLMessagesFavedStickers() * TLMessagesFavedStickers {
    return &TLMessagesFavedStickers{ Data2: &Messages_FavedStickers_Data{} }
}

func (m* TLMessagesFavedStickers) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_favedStickers))

    x.Int(m.GetHash())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetPacks())))
for _, v := range m.GetPacks() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetStickers())))
for _, v := range m.GetStickers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLMessagesFavedStickers) Decode(dbuf *DecodeBuf) error {
    m.SetHash(dbuf.Int())
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*StickerPack, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &StickerPack{}
	v2[i].Decode(dbuf)
}
m.SetPacks(v2)

    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*Document, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &Document{}
	v3[i].Decode(dbuf)
}
m.SetStickers(v3)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// WkConfig <--
//  + TL_WkConfig
//

func (m *WkConfig) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_wkConfig:
        t := m.To_WkConfig()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *WkConfig) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_wkConfig:
        m2 := &TLWkConfig{&WkConfig_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// wkConfig#81b2fbe0 flags:# phonecalls_enabled:flags.1?true default_p2p_contacts:flags.3?true date:int expires:int test_mode:Bool this_dc:int wk_options:Vector<WkOption> chat_size_max:int megagroup_size_max:int forwarded_count_max:int online_update_period_ms:int offline_blur_timeout_ms:int offline_idle_timeout_ms:int online_cloud_timeout_ms:int notify_cloud_delay_ms:int notify_default_delay_ms:int chat_big_size:int push_chat_period_ms:int push_chat_limit:int saved_gifs_limit:int edit_time_limit:int rating_e_decay:int stickers_recent_limit:int stickers_faved_limit:int channels_read_media_period:int tmp_sessions:flags.0?int pinned_dialogs_count_max:int call_receive_timeout_ms:int call_ring_timeout_ms:int call_connect_timeout_ms:int call_packet_timeout_ms:int me_url_prefix:string suggested_lang_code:flags.2?string lang_pack_version:flags.2?int disabled_features:Vector<DisabledFeature> = WkConfig;
func (m *WkConfig) To_WkConfig() *TLWkConfig {
    return &TLWkConfig{
        Data2: m.Data2,
    }
}



// wkConfig#81b2fbe0 flags:# phonecalls_enabled:flags.1?true default_p2p_contacts:flags.3?true date:int expires:int test_mode:Bool this_dc:int wk_options:Vector<WkOption> chat_size_max:int megagroup_size_max:int forwarded_count_max:int online_update_period_ms:int offline_blur_timeout_ms:int offline_idle_timeout_ms:int online_cloud_timeout_ms:int notify_cloud_delay_ms:int notify_default_delay_ms:int chat_big_size:int push_chat_period_ms:int push_chat_limit:int saved_gifs_limit:int edit_time_limit:int rating_e_decay:int stickers_recent_limit:int stickers_faved_limit:int channels_read_media_period:int tmp_sessions:flags.0?int pinned_dialogs_count_max:int call_receive_timeout_ms:int call_ring_timeout_ms:int call_connect_timeout_ms:int call_packet_timeout_ms:int me_url_prefix:string suggested_lang_code:flags.2?string lang_pack_version:flags.2?int disabled_features:Vector<DisabledFeature> = WkConfig;
func (m *TLWkConfig) To_WkConfig() *WkConfig {
    return &WkConfig{
        Constructor: TLConstructor_CRC32_wkConfig,
        Data2: m.Data2,
    }
}


func (m *TLWkConfig) SetPhonecallsEnabled(v bool) { m.Data2.PhonecallsEnabled = v }
func (m *TLWkConfig) GetPhonecallsEnabled() bool { return m.Data2.PhonecallsEnabled }

func (m *TLWkConfig) SetDefaultP2pContacts(v bool) { m.Data2.DefaultP2PContacts = v }
func (m *TLWkConfig) GetDefaultP2pContacts() bool { return m.Data2.DefaultP2PContacts }

func (m *TLWkConfig) SetDate(v int32) { m.Data2.Date = v }
func (m *TLWkConfig) GetDate() int32 { return m.Data2.Date }

func (m *TLWkConfig) SetExpires(v int32) { m.Data2.Expires = v }
func (m *TLWkConfig) GetExpires() int32 { return m.Data2.Expires }

func (m *TLWkConfig) SetTestMode(v *Bool) { m.Data2.TestMode = v }
func (m *TLWkConfig) GetTestMode() *Bool { return m.Data2.TestMode }

func (m *TLWkConfig) SetThisDc(v int32) { m.Data2.ThisDc = v }
func (m *TLWkConfig) GetThisDc() int32 { return m.Data2.ThisDc }

func (m *TLWkConfig) SetWkOptions(v []*WkOption) { m.Data2.WkOptions = v }
func (m *TLWkConfig) GetWkOptions() []*WkOption { return m.Data2.WkOptions }

func (m *TLWkConfig) SetChatSizeMax(v int32) { m.Data2.ChatSizeMax = v }
func (m *TLWkConfig) GetChatSizeMax() int32 { return m.Data2.ChatSizeMax }

func (m *TLWkConfig) SetMegagroupSizeMax(v int32) { m.Data2.MegagroupSizeMax = v }
func (m *TLWkConfig) GetMegagroupSizeMax() int32 { return m.Data2.MegagroupSizeMax }

func (m *TLWkConfig) SetForwardedCountMax(v int32) { m.Data2.ForwardedCountMax = v }
func (m *TLWkConfig) GetForwardedCountMax() int32 { return m.Data2.ForwardedCountMax }

func (m *TLWkConfig) SetOnlineUpdatePeriodMs(v int32) { m.Data2.OnlineUpdatePeriodMs = v }
func (m *TLWkConfig) GetOnlineUpdatePeriodMs() int32 { return m.Data2.OnlineUpdatePeriodMs }

func (m *TLWkConfig) SetOfflineBlurTimeoutMs(v int32) { m.Data2.OfflineBlurTimeoutMs = v }
func (m *TLWkConfig) GetOfflineBlurTimeoutMs() int32 { return m.Data2.OfflineBlurTimeoutMs }

func (m *TLWkConfig) SetOfflineIdleTimeoutMs(v int32) { m.Data2.OfflineIdleTimeoutMs = v }
func (m *TLWkConfig) GetOfflineIdleTimeoutMs() int32 { return m.Data2.OfflineIdleTimeoutMs }

func (m *TLWkConfig) SetOnlineCloudTimeoutMs(v int32) { m.Data2.OnlineCloudTimeoutMs = v }
func (m *TLWkConfig) GetOnlineCloudTimeoutMs() int32 { return m.Data2.OnlineCloudTimeoutMs }

func (m *TLWkConfig) SetNotifyCloudDelayMs(v int32) { m.Data2.NotifyCloudDelayMs = v }
func (m *TLWkConfig) GetNotifyCloudDelayMs() int32 { return m.Data2.NotifyCloudDelayMs }

func (m *TLWkConfig) SetNotifyDefaultDelayMs(v int32) { m.Data2.NotifyDefaultDelayMs = v }
func (m *TLWkConfig) GetNotifyDefaultDelayMs() int32 { return m.Data2.NotifyDefaultDelayMs }

func (m *TLWkConfig) SetChatBigSize(v int32) { m.Data2.ChatBigSize = v }
func (m *TLWkConfig) GetChatBigSize() int32 { return m.Data2.ChatBigSize }

func (m *TLWkConfig) SetPushChatPeriodMs(v int32) { m.Data2.PushChatPeriodMs = v }
func (m *TLWkConfig) GetPushChatPeriodMs() int32 { return m.Data2.PushChatPeriodMs }

func (m *TLWkConfig) SetPushChatLimit(v int32) { m.Data2.PushChatLimit = v }
func (m *TLWkConfig) GetPushChatLimit() int32 { return m.Data2.PushChatLimit }

func (m *TLWkConfig) SetSavedGifsLimit(v int32) { m.Data2.SavedGifsLimit = v }
func (m *TLWkConfig) GetSavedGifsLimit() int32 { return m.Data2.SavedGifsLimit }

func (m *TLWkConfig) SetEditTimeLimit(v int32) { m.Data2.EditTimeLimit = v }
func (m *TLWkConfig) GetEditTimeLimit() int32 { return m.Data2.EditTimeLimit }

func (m *TLWkConfig) SetRatingEDecay(v int32) { m.Data2.RatingEDecay = v }
func (m *TLWkConfig) GetRatingEDecay() int32 { return m.Data2.RatingEDecay }

func (m *TLWkConfig) SetStickersRecentLimit(v int32) { m.Data2.StickersRecentLimit = v }
func (m *TLWkConfig) GetStickersRecentLimit() int32 { return m.Data2.StickersRecentLimit }

func (m *TLWkConfig) SetStickersFavedLimit(v int32) { m.Data2.StickersFavedLimit = v }
func (m *TLWkConfig) GetStickersFavedLimit() int32 { return m.Data2.StickersFavedLimit }

func (m *TLWkConfig) SetChannelsReadMediaPeriod(v int32) { m.Data2.ChannelsReadMediaPeriod = v }
func (m *TLWkConfig) GetChannelsReadMediaPeriod() int32 { return m.Data2.ChannelsReadMediaPeriod }

func (m *TLWkConfig) SetTmpSessions(v int32) { m.Data2.TmpSessions = v }
func (m *TLWkConfig) GetTmpSessions() int32 { return m.Data2.TmpSessions }

func (m *TLWkConfig) SetPinnedDialogsCountMax(v int32) { m.Data2.PinnedDialogsCountMax = v }
func (m *TLWkConfig) GetPinnedDialogsCountMax() int32 { return m.Data2.PinnedDialogsCountMax }

func (m *TLWkConfig) SetCallReceiveTimeoutMs(v int32) { m.Data2.CallReceiveTimeoutMs = v }
func (m *TLWkConfig) GetCallReceiveTimeoutMs() int32 { return m.Data2.CallReceiveTimeoutMs }

func (m *TLWkConfig) SetCallRingTimeoutMs(v int32) { m.Data2.CallRingTimeoutMs = v }
func (m *TLWkConfig) GetCallRingTimeoutMs() int32 { return m.Data2.CallRingTimeoutMs }

func (m *TLWkConfig) SetCallConnectTimeoutMs(v int32) { m.Data2.CallConnectTimeoutMs = v }
func (m *TLWkConfig) GetCallConnectTimeoutMs() int32 { return m.Data2.CallConnectTimeoutMs }

func (m *TLWkConfig) SetCallPacketTimeoutMs(v int32) { m.Data2.CallPacketTimeoutMs = v }
func (m *TLWkConfig) GetCallPacketTimeoutMs() int32 { return m.Data2.CallPacketTimeoutMs }

func (m *TLWkConfig) SetMeUrlPrefix(v string) { m.Data2.MeUrlPrefix = v }
func (m *TLWkConfig) GetMeUrlPrefix() string { return m.Data2.MeUrlPrefix }

func (m *TLWkConfig) SetSuggestedLangCode(v string) { m.Data2.SuggestedLangCode = v }
func (m *TLWkConfig) GetSuggestedLangCode() string { return m.Data2.SuggestedLangCode }

func (m *TLWkConfig) SetLangPackVersion(v int32) { m.Data2.LangPackVersion = v }
func (m *TLWkConfig) GetLangPackVersion() int32 { return m.Data2.LangPackVersion }

func (m *TLWkConfig) SetDisabledFeatures(v []*DisabledFeature) { m.Data2.DisabledFeatures = v }
func (m *TLWkConfig) GetDisabledFeatures() []*DisabledFeature { return m.Data2.DisabledFeatures }


func NewTLWkConfig() * TLWkConfig {
    return &TLWkConfig{ Data2: &WkConfig_Data{} }
}

func (m* TLWkConfig) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_wkConfig))

    // flags
    var flags uint32 = 0
    if m.GetPhonecallsEnabled() == true { flags |= 1 << 1 }
    if m.GetDefaultP2pContacts() == true { flags |= 1 << 3 }
    if m.GetTmpSessions() != 0 { flags |= 1 << 0 }
    if m.GetSuggestedLangCode() != "" { flags |= 1 << 2 }
    if m.GetLangPackVersion() != 0 { flags |= 1 << 2 }
	x.UInt(flags)

    
    
    x.Int(m.GetDate())
    x.Int(m.GetExpires())
    x.Bytes(m.GetTestMode().Encode())
    x.Int(m.GetThisDc())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetWkOptions())))
for _, v := range m.GetWkOptions() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(m.GetChatSizeMax())
    x.Int(m.GetMegagroupSizeMax())
    x.Int(m.GetForwardedCountMax())
    x.Int(m.GetOnlineUpdatePeriodMs())
    x.Int(m.GetOfflineBlurTimeoutMs())
    x.Int(m.GetOfflineIdleTimeoutMs())
    x.Int(m.GetOnlineCloudTimeoutMs())
    x.Int(m.GetNotifyCloudDelayMs())
    x.Int(m.GetNotifyDefaultDelayMs())
    x.Int(m.GetChatBigSize())
    x.Int(m.GetPushChatPeriodMs())
    x.Int(m.GetPushChatLimit())
    x.Int(m.GetSavedGifsLimit())
    x.Int(m.GetEditTimeLimit())
    x.Int(m.GetRatingEDecay())
    x.Int(m.GetStickersRecentLimit())
    x.Int(m.GetStickersFavedLimit())
    x.Int(m.GetChannelsReadMediaPeriod())
    if (flags & (1 << 0)) != 0 { x.Int(m.GetTmpSessions()) }
    x.Int(m.GetPinnedDialogsCountMax())
    x.Int(m.GetCallReceiveTimeoutMs())
    x.Int(m.GetCallRingTimeoutMs())
    x.Int(m.GetCallConnectTimeoutMs())
    x.Int(m.GetCallPacketTimeoutMs())
    x.String(m.GetMeUrlPrefix())
    if (flags & (1 << 2)) != 0 { x.String(m.GetSuggestedLangCode()) }
    if (flags & (1 << 2)) != 0 { x.Int(m.GetLangPackVersion()) }
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetDisabledFeatures())))
for _, v := range m.GetDisabledFeatures() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLWkConfig) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 1)) != 0 { m.SetPhonecallsEnabled(true) }
    if (flags & (1 << 3)) != 0 { m.SetDefaultP2pContacts(true) }
    m.SetDate(dbuf.Int())
    m.SetExpires(dbuf.Int())
    m6 := &Bool{}
    m6.Decode(dbuf)
    m.SetTestMode(m6)
    m.SetThisDc(dbuf.Int())
    c8 := dbuf.Int()
if c8 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 8, c8)
	return dbuf.err
}
l8 := dbuf.Int()
v8 := make([]*WkOption, l8)
for i := int32(0); i < l8; i++ {
	v8[i] = &WkOption{}
	v8[i].Decode(dbuf)
}
m.SetWkOptions(v8)

    m.SetChatSizeMax(dbuf.Int())
    m.SetMegagroupSizeMax(dbuf.Int())
    m.SetForwardedCountMax(dbuf.Int())
    m.SetOnlineUpdatePeriodMs(dbuf.Int())
    m.SetOfflineBlurTimeoutMs(dbuf.Int())
    m.SetOfflineIdleTimeoutMs(dbuf.Int())
    m.SetOnlineCloudTimeoutMs(dbuf.Int())
    m.SetNotifyCloudDelayMs(dbuf.Int())
    m.SetNotifyDefaultDelayMs(dbuf.Int())
    m.SetChatBigSize(dbuf.Int())
    m.SetPushChatPeriodMs(dbuf.Int())
    m.SetPushChatLimit(dbuf.Int())
    m.SetSavedGifsLimit(dbuf.Int())
    m.SetEditTimeLimit(dbuf.Int())
    m.SetRatingEDecay(dbuf.Int())
    m.SetStickersRecentLimit(dbuf.Int())
    m.SetStickersFavedLimit(dbuf.Int())
    m.SetChannelsReadMediaPeriod(dbuf.Int())
    if (flags & (1 << 0)) != 0 { m.SetTmpSessions(dbuf.Int()) }
    m.SetPinnedDialogsCountMax(dbuf.Int())
    m.SetCallReceiveTimeoutMs(dbuf.Int())
    m.SetCallRingTimeoutMs(dbuf.Int())
    m.SetCallConnectTimeoutMs(dbuf.Int())
    m.SetCallPacketTimeoutMs(dbuf.Int())
    m.SetMeUrlPrefix(dbuf.String())
    if (flags & (1 << 2)) != 0 { m.SetSuggestedLangCode(dbuf.String()) }
    if (flags & (1 << 2)) != 0 { m.SetLangPackVersion(dbuf.Int()) }
    c36 := dbuf.Int()
if c36 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 36, c36)
	return dbuf.err
}
l36 := dbuf.Int()
v36 := make([]*DisabledFeature, l36)
for i := int32(0); i < l36; i++ {
	v36[i] = &DisabledFeature{}
	v36[i].Decode(dbuf)
}
m.SetDisabledFeatures(v36)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// StatsGroupTopPoster <--
//  + TL_StatsGroupTopPoster
//

func (m *StatsGroupTopPoster) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_statsGroupTopPoster:
        t := m.To_StatsGroupTopPoster()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *StatsGroupTopPoster) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_statsGroupTopPoster:
        m2 := &TLStatsGroupTopPoster{&StatsGroupTopPoster_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// statsGroupTopPoster#18f3d0f7 user_id:int messages:int avg_chars:int = StatsGroupTopPoster;
func (m *StatsGroupTopPoster) To_StatsGroupTopPoster() *TLStatsGroupTopPoster {
    return &TLStatsGroupTopPoster{
        Data2: m.Data2,
    }
}



// statsGroupTopPoster#18f3d0f7 user_id:int messages:int avg_chars:int = StatsGroupTopPoster;
func (m *TLStatsGroupTopPoster) To_StatsGroupTopPoster() *StatsGroupTopPoster {
    return &StatsGroupTopPoster{
        Constructor: TLConstructor_CRC32_statsGroupTopPoster,
        Data2: m.Data2,
    }
}


func (m *TLStatsGroupTopPoster) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLStatsGroupTopPoster) GetUserId() int32 { return m.Data2.UserId }

func (m *TLStatsGroupTopPoster) SetMessages(v int32) { m.Data2.Messages = v }
func (m *TLStatsGroupTopPoster) GetMessages() int32 { return m.Data2.Messages }

func (m *TLStatsGroupTopPoster) SetAvgChars(v int32) { m.Data2.AvgChars = v }
func (m *TLStatsGroupTopPoster) GetAvgChars() int32 { return m.Data2.AvgChars }


func NewTLStatsGroupTopPoster() * TLStatsGroupTopPoster {
    return &TLStatsGroupTopPoster{ Data2: &StatsGroupTopPoster_Data{} }
}

func (m* TLStatsGroupTopPoster) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_statsGroupTopPoster))

    x.Int(m.GetUserId())
    x.Int(m.GetMessages())
    x.Int(m.GetAvgChars())

    return x.buf
}

func (m* TLStatsGroupTopPoster) Decode(dbuf *DecodeBuf) error {
    m.SetUserId(dbuf.Int())
    m.SetMessages(dbuf.Int())
    m.SetAvgChars(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Error <--
//  + TL_Error
//

func (m *Error) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_error:
        t := m.To_Error()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Error) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_error:
        m2 := &TLError{&Error_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// error#c4b9f9bb code:int text:string = Error;
func (m *Error) To_Error() *TLError {
    return &TLError{
        Data2: m.Data2,
    }
}



// error#c4b9f9bb code:int text:string = Error;
func (m *TLError) To_Error() *Error {
    return &Error{
        Constructor: TLConstructor_CRC32_error,
        Data2: m.Data2,
    }
}


func (m *TLError) SetCode(v int32) { m.Data2.Code = v }
func (m *TLError) GetCode() int32 { return m.Data2.Code }

func (m *TLError) SetText(v string) { m.Data2.Text = v }
func (m *TLError) GetText() string { return m.Data2.Text }


func NewTLError() * TLError {
    return &TLError{ Data2: &Error_Data{} }
}

func (m* TLError) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_error))

    x.Int(m.GetCode())
    x.String(m.GetText())

    return x.buf
}

func (m* TLError) Decode(dbuf *DecodeBuf) error {
    m.SetCode(dbuf.Int())
    m.SetText(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// FileLocation <--
//  + TL_FileLocationUnavailable
//  + TL_FileLocation
//  + TL_FileLocationToBeDeprecated
//

func (m *FileLocation) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_fileLocationUnavailable:
        t := m.To_FileLocationUnavailable()
        return t.Encode()
    case TLConstructor_CRC32_fileLocation:
        t := m.To_FileLocation()
        return t.Encode()
    case TLConstructor_CRC32_fileLocationToBeDeprecated:
        t := m.To_FileLocationToBeDeprecated()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *FileLocation) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_fileLocationUnavailable:
        m2 := &TLFileLocationUnavailable{&FileLocation_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_fileLocation:
        m2 := &TLFileLocation{&FileLocation_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_fileLocationToBeDeprecated:
        m2 := &TLFileLocationToBeDeprecated{&FileLocation_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// fileLocationUnavailable#7c596b46 volume_id:long local_id:int secret:long = FileLocation;
func (m *FileLocation) To_FileLocationUnavailable() *TLFileLocationUnavailable {
    return &TLFileLocationUnavailable{
        Data2: m.Data2,
    }
}

// fileLocation#53d69076 dc_id:int volume_id:long local_id:int secret:long = FileLocation;
func (m *FileLocation) To_FileLocation() *TLFileLocation {
    return &TLFileLocation{
        Data2: m.Data2,
    }
}

// fileLocationToBeDeprecated#bc7fc6cd volume_id:long local_id:int = FileLocation;
func (m *FileLocation) To_FileLocationToBeDeprecated() *TLFileLocationToBeDeprecated {
    return &TLFileLocationToBeDeprecated{
        Data2: m.Data2,
    }
}



// fileLocationUnavailable#7c596b46 volume_id:long local_id:int secret:long = FileLocation;
func (m *TLFileLocationUnavailable) To_FileLocation() *FileLocation {
    return &FileLocation{
        Constructor: TLConstructor_CRC32_fileLocationUnavailable,
        Data2: m.Data2,
    }
}


func (m *TLFileLocationUnavailable) SetVolumeId(v int64) { m.Data2.VolumeId = v }
func (m *TLFileLocationUnavailable) GetVolumeId() int64 { return m.Data2.VolumeId }

func (m *TLFileLocationUnavailable) SetLocalId(v int32) { m.Data2.LocalId = v }
func (m *TLFileLocationUnavailable) GetLocalId() int32 { return m.Data2.LocalId }

func (m *TLFileLocationUnavailable) SetSecret(v int64) { m.Data2.Secret = v }
func (m *TLFileLocationUnavailable) GetSecret() int64 { return m.Data2.Secret }


func NewTLFileLocationUnavailable() * TLFileLocationUnavailable {
    return &TLFileLocationUnavailable{ Data2: &FileLocation_Data{} }
}

func (m* TLFileLocationUnavailable) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_fileLocationUnavailable))

    x.Long(m.GetVolumeId())
    x.Int(m.GetLocalId())
    x.Long(m.GetSecret())

    return x.buf
}

func (m* TLFileLocationUnavailable) Decode(dbuf *DecodeBuf) error {
    m.SetVolumeId(dbuf.Long())
    m.SetLocalId(dbuf.Int())
    m.SetSecret(dbuf.Long())

    return dbuf.err
}
// fileLocation#53d69076 dc_id:int volume_id:long local_id:int secret:long = FileLocation;
func (m *TLFileLocation) To_FileLocation() *FileLocation {
    return &FileLocation{
        Constructor: TLConstructor_CRC32_fileLocation,
        Data2: m.Data2,
    }
}


func (m *TLFileLocation) SetDcId(v int32) { m.Data2.DcId = v }
func (m *TLFileLocation) GetDcId() int32 { return m.Data2.DcId }

func (m *TLFileLocation) SetVolumeId(v int64) { m.Data2.VolumeId = v }
func (m *TLFileLocation) GetVolumeId() int64 { return m.Data2.VolumeId }

func (m *TLFileLocation) SetLocalId(v int32) { m.Data2.LocalId = v }
func (m *TLFileLocation) GetLocalId() int32 { return m.Data2.LocalId }

func (m *TLFileLocation) SetSecret(v int64) { m.Data2.Secret = v }
func (m *TLFileLocation) GetSecret() int64 { return m.Data2.Secret }


func NewTLFileLocation() * TLFileLocation {
    return &TLFileLocation{ Data2: &FileLocation_Data{} }
}

func (m* TLFileLocation) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_fileLocation))

    x.Int(m.GetDcId())
    x.Long(m.GetVolumeId())
    x.Int(m.GetLocalId())
    x.Long(m.GetSecret())

    return x.buf
}

func (m* TLFileLocation) Decode(dbuf *DecodeBuf) error {
    m.SetDcId(dbuf.Int())
    m.SetVolumeId(dbuf.Long())
    m.SetLocalId(dbuf.Int())
    m.SetSecret(dbuf.Long())

    return dbuf.err
}
// fileLocationToBeDeprecated#bc7fc6cd volume_id:long local_id:int = FileLocation;
func (m *TLFileLocationToBeDeprecated) To_FileLocation() *FileLocation {
    return &FileLocation{
        Constructor: TLConstructor_CRC32_fileLocationToBeDeprecated,
        Data2: m.Data2,
    }
}


func (m *TLFileLocationToBeDeprecated) SetVolumeId(v int64) { m.Data2.VolumeId = v }
func (m *TLFileLocationToBeDeprecated) GetVolumeId() int64 { return m.Data2.VolumeId }

func (m *TLFileLocationToBeDeprecated) SetLocalId(v int32) { m.Data2.LocalId = v }
func (m *TLFileLocationToBeDeprecated) GetLocalId() int32 { return m.Data2.LocalId }


func NewTLFileLocationToBeDeprecated() * TLFileLocationToBeDeprecated {
    return &TLFileLocationToBeDeprecated{ Data2: &FileLocation_Data{} }
}

func (m* TLFileLocationToBeDeprecated) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_fileLocationToBeDeprecated))

    x.Long(m.GetVolumeId())
    x.Int(m.GetLocalId())

    return x.buf
}

func (m* TLFileLocationToBeDeprecated) Decode(dbuf *DecodeBuf) error {
    m.SetVolumeId(dbuf.Long())
    m.SetLocalId(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputWebDocument <--
//  + TL_InputWebDocument
//

func (m *InputWebDocument) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputWebDocument:
        t := m.To_InputWebDocument()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputWebDocument) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputWebDocument:
        m2 := &TLInputWebDocument{&InputWebDocument_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputWebDocument#9bed434d url:string size:int mime_type:string attributes:Vector<DocumentAttribute> = InputWebDocument;
func (m *InputWebDocument) To_InputWebDocument() *TLInputWebDocument {
    return &TLInputWebDocument{
        Data2: m.Data2,
    }
}



// inputWebDocument#9bed434d url:string size:int mime_type:string attributes:Vector<DocumentAttribute> = InputWebDocument;
func (m *TLInputWebDocument) To_InputWebDocument() *InputWebDocument {
    return &InputWebDocument{
        Constructor: TLConstructor_CRC32_inputWebDocument,
        Data2: m.Data2,
    }
}


func (m *TLInputWebDocument) SetUrl(v string) { m.Data2.Url = v }
func (m *TLInputWebDocument) GetUrl() string { return m.Data2.Url }

func (m *TLInputWebDocument) SetSize(v int32) { m.Data2.Size_ = v }
func (m *TLInputWebDocument) GetSize() int32 { return m.Data2.Size_ }

func (m *TLInputWebDocument) SetMimeType(v string) { m.Data2.MimeType = v }
func (m *TLInputWebDocument) GetMimeType() string { return m.Data2.MimeType }

func (m *TLInputWebDocument) SetAttributes(v []*DocumentAttribute) { m.Data2.Attributes = v }
func (m *TLInputWebDocument) GetAttributes() []*DocumentAttribute { return m.Data2.Attributes }


func NewTLInputWebDocument() * TLInputWebDocument {
    return &TLInputWebDocument{ Data2: &InputWebDocument_Data{} }
}

func (m* TLInputWebDocument) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputWebDocument))

    x.String(m.GetUrl())
    x.Int(m.GetSize())
    x.String(m.GetMimeType())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetAttributes())))
for _, v := range m.GetAttributes() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLInputWebDocument) Decode(dbuf *DecodeBuf) error {
    m.SetUrl(dbuf.String())
    m.SetSize(dbuf.Int())
    m.SetMimeType(dbuf.String())
    c4 := dbuf.Int()
if c4 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
	return dbuf.err
}
l4 := dbuf.Int()
v4 := make([]*DocumentAttribute, l4)
for i := int32(0); i < l4; i++ {
	v4[i] = &DocumentAttribute{}
	v4[i].Decode(dbuf)
}
m.SetAttributes(v4)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Payments_BankCardData <--
//  + TL_PaymentsBankCardData
//

func (m *Payments_BankCardData) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_payments_bankCardData:
        t := m.To_PaymentsBankCardData()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Payments_BankCardData) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_payments_bankCardData:
        m2 := &TLPaymentsBankCardData{&Payments_BankCardData_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// payments.bankCardData#3e24e573 title:string open_urls:Vector<BankCardOpenUrl> = payments.BankCardData;
func (m *Payments_BankCardData) To_PaymentsBankCardData() *TLPaymentsBankCardData {
    return &TLPaymentsBankCardData{
        Data2: m.Data2,
    }
}



// payments.bankCardData#3e24e573 title:string open_urls:Vector<BankCardOpenUrl> = payments.BankCardData;
func (m *TLPaymentsBankCardData) To_Payments_BankCardData() *Payments_BankCardData {
    return &Payments_BankCardData{
        Constructor: TLConstructor_CRC32_payments_bankCardData,
        Data2: m.Data2,
    }
}


func (m *TLPaymentsBankCardData) SetTitle(v string) { m.Data2.Title = v }
func (m *TLPaymentsBankCardData) GetTitle() string { return m.Data2.Title }

func (m *TLPaymentsBankCardData) SetOpenUrls(v []*BankCardOpenUrl) { m.Data2.OpenUrls = v }
func (m *TLPaymentsBankCardData) GetOpenUrls() []*BankCardOpenUrl { return m.Data2.OpenUrls }


func NewTLPaymentsBankCardData() * TLPaymentsBankCardData {
    return &TLPaymentsBankCardData{ Data2: &Payments_BankCardData_Data{} }
}

func (m* TLPaymentsBankCardData) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_payments_bankCardData))

    x.String(m.GetTitle())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetOpenUrls())))
for _, v := range m.GetOpenUrls() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLPaymentsBankCardData) Decode(dbuf *DecodeBuf) error {
    m.SetTitle(dbuf.String())
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*BankCardOpenUrl, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &BankCardOpenUrl{}
	v2[i].Decode(dbuf)
}
m.SetOpenUrls(v2)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// MessageMedia <--
//  + TL_MessageMediaEmpty
//  + TL_MessageMediaPhoto
//  + TL_MessageMediaGeo
//  + TL_MessageMediaContact
//  + TL_MessageMediaUnsupported
//  + TL_MessageMediaDocument
//  + TL_MessageMediaWebPage
//  + TL_MessageMediaVenue
//  + TL_MessageMediaGame
//  + TL_MessageMediaInvoice
//  + TL_MessageMediaGeoLive
//  + TL_MessageMediaPhoto114
//  + TL_MessageMediaContact114
//  + TL_MessageMediaDocument114
//  + TL_MessageMediaVenue114
//  + TL_MessageMediaPoll
//  + TL_MessageMediaDice
//

func (m *MessageMedia) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messageMediaEmpty:
        t := m.To_MessageMediaEmpty()
        return t.Encode()
    case TLConstructor_CRC32_messageMediaPhoto:
        t := m.To_MessageMediaPhoto()
        return t.Encode()
    case TLConstructor_CRC32_messageMediaGeo:
        t := m.To_MessageMediaGeo()
        return t.Encode()
    case TLConstructor_CRC32_messageMediaContact:
        t := m.To_MessageMediaContact()
        return t.Encode()
    case TLConstructor_CRC32_messageMediaUnsupported:
        t := m.To_MessageMediaUnsupported()
        return t.Encode()
    case TLConstructor_CRC32_messageMediaDocument:
        t := m.To_MessageMediaDocument()
        return t.Encode()
    case TLConstructor_CRC32_messageMediaWebPage:
        t := m.To_MessageMediaWebPage()
        return t.Encode()
    case TLConstructor_CRC32_messageMediaVenue:
        t := m.To_MessageMediaVenue()
        return t.Encode()
    case TLConstructor_CRC32_messageMediaGame:
        t := m.To_MessageMediaGame()
        return t.Encode()
    case TLConstructor_CRC32_messageMediaInvoice:
        t := m.To_MessageMediaInvoice()
        return t.Encode()
    case TLConstructor_CRC32_messageMediaGeoLive:
        t := m.To_MessageMediaGeoLive()
        return t.Encode()
    case TLConstructor_CRC32_messageMediaPhoto114:
        t := m.To_MessageMediaPhoto114()
        return t.Encode()
    case TLConstructor_CRC32_messageMediaContact114:
        t := m.To_MessageMediaContact114()
        return t.Encode()
    case TLConstructor_CRC32_messageMediaDocument114:
        t := m.To_MessageMediaDocument114()
        return t.Encode()
    case TLConstructor_CRC32_messageMediaVenue114:
        t := m.To_MessageMediaVenue114()
        return t.Encode()
    case TLConstructor_CRC32_messageMediaPoll:
        t := m.To_MessageMediaPoll()
        return t.Encode()
    case TLConstructor_CRC32_messageMediaDice:
        t := m.To_MessageMediaDice()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *MessageMedia) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messageMediaEmpty:
        m2 := &TLMessageMediaEmpty{&MessageMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageMediaPhoto:
        m2 := &TLMessageMediaPhoto{&MessageMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageMediaGeo:
        m2 := &TLMessageMediaGeo{&MessageMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageMediaContact:
        m2 := &TLMessageMediaContact{&MessageMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageMediaUnsupported:
        m2 := &TLMessageMediaUnsupported{&MessageMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageMediaDocument:
        m2 := &TLMessageMediaDocument{&MessageMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageMediaWebPage:
        m2 := &TLMessageMediaWebPage{&MessageMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageMediaVenue:
        m2 := &TLMessageMediaVenue{&MessageMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageMediaGame:
        m2 := &TLMessageMediaGame{&MessageMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageMediaInvoice:
        m2 := &TLMessageMediaInvoice{&MessageMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageMediaGeoLive:
        m2 := &TLMessageMediaGeoLive{&MessageMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageMediaPhoto114:
        m2 := &TLMessageMediaPhoto114{&MessageMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageMediaContact114:
        m2 := &TLMessageMediaContact114{&MessageMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageMediaDocument114:
        m2 := &TLMessageMediaDocument114{&MessageMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageMediaVenue114:
        m2 := &TLMessageMediaVenue114{&MessageMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageMediaPoll:
        m2 := &TLMessageMediaPoll{&MessageMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_messageMediaDice:
        m2 := &TLMessageMediaDice{&MessageMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messageMediaEmpty#3ded6320 = MessageMedia;
func (m *MessageMedia) To_MessageMediaEmpty() *TLMessageMediaEmpty {
    return &TLMessageMediaEmpty{
        Data2: m.Data2,
    }
}

// messageMediaPhoto#b5223b0f flags:# photo:flags.0?Photo caption:flags.1?string ttl_seconds:flags.2?int = MessageMedia;
func (m *MessageMedia) To_MessageMediaPhoto() *TLMessageMediaPhoto {
    return &TLMessageMediaPhoto{
        Data2: m.Data2,
    }
}

// messageMediaGeo#56e0d474 geo:GeoPoint = MessageMedia;
func (m *MessageMedia) To_MessageMediaGeo() *TLMessageMediaGeo {
    return &TLMessageMediaGeo{
        Data2: m.Data2,
    }
}

// messageMediaContact#5e7d2f39 phone_number:string first_name:string last_name:string user_id:int = MessageMedia;
func (m *MessageMedia) To_MessageMediaContact() *TLMessageMediaContact {
    return &TLMessageMediaContact{
        Data2: m.Data2,
    }
}

// messageMediaUnsupported#9f84f49e = MessageMedia;
func (m *MessageMedia) To_MessageMediaUnsupported() *TLMessageMediaUnsupported {
    return &TLMessageMediaUnsupported{
        Data2: m.Data2,
    }
}

// messageMediaDocument#7c4414d3 flags:# document:flags.0?Document caption:flags.1?string ttl_seconds:flags.2?int = MessageMedia;
func (m *MessageMedia) To_MessageMediaDocument() *TLMessageMediaDocument {
    return &TLMessageMediaDocument{
        Data2: m.Data2,
    }
}

// messageMediaWebPage#a32dd600 webpage:WebPage = MessageMedia;
func (m *MessageMedia) To_MessageMediaWebPage() *TLMessageMediaWebPage {
    return &TLMessageMediaWebPage{
        Data2: m.Data2,
    }
}

// messageMediaVenue#7912b71f geo:GeoPoint title:string address:string provider:string venue_id:string = MessageMedia;
func (m *MessageMedia) To_MessageMediaVenue() *TLMessageMediaVenue {
    return &TLMessageMediaVenue{
        Data2: m.Data2,
    }
}

// messageMediaGame#fdb19008 game:Game = MessageMedia;
func (m *MessageMedia) To_MessageMediaGame() *TLMessageMediaGame {
    return &TLMessageMediaGame{
        Data2: m.Data2,
    }
}

// messageMediaInvoice#84551347 flags:# shipping_address_requested:flags.1?true test:flags.3?true title:string description:string photo:flags.0?WebDocument receipt_msg_id:flags.2?int currency:string total_amount:long start_param:string = MessageMedia;
func (m *MessageMedia) To_MessageMediaInvoice() *TLMessageMediaInvoice {
    return &TLMessageMediaInvoice{
        Data2: m.Data2,
    }
}

// messageMediaGeoLive#7c3c2609 geo:GeoPoint period:int = MessageMedia;
func (m *MessageMedia) To_MessageMediaGeoLive() *TLMessageMediaGeoLive {
    return &TLMessageMediaGeoLive{
        Data2: m.Data2,
    }
}

// messageMediaPhoto#695150d7 flags:# photo:flags.0?Photo ttl_seconds:flags.2?int = MessageMedia;
func (m *MessageMedia) To_MessageMediaPhoto114() *TLMessageMediaPhoto114 {
    return &TLMessageMediaPhoto114{
        Data2: m.Data2,
    }
}

// messageMediaContact#cbf24940 phone_number:string first_name:string last_name:string vcard:string user_id:int = MessageMedia;
func (m *MessageMedia) To_MessageMediaContact114() *TLMessageMediaContact114 {
    return &TLMessageMediaContact114{
        Data2: m.Data2,
    }
}

// messageMediaDocument#9cb070d7 flags:# document:flags.0?Document ttl_seconds:flags.2?int = MessageMedia;
func (m *MessageMedia) To_MessageMediaDocument114() *TLMessageMediaDocument114 {
    return &TLMessageMediaDocument114{
        Data2: m.Data2,
    }
}

// messageMediaVenue#2ec0533f geo:GeoPoint title:string address:string provider:string venue_id:string venue_type:string = MessageMedia;
func (m *MessageMedia) To_MessageMediaVenue114() *TLMessageMediaVenue114 {
    return &TLMessageMediaVenue114{
        Data2: m.Data2,
    }
}

// messageMediaPoll#4bd6e798 poll:Poll results:PollResults = MessageMedia;
func (m *MessageMedia) To_MessageMediaPoll() *TLMessageMediaPoll {
    return &TLMessageMediaPoll{
        Data2: m.Data2,
    }
}

// messageMediaDice#3f7ee58b value:int emoticon:string = MessageMedia;
func (m *MessageMedia) To_MessageMediaDice() *TLMessageMediaDice {
    return &TLMessageMediaDice{
        Data2: m.Data2,
    }
}



// messageMediaEmpty#3ded6320 = MessageMedia;
func (m *TLMessageMediaEmpty) To_MessageMedia() *MessageMedia {
    return &MessageMedia{
        Constructor: TLConstructor_CRC32_messageMediaEmpty,
        Data2: m.Data2,
    }
}



func NewTLMessageMediaEmpty() * TLMessageMediaEmpty {
    return &TLMessageMediaEmpty{ Data2: &MessageMedia_Data{} }
}

func (m* TLMessageMediaEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageMediaEmpty))


    return x.buf
}

func (m* TLMessageMediaEmpty) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// messageMediaPhoto#b5223b0f flags:# photo:flags.0?Photo caption:flags.1?string ttl_seconds:flags.2?int = MessageMedia;
func (m *TLMessageMediaPhoto) To_MessageMedia() *MessageMedia {
    return &MessageMedia{
        Constructor: TLConstructor_CRC32_messageMediaPhoto,
        Data2: m.Data2,
    }
}


func (m *TLMessageMediaPhoto) SetPhoto(v *Photo) { m.Data2.Photo_1 = v }
func (m *TLMessageMediaPhoto) GetPhoto() *Photo { return m.Data2.Photo_1 }

func (m *TLMessageMediaPhoto) SetCaption(v string) { m.Data2.Caption = v }
func (m *TLMessageMediaPhoto) GetCaption() string { return m.Data2.Caption }

func (m *TLMessageMediaPhoto) SetTtlSeconds(v int32) { m.Data2.TtlSeconds = v }
func (m *TLMessageMediaPhoto) GetTtlSeconds() int32 { return m.Data2.TtlSeconds }


func NewTLMessageMediaPhoto() * TLMessageMediaPhoto {
    return &TLMessageMediaPhoto{ Data2: &MessageMedia_Data{} }
}

func (m* TLMessageMediaPhoto) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageMediaPhoto))

    // flags
    var flags uint32 = 0
    if m.GetPhoto() != nil { flags |= 1 << 0 }
    if m.GetCaption() != "" { flags |= 1 << 1 }
    if m.GetTtlSeconds() != 0 { flags |= 1 << 2 }
	x.UInt(flags)

    if (flags & (1 << 0)) != 0 { x.Bytes(m.GetPhoto().Encode()) }
    if (flags & (1 << 1)) != 0 { x.String(m.GetCaption()) }
    if (flags & (1 << 2)) != 0 { x.Int(m.GetTtlSeconds()) }

    return x.buf
}

func (m* TLMessageMediaPhoto) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 {
 m2 := &Photo{}
    m2.Decode(dbuf)
    m.SetPhoto(m2) 
}
    if (flags & (1 << 1)) != 0 { m.SetCaption(dbuf.String()) }
    if (flags & (1 << 2)) != 0 { m.SetTtlSeconds(dbuf.Int()) }

    return dbuf.err
}
// messageMediaGeo#56e0d474 geo:GeoPoint = MessageMedia;
func (m *TLMessageMediaGeo) To_MessageMedia() *MessageMedia {
    return &MessageMedia{
        Constructor: TLConstructor_CRC32_messageMediaGeo,
        Data2: m.Data2,
    }
}


func (m *TLMessageMediaGeo) SetGeo(v *GeoPoint) { m.Data2.Geo = v }
func (m *TLMessageMediaGeo) GetGeo() *GeoPoint { return m.Data2.Geo }


func NewTLMessageMediaGeo() * TLMessageMediaGeo {
    return &TLMessageMediaGeo{ Data2: &MessageMedia_Data{} }
}

func (m* TLMessageMediaGeo) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageMediaGeo))

    x.Bytes(m.GetGeo().Encode())

    return x.buf
}

func (m* TLMessageMediaGeo) Decode(dbuf *DecodeBuf) error {
    m1 := &GeoPoint{}
    m1.Decode(dbuf)
    m.SetGeo(m1)

    return dbuf.err
}
// messageMediaContact#5e7d2f39 phone_number:string first_name:string last_name:string user_id:int = MessageMedia;
func (m *TLMessageMediaContact) To_MessageMedia() *MessageMedia {
    return &MessageMedia{
        Constructor: TLConstructor_CRC32_messageMediaContact,
        Data2: m.Data2,
    }
}


func (m *TLMessageMediaContact) SetPhoneNumber(v string) { m.Data2.PhoneNumber = v }
func (m *TLMessageMediaContact) GetPhoneNumber() string { return m.Data2.PhoneNumber }

func (m *TLMessageMediaContact) SetFirstName(v string) { m.Data2.FirstName = v }
func (m *TLMessageMediaContact) GetFirstName() string { return m.Data2.FirstName }

func (m *TLMessageMediaContact) SetLastName(v string) { m.Data2.LastName = v }
func (m *TLMessageMediaContact) GetLastName() string { return m.Data2.LastName }

func (m *TLMessageMediaContact) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLMessageMediaContact) GetUserId() int32 { return m.Data2.UserId }


func NewTLMessageMediaContact() * TLMessageMediaContact {
    return &TLMessageMediaContact{ Data2: &MessageMedia_Data{} }
}

func (m* TLMessageMediaContact) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageMediaContact))

    x.String(m.GetPhoneNumber())
    x.String(m.GetFirstName())
    x.String(m.GetLastName())
    x.Int(m.GetUserId())

    return x.buf
}

func (m* TLMessageMediaContact) Decode(dbuf *DecodeBuf) error {
    m.SetPhoneNumber(dbuf.String())
    m.SetFirstName(dbuf.String())
    m.SetLastName(dbuf.String())
    m.SetUserId(dbuf.Int())

    return dbuf.err
}
// messageMediaUnsupported#9f84f49e = MessageMedia;
func (m *TLMessageMediaUnsupported) To_MessageMedia() *MessageMedia {
    return &MessageMedia{
        Constructor: TLConstructor_CRC32_messageMediaUnsupported,
        Data2: m.Data2,
    }
}



func NewTLMessageMediaUnsupported() * TLMessageMediaUnsupported {
    return &TLMessageMediaUnsupported{ Data2: &MessageMedia_Data{} }
}

func (m* TLMessageMediaUnsupported) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageMediaUnsupported))


    return x.buf
}

func (m* TLMessageMediaUnsupported) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// messageMediaDocument#7c4414d3 flags:# document:flags.0?Document caption:flags.1?string ttl_seconds:flags.2?int = MessageMedia;
func (m *TLMessageMediaDocument) To_MessageMedia() *MessageMedia {
    return &MessageMedia{
        Constructor: TLConstructor_CRC32_messageMediaDocument,
        Data2: m.Data2,
    }
}


func (m *TLMessageMediaDocument) SetDocument(v *Document) { m.Data2.Document = v }
func (m *TLMessageMediaDocument) GetDocument() *Document { return m.Data2.Document }

func (m *TLMessageMediaDocument) SetCaption(v string) { m.Data2.Caption = v }
func (m *TLMessageMediaDocument) GetCaption() string { return m.Data2.Caption }

func (m *TLMessageMediaDocument) SetTtlSeconds(v int32) { m.Data2.TtlSeconds = v }
func (m *TLMessageMediaDocument) GetTtlSeconds() int32 { return m.Data2.TtlSeconds }


func NewTLMessageMediaDocument() * TLMessageMediaDocument {
    return &TLMessageMediaDocument{ Data2: &MessageMedia_Data{} }
}

func (m* TLMessageMediaDocument) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageMediaDocument))

    // flags
    var flags uint32 = 0
    if m.GetDocument() != nil { flags |= 1 << 0 }
    if m.GetCaption() != "" { flags |= 1 << 1 }
    if m.GetTtlSeconds() != 0 { flags |= 1 << 2 }
	x.UInt(flags)

    if (flags & (1 << 0)) != 0 { x.Bytes(m.GetDocument().Encode()) }
    if (flags & (1 << 1)) != 0 { x.String(m.GetCaption()) }
    if (flags & (1 << 2)) != 0 { x.Int(m.GetTtlSeconds()) }

    return x.buf
}

func (m* TLMessageMediaDocument) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 {
 m2 := &Document{}
    m2.Decode(dbuf)
    m.SetDocument(m2) 
}
    if (flags & (1 << 1)) != 0 { m.SetCaption(dbuf.String()) }
    if (flags & (1 << 2)) != 0 { m.SetTtlSeconds(dbuf.Int()) }

    return dbuf.err
}
// messageMediaWebPage#a32dd600 webpage:WebPage = MessageMedia;
func (m *TLMessageMediaWebPage) To_MessageMedia() *MessageMedia {
    return &MessageMedia{
        Constructor: TLConstructor_CRC32_messageMediaWebPage,
        Data2: m.Data2,
    }
}


func (m *TLMessageMediaWebPage) SetWebpage(v *WebPage) { m.Data2.Webpage = v }
func (m *TLMessageMediaWebPage) GetWebpage() *WebPage { return m.Data2.Webpage }


func NewTLMessageMediaWebPage() * TLMessageMediaWebPage {
    return &TLMessageMediaWebPage{ Data2: &MessageMedia_Data{} }
}

func (m* TLMessageMediaWebPage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageMediaWebPage))

    x.Bytes(m.GetWebpage().Encode())

    return x.buf
}

func (m* TLMessageMediaWebPage) Decode(dbuf *DecodeBuf) error {
    m1 := &WebPage{}
    m1.Decode(dbuf)
    m.SetWebpage(m1)

    return dbuf.err
}
// messageMediaVenue#7912b71f geo:GeoPoint title:string address:string provider:string venue_id:string = MessageMedia;
func (m *TLMessageMediaVenue) To_MessageMedia() *MessageMedia {
    return &MessageMedia{
        Constructor: TLConstructor_CRC32_messageMediaVenue,
        Data2: m.Data2,
    }
}


func (m *TLMessageMediaVenue) SetGeo(v *GeoPoint) { m.Data2.Geo = v }
func (m *TLMessageMediaVenue) GetGeo() *GeoPoint { return m.Data2.Geo }

func (m *TLMessageMediaVenue) SetTitle(v string) { m.Data2.Title = v }
func (m *TLMessageMediaVenue) GetTitle() string { return m.Data2.Title }

func (m *TLMessageMediaVenue) SetAddress(v string) { m.Data2.Address = v }
func (m *TLMessageMediaVenue) GetAddress() string { return m.Data2.Address }

func (m *TLMessageMediaVenue) SetProvider(v string) { m.Data2.Provider = v }
func (m *TLMessageMediaVenue) GetProvider() string { return m.Data2.Provider }

func (m *TLMessageMediaVenue) SetVenueId(v string) { m.Data2.VenueId = v }
func (m *TLMessageMediaVenue) GetVenueId() string { return m.Data2.VenueId }


func NewTLMessageMediaVenue() * TLMessageMediaVenue {
    return &TLMessageMediaVenue{ Data2: &MessageMedia_Data{} }
}

func (m* TLMessageMediaVenue) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageMediaVenue))

    x.Bytes(m.GetGeo().Encode())
    x.String(m.GetTitle())
    x.String(m.GetAddress())
    x.String(m.GetProvider())
    x.String(m.GetVenueId())

    return x.buf
}

func (m* TLMessageMediaVenue) Decode(dbuf *DecodeBuf) error {
    m1 := &GeoPoint{}
    m1.Decode(dbuf)
    m.SetGeo(m1)
    m.SetTitle(dbuf.String())
    m.SetAddress(dbuf.String())
    m.SetProvider(dbuf.String())
    m.SetVenueId(dbuf.String())

    return dbuf.err
}
// messageMediaGame#fdb19008 game:Game = MessageMedia;
func (m *TLMessageMediaGame) To_MessageMedia() *MessageMedia {
    return &MessageMedia{
        Constructor: TLConstructor_CRC32_messageMediaGame,
        Data2: m.Data2,
    }
}


func (m *TLMessageMediaGame) SetGame(v *Game) { m.Data2.Game = v }
func (m *TLMessageMediaGame) GetGame() *Game { return m.Data2.Game }


func NewTLMessageMediaGame() * TLMessageMediaGame {
    return &TLMessageMediaGame{ Data2: &MessageMedia_Data{} }
}

func (m* TLMessageMediaGame) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageMediaGame))

    x.Bytes(m.GetGame().Encode())

    return x.buf
}

func (m* TLMessageMediaGame) Decode(dbuf *DecodeBuf) error {
    m1 := &Game{}
    m1.Decode(dbuf)
    m.SetGame(m1)

    return dbuf.err
}
// messageMediaInvoice#84551347 flags:# shipping_address_requested:flags.1?true test:flags.3?true title:string description:string photo:flags.0?WebDocument receipt_msg_id:flags.2?int currency:string total_amount:long start_param:string = MessageMedia;
func (m *TLMessageMediaInvoice) To_MessageMedia() *MessageMedia {
    return &MessageMedia{
        Constructor: TLConstructor_CRC32_messageMediaInvoice,
        Data2: m.Data2,
    }
}


func (m *TLMessageMediaInvoice) SetShippingAddressRequested(v bool) { m.Data2.ShippingAddressRequested = v }
func (m *TLMessageMediaInvoice) GetShippingAddressRequested() bool { return m.Data2.ShippingAddressRequested }

func (m *TLMessageMediaInvoice) SetTest(v bool) { m.Data2.Test = v }
func (m *TLMessageMediaInvoice) GetTest() bool { return m.Data2.Test }

func (m *TLMessageMediaInvoice) SetTitle(v string) { m.Data2.Title = v }
func (m *TLMessageMediaInvoice) GetTitle() string { return m.Data2.Title }

func (m *TLMessageMediaInvoice) SetDescription(v string) { m.Data2.Description = v }
func (m *TLMessageMediaInvoice) GetDescription() string { return m.Data2.Description }

func (m *TLMessageMediaInvoice) SetPhoto(v *WebDocument) { m.Data2.Photo_19 = v }
func (m *TLMessageMediaInvoice) GetPhoto() *WebDocument { return m.Data2.Photo_19 }

func (m *TLMessageMediaInvoice) SetReceiptMsgId(v int32) { m.Data2.ReceiptMsgId = v }
func (m *TLMessageMediaInvoice) GetReceiptMsgId() int32 { return m.Data2.ReceiptMsgId }

func (m *TLMessageMediaInvoice) SetCurrency(v string) { m.Data2.Currency = v }
func (m *TLMessageMediaInvoice) GetCurrency() string { return m.Data2.Currency }

func (m *TLMessageMediaInvoice) SetTotalAmount(v int64) { m.Data2.TotalAmount = v }
func (m *TLMessageMediaInvoice) GetTotalAmount() int64 { return m.Data2.TotalAmount }

func (m *TLMessageMediaInvoice) SetStartParam(v string) { m.Data2.StartParam = v }
func (m *TLMessageMediaInvoice) GetStartParam() string { return m.Data2.StartParam }


func NewTLMessageMediaInvoice() * TLMessageMediaInvoice {
    return &TLMessageMediaInvoice{ Data2: &MessageMedia_Data{} }
}

func (m* TLMessageMediaInvoice) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageMediaInvoice))

    // flags
    var flags uint32 = 0
    if m.GetShippingAddressRequested() == true { flags |= 1 << 1 }
    if m.GetTest() == true { flags |= 1 << 3 }
    if m.GetPhoto() != nil { flags |= 1 << 0 }
    if m.GetReceiptMsgId() != 0 { flags |= 1 << 2 }
	x.UInt(flags)

    
    
    x.String(m.GetTitle())
    x.String(m.GetDescription())
    if (flags & (1 << 0)) != 0 { x.Bytes(m.GetPhoto().Encode()) }
    if (flags & (1 << 2)) != 0 { x.Int(m.GetReceiptMsgId()) }
    x.String(m.GetCurrency())
    x.Long(m.GetTotalAmount())
    x.String(m.GetStartParam())

    return x.buf
}

func (m* TLMessageMediaInvoice) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 1)) != 0 { m.SetShippingAddressRequested(true) }
    if (flags & (1 << 3)) != 0 { m.SetTest(true) }
    m.SetTitle(dbuf.String())
    m.SetDescription(dbuf.String())
    if (flags & (1 << 0)) != 0 {
 m6 := &WebDocument{}
    m6.Decode(dbuf)
    m.SetPhoto(m6) 
}
    if (flags & (1 << 2)) != 0 { m.SetReceiptMsgId(dbuf.Int()) }
    m.SetCurrency(dbuf.String())
    m.SetTotalAmount(dbuf.Long())
    m.SetStartParam(dbuf.String())

    return dbuf.err
}
// messageMediaGeoLive#7c3c2609 geo:GeoPoint period:int = MessageMedia;
func (m *TLMessageMediaGeoLive) To_MessageMedia() *MessageMedia {
    return &MessageMedia{
        Constructor: TLConstructor_CRC32_messageMediaGeoLive,
        Data2: m.Data2,
    }
}


func (m *TLMessageMediaGeoLive) SetGeo(v *GeoPoint) { m.Data2.Geo = v }
func (m *TLMessageMediaGeoLive) GetGeo() *GeoPoint { return m.Data2.Geo }

func (m *TLMessageMediaGeoLive) SetPeriod(v int32) { m.Data2.Period = v }
func (m *TLMessageMediaGeoLive) GetPeriod() int32 { return m.Data2.Period }


func NewTLMessageMediaGeoLive() * TLMessageMediaGeoLive {
    return &TLMessageMediaGeoLive{ Data2: &MessageMedia_Data{} }
}

func (m* TLMessageMediaGeoLive) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageMediaGeoLive))

    x.Bytes(m.GetGeo().Encode())
    x.Int(m.GetPeriod())

    return x.buf
}

func (m* TLMessageMediaGeoLive) Decode(dbuf *DecodeBuf) error {
    m1 := &GeoPoint{}
    m1.Decode(dbuf)
    m.SetGeo(m1)
    m.SetPeriod(dbuf.Int())

    return dbuf.err
}
// messageMediaPhoto#695150d7 flags:# photo:flags.0?Photo ttl_seconds:flags.2?int = MessageMedia;
func (m *TLMessageMediaPhoto114) To_MessageMedia() *MessageMedia {
    return &MessageMedia{
        Constructor: TLConstructor_CRC32_messageMediaPhoto114,
        Data2: m.Data2,
    }
}


func (m *TLMessageMediaPhoto114) SetPhoto(v *Photo) { m.Data2.Photo_1 = v }
func (m *TLMessageMediaPhoto114) GetPhoto() *Photo { return m.Data2.Photo_1 }

func (m *TLMessageMediaPhoto114) SetTtlSeconds(v int32) { m.Data2.TtlSeconds = v }
func (m *TLMessageMediaPhoto114) GetTtlSeconds() int32 { return m.Data2.TtlSeconds }


func NewTLMessageMediaPhoto114() * TLMessageMediaPhoto114 {
    return &TLMessageMediaPhoto114{ Data2: &MessageMedia_Data{} }
}

func (m* TLMessageMediaPhoto114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageMediaPhoto114))

    // flags
    var flags uint32 = 0
    if m.GetPhoto() != nil { flags |= 1 << 0 }
    if m.GetTtlSeconds() != 0 { flags |= 1 << 2 }
	x.UInt(flags)

    if (flags & (1 << 0)) != 0 { x.Bytes(m.GetPhoto().Encode()) }
    if (flags & (1 << 2)) != 0 { x.Int(m.GetTtlSeconds()) }

    return x.buf
}

func (m* TLMessageMediaPhoto114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 {
 m2 := &Photo{}
    m2.Decode(dbuf)
    m.SetPhoto(m2) 
}
    if (flags & (1 << 2)) != 0 { m.SetTtlSeconds(dbuf.Int()) }

    return dbuf.err
}
// messageMediaContact#cbf24940 phone_number:string first_name:string last_name:string vcard:string user_id:int = MessageMedia;
func (m *TLMessageMediaContact114) To_MessageMedia() *MessageMedia {
    return &MessageMedia{
        Constructor: TLConstructor_CRC32_messageMediaContact114,
        Data2: m.Data2,
    }
}


func (m *TLMessageMediaContact114) SetPhoneNumber(v string) { m.Data2.PhoneNumber = v }
func (m *TLMessageMediaContact114) GetPhoneNumber() string { return m.Data2.PhoneNumber }

func (m *TLMessageMediaContact114) SetFirstName(v string) { m.Data2.FirstName = v }
func (m *TLMessageMediaContact114) GetFirstName() string { return m.Data2.FirstName }

func (m *TLMessageMediaContact114) SetLastName(v string) { m.Data2.LastName = v }
func (m *TLMessageMediaContact114) GetLastName() string { return m.Data2.LastName }

func (m *TLMessageMediaContact114) SetVcard(v string) { m.Data2.Vcard = v }
func (m *TLMessageMediaContact114) GetVcard() string { return m.Data2.Vcard }

func (m *TLMessageMediaContact114) SetUserId(v int32) { m.Data2.UserId = v }
func (m *TLMessageMediaContact114) GetUserId() int32 { return m.Data2.UserId }


func NewTLMessageMediaContact114() * TLMessageMediaContact114 {
    return &TLMessageMediaContact114{ Data2: &MessageMedia_Data{} }
}

func (m* TLMessageMediaContact114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageMediaContact114))

    x.String(m.GetPhoneNumber())
    x.String(m.GetFirstName())
    x.String(m.GetLastName())
    x.String(m.GetVcard())
    x.Int(m.GetUserId())

    return x.buf
}

func (m* TLMessageMediaContact114) Decode(dbuf *DecodeBuf) error {
    m.SetPhoneNumber(dbuf.String())
    m.SetFirstName(dbuf.String())
    m.SetLastName(dbuf.String())
    m.SetVcard(dbuf.String())
    m.SetUserId(dbuf.Int())

    return dbuf.err
}
// messageMediaDocument#9cb070d7 flags:# document:flags.0?Document ttl_seconds:flags.2?int = MessageMedia;
func (m *TLMessageMediaDocument114) To_MessageMedia() *MessageMedia {
    return &MessageMedia{
        Constructor: TLConstructor_CRC32_messageMediaDocument114,
        Data2: m.Data2,
    }
}


func (m *TLMessageMediaDocument114) SetDocument(v *Document) { m.Data2.Document = v }
func (m *TLMessageMediaDocument114) GetDocument() *Document { return m.Data2.Document }

func (m *TLMessageMediaDocument114) SetTtlSeconds(v int32) { m.Data2.TtlSeconds = v }
func (m *TLMessageMediaDocument114) GetTtlSeconds() int32 { return m.Data2.TtlSeconds }


func NewTLMessageMediaDocument114() * TLMessageMediaDocument114 {
    return &TLMessageMediaDocument114{ Data2: &MessageMedia_Data{} }
}

func (m* TLMessageMediaDocument114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageMediaDocument114))

    // flags
    var flags uint32 = 0
    if m.GetDocument() != nil { flags |= 1 << 0 }
    if m.GetTtlSeconds() != 0 { flags |= 1 << 2 }
	x.UInt(flags)

    if (flags & (1 << 0)) != 0 { x.Bytes(m.GetDocument().Encode()) }
    if (flags & (1 << 2)) != 0 { x.Int(m.GetTtlSeconds()) }

    return x.buf
}

func (m* TLMessageMediaDocument114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 {
 m2 := &Document{}
    m2.Decode(dbuf)
    m.SetDocument(m2) 
}
    if (flags & (1 << 2)) != 0 { m.SetTtlSeconds(dbuf.Int()) }

    return dbuf.err
}
// messageMediaVenue#2ec0533f geo:GeoPoint title:string address:string provider:string venue_id:string venue_type:string = MessageMedia;
func (m *TLMessageMediaVenue114) To_MessageMedia() *MessageMedia {
    return &MessageMedia{
        Constructor: TLConstructor_CRC32_messageMediaVenue114,
        Data2: m.Data2,
    }
}


func (m *TLMessageMediaVenue114) SetGeo(v *GeoPoint) { m.Data2.Geo = v }
func (m *TLMessageMediaVenue114) GetGeo() *GeoPoint { return m.Data2.Geo }

func (m *TLMessageMediaVenue114) SetTitle(v string) { m.Data2.Title = v }
func (m *TLMessageMediaVenue114) GetTitle() string { return m.Data2.Title }

func (m *TLMessageMediaVenue114) SetAddress(v string) { m.Data2.Address = v }
func (m *TLMessageMediaVenue114) GetAddress() string { return m.Data2.Address }

func (m *TLMessageMediaVenue114) SetProvider(v string) { m.Data2.Provider = v }
func (m *TLMessageMediaVenue114) GetProvider() string { return m.Data2.Provider }

func (m *TLMessageMediaVenue114) SetVenueId(v string) { m.Data2.VenueId = v }
func (m *TLMessageMediaVenue114) GetVenueId() string { return m.Data2.VenueId }

func (m *TLMessageMediaVenue114) SetVenueType(v string) { m.Data2.VenueType = v }
func (m *TLMessageMediaVenue114) GetVenueType() string { return m.Data2.VenueType }


func NewTLMessageMediaVenue114() * TLMessageMediaVenue114 {
    return &TLMessageMediaVenue114{ Data2: &MessageMedia_Data{} }
}

func (m* TLMessageMediaVenue114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageMediaVenue114))

    x.Bytes(m.GetGeo().Encode())
    x.String(m.GetTitle())
    x.String(m.GetAddress())
    x.String(m.GetProvider())
    x.String(m.GetVenueId())
    x.String(m.GetVenueType())

    return x.buf
}

func (m* TLMessageMediaVenue114) Decode(dbuf *DecodeBuf) error {
    m1 := &GeoPoint{}
    m1.Decode(dbuf)
    m.SetGeo(m1)
    m.SetTitle(dbuf.String())
    m.SetAddress(dbuf.String())
    m.SetProvider(dbuf.String())
    m.SetVenueId(dbuf.String())
    m.SetVenueType(dbuf.String())

    return dbuf.err
}
// messageMediaPoll#4bd6e798 poll:Poll results:PollResults = MessageMedia;
func (m *TLMessageMediaPoll) To_MessageMedia() *MessageMedia {
    return &MessageMedia{
        Constructor: TLConstructor_CRC32_messageMediaPoll,
        Data2: m.Data2,
    }
}


func (m *TLMessageMediaPoll) SetPoll(v *Poll) { m.Data2.Poll = v }
func (m *TLMessageMediaPoll) GetPoll() *Poll { return m.Data2.Poll }

func (m *TLMessageMediaPoll) SetResults(v *PollResults) { m.Data2.Results = v }
func (m *TLMessageMediaPoll) GetResults() *PollResults { return m.Data2.Results }


func NewTLMessageMediaPoll() * TLMessageMediaPoll {
    return &TLMessageMediaPoll{ Data2: &MessageMedia_Data{} }
}

func (m* TLMessageMediaPoll) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageMediaPoll))

    x.Bytes(m.GetPoll().Encode())
    x.Bytes(m.GetResults().Encode())

    return x.buf
}

func (m* TLMessageMediaPoll) Decode(dbuf *DecodeBuf) error {
    m1 := &Poll{}
    m1.Decode(dbuf)
    m.SetPoll(m1)
    m2 := &PollResults{}
    m2.Decode(dbuf)
    m.SetResults(m2)

    return dbuf.err
}
// messageMediaDice#3f7ee58b value:int emoticon:string = MessageMedia;
func (m *TLMessageMediaDice) To_MessageMedia() *MessageMedia {
    return &MessageMedia{
        Constructor: TLConstructor_CRC32_messageMediaDice,
        Data2: m.Data2,
    }
}


func (m *TLMessageMediaDice) SetValue(v int32) { m.Data2.Value = v }
func (m *TLMessageMediaDice) GetValue() int32 { return m.Data2.Value }

func (m *TLMessageMediaDice) SetEmoticon(v string) { m.Data2.Emoticon = v }
func (m *TLMessageMediaDice) GetEmoticon() string { return m.Data2.Emoticon }


func NewTLMessageMediaDice() * TLMessageMediaDice {
    return &TLMessageMediaDice{ Data2: &MessageMedia_Data{} }
}

func (m* TLMessageMediaDice) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messageMediaDice))

    x.Int(m.GetValue())
    x.String(m.GetEmoticon())

    return x.buf
}

func (m* TLMessageMediaDice) Decode(dbuf *DecodeBuf) error {
    m.SetValue(dbuf.Int())
    m.SetEmoticon(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// ReportReason <--
//  + TL_InputReportReasonSpam
//  + TL_InputReportReasonViolence
//  + TL_InputReportReasonPornography
//  + TL_InputReportReasonOther
//  + TL_InputReportReasonChildAbuse
//  + TL_InputReportReasonCopyright
//  + TL_InputReportReasonGeoIrrelevant
//

func (m *ReportReason) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputReportReasonSpam:
        t := m.To_InputReportReasonSpam()
        return t.Encode()
    case TLConstructor_CRC32_inputReportReasonViolence:
        t := m.To_InputReportReasonViolence()
        return t.Encode()
    case TLConstructor_CRC32_inputReportReasonPornography:
        t := m.To_InputReportReasonPornography()
        return t.Encode()
    case TLConstructor_CRC32_inputReportReasonOther:
        t := m.To_InputReportReasonOther()
        return t.Encode()
    case TLConstructor_CRC32_inputReportReasonChildAbuse:
        t := m.To_InputReportReasonChildAbuse()
        return t.Encode()
    case TLConstructor_CRC32_inputReportReasonCopyright:
        t := m.To_InputReportReasonCopyright()
        return t.Encode()
    case TLConstructor_CRC32_inputReportReasonGeoIrrelevant:
        t := m.To_InputReportReasonGeoIrrelevant()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *ReportReason) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputReportReasonSpam:
        m2 := &TLInputReportReasonSpam{&ReportReason_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputReportReasonViolence:
        m2 := &TLInputReportReasonViolence{&ReportReason_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputReportReasonPornography:
        m2 := &TLInputReportReasonPornography{&ReportReason_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputReportReasonOther:
        m2 := &TLInputReportReasonOther{&ReportReason_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputReportReasonChildAbuse:
        m2 := &TLInputReportReasonChildAbuse{&ReportReason_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputReportReasonCopyright:
        m2 := &TLInputReportReasonCopyright{&ReportReason_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputReportReasonGeoIrrelevant:
        m2 := &TLInputReportReasonGeoIrrelevant{&ReportReason_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputReportReasonSpam#58dbcab8 = ReportReason;
func (m *ReportReason) To_InputReportReasonSpam() *TLInputReportReasonSpam {
    return &TLInputReportReasonSpam{
        Data2: m.Data2,
    }
}

// inputReportReasonViolence#1e22c78d = ReportReason;
func (m *ReportReason) To_InputReportReasonViolence() *TLInputReportReasonViolence {
    return &TLInputReportReasonViolence{
        Data2: m.Data2,
    }
}

// inputReportReasonPornography#2e59d922 = ReportReason;
func (m *ReportReason) To_InputReportReasonPornography() *TLInputReportReasonPornography {
    return &TLInputReportReasonPornography{
        Data2: m.Data2,
    }
}

// inputReportReasonOther#e1746d0a text:string = ReportReason;
func (m *ReportReason) To_InputReportReasonOther() *TLInputReportReasonOther {
    return &TLInputReportReasonOther{
        Data2: m.Data2,
    }
}

// inputReportReasonChildAbuse#adf44ee3 = ReportReason;
func (m *ReportReason) To_InputReportReasonChildAbuse() *TLInputReportReasonChildAbuse {
    return &TLInputReportReasonChildAbuse{
        Data2: m.Data2,
    }
}

// inputReportReasonCopyright#9b89f93a = ReportReason;
func (m *ReportReason) To_InputReportReasonCopyright() *TLInputReportReasonCopyright {
    return &TLInputReportReasonCopyright{
        Data2: m.Data2,
    }
}

// inputReportReasonGeoIrrelevant#dbd4feed = ReportReason;
func (m *ReportReason) To_InputReportReasonGeoIrrelevant() *TLInputReportReasonGeoIrrelevant {
    return &TLInputReportReasonGeoIrrelevant{
        Data2: m.Data2,
    }
}



// inputReportReasonSpam#58dbcab8 = ReportReason;
func (m *TLInputReportReasonSpam) To_ReportReason() *ReportReason {
    return &ReportReason{
        Constructor: TLConstructor_CRC32_inputReportReasonSpam,
        Data2: m.Data2,
    }
}



func NewTLInputReportReasonSpam() * TLInputReportReasonSpam {
    return &TLInputReportReasonSpam{ Data2: &ReportReason_Data{} }
}

func (m* TLInputReportReasonSpam) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputReportReasonSpam))


    return x.buf
}

func (m* TLInputReportReasonSpam) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputReportReasonViolence#1e22c78d = ReportReason;
func (m *TLInputReportReasonViolence) To_ReportReason() *ReportReason {
    return &ReportReason{
        Constructor: TLConstructor_CRC32_inputReportReasonViolence,
        Data2: m.Data2,
    }
}



func NewTLInputReportReasonViolence() * TLInputReportReasonViolence {
    return &TLInputReportReasonViolence{ Data2: &ReportReason_Data{} }
}

func (m* TLInputReportReasonViolence) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputReportReasonViolence))


    return x.buf
}

func (m* TLInputReportReasonViolence) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputReportReasonPornography#2e59d922 = ReportReason;
func (m *TLInputReportReasonPornography) To_ReportReason() *ReportReason {
    return &ReportReason{
        Constructor: TLConstructor_CRC32_inputReportReasonPornography,
        Data2: m.Data2,
    }
}



func NewTLInputReportReasonPornography() * TLInputReportReasonPornography {
    return &TLInputReportReasonPornography{ Data2: &ReportReason_Data{} }
}

func (m* TLInputReportReasonPornography) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputReportReasonPornography))


    return x.buf
}

func (m* TLInputReportReasonPornography) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputReportReasonOther#e1746d0a text:string = ReportReason;
func (m *TLInputReportReasonOther) To_ReportReason() *ReportReason {
    return &ReportReason{
        Constructor: TLConstructor_CRC32_inputReportReasonOther,
        Data2: m.Data2,
    }
}


func (m *TLInputReportReasonOther) SetText(v string) { m.Data2.Text = v }
func (m *TLInputReportReasonOther) GetText() string { return m.Data2.Text }


func NewTLInputReportReasonOther() * TLInputReportReasonOther {
    return &TLInputReportReasonOther{ Data2: &ReportReason_Data{} }
}

func (m* TLInputReportReasonOther) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputReportReasonOther))

    x.String(m.GetText())

    return x.buf
}

func (m* TLInputReportReasonOther) Decode(dbuf *DecodeBuf) error {
    m.SetText(dbuf.String())

    return dbuf.err
}
// inputReportReasonChildAbuse#adf44ee3 = ReportReason;
func (m *TLInputReportReasonChildAbuse) To_ReportReason() *ReportReason {
    return &ReportReason{
        Constructor: TLConstructor_CRC32_inputReportReasonChildAbuse,
        Data2: m.Data2,
    }
}



func NewTLInputReportReasonChildAbuse() * TLInputReportReasonChildAbuse {
    return &TLInputReportReasonChildAbuse{ Data2: &ReportReason_Data{} }
}

func (m* TLInputReportReasonChildAbuse) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputReportReasonChildAbuse))


    return x.buf
}

func (m* TLInputReportReasonChildAbuse) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputReportReasonCopyright#9b89f93a = ReportReason;
func (m *TLInputReportReasonCopyright) To_ReportReason() *ReportReason {
    return &ReportReason{
        Constructor: TLConstructor_CRC32_inputReportReasonCopyright,
        Data2: m.Data2,
    }
}



func NewTLInputReportReasonCopyright() * TLInputReportReasonCopyright {
    return &TLInputReportReasonCopyright{ Data2: &ReportReason_Data{} }
}

func (m* TLInputReportReasonCopyright) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputReportReasonCopyright))


    return x.buf
}

func (m* TLInputReportReasonCopyright) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputReportReasonGeoIrrelevant#dbd4feed = ReportReason;
func (m *TLInputReportReasonGeoIrrelevant) To_ReportReason() *ReportReason {
    return &ReportReason{
        Constructor: TLConstructor_CRC32_inputReportReasonGeoIrrelevant,
        Data2: m.Data2,
    }
}



func NewTLInputReportReasonGeoIrrelevant() * TLInputReportReasonGeoIrrelevant {
    return &TLInputReportReasonGeoIrrelevant{ Data2: &ReportReason_Data{} }
}

func (m* TLInputReportReasonGeoIrrelevant) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputReportReasonGeoIrrelevant))


    return x.buf
}

func (m* TLInputReportReasonGeoIrrelevant) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// StickerPack <--
//  + TL_StickerPack
//

func (m *StickerPack) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_stickerPack:
        t := m.To_StickerPack()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *StickerPack) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_stickerPack:
        m2 := &TLStickerPack{&StickerPack_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// stickerPack#12b299d4 emoticon:string documents:Vector<long> = StickerPack;
func (m *StickerPack) To_StickerPack() *TLStickerPack {
    return &TLStickerPack{
        Data2: m.Data2,
    }
}



// stickerPack#12b299d4 emoticon:string documents:Vector<long> = StickerPack;
func (m *TLStickerPack) To_StickerPack() *StickerPack {
    return &StickerPack{
        Constructor: TLConstructor_CRC32_stickerPack,
        Data2: m.Data2,
    }
}


func (m *TLStickerPack) SetEmoticon(v string) { m.Data2.Emoticon = v }
func (m *TLStickerPack) GetEmoticon() string { return m.Data2.Emoticon }

func (m *TLStickerPack) SetDocuments(v []int64) { m.Data2.Documents = v }
func (m *TLStickerPack) GetDocuments() []int64 { return m.Data2.Documents }


func NewTLStickerPack() * TLStickerPack {
    return &TLStickerPack{ Data2: &StickerPack_Data{} }
}

func (m* TLStickerPack) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_stickerPack))

    x.String(m.GetEmoticon())
    x.VectorLong(m.GetDocuments())


    return x.buf
}

func (m* TLStickerPack) Decode(dbuf *DecodeBuf) error {
    m.SetEmoticon(dbuf.String())
    m.SetDocuments(dbuf.VectorLong())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// PhoneCallProtocol <--
//  + TL_PhoneCallProtocol
//  + TL_PhoneCallProtocol114
//

func (m *PhoneCallProtocol) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_phoneCallProtocol:
        t := m.To_PhoneCallProtocol()
        return t.Encode()
    case TLConstructor_CRC32_phoneCallProtocol114:
        t := m.To_PhoneCallProtocol114()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *PhoneCallProtocol) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_phoneCallProtocol:
        m2 := &TLPhoneCallProtocol{&PhoneCallProtocol_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_phoneCallProtocol114:
        m2 := &TLPhoneCallProtocol114{&PhoneCallProtocol_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// phoneCallProtocol#a2bb35cb flags:# udp_p2p:flags.0?true udp_reflector:flags.1?true min_layer:int max_layer:int = PhoneCallProtocol;
func (m *PhoneCallProtocol) To_PhoneCallProtocol() *TLPhoneCallProtocol {
    return &TLPhoneCallProtocol{
        Data2: m.Data2,
    }
}

// phoneCallProtocol#fc878fc8 flags:# udp_p2p:flags.0?true udp_reflector:flags.1?true min_layer:int max_layer:int library_versions:Vector<string> = PhoneCallProtocol;
func (m *PhoneCallProtocol) To_PhoneCallProtocol114() *TLPhoneCallProtocol114 {
    return &TLPhoneCallProtocol114{
        Data2: m.Data2,
    }
}



// phoneCallProtocol#a2bb35cb flags:# udp_p2p:flags.0?true udp_reflector:flags.1?true min_layer:int max_layer:int = PhoneCallProtocol;
func (m *TLPhoneCallProtocol) To_PhoneCallProtocol() *PhoneCallProtocol {
    return &PhoneCallProtocol{
        Constructor: TLConstructor_CRC32_phoneCallProtocol,
        Data2: m.Data2,
    }
}


func (m *TLPhoneCallProtocol) SetUdpP2P(v bool) { m.Data2.UdpP2P = v }
func (m *TLPhoneCallProtocol) GetUdpP2P() bool { return m.Data2.UdpP2P }

func (m *TLPhoneCallProtocol) SetUdpReflector(v bool) { m.Data2.UdpReflector = v }
func (m *TLPhoneCallProtocol) GetUdpReflector() bool { return m.Data2.UdpReflector }

func (m *TLPhoneCallProtocol) SetMinLayer(v int32) { m.Data2.MinLayer = v }
func (m *TLPhoneCallProtocol) GetMinLayer() int32 { return m.Data2.MinLayer }

func (m *TLPhoneCallProtocol) SetMaxLayer(v int32) { m.Data2.MaxLayer = v }
func (m *TLPhoneCallProtocol) GetMaxLayer() int32 { return m.Data2.MaxLayer }


func NewTLPhoneCallProtocol() * TLPhoneCallProtocol {
    return &TLPhoneCallProtocol{ Data2: &PhoneCallProtocol_Data{} }
}

func (m* TLPhoneCallProtocol) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_phoneCallProtocol))

    // flags
    var flags uint32 = 0
    if m.GetUdpP2P() == true { flags |= 1 << 0 }
    if m.GetUdpReflector() == true { flags |= 1 << 1 }
	x.UInt(flags)

    
    
    x.Int(m.GetMinLayer())
    x.Int(m.GetMaxLayer())

    return x.buf
}

func (m* TLPhoneCallProtocol) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetUdpP2P(true) }
    if (flags & (1 << 1)) != 0 { m.SetUdpReflector(true) }
    m.SetMinLayer(dbuf.Int())
    m.SetMaxLayer(dbuf.Int())

    return dbuf.err
}
// phoneCallProtocol#fc878fc8 flags:# udp_p2p:flags.0?true udp_reflector:flags.1?true min_layer:int max_layer:int library_versions:Vector<string> = PhoneCallProtocol;
func (m *TLPhoneCallProtocol114) To_PhoneCallProtocol() *PhoneCallProtocol {
    return &PhoneCallProtocol{
        Constructor: TLConstructor_CRC32_phoneCallProtocol114,
        Data2: m.Data2,
    }
}


func (m *TLPhoneCallProtocol114) SetUdpP2P(v bool) { m.Data2.UdpP2P = v }
func (m *TLPhoneCallProtocol114) GetUdpP2P() bool { return m.Data2.UdpP2P }

func (m *TLPhoneCallProtocol114) SetUdpReflector(v bool) { m.Data2.UdpReflector = v }
func (m *TLPhoneCallProtocol114) GetUdpReflector() bool { return m.Data2.UdpReflector }

func (m *TLPhoneCallProtocol114) SetMinLayer(v int32) { m.Data2.MinLayer = v }
func (m *TLPhoneCallProtocol114) GetMinLayer() int32 { return m.Data2.MinLayer }

func (m *TLPhoneCallProtocol114) SetMaxLayer(v int32) { m.Data2.MaxLayer = v }
func (m *TLPhoneCallProtocol114) GetMaxLayer() int32 { return m.Data2.MaxLayer }

func (m *TLPhoneCallProtocol114) SetLibraryVersions(v []string) { m.Data2.LibraryVersions = v }
func (m *TLPhoneCallProtocol114) GetLibraryVersions() []string { return m.Data2.LibraryVersions }


func NewTLPhoneCallProtocol114() * TLPhoneCallProtocol114 {
    return &TLPhoneCallProtocol114{ Data2: &PhoneCallProtocol_Data{} }
}

func (m* TLPhoneCallProtocol114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_phoneCallProtocol114))

    // flags
    var flags uint32 = 0
    if m.GetUdpP2P() == true { flags |= 1 << 0 }
    if m.GetUdpReflector() == true { flags |= 1 << 1 }
	x.UInt(flags)

    
    
    x.Int(m.GetMinLayer())
    x.Int(m.GetMaxLayer())
    x.VectorString(m.GetLibraryVersions())


    return x.buf
}

func (m* TLPhoneCallProtocol114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetUdpP2P(true) }
    if (flags & (1 << 1)) != 0 { m.SetUdpReflector(true) }
    m.SetMinLayer(dbuf.Int())
    m.SetMaxLayer(dbuf.Int())
    m.SetLibraryVersions(dbuf.VectorString())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// ChannelAdminRights <--
//  + TL_ChannelAdminRights
//

func (m *ChannelAdminRights) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_channelAdminRights:
        t := m.To_ChannelAdminRights()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *ChannelAdminRights) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_channelAdminRights:
        m2 := &TLChannelAdminRights{&ChannelAdminRights_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// channelAdminRights#5d7ceba5 flags:# change_info:flags.0?true post_messages:flags.1?true edit_messages:flags.2?true delete_messages:flags.3?true ban_users:flags.4?true invite_users:flags.5?true invite_link:flags.6?true pin_messages:flags.7?true add_admins:flags.9?true = ChannelAdminRights;
func (m *ChannelAdminRights) To_ChannelAdminRights() *TLChannelAdminRights {
    return &TLChannelAdminRights{
        Data2: m.Data2,
    }
}



// channelAdminRights#5d7ceba5 flags:# change_info:flags.0?true post_messages:flags.1?true edit_messages:flags.2?true delete_messages:flags.3?true ban_users:flags.4?true invite_users:flags.5?true invite_link:flags.6?true pin_messages:flags.7?true add_admins:flags.9?true = ChannelAdminRights;
func (m *TLChannelAdminRights) To_ChannelAdminRights() *ChannelAdminRights {
    return &ChannelAdminRights{
        Constructor: TLConstructor_CRC32_channelAdminRights,
        Data2: m.Data2,
    }
}


func (m *TLChannelAdminRights) SetChangeInfo(v bool) { m.Data2.ChangeInfo = v }
func (m *TLChannelAdminRights) GetChangeInfo() bool { return m.Data2.ChangeInfo }

func (m *TLChannelAdminRights) SetPostMessages(v bool) { m.Data2.PostMessages = v }
func (m *TLChannelAdminRights) GetPostMessages() bool { return m.Data2.PostMessages }

func (m *TLChannelAdminRights) SetEditMessages(v bool) { m.Data2.EditMessages = v }
func (m *TLChannelAdminRights) GetEditMessages() bool { return m.Data2.EditMessages }

func (m *TLChannelAdminRights) SetDeleteMessages(v bool) { m.Data2.DeleteMessages = v }
func (m *TLChannelAdminRights) GetDeleteMessages() bool { return m.Data2.DeleteMessages }

func (m *TLChannelAdminRights) SetBanUsers(v bool) { m.Data2.BanUsers = v }
func (m *TLChannelAdminRights) GetBanUsers() bool { return m.Data2.BanUsers }

func (m *TLChannelAdminRights) SetInviteUsers(v bool) { m.Data2.InviteUsers = v }
func (m *TLChannelAdminRights) GetInviteUsers() bool { return m.Data2.InviteUsers }

func (m *TLChannelAdminRights) SetInviteLink(v bool) { m.Data2.InviteLink = v }
func (m *TLChannelAdminRights) GetInviteLink() bool { return m.Data2.InviteLink }

func (m *TLChannelAdminRights) SetPinMessages(v bool) { m.Data2.PinMessages = v }
func (m *TLChannelAdminRights) GetPinMessages() bool { return m.Data2.PinMessages }

func (m *TLChannelAdminRights) SetAddAdmins(v bool) { m.Data2.AddAdmins = v }
func (m *TLChannelAdminRights) GetAddAdmins() bool { return m.Data2.AddAdmins }


func NewTLChannelAdminRights() * TLChannelAdminRights {
    return &TLChannelAdminRights{ Data2: &ChannelAdminRights_Data{} }
}

func (m* TLChannelAdminRights) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_channelAdminRights))

    // flags
    var flags uint32 = 0
    if m.GetChangeInfo() == true { flags |= 1 << 0 }
    if m.GetPostMessages() == true { flags |= 1 << 1 }
    if m.GetEditMessages() == true { flags |= 1 << 2 }
    if m.GetDeleteMessages() == true { flags |= 1 << 3 }
    if m.GetBanUsers() == true { flags |= 1 << 4 }
    if m.GetInviteUsers() == true { flags |= 1 << 5 }
    if m.GetInviteLink() == true { flags |= 1 << 6 }
    if m.GetPinMessages() == true { flags |= 1 << 7 }
    if m.GetAddAdmins() == true { flags |= 1 << 9 }
	x.UInt(flags)

    
    
    
    
    
    
    
    
    

    return x.buf
}

func (m* TLChannelAdminRights) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetChangeInfo(true) }
    if (flags & (1 << 1)) != 0 { m.SetPostMessages(true) }
    if (flags & (1 << 2)) != 0 { m.SetEditMessages(true) }
    if (flags & (1 << 3)) != 0 { m.SetDeleteMessages(true) }
    if (flags & (1 << 4)) != 0 { m.SetBanUsers(true) }
    if (flags & (1 << 5)) != 0 { m.SetInviteUsers(true) }
    if (flags & (1 << 6)) != 0 { m.SetInviteLink(true) }
    if (flags & (1 << 7)) != 0 { m.SetPinMessages(true) }
    if (flags & (1 << 9)) != 0 { m.SetAddAdmins(true) }

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Messages_BotResults <--
//  + TL_MessagesBotResults
//

func (m *Messages_BotResults) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_messages_botResults:
        t := m.To_MessagesBotResults()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Messages_BotResults) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_messages_botResults:
        m2 := &TLMessagesBotResults{&Messages_BotResults_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// messages.botResults#947ca848 flags:# gallery:flags.0?true query_id:long next_offset:flags.1?string switch_pm:flags.2?InlineBotSwitchPM results:Vector<BotInlineResult> cache_time:int users:Vector<User> = messages.BotResults;
func (m *Messages_BotResults) To_MessagesBotResults() *TLMessagesBotResults {
    return &TLMessagesBotResults{
        Data2: m.Data2,
    }
}



// messages.botResults#947ca848 flags:# gallery:flags.0?true query_id:long next_offset:flags.1?string switch_pm:flags.2?InlineBotSwitchPM results:Vector<BotInlineResult> cache_time:int users:Vector<User> = messages.BotResults;
func (m *TLMessagesBotResults) To_Messages_BotResults() *Messages_BotResults {
    return &Messages_BotResults{
        Constructor: TLConstructor_CRC32_messages_botResults,
        Data2: m.Data2,
    }
}


func (m *TLMessagesBotResults) SetGallery(v bool) { m.Data2.Gallery = v }
func (m *TLMessagesBotResults) GetGallery() bool { return m.Data2.Gallery }

func (m *TLMessagesBotResults) SetQueryId(v int64) { m.Data2.QueryId = v }
func (m *TLMessagesBotResults) GetQueryId() int64 { return m.Data2.QueryId }

func (m *TLMessagesBotResults) SetNextOffset(v string) { m.Data2.NextOffset = v }
func (m *TLMessagesBotResults) GetNextOffset() string { return m.Data2.NextOffset }

func (m *TLMessagesBotResults) SetSwitchPm(v *InlineBotSwitchPM) { m.Data2.SwitchPm = v }
func (m *TLMessagesBotResults) GetSwitchPm() *InlineBotSwitchPM { return m.Data2.SwitchPm }

func (m *TLMessagesBotResults) SetResults(v []*BotInlineResult) { m.Data2.Results = v }
func (m *TLMessagesBotResults) GetResults() []*BotInlineResult { return m.Data2.Results }

func (m *TLMessagesBotResults) SetCacheTime(v int32) { m.Data2.CacheTime = v }
func (m *TLMessagesBotResults) GetCacheTime() int32 { return m.Data2.CacheTime }

func (m *TLMessagesBotResults) SetUsers(v []*User) { m.Data2.Users = v }
func (m *TLMessagesBotResults) GetUsers() []*User { return m.Data2.Users }


func NewTLMessagesBotResults() * TLMessagesBotResults {
    return &TLMessagesBotResults{ Data2: &Messages_BotResults_Data{} }
}

func (m* TLMessagesBotResults) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_messages_botResults))

    // flags
    var flags uint32 = 0
    if m.GetGallery() == true { flags |= 1 << 0 }
    if m.GetNextOffset() != "" { flags |= 1 << 1 }
    if m.GetSwitchPm() != nil { flags |= 1 << 2 }
	x.UInt(flags)

    
    x.Long(m.GetQueryId())
    if (flags & (1 << 1)) != 0 { x.String(m.GetNextOffset()) }
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetSwitchPm().Encode()) }
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetResults())))
for _, v := range m.GetResults() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(m.GetCacheTime())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetUsers())))
for _, v := range m.GetUsers() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLMessagesBotResults) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetGallery(true) }
    m.SetQueryId(dbuf.Long())
    if (flags & (1 << 1)) != 0 { m.SetNextOffset(dbuf.String()) }
    if (flags & (1 << 2)) != 0 {
 m5 := &InlineBotSwitchPM{}
    m5.Decode(dbuf)
    m.SetSwitchPm(m5) 
}
    c6 := dbuf.Int()
if c6 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 6, c6)
	return dbuf.err
}
l6 := dbuf.Int()
v6 := make([]*BotInlineResult, l6)
for i := int32(0); i < l6; i++ {
	v6[i] = &BotInlineResult{}
	v6[i].Decode(dbuf)
}
m.SetResults(v6)

    m.SetCacheTime(dbuf.Int())
    c8 := dbuf.Int()
if c8 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 8, c8)
	return dbuf.err
}
l8 := dbuf.Int()
v8 := make([]*User, l8)
for i := int32(0); i < l8; i++ {
	v8[i] = &User{}
	v8[i].Decode(dbuf)
}
m.SetUsers(v8)


    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// InputMedia <--
//  + TL_InputMediaEmpty
//  + TL_InputMediaUploadedPhoto
//  + TL_InputMediaPhoto
//  + TL_InputMediaGeoPoint
//  + TL_InputMediaContact
//  + TL_InputMediaUploadedDocument
//  + TL_InputMediaDocument
//  + TL_InputMediaVenue
//  + TL_InputMediaGifExternal
//  + TL_InputMediaPhotoExternal
//  + TL_InputMediaDocumentExternal
//  + TL_InputMediaGame
//  + TL_InputMediaInvoice
//  + TL_InputMediaPhoto73
//  + TL_InputMediaDocument73
//  + TL_InputMediaGeoLive
//  + TL_InputMediaUploadedPhoto114
//  + TL_InputMediaPhoto114
//  + TL_InputMediaContact114
//  + TL_InputMediaUploadedDocument114
//  + TL_InputMediaDocument114
//  + TL_InputMediaVenue114
//  + TL_InputMediaPhotoExternal114
//  + TL_InputMediaDocumentExternal114
//  + TL_InputMediaInvoice114
//  + TL_InputMediaGeoLive114
//  + TL_InputMediaPoll
//  + TL_InputMediaDice
//

func (m *InputMedia) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_inputMediaEmpty:
        t := m.To_InputMediaEmpty()
        return t.Encode()
    case TLConstructor_CRC32_inputMediaUploadedPhoto:
        t := m.To_InputMediaUploadedPhoto()
        return t.Encode()
    case TLConstructor_CRC32_inputMediaPhoto:
        t := m.To_InputMediaPhoto()
        return t.Encode()
    case TLConstructor_CRC32_inputMediaGeoPoint:
        t := m.To_InputMediaGeoPoint()
        return t.Encode()
    case TLConstructor_CRC32_inputMediaContact:
        t := m.To_InputMediaContact()
        return t.Encode()
    case TLConstructor_CRC32_inputMediaUploadedDocument:
        t := m.To_InputMediaUploadedDocument()
        return t.Encode()
    case TLConstructor_CRC32_inputMediaDocument:
        t := m.To_InputMediaDocument()
        return t.Encode()
    case TLConstructor_CRC32_inputMediaVenue:
        t := m.To_InputMediaVenue()
        return t.Encode()
    case TLConstructor_CRC32_inputMediaGifExternal:
        t := m.To_InputMediaGifExternal()
        return t.Encode()
    case TLConstructor_CRC32_inputMediaPhotoExternal:
        t := m.To_InputMediaPhotoExternal()
        return t.Encode()
    case TLConstructor_CRC32_inputMediaDocumentExternal:
        t := m.To_InputMediaDocumentExternal()
        return t.Encode()
    case TLConstructor_CRC32_inputMediaGame:
        t := m.To_InputMediaGame()
        return t.Encode()
    case TLConstructor_CRC32_inputMediaInvoice:
        t := m.To_InputMediaInvoice()
        return t.Encode()
    case TLConstructor_CRC32_inputMediaPhoto73:
        t := m.To_InputMediaPhoto73()
        return t.Encode()
    case TLConstructor_CRC32_inputMediaDocument73:
        t := m.To_InputMediaDocument73()
        return t.Encode()
    case TLConstructor_CRC32_inputMediaGeoLive:
        t := m.To_InputMediaGeoLive()
        return t.Encode()
    case TLConstructor_CRC32_inputMediaUploadedPhoto114:
        t := m.To_InputMediaUploadedPhoto114()
        return t.Encode()
    case TLConstructor_CRC32_inputMediaPhoto114:
        t := m.To_InputMediaPhoto114()
        return t.Encode()
    case TLConstructor_CRC32_inputMediaContact114:
        t := m.To_InputMediaContact114()
        return t.Encode()
    case TLConstructor_CRC32_inputMediaUploadedDocument114:
        t := m.To_InputMediaUploadedDocument114()
        return t.Encode()
    case TLConstructor_CRC32_inputMediaDocument114:
        t := m.To_InputMediaDocument114()
        return t.Encode()
    case TLConstructor_CRC32_inputMediaVenue114:
        t := m.To_InputMediaVenue114()
        return t.Encode()
    case TLConstructor_CRC32_inputMediaPhotoExternal114:
        t := m.To_InputMediaPhotoExternal114()
        return t.Encode()
    case TLConstructor_CRC32_inputMediaDocumentExternal114:
        t := m.To_InputMediaDocumentExternal114()
        return t.Encode()
    case TLConstructor_CRC32_inputMediaInvoice114:
        t := m.To_InputMediaInvoice114()
        return t.Encode()
    case TLConstructor_CRC32_inputMediaGeoLive114:
        t := m.To_InputMediaGeoLive114()
        return t.Encode()
    case TLConstructor_CRC32_inputMediaPoll:
        t := m.To_InputMediaPoll()
        return t.Encode()
    case TLConstructor_CRC32_inputMediaDice:
        t := m.To_InputMediaDice()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *InputMedia) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_inputMediaEmpty:
        m2 := &TLInputMediaEmpty{&InputMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMediaUploadedPhoto:
        m2 := &TLInputMediaUploadedPhoto{&InputMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMediaPhoto:
        m2 := &TLInputMediaPhoto{&InputMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMediaGeoPoint:
        m2 := &TLInputMediaGeoPoint{&InputMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMediaContact:
        m2 := &TLInputMediaContact{&InputMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMediaUploadedDocument:
        m2 := &TLInputMediaUploadedDocument{&InputMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMediaDocument:
        m2 := &TLInputMediaDocument{&InputMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMediaVenue:
        m2 := &TLInputMediaVenue{&InputMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMediaGifExternal:
        m2 := &TLInputMediaGifExternal{&InputMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMediaPhotoExternal:
        m2 := &TLInputMediaPhotoExternal{&InputMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMediaDocumentExternal:
        m2 := &TLInputMediaDocumentExternal{&InputMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMediaGame:
        m2 := &TLInputMediaGame{&InputMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMediaInvoice:
        m2 := &TLInputMediaInvoice{&InputMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMediaPhoto73:
        m2 := &TLInputMediaPhoto73{&InputMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMediaDocument73:
        m2 := &TLInputMediaDocument73{&InputMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMediaGeoLive:
        m2 := &TLInputMediaGeoLive{&InputMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMediaUploadedPhoto114:
        m2 := &TLInputMediaUploadedPhoto114{&InputMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMediaPhoto114:
        m2 := &TLInputMediaPhoto114{&InputMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMediaContact114:
        m2 := &TLInputMediaContact114{&InputMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMediaUploadedDocument114:
        m2 := &TLInputMediaUploadedDocument114{&InputMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMediaDocument114:
        m2 := &TLInputMediaDocument114{&InputMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMediaVenue114:
        m2 := &TLInputMediaVenue114{&InputMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMediaPhotoExternal114:
        m2 := &TLInputMediaPhotoExternal114{&InputMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMediaDocumentExternal114:
        m2 := &TLInputMediaDocumentExternal114{&InputMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMediaInvoice114:
        m2 := &TLInputMediaInvoice114{&InputMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMediaGeoLive114:
        m2 := &TLInputMediaGeoLive114{&InputMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMediaPoll:
        m2 := &TLInputMediaPoll{&InputMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputMediaDice:
        m2 := &TLInputMediaDice{&InputMedia_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// inputMediaEmpty#9664f57f = InputMedia;
func (m *InputMedia) To_InputMediaEmpty() *TLInputMediaEmpty {
    return &TLInputMediaEmpty{
        Data2: m.Data2,
    }
}

// inputMediaUploadedPhoto#2f37e231 flags:# file:InputFile caption:string stickers:flags.0?Vector<InputDocument> ttl_seconds:flags.1?int = InputMedia;
func (m *InputMedia) To_InputMediaUploadedPhoto() *TLInputMediaUploadedPhoto {
    return &TLInputMediaUploadedPhoto{
        Data2: m.Data2,
    }
}

// inputMediaPhoto#81fa373a flags:# id:InputPhoto caption:string ttl_seconds:flags.0?int = InputMedia;
func (m *InputMedia) To_InputMediaPhoto() *TLInputMediaPhoto {
    return &TLInputMediaPhoto{
        Data2: m.Data2,
    }
}

// inputMediaGeoPoint#f9c44144 geo_point:InputGeoPoint = InputMedia;
func (m *InputMedia) To_InputMediaGeoPoint() *TLInputMediaGeoPoint {
    return &TLInputMediaGeoPoint{
        Data2: m.Data2,
    }
}

// inputMediaContact#a6e45987 phone_number:string first_name:string last_name:string = InputMedia;
func (m *InputMedia) To_InputMediaContact() *TLInputMediaContact {
    return &TLInputMediaContact{
        Data2: m.Data2,
    }
}

// inputMediaUploadedDocument#e39621fd flags:# file:InputFile thumb:flags.2?InputFile mime_type:string attributes:Vector<DocumentAttribute> caption:string stickers:flags.0?Vector<InputDocument> ttl_seconds:flags.1?int = InputMedia;
func (m *InputMedia) To_InputMediaUploadedDocument() *TLInputMediaUploadedDocument {
    return &TLInputMediaUploadedDocument{
        Data2: m.Data2,
    }
}

// inputMediaDocument#5acb668e flags:# id:InputDocument caption:string ttl_seconds:flags.0?int = InputMedia;
func (m *InputMedia) To_InputMediaDocument() *TLInputMediaDocument {
    return &TLInputMediaDocument{
        Data2: m.Data2,
    }
}

// inputMediaVenue#2827a81a geo_point:InputGeoPoint title:string address:string provider:string venue_id:string = InputMedia;
func (m *InputMedia) To_InputMediaVenue() *TLInputMediaVenue {
    return &TLInputMediaVenue{
        Data2: m.Data2,
    }
}

// inputMediaGifExternal#4843b0fd url:string q:string = InputMedia;
func (m *InputMedia) To_InputMediaGifExternal() *TLInputMediaGifExternal {
    return &TLInputMediaGifExternal{
        Data2: m.Data2,
    }
}

// inputMediaPhotoExternal#922aec1 flags:# url:string caption:string ttl_seconds:flags.0?int = InputMedia;
func (m *InputMedia) To_InputMediaPhotoExternal() *TLInputMediaPhotoExternal {
    return &TLInputMediaPhotoExternal{
        Data2: m.Data2,
    }
}

// inputMediaDocumentExternal#b6f74335 flags:# url:string caption:string ttl_seconds:flags.0?int = InputMedia;
func (m *InputMedia) To_InputMediaDocumentExternal() *TLInputMediaDocumentExternal {
    return &TLInputMediaDocumentExternal{
        Data2: m.Data2,
    }
}

// inputMediaGame#d33f43f3 id:InputGame = InputMedia;
func (m *InputMedia) To_InputMediaGame() *TLInputMediaGame {
    return &TLInputMediaGame{
        Data2: m.Data2,
    }
}

// inputMediaInvoice#92153685 flags:# title:string description:string photo:flags.0?InputWebDocument invoice:Invoice payload:bytes provider:string start_param:string = InputMedia;
func (m *InputMedia) To_InputMediaInvoice() *TLInputMediaInvoice {
    return &TLInputMediaInvoice{
        Data2: m.Data2,
    }
}

// inputMediaPhoto#e9bfb4f3 id:InputPhoto caption:string = InputMedia;
func (m *InputMedia) To_InputMediaPhoto73() *TLInputMediaPhoto73 {
    return &TLInputMediaPhoto73{
        Data2: m.Data2,
    }
}

// inputMediaDocument#1a77f29c id:InputDocument caption:string = InputMedia;
func (m *InputMedia) To_InputMediaDocument73() *TLInputMediaDocument73 {
    return &TLInputMediaDocument73{
        Data2: m.Data2,
    }
}

// inputMediaGeoLive#7b1a118f geo_point:InputGeoPoint period:int = InputMedia;
func (m *InputMedia) To_InputMediaGeoLive() *TLInputMediaGeoLive {
    return &TLInputMediaGeoLive{
        Data2: m.Data2,
    }
}

// inputMediaUploadedPhoto#1e287d04 flags:# file:InputFile stickers:flags.0?Vector<InputDocument> ttl_seconds:flags.1?int = InputMedia;
func (m *InputMedia) To_InputMediaUploadedPhoto114() *TLInputMediaUploadedPhoto114 {
    return &TLInputMediaUploadedPhoto114{
        Data2: m.Data2,
    }
}

// inputMediaPhoto#b3ba0635 flags:# id:InputPhoto ttl_seconds:flags.0?int = InputMedia;
func (m *InputMedia) To_InputMediaPhoto114() *TLInputMediaPhoto114 {
    return &TLInputMediaPhoto114{
        Data2: m.Data2,
    }
}

// inputMediaContact#f8ab7dfb phone_number:string first_name:string last_name:string vcard:string = InputMedia;
func (m *InputMedia) To_InputMediaContact114() *TLInputMediaContact114 {
    return &TLInputMediaContact114{
        Data2: m.Data2,
    }
}

// inputMediaUploadedDocument#5b38c6c1 flags:# nosound_video:flags.3?true file:InputFile thumb:flags.2?InputFile mime_type:string attributes:Vector<DocumentAttribute> stickers:flags.0?Vector<InputDocument> ttl_seconds:flags.1?int = InputMedia;
func (m *InputMedia) To_InputMediaUploadedDocument114() *TLInputMediaUploadedDocument114 {
    return &TLInputMediaUploadedDocument114{
        Data2: m.Data2,
    }
}

// inputMediaDocument#23ab23d2 flags:# id:InputDocument ttl_seconds:flags.0?int = InputMedia;
func (m *InputMedia) To_InputMediaDocument114() *TLInputMediaDocument114 {
    return &TLInputMediaDocument114{
        Data2: m.Data2,
    }
}

// inputMediaVenue#c13d1c11 geo_point:InputGeoPoint title:string address:string provider:string venue_id:string venue_type:string = InputMedia;
func (m *InputMedia) To_InputMediaVenue114() *TLInputMediaVenue114 {
    return &TLInputMediaVenue114{
        Data2: m.Data2,
    }
}

// inputMediaPhotoExternal#e5bbfe1a flags:# url:string ttl_seconds:flags.0?int = InputMedia;
func (m *InputMedia) To_InputMediaPhotoExternal114() *TLInputMediaPhotoExternal114 {
    return &TLInputMediaPhotoExternal114{
        Data2: m.Data2,
    }
}

// inputMediaDocumentExternal#fb52dc99 flags:# url:string ttl_seconds:flags.0?int = InputMedia;
func (m *InputMedia) To_InputMediaDocumentExternal114() *TLInputMediaDocumentExternal114 {
    return &TLInputMediaDocumentExternal114{
        Data2: m.Data2,
    }
}

// inputMediaInvoice#f4e096c3 flags:# title:string description:string photo:flags.0?InputWebDocument invoice:Invoice payload:bytes provider:string provider_data:DataJSON start_param:string = InputMedia;
func (m *InputMedia) To_InputMediaInvoice114() *TLInputMediaInvoice114 {
    return &TLInputMediaInvoice114{
        Data2: m.Data2,
    }
}

// inputMediaGeoLive#ce4e82fd flags:# stopped:flags.0?true geo_point:InputGeoPoint period:flags.1?int = InputMedia;
func (m *InputMedia) To_InputMediaGeoLive114() *TLInputMediaGeoLive114 {
    return &TLInputMediaGeoLive114{
        Data2: m.Data2,
    }
}

// inputMediaPoll#f94e5f1 flags:# poll:Poll correct_answers:flags.0?Vector<bytes> solution:flags.1?string solution_entities:flags.1?Vector<MessageEntity> = InputMedia;
func (m *InputMedia) To_InputMediaPoll() *TLInputMediaPoll {
    return &TLInputMediaPoll{
        Data2: m.Data2,
    }
}

// inputMediaDice#e66fbf7b emoticon:string = InputMedia;
func (m *InputMedia) To_InputMediaDice() *TLInputMediaDice {
    return &TLInputMediaDice{
        Data2: m.Data2,
    }
}



// inputMediaEmpty#9664f57f = InputMedia;
func (m *TLInputMediaEmpty) To_InputMedia() *InputMedia {
    return &InputMedia{
        Constructor: TLConstructor_CRC32_inputMediaEmpty,
        Data2: m.Data2,
    }
}



func NewTLInputMediaEmpty() * TLInputMediaEmpty {
    return &TLInputMediaEmpty{ Data2: &InputMedia_Data{} }
}

func (m* TLInputMediaEmpty) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMediaEmpty))


    return x.buf
}

func (m* TLInputMediaEmpty) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// inputMediaUploadedPhoto#2f37e231 flags:# file:InputFile caption:string stickers:flags.0?Vector<InputDocument> ttl_seconds:flags.1?int = InputMedia;
func (m *TLInputMediaUploadedPhoto) To_InputMedia() *InputMedia {
    return &InputMedia{
        Constructor: TLConstructor_CRC32_inputMediaUploadedPhoto,
        Data2: m.Data2,
    }
}


func (m *TLInputMediaUploadedPhoto) SetFile(v *InputFile) { m.Data2.File = v }
func (m *TLInputMediaUploadedPhoto) GetFile() *InputFile { return m.Data2.File }

func (m *TLInputMediaUploadedPhoto) SetCaption(v string) { m.Data2.Caption = v }
func (m *TLInputMediaUploadedPhoto) GetCaption() string { return m.Data2.Caption }

func (m *TLInputMediaUploadedPhoto) SetStickers(v []*InputDocument) { m.Data2.Stickers = v }
func (m *TLInputMediaUploadedPhoto) GetStickers() []*InputDocument { return m.Data2.Stickers }

func (m *TLInputMediaUploadedPhoto) SetTtlSeconds(v int32) { m.Data2.TtlSeconds = v }
func (m *TLInputMediaUploadedPhoto) GetTtlSeconds() int32 { return m.Data2.TtlSeconds }


func NewTLInputMediaUploadedPhoto() * TLInputMediaUploadedPhoto {
    return &TLInputMediaUploadedPhoto{ Data2: &InputMedia_Data{} }
}

func (m* TLInputMediaUploadedPhoto) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMediaUploadedPhoto))

    // flags
    var flags uint32 = 0
    if m.GetStickers() != nil { flags |= 1 << 0 }
    if m.GetTtlSeconds() != 0 { flags |= 1 << 1 }
	x.UInt(flags)

    x.Bytes(m.GetFile().Encode())
    x.String(m.GetCaption())
    if (flags & (1 << 0)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetStickers())))
for _, v := range m.GetStickers() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}
    if (flags & (1 << 1)) != 0 { x.Int(m.GetTtlSeconds()) }

    return x.buf
}

func (m* TLInputMediaUploadedPhoto) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m2 := &InputFile{}
    m2.Decode(dbuf)
    m.SetFile(m2)
    m.SetCaption(dbuf.String())
    if (flags & (1 << 0)) != 0 {
 c4 := dbuf.Int()
if c4 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 4, c4)
	return dbuf.err
}
l4 := dbuf.Int()
v4 := make([]*InputDocument, l4)
for i := int32(0); i < l4; i++ {
	v4[i] = &InputDocument{}
	v4[i].Decode(dbuf)
}
m.SetStickers(v4)
 
}
    if (flags & (1 << 1)) != 0 { m.SetTtlSeconds(dbuf.Int()) }

    return dbuf.err
}
// inputMediaPhoto#81fa373a flags:# id:InputPhoto caption:string ttl_seconds:flags.0?int = InputMedia;
func (m *TLInputMediaPhoto) To_InputMedia() *InputMedia {
    return &InputMedia{
        Constructor: TLConstructor_CRC32_inputMediaPhoto,
        Data2: m.Data2,
    }
}


func (m *TLInputMediaPhoto) SetId(v *InputPhoto) { m.Data2.Id_5 = v }
func (m *TLInputMediaPhoto) GetId() *InputPhoto { return m.Data2.Id_5 }

func (m *TLInputMediaPhoto) SetCaption(v string) { m.Data2.Caption = v }
func (m *TLInputMediaPhoto) GetCaption() string { return m.Data2.Caption }

func (m *TLInputMediaPhoto) SetTtlSeconds(v int32) { m.Data2.TtlSeconds = v }
func (m *TLInputMediaPhoto) GetTtlSeconds() int32 { return m.Data2.TtlSeconds }


func NewTLInputMediaPhoto() * TLInputMediaPhoto {
    return &TLInputMediaPhoto{ Data2: &InputMedia_Data{} }
}

func (m* TLInputMediaPhoto) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMediaPhoto))

    // flags
    var flags uint32 = 0
    if m.GetTtlSeconds() != 0 { flags |= 1 << 0 }
	x.UInt(flags)

    x.Bytes(m.GetId().Encode())
    x.String(m.GetCaption())
    if (flags & (1 << 0)) != 0 { x.Int(m.GetTtlSeconds()) }

    return x.buf
}

func (m* TLInputMediaPhoto) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m2 := &InputPhoto{}
    m2.Decode(dbuf)
    m.SetId(m2)
    m.SetCaption(dbuf.String())
    if (flags & (1 << 0)) != 0 { m.SetTtlSeconds(dbuf.Int()) }

    return dbuf.err
}
// inputMediaGeoPoint#f9c44144 geo_point:InputGeoPoint = InputMedia;
func (m *TLInputMediaGeoPoint) To_InputMedia() *InputMedia {
    return &InputMedia{
        Constructor: TLConstructor_CRC32_inputMediaGeoPoint,
        Data2: m.Data2,
    }
}


func (m *TLInputMediaGeoPoint) SetGeoPoint(v *InputGeoPoint) { m.Data2.GeoPoint = v }
func (m *TLInputMediaGeoPoint) GetGeoPoint() *InputGeoPoint { return m.Data2.GeoPoint }


func NewTLInputMediaGeoPoint() * TLInputMediaGeoPoint {
    return &TLInputMediaGeoPoint{ Data2: &InputMedia_Data{} }
}

func (m* TLInputMediaGeoPoint) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMediaGeoPoint))

    x.Bytes(m.GetGeoPoint().Encode())

    return x.buf
}

func (m* TLInputMediaGeoPoint) Decode(dbuf *DecodeBuf) error {
    m1 := &InputGeoPoint{}
    m1.Decode(dbuf)
    m.SetGeoPoint(m1)

    return dbuf.err
}
// inputMediaContact#a6e45987 phone_number:string first_name:string last_name:string = InputMedia;
func (m *TLInputMediaContact) To_InputMedia() *InputMedia {
    return &InputMedia{
        Constructor: TLConstructor_CRC32_inputMediaContact,
        Data2: m.Data2,
    }
}


func (m *TLInputMediaContact) SetPhoneNumber(v string) { m.Data2.PhoneNumber = v }
func (m *TLInputMediaContact) GetPhoneNumber() string { return m.Data2.PhoneNumber }

func (m *TLInputMediaContact) SetFirstName(v string) { m.Data2.FirstName = v }
func (m *TLInputMediaContact) GetFirstName() string { return m.Data2.FirstName }

func (m *TLInputMediaContact) SetLastName(v string) { m.Data2.LastName = v }
func (m *TLInputMediaContact) GetLastName() string { return m.Data2.LastName }


func NewTLInputMediaContact() * TLInputMediaContact {
    return &TLInputMediaContact{ Data2: &InputMedia_Data{} }
}

func (m* TLInputMediaContact) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMediaContact))

    x.String(m.GetPhoneNumber())
    x.String(m.GetFirstName())
    x.String(m.GetLastName())

    return x.buf
}

func (m* TLInputMediaContact) Decode(dbuf *DecodeBuf) error {
    m.SetPhoneNumber(dbuf.String())
    m.SetFirstName(dbuf.String())
    m.SetLastName(dbuf.String())

    return dbuf.err
}
// inputMediaUploadedDocument#e39621fd flags:# file:InputFile thumb:flags.2?InputFile mime_type:string attributes:Vector<DocumentAttribute> caption:string stickers:flags.0?Vector<InputDocument> ttl_seconds:flags.1?int = InputMedia;
func (m *TLInputMediaUploadedDocument) To_InputMedia() *InputMedia {
    return &InputMedia{
        Constructor: TLConstructor_CRC32_inputMediaUploadedDocument,
        Data2: m.Data2,
    }
}


func (m *TLInputMediaUploadedDocument) SetFile(v *InputFile) { m.Data2.File = v }
func (m *TLInputMediaUploadedDocument) GetFile() *InputFile { return m.Data2.File }

func (m *TLInputMediaUploadedDocument) SetThumb(v *InputFile) { m.Data2.Thumb = v }
func (m *TLInputMediaUploadedDocument) GetThumb() *InputFile { return m.Data2.Thumb }

func (m *TLInputMediaUploadedDocument) SetMimeType(v string) { m.Data2.MimeType = v }
func (m *TLInputMediaUploadedDocument) GetMimeType() string { return m.Data2.MimeType }

func (m *TLInputMediaUploadedDocument) SetAttributes(v []*DocumentAttribute) { m.Data2.Attributes = v }
func (m *TLInputMediaUploadedDocument) GetAttributes() []*DocumentAttribute { return m.Data2.Attributes }

func (m *TLInputMediaUploadedDocument) SetCaption(v string) { m.Data2.Caption = v }
func (m *TLInputMediaUploadedDocument) GetCaption() string { return m.Data2.Caption }

func (m *TLInputMediaUploadedDocument) SetStickers(v []*InputDocument) { m.Data2.Stickers = v }
func (m *TLInputMediaUploadedDocument) GetStickers() []*InputDocument { return m.Data2.Stickers }

func (m *TLInputMediaUploadedDocument) SetTtlSeconds(v int32) { m.Data2.TtlSeconds = v }
func (m *TLInputMediaUploadedDocument) GetTtlSeconds() int32 { return m.Data2.TtlSeconds }


func NewTLInputMediaUploadedDocument() * TLInputMediaUploadedDocument {
    return &TLInputMediaUploadedDocument{ Data2: &InputMedia_Data{} }
}

func (m* TLInputMediaUploadedDocument) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMediaUploadedDocument))

    // flags
    var flags uint32 = 0
    if m.GetThumb() != nil { flags |= 1 << 2 }
    if m.GetStickers() != nil { flags |= 1 << 0 }
    if m.GetTtlSeconds() != 0 { flags |= 1 << 1 }
	x.UInt(flags)

    x.Bytes(m.GetFile().Encode())
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetThumb().Encode()) }
    x.String(m.GetMimeType())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetAttributes())))
for _, v := range m.GetAttributes() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.String(m.GetCaption())
    if (flags & (1 << 0)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetStickers())))
for _, v := range m.GetStickers() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}
    if (flags & (1 << 1)) != 0 { x.Int(m.GetTtlSeconds()) }

    return x.buf
}

func (m* TLInputMediaUploadedDocument) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m2 := &InputFile{}
    m2.Decode(dbuf)
    m.SetFile(m2)
    if (flags & (1 << 2)) != 0 {
 m3 := &InputFile{}
    m3.Decode(dbuf)
    m.SetThumb(m3) 
}
    m.SetMimeType(dbuf.String())
    c5 := dbuf.Int()
if c5 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 5, c5)
	return dbuf.err
}
l5 := dbuf.Int()
v5 := make([]*DocumentAttribute, l5)
for i := int32(0); i < l5; i++ {
	v5[i] = &DocumentAttribute{}
	v5[i].Decode(dbuf)
}
m.SetAttributes(v5)

    m.SetCaption(dbuf.String())
    if (flags & (1 << 0)) != 0 {
 c7 := dbuf.Int()
if c7 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 7, c7)
	return dbuf.err
}
l7 := dbuf.Int()
v7 := make([]*InputDocument, l7)
for i := int32(0); i < l7; i++ {
	v7[i] = &InputDocument{}
	v7[i].Decode(dbuf)
}
m.SetStickers(v7)
 
}
    if (flags & (1 << 1)) != 0 { m.SetTtlSeconds(dbuf.Int()) }

    return dbuf.err
}
// inputMediaDocument#5acb668e flags:# id:InputDocument caption:string ttl_seconds:flags.0?int = InputMedia;
func (m *TLInputMediaDocument) To_InputMedia() *InputMedia {
    return &InputMedia{
        Constructor: TLConstructor_CRC32_inputMediaDocument,
        Data2: m.Data2,
    }
}


func (m *TLInputMediaDocument) SetId(v *InputDocument) { m.Data2.Id_13 = v }
func (m *TLInputMediaDocument) GetId() *InputDocument { return m.Data2.Id_13 }

func (m *TLInputMediaDocument) SetCaption(v string) { m.Data2.Caption = v }
func (m *TLInputMediaDocument) GetCaption() string { return m.Data2.Caption }

func (m *TLInputMediaDocument) SetTtlSeconds(v int32) { m.Data2.TtlSeconds = v }
func (m *TLInputMediaDocument) GetTtlSeconds() int32 { return m.Data2.TtlSeconds }


func NewTLInputMediaDocument() * TLInputMediaDocument {
    return &TLInputMediaDocument{ Data2: &InputMedia_Data{} }
}

func (m* TLInputMediaDocument) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMediaDocument))

    // flags
    var flags uint32 = 0
    if m.GetTtlSeconds() != 0 { flags |= 1 << 0 }
	x.UInt(flags)

    x.Bytes(m.GetId().Encode())
    x.String(m.GetCaption())
    if (flags & (1 << 0)) != 0 { x.Int(m.GetTtlSeconds()) }

    return x.buf
}

func (m* TLInputMediaDocument) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m2 := &InputDocument{}
    m2.Decode(dbuf)
    m.SetId(m2)
    m.SetCaption(dbuf.String())
    if (flags & (1 << 0)) != 0 { m.SetTtlSeconds(dbuf.Int()) }

    return dbuf.err
}
// inputMediaVenue#2827a81a geo_point:InputGeoPoint title:string address:string provider:string venue_id:string = InputMedia;
func (m *TLInputMediaVenue) To_InputMedia() *InputMedia {
    return &InputMedia{
        Constructor: TLConstructor_CRC32_inputMediaVenue,
        Data2: m.Data2,
    }
}


func (m *TLInputMediaVenue) SetGeoPoint(v *InputGeoPoint) { m.Data2.GeoPoint = v }
func (m *TLInputMediaVenue) GetGeoPoint() *InputGeoPoint { return m.Data2.GeoPoint }

func (m *TLInputMediaVenue) SetTitle(v string) { m.Data2.Title = v }
func (m *TLInputMediaVenue) GetTitle() string { return m.Data2.Title }

func (m *TLInputMediaVenue) SetAddress(v string) { m.Data2.Address = v }
func (m *TLInputMediaVenue) GetAddress() string { return m.Data2.Address }

func (m *TLInputMediaVenue) SetProvider(v string) { m.Data2.Provider = v }
func (m *TLInputMediaVenue) GetProvider() string { return m.Data2.Provider }

func (m *TLInputMediaVenue) SetVenueId(v string) { m.Data2.VenueId = v }
func (m *TLInputMediaVenue) GetVenueId() string { return m.Data2.VenueId }


func NewTLInputMediaVenue() * TLInputMediaVenue {
    return &TLInputMediaVenue{ Data2: &InputMedia_Data{} }
}

func (m* TLInputMediaVenue) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMediaVenue))

    x.Bytes(m.GetGeoPoint().Encode())
    x.String(m.GetTitle())
    x.String(m.GetAddress())
    x.String(m.GetProvider())
    x.String(m.GetVenueId())

    return x.buf
}

func (m* TLInputMediaVenue) Decode(dbuf *DecodeBuf) error {
    m1 := &InputGeoPoint{}
    m1.Decode(dbuf)
    m.SetGeoPoint(m1)
    m.SetTitle(dbuf.String())
    m.SetAddress(dbuf.String())
    m.SetProvider(dbuf.String())
    m.SetVenueId(dbuf.String())

    return dbuf.err
}
// inputMediaGifExternal#4843b0fd url:string q:string = InputMedia;
func (m *TLInputMediaGifExternal) To_InputMedia() *InputMedia {
    return &InputMedia{
        Constructor: TLConstructor_CRC32_inputMediaGifExternal,
        Data2: m.Data2,
    }
}


func (m *TLInputMediaGifExternal) SetUrl(v string) { m.Data2.Url = v }
func (m *TLInputMediaGifExternal) GetUrl() string { return m.Data2.Url }

func (m *TLInputMediaGifExternal) SetQ(v string) { m.Data2.Q = v }
func (m *TLInputMediaGifExternal) GetQ() string { return m.Data2.Q }


func NewTLInputMediaGifExternal() * TLInputMediaGifExternal {
    return &TLInputMediaGifExternal{ Data2: &InputMedia_Data{} }
}

func (m* TLInputMediaGifExternal) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMediaGifExternal))

    x.String(m.GetUrl())
    x.String(m.GetQ())

    return x.buf
}

func (m* TLInputMediaGifExternal) Decode(dbuf *DecodeBuf) error {
    m.SetUrl(dbuf.String())
    m.SetQ(dbuf.String())

    return dbuf.err
}
// inputMediaPhotoExternal#922aec1 flags:# url:string caption:string ttl_seconds:flags.0?int = InputMedia;
func (m *TLInputMediaPhotoExternal) To_InputMedia() *InputMedia {
    return &InputMedia{
        Constructor: TLConstructor_CRC32_inputMediaPhotoExternal,
        Data2: m.Data2,
    }
}


func (m *TLInputMediaPhotoExternal) SetUrl(v string) { m.Data2.Url = v }
func (m *TLInputMediaPhotoExternal) GetUrl() string { return m.Data2.Url }

func (m *TLInputMediaPhotoExternal) SetCaption(v string) { m.Data2.Caption = v }
func (m *TLInputMediaPhotoExternal) GetCaption() string { return m.Data2.Caption }

func (m *TLInputMediaPhotoExternal) SetTtlSeconds(v int32) { m.Data2.TtlSeconds = v }
func (m *TLInputMediaPhotoExternal) GetTtlSeconds() int32 { return m.Data2.TtlSeconds }


func NewTLInputMediaPhotoExternal() * TLInputMediaPhotoExternal {
    return &TLInputMediaPhotoExternal{ Data2: &InputMedia_Data{} }
}

func (m* TLInputMediaPhotoExternal) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMediaPhotoExternal))

    // flags
    var flags uint32 = 0
    if m.GetTtlSeconds() != 0 { flags |= 1 << 0 }
	x.UInt(flags)

    x.String(m.GetUrl())
    x.String(m.GetCaption())
    if (flags & (1 << 0)) != 0 { x.Int(m.GetTtlSeconds()) }

    return x.buf
}

func (m* TLInputMediaPhotoExternal) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetUrl(dbuf.String())
    m.SetCaption(dbuf.String())
    if (flags & (1 << 0)) != 0 { m.SetTtlSeconds(dbuf.Int()) }

    return dbuf.err
}
// inputMediaDocumentExternal#b6f74335 flags:# url:string caption:string ttl_seconds:flags.0?int = InputMedia;
func (m *TLInputMediaDocumentExternal) To_InputMedia() *InputMedia {
    return &InputMedia{
        Constructor: TLConstructor_CRC32_inputMediaDocumentExternal,
        Data2: m.Data2,
    }
}


func (m *TLInputMediaDocumentExternal) SetUrl(v string) { m.Data2.Url = v }
func (m *TLInputMediaDocumentExternal) GetUrl() string { return m.Data2.Url }

func (m *TLInputMediaDocumentExternal) SetCaption(v string) { m.Data2.Caption = v }
func (m *TLInputMediaDocumentExternal) GetCaption() string { return m.Data2.Caption }

func (m *TLInputMediaDocumentExternal) SetTtlSeconds(v int32) { m.Data2.TtlSeconds = v }
func (m *TLInputMediaDocumentExternal) GetTtlSeconds() int32 { return m.Data2.TtlSeconds }


func NewTLInputMediaDocumentExternal() * TLInputMediaDocumentExternal {
    return &TLInputMediaDocumentExternal{ Data2: &InputMedia_Data{} }
}

func (m* TLInputMediaDocumentExternal) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMediaDocumentExternal))

    // flags
    var flags uint32 = 0
    if m.GetTtlSeconds() != 0 { flags |= 1 << 0 }
	x.UInt(flags)

    x.String(m.GetUrl())
    x.String(m.GetCaption())
    if (flags & (1 << 0)) != 0 { x.Int(m.GetTtlSeconds()) }

    return x.buf
}

func (m* TLInputMediaDocumentExternal) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetUrl(dbuf.String())
    m.SetCaption(dbuf.String())
    if (flags & (1 << 0)) != 0 { m.SetTtlSeconds(dbuf.Int()) }

    return dbuf.err
}
// inputMediaGame#d33f43f3 id:InputGame = InputMedia;
func (m *TLInputMediaGame) To_InputMedia() *InputMedia {
    return &InputMedia{
        Constructor: TLConstructor_CRC32_inputMediaGame,
        Data2: m.Data2,
    }
}


func (m *TLInputMediaGame) SetId(v *InputGame) { m.Data2.Id_20 = v }
func (m *TLInputMediaGame) GetId() *InputGame { return m.Data2.Id_20 }


func NewTLInputMediaGame() * TLInputMediaGame {
    return &TLInputMediaGame{ Data2: &InputMedia_Data{} }
}

func (m* TLInputMediaGame) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMediaGame))

    x.Bytes(m.GetId().Encode())

    return x.buf
}

func (m* TLInputMediaGame) Decode(dbuf *DecodeBuf) error {
    m1 := &InputGame{}
    m1.Decode(dbuf)
    m.SetId(m1)

    return dbuf.err
}
// inputMediaInvoice#92153685 flags:# title:string description:string photo:flags.0?InputWebDocument invoice:Invoice payload:bytes provider:string start_param:string = InputMedia;
func (m *TLInputMediaInvoice) To_InputMedia() *InputMedia {
    return &InputMedia{
        Constructor: TLConstructor_CRC32_inputMediaInvoice,
        Data2: m.Data2,
    }
}


func (m *TLInputMediaInvoice) SetTitle(v string) { m.Data2.Title = v }
func (m *TLInputMediaInvoice) GetTitle() string { return m.Data2.Title }

func (m *TLInputMediaInvoice) SetDescription(v string) { m.Data2.Description = v }
func (m *TLInputMediaInvoice) GetDescription() string { return m.Data2.Description }

func (m *TLInputMediaInvoice) SetPhoto(v *InputWebDocument) { m.Data2.Photo = v }
func (m *TLInputMediaInvoice) GetPhoto() *InputWebDocument { return m.Data2.Photo }

func (m *TLInputMediaInvoice) SetInvoice(v *Invoice) { m.Data2.Invoice = v }
func (m *TLInputMediaInvoice) GetInvoice() *Invoice { return m.Data2.Invoice }

func (m *TLInputMediaInvoice) SetPayload(v []byte) { m.Data2.Payload = v }
func (m *TLInputMediaInvoice) GetPayload() []byte { return m.Data2.Payload }

func (m *TLInputMediaInvoice) SetProvider(v string) { m.Data2.Provider = v }
func (m *TLInputMediaInvoice) GetProvider() string { return m.Data2.Provider }

func (m *TLInputMediaInvoice) SetStartParam(v string) { m.Data2.StartParam = v }
func (m *TLInputMediaInvoice) GetStartParam() string { return m.Data2.StartParam }


func NewTLInputMediaInvoice() * TLInputMediaInvoice {
    return &TLInputMediaInvoice{ Data2: &InputMedia_Data{} }
}

func (m* TLInputMediaInvoice) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMediaInvoice))

    // flags
    var flags uint32 = 0
    if m.GetPhoto() != nil { flags |= 1 << 0 }
	x.UInt(flags)

    x.String(m.GetTitle())
    x.String(m.GetDescription())
    if (flags & (1 << 0)) != 0 { x.Bytes(m.GetPhoto().Encode()) }
    x.Bytes(m.GetInvoice().Encode())
    x.StringBytes(m.GetPayload())
    x.String(m.GetProvider())
    x.String(m.GetStartParam())

    return x.buf
}

func (m* TLInputMediaInvoice) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetTitle(dbuf.String())
    m.SetDescription(dbuf.String())
    if (flags & (1 << 0)) != 0 {
 m4 := &InputWebDocument{}
    m4.Decode(dbuf)
    m.SetPhoto(m4) 
}
    m5 := &Invoice{}
    m5.Decode(dbuf)
    m.SetInvoice(m5)
    m.SetPayload(dbuf.StringBytes())
    m.SetProvider(dbuf.String())
    m.SetStartParam(dbuf.String())

    return dbuf.err
}
// inputMediaPhoto#e9bfb4f3 id:InputPhoto caption:string = InputMedia;
func (m *TLInputMediaPhoto73) To_InputMedia() *InputMedia {
    return &InputMedia{
        Constructor: TLConstructor_CRC32_inputMediaPhoto73,
        Data2: m.Data2,
    }
}


func (m *TLInputMediaPhoto73) SetId(v *InputPhoto) { m.Data2.Id_5 = v }
func (m *TLInputMediaPhoto73) GetId() *InputPhoto { return m.Data2.Id_5 }

func (m *TLInputMediaPhoto73) SetCaption(v string) { m.Data2.Caption = v }
func (m *TLInputMediaPhoto73) GetCaption() string { return m.Data2.Caption }


func NewTLInputMediaPhoto73() * TLInputMediaPhoto73 {
    return &TLInputMediaPhoto73{ Data2: &InputMedia_Data{} }
}

func (m* TLInputMediaPhoto73) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMediaPhoto73))

    x.Bytes(m.GetId().Encode())
    x.String(m.GetCaption())

    return x.buf
}

func (m* TLInputMediaPhoto73) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPhoto{}
    m1.Decode(dbuf)
    m.SetId(m1)
    m.SetCaption(dbuf.String())

    return dbuf.err
}
// inputMediaDocument#1a77f29c id:InputDocument caption:string = InputMedia;
func (m *TLInputMediaDocument73) To_InputMedia() *InputMedia {
    return &InputMedia{
        Constructor: TLConstructor_CRC32_inputMediaDocument73,
        Data2: m.Data2,
    }
}


func (m *TLInputMediaDocument73) SetId(v *InputDocument) { m.Data2.Id_13 = v }
func (m *TLInputMediaDocument73) GetId() *InputDocument { return m.Data2.Id_13 }

func (m *TLInputMediaDocument73) SetCaption(v string) { m.Data2.Caption = v }
func (m *TLInputMediaDocument73) GetCaption() string { return m.Data2.Caption }


func NewTLInputMediaDocument73() * TLInputMediaDocument73 {
    return &TLInputMediaDocument73{ Data2: &InputMedia_Data{} }
}

func (m* TLInputMediaDocument73) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMediaDocument73))

    x.Bytes(m.GetId().Encode())
    x.String(m.GetCaption())

    return x.buf
}

func (m* TLInputMediaDocument73) Decode(dbuf *DecodeBuf) error {
    m1 := &InputDocument{}
    m1.Decode(dbuf)
    m.SetId(m1)
    m.SetCaption(dbuf.String())

    return dbuf.err
}
// inputMediaGeoLive#7b1a118f geo_point:InputGeoPoint period:int = InputMedia;
func (m *TLInputMediaGeoLive) To_InputMedia() *InputMedia {
    return &InputMedia{
        Constructor: TLConstructor_CRC32_inputMediaGeoLive,
        Data2: m.Data2,
    }
}


func (m *TLInputMediaGeoLive) SetGeoPoint(v *InputGeoPoint) { m.Data2.GeoPoint = v }
func (m *TLInputMediaGeoLive) GetGeoPoint() *InputGeoPoint { return m.Data2.GeoPoint }

func (m *TLInputMediaGeoLive) SetPeriod(v int32) { m.Data2.Period = v }
func (m *TLInputMediaGeoLive) GetPeriod() int32 { return m.Data2.Period }


func NewTLInputMediaGeoLive() * TLInputMediaGeoLive {
    return &TLInputMediaGeoLive{ Data2: &InputMedia_Data{} }
}

func (m* TLInputMediaGeoLive) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMediaGeoLive))

    x.Bytes(m.GetGeoPoint().Encode())
    x.Int(m.GetPeriod())

    return x.buf
}

func (m* TLInputMediaGeoLive) Decode(dbuf *DecodeBuf) error {
    m1 := &InputGeoPoint{}
    m1.Decode(dbuf)
    m.SetGeoPoint(m1)
    m.SetPeriod(dbuf.Int())

    return dbuf.err
}
// inputMediaUploadedPhoto#1e287d04 flags:# file:InputFile stickers:flags.0?Vector<InputDocument> ttl_seconds:flags.1?int = InputMedia;
func (m *TLInputMediaUploadedPhoto114) To_InputMedia() *InputMedia {
    return &InputMedia{
        Constructor: TLConstructor_CRC32_inputMediaUploadedPhoto114,
        Data2: m.Data2,
    }
}


func (m *TLInputMediaUploadedPhoto114) SetFile(v *InputFile) { m.Data2.File = v }
func (m *TLInputMediaUploadedPhoto114) GetFile() *InputFile { return m.Data2.File }

func (m *TLInputMediaUploadedPhoto114) SetStickers(v []*InputDocument) { m.Data2.Stickers = v }
func (m *TLInputMediaUploadedPhoto114) GetStickers() []*InputDocument { return m.Data2.Stickers }

func (m *TLInputMediaUploadedPhoto114) SetTtlSeconds(v int32) { m.Data2.TtlSeconds = v }
func (m *TLInputMediaUploadedPhoto114) GetTtlSeconds() int32 { return m.Data2.TtlSeconds }


func NewTLInputMediaUploadedPhoto114() * TLInputMediaUploadedPhoto114 {
    return &TLInputMediaUploadedPhoto114{ Data2: &InputMedia_Data{} }
}

func (m* TLInputMediaUploadedPhoto114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMediaUploadedPhoto114))

    // flags
    var flags uint32 = 0
    if m.GetStickers() != nil { flags |= 1 << 0 }
    if m.GetTtlSeconds() != 0 { flags |= 1 << 1 }
	x.UInt(flags)

    x.Bytes(m.GetFile().Encode())
    if (flags & (1 << 0)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetStickers())))
for _, v := range m.GetStickers() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}
    if (flags & (1 << 1)) != 0 { x.Int(m.GetTtlSeconds()) }

    return x.buf
}

func (m* TLInputMediaUploadedPhoto114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m2 := &InputFile{}
    m2.Decode(dbuf)
    m.SetFile(m2)
    if (flags & (1 << 0)) != 0 {
 c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*InputDocument, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &InputDocument{}
	v3[i].Decode(dbuf)
}
m.SetStickers(v3)
 
}
    if (flags & (1 << 1)) != 0 { m.SetTtlSeconds(dbuf.Int()) }

    return dbuf.err
}
// inputMediaPhoto#b3ba0635 flags:# id:InputPhoto ttl_seconds:flags.0?int = InputMedia;
func (m *TLInputMediaPhoto114) To_InputMedia() *InputMedia {
    return &InputMedia{
        Constructor: TLConstructor_CRC32_inputMediaPhoto114,
        Data2: m.Data2,
    }
}


func (m *TLInputMediaPhoto114) SetId(v *InputPhoto) { m.Data2.Id_5 = v }
func (m *TLInputMediaPhoto114) GetId() *InputPhoto { return m.Data2.Id_5 }

func (m *TLInputMediaPhoto114) SetTtlSeconds(v int32) { m.Data2.TtlSeconds = v }
func (m *TLInputMediaPhoto114) GetTtlSeconds() int32 { return m.Data2.TtlSeconds }


func NewTLInputMediaPhoto114() * TLInputMediaPhoto114 {
    return &TLInputMediaPhoto114{ Data2: &InputMedia_Data{} }
}

func (m* TLInputMediaPhoto114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMediaPhoto114))

    // flags
    var flags uint32 = 0
    if m.GetTtlSeconds() != 0 { flags |= 1 << 0 }
	x.UInt(flags)

    x.Bytes(m.GetId().Encode())
    if (flags & (1 << 0)) != 0 { x.Int(m.GetTtlSeconds()) }

    return x.buf
}

func (m* TLInputMediaPhoto114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m2 := &InputPhoto{}
    m2.Decode(dbuf)
    m.SetId(m2)
    if (flags & (1 << 0)) != 0 { m.SetTtlSeconds(dbuf.Int()) }

    return dbuf.err
}
// inputMediaContact#f8ab7dfb phone_number:string first_name:string last_name:string vcard:string = InputMedia;
func (m *TLInputMediaContact114) To_InputMedia() *InputMedia {
    return &InputMedia{
        Constructor: TLConstructor_CRC32_inputMediaContact114,
        Data2: m.Data2,
    }
}


func (m *TLInputMediaContact114) SetPhoneNumber(v string) { m.Data2.PhoneNumber = v }
func (m *TLInputMediaContact114) GetPhoneNumber() string { return m.Data2.PhoneNumber }

func (m *TLInputMediaContact114) SetFirstName(v string) { m.Data2.FirstName = v }
func (m *TLInputMediaContact114) GetFirstName() string { return m.Data2.FirstName }

func (m *TLInputMediaContact114) SetLastName(v string) { m.Data2.LastName = v }
func (m *TLInputMediaContact114) GetLastName() string { return m.Data2.LastName }

func (m *TLInputMediaContact114) SetVcard(v string) { m.Data2.Vcard = v }
func (m *TLInputMediaContact114) GetVcard() string { return m.Data2.Vcard }


func NewTLInputMediaContact114() * TLInputMediaContact114 {
    return &TLInputMediaContact114{ Data2: &InputMedia_Data{} }
}

func (m* TLInputMediaContact114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMediaContact114))

    x.String(m.GetPhoneNumber())
    x.String(m.GetFirstName())
    x.String(m.GetLastName())
    x.String(m.GetVcard())

    return x.buf
}

func (m* TLInputMediaContact114) Decode(dbuf *DecodeBuf) error {
    m.SetPhoneNumber(dbuf.String())
    m.SetFirstName(dbuf.String())
    m.SetLastName(dbuf.String())
    m.SetVcard(dbuf.String())

    return dbuf.err
}
// inputMediaUploadedDocument#5b38c6c1 flags:# nosound_video:flags.3?true file:InputFile thumb:flags.2?InputFile mime_type:string attributes:Vector<DocumentAttribute> stickers:flags.0?Vector<InputDocument> ttl_seconds:flags.1?int = InputMedia;
func (m *TLInputMediaUploadedDocument114) To_InputMedia() *InputMedia {
    return &InputMedia{
        Constructor: TLConstructor_CRC32_inputMediaUploadedDocument114,
        Data2: m.Data2,
    }
}


func (m *TLInputMediaUploadedDocument114) SetNosoundVideo(v bool) { m.Data2.NosoundVideo = v }
func (m *TLInputMediaUploadedDocument114) GetNosoundVideo() bool { return m.Data2.NosoundVideo }

func (m *TLInputMediaUploadedDocument114) SetFile(v *InputFile) { m.Data2.File = v }
func (m *TLInputMediaUploadedDocument114) GetFile() *InputFile { return m.Data2.File }

func (m *TLInputMediaUploadedDocument114) SetThumb(v *InputFile) { m.Data2.Thumb = v }
func (m *TLInputMediaUploadedDocument114) GetThumb() *InputFile { return m.Data2.Thumb }

func (m *TLInputMediaUploadedDocument114) SetMimeType(v string) { m.Data2.MimeType = v }
func (m *TLInputMediaUploadedDocument114) GetMimeType() string { return m.Data2.MimeType }

func (m *TLInputMediaUploadedDocument114) SetAttributes(v []*DocumentAttribute) { m.Data2.Attributes = v }
func (m *TLInputMediaUploadedDocument114) GetAttributes() []*DocumentAttribute { return m.Data2.Attributes }

func (m *TLInputMediaUploadedDocument114) SetStickers(v []*InputDocument) { m.Data2.Stickers = v }
func (m *TLInputMediaUploadedDocument114) GetStickers() []*InputDocument { return m.Data2.Stickers }

func (m *TLInputMediaUploadedDocument114) SetTtlSeconds(v int32) { m.Data2.TtlSeconds = v }
func (m *TLInputMediaUploadedDocument114) GetTtlSeconds() int32 { return m.Data2.TtlSeconds }


func NewTLInputMediaUploadedDocument114() * TLInputMediaUploadedDocument114 {
    return &TLInputMediaUploadedDocument114{ Data2: &InputMedia_Data{} }
}

func (m* TLInputMediaUploadedDocument114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMediaUploadedDocument114))

    // flags
    var flags uint32 = 0
    if m.GetNosoundVideo() == true { flags |= 1 << 3 }
    if m.GetThumb() != nil { flags |= 1 << 2 }
    if m.GetStickers() != nil { flags |= 1 << 0 }
    if m.GetTtlSeconds() != 0 { flags |= 1 << 1 }
	x.UInt(flags)

    
    x.Bytes(m.GetFile().Encode())
    if (flags & (1 << 2)) != 0 { x.Bytes(m.GetThumb().Encode()) }
    x.String(m.GetMimeType())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetAttributes())))
for _, v := range m.GetAttributes() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    if (flags & (1 << 0)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetStickers())))
for _, v := range m.GetStickers() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}
    if (flags & (1 << 1)) != 0 { x.Int(m.GetTtlSeconds()) }

    return x.buf
}

func (m* TLInputMediaUploadedDocument114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 3)) != 0 { m.SetNosoundVideo(true) }
    m3 := &InputFile{}
    m3.Decode(dbuf)
    m.SetFile(m3)
    if (flags & (1 << 2)) != 0 {
 m4 := &InputFile{}
    m4.Decode(dbuf)
    m.SetThumb(m4) 
}
    m.SetMimeType(dbuf.String())
    c6 := dbuf.Int()
if c6 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 6, c6)
	return dbuf.err
}
l6 := dbuf.Int()
v6 := make([]*DocumentAttribute, l6)
for i := int32(0); i < l6; i++ {
	v6[i] = &DocumentAttribute{}
	v6[i].Decode(dbuf)
}
m.SetAttributes(v6)

    if (flags & (1 << 0)) != 0 {
 c7 := dbuf.Int()
if c7 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 7, c7)
	return dbuf.err
}
l7 := dbuf.Int()
v7 := make([]*InputDocument, l7)
for i := int32(0); i < l7; i++ {
	v7[i] = &InputDocument{}
	v7[i].Decode(dbuf)
}
m.SetStickers(v7)
 
}
    if (flags & (1 << 1)) != 0 { m.SetTtlSeconds(dbuf.Int()) }

    return dbuf.err
}
// inputMediaDocument#23ab23d2 flags:# id:InputDocument ttl_seconds:flags.0?int = InputMedia;
func (m *TLInputMediaDocument114) To_InputMedia() *InputMedia {
    return &InputMedia{
        Constructor: TLConstructor_CRC32_inputMediaDocument114,
        Data2: m.Data2,
    }
}


func (m *TLInputMediaDocument114) SetId(v *InputDocument) { m.Data2.Id_13 = v }
func (m *TLInputMediaDocument114) GetId() *InputDocument { return m.Data2.Id_13 }

func (m *TLInputMediaDocument114) SetTtlSeconds(v int32) { m.Data2.TtlSeconds = v }
func (m *TLInputMediaDocument114) GetTtlSeconds() int32 { return m.Data2.TtlSeconds }


func NewTLInputMediaDocument114() * TLInputMediaDocument114 {
    return &TLInputMediaDocument114{ Data2: &InputMedia_Data{} }
}

func (m* TLInputMediaDocument114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMediaDocument114))

    // flags
    var flags uint32 = 0
    if m.GetTtlSeconds() != 0 { flags |= 1 << 0 }
	x.UInt(flags)

    x.Bytes(m.GetId().Encode())
    if (flags & (1 << 0)) != 0 { x.Int(m.GetTtlSeconds()) }

    return x.buf
}

func (m* TLInputMediaDocument114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m2 := &InputDocument{}
    m2.Decode(dbuf)
    m.SetId(m2)
    if (flags & (1 << 0)) != 0 { m.SetTtlSeconds(dbuf.Int()) }

    return dbuf.err
}
// inputMediaVenue#c13d1c11 geo_point:InputGeoPoint title:string address:string provider:string venue_id:string venue_type:string = InputMedia;
func (m *TLInputMediaVenue114) To_InputMedia() *InputMedia {
    return &InputMedia{
        Constructor: TLConstructor_CRC32_inputMediaVenue114,
        Data2: m.Data2,
    }
}


func (m *TLInputMediaVenue114) SetGeoPoint(v *InputGeoPoint) { m.Data2.GeoPoint = v }
func (m *TLInputMediaVenue114) GetGeoPoint() *InputGeoPoint { return m.Data2.GeoPoint }

func (m *TLInputMediaVenue114) SetTitle(v string) { m.Data2.Title = v }
func (m *TLInputMediaVenue114) GetTitle() string { return m.Data2.Title }

func (m *TLInputMediaVenue114) SetAddress(v string) { m.Data2.Address = v }
func (m *TLInputMediaVenue114) GetAddress() string { return m.Data2.Address }

func (m *TLInputMediaVenue114) SetProvider(v string) { m.Data2.Provider = v }
func (m *TLInputMediaVenue114) GetProvider() string { return m.Data2.Provider }

func (m *TLInputMediaVenue114) SetVenueId(v string) { m.Data2.VenueId = v }
func (m *TLInputMediaVenue114) GetVenueId() string { return m.Data2.VenueId }

func (m *TLInputMediaVenue114) SetVenueType(v string) { m.Data2.VenueType = v }
func (m *TLInputMediaVenue114) GetVenueType() string { return m.Data2.VenueType }


func NewTLInputMediaVenue114() * TLInputMediaVenue114 {
    return &TLInputMediaVenue114{ Data2: &InputMedia_Data{} }
}

func (m* TLInputMediaVenue114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMediaVenue114))

    x.Bytes(m.GetGeoPoint().Encode())
    x.String(m.GetTitle())
    x.String(m.GetAddress())
    x.String(m.GetProvider())
    x.String(m.GetVenueId())
    x.String(m.GetVenueType())

    return x.buf
}

func (m* TLInputMediaVenue114) Decode(dbuf *DecodeBuf) error {
    m1 := &InputGeoPoint{}
    m1.Decode(dbuf)
    m.SetGeoPoint(m1)
    m.SetTitle(dbuf.String())
    m.SetAddress(dbuf.String())
    m.SetProvider(dbuf.String())
    m.SetVenueId(dbuf.String())
    m.SetVenueType(dbuf.String())

    return dbuf.err
}
// inputMediaPhotoExternal#e5bbfe1a flags:# url:string ttl_seconds:flags.0?int = InputMedia;
func (m *TLInputMediaPhotoExternal114) To_InputMedia() *InputMedia {
    return &InputMedia{
        Constructor: TLConstructor_CRC32_inputMediaPhotoExternal114,
        Data2: m.Data2,
    }
}


func (m *TLInputMediaPhotoExternal114) SetUrl(v string) { m.Data2.Url = v }
func (m *TLInputMediaPhotoExternal114) GetUrl() string { return m.Data2.Url }

func (m *TLInputMediaPhotoExternal114) SetTtlSeconds(v int32) { m.Data2.TtlSeconds = v }
func (m *TLInputMediaPhotoExternal114) GetTtlSeconds() int32 { return m.Data2.TtlSeconds }


func NewTLInputMediaPhotoExternal114() * TLInputMediaPhotoExternal114 {
    return &TLInputMediaPhotoExternal114{ Data2: &InputMedia_Data{} }
}

func (m* TLInputMediaPhotoExternal114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMediaPhotoExternal114))

    // flags
    var flags uint32 = 0
    if m.GetTtlSeconds() != 0 { flags |= 1 << 0 }
	x.UInt(flags)

    x.String(m.GetUrl())
    if (flags & (1 << 0)) != 0 { x.Int(m.GetTtlSeconds()) }

    return x.buf
}

func (m* TLInputMediaPhotoExternal114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetUrl(dbuf.String())
    if (flags & (1 << 0)) != 0 { m.SetTtlSeconds(dbuf.Int()) }

    return dbuf.err
}
// inputMediaDocumentExternal#fb52dc99 flags:# url:string ttl_seconds:flags.0?int = InputMedia;
func (m *TLInputMediaDocumentExternal114) To_InputMedia() *InputMedia {
    return &InputMedia{
        Constructor: TLConstructor_CRC32_inputMediaDocumentExternal114,
        Data2: m.Data2,
    }
}


func (m *TLInputMediaDocumentExternal114) SetUrl(v string) { m.Data2.Url = v }
func (m *TLInputMediaDocumentExternal114) GetUrl() string { return m.Data2.Url }

func (m *TLInputMediaDocumentExternal114) SetTtlSeconds(v int32) { m.Data2.TtlSeconds = v }
func (m *TLInputMediaDocumentExternal114) GetTtlSeconds() int32 { return m.Data2.TtlSeconds }


func NewTLInputMediaDocumentExternal114() * TLInputMediaDocumentExternal114 {
    return &TLInputMediaDocumentExternal114{ Data2: &InputMedia_Data{} }
}

func (m* TLInputMediaDocumentExternal114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMediaDocumentExternal114))

    // flags
    var flags uint32 = 0
    if m.GetTtlSeconds() != 0 { flags |= 1 << 0 }
	x.UInt(flags)

    x.String(m.GetUrl())
    if (flags & (1 << 0)) != 0 { x.Int(m.GetTtlSeconds()) }

    return x.buf
}

func (m* TLInputMediaDocumentExternal114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetUrl(dbuf.String())
    if (flags & (1 << 0)) != 0 { m.SetTtlSeconds(dbuf.Int()) }

    return dbuf.err
}
// inputMediaInvoice#f4e096c3 flags:# title:string description:string photo:flags.0?InputWebDocument invoice:Invoice payload:bytes provider:string provider_data:DataJSON start_param:string = InputMedia;
func (m *TLInputMediaInvoice114) To_InputMedia() *InputMedia {
    return &InputMedia{
        Constructor: TLConstructor_CRC32_inputMediaInvoice114,
        Data2: m.Data2,
    }
}


func (m *TLInputMediaInvoice114) SetTitle(v string) { m.Data2.Title = v }
func (m *TLInputMediaInvoice114) GetTitle() string { return m.Data2.Title }

func (m *TLInputMediaInvoice114) SetDescription(v string) { m.Data2.Description = v }
func (m *TLInputMediaInvoice114) GetDescription() string { return m.Data2.Description }

func (m *TLInputMediaInvoice114) SetPhoto(v *InputWebDocument) { m.Data2.Photo = v }
func (m *TLInputMediaInvoice114) GetPhoto() *InputWebDocument { return m.Data2.Photo }

func (m *TLInputMediaInvoice114) SetInvoice(v *Invoice) { m.Data2.Invoice = v }
func (m *TLInputMediaInvoice114) GetInvoice() *Invoice { return m.Data2.Invoice }

func (m *TLInputMediaInvoice114) SetPayload(v []byte) { m.Data2.Payload = v }
func (m *TLInputMediaInvoice114) GetPayload() []byte { return m.Data2.Payload }

func (m *TLInputMediaInvoice114) SetProvider(v string) { m.Data2.Provider = v }
func (m *TLInputMediaInvoice114) GetProvider() string { return m.Data2.Provider }

func (m *TLInputMediaInvoice114) SetProviderData(v *DataJSON) { m.Data2.ProviderData = v }
func (m *TLInputMediaInvoice114) GetProviderData() *DataJSON { return m.Data2.ProviderData }

func (m *TLInputMediaInvoice114) SetStartParam(v string) { m.Data2.StartParam = v }
func (m *TLInputMediaInvoice114) GetStartParam() string { return m.Data2.StartParam }


func NewTLInputMediaInvoice114() * TLInputMediaInvoice114 {
    return &TLInputMediaInvoice114{ Data2: &InputMedia_Data{} }
}

func (m* TLInputMediaInvoice114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMediaInvoice114))

    // flags
    var flags uint32 = 0
    if m.GetPhoto() != nil { flags |= 1 << 0 }
	x.UInt(flags)

    x.String(m.GetTitle())
    x.String(m.GetDescription())
    if (flags & (1 << 0)) != 0 { x.Bytes(m.GetPhoto().Encode()) }
    x.Bytes(m.GetInvoice().Encode())
    x.StringBytes(m.GetPayload())
    x.String(m.GetProvider())
    x.Bytes(m.GetProviderData().Encode())
    x.String(m.GetStartParam())

    return x.buf
}

func (m* TLInputMediaInvoice114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetTitle(dbuf.String())
    m.SetDescription(dbuf.String())
    if (flags & (1 << 0)) != 0 {
 m4 := &InputWebDocument{}
    m4.Decode(dbuf)
    m.SetPhoto(m4) 
}
    m5 := &Invoice{}
    m5.Decode(dbuf)
    m.SetInvoice(m5)
    m.SetPayload(dbuf.StringBytes())
    m.SetProvider(dbuf.String())
    m8 := &DataJSON{}
    m8.Decode(dbuf)
    m.SetProviderData(m8)
    m.SetStartParam(dbuf.String())

    return dbuf.err
}
// inputMediaGeoLive#ce4e82fd flags:# stopped:flags.0?true geo_point:InputGeoPoint period:flags.1?int = InputMedia;
func (m *TLInputMediaGeoLive114) To_InputMedia() *InputMedia {
    return &InputMedia{
        Constructor: TLConstructor_CRC32_inputMediaGeoLive114,
        Data2: m.Data2,
    }
}


func (m *TLInputMediaGeoLive114) SetStopped(v bool) { m.Data2.Stopped = v }
func (m *TLInputMediaGeoLive114) GetStopped() bool { return m.Data2.Stopped }

func (m *TLInputMediaGeoLive114) SetGeoPoint(v *InputGeoPoint) { m.Data2.GeoPoint = v }
func (m *TLInputMediaGeoLive114) GetGeoPoint() *InputGeoPoint { return m.Data2.GeoPoint }

func (m *TLInputMediaGeoLive114) SetPeriod(v int32) { m.Data2.Period = v }
func (m *TLInputMediaGeoLive114) GetPeriod() int32 { return m.Data2.Period }


func NewTLInputMediaGeoLive114() * TLInputMediaGeoLive114 {
    return &TLInputMediaGeoLive114{ Data2: &InputMedia_Data{} }
}

func (m* TLInputMediaGeoLive114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMediaGeoLive114))

    // flags
    var flags uint32 = 0
    if m.GetStopped() == true { flags |= 1 << 0 }
    if m.GetPeriod() != 0 { flags |= 1 << 1 }
	x.UInt(flags)

    
    x.Bytes(m.GetGeoPoint().Encode())
    if (flags & (1 << 1)) != 0 { x.Int(m.GetPeriod()) }

    return x.buf
}

func (m* TLInputMediaGeoLive114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetStopped(true) }
    m3 := &InputGeoPoint{}
    m3.Decode(dbuf)
    m.SetGeoPoint(m3)
    if (flags & (1 << 1)) != 0 { m.SetPeriod(dbuf.Int()) }

    return dbuf.err
}
// inputMediaPoll#f94e5f1 flags:# poll:Poll correct_answers:flags.0?Vector<bytes> solution:flags.1?string solution_entities:flags.1?Vector<MessageEntity> = InputMedia;
func (m *TLInputMediaPoll) To_InputMedia() *InputMedia {
    return &InputMedia{
        Constructor: TLConstructor_CRC32_inputMediaPoll,
        Data2: m.Data2,
    }
}


func (m *TLInputMediaPoll) SetPoll(v *Poll) { m.Data2.Poll = v }
func (m *TLInputMediaPoll) GetPoll() *Poll { return m.Data2.Poll }

func (m *TLInputMediaPoll) SetCorrectAnswers(v [][]byte) { m.Data2.CorrectAnswers = v }
func (m *TLInputMediaPoll) GetCorrectAnswers() [][]byte { return m.Data2.CorrectAnswers }

func (m *TLInputMediaPoll) SetSolution(v string) { m.Data2.Solution = v }
func (m *TLInputMediaPoll) GetSolution() string { return m.Data2.Solution }

func (m *TLInputMediaPoll) SetSolutionEntities(v []*MessageEntity) { m.Data2.SolutionEntities = v }
func (m *TLInputMediaPoll) GetSolutionEntities() []*MessageEntity { return m.Data2.SolutionEntities }


func NewTLInputMediaPoll() * TLInputMediaPoll {
    return &TLInputMediaPoll{ Data2: &InputMedia_Data{} }
}

func (m* TLInputMediaPoll) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMediaPoll))

    // flags
    var flags uint32 = 0
    if m.GetCorrectAnswers() != nil { flags |= 1 << 0 }
    if m.GetSolution() != "" { flags |= 1 << 1 }
    if m.GetSolutionEntities() != nil { flags |= 1 << 1 }
	x.UInt(flags)

    x.Bytes(m.GetPoll().Encode())
    if (flags & (1 << 0)) != 0 {
  
}
    if (flags & (1 << 1)) != 0 { x.String(m.GetSolution()) }
    if (flags & (1 << 1)) != 0 {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetSolutionEntities())))
for _, v := range m.GetSolutionEntities() {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}

    return x.buf
}

func (m* TLInputMediaPoll) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m2 := &Poll{}
    m2.Decode(dbuf)
    m.SetPoll(m2)
    if (flags & (1 << 0)) != 0 {
  
}
    if (flags & (1 << 1)) != 0 { m.SetSolution(dbuf.String()) }
    if (flags & (1 << 1)) != 0 {
 c5 := dbuf.Int()
if c5 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 5, c5)
	return dbuf.err
}
l5 := dbuf.Int()
v5 := make([]*MessageEntity, l5)
for i := int32(0); i < l5; i++ {
	v5[i] = &MessageEntity{}
	v5[i].Decode(dbuf)
}
m.SetSolutionEntities(v5)
 
}

    return dbuf.err
}
// inputMediaDice#e66fbf7b emoticon:string = InputMedia;
func (m *TLInputMediaDice) To_InputMedia() *InputMedia {
    return &InputMedia{
        Constructor: TLConstructor_CRC32_inputMediaDice,
        Data2: m.Data2,
    }
}


func (m *TLInputMediaDice) SetEmoticon(v string) { m.Data2.Emoticon = v }
func (m *TLInputMediaDice) GetEmoticon() string { return m.Data2.Emoticon }


func NewTLInputMediaDice() * TLInputMediaDice {
    return &TLInputMediaDice{ Data2: &InputMedia_Data{} }
}

func (m* TLInputMediaDice) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputMediaDice))

    x.String(m.GetEmoticon())

    return x.buf
}

func (m* TLInputMediaDice) Decode(dbuf *DecodeBuf) error {
    m.SetEmoticon(dbuf.String())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// DocumentAttribute <--
//  + TL_DocumentAttributeImageSize
//  + TL_DocumentAttributeAnimated
//  + TL_DocumentAttributeSticker
//  + TL_DocumentAttributeVideo
//  + TL_DocumentAttributeAudio
//  + TL_DocumentAttributeFilename
//  + TL_DocumentAttributeHasStickers
//

func (m *DocumentAttribute) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_documentAttributeImageSize:
        t := m.To_DocumentAttributeImageSize()
        return t.Encode()
    case TLConstructor_CRC32_documentAttributeAnimated:
        t := m.To_DocumentAttributeAnimated()
        return t.Encode()
    case TLConstructor_CRC32_documentAttributeSticker:
        t := m.To_DocumentAttributeSticker()
        return t.Encode()
    case TLConstructor_CRC32_documentAttributeVideo:
        t := m.To_DocumentAttributeVideo()
        return t.Encode()
    case TLConstructor_CRC32_documentAttributeAudio:
        t := m.To_DocumentAttributeAudio()
        return t.Encode()
    case TLConstructor_CRC32_documentAttributeFilename:
        t := m.To_DocumentAttributeFilename()
        return t.Encode()
    case TLConstructor_CRC32_documentAttributeHasStickers:
        t := m.To_DocumentAttributeHasStickers()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *DocumentAttribute) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_documentAttributeImageSize:
        m2 := &TLDocumentAttributeImageSize{&DocumentAttribute_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_documentAttributeAnimated:
        m2 := &TLDocumentAttributeAnimated{&DocumentAttribute_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_documentAttributeSticker:
        m2 := &TLDocumentAttributeSticker{&DocumentAttribute_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_documentAttributeVideo:
        m2 := &TLDocumentAttributeVideo{&DocumentAttribute_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_documentAttributeAudio:
        m2 := &TLDocumentAttributeAudio{&DocumentAttribute_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_documentAttributeFilename:
        m2 := &TLDocumentAttributeFilename{&DocumentAttribute_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_documentAttributeHasStickers:
        m2 := &TLDocumentAttributeHasStickers{&DocumentAttribute_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// documentAttributeImageSize#6c37c15c w:int h:int = DocumentAttribute;
func (m *DocumentAttribute) To_DocumentAttributeImageSize() *TLDocumentAttributeImageSize {
    return &TLDocumentAttributeImageSize{
        Data2: m.Data2,
    }
}

// documentAttributeAnimated#11b58939 = DocumentAttribute;
func (m *DocumentAttribute) To_DocumentAttributeAnimated() *TLDocumentAttributeAnimated {
    return &TLDocumentAttributeAnimated{
        Data2: m.Data2,
    }
}

// documentAttributeSticker#6319d612 flags:# mask:flags.1?true alt:string stickerset:InputStickerSet mask_coords:flags.0?MaskCoords = DocumentAttribute;
func (m *DocumentAttribute) To_DocumentAttributeSticker() *TLDocumentAttributeSticker {
    return &TLDocumentAttributeSticker{
        Data2: m.Data2,
    }
}

// documentAttributeVideo#ef02ce6 flags:# round_message:flags.0?true duration:int w:int h:int = DocumentAttribute;
func (m *DocumentAttribute) To_DocumentAttributeVideo() *TLDocumentAttributeVideo {
    return &TLDocumentAttributeVideo{
        Data2: m.Data2,
    }
}

// documentAttributeAudio#9852f9c6 flags:# voice:flags.10?true duration:int title:flags.0?string performer:flags.1?string waveform:flags.2?bytes = DocumentAttribute;
func (m *DocumentAttribute) To_DocumentAttributeAudio() *TLDocumentAttributeAudio {
    return &TLDocumentAttributeAudio{
        Data2: m.Data2,
    }
}

// documentAttributeFilename#15590068 file_name:string = DocumentAttribute;
func (m *DocumentAttribute) To_DocumentAttributeFilename() *TLDocumentAttributeFilename {
    return &TLDocumentAttributeFilename{
        Data2: m.Data2,
    }
}

// documentAttributeHasStickers#9801d2f7 = DocumentAttribute;
func (m *DocumentAttribute) To_DocumentAttributeHasStickers() *TLDocumentAttributeHasStickers {
    return &TLDocumentAttributeHasStickers{
        Data2: m.Data2,
    }
}



// documentAttributeImageSize#6c37c15c w:int h:int = DocumentAttribute;
func (m *TLDocumentAttributeImageSize) To_DocumentAttribute() *DocumentAttribute {
    return &DocumentAttribute{
        Constructor: TLConstructor_CRC32_documentAttributeImageSize,
        Data2: m.Data2,
    }
}


func (m *TLDocumentAttributeImageSize) SetW(v int32) { m.Data2.W = v }
func (m *TLDocumentAttributeImageSize) GetW() int32 { return m.Data2.W }

func (m *TLDocumentAttributeImageSize) SetH(v int32) { m.Data2.H = v }
func (m *TLDocumentAttributeImageSize) GetH() int32 { return m.Data2.H }


func NewTLDocumentAttributeImageSize() * TLDocumentAttributeImageSize {
    return &TLDocumentAttributeImageSize{ Data2: &DocumentAttribute_Data{} }
}

func (m* TLDocumentAttributeImageSize) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_documentAttributeImageSize))

    x.Int(m.GetW())
    x.Int(m.GetH())

    return x.buf
}

func (m* TLDocumentAttributeImageSize) Decode(dbuf *DecodeBuf) error {
    m.SetW(dbuf.Int())
    m.SetH(dbuf.Int())

    return dbuf.err
}
// documentAttributeAnimated#11b58939 = DocumentAttribute;
func (m *TLDocumentAttributeAnimated) To_DocumentAttribute() *DocumentAttribute {
    return &DocumentAttribute{
        Constructor: TLConstructor_CRC32_documentAttributeAnimated,
        Data2: m.Data2,
    }
}



func NewTLDocumentAttributeAnimated() * TLDocumentAttributeAnimated {
    return &TLDocumentAttributeAnimated{ Data2: &DocumentAttribute_Data{} }
}

func (m* TLDocumentAttributeAnimated) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_documentAttributeAnimated))


    return x.buf
}

func (m* TLDocumentAttributeAnimated) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// documentAttributeSticker#6319d612 flags:# mask:flags.1?true alt:string stickerset:InputStickerSet mask_coords:flags.0?MaskCoords = DocumentAttribute;
func (m *TLDocumentAttributeSticker) To_DocumentAttribute() *DocumentAttribute {
    return &DocumentAttribute{
        Constructor: TLConstructor_CRC32_documentAttributeSticker,
        Data2: m.Data2,
    }
}


func (m *TLDocumentAttributeSticker) SetMask(v bool) { m.Data2.Mask = v }
func (m *TLDocumentAttributeSticker) GetMask() bool { return m.Data2.Mask }

func (m *TLDocumentAttributeSticker) SetAlt(v string) { m.Data2.Alt = v }
func (m *TLDocumentAttributeSticker) GetAlt() string { return m.Data2.Alt }

func (m *TLDocumentAttributeSticker) SetStickerset(v *InputStickerSet) { m.Data2.Stickerset = v }
func (m *TLDocumentAttributeSticker) GetStickerset() *InputStickerSet { return m.Data2.Stickerset }

func (m *TLDocumentAttributeSticker) SetMaskCoords(v *MaskCoords) { m.Data2.MaskCoords = v }
func (m *TLDocumentAttributeSticker) GetMaskCoords() *MaskCoords { return m.Data2.MaskCoords }


func NewTLDocumentAttributeSticker() * TLDocumentAttributeSticker {
    return &TLDocumentAttributeSticker{ Data2: &DocumentAttribute_Data{} }
}

func (m* TLDocumentAttributeSticker) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_documentAttributeSticker))

    // flags
    var flags uint32 = 0
    if m.GetMask() == true { flags |= 1 << 1 }
    if m.GetMaskCoords() != nil { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.String(m.GetAlt())
    x.Bytes(m.GetStickerset().Encode())
    if (flags & (1 << 0)) != 0 { x.Bytes(m.GetMaskCoords().Encode()) }

    return x.buf
}

func (m* TLDocumentAttributeSticker) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 1)) != 0 { m.SetMask(true) }
    m.SetAlt(dbuf.String())
    m4 := &InputStickerSet{}
    m4.Decode(dbuf)
    m.SetStickerset(m4)
    if (flags & (1 << 0)) != 0 {
 m5 := &MaskCoords{}
    m5.Decode(dbuf)
    m.SetMaskCoords(m5) 
}

    return dbuf.err
}
// documentAttributeVideo#ef02ce6 flags:# round_message:flags.0?true duration:int w:int h:int = DocumentAttribute;
func (m *TLDocumentAttributeVideo) To_DocumentAttribute() *DocumentAttribute {
    return &DocumentAttribute{
        Constructor: TLConstructor_CRC32_documentAttributeVideo,
        Data2: m.Data2,
    }
}


func (m *TLDocumentAttributeVideo) SetRoundMessage(v bool) { m.Data2.RoundMessage = v }
func (m *TLDocumentAttributeVideo) GetRoundMessage() bool { return m.Data2.RoundMessage }

func (m *TLDocumentAttributeVideo) SetDuration(v int32) { m.Data2.Duration = v }
func (m *TLDocumentAttributeVideo) GetDuration() int32 { return m.Data2.Duration }

func (m *TLDocumentAttributeVideo) SetW(v int32) { m.Data2.W = v }
func (m *TLDocumentAttributeVideo) GetW() int32 { return m.Data2.W }

func (m *TLDocumentAttributeVideo) SetH(v int32) { m.Data2.H = v }
func (m *TLDocumentAttributeVideo) GetH() int32 { return m.Data2.H }


func NewTLDocumentAttributeVideo() * TLDocumentAttributeVideo {
    return &TLDocumentAttributeVideo{ Data2: &DocumentAttribute_Data{} }
}

func (m* TLDocumentAttributeVideo) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_documentAttributeVideo))

    // flags
    var flags uint32 = 0
    if m.GetRoundMessage() == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Int(m.GetDuration())
    x.Int(m.GetW())
    x.Int(m.GetH())

    return x.buf
}

func (m* TLDocumentAttributeVideo) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetRoundMessage(true) }
    m.SetDuration(dbuf.Int())
    m.SetW(dbuf.Int())
    m.SetH(dbuf.Int())

    return dbuf.err
}
// documentAttributeAudio#9852f9c6 flags:# voice:flags.10?true duration:int title:flags.0?string performer:flags.1?string waveform:flags.2?bytes = DocumentAttribute;
func (m *TLDocumentAttributeAudio) To_DocumentAttribute() *DocumentAttribute {
    return &DocumentAttribute{
        Constructor: TLConstructor_CRC32_documentAttributeAudio,
        Data2: m.Data2,
    }
}


func (m *TLDocumentAttributeAudio) SetVoice(v bool) { m.Data2.Voice = v }
func (m *TLDocumentAttributeAudio) GetVoice() bool { return m.Data2.Voice }

func (m *TLDocumentAttributeAudio) SetDuration(v int32) { m.Data2.Duration = v }
func (m *TLDocumentAttributeAudio) GetDuration() int32 { return m.Data2.Duration }

func (m *TLDocumentAttributeAudio) SetTitle(v string) { m.Data2.Title = v }
func (m *TLDocumentAttributeAudio) GetTitle() string { return m.Data2.Title }

func (m *TLDocumentAttributeAudio) SetPerformer(v string) { m.Data2.Performer = v }
func (m *TLDocumentAttributeAudio) GetPerformer() string { return m.Data2.Performer }

func (m *TLDocumentAttributeAudio) SetWaveform(v []byte) { m.Data2.Waveform = v }
func (m *TLDocumentAttributeAudio) GetWaveform() []byte { return m.Data2.Waveform }


func NewTLDocumentAttributeAudio() * TLDocumentAttributeAudio {
    return &TLDocumentAttributeAudio{ Data2: &DocumentAttribute_Data{} }
}

func (m* TLDocumentAttributeAudio) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_documentAttributeAudio))

    // flags
    var flags uint32 = 0
    if m.GetVoice() == true { flags |= 1 << 10 }
    if m.GetTitle() != "" { flags |= 1 << 0 }
    if m.GetPerformer() != "" { flags |= 1 << 1 }
    if m.GetWaveform() != nil { flags |= 1 << 2 }
	x.UInt(flags)

    
    x.Int(m.GetDuration())
    if (flags & (1 << 0)) != 0 { x.String(m.GetTitle()) }
    if (flags & (1 << 1)) != 0 { x.String(m.GetPerformer()) }
    if (flags & (1 << 2)) != 0 { x.StringBytes(m.GetWaveform()) }

    return x.buf
}

func (m* TLDocumentAttributeAudio) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 10)) != 0 { m.SetVoice(true) }
    m.SetDuration(dbuf.Int())
    if (flags & (1 << 0)) != 0 { m.SetTitle(dbuf.String()) }
    if (flags & (1 << 1)) != 0 { m.SetPerformer(dbuf.String()) }
    if (flags & (1 << 2)) != 0 {
 m.SetWaveform(dbuf.StringBytes()) 
}

    return dbuf.err
}
// documentAttributeFilename#15590068 file_name:string = DocumentAttribute;
func (m *TLDocumentAttributeFilename) To_DocumentAttribute() *DocumentAttribute {
    return &DocumentAttribute{
        Constructor: TLConstructor_CRC32_documentAttributeFilename,
        Data2: m.Data2,
    }
}


func (m *TLDocumentAttributeFilename) SetFileName(v string) { m.Data2.FileName = v }
func (m *TLDocumentAttributeFilename) GetFileName() string { return m.Data2.FileName }


func NewTLDocumentAttributeFilename() * TLDocumentAttributeFilename {
    return &TLDocumentAttributeFilename{ Data2: &DocumentAttribute_Data{} }
}

func (m* TLDocumentAttributeFilename) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_documentAttributeFilename))

    x.String(m.GetFileName())

    return x.buf
}

func (m* TLDocumentAttributeFilename) Decode(dbuf *DecodeBuf) error {
    m.SetFileName(dbuf.String())

    return dbuf.err
}
// documentAttributeHasStickers#9801d2f7 = DocumentAttribute;
func (m *TLDocumentAttributeHasStickers) To_DocumentAttribute() *DocumentAttribute {
    return &DocumentAttribute{
        Constructor: TLConstructor_CRC32_documentAttributeHasStickers,
        Data2: m.Data2,
    }
}



func NewTLDocumentAttributeHasStickers() * TLDocumentAttributeHasStickers {
    return &TLDocumentAttributeHasStickers{ Data2: &DocumentAttribute_Data{} }
}

func (m* TLDocumentAttributeHasStickers) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_documentAttributeHasStickers))


    return x.buf
}

func (m* TLDocumentAttributeHasStickers) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// KeyboardButton <--
//  + TL_KeyboardButton
//  + TL_KeyboardButtonUrl
//  + TL_KeyboardButtonCallback
//  + TL_KeyboardButtonRequestPhone
//  + TL_KeyboardButtonRequestGeoLocation
//  + TL_KeyboardButtonSwitchInline
//  + TL_KeyboardButtonGame
//  + TL_KeyboardButtonBuy
//  + TL_KeyboardButtonUrlAuth
//  + TL_InputKeyboardButtonUrlAuth
//  + TL_KeyboardButtonRequestPoll
//  + TL_KeyboardButtonCallback118
//

func (m *KeyboardButton) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_keyboardButton:
        t := m.To_KeyboardButton()
        return t.Encode()
    case TLConstructor_CRC32_keyboardButtonUrl:
        t := m.To_KeyboardButtonUrl()
        return t.Encode()
    case TLConstructor_CRC32_keyboardButtonCallback:
        t := m.To_KeyboardButtonCallback()
        return t.Encode()
    case TLConstructor_CRC32_keyboardButtonRequestPhone:
        t := m.To_KeyboardButtonRequestPhone()
        return t.Encode()
    case TLConstructor_CRC32_keyboardButtonRequestGeoLocation:
        t := m.To_KeyboardButtonRequestGeoLocation()
        return t.Encode()
    case TLConstructor_CRC32_keyboardButtonSwitchInline:
        t := m.To_KeyboardButtonSwitchInline()
        return t.Encode()
    case TLConstructor_CRC32_keyboardButtonGame:
        t := m.To_KeyboardButtonGame()
        return t.Encode()
    case TLConstructor_CRC32_keyboardButtonBuy:
        t := m.To_KeyboardButtonBuy()
        return t.Encode()
    case TLConstructor_CRC32_keyboardButtonUrlAuth:
        t := m.To_KeyboardButtonUrlAuth()
        return t.Encode()
    case TLConstructor_CRC32_inputKeyboardButtonUrlAuth:
        t := m.To_InputKeyboardButtonUrlAuth()
        return t.Encode()
    case TLConstructor_CRC32_keyboardButtonRequestPoll:
        t := m.To_KeyboardButtonRequestPoll()
        return t.Encode()
    case TLConstructor_CRC32_keyboardButtonCallback118:
        t := m.To_KeyboardButtonCallback118()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *KeyboardButton) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_keyboardButton:
        m2 := &TLKeyboardButton{&KeyboardButton_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_keyboardButtonUrl:
        m2 := &TLKeyboardButtonUrl{&KeyboardButton_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_keyboardButtonCallback:
        m2 := &TLKeyboardButtonCallback{&KeyboardButton_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_keyboardButtonRequestPhone:
        m2 := &TLKeyboardButtonRequestPhone{&KeyboardButton_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_keyboardButtonRequestGeoLocation:
        m2 := &TLKeyboardButtonRequestGeoLocation{&KeyboardButton_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_keyboardButtonSwitchInline:
        m2 := &TLKeyboardButtonSwitchInline{&KeyboardButton_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_keyboardButtonGame:
        m2 := &TLKeyboardButtonGame{&KeyboardButton_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_keyboardButtonBuy:
        m2 := &TLKeyboardButtonBuy{&KeyboardButton_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_keyboardButtonUrlAuth:
        m2 := &TLKeyboardButtonUrlAuth{&KeyboardButton_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_inputKeyboardButtonUrlAuth:
        m2 := &TLInputKeyboardButtonUrlAuth{&KeyboardButton_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_keyboardButtonRequestPoll:
        m2 := &TLKeyboardButtonRequestPoll{&KeyboardButton_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_keyboardButtonCallback118:
        m2 := &TLKeyboardButtonCallback118{&KeyboardButton_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// keyboardButton#a2fa4880 text:string = KeyboardButton;
func (m *KeyboardButton) To_KeyboardButton() *TLKeyboardButton {
    return &TLKeyboardButton{
        Data2: m.Data2,
    }
}

// keyboardButtonUrl#258aff05 text:string url:string = KeyboardButton;
func (m *KeyboardButton) To_KeyboardButtonUrl() *TLKeyboardButtonUrl {
    return &TLKeyboardButtonUrl{
        Data2: m.Data2,
    }
}

// keyboardButtonCallback#683a5e46 text:string data:bytes = KeyboardButton;
func (m *KeyboardButton) To_KeyboardButtonCallback() *TLKeyboardButtonCallback {
    return &TLKeyboardButtonCallback{
        Data2: m.Data2,
    }
}

// keyboardButtonRequestPhone#b16a6c29 text:string = KeyboardButton;
func (m *KeyboardButton) To_KeyboardButtonRequestPhone() *TLKeyboardButtonRequestPhone {
    return &TLKeyboardButtonRequestPhone{
        Data2: m.Data2,
    }
}

// keyboardButtonRequestGeoLocation#fc796b3f text:string = KeyboardButton;
func (m *KeyboardButton) To_KeyboardButtonRequestGeoLocation() *TLKeyboardButtonRequestGeoLocation {
    return &TLKeyboardButtonRequestGeoLocation{
        Data2: m.Data2,
    }
}

// keyboardButtonSwitchInline#568a748 flags:# same_peer:flags.0?true text:string query:string = KeyboardButton;
func (m *KeyboardButton) To_KeyboardButtonSwitchInline() *TLKeyboardButtonSwitchInline {
    return &TLKeyboardButtonSwitchInline{
        Data2: m.Data2,
    }
}

// keyboardButtonGame#50f41ccf text:string = KeyboardButton;
func (m *KeyboardButton) To_KeyboardButtonGame() *TLKeyboardButtonGame {
    return &TLKeyboardButtonGame{
        Data2: m.Data2,
    }
}

// keyboardButtonBuy#afd93fbb text:string = KeyboardButton;
func (m *KeyboardButton) To_KeyboardButtonBuy() *TLKeyboardButtonBuy {
    return &TLKeyboardButtonBuy{
        Data2: m.Data2,
    }
}

// keyboardButtonUrlAuth#10b78d29 flags:# text:string fwd_text:flags.0?string url:string button_id:int = KeyboardButton;
func (m *KeyboardButton) To_KeyboardButtonUrlAuth() *TLKeyboardButtonUrlAuth {
    return &TLKeyboardButtonUrlAuth{
        Data2: m.Data2,
    }
}

// inputKeyboardButtonUrlAuth#d02e7fd4 flags:# request_write_access:flags.0?true text:string fwd_text:flags.1?string url:string bot:InputUser = KeyboardButton;
func (m *KeyboardButton) To_InputKeyboardButtonUrlAuth() *TLInputKeyboardButtonUrlAuth {
    return &TLInputKeyboardButtonUrlAuth{
        Data2: m.Data2,
    }
}

// keyboardButtonRequestPoll#bbc7515d flags:# quiz:flags.0?Bool text:string = KeyboardButton;
func (m *KeyboardButton) To_KeyboardButtonRequestPoll() *TLKeyboardButtonRequestPoll {
    return &TLKeyboardButtonRequestPoll{
        Data2: m.Data2,
    }
}

// keyboardButtonCallback#35bbdb6b flags:# requires_password:flags.0?true text:string data:bytes = KeyboardButton;
func (m *KeyboardButton) To_KeyboardButtonCallback118() *TLKeyboardButtonCallback118 {
    return &TLKeyboardButtonCallback118{
        Data2: m.Data2,
    }
}



// keyboardButton#a2fa4880 text:string = KeyboardButton;
func (m *TLKeyboardButton) To_KeyboardButton() *KeyboardButton {
    return &KeyboardButton{
        Constructor: TLConstructor_CRC32_keyboardButton,
        Data2: m.Data2,
    }
}


func (m *TLKeyboardButton) SetText(v string) { m.Data2.Text = v }
func (m *TLKeyboardButton) GetText() string { return m.Data2.Text }


func NewTLKeyboardButton() * TLKeyboardButton {
    return &TLKeyboardButton{ Data2: &KeyboardButton_Data{} }
}

func (m* TLKeyboardButton) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_keyboardButton))

    x.String(m.GetText())

    return x.buf
}

func (m* TLKeyboardButton) Decode(dbuf *DecodeBuf) error {
    m.SetText(dbuf.String())

    return dbuf.err
}
// keyboardButtonUrl#258aff05 text:string url:string = KeyboardButton;
func (m *TLKeyboardButtonUrl) To_KeyboardButton() *KeyboardButton {
    return &KeyboardButton{
        Constructor: TLConstructor_CRC32_keyboardButtonUrl,
        Data2: m.Data2,
    }
}


func (m *TLKeyboardButtonUrl) SetText(v string) { m.Data2.Text = v }
func (m *TLKeyboardButtonUrl) GetText() string { return m.Data2.Text }

func (m *TLKeyboardButtonUrl) SetUrl(v string) { m.Data2.Url = v }
func (m *TLKeyboardButtonUrl) GetUrl() string { return m.Data2.Url }


func NewTLKeyboardButtonUrl() * TLKeyboardButtonUrl {
    return &TLKeyboardButtonUrl{ Data2: &KeyboardButton_Data{} }
}

func (m* TLKeyboardButtonUrl) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_keyboardButtonUrl))

    x.String(m.GetText())
    x.String(m.GetUrl())

    return x.buf
}

func (m* TLKeyboardButtonUrl) Decode(dbuf *DecodeBuf) error {
    m.SetText(dbuf.String())
    m.SetUrl(dbuf.String())

    return dbuf.err
}
// keyboardButtonCallback#683a5e46 text:string data:bytes = KeyboardButton;
func (m *TLKeyboardButtonCallback) To_KeyboardButton() *KeyboardButton {
    return &KeyboardButton{
        Constructor: TLConstructor_CRC32_keyboardButtonCallback,
        Data2: m.Data2,
    }
}


func (m *TLKeyboardButtonCallback) SetText(v string) { m.Data2.Text = v }
func (m *TLKeyboardButtonCallback) GetText() string { return m.Data2.Text }

func (m *TLKeyboardButtonCallback) SetData(v []byte) { m.Data2.Data = v }
func (m *TLKeyboardButtonCallback) GetData() []byte { return m.Data2.Data }


func NewTLKeyboardButtonCallback() * TLKeyboardButtonCallback {
    return &TLKeyboardButtonCallback{ Data2: &KeyboardButton_Data{} }
}

func (m* TLKeyboardButtonCallback) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_keyboardButtonCallback))

    x.String(m.GetText())
    x.StringBytes(m.GetData())

    return x.buf
}

func (m* TLKeyboardButtonCallback) Decode(dbuf *DecodeBuf) error {
    m.SetText(dbuf.String())
    m.SetData(dbuf.StringBytes())

    return dbuf.err
}
// keyboardButtonRequestPhone#b16a6c29 text:string = KeyboardButton;
func (m *TLKeyboardButtonRequestPhone) To_KeyboardButton() *KeyboardButton {
    return &KeyboardButton{
        Constructor: TLConstructor_CRC32_keyboardButtonRequestPhone,
        Data2: m.Data2,
    }
}


func (m *TLKeyboardButtonRequestPhone) SetText(v string) { m.Data2.Text = v }
func (m *TLKeyboardButtonRequestPhone) GetText() string { return m.Data2.Text }


func NewTLKeyboardButtonRequestPhone() * TLKeyboardButtonRequestPhone {
    return &TLKeyboardButtonRequestPhone{ Data2: &KeyboardButton_Data{} }
}

func (m* TLKeyboardButtonRequestPhone) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_keyboardButtonRequestPhone))

    x.String(m.GetText())

    return x.buf
}

func (m* TLKeyboardButtonRequestPhone) Decode(dbuf *DecodeBuf) error {
    m.SetText(dbuf.String())

    return dbuf.err
}
// keyboardButtonRequestGeoLocation#fc796b3f text:string = KeyboardButton;
func (m *TLKeyboardButtonRequestGeoLocation) To_KeyboardButton() *KeyboardButton {
    return &KeyboardButton{
        Constructor: TLConstructor_CRC32_keyboardButtonRequestGeoLocation,
        Data2: m.Data2,
    }
}


func (m *TLKeyboardButtonRequestGeoLocation) SetText(v string) { m.Data2.Text = v }
func (m *TLKeyboardButtonRequestGeoLocation) GetText() string { return m.Data2.Text }


func NewTLKeyboardButtonRequestGeoLocation() * TLKeyboardButtonRequestGeoLocation {
    return &TLKeyboardButtonRequestGeoLocation{ Data2: &KeyboardButton_Data{} }
}

func (m* TLKeyboardButtonRequestGeoLocation) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_keyboardButtonRequestGeoLocation))

    x.String(m.GetText())

    return x.buf
}

func (m* TLKeyboardButtonRequestGeoLocation) Decode(dbuf *DecodeBuf) error {
    m.SetText(dbuf.String())

    return dbuf.err
}
// keyboardButtonSwitchInline#568a748 flags:# same_peer:flags.0?true text:string query:string = KeyboardButton;
func (m *TLKeyboardButtonSwitchInline) To_KeyboardButton() *KeyboardButton {
    return &KeyboardButton{
        Constructor: TLConstructor_CRC32_keyboardButtonSwitchInline,
        Data2: m.Data2,
    }
}


func (m *TLKeyboardButtonSwitchInline) SetSamePeer(v bool) { m.Data2.SamePeer = v }
func (m *TLKeyboardButtonSwitchInline) GetSamePeer() bool { return m.Data2.SamePeer }

func (m *TLKeyboardButtonSwitchInline) SetText(v string) { m.Data2.Text = v }
func (m *TLKeyboardButtonSwitchInline) GetText() string { return m.Data2.Text }

func (m *TLKeyboardButtonSwitchInline) SetQuery(v string) { m.Data2.Query = v }
func (m *TLKeyboardButtonSwitchInline) GetQuery() string { return m.Data2.Query }


func NewTLKeyboardButtonSwitchInline() * TLKeyboardButtonSwitchInline {
    return &TLKeyboardButtonSwitchInline{ Data2: &KeyboardButton_Data{} }
}

func (m* TLKeyboardButtonSwitchInline) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_keyboardButtonSwitchInline))

    // flags
    var flags uint32 = 0
    if m.GetSamePeer() == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.String(m.GetText())
    x.String(m.GetQuery())

    return x.buf
}

func (m* TLKeyboardButtonSwitchInline) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetSamePeer(true) }
    m.SetText(dbuf.String())
    m.SetQuery(dbuf.String())

    return dbuf.err
}
// keyboardButtonGame#50f41ccf text:string = KeyboardButton;
func (m *TLKeyboardButtonGame) To_KeyboardButton() *KeyboardButton {
    return &KeyboardButton{
        Constructor: TLConstructor_CRC32_keyboardButtonGame,
        Data2: m.Data2,
    }
}


func (m *TLKeyboardButtonGame) SetText(v string) { m.Data2.Text = v }
func (m *TLKeyboardButtonGame) GetText() string { return m.Data2.Text }


func NewTLKeyboardButtonGame() * TLKeyboardButtonGame {
    return &TLKeyboardButtonGame{ Data2: &KeyboardButton_Data{} }
}

func (m* TLKeyboardButtonGame) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_keyboardButtonGame))

    x.String(m.GetText())

    return x.buf
}

func (m* TLKeyboardButtonGame) Decode(dbuf *DecodeBuf) error {
    m.SetText(dbuf.String())

    return dbuf.err
}
// keyboardButtonBuy#afd93fbb text:string = KeyboardButton;
func (m *TLKeyboardButtonBuy) To_KeyboardButton() *KeyboardButton {
    return &KeyboardButton{
        Constructor: TLConstructor_CRC32_keyboardButtonBuy,
        Data2: m.Data2,
    }
}


func (m *TLKeyboardButtonBuy) SetText(v string) { m.Data2.Text = v }
func (m *TLKeyboardButtonBuy) GetText() string { return m.Data2.Text }


func NewTLKeyboardButtonBuy() * TLKeyboardButtonBuy {
    return &TLKeyboardButtonBuy{ Data2: &KeyboardButton_Data{} }
}

func (m* TLKeyboardButtonBuy) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_keyboardButtonBuy))

    x.String(m.GetText())

    return x.buf
}

func (m* TLKeyboardButtonBuy) Decode(dbuf *DecodeBuf) error {
    m.SetText(dbuf.String())

    return dbuf.err
}
// keyboardButtonUrlAuth#10b78d29 flags:# text:string fwd_text:flags.0?string url:string button_id:int = KeyboardButton;
func (m *TLKeyboardButtonUrlAuth) To_KeyboardButton() *KeyboardButton {
    return &KeyboardButton{
        Constructor: TLConstructor_CRC32_keyboardButtonUrlAuth,
        Data2: m.Data2,
    }
}


func (m *TLKeyboardButtonUrlAuth) SetText(v string) { m.Data2.Text = v }
func (m *TLKeyboardButtonUrlAuth) GetText() string { return m.Data2.Text }

func (m *TLKeyboardButtonUrlAuth) SetFwdText(v string) { m.Data2.FwdText = v }
func (m *TLKeyboardButtonUrlAuth) GetFwdText() string { return m.Data2.FwdText }

func (m *TLKeyboardButtonUrlAuth) SetUrl(v string) { m.Data2.Url = v }
func (m *TLKeyboardButtonUrlAuth) GetUrl() string { return m.Data2.Url }

func (m *TLKeyboardButtonUrlAuth) SetButtonId(v int32) { m.Data2.ButtonId = v }
func (m *TLKeyboardButtonUrlAuth) GetButtonId() int32 { return m.Data2.ButtonId }


func NewTLKeyboardButtonUrlAuth() * TLKeyboardButtonUrlAuth {
    return &TLKeyboardButtonUrlAuth{ Data2: &KeyboardButton_Data{} }
}

func (m* TLKeyboardButtonUrlAuth) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_keyboardButtonUrlAuth))

    // flags
    var flags uint32 = 0
    if m.GetFwdText() != "" { flags |= 1 << 0 }
	x.UInt(flags)

    x.String(m.GetText())
    if (flags & (1 << 0)) != 0 { x.String(m.GetFwdText()) }
    x.String(m.GetUrl())
    x.Int(m.GetButtonId())

    return x.buf
}

func (m* TLKeyboardButtonUrlAuth) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetText(dbuf.String())
    if (flags & (1 << 0)) != 0 { m.SetFwdText(dbuf.String()) }
    m.SetUrl(dbuf.String())
    m.SetButtonId(dbuf.Int())

    return dbuf.err
}
// inputKeyboardButtonUrlAuth#d02e7fd4 flags:# request_write_access:flags.0?true text:string fwd_text:flags.1?string url:string bot:InputUser = KeyboardButton;
func (m *TLInputKeyboardButtonUrlAuth) To_KeyboardButton() *KeyboardButton {
    return &KeyboardButton{
        Constructor: TLConstructor_CRC32_inputKeyboardButtonUrlAuth,
        Data2: m.Data2,
    }
}


func (m *TLInputKeyboardButtonUrlAuth) SetRequestWriteAccess(v bool) { m.Data2.RequestWriteAccess = v }
func (m *TLInputKeyboardButtonUrlAuth) GetRequestWriteAccess() bool { return m.Data2.RequestWriteAccess }

func (m *TLInputKeyboardButtonUrlAuth) SetText(v string) { m.Data2.Text = v }
func (m *TLInputKeyboardButtonUrlAuth) GetText() string { return m.Data2.Text }

func (m *TLInputKeyboardButtonUrlAuth) SetFwdText(v string) { m.Data2.FwdText = v }
func (m *TLInputKeyboardButtonUrlAuth) GetFwdText() string { return m.Data2.FwdText }

func (m *TLInputKeyboardButtonUrlAuth) SetUrl(v string) { m.Data2.Url = v }
func (m *TLInputKeyboardButtonUrlAuth) GetUrl() string { return m.Data2.Url }

func (m *TLInputKeyboardButtonUrlAuth) SetBot(v *InputUser) { m.Data2.Bot = v }
func (m *TLInputKeyboardButtonUrlAuth) GetBot() *InputUser { return m.Data2.Bot }


func NewTLInputKeyboardButtonUrlAuth() * TLInputKeyboardButtonUrlAuth {
    return &TLInputKeyboardButtonUrlAuth{ Data2: &KeyboardButton_Data{} }
}

func (m* TLInputKeyboardButtonUrlAuth) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_inputKeyboardButtonUrlAuth))

    // flags
    var flags uint32 = 0
    if m.GetRequestWriteAccess() == true { flags |= 1 << 0 }
    if m.GetFwdText() != "" { flags |= 1 << 1 }
	x.UInt(flags)

    
    x.String(m.GetText())
    if (flags & (1 << 1)) != 0 { x.String(m.GetFwdText()) }
    x.String(m.GetUrl())
    x.Bytes(m.GetBot().Encode())

    return x.buf
}

func (m* TLInputKeyboardButtonUrlAuth) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetRequestWriteAccess(true) }
    m.SetText(dbuf.String())
    if (flags & (1 << 1)) != 0 { m.SetFwdText(dbuf.String()) }
    m.SetUrl(dbuf.String())
    m6 := &InputUser{}
    m6.Decode(dbuf)
    m.SetBot(m6)

    return dbuf.err
}
// keyboardButtonRequestPoll#bbc7515d flags:# quiz:flags.0?Bool text:string = KeyboardButton;
func (m *TLKeyboardButtonRequestPoll) To_KeyboardButton() *KeyboardButton {
    return &KeyboardButton{
        Constructor: TLConstructor_CRC32_keyboardButtonRequestPoll,
        Data2: m.Data2,
    }
}


func (m *TLKeyboardButtonRequestPoll) SetQuiz(v *Bool) { m.Data2.Quiz = v }
func (m *TLKeyboardButtonRequestPoll) GetQuiz() *Bool { return m.Data2.Quiz }

func (m *TLKeyboardButtonRequestPoll) SetText(v string) { m.Data2.Text = v }
func (m *TLKeyboardButtonRequestPoll) GetText() string { return m.Data2.Text }


func NewTLKeyboardButtonRequestPoll() * TLKeyboardButtonRequestPoll {
    return &TLKeyboardButtonRequestPoll{ Data2: &KeyboardButton_Data{} }
}

func (m* TLKeyboardButtonRequestPoll) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_keyboardButtonRequestPoll))

    // flags
    var flags uint32 = 0
    if m.GetQuiz() != nil { flags |= 1 << 0 }
	x.UInt(flags)

    if (flags & (1 << 0)) != 0 { x.Bytes(m.GetQuiz().Encode()) }
    x.String(m.GetText())

    return x.buf
}

func (m* TLKeyboardButtonRequestPoll) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 {
 m2 := &Bool{}
    m2.Decode(dbuf)
    m.SetQuiz(m2) 
}
    m.SetText(dbuf.String())

    return dbuf.err
}
// keyboardButtonCallback#35bbdb6b flags:# requires_password:flags.0?true text:string data:bytes = KeyboardButton;
func (m *TLKeyboardButtonCallback118) To_KeyboardButton() *KeyboardButton {
    return &KeyboardButton{
        Constructor: TLConstructor_CRC32_keyboardButtonCallback118,
        Data2: m.Data2,
    }
}


func (m *TLKeyboardButtonCallback118) SetRequiresPassword(v bool) { m.Data2.RequiresPassword = v }
func (m *TLKeyboardButtonCallback118) GetRequiresPassword() bool { return m.Data2.RequiresPassword }

func (m *TLKeyboardButtonCallback118) SetText(v string) { m.Data2.Text = v }
func (m *TLKeyboardButtonCallback118) GetText() string { return m.Data2.Text }

func (m *TLKeyboardButtonCallback118) SetData(v []byte) { m.Data2.Data = v }
func (m *TLKeyboardButtonCallback118) GetData() []byte { return m.Data2.Data }


func NewTLKeyboardButtonCallback118() * TLKeyboardButtonCallback118 {
    return &TLKeyboardButtonCallback118{ Data2: &KeyboardButton_Data{} }
}

func (m* TLKeyboardButtonCallback118) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_keyboardButtonCallback118))

    // flags
    var flags uint32 = 0
    if m.GetRequiresPassword() == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.String(m.GetText())
    x.StringBytes(m.GetData())

    return x.buf
}

func (m* TLKeyboardButtonCallback118) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetRequiresPassword(true) }
    m.SetText(dbuf.String())
    m.SetData(dbuf.StringBytes())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// PageBlock <--
//  + TL_PageBlockUnsupported
//  + TL_PageBlockTitle
//  + TL_PageBlockSubtitle
//  + TL_PageBlockAuthorDate
//  + TL_PageBlockHeader
//  + TL_PageBlockSubheader
//  + TL_PageBlockParagraph
//  + TL_PageBlockPreformatted
//  + TL_PageBlockFooter
//  + TL_PageBlockDivider
//  + TL_PageBlockAnchor
//  + TL_PageBlockList
//  + TL_PageBlockBlockquote
//  + TL_PageBlockPullquote
//  + TL_PageBlockPhoto
//  + TL_PageBlockVideo
//  + TL_PageBlockCover
//  + TL_PageBlockEmbed
//  + TL_PageBlockEmbedPost
//  + TL_PageBlockCollage
//  + TL_PageBlockSlideshow
//  + TL_PageBlockChannel
//  + TL_PageBlockAudio
//  + TL_PageBlockList114
//  + TL_PageBlockPhoto114
//  + TL_PageBlockVideo114
//  + TL_PageBlockEmbed114
//  + TL_PageBlockEmbedPost114
//  + TL_PageBlockCollage114
//  + TL_PageBlockSlideshow114
//  + TL_PageBlockAudio114
//  + TL_PageBlockKicker
//  + TL_PageBlockTable
//  + TL_PageBlockOrderedList
//  + TL_PageBlockDetails
//  + TL_PageBlockRelatedArticles
//  + TL_PageBlockMap
//

func (m *PageBlock) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_pageBlockUnsupported:
        t := m.To_PageBlockUnsupported()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockTitle:
        t := m.To_PageBlockTitle()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockSubtitle:
        t := m.To_PageBlockSubtitle()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockAuthorDate:
        t := m.To_PageBlockAuthorDate()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockHeader:
        t := m.To_PageBlockHeader()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockSubheader:
        t := m.To_PageBlockSubheader()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockParagraph:
        t := m.To_PageBlockParagraph()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockPreformatted:
        t := m.To_PageBlockPreformatted()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockFooter:
        t := m.To_PageBlockFooter()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockDivider:
        t := m.To_PageBlockDivider()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockAnchor:
        t := m.To_PageBlockAnchor()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockList:
        t := m.To_PageBlockList()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockBlockquote:
        t := m.To_PageBlockBlockquote()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockPullquote:
        t := m.To_PageBlockPullquote()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockPhoto:
        t := m.To_PageBlockPhoto()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockVideo:
        t := m.To_PageBlockVideo()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockCover:
        t := m.To_PageBlockCover()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockEmbed:
        t := m.To_PageBlockEmbed()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockEmbedPost:
        t := m.To_PageBlockEmbedPost()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockCollage:
        t := m.To_PageBlockCollage()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockSlideshow:
        t := m.To_PageBlockSlideshow()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockChannel:
        t := m.To_PageBlockChannel()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockAudio:
        t := m.To_PageBlockAudio()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockList114:
        t := m.To_PageBlockList114()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockPhoto114:
        t := m.To_PageBlockPhoto114()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockVideo114:
        t := m.To_PageBlockVideo114()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockEmbed114:
        t := m.To_PageBlockEmbed114()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockEmbedPost114:
        t := m.To_PageBlockEmbedPost114()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockCollage114:
        t := m.To_PageBlockCollage114()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockSlideshow114:
        t := m.To_PageBlockSlideshow114()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockAudio114:
        t := m.To_PageBlockAudio114()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockKicker:
        t := m.To_PageBlockKicker()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockTable:
        t := m.To_PageBlockTable()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockOrderedList:
        t := m.To_PageBlockOrderedList()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockDetails:
        t := m.To_PageBlockDetails()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockRelatedArticles:
        t := m.To_PageBlockRelatedArticles()
        return t.Encode()
    case TLConstructor_CRC32_pageBlockMap:
        t := m.To_PageBlockMap()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *PageBlock) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_pageBlockUnsupported:
        m2 := &TLPageBlockUnsupported{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockTitle:
        m2 := &TLPageBlockTitle{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockSubtitle:
        m2 := &TLPageBlockSubtitle{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockAuthorDate:
        m2 := &TLPageBlockAuthorDate{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockHeader:
        m2 := &TLPageBlockHeader{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockSubheader:
        m2 := &TLPageBlockSubheader{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockParagraph:
        m2 := &TLPageBlockParagraph{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockPreformatted:
        m2 := &TLPageBlockPreformatted{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockFooter:
        m2 := &TLPageBlockFooter{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockDivider:
        m2 := &TLPageBlockDivider{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockAnchor:
        m2 := &TLPageBlockAnchor{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockList:
        m2 := &TLPageBlockList{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockBlockquote:
        m2 := &TLPageBlockBlockquote{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockPullquote:
        m2 := &TLPageBlockPullquote{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockPhoto:
        m2 := &TLPageBlockPhoto{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockVideo:
        m2 := &TLPageBlockVideo{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockCover:
        m2 := &TLPageBlockCover{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockEmbed:
        m2 := &TLPageBlockEmbed{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockEmbedPost:
        m2 := &TLPageBlockEmbedPost{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockCollage:
        m2 := &TLPageBlockCollage{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockSlideshow:
        m2 := &TLPageBlockSlideshow{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockChannel:
        m2 := &TLPageBlockChannel{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockAudio:
        m2 := &TLPageBlockAudio{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockList114:
        m2 := &TLPageBlockList114{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockPhoto114:
        m2 := &TLPageBlockPhoto114{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockVideo114:
        m2 := &TLPageBlockVideo114{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockEmbed114:
        m2 := &TLPageBlockEmbed114{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockEmbedPost114:
        m2 := &TLPageBlockEmbedPost114{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockCollage114:
        m2 := &TLPageBlockCollage114{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockSlideshow114:
        m2 := &TLPageBlockSlideshow114{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockAudio114:
        m2 := &TLPageBlockAudio114{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockKicker:
        m2 := &TLPageBlockKicker{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockTable:
        m2 := &TLPageBlockTable{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockOrderedList:
        m2 := &TLPageBlockOrderedList{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockDetails:
        m2 := &TLPageBlockDetails{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockRelatedArticles:
        m2 := &TLPageBlockRelatedArticles{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_pageBlockMap:
        m2 := &TLPageBlockMap{&PageBlock_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// pageBlockUnsupported#13567e8a = PageBlock;
func (m *PageBlock) To_PageBlockUnsupported() *TLPageBlockUnsupported {
    return &TLPageBlockUnsupported{
        Data2: m.Data2,
    }
}

// pageBlockTitle#70abc3fd text:RichText = PageBlock;
func (m *PageBlock) To_PageBlockTitle() *TLPageBlockTitle {
    return &TLPageBlockTitle{
        Data2: m.Data2,
    }
}

// pageBlockSubtitle#8ffa9a1f text:RichText = PageBlock;
func (m *PageBlock) To_PageBlockSubtitle() *TLPageBlockSubtitle {
    return &TLPageBlockSubtitle{
        Data2: m.Data2,
    }
}

// pageBlockAuthorDate#baafe5e0 author:RichText published_date:int = PageBlock;
func (m *PageBlock) To_PageBlockAuthorDate() *TLPageBlockAuthorDate {
    return &TLPageBlockAuthorDate{
        Data2: m.Data2,
    }
}

// pageBlockHeader#bfd064ec text:RichText = PageBlock;
func (m *PageBlock) To_PageBlockHeader() *TLPageBlockHeader {
    return &TLPageBlockHeader{
        Data2: m.Data2,
    }
}

// pageBlockSubheader#f12bb6e1 text:RichText = PageBlock;
func (m *PageBlock) To_PageBlockSubheader() *TLPageBlockSubheader {
    return &TLPageBlockSubheader{
        Data2: m.Data2,
    }
}

// pageBlockParagraph#467a0766 text:RichText = PageBlock;
func (m *PageBlock) To_PageBlockParagraph() *TLPageBlockParagraph {
    return &TLPageBlockParagraph{
        Data2: m.Data2,
    }
}

// pageBlockPreformatted#c070d93e text:RichText language:string = PageBlock;
func (m *PageBlock) To_PageBlockPreformatted() *TLPageBlockPreformatted {
    return &TLPageBlockPreformatted{
        Data2: m.Data2,
    }
}

// pageBlockFooter#48870999 text:RichText = PageBlock;
func (m *PageBlock) To_PageBlockFooter() *TLPageBlockFooter {
    return &TLPageBlockFooter{
        Data2: m.Data2,
    }
}

// pageBlockDivider#db20b188 = PageBlock;
func (m *PageBlock) To_PageBlockDivider() *TLPageBlockDivider {
    return &TLPageBlockDivider{
        Data2: m.Data2,
    }
}

// pageBlockAnchor#ce0d37b0 name:string = PageBlock;
func (m *PageBlock) To_PageBlockAnchor() *TLPageBlockAnchor {
    return &TLPageBlockAnchor{
        Data2: m.Data2,
    }
}

// pageBlockList#3a58c7f4 ordered:Bool items:Vector<RichText> = PageBlock;
func (m *PageBlock) To_PageBlockList() *TLPageBlockList {
    return &TLPageBlockList{
        Data2: m.Data2,
    }
}

// pageBlockBlockquote#263d7c26 text:RichText caption:RichText = PageBlock;
func (m *PageBlock) To_PageBlockBlockquote() *TLPageBlockBlockquote {
    return &TLPageBlockBlockquote{
        Data2: m.Data2,
    }
}

// pageBlockPullquote#4f4456d3 text:RichText caption:RichText = PageBlock;
func (m *PageBlock) To_PageBlockPullquote() *TLPageBlockPullquote {
    return &TLPageBlockPullquote{
        Data2: m.Data2,
    }
}

// pageBlockPhoto#e9c69982 photo_id:long caption:RichText = PageBlock;
func (m *PageBlock) To_PageBlockPhoto() *TLPageBlockPhoto {
    return &TLPageBlockPhoto{
        Data2: m.Data2,
    }
}

// pageBlockVideo#d9d71866 flags:# autoplay:flags.0?true loop:flags.1?true video_id:long caption:RichText = PageBlock;
func (m *PageBlock) To_PageBlockVideo() *TLPageBlockVideo {
    return &TLPageBlockVideo{
        Data2: m.Data2,
    }
}

// pageBlockCover#39f23300 cover:PageBlock = PageBlock;
func (m *PageBlock) To_PageBlockCover() *TLPageBlockCover {
    return &TLPageBlockCover{
        Data2: m.Data2,
    }
}

// pageBlockEmbed#cde200d1 flags:# full_width:flags.0?true allow_scrolling:flags.3?true url:flags.1?string html:flags.2?string poster_photo_id:flags.4?long w:int h:int caption:RichText = PageBlock;
func (m *PageBlock) To_PageBlockEmbed() *TLPageBlockEmbed {
    return &TLPageBlockEmbed{
        Data2: m.Data2,
    }
}

// pageBlockEmbedPost#292c7be9 url:string webpage_id:long author_photo_id:long author:string date:int blocks:Vector<PageBlock> caption:RichText = PageBlock;
func (m *PageBlock) To_PageBlockEmbedPost() *TLPageBlockEmbedPost {
    return &TLPageBlockEmbedPost{
        Data2: m.Data2,
    }
}

// pageBlockCollage#8b31c4f items:Vector<PageBlock> caption:RichText = PageBlock;
func (m *PageBlock) To_PageBlockCollage() *TLPageBlockCollage {
    return &TLPageBlockCollage{
        Data2: m.Data2,
    }
}

// pageBlockSlideshow#130c8963 items:Vector<PageBlock> caption:RichText = PageBlock;
func (m *PageBlock) To_PageBlockSlideshow() *TLPageBlockSlideshow {
    return &TLPageBlockSlideshow{
        Data2: m.Data2,
    }
}

// pageBlockChannel#ef1751b5 channel:Chat = PageBlock;
func (m *PageBlock) To_PageBlockChannel() *TLPageBlockChannel {
    return &TLPageBlockChannel{
        Data2: m.Data2,
    }
}

// pageBlockAudio#31b81a7f audio_id:long caption:RichText = PageBlock;
func (m *PageBlock) To_PageBlockAudio() *TLPageBlockAudio {
    return &TLPageBlockAudio{
        Data2: m.Data2,
    }
}

// pageBlockList#e4e88011 items:Vector<PageListItem> = PageBlock;
func (m *PageBlock) To_PageBlockList114() *TLPageBlockList114 {
    return &TLPageBlockList114{
        Data2: m.Data2,
    }
}

// pageBlockPhoto#1759c560 flags:# photo_id:long caption:PageCaption url:flags.0?string webpage_id:flags.0?long = PageBlock;
func (m *PageBlock) To_PageBlockPhoto114() *TLPageBlockPhoto114 {
    return &TLPageBlockPhoto114{
        Data2: m.Data2,
    }
}

// pageBlockVideo#7c8fe7b6 flags:# autoplay:flags.0?true loop:flags.1?true video_id:long caption:PageCaption = PageBlock;
func (m *PageBlock) To_PageBlockVideo114() *TLPageBlockVideo114 {
    return &TLPageBlockVideo114{
        Data2: m.Data2,
    }
}

// pageBlockEmbed#a8718dc5 flags:# full_width:flags.0?true allow_scrolling:flags.3?true url:flags.1?string html:flags.2?string poster_photo_id:flags.4?long w:flags.5?int h:flags.5?int caption:PageCaption = PageBlock;
func (m *PageBlock) To_PageBlockEmbed114() *TLPageBlockEmbed114 {
    return &TLPageBlockEmbed114{
        Data2: m.Data2,
    }
}

// pageBlockEmbedPost#f259a80b url:string webpage_id:long author_photo_id:long author:string date:int blocks:Vector<PageBlock> caption:PageCaption = PageBlock;
func (m *PageBlock) To_PageBlockEmbedPost114() *TLPageBlockEmbedPost114 {
    return &TLPageBlockEmbedPost114{
        Data2: m.Data2,
    }
}

// pageBlockCollage#65a0fa4d items:Vector<PageBlock> caption:PageCaption = PageBlock;
func (m *PageBlock) To_PageBlockCollage114() *TLPageBlockCollage114 {
    return &TLPageBlockCollage114{
        Data2: m.Data2,
    }
}

// pageBlockSlideshow#31f9590 items:Vector<PageBlock> caption:PageCaption = PageBlock;
func (m *PageBlock) To_PageBlockSlideshow114() *TLPageBlockSlideshow114 {
    return &TLPageBlockSlideshow114{
        Data2: m.Data2,
    }
}

// pageBlockAudio#804361ea audio_id:long caption:PageCaption = PageBlock;
func (m *PageBlock) To_PageBlockAudio114() *TLPageBlockAudio114 {
    return &TLPageBlockAudio114{
        Data2: m.Data2,
    }
}

// pageBlockKicker#1e148390 text:RichText = PageBlock;
func (m *PageBlock) To_PageBlockKicker() *TLPageBlockKicker {
    return &TLPageBlockKicker{
        Data2: m.Data2,
    }
}

// pageBlockTable#bf4dea82 flags:# bordered:flags.0?true striped:flags.1?true title:RichText rows:Vector<PageTableRow> = PageBlock;
func (m *PageBlock) To_PageBlockTable() *TLPageBlockTable {
    return &TLPageBlockTable{
        Data2: m.Data2,
    }
}

// pageBlockOrderedList#9a8ae1e1 items:Vector<PageListOrderedItem> = PageBlock;
func (m *PageBlock) To_PageBlockOrderedList() *TLPageBlockOrderedList {
    return &TLPageBlockOrderedList{
        Data2: m.Data2,
    }
}

// pageBlockDetails#76768bed flags:# open:flags.0?true blocks:Vector<PageBlock> title:RichText = PageBlock;
func (m *PageBlock) To_PageBlockDetails() *TLPageBlockDetails {
    return &TLPageBlockDetails{
        Data2: m.Data2,
    }
}

// pageBlockRelatedArticles#16115a96 title:RichText articles:Vector<PageRelatedArticle> = PageBlock;
func (m *PageBlock) To_PageBlockRelatedArticles() *TLPageBlockRelatedArticles {
    return &TLPageBlockRelatedArticles{
        Data2: m.Data2,
    }
}

// pageBlockMap#a44f3ef6 geo:GeoPoint zoom:int w:int h:int caption:PageCaption = PageBlock;
func (m *PageBlock) To_PageBlockMap() *TLPageBlockMap {
    return &TLPageBlockMap{
        Data2: m.Data2,
    }
}



// pageBlockUnsupported#13567e8a = PageBlock;
func (m *TLPageBlockUnsupported) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockUnsupported,
        Data2: m.Data2,
    }
}



func NewTLPageBlockUnsupported() * TLPageBlockUnsupported {
    return &TLPageBlockUnsupported{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockUnsupported) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockUnsupported))


    return x.buf
}

func (m* TLPageBlockUnsupported) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// pageBlockTitle#70abc3fd text:RichText = PageBlock;
func (m *TLPageBlockTitle) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockTitle,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockTitle) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageBlockTitle) GetText() *RichText { return m.Data2.Text }


func NewTLPageBlockTitle() * TLPageBlockTitle {
    return &TLPageBlockTitle{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockTitle) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockTitle))

    x.Bytes(m.GetText().Encode())

    return x.buf
}

func (m* TLPageBlockTitle) Decode(dbuf *DecodeBuf) error {
    m1 := &RichText{}
    m1.Decode(dbuf)
    m.SetText(m1)

    return dbuf.err
}
// pageBlockSubtitle#8ffa9a1f text:RichText = PageBlock;
func (m *TLPageBlockSubtitle) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockSubtitle,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockSubtitle) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageBlockSubtitle) GetText() *RichText { return m.Data2.Text }


func NewTLPageBlockSubtitle() * TLPageBlockSubtitle {
    return &TLPageBlockSubtitle{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockSubtitle) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockSubtitle))

    x.Bytes(m.GetText().Encode())

    return x.buf
}

func (m* TLPageBlockSubtitle) Decode(dbuf *DecodeBuf) error {
    m1 := &RichText{}
    m1.Decode(dbuf)
    m.SetText(m1)

    return dbuf.err
}
// pageBlockAuthorDate#baafe5e0 author:RichText published_date:int = PageBlock;
func (m *TLPageBlockAuthorDate) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockAuthorDate,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockAuthorDate) SetAuthor(v *RichText) { m.Data2.Author_2 = v }
func (m *TLPageBlockAuthorDate) GetAuthor() *RichText { return m.Data2.Author_2 }

func (m *TLPageBlockAuthorDate) SetPublishedDate(v int32) { m.Data2.PublishedDate = v }
func (m *TLPageBlockAuthorDate) GetPublishedDate() int32 { return m.Data2.PublishedDate }


func NewTLPageBlockAuthorDate() * TLPageBlockAuthorDate {
    return &TLPageBlockAuthorDate{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockAuthorDate) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockAuthorDate))

    x.Bytes(m.GetAuthor().Encode())
    x.Int(m.GetPublishedDate())

    return x.buf
}

func (m* TLPageBlockAuthorDate) Decode(dbuf *DecodeBuf) error {
    m1 := &RichText{}
    m1.Decode(dbuf)
    m.SetAuthor(m1)
    m.SetPublishedDate(dbuf.Int())

    return dbuf.err
}
// pageBlockHeader#bfd064ec text:RichText = PageBlock;
func (m *TLPageBlockHeader) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockHeader,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockHeader) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageBlockHeader) GetText() *RichText { return m.Data2.Text }


func NewTLPageBlockHeader() * TLPageBlockHeader {
    return &TLPageBlockHeader{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockHeader) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockHeader))

    x.Bytes(m.GetText().Encode())

    return x.buf
}

func (m* TLPageBlockHeader) Decode(dbuf *DecodeBuf) error {
    m1 := &RichText{}
    m1.Decode(dbuf)
    m.SetText(m1)

    return dbuf.err
}
// pageBlockSubheader#f12bb6e1 text:RichText = PageBlock;
func (m *TLPageBlockSubheader) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockSubheader,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockSubheader) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageBlockSubheader) GetText() *RichText { return m.Data2.Text }


func NewTLPageBlockSubheader() * TLPageBlockSubheader {
    return &TLPageBlockSubheader{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockSubheader) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockSubheader))

    x.Bytes(m.GetText().Encode())

    return x.buf
}

func (m* TLPageBlockSubheader) Decode(dbuf *DecodeBuf) error {
    m1 := &RichText{}
    m1.Decode(dbuf)
    m.SetText(m1)

    return dbuf.err
}
// pageBlockParagraph#467a0766 text:RichText = PageBlock;
func (m *TLPageBlockParagraph) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockParagraph,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockParagraph) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageBlockParagraph) GetText() *RichText { return m.Data2.Text }


func NewTLPageBlockParagraph() * TLPageBlockParagraph {
    return &TLPageBlockParagraph{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockParagraph) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockParagraph))

    x.Bytes(m.GetText().Encode())

    return x.buf
}

func (m* TLPageBlockParagraph) Decode(dbuf *DecodeBuf) error {
    m1 := &RichText{}
    m1.Decode(dbuf)
    m.SetText(m1)

    return dbuf.err
}
// pageBlockPreformatted#c070d93e text:RichText language:string = PageBlock;
func (m *TLPageBlockPreformatted) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockPreformatted,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockPreformatted) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageBlockPreformatted) GetText() *RichText { return m.Data2.Text }

func (m *TLPageBlockPreformatted) SetLanguage(v string) { m.Data2.Language = v }
func (m *TLPageBlockPreformatted) GetLanguage() string { return m.Data2.Language }


func NewTLPageBlockPreformatted() * TLPageBlockPreformatted {
    return &TLPageBlockPreformatted{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockPreformatted) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockPreformatted))

    x.Bytes(m.GetText().Encode())
    x.String(m.GetLanguage())

    return x.buf
}

func (m* TLPageBlockPreformatted) Decode(dbuf *DecodeBuf) error {
    m1 := &RichText{}
    m1.Decode(dbuf)
    m.SetText(m1)
    m.SetLanguage(dbuf.String())

    return dbuf.err
}
// pageBlockFooter#48870999 text:RichText = PageBlock;
func (m *TLPageBlockFooter) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockFooter,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockFooter) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageBlockFooter) GetText() *RichText { return m.Data2.Text }


func NewTLPageBlockFooter() * TLPageBlockFooter {
    return &TLPageBlockFooter{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockFooter) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockFooter))

    x.Bytes(m.GetText().Encode())

    return x.buf
}

func (m* TLPageBlockFooter) Decode(dbuf *DecodeBuf) error {
    m1 := &RichText{}
    m1.Decode(dbuf)
    m.SetText(m1)

    return dbuf.err
}
// pageBlockDivider#db20b188 = PageBlock;
func (m *TLPageBlockDivider) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockDivider,
        Data2: m.Data2,
    }
}



func NewTLPageBlockDivider() * TLPageBlockDivider {
    return &TLPageBlockDivider{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockDivider) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockDivider))


    return x.buf
}

func (m* TLPageBlockDivider) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// pageBlockAnchor#ce0d37b0 name:string = PageBlock;
func (m *TLPageBlockAnchor) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockAnchor,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockAnchor) SetName(v string) { m.Data2.Name = v }
func (m *TLPageBlockAnchor) GetName() string { return m.Data2.Name }


func NewTLPageBlockAnchor() * TLPageBlockAnchor {
    return &TLPageBlockAnchor{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockAnchor) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockAnchor))

    x.String(m.GetName())

    return x.buf
}

func (m* TLPageBlockAnchor) Decode(dbuf *DecodeBuf) error {
    m.SetName(dbuf.String())

    return dbuf.err
}
// pageBlockList#3a58c7f4 ordered:Bool items:Vector<RichText> = PageBlock;
func (m *TLPageBlockList) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockList,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockList) SetOrdered(v *Bool) { m.Data2.Ordered = v }
func (m *TLPageBlockList) GetOrdered() *Bool { return m.Data2.Ordered }

func (m *TLPageBlockList) SetItems(v []*RichText) { m.Data2.Items_7 = v }
func (m *TLPageBlockList) GetItems() []*RichText { return m.Data2.Items_7 }


func NewTLPageBlockList() * TLPageBlockList {
    return &TLPageBlockList{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockList) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockList))

    x.Bytes(m.GetOrdered().Encode())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetItems())))
for _, v := range m.GetItems() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLPageBlockList) Decode(dbuf *DecodeBuf) error {
    m1 := &Bool{}
    m1.Decode(dbuf)
    m.SetOrdered(m1)
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*RichText, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &RichText{}
	v2[i].Decode(dbuf)
}
m.SetItems(v2)


    return dbuf.err
}
// pageBlockBlockquote#263d7c26 text:RichText caption:RichText = PageBlock;
func (m *TLPageBlockBlockquote) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockBlockquote,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockBlockquote) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageBlockBlockquote) GetText() *RichText { return m.Data2.Text }

func (m *TLPageBlockBlockquote) SetCaption(v *RichText) { m.Data2.Caption_8 = v }
func (m *TLPageBlockBlockquote) GetCaption() *RichText { return m.Data2.Caption_8 }


func NewTLPageBlockBlockquote() * TLPageBlockBlockquote {
    return &TLPageBlockBlockquote{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockBlockquote) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockBlockquote))

    x.Bytes(m.GetText().Encode())
    x.Bytes(m.GetCaption().Encode())

    return x.buf
}

func (m* TLPageBlockBlockquote) Decode(dbuf *DecodeBuf) error {
    m1 := &RichText{}
    m1.Decode(dbuf)
    m.SetText(m1)
    m2 := &RichText{}
    m2.Decode(dbuf)
    m.SetCaption(m2)

    return dbuf.err
}
// pageBlockPullquote#4f4456d3 text:RichText caption:RichText = PageBlock;
func (m *TLPageBlockPullquote) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockPullquote,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockPullquote) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageBlockPullquote) GetText() *RichText { return m.Data2.Text }

func (m *TLPageBlockPullquote) SetCaption(v *RichText) { m.Data2.Caption_8 = v }
func (m *TLPageBlockPullquote) GetCaption() *RichText { return m.Data2.Caption_8 }


func NewTLPageBlockPullquote() * TLPageBlockPullquote {
    return &TLPageBlockPullquote{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockPullquote) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockPullquote))

    x.Bytes(m.GetText().Encode())
    x.Bytes(m.GetCaption().Encode())

    return x.buf
}

func (m* TLPageBlockPullquote) Decode(dbuf *DecodeBuf) error {
    m1 := &RichText{}
    m1.Decode(dbuf)
    m.SetText(m1)
    m2 := &RichText{}
    m2.Decode(dbuf)
    m.SetCaption(m2)

    return dbuf.err
}
// pageBlockPhoto#e9c69982 photo_id:long caption:RichText = PageBlock;
func (m *TLPageBlockPhoto) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockPhoto,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockPhoto) SetPhotoId(v int64) { m.Data2.PhotoId = v }
func (m *TLPageBlockPhoto) GetPhotoId() int64 { return m.Data2.PhotoId }

func (m *TLPageBlockPhoto) SetCaption(v *RichText) { m.Data2.Caption_8 = v }
func (m *TLPageBlockPhoto) GetCaption() *RichText { return m.Data2.Caption_8 }


func NewTLPageBlockPhoto() * TLPageBlockPhoto {
    return &TLPageBlockPhoto{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockPhoto) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockPhoto))

    x.Long(m.GetPhotoId())
    x.Bytes(m.GetCaption().Encode())

    return x.buf
}

func (m* TLPageBlockPhoto) Decode(dbuf *DecodeBuf) error {
    m.SetPhotoId(dbuf.Long())
    m2 := &RichText{}
    m2.Decode(dbuf)
    m.SetCaption(m2)

    return dbuf.err
}
// pageBlockVideo#d9d71866 flags:# autoplay:flags.0?true loop:flags.1?true video_id:long caption:RichText = PageBlock;
func (m *TLPageBlockVideo) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockVideo,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockVideo) SetAutoplay(v bool) { m.Data2.Autoplay = v }
func (m *TLPageBlockVideo) GetAutoplay() bool { return m.Data2.Autoplay }

func (m *TLPageBlockVideo) SetLoop(v bool) { m.Data2.Loop = v }
func (m *TLPageBlockVideo) GetLoop() bool { return m.Data2.Loop }

func (m *TLPageBlockVideo) SetVideoId(v int64) { m.Data2.VideoId = v }
func (m *TLPageBlockVideo) GetVideoId() int64 { return m.Data2.VideoId }

func (m *TLPageBlockVideo) SetCaption(v *RichText) { m.Data2.Caption_8 = v }
func (m *TLPageBlockVideo) GetCaption() *RichText { return m.Data2.Caption_8 }


func NewTLPageBlockVideo() * TLPageBlockVideo {
    return &TLPageBlockVideo{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockVideo) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockVideo))

    // flags
    var flags uint32 = 0
    if m.GetAutoplay() == true { flags |= 1 << 0 }
    if m.GetLoop() == true { flags |= 1 << 1 }
	x.UInt(flags)

    
    
    x.Long(m.GetVideoId())
    x.Bytes(m.GetCaption().Encode())

    return x.buf
}

func (m* TLPageBlockVideo) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetAutoplay(true) }
    if (flags & (1 << 1)) != 0 { m.SetLoop(true) }
    m.SetVideoId(dbuf.Long())
    m5 := &RichText{}
    m5.Decode(dbuf)
    m.SetCaption(m5)

    return dbuf.err
}
// pageBlockCover#39f23300 cover:PageBlock = PageBlock;
func (m *TLPageBlockCover) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockCover,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockCover) SetCover(v *PageBlock) { m.Data2.Cover = v }
func (m *TLPageBlockCover) GetCover() *PageBlock { return m.Data2.Cover }


func NewTLPageBlockCover() * TLPageBlockCover {
    return &TLPageBlockCover{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockCover) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockCover))

    x.Bytes(m.GetCover().Encode())

    return x.buf
}

func (m* TLPageBlockCover) Decode(dbuf *DecodeBuf) error {
    m1 := &PageBlock{}
    m1.Decode(dbuf)
    m.SetCover(m1)

    return dbuf.err
}
// pageBlockEmbed#cde200d1 flags:# full_width:flags.0?true allow_scrolling:flags.3?true url:flags.1?string html:flags.2?string poster_photo_id:flags.4?long w:int h:int caption:RichText = PageBlock;
func (m *TLPageBlockEmbed) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockEmbed,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockEmbed) SetFullWidth(v bool) { m.Data2.FullWidth = v }
func (m *TLPageBlockEmbed) GetFullWidth() bool { return m.Data2.FullWidth }

func (m *TLPageBlockEmbed) SetAllowScrolling(v bool) { m.Data2.AllowScrolling = v }
func (m *TLPageBlockEmbed) GetAllowScrolling() bool { return m.Data2.AllowScrolling }

func (m *TLPageBlockEmbed) SetUrl(v string) { m.Data2.Url = v }
func (m *TLPageBlockEmbed) GetUrl() string { return m.Data2.Url }

func (m *TLPageBlockEmbed) SetHtml(v string) { m.Data2.Html = v }
func (m *TLPageBlockEmbed) GetHtml() string { return m.Data2.Html }

func (m *TLPageBlockEmbed) SetPosterPhotoId(v int64) { m.Data2.PosterPhotoId = v }
func (m *TLPageBlockEmbed) GetPosterPhotoId() int64 { return m.Data2.PosterPhotoId }

func (m *TLPageBlockEmbed) SetW(v int32) { m.Data2.W = v }
func (m *TLPageBlockEmbed) GetW() int32 { return m.Data2.W }

func (m *TLPageBlockEmbed) SetH(v int32) { m.Data2.H = v }
func (m *TLPageBlockEmbed) GetH() int32 { return m.Data2.H }

func (m *TLPageBlockEmbed) SetCaption(v *RichText) { m.Data2.Caption_8 = v }
func (m *TLPageBlockEmbed) GetCaption() *RichText { return m.Data2.Caption_8 }


func NewTLPageBlockEmbed() * TLPageBlockEmbed {
    return &TLPageBlockEmbed{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockEmbed) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockEmbed))

    // flags
    var flags uint32 = 0
    if m.GetFullWidth() == true { flags |= 1 << 0 }
    if m.GetAllowScrolling() == true { flags |= 1 << 3 }
    if m.GetUrl() != "" { flags |= 1 << 1 }
    if m.GetHtml() != "" { flags |= 1 << 2 }
    if m.GetPosterPhotoId() != 0 { flags |= 1 << 4 }
	x.UInt(flags)

    
    
    if (flags & (1 << 1)) != 0 { x.String(m.GetUrl()) }
    if (flags & (1 << 2)) != 0 { x.String(m.GetHtml()) }
    if (flags & (1 << 4)) != 0 { x.Long(m.GetPosterPhotoId()) }
    x.Int(m.GetW())
    x.Int(m.GetH())
    x.Bytes(m.GetCaption().Encode())

    return x.buf
}

func (m* TLPageBlockEmbed) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetFullWidth(true) }
    if (flags & (1 << 3)) != 0 { m.SetAllowScrolling(true) }
    if (flags & (1 << 1)) != 0 { m.SetUrl(dbuf.String()) }
    if (flags & (1 << 2)) != 0 { m.SetHtml(dbuf.String()) }
    if (flags & (1 << 4)) != 0 { m.SetPosterPhotoId(dbuf.Long()) }
    m.SetW(dbuf.Int())
    m.SetH(dbuf.Int())
    m9 := &RichText{}
    m9.Decode(dbuf)
    m.SetCaption(m9)

    return dbuf.err
}
// pageBlockEmbedPost#292c7be9 url:string webpage_id:long author_photo_id:long author:string date:int blocks:Vector<PageBlock> caption:RichText = PageBlock;
func (m *TLPageBlockEmbedPost) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockEmbedPost,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockEmbedPost) SetUrl(v string) { m.Data2.Url = v }
func (m *TLPageBlockEmbedPost) GetUrl() string { return m.Data2.Url }

func (m *TLPageBlockEmbedPost) SetWebpageId(v int64) { m.Data2.WebpageId = v }
func (m *TLPageBlockEmbedPost) GetWebpageId() int64 { return m.Data2.WebpageId }

func (m *TLPageBlockEmbedPost) SetAuthorPhotoId(v int64) { m.Data2.AuthorPhotoId = v }
func (m *TLPageBlockEmbedPost) GetAuthorPhotoId() int64 { return m.Data2.AuthorPhotoId }

func (m *TLPageBlockEmbedPost) SetAuthor(v string) { m.Data2.Author_23 = v }
func (m *TLPageBlockEmbedPost) GetAuthor() string { return m.Data2.Author_23 }

func (m *TLPageBlockEmbedPost) SetDate(v int32) { m.Data2.Date = v }
func (m *TLPageBlockEmbedPost) GetDate() int32 { return m.Data2.Date }

func (m *TLPageBlockEmbedPost) SetBlocks(v []*PageBlock) { m.Data2.Blocks = v }
func (m *TLPageBlockEmbedPost) GetBlocks() []*PageBlock { return m.Data2.Blocks }

func (m *TLPageBlockEmbedPost) SetCaption(v *RichText) { m.Data2.Caption_8 = v }
func (m *TLPageBlockEmbedPost) GetCaption() *RichText { return m.Data2.Caption_8 }


func NewTLPageBlockEmbedPost() * TLPageBlockEmbedPost {
    return &TLPageBlockEmbedPost{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockEmbedPost) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockEmbedPost))

    x.String(m.GetUrl())
    x.Long(m.GetWebpageId())
    x.Long(m.GetAuthorPhotoId())
    x.String(m.GetAuthor())
    x.Int(m.GetDate())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetBlocks())))
for _, v := range m.GetBlocks() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Bytes(m.GetCaption().Encode())

    return x.buf
}

func (m* TLPageBlockEmbedPost) Decode(dbuf *DecodeBuf) error {
    m.SetUrl(dbuf.String())
    m.SetWebpageId(dbuf.Long())
    m.SetAuthorPhotoId(dbuf.Long())
    m.SetAuthor(dbuf.String())
    m.SetDate(dbuf.Int())
    c6 := dbuf.Int()
if c6 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 6, c6)
	return dbuf.err
}
l6 := dbuf.Int()
v6 := make([]*PageBlock, l6)
for i := int32(0); i < l6; i++ {
	v6[i] = &PageBlock{}
	v6[i].Decode(dbuf)
}
m.SetBlocks(v6)

    m7 := &RichText{}
    m7.Decode(dbuf)
    m.SetCaption(m7)

    return dbuf.err
}
// pageBlockCollage#8b31c4f items:Vector<PageBlock> caption:RichText = PageBlock;
func (m *TLPageBlockCollage) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockCollage,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockCollage) SetItems(v []*PageBlock) { m.Data2.Items_26 = v }
func (m *TLPageBlockCollage) GetItems() []*PageBlock { return m.Data2.Items_26 }

func (m *TLPageBlockCollage) SetCaption(v *RichText) { m.Data2.Caption_8 = v }
func (m *TLPageBlockCollage) GetCaption() *RichText { return m.Data2.Caption_8 }


func NewTLPageBlockCollage() * TLPageBlockCollage {
    return &TLPageBlockCollage{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockCollage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockCollage))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetItems())))
for _, v := range m.GetItems() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Bytes(m.GetCaption().Encode())

    return x.buf
}

func (m* TLPageBlockCollage) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*PageBlock, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &PageBlock{}
	v1[i].Decode(dbuf)
}
m.SetItems(v1)

    m2 := &RichText{}
    m2.Decode(dbuf)
    m.SetCaption(m2)

    return dbuf.err
}
// pageBlockSlideshow#130c8963 items:Vector<PageBlock> caption:RichText = PageBlock;
func (m *TLPageBlockSlideshow) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockSlideshow,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockSlideshow) SetItems(v []*PageBlock) { m.Data2.Items_26 = v }
func (m *TLPageBlockSlideshow) GetItems() []*PageBlock { return m.Data2.Items_26 }

func (m *TLPageBlockSlideshow) SetCaption(v *RichText) { m.Data2.Caption_8 = v }
func (m *TLPageBlockSlideshow) GetCaption() *RichText { return m.Data2.Caption_8 }


func NewTLPageBlockSlideshow() * TLPageBlockSlideshow {
    return &TLPageBlockSlideshow{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockSlideshow) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockSlideshow))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetItems())))
for _, v := range m.GetItems() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Bytes(m.GetCaption().Encode())

    return x.buf
}

func (m* TLPageBlockSlideshow) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*PageBlock, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &PageBlock{}
	v1[i].Decode(dbuf)
}
m.SetItems(v1)

    m2 := &RichText{}
    m2.Decode(dbuf)
    m.SetCaption(m2)

    return dbuf.err
}
// pageBlockChannel#ef1751b5 channel:Chat = PageBlock;
func (m *TLPageBlockChannel) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockChannel,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockChannel) SetChannel(v *Chat) { m.Data2.Channel = v }
func (m *TLPageBlockChannel) GetChannel() *Chat { return m.Data2.Channel }


func NewTLPageBlockChannel() * TLPageBlockChannel {
    return &TLPageBlockChannel{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockChannel) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockChannel))

    x.Bytes(m.GetChannel().Encode())

    return x.buf
}

func (m* TLPageBlockChannel) Decode(dbuf *DecodeBuf) error {
    m1 := &Chat{}
    m1.Decode(dbuf)
    m.SetChannel(m1)

    return dbuf.err
}
// pageBlockAudio#31b81a7f audio_id:long caption:RichText = PageBlock;
func (m *TLPageBlockAudio) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockAudio,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockAudio) SetAudioId(v int64) { m.Data2.AudioId = v }
func (m *TLPageBlockAudio) GetAudioId() int64 { return m.Data2.AudioId }

func (m *TLPageBlockAudio) SetCaption(v *RichText) { m.Data2.Caption_8 = v }
func (m *TLPageBlockAudio) GetCaption() *RichText { return m.Data2.Caption_8 }


func NewTLPageBlockAudio() * TLPageBlockAudio {
    return &TLPageBlockAudio{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockAudio) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockAudio))

    x.Long(m.GetAudioId())
    x.Bytes(m.GetCaption().Encode())

    return x.buf
}

func (m* TLPageBlockAudio) Decode(dbuf *DecodeBuf) error {
    m.SetAudioId(dbuf.Long())
    m2 := &RichText{}
    m2.Decode(dbuf)
    m.SetCaption(m2)

    return dbuf.err
}
// pageBlockList#e4e88011 items:Vector<PageListItem> = PageBlock;
func (m *TLPageBlockList114) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockList114,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockList114) SetItems(v []*PageListItem) { m.Data2.Items_29 = v }
func (m *TLPageBlockList114) GetItems() []*PageListItem { return m.Data2.Items_29 }


func NewTLPageBlockList114() * TLPageBlockList114 {
    return &TLPageBlockList114{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockList114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockList114))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetItems())))
for _, v := range m.GetItems() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLPageBlockList114) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*PageListItem, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &PageListItem{}
	v1[i].Decode(dbuf)
}
m.SetItems(v1)


    return dbuf.err
}
// pageBlockPhoto#1759c560 flags:# photo_id:long caption:PageCaption url:flags.0?string webpage_id:flags.0?long = PageBlock;
func (m *TLPageBlockPhoto114) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockPhoto114,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockPhoto114) SetPhotoId(v int64) { m.Data2.PhotoId = v }
func (m *TLPageBlockPhoto114) GetPhotoId() int64 { return m.Data2.PhotoId }

func (m *TLPageBlockPhoto114) SetCaption(v *PageCaption) { m.Data2.Caption_30 = v }
func (m *TLPageBlockPhoto114) GetCaption() *PageCaption { return m.Data2.Caption_30 }

func (m *TLPageBlockPhoto114) SetUrl(v string) { m.Data2.Url = v }
func (m *TLPageBlockPhoto114) GetUrl() string { return m.Data2.Url }

func (m *TLPageBlockPhoto114) SetWebpageId(v int64) { m.Data2.WebpageId = v }
func (m *TLPageBlockPhoto114) GetWebpageId() int64 { return m.Data2.WebpageId }


func NewTLPageBlockPhoto114() * TLPageBlockPhoto114 {
    return &TLPageBlockPhoto114{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockPhoto114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockPhoto114))

    // flags
    var flags uint32 = 0
    if m.GetUrl() != "" { flags |= 1 << 0 }
    if m.GetWebpageId() != 0 { flags |= 1 << 0 }
	x.UInt(flags)

    x.Long(m.GetPhotoId())
    x.Bytes(m.GetCaption().Encode())
    if (flags & (1 << 0)) != 0 { x.String(m.GetUrl()) }
    if (flags & (1 << 0)) != 0 { x.Long(m.GetWebpageId()) }

    return x.buf
}

func (m* TLPageBlockPhoto114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    m.SetPhotoId(dbuf.Long())
    m3 := &PageCaption{}
    m3.Decode(dbuf)
    m.SetCaption(m3)
    if (flags & (1 << 0)) != 0 { m.SetUrl(dbuf.String()) }
    if (flags & (1 << 0)) != 0 { m.SetWebpageId(dbuf.Long()) }

    return dbuf.err
}
// pageBlockVideo#7c8fe7b6 flags:# autoplay:flags.0?true loop:flags.1?true video_id:long caption:PageCaption = PageBlock;
func (m *TLPageBlockVideo114) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockVideo114,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockVideo114) SetAutoplay(v bool) { m.Data2.Autoplay = v }
func (m *TLPageBlockVideo114) GetAutoplay() bool { return m.Data2.Autoplay }

func (m *TLPageBlockVideo114) SetLoop(v bool) { m.Data2.Loop = v }
func (m *TLPageBlockVideo114) GetLoop() bool { return m.Data2.Loop }

func (m *TLPageBlockVideo114) SetVideoId(v int64) { m.Data2.VideoId = v }
func (m *TLPageBlockVideo114) GetVideoId() int64 { return m.Data2.VideoId }

func (m *TLPageBlockVideo114) SetCaption(v *PageCaption) { m.Data2.Caption_30 = v }
func (m *TLPageBlockVideo114) GetCaption() *PageCaption { return m.Data2.Caption_30 }


func NewTLPageBlockVideo114() * TLPageBlockVideo114 {
    return &TLPageBlockVideo114{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockVideo114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockVideo114))

    // flags
    var flags uint32 = 0
    if m.GetAutoplay() == true { flags |= 1 << 0 }
    if m.GetLoop() == true { flags |= 1 << 1 }
	x.UInt(flags)

    
    
    x.Long(m.GetVideoId())
    x.Bytes(m.GetCaption().Encode())

    return x.buf
}

func (m* TLPageBlockVideo114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetAutoplay(true) }
    if (flags & (1 << 1)) != 0 { m.SetLoop(true) }
    m.SetVideoId(dbuf.Long())
    m5 := &PageCaption{}
    m5.Decode(dbuf)
    m.SetCaption(m5)

    return dbuf.err
}
// pageBlockEmbed#a8718dc5 flags:# full_width:flags.0?true allow_scrolling:flags.3?true url:flags.1?string html:flags.2?string poster_photo_id:flags.4?long w:flags.5?int h:flags.5?int caption:PageCaption = PageBlock;
func (m *TLPageBlockEmbed114) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockEmbed114,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockEmbed114) SetFullWidth(v bool) { m.Data2.FullWidth = v }
func (m *TLPageBlockEmbed114) GetFullWidth() bool { return m.Data2.FullWidth }

func (m *TLPageBlockEmbed114) SetAllowScrolling(v bool) { m.Data2.AllowScrolling = v }
func (m *TLPageBlockEmbed114) GetAllowScrolling() bool { return m.Data2.AllowScrolling }

func (m *TLPageBlockEmbed114) SetUrl(v string) { m.Data2.Url = v }
func (m *TLPageBlockEmbed114) GetUrl() string { return m.Data2.Url }

func (m *TLPageBlockEmbed114) SetHtml(v string) { m.Data2.Html = v }
func (m *TLPageBlockEmbed114) GetHtml() string { return m.Data2.Html }

func (m *TLPageBlockEmbed114) SetPosterPhotoId(v int64) { m.Data2.PosterPhotoId = v }
func (m *TLPageBlockEmbed114) GetPosterPhotoId() int64 { return m.Data2.PosterPhotoId }

func (m *TLPageBlockEmbed114) SetW(v int32) { m.Data2.W = v }
func (m *TLPageBlockEmbed114) GetW() int32 { return m.Data2.W }

func (m *TLPageBlockEmbed114) SetH(v int32) { m.Data2.H = v }
func (m *TLPageBlockEmbed114) GetH() int32 { return m.Data2.H }

func (m *TLPageBlockEmbed114) SetCaption(v *PageCaption) { m.Data2.Caption_30 = v }
func (m *TLPageBlockEmbed114) GetCaption() *PageCaption { return m.Data2.Caption_30 }


func NewTLPageBlockEmbed114() * TLPageBlockEmbed114 {
    return &TLPageBlockEmbed114{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockEmbed114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockEmbed114))

    // flags
    var flags uint32 = 0
    if m.GetFullWidth() == true { flags |= 1 << 0 }
    if m.GetAllowScrolling() == true { flags |= 1 << 3 }
    if m.GetUrl() != "" { flags |= 1 << 1 }
    if m.GetHtml() != "" { flags |= 1 << 2 }
    if m.GetPosterPhotoId() != 0 { flags |= 1 << 4 }
    if m.GetW() != 0 { flags |= 1 << 5 }
    if m.GetH() != 0 { flags |= 1 << 5 }
	x.UInt(flags)

    
    
    if (flags & (1 << 1)) != 0 { x.String(m.GetUrl()) }
    if (flags & (1 << 2)) != 0 { x.String(m.GetHtml()) }
    if (flags & (1 << 4)) != 0 { x.Long(m.GetPosterPhotoId()) }
    if (flags & (1 << 5)) != 0 { x.Int(m.GetW()) }
    if (flags & (1 << 5)) != 0 { x.Int(m.GetH()) }
    x.Bytes(m.GetCaption().Encode())

    return x.buf
}

func (m* TLPageBlockEmbed114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetFullWidth(true) }
    if (flags & (1 << 3)) != 0 { m.SetAllowScrolling(true) }
    if (flags & (1 << 1)) != 0 { m.SetUrl(dbuf.String()) }
    if (flags & (1 << 2)) != 0 { m.SetHtml(dbuf.String()) }
    if (flags & (1 << 4)) != 0 { m.SetPosterPhotoId(dbuf.Long()) }
    if (flags & (1 << 5)) != 0 { m.SetW(dbuf.Int()) }
    if (flags & (1 << 5)) != 0 { m.SetH(dbuf.Int()) }
    m9 := &PageCaption{}
    m9.Decode(dbuf)
    m.SetCaption(m9)

    return dbuf.err
}
// pageBlockEmbedPost#f259a80b url:string webpage_id:long author_photo_id:long author:string date:int blocks:Vector<PageBlock> caption:PageCaption = PageBlock;
func (m *TLPageBlockEmbedPost114) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockEmbedPost114,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockEmbedPost114) SetUrl(v string) { m.Data2.Url = v }
func (m *TLPageBlockEmbedPost114) GetUrl() string { return m.Data2.Url }

func (m *TLPageBlockEmbedPost114) SetWebpageId(v int64) { m.Data2.WebpageId = v }
func (m *TLPageBlockEmbedPost114) GetWebpageId() int64 { return m.Data2.WebpageId }

func (m *TLPageBlockEmbedPost114) SetAuthorPhotoId(v int64) { m.Data2.AuthorPhotoId = v }
func (m *TLPageBlockEmbedPost114) GetAuthorPhotoId() int64 { return m.Data2.AuthorPhotoId }

func (m *TLPageBlockEmbedPost114) SetAuthor(v string) { m.Data2.Author_23 = v }
func (m *TLPageBlockEmbedPost114) GetAuthor() string { return m.Data2.Author_23 }

func (m *TLPageBlockEmbedPost114) SetDate(v int32) { m.Data2.Date = v }
func (m *TLPageBlockEmbedPost114) GetDate() int32 { return m.Data2.Date }

func (m *TLPageBlockEmbedPost114) SetBlocks(v []*PageBlock) { m.Data2.Blocks = v }
func (m *TLPageBlockEmbedPost114) GetBlocks() []*PageBlock { return m.Data2.Blocks }

func (m *TLPageBlockEmbedPost114) SetCaption(v *PageCaption) { m.Data2.Caption_30 = v }
func (m *TLPageBlockEmbedPost114) GetCaption() *PageCaption { return m.Data2.Caption_30 }


func NewTLPageBlockEmbedPost114() * TLPageBlockEmbedPost114 {
    return &TLPageBlockEmbedPost114{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockEmbedPost114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockEmbedPost114))

    x.String(m.GetUrl())
    x.Long(m.GetWebpageId())
    x.Long(m.GetAuthorPhotoId())
    x.String(m.GetAuthor())
    x.Int(m.GetDate())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetBlocks())))
for _, v := range m.GetBlocks() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Bytes(m.GetCaption().Encode())

    return x.buf
}

func (m* TLPageBlockEmbedPost114) Decode(dbuf *DecodeBuf) error {
    m.SetUrl(dbuf.String())
    m.SetWebpageId(dbuf.Long())
    m.SetAuthorPhotoId(dbuf.Long())
    m.SetAuthor(dbuf.String())
    m.SetDate(dbuf.Int())
    c6 := dbuf.Int()
if c6 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 6, c6)
	return dbuf.err
}
l6 := dbuf.Int()
v6 := make([]*PageBlock, l6)
for i := int32(0); i < l6; i++ {
	v6[i] = &PageBlock{}
	v6[i].Decode(dbuf)
}
m.SetBlocks(v6)

    m7 := &PageCaption{}
    m7.Decode(dbuf)
    m.SetCaption(m7)

    return dbuf.err
}
// pageBlockCollage#65a0fa4d items:Vector<PageBlock> caption:PageCaption = PageBlock;
func (m *TLPageBlockCollage114) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockCollage114,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockCollage114) SetItems(v []*PageBlock) { m.Data2.Items_26 = v }
func (m *TLPageBlockCollage114) GetItems() []*PageBlock { return m.Data2.Items_26 }

func (m *TLPageBlockCollage114) SetCaption(v *PageCaption) { m.Data2.Caption_30 = v }
func (m *TLPageBlockCollage114) GetCaption() *PageCaption { return m.Data2.Caption_30 }


func NewTLPageBlockCollage114() * TLPageBlockCollage114 {
    return &TLPageBlockCollage114{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockCollage114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockCollage114))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetItems())))
for _, v := range m.GetItems() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Bytes(m.GetCaption().Encode())

    return x.buf
}

func (m* TLPageBlockCollage114) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*PageBlock, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &PageBlock{}
	v1[i].Decode(dbuf)
}
m.SetItems(v1)

    m2 := &PageCaption{}
    m2.Decode(dbuf)
    m.SetCaption(m2)

    return dbuf.err
}
// pageBlockSlideshow#31f9590 items:Vector<PageBlock> caption:PageCaption = PageBlock;
func (m *TLPageBlockSlideshow114) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockSlideshow114,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockSlideshow114) SetItems(v []*PageBlock) { m.Data2.Items_26 = v }
func (m *TLPageBlockSlideshow114) GetItems() []*PageBlock { return m.Data2.Items_26 }

func (m *TLPageBlockSlideshow114) SetCaption(v *PageCaption) { m.Data2.Caption_30 = v }
func (m *TLPageBlockSlideshow114) GetCaption() *PageCaption { return m.Data2.Caption_30 }


func NewTLPageBlockSlideshow114() * TLPageBlockSlideshow114 {
    return &TLPageBlockSlideshow114{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockSlideshow114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockSlideshow114))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetItems())))
for _, v := range m.GetItems() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Bytes(m.GetCaption().Encode())

    return x.buf
}

func (m* TLPageBlockSlideshow114) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*PageBlock, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &PageBlock{}
	v1[i].Decode(dbuf)
}
m.SetItems(v1)

    m2 := &PageCaption{}
    m2.Decode(dbuf)
    m.SetCaption(m2)

    return dbuf.err
}
// pageBlockAudio#804361ea audio_id:long caption:PageCaption = PageBlock;
func (m *TLPageBlockAudio114) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockAudio114,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockAudio114) SetAudioId(v int64) { m.Data2.AudioId = v }
func (m *TLPageBlockAudio114) GetAudioId() int64 { return m.Data2.AudioId }

func (m *TLPageBlockAudio114) SetCaption(v *PageCaption) { m.Data2.Caption_30 = v }
func (m *TLPageBlockAudio114) GetCaption() *PageCaption { return m.Data2.Caption_30 }


func NewTLPageBlockAudio114() * TLPageBlockAudio114 {
    return &TLPageBlockAudio114{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockAudio114) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockAudio114))

    x.Long(m.GetAudioId())
    x.Bytes(m.GetCaption().Encode())

    return x.buf
}

func (m* TLPageBlockAudio114) Decode(dbuf *DecodeBuf) error {
    m.SetAudioId(dbuf.Long())
    m2 := &PageCaption{}
    m2.Decode(dbuf)
    m.SetCaption(m2)

    return dbuf.err
}
// pageBlockKicker#1e148390 text:RichText = PageBlock;
func (m *TLPageBlockKicker) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockKicker,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockKicker) SetText(v *RichText) { m.Data2.Text = v }
func (m *TLPageBlockKicker) GetText() *RichText { return m.Data2.Text }


func NewTLPageBlockKicker() * TLPageBlockKicker {
    return &TLPageBlockKicker{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockKicker) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockKicker))

    x.Bytes(m.GetText().Encode())

    return x.buf
}

func (m* TLPageBlockKicker) Decode(dbuf *DecodeBuf) error {
    m1 := &RichText{}
    m1.Decode(dbuf)
    m.SetText(m1)

    return dbuf.err
}
// pageBlockTable#bf4dea82 flags:# bordered:flags.0?true striped:flags.1?true title:RichText rows:Vector<PageTableRow> = PageBlock;
func (m *TLPageBlockTable) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockTable,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockTable) SetBordered(v bool) { m.Data2.Bordered = v }
func (m *TLPageBlockTable) GetBordered() bool { return m.Data2.Bordered }

func (m *TLPageBlockTable) SetStriped(v bool) { m.Data2.Striped = v }
func (m *TLPageBlockTable) GetStriped() bool { return m.Data2.Striped }

func (m *TLPageBlockTable) SetTitle(v *RichText) { m.Data2.Title = v }
func (m *TLPageBlockTable) GetTitle() *RichText { return m.Data2.Title }

func (m *TLPageBlockTable) SetRows(v []*PageTableRow) { m.Data2.Rows = v }
func (m *TLPageBlockTable) GetRows() []*PageTableRow { return m.Data2.Rows }


func NewTLPageBlockTable() * TLPageBlockTable {
    return &TLPageBlockTable{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockTable) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockTable))

    // flags
    var flags uint32 = 0
    if m.GetBordered() == true { flags |= 1 << 0 }
    if m.GetStriped() == true { flags |= 1 << 1 }
	x.UInt(flags)

    
    
    x.Bytes(m.GetTitle().Encode())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetRows())))
for _, v := range m.GetRows() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLPageBlockTable) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetBordered(true) }
    if (flags & (1 << 1)) != 0 { m.SetStriped(true) }
    m4 := &RichText{}
    m4.Decode(dbuf)
    m.SetTitle(m4)
    c5 := dbuf.Int()
if c5 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 5, c5)
	return dbuf.err
}
l5 := dbuf.Int()
v5 := make([]*PageTableRow, l5)
for i := int32(0); i < l5; i++ {
	v5[i] = &PageTableRow{}
	v5[i].Decode(dbuf)
}
m.SetRows(v5)


    return dbuf.err
}
// pageBlockOrderedList#9a8ae1e1 items:Vector<PageListOrderedItem> = PageBlock;
func (m *TLPageBlockOrderedList) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockOrderedList,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockOrderedList) SetItems(v []*PageListOrderedItem) { m.Data2.Items_35 = v }
func (m *TLPageBlockOrderedList) GetItems() []*PageListOrderedItem { return m.Data2.Items_35 }


func NewTLPageBlockOrderedList() * TLPageBlockOrderedList {
    return &TLPageBlockOrderedList{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockOrderedList) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockOrderedList))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetItems())))
for _, v := range m.GetItems() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLPageBlockOrderedList) Decode(dbuf *DecodeBuf) error {
    c1 := dbuf.Int()
if c1 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 1, c1)
	return dbuf.err
}
l1 := dbuf.Int()
v1 := make([]*PageListOrderedItem, l1)
for i := int32(0); i < l1; i++ {
	v1[i] = &PageListOrderedItem{}
	v1[i].Decode(dbuf)
}
m.SetItems(v1)


    return dbuf.err
}
// pageBlockDetails#76768bed flags:# open:flags.0?true blocks:Vector<PageBlock> title:RichText = PageBlock;
func (m *TLPageBlockDetails) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockDetails,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockDetails) SetOpen(v bool) { m.Data2.Open = v }
func (m *TLPageBlockDetails) GetOpen() bool { return m.Data2.Open }

func (m *TLPageBlockDetails) SetBlocks(v []*PageBlock) { m.Data2.Blocks = v }
func (m *TLPageBlockDetails) GetBlocks() []*PageBlock { return m.Data2.Blocks }

func (m *TLPageBlockDetails) SetTitle(v *RichText) { m.Data2.Title = v }
func (m *TLPageBlockDetails) GetTitle() *RichText { return m.Data2.Title }


func NewTLPageBlockDetails() * TLPageBlockDetails {
    return &TLPageBlockDetails{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockDetails) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockDetails))

    // flags
    var flags uint32 = 0
    if m.GetOpen() == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetBlocks())))
for _, v := range m.GetBlocks() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Bytes(m.GetTitle().Encode())

    return x.buf
}

func (m* TLPageBlockDetails) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags 
    if (flags & (1 << 0)) != 0 { m.SetOpen(true) }
    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*PageBlock, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &PageBlock{}
	v3[i].Decode(dbuf)
}
m.SetBlocks(v3)

    m4 := &RichText{}
    m4.Decode(dbuf)
    m.SetTitle(m4)

    return dbuf.err
}
// pageBlockRelatedArticles#16115a96 title:RichText articles:Vector<PageRelatedArticle> = PageBlock;
func (m *TLPageBlockRelatedArticles) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockRelatedArticles,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockRelatedArticles) SetTitle(v *RichText) { m.Data2.Title = v }
func (m *TLPageBlockRelatedArticles) GetTitle() *RichText { return m.Data2.Title }

func (m *TLPageBlockRelatedArticles) SetArticles(v []*PageRelatedArticle) { m.Data2.Articles = v }
func (m *TLPageBlockRelatedArticles) GetArticles() []*PageRelatedArticle { return m.Data2.Articles }


func NewTLPageBlockRelatedArticles() * TLPageBlockRelatedArticles {
    return &TLPageBlockRelatedArticles{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockRelatedArticles) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockRelatedArticles))

    x.Bytes(m.GetTitle().Encode())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetArticles())))
for _, v := range m.GetArticles() {
  x.buf = append(x.buf, (*v).Encode()...)
}

    return x.buf
}

func (m* TLPageBlockRelatedArticles) Decode(dbuf *DecodeBuf) error {
    m1 := &RichText{}
    m1.Decode(dbuf)
    m.SetTitle(m1)
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*PageRelatedArticle, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &PageRelatedArticle{}
	v2[i].Decode(dbuf)
}
m.SetArticles(v2)


    return dbuf.err
}
// pageBlockMap#a44f3ef6 geo:GeoPoint zoom:int w:int h:int caption:PageCaption = PageBlock;
func (m *TLPageBlockMap) To_PageBlock() *PageBlock {
    return &PageBlock{
        Constructor: TLConstructor_CRC32_pageBlockMap,
        Data2: m.Data2,
    }
}


func (m *TLPageBlockMap) SetGeo(v *GeoPoint) { m.Data2.Geo = v }
func (m *TLPageBlockMap) GetGeo() *GeoPoint { return m.Data2.Geo }

func (m *TLPageBlockMap) SetZoom(v int32) { m.Data2.Zoom = v }
func (m *TLPageBlockMap) GetZoom() int32 { return m.Data2.Zoom }

func (m *TLPageBlockMap) SetW(v int32) { m.Data2.W = v }
func (m *TLPageBlockMap) GetW() int32 { return m.Data2.W }

func (m *TLPageBlockMap) SetH(v int32) { m.Data2.H = v }
func (m *TLPageBlockMap) GetH() int32 { return m.Data2.H }

func (m *TLPageBlockMap) SetCaption(v *PageCaption) { m.Data2.Caption_30 = v }
func (m *TLPageBlockMap) GetCaption() *PageCaption { return m.Data2.Caption_30 }


func NewTLPageBlockMap() * TLPageBlockMap {
    return &TLPageBlockMap{ Data2: &PageBlock_Data{} }
}

func (m* TLPageBlockMap) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_pageBlockMap))

    x.Bytes(m.GetGeo().Encode())
    x.Int(m.GetZoom())
    x.Int(m.GetW())
    x.Int(m.GetH())
    x.Bytes(m.GetCaption().Encode())

    return x.buf
}

func (m* TLPageBlockMap) Decode(dbuf *DecodeBuf) error {
    m1 := &GeoPoint{}
    m1.Decode(dbuf)
    m.SetGeo(m1)
    m.SetZoom(dbuf.Int())
    m.SetW(dbuf.Int())
    m.SetH(dbuf.Int())
    m5 := &PageCaption{}
    m5.Decode(dbuf)
    m.SetCaption(m5)

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// Scheme <--
//  + TL_SchemeNotModified
//  + TL_Scheme
//

func (m *Scheme) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_schemeNotModified:
        t := m.To_SchemeNotModified()
        return t.Encode()
    case TLConstructor_CRC32_scheme:
        t := m.To_Scheme()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *Scheme) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_schemeNotModified:
        m2 := &TLSchemeNotModified{&Scheme_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2
    case TLConstructor_CRC32_scheme:
        m2 := &TLScheme{&Scheme_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// schemeNotModified#263c9c58 = Scheme;
func (m *Scheme) To_SchemeNotModified() *TLSchemeNotModified {
    return &TLSchemeNotModified{
        Data2: m.Data2,
    }
}

// scheme#4e6ef65e scheme_raw:string types:Vector<SchemeType> methods:Vector<SchemeMethod> version:int = Scheme;
func (m *Scheme) To_Scheme() *TLScheme {
    return &TLScheme{
        Data2: m.Data2,
    }
}



// schemeNotModified#263c9c58 = Scheme;
func (m *TLSchemeNotModified) To_Scheme() *Scheme {
    return &Scheme{
        Constructor: TLConstructor_CRC32_schemeNotModified,
        Data2: m.Data2,
    }
}



func NewTLSchemeNotModified() * TLSchemeNotModified {
    return &TLSchemeNotModified{ Data2: &Scheme_Data{} }
}

func (m* TLSchemeNotModified) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_schemeNotModified))


    return x.buf
}

func (m* TLSchemeNotModified) Decode(dbuf *DecodeBuf) error {

    return dbuf.err
}
// scheme#4e6ef65e scheme_raw:string types:Vector<SchemeType> methods:Vector<SchemeMethod> version:int = Scheme;
func (m *TLScheme) To_Scheme() *Scheme {
    return &Scheme{
        Constructor: TLConstructor_CRC32_scheme,
        Data2: m.Data2,
    }
}


func (m *TLScheme) SetSchemeRaw(v string) { m.Data2.SchemeRaw = v }
func (m *TLScheme) GetSchemeRaw() string { return m.Data2.SchemeRaw }

func (m *TLScheme) SetTypes(v []*SchemeType) { m.Data2.Types = v }
func (m *TLScheme) GetTypes() []*SchemeType { return m.Data2.Types }

func (m *TLScheme) SetMethods(v []*SchemeMethod) { m.Data2.Methods = v }
func (m *TLScheme) GetMethods() []*SchemeMethod { return m.Data2.Methods }

func (m *TLScheme) SetVersion(v int32) { m.Data2.Version = v }
func (m *TLScheme) GetVersion() int32 { return m.Data2.Version }


func NewTLScheme() * TLScheme {
    return &TLScheme{ Data2: &Scheme_Data{} }
}

func (m* TLScheme) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_scheme))

    x.String(m.GetSchemeRaw())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetTypes())))
for _, v := range m.GetTypes() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.GetMethods())))
for _, v := range m.GetMethods() {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(m.GetVersion())

    return x.buf
}

func (m* TLScheme) Decode(dbuf *DecodeBuf) error {
    m.SetSchemeRaw(dbuf.String())
    c2 := dbuf.Int()
if c2 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 2, c2)
	return dbuf.err
}
l2 := dbuf.Int()
v2 := make([]*SchemeType, l2)
for i := int32(0); i < l2; i++ {
	v2[i] = &SchemeType{}
	v2[i].Decode(dbuf)
}
m.SetTypes(v2)

    c3 := dbuf.Int()
if c3 != int32(TLConstructor_CRC32_vector) {
	dbuf.err = fmt.Errorf("Invalid CRC32_vector, c%d: %d", 3, c3)
	return dbuf.err
}
l3 := dbuf.Int()
v3 := make([]*SchemeMethod, l3)
for i := int32(0); i < l3; i++ {
	v3[i] = &SchemeMethod{}
	v3[i].Decode(dbuf)
}
m.SetMethods(v3)

    m.SetVersion(dbuf.Int())

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// WinkConfig <--
//  + TL_WinkConfig
//

func (m *WinkConfig) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_winkConfig:
        t := m.To_WinkConfig()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *WinkConfig) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_winkConfig:
        m2 := &TLWinkConfig{&WinkConfig_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// winkConfig#1bdefe9 new_channel:Bool super_group:Bool = winkConfig;
func (m *WinkConfig) To_WinkConfig() *TLWinkConfig {
    return &TLWinkConfig{
        Data2: m.Data2,
    }
}



// winkConfig#1bdefe9 new_channel:Bool super_group:Bool = winkConfig;
func (m *TLWinkConfig) To_WinkConfig() *WinkConfig {
    return &WinkConfig{
        Constructor: TLConstructor_CRC32_winkConfig,
        Data2: m.Data2,
    }
}


func (m *TLWinkConfig) SetNewChannel(v *Bool) { m.Data2.NewChannel = v }
func (m *TLWinkConfig) GetNewChannel() *Bool { return m.Data2.NewChannel }

func (m *TLWinkConfig) SetSuperGroup(v *Bool) { m.Data2.SuperGroup = v }
func (m *TLWinkConfig) GetSuperGroup() *Bool { return m.Data2.SuperGroup }


func NewTLWinkConfig() * TLWinkConfig {
    return &TLWinkConfig{ Data2: &WinkConfig_Data{} }
}

func (m* TLWinkConfig) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_winkConfig))

    x.Bytes(m.GetNewChannel().Encode())
    x.Bytes(m.GetSuperGroup().Encode())

    return x.buf
}

func (m* TLWinkConfig) Decode(dbuf *DecodeBuf) error {
    m1 := &Bool{}
    m1.Decode(dbuf)
    m.SetNewChannel(m1)
    m2 := &Bool{}
    m2.Decode(dbuf)
    m.SetSuperGroup(m2)

    return dbuf.err
}


///////////////////////////////////////////////////////////////////////////////
// CoinMessage <--
//  + TL_CoinMessage
//

func (m *CoinMessage) Encode() []byte {
    switch m.GetConstructor() {
    case TLConstructor_CRC32_coinMessage:
        t := m.To_CoinMessage()
        return t.Encode()

    default:
        logger.LogSugar.Errorf("Constructor error: %v",  m.GetConstructor())
        return nil
    }
}

func (m *CoinMessage) Decode(dbuf *DecodeBuf) error {
    m.Constructor = TLConstructor(dbuf.Int())
    switch m.Constructor {
    case TLConstructor_CRC32_coinMessage:
        m2 := &TLCoinMessage{&CoinMessage_Data{}}
        m2.Decode(dbuf)
        m.Data2 = m2.Data2

    default:
        return fmt.Errorf("Invalid constructorId: %d", int32(m.Constructor))
    }
    return dbuf.err
}

// coinMessage#9703c3e1 jsonstr:string = coinMessage;
func (m *CoinMessage) To_CoinMessage() *TLCoinMessage {
    return &TLCoinMessage{
        Data2: m.Data2,
    }
}



// coinMessage#9703c3e1 jsonstr:string = coinMessage;
func (m *TLCoinMessage) To_CoinMessage() *CoinMessage {
    return &CoinMessage{
        Constructor: TLConstructor_CRC32_coinMessage,
        Data2: m.Data2,
    }
}


func (m *TLCoinMessage) SetJsonstr(v string) { m.Data2.Jsonstr = v }
func (m *TLCoinMessage) GetJsonstr() string { return m.Data2.Jsonstr }


func NewTLCoinMessage() * TLCoinMessage {
    return &TLCoinMessage{ Data2: &CoinMessage_Data{} }
}

func (m* TLCoinMessage) Encode() []byte {
    x := NewEncodeBuf(512)
    x.Int(int32(TLConstructor_CRC32_coinMessage))

    x.String(m.GetJsonstr())

    return x.buf
}

func (m* TLCoinMessage) Decode(dbuf *DecodeBuf) error {
    m.SetJsonstr(dbuf.String())

    return dbuf.err
}




func NewTLReqPq() * TLReqPq {
    return &TLReqPq{}
}

func (m* TLReqPq) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_req_pq))

    x.Bytes(m.Nonce)

return x.buf
}

func (m* TLReqPq) Decode(dbuf *DecodeBuf) error {
    m.Nonce = dbuf.Bytes(16)

return dbuf.err
}

func NewTLReqPqMulti() * TLReqPqMulti {
    return &TLReqPqMulti{}
}

func (m* TLReqPqMulti) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_req_pq_multi))

    x.Bytes(m.Nonce)

return x.buf
}

func (m* TLReqPqMulti) Decode(dbuf *DecodeBuf) error {
    m.Nonce = dbuf.Bytes(16)

return dbuf.err
}

func NewTLReq_DHParams() * TLReq_DHParams {
    return &TLReq_DHParams{}
}

func (m* TLReq_DHParams) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_req_DH_params))

    x.Bytes(m.Nonce)
    x.Bytes(m.ServerNonce)
    x.String(m.P)
    x.String(m.Q)
    x.Long(m.PublicKeyFingerprint)
    x.String(m.EncryptedData)

return x.buf
}

func (m* TLReq_DHParams) Decode(dbuf *DecodeBuf) error {
    m.Nonce = dbuf.Bytes(16)
    m.ServerNonce = dbuf.Bytes(16)
    m.P = dbuf.String()
    m.Q = dbuf.String()
    m.PublicKeyFingerprint = dbuf.Long()
    m.EncryptedData = dbuf.String()

return dbuf.err
}

func NewTLSetClient_DHParams() * TLSetClient_DHParams {
    return &TLSetClient_DHParams{}
}

func (m* TLSetClient_DHParams) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_set_client_DH_params))

    x.Bytes(m.Nonce)
    x.Bytes(m.ServerNonce)
    x.String(m.EncryptedData)

return x.buf
}

func (m* TLSetClient_DHParams) Decode(dbuf *DecodeBuf) error {
    m.Nonce = dbuf.Bytes(16)
    m.ServerNonce = dbuf.Bytes(16)
    m.EncryptedData = dbuf.String()

return dbuf.err
}

func NewTLDestroyAuthKey() * TLDestroyAuthKey {
    return &TLDestroyAuthKey{}
}

func (m* TLDestroyAuthKey) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_destroy_auth_key))


return x.buf
}

func (m* TLDestroyAuthKey) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLRpcDropAnswer() * TLRpcDropAnswer {
    return &TLRpcDropAnswer{}
}

func (m* TLRpcDropAnswer) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_rpc_drop_answer))

    x.Long(m.ReqMsgId)

return x.buf
}

func (m* TLRpcDropAnswer) Decode(dbuf *DecodeBuf) error {
    m.ReqMsgId = dbuf.Long()

return dbuf.err
}

func NewTLGetFutureSalts() * TLGetFutureSalts {
    return &TLGetFutureSalts{}
}

func (m* TLGetFutureSalts) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_get_future_salts))

    x.Int(m.Num)

return x.buf
}

func (m* TLGetFutureSalts) Decode(dbuf *DecodeBuf) error {
    m.Num = dbuf.Int()

return dbuf.err
}

func NewTLPing() * TLPing {
    return &TLPing{}
}

func (m* TLPing) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_ping))

    x.Long(m.PingId)

return x.buf
}

func (m* TLPing) Decode(dbuf *DecodeBuf) error {
    m.PingId = dbuf.Long()

return dbuf.err
}

func NewTLPingDelayDisconnect() * TLPingDelayDisconnect {
    return &TLPingDelayDisconnect{}
}

func (m* TLPingDelayDisconnect) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_ping_delay_disconnect))

    x.Long(m.PingId)
    x.Int(m.DisconnectDelay)

return x.buf
}

func (m* TLPingDelayDisconnect) Decode(dbuf *DecodeBuf) error {
    m.PingId = dbuf.Long()
    m.DisconnectDelay = dbuf.Int()

return dbuf.err
}

func NewTLDestroySession() * TLDestroySession {
    return &TLDestroySession{}
}

func (m* TLDestroySession) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_destroy_session))

    x.Long(m.SessionId)

return x.buf
}

func (m* TLDestroySession) Decode(dbuf *DecodeBuf) error {
    m.SessionId = dbuf.Long()

return dbuf.err
}

func NewTLContestSaveDeveloperInfo() * TLContestSaveDeveloperInfo {
    return &TLContestSaveDeveloperInfo{}
}

func (m* TLContestSaveDeveloperInfo) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_contest_saveDeveloperInfo))

    x.Int(m.VkId)
    x.String(m.Name)
    x.String(m.PhoneNumber)
    x.Int(m.Age)
    x.String(m.City)

return x.buf
}

func (m* TLContestSaveDeveloperInfo) Decode(dbuf *DecodeBuf) error {
    m.VkId = dbuf.Int()
    m.Name = dbuf.String()
    m.PhoneNumber = dbuf.String()
    m.Age = dbuf.Int()
    m.City = dbuf.String()

return dbuf.err
}

func NewTLInvokeAfterMsg() * TLInvokeAfterMsg {
    return &TLInvokeAfterMsg{}
}

func (m* TLInvokeAfterMsg) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_invokeAfterMsg))

    x.Long(m.MsgId)
    x.Bytes(m.Query)

return x.buf
}

func (m* TLInvokeAfterMsg) Decode(dbuf *DecodeBuf) error {
    m.MsgId = dbuf.Long()
    // TODO(@benqi): 暂时这么做，估计还是使用Any类型比较好
o2 := dbuf.Object()
m.Query = o2.Encode()

return dbuf.err
}

func NewTLInvokeAfterMsgs() * TLInvokeAfterMsgs {
    return &TLInvokeAfterMsgs{}
}

func (m* TLInvokeAfterMsgs) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_invokeAfterMsgs))

    x.VectorLong(m.MsgIds)

    x.Bytes(m.Query)

return x.buf
}

func (m* TLInvokeAfterMsgs) Decode(dbuf *DecodeBuf) error {
    m.MsgIds = dbuf.VectorLong()
    // TODO(@benqi): 暂时这么做，估计还是使用Any类型比较好
o2 := dbuf.Object()
m.Query = o2.Encode()

return dbuf.err
}

func NewTLInitConnection() * TLInitConnection {
    return &TLInitConnection{}
}

func (m* TLInitConnection) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_initConnection))

    x.Int(m.ApiId)
    x.String(m.DeviceModel)
    x.String(m.SystemVersion)
    x.String(m.AppVersion)
    x.String(m.SystemLangCode)
    x.String(m.LangPack)
    x.String(m.LangCode)
    x.Bytes(m.Query)

return x.buf
}

func (m* TLInitConnection) Decode(dbuf *DecodeBuf) error {
    m.ApiId = dbuf.Int()
    m.DeviceModel = dbuf.String()
    m.SystemVersion = dbuf.String()
    m.AppVersion = dbuf.String()
    m.SystemLangCode = dbuf.String()
    m.LangPack = dbuf.String()
    m.LangCode = dbuf.String()
    // TODO(@benqi): 暂时这么做，估计还是使用Any类型比较好
o8 := dbuf.Object()
m.Query = o8.Encode()

return dbuf.err
}

func NewTLInvokeWithLayer() * TLInvokeWithLayer {
    return &TLInvokeWithLayer{}
}

func (m* TLInvokeWithLayer) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_invokeWithLayer))

    x.Int(m.Layer)
    x.Bytes(m.Query)

return x.buf
}

func (m* TLInvokeWithLayer) Decode(dbuf *DecodeBuf) error {
    m.Layer = dbuf.Int()
    // TODO(@benqi): 暂时这么做，估计还是使用Any类型比较好
o2 := dbuf.Object()
m.Query = o2.Encode()

return dbuf.err
}

func NewTLInvokeWithoutUpdates() * TLInvokeWithoutUpdates {
    return &TLInvokeWithoutUpdates{}
}

func (m* TLInvokeWithoutUpdates) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_invokeWithoutUpdates))

    x.Bytes(m.Query)

return x.buf
}

func (m* TLInvokeWithoutUpdates) Decode(dbuf *DecodeBuf) error {
    // TODO(@benqi): 暂时这么做，估计还是使用Any类型比较好
o1 := dbuf.Object()
m.Query = o1.Encode()

return dbuf.err
}

func NewTLAuthCheckPhone() * TLAuthCheckPhone {
    return &TLAuthCheckPhone{}
}

func (m* TLAuthCheckPhone) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_auth_checkPhone))

    x.String(m.PhoneNumber)

return x.buf
}

func (m* TLAuthCheckPhone) Decode(dbuf *DecodeBuf) error {
    m.PhoneNumber = dbuf.String()

return dbuf.err
}

func NewTLAuthSendCode() * TLAuthSendCode {
    return &TLAuthSendCode{}
}

func (m* TLAuthSendCode) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_auth_sendCode))

    // flags
    var flags uint32 = 0
    if m.AllowFlashcall == true { flags |= 1 << 0 }
    if m.CurrentNumber != nil { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.String(m.PhoneNumber)
    if m.CurrentNumber != nil {
 x.Bytes(m.CurrentNumber.Encode()) 
}
    x.Int(m.ApiId)
    x.String(m.ApiHash)

return x.buf
}

func (m* TLAuthSendCode) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.AllowFlashcall = true }
    m.PhoneNumber = dbuf.String()
    if (flags & (1 << 0)) != 0 {
 m4 := &Bool{}
    m4.Decode(dbuf)
    m.CurrentNumber = m4 
}
    m.ApiId = dbuf.Int()
    m.ApiHash = dbuf.String()

return dbuf.err
}

func NewTLAuthSignUp() * TLAuthSignUp {
    return &TLAuthSignUp{}
}

func (m* TLAuthSignUp) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_auth_signUp))

    x.String(m.PhoneNumber)
    x.String(m.PhoneCodeHash)
    x.String(m.PhoneCode)
    x.String(m.FirstName)
    x.String(m.LastName)

return x.buf
}

func (m* TLAuthSignUp) Decode(dbuf *DecodeBuf) error {
    m.PhoneNumber = dbuf.String()
    m.PhoneCodeHash = dbuf.String()
    m.PhoneCode = dbuf.String()
    m.FirstName = dbuf.String()
    m.LastName = dbuf.String()

return dbuf.err
}

func NewTLAuthSignIn() * TLAuthSignIn {
    return &TLAuthSignIn{}
}

func (m* TLAuthSignIn) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_auth_signIn))

    x.String(m.PhoneNumber)
    x.String(m.PhoneCodeHash)
    x.String(m.PhoneCode)

return x.buf
}

func (m* TLAuthSignIn) Decode(dbuf *DecodeBuf) error {
    m.PhoneNumber = dbuf.String()
    m.PhoneCodeHash = dbuf.String()
    m.PhoneCode = dbuf.String()

return dbuf.err
}

func NewTLAuthLogOut() * TLAuthLogOut {
    return &TLAuthLogOut{}
}

func (m* TLAuthLogOut) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_auth_logOut))


return x.buf
}

func (m* TLAuthLogOut) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLAuthResetAuthorizations() * TLAuthResetAuthorizations {
    return &TLAuthResetAuthorizations{}
}

func (m* TLAuthResetAuthorizations) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_auth_resetAuthorizations))


return x.buf
}

func (m* TLAuthResetAuthorizations) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLAuthSendInvites() * TLAuthSendInvites {
    return &TLAuthSendInvites{}
}

func (m* TLAuthSendInvites) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_auth_sendInvites))

    x.VectorString(m.PhoneNumbers)

    x.String(m.Message)

return x.buf
}

func (m* TLAuthSendInvites) Decode(dbuf *DecodeBuf) error {
    m.PhoneNumbers = dbuf.VectorString()
    m.Message = dbuf.String()

return dbuf.err
}

func NewTLAuthExportAuthorization() * TLAuthExportAuthorization {
    return &TLAuthExportAuthorization{}
}

func (m* TLAuthExportAuthorization) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_auth_exportAuthorization))

    x.Int(m.DcId)

return x.buf
}

func (m* TLAuthExportAuthorization) Decode(dbuf *DecodeBuf) error {
    m.DcId = dbuf.Int()

return dbuf.err
}

func NewTLAuthImportAuthorization() * TLAuthImportAuthorization {
    return &TLAuthImportAuthorization{}
}

func (m* TLAuthImportAuthorization) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_auth_importAuthorization))

    x.Int(m.Id)
    x.StringBytes(m.Bytes)

return x.buf
}

func (m* TLAuthImportAuthorization) Decode(dbuf *DecodeBuf) error {
    m.Id = dbuf.Int()
    m.Bytes = dbuf.StringBytes()

return dbuf.err
}

func NewTLAuthBindTempAuthKey() * TLAuthBindTempAuthKey {
    return &TLAuthBindTempAuthKey{}
}

func (m* TLAuthBindTempAuthKey) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_auth_bindTempAuthKey))

    x.Long(m.PermAuthKeyId)
    x.Long(m.Nonce)
    x.Int(m.ExpiresAt)
    x.StringBytes(m.EncryptedMessage)

return x.buf
}

func (m* TLAuthBindTempAuthKey) Decode(dbuf *DecodeBuf) error {
    m.PermAuthKeyId = dbuf.Long()
    m.Nonce = dbuf.Long()
    m.ExpiresAt = dbuf.Int()
    m.EncryptedMessage = dbuf.StringBytes()

return dbuf.err
}

func NewTLAuthImportBotAuthorization() * TLAuthImportBotAuthorization {
    return &TLAuthImportBotAuthorization{}
}

func (m* TLAuthImportBotAuthorization) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_auth_importBotAuthorization))

    x.Int(m.Flags)
    x.Int(m.ApiId)
    x.String(m.ApiHash)
    x.String(m.BotAuthToken)

return x.buf
}

func (m* TLAuthImportBotAuthorization) Decode(dbuf *DecodeBuf) error {
    m.Flags = dbuf.Int()
    m.ApiId = dbuf.Int()
    m.ApiHash = dbuf.String()
    m.BotAuthToken = dbuf.String()

return dbuf.err
}

func NewTLAuthCheckPassword() * TLAuthCheckPassword {
    return &TLAuthCheckPassword{}
}

func (m* TLAuthCheckPassword) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_auth_checkPassword))

    x.StringBytes(m.PasswordHash)

return x.buf
}

func (m* TLAuthCheckPassword) Decode(dbuf *DecodeBuf) error {
    m.PasswordHash = dbuf.StringBytes()

return dbuf.err
}

func NewTLAuthRequestPasswordRecovery() * TLAuthRequestPasswordRecovery {
    return &TLAuthRequestPasswordRecovery{}
}

func (m* TLAuthRequestPasswordRecovery) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_auth_requestPasswordRecovery))


return x.buf
}

func (m* TLAuthRequestPasswordRecovery) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLAuthRecoverPassword() * TLAuthRecoverPassword {
    return &TLAuthRecoverPassword{}
}

func (m* TLAuthRecoverPassword) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_auth_recoverPassword))

    x.String(m.Code)

return x.buf
}

func (m* TLAuthRecoverPassword) Decode(dbuf *DecodeBuf) error {
    m.Code = dbuf.String()

return dbuf.err
}

func NewTLAuthResendCode() * TLAuthResendCode {
    return &TLAuthResendCode{}
}

func (m* TLAuthResendCode) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_auth_resendCode))

    x.String(m.PhoneNumber)
    x.String(m.PhoneCodeHash)

return x.buf
}

func (m* TLAuthResendCode) Decode(dbuf *DecodeBuf) error {
    m.PhoneNumber = dbuf.String()
    m.PhoneCodeHash = dbuf.String()

return dbuf.err
}

func NewTLAuthCancelCode() * TLAuthCancelCode {
    return &TLAuthCancelCode{}
}

func (m* TLAuthCancelCode) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_auth_cancelCode))

    x.String(m.PhoneNumber)
    x.String(m.PhoneCodeHash)

return x.buf
}

func (m* TLAuthCancelCode) Decode(dbuf *DecodeBuf) error {
    m.PhoneNumber = dbuf.String()
    m.PhoneCodeHash = dbuf.String()

return dbuf.err
}

func NewTLAuthDropTempAuthKeys() * TLAuthDropTempAuthKeys {
    return &TLAuthDropTempAuthKeys{}
}

func (m* TLAuthDropTempAuthKeys) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_auth_dropTempAuthKeys))

    x.VectorLong(m.ExceptAuthKeys)


return x.buf
}

func (m* TLAuthDropTempAuthKeys) Decode(dbuf *DecodeBuf) error {
    m.ExceptAuthKeys = dbuf.VectorLong()

return dbuf.err
}

func NewTLAuthCheckInviteCode() * TLAuthCheckInviteCode {
    return &TLAuthCheckInviteCode{}
}

func (m* TLAuthCheckInviteCode) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_auth_checkInviteCode))

    x.String(m.Code)

return x.buf
}

func (m* TLAuthCheckInviteCode) Decode(dbuf *DecodeBuf) error {
    m.Code = dbuf.String()

return dbuf.err
}

func NewTLAccountRegisterDevice() * TLAccountRegisterDevice {
    return &TLAccountRegisterDevice{}
}

func (m* TLAccountRegisterDevice) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_registerDevice))

    x.Int(m.TokenType)
    x.String(m.Token)

return x.buf
}

func (m* TLAccountRegisterDevice) Decode(dbuf *DecodeBuf) error {
    m.TokenType = dbuf.Int()
    m.Token = dbuf.String()

return dbuf.err
}

func NewTLAccountUnregisterDevice() * TLAccountUnregisterDevice {
    return &TLAccountUnregisterDevice{}
}

func (m* TLAccountUnregisterDevice) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_unregisterDevice))

    x.Int(m.TokenType)
    x.String(m.Token)

return x.buf
}

func (m* TLAccountUnregisterDevice) Decode(dbuf *DecodeBuf) error {
    m.TokenType = dbuf.Int()
    m.Token = dbuf.String()

return dbuf.err
}

func NewTLAccountUpdateNotifySettings() * TLAccountUpdateNotifySettings {
    return &TLAccountUpdateNotifySettings{}
}

func (m* TLAccountUpdateNotifySettings) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_updateNotifySettings))

    x.Bytes(m.Peer.Encode())
    x.Bytes(m.Settings.Encode())

return x.buf
}

func (m* TLAccountUpdateNotifySettings) Decode(dbuf *DecodeBuf) error {
    m1 := &InputNotifyPeer{}
    m1.Decode(dbuf)
    m.Peer = m1
    m2 := &InputPeerNotifySettings{}
    m2.Decode(dbuf)
    m.Settings = m2

return dbuf.err
}

func NewTLAccountGetNotifySettings() * TLAccountGetNotifySettings {
    return &TLAccountGetNotifySettings{}
}

func (m* TLAccountGetNotifySettings) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_getNotifySettings))

    x.Bytes(m.Peer.Encode())

return x.buf
}

func (m* TLAccountGetNotifySettings) Decode(dbuf *DecodeBuf) error {
    m1 := &InputNotifyPeer{}
    m1.Decode(dbuf)
    m.Peer = m1

return dbuf.err
}

func NewTLAccountResetNotifySettings() * TLAccountResetNotifySettings {
    return &TLAccountResetNotifySettings{}
}

func (m* TLAccountResetNotifySettings) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_resetNotifySettings))


return x.buf
}

func (m* TLAccountResetNotifySettings) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLAccountUpdateProfile() * TLAccountUpdateProfile {
    return &TLAccountUpdateProfile{}
}

func (m* TLAccountUpdateProfile) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_updateProfile))

    // flags
    var flags uint32 = 0
    if m.FirstName != "" { flags |= 1 << 0 }
    if m.LastName != "" { flags |= 1 << 1 }
    if m.About != "" { flags |= 1 << 2 }
	x.UInt(flags)

    if m.FirstName != "" { x.String(m.FirstName) }
    if m.LastName != "" { x.String(m.LastName) }
    if m.About != "" { x.String(m.About) }

return x.buf
}

func (m* TLAccountUpdateProfile) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.FirstName = dbuf.String() }
    if (flags & (1 << 1)) != 0 { m.LastName = dbuf.String() }
    if (flags & (1 << 2)) != 0 { m.About = dbuf.String() }

return dbuf.err
}

func NewTLAccountUpdateStatus() * TLAccountUpdateStatus {
    return &TLAccountUpdateStatus{}
}

func (m* TLAccountUpdateStatus) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_updateStatus))

    x.Bytes(m.Offline.Encode())

return x.buf
}

func (m* TLAccountUpdateStatus) Decode(dbuf *DecodeBuf) error {
    m1 := &Bool{}
    m1.Decode(dbuf)
    m.Offline = m1

return dbuf.err
}

func NewTLAccountGetWallPapers() * TLAccountGetWallPapers {
    return &TLAccountGetWallPapers{}
}

func (m* TLAccountGetWallPapers) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_getWallPapers))


return x.buf
}

func (m* TLAccountGetWallPapers) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLAccountReportPeer() * TLAccountReportPeer {
    return &TLAccountReportPeer{}
}

func (m* TLAccountReportPeer) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_reportPeer))

    x.Bytes(m.Peer.Encode())
    x.Bytes(m.Reason.Encode())

return x.buf
}

func (m* TLAccountReportPeer) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1
    m2 := &ReportReason{}
    m2.Decode(dbuf)
    m.Reason = m2

return dbuf.err
}

func NewTLAccountCheckUsername() * TLAccountCheckUsername {
    return &TLAccountCheckUsername{}
}

func (m* TLAccountCheckUsername) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_checkUsername))

    x.String(m.Username)

return x.buf
}

func (m* TLAccountCheckUsername) Decode(dbuf *DecodeBuf) error {
    m.Username = dbuf.String()

return dbuf.err
}

func NewTLAccountUpdateUsername() * TLAccountUpdateUsername {
    return &TLAccountUpdateUsername{}
}

func (m* TLAccountUpdateUsername) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_updateUsername))

    x.String(m.Username)

return x.buf
}

func (m* TLAccountUpdateUsername) Decode(dbuf *DecodeBuf) error {
    m.Username = dbuf.String()

return dbuf.err
}

func NewTLAccountGetPrivacy() * TLAccountGetPrivacy {
    return &TLAccountGetPrivacy{}
}

func (m* TLAccountGetPrivacy) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_getPrivacy))

    x.Bytes(m.Key.Encode())

return x.buf
}

func (m* TLAccountGetPrivacy) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPrivacyKey{}
    m1.Decode(dbuf)
    m.Key = m1

return dbuf.err
}

func NewTLAccountSetPrivacy() * TLAccountSetPrivacy {
    return &TLAccountSetPrivacy{}
}

func (m* TLAccountSetPrivacy) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_setPrivacy))

    x.Bytes(m.Key.Encode())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Rules)))
for _, v := range m.Rules {
  x.buf = append(x.buf, (*v).Encode()...)
}

return x.buf
}

func (m* TLAccountSetPrivacy) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPrivacyKey{}
    m1.Decode(dbuf)
    m.Key = m1
    dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l2 := dbuf.Int()
m.Rules = make([]*InputPrivacyRule, l2)
for i := int32(0); i < l2; i++ {
 m.Rules[i] = &InputPrivacyRule{}
 (*m.Rules[i]).Decode(dbuf)
}

return dbuf.err
}

func NewTLAccountDeleteAccount() * TLAccountDeleteAccount {
    return &TLAccountDeleteAccount{}
}

func (m* TLAccountDeleteAccount) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_deleteAccount))

    x.String(m.Reason)

return x.buf
}

func (m* TLAccountDeleteAccount) Decode(dbuf *DecodeBuf) error {
    m.Reason = dbuf.String()

return dbuf.err
}

func NewTLAccountGetAccountTTL() * TLAccountGetAccountTTL {
    return &TLAccountGetAccountTTL{}
}

func (m* TLAccountGetAccountTTL) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_getAccountTTL))


return x.buf
}

func (m* TLAccountGetAccountTTL) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLAccountSetAccountTTL() * TLAccountSetAccountTTL {
    return &TLAccountSetAccountTTL{}
}

func (m* TLAccountSetAccountTTL) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_setAccountTTL))

    x.Bytes(m.Ttl.Encode())

return x.buf
}

func (m* TLAccountSetAccountTTL) Decode(dbuf *DecodeBuf) error {
    m1 := &AccountDaysTTL{}
    m1.Decode(dbuf)
    m.Ttl = m1

return dbuf.err
}

func NewTLAccountSendChangePhoneCode() * TLAccountSendChangePhoneCode {
    return &TLAccountSendChangePhoneCode{}
}

func (m* TLAccountSendChangePhoneCode) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_sendChangePhoneCode))

    // flags
    var flags uint32 = 0
    if m.AllowFlashcall == true { flags |= 1 << 0 }
    if m.CurrentNumber != nil { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.String(m.PhoneNumber)
    if m.CurrentNumber != nil {
 x.Bytes(m.CurrentNumber.Encode()) 
}

return x.buf
}

func (m* TLAccountSendChangePhoneCode) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.AllowFlashcall = true }
    m.PhoneNumber = dbuf.String()
    if (flags & (1 << 0)) != 0 {
 m4 := &Bool{}
    m4.Decode(dbuf)
    m.CurrentNumber = m4 
}

return dbuf.err
}

func NewTLAccountChangePhone() * TLAccountChangePhone {
    return &TLAccountChangePhone{}
}

func (m* TLAccountChangePhone) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_changePhone))

    x.String(m.PhoneNumber)
    x.String(m.PhoneCodeHash)
    x.String(m.PhoneCode)

return x.buf
}

func (m* TLAccountChangePhone) Decode(dbuf *DecodeBuf) error {
    m.PhoneNumber = dbuf.String()
    m.PhoneCodeHash = dbuf.String()
    m.PhoneCode = dbuf.String()

return dbuf.err
}

func NewTLAccountUpdateDeviceLocked() * TLAccountUpdateDeviceLocked {
    return &TLAccountUpdateDeviceLocked{}
}

func (m* TLAccountUpdateDeviceLocked) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_updateDeviceLocked))

    x.Int(m.Period)

return x.buf
}

func (m* TLAccountUpdateDeviceLocked) Decode(dbuf *DecodeBuf) error {
    m.Period = dbuf.Int()

return dbuf.err
}

func NewTLAccountGetAuthorizations() * TLAccountGetAuthorizations {
    return &TLAccountGetAuthorizations{}
}

func (m* TLAccountGetAuthorizations) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_getAuthorizations))


return x.buf
}

func (m* TLAccountGetAuthorizations) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLAccountResetAuthorization() * TLAccountResetAuthorization {
    return &TLAccountResetAuthorization{}
}

func (m* TLAccountResetAuthorization) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_resetAuthorization))

    x.Long(m.Hash)

return x.buf
}

func (m* TLAccountResetAuthorization) Decode(dbuf *DecodeBuf) error {
    m.Hash = dbuf.Long()

return dbuf.err
}

func NewTLAccountGetPassword() * TLAccountGetPassword {
    return &TLAccountGetPassword{}
}

func (m* TLAccountGetPassword) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_getPassword))


return x.buf
}

func (m* TLAccountGetPassword) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLAccountGetPasswordSettings() * TLAccountGetPasswordSettings {
    return &TLAccountGetPasswordSettings{}
}

func (m* TLAccountGetPasswordSettings) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_getPasswordSettings))

    x.StringBytes(m.CurrentPasswordHash)

return x.buf
}

func (m* TLAccountGetPasswordSettings) Decode(dbuf *DecodeBuf) error {
    m.CurrentPasswordHash = dbuf.StringBytes()

return dbuf.err
}

func NewTLAccountUpdatePasswordSettings() * TLAccountUpdatePasswordSettings {
    return &TLAccountUpdatePasswordSettings{}
}

func (m* TLAccountUpdatePasswordSettings) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_updatePasswordSettings))

    x.StringBytes(m.CurrentPasswordHash)
    x.Bytes(m.NewSettings.Encode())

return x.buf
}

func (m* TLAccountUpdatePasswordSettings) Decode(dbuf *DecodeBuf) error {
    m.CurrentPasswordHash = dbuf.StringBytes()
    m2 := &Account_PasswordInputSettings{}
    m2.Decode(dbuf)
    m.NewSettings = m2

return dbuf.err
}

func NewTLAccountSendConfirmPhoneCode() * TLAccountSendConfirmPhoneCode {
    return &TLAccountSendConfirmPhoneCode{}
}

func (m* TLAccountSendConfirmPhoneCode) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_sendConfirmPhoneCode))

    // flags
    var flags uint32 = 0
    if m.AllowFlashcall == true { flags |= 1 << 0 }
    if m.CurrentNumber != nil { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.String(m.Hash)
    if m.CurrentNumber != nil {
 x.Bytes(m.CurrentNumber.Encode()) 
}

return x.buf
}

func (m* TLAccountSendConfirmPhoneCode) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.AllowFlashcall = true }
    m.Hash = dbuf.String()
    if (flags & (1 << 0)) != 0 {
 m4 := &Bool{}
    m4.Decode(dbuf)
    m.CurrentNumber = m4 
}

return dbuf.err
}

func NewTLAccountConfirmPhone() * TLAccountConfirmPhone {
    return &TLAccountConfirmPhone{}
}

func (m* TLAccountConfirmPhone) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_confirmPhone))

    x.String(m.PhoneCodeHash)
    x.String(m.PhoneCode)

return x.buf
}

func (m* TLAccountConfirmPhone) Decode(dbuf *DecodeBuf) error {
    m.PhoneCodeHash = dbuf.String()
    m.PhoneCode = dbuf.String()

return dbuf.err
}

func NewTLAccountGetTmpPassword() * TLAccountGetTmpPassword {
    return &TLAccountGetTmpPassword{}
}

func (m* TLAccountGetTmpPassword) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_getTmpPassword))

    x.StringBytes(m.PasswordHash)
    x.Int(m.Period)

return x.buf
}

func (m* TLAccountGetTmpPassword) Decode(dbuf *DecodeBuf) error {
    m.PasswordHash = dbuf.StringBytes()
    m.Period = dbuf.Int()

return dbuf.err
}

func NewTLUsersGetUsers() * TLUsersGetUsers {
    return &TLUsersGetUsers{}
}

func (m* TLUsersGetUsers) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_users_getUsers))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Id)))
for _, v := range m.Id {
  x.buf = append(x.buf, (*v).Encode()...)
}

return x.buf
}

func (m* TLUsersGetUsers) Decode(dbuf *DecodeBuf) error {
    dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l1 := dbuf.Int()
m.Id = make([]*InputUser, l1)
for i := int32(0); i < l1; i++ {
 m.Id[i] = &InputUser{}
 (*m.Id[i]).Decode(dbuf)
}

return dbuf.err
}

func NewTLUsersGetFullUser() * TLUsersGetFullUser {
    return &TLUsersGetFullUser{}
}

func (m* TLUsersGetFullUser) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_users_getFullUser))

    x.Bytes(m.Id.Encode())

return x.buf
}

func (m* TLUsersGetFullUser) Decode(dbuf *DecodeBuf) error {
    m1 := &InputUser{}
    m1.Decode(dbuf)
    m.Id = m1

return dbuf.err
}

func NewTLUsersGetUserInfo() * TLUsersGetUserInfo {
    return &TLUsersGetUserInfo{}
}

func (m* TLUsersGetUserInfo) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_users_getUserInfo))

    x.Bytes(m.Id.Encode())

return x.buf
}

func (m* TLUsersGetUserInfo) Decode(dbuf *DecodeBuf) error {
    m1 := &InputUser{}
    m1.Decode(dbuf)
    m.Id = m1

return dbuf.err
}

func NewTLUsersGetUserInfoList() * TLUsersGetUserInfoList {
    return &TLUsersGetUserInfoList{}
}

func (m* TLUsersGetUserInfoList) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_users_getUserInfoList))

    x.Int(m.Type)
    x.Int(m.Offset)
    x.Int(m.Count)

return x.buf
}

func (m* TLUsersGetUserInfoList) Decode(dbuf *DecodeBuf) error {
    m.Type = dbuf.Int()
    m.Offset = dbuf.Int()
    m.Count = dbuf.Int()

return dbuf.err
}

func NewTLUsersGetEnvelopeState() * TLUsersGetEnvelopeState {
    return &TLUsersGetEnvelopeState{}
}

func (m* TLUsersGetEnvelopeState) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_users_getEnvelopeState))

    x.Long(m.Eid)
    x.Long(m.AccessHash)

return x.buf
}

func (m* TLUsersGetEnvelopeState) Decode(dbuf *DecodeBuf) error {
    m.Eid = dbuf.Long()
    m.AccessHash = dbuf.Long()

return dbuf.err
}

func NewTLUsersGetEnvelopeInfo() * TLUsersGetEnvelopeInfo {
    return &TLUsersGetEnvelopeInfo{}
}

func (m* TLUsersGetEnvelopeInfo) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_users_getEnvelopeInfo))

    x.Long(m.Eid)
    x.Long(m.AccessHash)

return x.buf
}

func (m* TLUsersGetEnvelopeInfo) Decode(dbuf *DecodeBuf) error {
    m.Eid = dbuf.Long()
    m.AccessHash = dbuf.Long()

return dbuf.err
}

func NewTLUsersGetPointsHistory() * TLUsersGetPointsHistory {
    return &TLUsersGetPointsHistory{}
}

func (m* TLUsersGetPointsHistory) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_users_getPointsHistory))

    x.Int(m.Type)
    x.Int(m.Offset)
    x.Int(m.Limit)
    x.Int(m.Year)

return x.buf
}

func (m* TLUsersGetPointsHistory) Decode(dbuf *DecodeBuf) error {
    m.Type = dbuf.Int()
    m.Offset = dbuf.Int()
    m.Limit = dbuf.Int()
    m.Year = dbuf.Int()

return dbuf.err
}

func NewTLUsersGetPointsRank() * TLUsersGetPointsRank {
    return &TLUsersGetPointsRank{}
}

func (m* TLUsersGetPointsRank) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_users_getPointsRank))

    x.Int(m.Type)
    x.Int(m.FromRank)
    x.Int(m.Count)

return x.buf
}

func (m* TLUsersGetPointsRank) Decode(dbuf *DecodeBuf) error {
    m.Type = dbuf.Int()
    m.FromRank = dbuf.Int()
    m.Count = dbuf.Int()

return dbuf.err
}

func NewTLUsersSetPasswd() * TLUsersSetPasswd {
    return &TLUsersSetPasswd{}
}

func (m* TLUsersSetPasswd) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_users_setPasswd))

    x.Int(m.Type)
    x.String(m.PhoneCode)
    x.String(m.OldPass)
    x.String(m.Passwd)
    x.String(m.PhoneNumber)

return x.buf
}

func (m* TLUsersSetPasswd) Decode(dbuf *DecodeBuf) error {
    m.Type = dbuf.Int()
    m.PhoneCode = dbuf.String()
    m.OldPass = dbuf.String()
    m.Passwd = dbuf.String()
    m.PhoneNumber = dbuf.String()

return dbuf.err
}

func NewTLUsersCheckPasswd() * TLUsersCheckPasswd {
    return &TLUsersCheckPasswd{}
}

func (m* TLUsersCheckPasswd) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_users_checkPasswd))

    x.Int(m.Type)
    x.String(m.Passwd)
    x.String(m.PhoneNumber)

return x.buf
}

func (m* TLUsersCheckPasswd) Decode(dbuf *DecodeBuf) error {
    m.Type = dbuf.Int()
    m.Passwd = dbuf.String()
    m.PhoneNumber = dbuf.String()

return dbuf.err
}

func NewTLUsersCheckResetPasswdPhoneCode() * TLUsersCheckResetPasswdPhoneCode {
    return &TLUsersCheckResetPasswdPhoneCode{}
}

func (m* TLUsersCheckResetPasswdPhoneCode) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_users_checkResetPasswdPhoneCode))

    x.Int(m.Type)
    x.String(m.PhoneCode)
    x.String(m.PhoneNumber)

return x.buf
}

func (m* TLUsersCheckResetPasswdPhoneCode) Decode(dbuf *DecodeBuf) error {
    m.Type = dbuf.Int()
    m.PhoneCode = dbuf.String()
    m.PhoneNumber = dbuf.String()

return dbuf.err
}

func NewTLUsersSendResetPasswdPhoneCode() * TLUsersSendResetPasswdPhoneCode {
    return &TLUsersSendResetPasswdPhoneCode{}
}

func (m* TLUsersSendResetPasswdPhoneCode) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_users_sendResetPasswdPhoneCode))

    x.Int(m.Type)
    x.String(m.PhoneNumber)

return x.buf
}

func (m* TLUsersSendResetPasswdPhoneCode) Decode(dbuf *DecodeBuf) error {
    m.Type = dbuf.Int()
    m.PhoneNumber = dbuf.String()

return dbuf.err
}

func NewTLUsersSetGender() * TLUsersSetGender {
    return &TLUsersSetGender{}
}

func (m* TLUsersSetGender) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_users_setGender))

    x.String(m.JsonContent)

return x.buf
}

func (m* TLUsersSetGender) Decode(dbuf *DecodeBuf) error {
    m.JsonContent = dbuf.String()

return dbuf.err
}

func NewTLUsersSetUserInfo() * TLUsersSetUserInfo {
    return &TLUsersSetUserInfo{}
}

func (m* TLUsersSetUserInfo) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_users_setUserInfo))

    x.String(m.JsonContent)

return x.buf
}

func (m* TLUsersSetUserInfo) Decode(dbuf *DecodeBuf) error {
    m.JsonContent = dbuf.String()

return dbuf.err
}

func NewTLContactsApplyFriend() * TLContactsApplyFriend {
    return &TLContactsApplyFriend{}
}

func (m* TLContactsApplyFriend) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_contacts_applyFriend))

    x.String(m.JsonContent)

return x.buf
}

func (m* TLContactsApplyFriend) Decode(dbuf *DecodeBuf) error {
    m.JsonContent = dbuf.String()

return dbuf.err
}

func NewTLContactsAuditApply() * TLContactsAuditApply {
    return &TLContactsAuditApply{}
}

func (m* TLContactsAuditApply) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_contacts_auditApply))

    x.String(m.JsonContent)

return x.buf
}

func (m* TLContactsAuditApply) Decode(dbuf *DecodeBuf) error {
    m.JsonContent = dbuf.String()

return dbuf.err
}

func NewTLContactsGetApplyList() * TLContactsGetApplyList {
    return &TLContactsGetApplyList{}
}

func (m* TLContactsGetApplyList) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_contacts_getApplyList))

    x.String(m.JsonContent)

return x.buf
}

func (m* TLContactsGetApplyList) Decode(dbuf *DecodeBuf) error {
    m.JsonContent = dbuf.String()

return dbuf.err
}

func NewTLContactsSearchUser() * TLContactsSearchUser {
    return &TLContactsSearchUser{}
}

func (m* TLContactsSearchUser) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_contacts_searchUser))

    x.String(m.JsonContent)

return x.buf
}

func (m* TLContactsSearchUser) Decode(dbuf *DecodeBuf) error {
    m.JsonContent = dbuf.String()

return dbuf.err
}

func NewTLContactsSearchSource() * TLContactsSearchSource {
    return &TLContactsSearchSource{}
}

func (m* TLContactsSearchSource) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_contacts_searchSource))

    x.String(m.JsonContent)

return x.buf
}

func (m* TLContactsSearchSource) Decode(dbuf *DecodeBuf) error {
    m.JsonContent = dbuf.String()

return dbuf.err
}

func NewTLContactsGetStatuses() * TLContactsGetStatuses {
    return &TLContactsGetStatuses{}
}

func (m* TLContactsGetStatuses) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_contacts_getStatuses))


return x.buf
}

func (m* TLContactsGetStatuses) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLContactsGetContacts() * TLContactsGetContacts {
    return &TLContactsGetContacts{}
}

func (m* TLContactsGetContacts) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_contacts_getContacts))

    x.Int(m.Hash)

return x.buf
}

func (m* TLContactsGetContacts) Decode(dbuf *DecodeBuf) error {
    m.Hash = dbuf.Int()

return dbuf.err
}

func NewTLContactsImportContacts() * TLContactsImportContacts {
    return &TLContactsImportContacts{}
}

func (m* TLContactsImportContacts) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_contacts_importContacts))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Contacts)))
for _, v := range m.Contacts {
  x.buf = append(x.buf, (*v).Encode()...)
}

return x.buf
}

func (m* TLContactsImportContacts) Decode(dbuf *DecodeBuf) error {
    dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l1 := dbuf.Int()
m.Contacts = make([]*InputContact, l1)
for i := int32(0); i < l1; i++ {
 m.Contacts[i] = &InputContact{}
 (*m.Contacts[i]).Decode(dbuf)
}

return dbuf.err
}

func NewTLContactsDeleteContact() * TLContactsDeleteContact {
    return &TLContactsDeleteContact{}
}

func (m* TLContactsDeleteContact) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_contacts_deleteContact))

    x.Bytes(m.Id.Encode())

return x.buf
}

func (m* TLContactsDeleteContact) Decode(dbuf *DecodeBuf) error {
    m1 := &InputUser{}
    m1.Decode(dbuf)
    m.Id = m1

return dbuf.err
}

func NewTLContactsDeleteContacts() * TLContactsDeleteContacts {
    return &TLContactsDeleteContacts{}
}

func (m* TLContactsDeleteContacts) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_contacts_deleteContacts))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Id)))
for _, v := range m.Id {
  x.buf = append(x.buf, (*v).Encode()...)
}

return x.buf
}

func (m* TLContactsDeleteContacts) Decode(dbuf *DecodeBuf) error {
    dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l1 := dbuf.Int()
m.Id = make([]*InputUser, l1)
for i := int32(0); i < l1; i++ {
 m.Id[i] = &InputUser{}
 (*m.Id[i]).Decode(dbuf)
}

return dbuf.err
}

func NewTLContactsBlock() * TLContactsBlock {
    return &TLContactsBlock{}
}

func (m* TLContactsBlock) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_contacts_block))

    x.Bytes(m.Id.Encode())

return x.buf
}

func (m* TLContactsBlock) Decode(dbuf *DecodeBuf) error {
    m1 := &InputUser{}
    m1.Decode(dbuf)
    m.Id = m1

return dbuf.err
}

func NewTLContactsUnblock() * TLContactsUnblock {
    return &TLContactsUnblock{}
}

func (m* TLContactsUnblock) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_contacts_unblock))

    x.Bytes(m.Id.Encode())

return x.buf
}

func (m* TLContactsUnblock) Decode(dbuf *DecodeBuf) error {
    m1 := &InputUser{}
    m1.Decode(dbuf)
    m.Id = m1

return dbuf.err
}

func NewTLContactsGetBlocked() * TLContactsGetBlocked {
    return &TLContactsGetBlocked{}
}

func (m* TLContactsGetBlocked) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_contacts_getBlocked))

    x.Int(m.Offset)
    x.Int(m.Limit)

return x.buf
}

func (m* TLContactsGetBlocked) Decode(dbuf *DecodeBuf) error {
    m.Offset = dbuf.Int()
    m.Limit = dbuf.Int()

return dbuf.err
}

func NewTLContactsExportCard() * TLContactsExportCard {
    return &TLContactsExportCard{}
}

func (m* TLContactsExportCard) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_contacts_exportCard))


return x.buf
}

func (m* TLContactsExportCard) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLContactsImportCard() * TLContactsImportCard {
    return &TLContactsImportCard{}
}

func (m* TLContactsImportCard) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_contacts_importCard))

    x.VectorInt(m.ExportCard)


return x.buf
}

func (m* TLContactsImportCard) Decode(dbuf *DecodeBuf) error {
    m.ExportCard = dbuf.VectorInt()

return dbuf.err
}

func NewTLContactsSearch() * TLContactsSearch {
    return &TLContactsSearch{}
}

func (m* TLContactsSearch) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_contacts_search))

    x.String(m.Q)
    x.Int(m.Limit)

return x.buf
}

func (m* TLContactsSearch) Decode(dbuf *DecodeBuf) error {
    m.Q = dbuf.String()
    m.Limit = dbuf.Int()

return dbuf.err
}

func NewTLContactsResolveUsername() * TLContactsResolveUsername {
    return &TLContactsResolveUsername{}
}

func (m* TLContactsResolveUsername) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_contacts_resolveUsername))

    x.String(m.Username)

return x.buf
}

func (m* TLContactsResolveUsername) Decode(dbuf *DecodeBuf) error {
    m.Username = dbuf.String()

return dbuf.err
}

func NewTLContactsGetTopPeers() * TLContactsGetTopPeers {
    return &TLContactsGetTopPeers{}
}

func (m* TLContactsGetTopPeers) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_contacts_getTopPeers))

    // flags
    var flags uint32 = 0
    if m.Correspondents == true { flags |= 1 << 0 }
    if m.BotsPm == true { flags |= 1 << 1 }
    if m.BotsInline == true { flags |= 1 << 2 }
    if m.PhoneCalls == true { flags |= 1 << 3 }
    if m.Groups == true { flags |= 1 << 10 }
    if m.Channels == true { flags |= 1 << 15 }
	x.UInt(flags)

    
    
    
    
    
    
    x.Int(m.Offset)
    x.Int(m.Limit)
    x.Int(m.Hash)

return x.buf
}

func (m* TLContactsGetTopPeers) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Correspondents = true }
    if (flags & (1 << 1)) != 0 { m.BotsPm = true }
    if (flags & (1 << 2)) != 0 { m.BotsInline = true }
    if (flags & (1 << 3)) != 0 { m.PhoneCalls = true }
    if (flags & (1 << 10)) != 0 { m.Groups = true }
    if (flags & (1 << 15)) != 0 { m.Channels = true }
    m.Offset = dbuf.Int()
    m.Limit = dbuf.Int()
    m.Hash = dbuf.Int()

return dbuf.err
}

func NewTLContactsResetTopPeerRating() * TLContactsResetTopPeerRating {
    return &TLContactsResetTopPeerRating{}
}

func (m* TLContactsResetTopPeerRating) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_contacts_resetTopPeerRating))

    x.Bytes(m.Category.Encode())
    x.Bytes(m.Peer.Encode())

return x.buf
}

func (m* TLContactsResetTopPeerRating) Decode(dbuf *DecodeBuf) error {
    m1 := &TopPeerCategory{}
    m1.Decode(dbuf)
    m.Category = m1
    m2 := &InputPeer{}
    m2.Decode(dbuf)
    m.Peer = m2

return dbuf.err
}

func NewTLContactsResetSaved() * TLContactsResetSaved {
    return &TLContactsResetSaved{}
}

func (m* TLContactsResetSaved) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_contacts_resetSaved))


return x.buf
}

func (m* TLContactsResetSaved) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLMessagesGetMessages() * TLMessagesGetMessages {
    return &TLMessagesGetMessages{}
}

func (m* TLMessagesGetMessages) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getMessages))

    x.VectorInt(m.Id)


return x.buf
}

func (m* TLMessagesGetMessages) Decode(dbuf *DecodeBuf) error {
    m.Id = dbuf.VectorInt()

return dbuf.err
}

func NewTLMessagesGetDialogs() * TLMessagesGetDialogs {
    return &TLMessagesGetDialogs{}
}

func (m* TLMessagesGetDialogs) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getDialogs))

    // flags
    var flags uint32 = 0
    if m.ExcludePinned == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Int(m.OffsetDate)
    x.Int(m.OffsetId)
    x.Bytes(m.OffsetPeer.Encode())
    x.Int(m.Limit)

return x.buf
}

func (m* TLMessagesGetDialogs) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.ExcludePinned = true }
    m.OffsetDate = dbuf.Int()
    m.OffsetId = dbuf.Int()
    m5 := &InputPeer{}
    m5.Decode(dbuf)
    m.OffsetPeer = m5
    m.Limit = dbuf.Int()

return dbuf.err
}

func NewTLMessagesGetHistory() * TLMessagesGetHistory {
    return &TLMessagesGetHistory{}
}

func (m* TLMessagesGetHistory) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getHistory))

    x.Bytes(m.Peer.Encode())
    x.Int(m.OffsetId)
    x.Int(m.OffsetDate)
    x.Int(m.AddOffset)
    x.Int(m.Limit)
    x.Int(m.MaxId)
    x.Int(m.MinId)

return x.buf
}

func (m* TLMessagesGetHistory) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.OffsetId = dbuf.Int()
    m.OffsetDate = dbuf.Int()
    m.AddOffset = dbuf.Int()
    m.Limit = dbuf.Int()
    m.MaxId = dbuf.Int()
    m.MinId = dbuf.Int()

return dbuf.err
}

func NewTLMessagesSearch() * TLMessagesSearch {
    return &TLMessagesSearch{}
}

func (m* TLMessagesSearch) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_search))

    // flags
    var flags uint32 = 0
    if m.FromId != nil { flags |= 1 << 0 }
	x.UInt(flags)

    x.Bytes(m.Peer.Encode())
    x.String(m.Q)
    if m.FromId != nil {
 x.Bytes(m.FromId.Encode()) 
}
    x.Bytes(m.Filter.Encode())
    x.Int(m.MinDate)
    x.Int(m.MaxDate)
    x.Int(m.OffsetId)
    x.Int(m.AddOffset)
    x.Int(m.Limit)
    x.Int(m.MaxId)
    x.Int(m.MinId)

return x.buf
}

func (m* TLMessagesSearch) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    m2 := &InputPeer{}
    m2.Decode(dbuf)
    m.Peer = m2
    m.Q = dbuf.String()
    if (flags & (1 << 0)) != 0 {
 m4 := &InputUser{}
    m4.Decode(dbuf)
    m.FromId = m4 
}
    m5 := &MessagesFilter{}
    m5.Decode(dbuf)
    m.Filter = m5
    m.MinDate = dbuf.Int()
    m.MaxDate = dbuf.Int()
    m.OffsetId = dbuf.Int()
    m.AddOffset = dbuf.Int()
    m.Limit = dbuf.Int()
    m.MaxId = dbuf.Int()
    m.MinId = dbuf.Int()

return dbuf.err
}

func NewTLMessagesReadHistory() * TLMessagesReadHistory {
    return &TLMessagesReadHistory{}
}

func (m* TLMessagesReadHistory) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_readHistory))

    x.Bytes(m.Peer.Encode())
    x.Int(m.MaxId)

return x.buf
}

func (m* TLMessagesReadHistory) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.MaxId = dbuf.Int()

return dbuf.err
}

func NewTLMessagesDeleteHistory() * TLMessagesDeleteHistory {
    return &TLMessagesDeleteHistory{}
}

func (m* TLMessagesDeleteHistory) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_deleteHistory))

    // flags
    var flags uint32 = 0
    if m.JustClear == true { flags |= 1 << 0 }
    if m.Revoke == true { flags |= 1 << 1 }
	x.UInt(flags)

    
    
    x.Bytes(m.Peer.Encode())
    x.Int(m.MaxId)

return x.buf
}

func (m* TLMessagesDeleteHistory) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.JustClear = true }
    if (flags & (1 << 1)) != 0 { m.Revoke = true }
    m4 := &InputPeer{}
    m4.Decode(dbuf)
    m.Peer = m4
    m.MaxId = dbuf.Int()

return dbuf.err
}

func NewTLMessagesDeleteMessages() * TLMessagesDeleteMessages {
    return &TLMessagesDeleteMessages{}
}

func (m* TLMessagesDeleteMessages) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_deleteMessages))

    // flags
    var flags uint32 = 0
    if m.Revoke == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.VectorInt(m.Id)


return x.buf
}

func (m* TLMessagesDeleteMessages) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Revoke = true }
    m.Id = dbuf.VectorInt()

return dbuf.err
}

func NewTLMessagesReceivedMessages() * TLMessagesReceivedMessages {
    return &TLMessagesReceivedMessages{}
}

func (m* TLMessagesReceivedMessages) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_receivedMessages))

    x.Int(m.MaxId)

return x.buf
}

func (m* TLMessagesReceivedMessages) Decode(dbuf *DecodeBuf) error {
    m.MaxId = dbuf.Int()

return dbuf.err
}

func NewTLMessagesSetTyping() * TLMessagesSetTyping {
    return &TLMessagesSetTyping{}
}

func (m* TLMessagesSetTyping) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_setTyping))

    x.Bytes(m.Peer.Encode())
    x.Bytes(m.Action.Encode())

return x.buf
}

func (m* TLMessagesSetTyping) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1
    m2 := &SendMessageAction{}
    m2.Decode(dbuf)
    m.Action = m2

return dbuf.err
}

func NewTLMessagesSendMessage() * TLMessagesSendMessage {
    return &TLMessagesSendMessage{}
}

func (m* TLMessagesSendMessage) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_sendMessage))

    // flags
    var flags uint32 = 0
    if m.NoWebpage == true { flags |= 1 << 1 }
    if m.Silent == true { flags |= 1 << 5 }
    if m.Background == true { flags |= 1 << 6 }
    if m.ClearDraft == true { flags |= 1 << 7 }
    if m.ReplyToMsgId != 0 { flags |= 1 << 0 }
    if m.ReplyMarkup != nil { flags |= 1 << 2 }
    if m.Entities != nil { flags |= 1 << 3 }
	x.UInt(flags)

    
    
    
    
    x.Bytes(m.Peer.Encode())
    if m.ReplyToMsgId != 0 { x.Int(m.ReplyToMsgId) }
    x.String(m.Message)
    x.Long(m.RandomId)
    if m.ReplyMarkup != nil {
 x.Bytes(m.ReplyMarkup.Encode()) 
}
    if m.Entities != nil {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Entities)))
for _, v := range m.Entities {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}

return x.buf
}

func (m* TLMessagesSendMessage) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 1)) != 0 { m.NoWebpage = true }
    if (flags & (1 << 5)) != 0 { m.Silent = true }
    if (flags & (1 << 6)) != 0 { m.Background = true }
    if (flags & (1 << 7)) != 0 { m.ClearDraft = true }
    m6 := &InputPeer{}
    m6.Decode(dbuf)
    m.Peer = m6
    if (flags & (1 << 0)) != 0 { m.ReplyToMsgId = dbuf.Int() }
    m.Message = dbuf.String()
    m.RandomId = dbuf.Long()
    if (flags & (1 << 2)) != 0 {
 m10 := &ReplyMarkup{}
    m10.Decode(dbuf)
    m.ReplyMarkup = m10 
}
    if (flags & (1 << 3)) != 0 {
 dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l11 := dbuf.Int()
m.Entities = make([]*MessageEntity, l11)
for i := int32(0); i < l11; i++ {
 m.Entities[i] = &MessageEntity{}
 (*m.Entities[i]).Decode(dbuf)
} 
}

return dbuf.err
}

func NewTLMessagesSendMedia() * TLMessagesSendMedia {
    return &TLMessagesSendMedia{}
}

func (m* TLMessagesSendMedia) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_sendMedia))

    // flags
    var flags uint32 = 0
    if m.Silent == true { flags |= 1 << 5 }
    if m.Background == true { flags |= 1 << 6 }
    if m.ClearDraft == true { flags |= 1 << 7 }
    if m.ReplyToMsgId != 0 { flags |= 1 << 0 }
    if m.ReplyMarkup != nil { flags |= 1 << 2 }
	x.UInt(flags)

    
    
    
    x.Bytes(m.Peer.Encode())
    if m.ReplyToMsgId != 0 { x.Int(m.ReplyToMsgId) }
    x.Bytes(m.Media.Encode())
    x.Long(m.RandomId)
    if m.ReplyMarkup != nil {
 x.Bytes(m.ReplyMarkup.Encode()) 
}

return x.buf
}

func (m* TLMessagesSendMedia) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 5)) != 0 { m.Silent = true }
    if (flags & (1 << 6)) != 0 { m.Background = true }
    if (flags & (1 << 7)) != 0 { m.ClearDraft = true }
    m5 := &InputPeer{}
    m5.Decode(dbuf)
    m.Peer = m5
    if (flags & (1 << 0)) != 0 { m.ReplyToMsgId = dbuf.Int() }
    m7 := &InputMedia{}
    m7.Decode(dbuf)
    m.Media = m7
    m.RandomId = dbuf.Long()
    if (flags & (1 << 2)) != 0 {
 m9 := &ReplyMarkup{}
    m9.Decode(dbuf)
    m.ReplyMarkup = m9 
}

return dbuf.err
}

func NewTLMessagesForwardMessages() * TLMessagesForwardMessages {
    return &TLMessagesForwardMessages{}
}

func (m* TLMessagesForwardMessages) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_forwardMessages))

    // flags
    var flags uint32 = 0
    if m.Silent == true { flags |= 1 << 5 }
    if m.Background == true { flags |= 1 << 6 }
    if m.WithMyScore == true { flags |= 1 << 8 }
	x.UInt(flags)

    
    
    
    x.Bytes(m.FromPeer.Encode())
    x.VectorInt(m.Id)

    x.VectorLong(m.RandomId)

    x.Bytes(m.ToPeer.Encode())

return x.buf
}

func (m* TLMessagesForwardMessages) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 5)) != 0 { m.Silent = true }
    if (flags & (1 << 6)) != 0 { m.Background = true }
    if (flags & (1 << 8)) != 0 { m.WithMyScore = true }
    m5 := &InputPeer{}
    m5.Decode(dbuf)
    m.FromPeer = m5
    m.Id = dbuf.VectorInt()
    m.RandomId = dbuf.VectorLong()
    m8 := &InputPeer{}
    m8.Decode(dbuf)
    m.ToPeer = m8

return dbuf.err
}

func NewTLMessagesReportSpam() * TLMessagesReportSpam {
    return &TLMessagesReportSpam{}
}

func (m* TLMessagesReportSpam) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_reportSpam))

    x.Bytes(m.Peer.Encode())

return x.buf
}

func (m* TLMessagesReportSpam) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1

return dbuf.err
}

func NewTLMessagesHideReportSpam() * TLMessagesHideReportSpam {
    return &TLMessagesHideReportSpam{}
}

func (m* TLMessagesHideReportSpam) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_hideReportSpam))

    x.Bytes(m.Peer.Encode())

return x.buf
}

func (m* TLMessagesHideReportSpam) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1

return dbuf.err
}

func NewTLMessagesGetPeerSettings() * TLMessagesGetPeerSettings {
    return &TLMessagesGetPeerSettings{}
}

func (m* TLMessagesGetPeerSettings) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getPeerSettings))

    x.Bytes(m.Peer.Encode())

return x.buf
}

func (m* TLMessagesGetPeerSettings) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1

return dbuf.err
}

func NewTLMessagesGetChats() * TLMessagesGetChats {
    return &TLMessagesGetChats{}
}

func (m* TLMessagesGetChats) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getChats))

    x.VectorInt(m.Id)


return x.buf
}

func (m* TLMessagesGetChats) Decode(dbuf *DecodeBuf) error {
    m.Id = dbuf.VectorInt()

return dbuf.err
}

func NewTLMessagesGetFullChat() * TLMessagesGetFullChat {
    return &TLMessagesGetFullChat{}
}

func (m* TLMessagesGetFullChat) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getFullChat))

    x.Int(m.ChatId)

return x.buf
}

func (m* TLMessagesGetFullChat) Decode(dbuf *DecodeBuf) error {
    m.ChatId = dbuf.Int()

return dbuf.err
}

func NewTLMessagesEditChatTitle() * TLMessagesEditChatTitle {
    return &TLMessagesEditChatTitle{}
}

func (m* TLMessagesEditChatTitle) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_editChatTitle))

    x.Int(m.ChatId)
    x.String(m.Title)

return x.buf
}

func (m* TLMessagesEditChatTitle) Decode(dbuf *DecodeBuf) error {
    m.ChatId = dbuf.Int()
    m.Title = dbuf.String()

return dbuf.err
}

func NewTLMessagesEditChatPhoto() * TLMessagesEditChatPhoto {
    return &TLMessagesEditChatPhoto{}
}

func (m* TLMessagesEditChatPhoto) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_editChatPhoto))

    x.Int(m.ChatId)
    x.Bytes(m.Photo.Encode())

return x.buf
}

func (m* TLMessagesEditChatPhoto) Decode(dbuf *DecodeBuf) error {
    m.ChatId = dbuf.Int()
    m2 := &InputChatPhoto{}
    m2.Decode(dbuf)
    m.Photo = m2

return dbuf.err
}

func NewTLMessagesAddChatUser() * TLMessagesAddChatUser {
    return &TLMessagesAddChatUser{}
}

func (m* TLMessagesAddChatUser) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_addChatUser))

    x.Int(m.ChatId)
    x.Bytes(m.UserId.Encode())
    x.Int(m.FwdLimit)

return x.buf
}

func (m* TLMessagesAddChatUser) Decode(dbuf *DecodeBuf) error {
    m.ChatId = dbuf.Int()
    m2 := &InputUser{}
    m2.Decode(dbuf)
    m.UserId = m2
    m.FwdLimit = dbuf.Int()

return dbuf.err
}

func NewTLMessagesDeleteChatUser() * TLMessagesDeleteChatUser {
    return &TLMessagesDeleteChatUser{}
}

func (m* TLMessagesDeleteChatUser) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_deleteChatUser))

    x.Int(m.ChatId)
    x.Bytes(m.UserId.Encode())

return x.buf
}

func (m* TLMessagesDeleteChatUser) Decode(dbuf *DecodeBuf) error {
    m.ChatId = dbuf.Int()
    m2 := &InputUser{}
    m2.Decode(dbuf)
    m.UserId = m2

return dbuf.err
}

func NewTLMessagesCreateChat() * TLMessagesCreateChat {
    return &TLMessagesCreateChat{}
}

func (m* TLMessagesCreateChat) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_createChat))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Users)))
for _, v := range m.Users {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.String(m.Title)

return x.buf
}

func (m* TLMessagesCreateChat) Decode(dbuf *DecodeBuf) error {
    dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l1 := dbuf.Int()
m.Users = make([]*InputUser, l1)
for i := int32(0); i < l1; i++ {
 m.Users[i] = &InputUser{}
 (*m.Users[i]).Decode(dbuf)
}
    m.Title = dbuf.String()

return dbuf.err
}

func NewTLMessagesForwardMessage() * TLMessagesForwardMessage {
    return &TLMessagesForwardMessage{}
}

func (m* TLMessagesForwardMessage) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_forwardMessage))

    x.Bytes(m.Peer.Encode())
    x.Int(m.Id)
    x.Long(m.RandomId)

return x.buf
}

func (m* TLMessagesForwardMessage) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.Id = dbuf.Int()
    m.RandomId = dbuf.Long()

return dbuf.err
}

func NewTLMessagesGetDhConfig() * TLMessagesGetDhConfig {
    return &TLMessagesGetDhConfig{}
}

func (m* TLMessagesGetDhConfig) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getDhConfig))

    x.Int(m.Version)
    x.Int(m.RandomLength)

return x.buf
}

func (m* TLMessagesGetDhConfig) Decode(dbuf *DecodeBuf) error {
    m.Version = dbuf.Int()
    m.RandomLength = dbuf.Int()

return dbuf.err
}

func NewTLMessagesRequestEncryption() * TLMessagesRequestEncryption {
    return &TLMessagesRequestEncryption{}
}

func (m* TLMessagesRequestEncryption) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_requestEncryption))

    x.Bytes(m.UserId.Encode())
    x.Int(m.RandomId)
    x.StringBytes(m.GA)

return x.buf
}

func (m* TLMessagesRequestEncryption) Decode(dbuf *DecodeBuf) error {
    m1 := &InputUser{}
    m1.Decode(dbuf)
    m.UserId = m1
    m.RandomId = dbuf.Int()
    m.GA = dbuf.StringBytes()

return dbuf.err
}

func NewTLMessagesAcceptEncryption() * TLMessagesAcceptEncryption {
    return &TLMessagesAcceptEncryption{}
}

func (m* TLMessagesAcceptEncryption) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_acceptEncryption))

    x.Bytes(m.Peer.Encode())
    x.StringBytes(m.GB)
    x.Long(m.KeyFingerprint)

return x.buf
}

func (m* TLMessagesAcceptEncryption) Decode(dbuf *DecodeBuf) error {
    m1 := &InputEncryptedChat{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.GB = dbuf.StringBytes()
    m.KeyFingerprint = dbuf.Long()

return dbuf.err
}

func NewTLMessagesDiscardEncryption() * TLMessagesDiscardEncryption {
    return &TLMessagesDiscardEncryption{}
}

func (m* TLMessagesDiscardEncryption) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_discardEncryption))

    x.Int(m.ChatId)

return x.buf
}

func (m* TLMessagesDiscardEncryption) Decode(dbuf *DecodeBuf) error {
    m.ChatId = dbuf.Int()

return dbuf.err
}

func NewTLMessagesSetEncryptedTyping() * TLMessagesSetEncryptedTyping {
    return &TLMessagesSetEncryptedTyping{}
}

func (m* TLMessagesSetEncryptedTyping) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_setEncryptedTyping))

    x.Bytes(m.Peer.Encode())
    x.Bytes(m.Typing.Encode())

return x.buf
}

func (m* TLMessagesSetEncryptedTyping) Decode(dbuf *DecodeBuf) error {
    m1 := &InputEncryptedChat{}
    m1.Decode(dbuf)
    m.Peer = m1
    m2 := &Bool{}
    m2.Decode(dbuf)
    m.Typing = m2

return dbuf.err
}

func NewTLMessagesReadEncryptedHistory() * TLMessagesReadEncryptedHistory {
    return &TLMessagesReadEncryptedHistory{}
}

func (m* TLMessagesReadEncryptedHistory) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_readEncryptedHistory))

    x.Bytes(m.Peer.Encode())
    x.Int(m.MaxDate)

return x.buf
}

func (m* TLMessagesReadEncryptedHistory) Decode(dbuf *DecodeBuf) error {
    m1 := &InputEncryptedChat{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.MaxDate = dbuf.Int()

return dbuf.err
}

func NewTLMessagesSendEncrypted() * TLMessagesSendEncrypted {
    return &TLMessagesSendEncrypted{}
}

func (m* TLMessagesSendEncrypted) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_sendEncrypted))

    x.Bytes(m.Peer.Encode())
    x.Long(m.RandomId)
    x.StringBytes(m.Data)

return x.buf
}

func (m* TLMessagesSendEncrypted) Decode(dbuf *DecodeBuf) error {
    m1 := &InputEncryptedChat{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.RandomId = dbuf.Long()
    m.Data = dbuf.StringBytes()

return dbuf.err
}

func NewTLMessagesSendEncryptedFile() * TLMessagesSendEncryptedFile {
    return &TLMessagesSendEncryptedFile{}
}

func (m* TLMessagesSendEncryptedFile) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_sendEncryptedFile))

    x.Bytes(m.Peer.Encode())
    x.Long(m.RandomId)
    x.StringBytes(m.Data)
    x.Bytes(m.File.Encode())

return x.buf
}

func (m* TLMessagesSendEncryptedFile) Decode(dbuf *DecodeBuf) error {
    m1 := &InputEncryptedChat{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.RandomId = dbuf.Long()
    m.Data = dbuf.StringBytes()
    m4 := &InputEncryptedFile{}
    m4.Decode(dbuf)
    m.File = m4

return dbuf.err
}

func NewTLMessagesSendEncryptedService() * TLMessagesSendEncryptedService {
    return &TLMessagesSendEncryptedService{}
}

func (m* TLMessagesSendEncryptedService) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_sendEncryptedService))

    x.Bytes(m.Peer.Encode())
    x.Long(m.RandomId)
    x.StringBytes(m.Data)

return x.buf
}

func (m* TLMessagesSendEncryptedService) Decode(dbuf *DecodeBuf) error {
    m1 := &InputEncryptedChat{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.RandomId = dbuf.Long()
    m.Data = dbuf.StringBytes()

return dbuf.err
}

func NewTLMessagesReceivedQueue() * TLMessagesReceivedQueue {
    return &TLMessagesReceivedQueue{}
}

func (m* TLMessagesReceivedQueue) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_receivedQueue))

    x.Int(m.MaxQts)

return x.buf
}

func (m* TLMessagesReceivedQueue) Decode(dbuf *DecodeBuf) error {
    m.MaxQts = dbuf.Int()

return dbuf.err
}

func NewTLMessagesReportEncryptedSpam() * TLMessagesReportEncryptedSpam {
    return &TLMessagesReportEncryptedSpam{}
}

func (m* TLMessagesReportEncryptedSpam) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_reportEncryptedSpam))

    x.Bytes(m.Peer.Encode())

return x.buf
}

func (m* TLMessagesReportEncryptedSpam) Decode(dbuf *DecodeBuf) error {
    m1 := &InputEncryptedChat{}
    m1.Decode(dbuf)
    m.Peer = m1

return dbuf.err
}

func NewTLMessagesReadMessageContents() * TLMessagesReadMessageContents {
    return &TLMessagesReadMessageContents{}
}

func (m* TLMessagesReadMessageContents) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_readMessageContents))

    x.VectorInt(m.Id)


return x.buf
}

func (m* TLMessagesReadMessageContents) Decode(dbuf *DecodeBuf) error {
    m.Id = dbuf.VectorInt()

return dbuf.err
}

func NewTLMessagesGetAllStickers() * TLMessagesGetAllStickers {
    return &TLMessagesGetAllStickers{}
}

func (m* TLMessagesGetAllStickers) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getAllStickers))

    x.Int(m.Hash)

return x.buf
}

func (m* TLMessagesGetAllStickers) Decode(dbuf *DecodeBuf) error {
    m.Hash = dbuf.Int()

return dbuf.err
}

func NewTLMessagesGetWebPagePreview() * TLMessagesGetWebPagePreview {
    return &TLMessagesGetWebPagePreview{}
}

func (m* TLMessagesGetWebPagePreview) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getWebPagePreview))

    x.String(m.Message)

return x.buf
}

func (m* TLMessagesGetWebPagePreview) Decode(dbuf *DecodeBuf) error {
    m.Message = dbuf.String()

return dbuf.err
}

func NewTLMessagesExportChatInvite() * TLMessagesExportChatInvite {
    return &TLMessagesExportChatInvite{}
}

func (m* TLMessagesExportChatInvite) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_exportChatInvite))

    x.Int(m.ChatId)

return x.buf
}

func (m* TLMessagesExportChatInvite) Decode(dbuf *DecodeBuf) error {
    m.ChatId = dbuf.Int()

return dbuf.err
}

func NewTLMessagesCheckChatInvite() * TLMessagesCheckChatInvite {
    return &TLMessagesCheckChatInvite{}
}

func (m* TLMessagesCheckChatInvite) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_checkChatInvite))

    x.String(m.Hash)

return x.buf
}

func (m* TLMessagesCheckChatInvite) Decode(dbuf *DecodeBuf) error {
    m.Hash = dbuf.String()

return dbuf.err
}

func NewTLMessagesImportChatInvite() * TLMessagesImportChatInvite {
    return &TLMessagesImportChatInvite{}
}

func (m* TLMessagesImportChatInvite) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_importChatInvite))

    x.String(m.Hash)

return x.buf
}

func (m* TLMessagesImportChatInvite) Decode(dbuf *DecodeBuf) error {
    m.Hash = dbuf.String()

return dbuf.err
}

func NewTLMessagesGetStickerSet() * TLMessagesGetStickerSet {
    return &TLMessagesGetStickerSet{}
}

func (m* TLMessagesGetStickerSet) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getStickerSet))

    x.Bytes(m.Stickerset.Encode())

return x.buf
}

func (m* TLMessagesGetStickerSet) Decode(dbuf *DecodeBuf) error {
    m1 := &InputStickerSet{}
    m1.Decode(dbuf)
    m.Stickerset = m1

return dbuf.err
}

func NewTLMessagesInstallStickerSet() * TLMessagesInstallStickerSet {
    return &TLMessagesInstallStickerSet{}
}

func (m* TLMessagesInstallStickerSet) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_installStickerSet))

    x.Bytes(m.Stickerset.Encode())
    x.Bytes(m.Archived.Encode())

return x.buf
}

func (m* TLMessagesInstallStickerSet) Decode(dbuf *DecodeBuf) error {
    m1 := &InputStickerSet{}
    m1.Decode(dbuf)
    m.Stickerset = m1
    m2 := &Bool{}
    m2.Decode(dbuf)
    m.Archived = m2

return dbuf.err
}

func NewTLMessagesUninstallStickerSet() * TLMessagesUninstallStickerSet {
    return &TLMessagesUninstallStickerSet{}
}

func (m* TLMessagesUninstallStickerSet) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_uninstallStickerSet))

    x.Bytes(m.Stickerset.Encode())

return x.buf
}

func (m* TLMessagesUninstallStickerSet) Decode(dbuf *DecodeBuf) error {
    m1 := &InputStickerSet{}
    m1.Decode(dbuf)
    m.Stickerset = m1

return dbuf.err
}

func NewTLMessagesStartBot() * TLMessagesStartBot {
    return &TLMessagesStartBot{}
}

func (m* TLMessagesStartBot) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_startBot))

    x.Bytes(m.Bot.Encode())
    x.Bytes(m.Peer.Encode())
    x.Long(m.RandomId)
    x.String(m.StartParam)

return x.buf
}

func (m* TLMessagesStartBot) Decode(dbuf *DecodeBuf) error {
    m1 := &InputUser{}
    m1.Decode(dbuf)
    m.Bot = m1
    m2 := &InputPeer{}
    m2.Decode(dbuf)
    m.Peer = m2
    m.RandomId = dbuf.Long()
    m.StartParam = dbuf.String()

return dbuf.err
}

func NewTLMessagesGetMessagesViews() * TLMessagesGetMessagesViews {
    return &TLMessagesGetMessagesViews{}
}

func (m* TLMessagesGetMessagesViews) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getMessagesViews))

    x.Bytes(m.Peer.Encode())
    x.VectorInt(m.Id)

    x.Bytes(m.Increment.Encode())

return x.buf
}

func (m* TLMessagesGetMessagesViews) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.Id = dbuf.VectorInt()
    m3 := &Bool{}
    m3.Decode(dbuf)
    m.Increment = m3

return dbuf.err
}

func NewTLMessagesToggleChatAdmins() * TLMessagesToggleChatAdmins {
    return &TLMessagesToggleChatAdmins{}
}

func (m* TLMessagesToggleChatAdmins) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_toggleChatAdmins))

    x.Int(m.ChatId)
    x.Bytes(m.Enabled.Encode())

return x.buf
}

func (m* TLMessagesToggleChatAdmins) Decode(dbuf *DecodeBuf) error {
    m.ChatId = dbuf.Int()
    m2 := &Bool{}
    m2.Decode(dbuf)
    m.Enabled = m2

return dbuf.err
}

func NewTLMessagesEditChatAdmin() * TLMessagesEditChatAdmin {
    return &TLMessagesEditChatAdmin{}
}

func (m* TLMessagesEditChatAdmin) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_editChatAdmin))

    x.Int(m.ChatId)
    x.Bytes(m.UserId.Encode())
    x.Bytes(m.IsAdmin.Encode())

return x.buf
}

func (m* TLMessagesEditChatAdmin) Decode(dbuf *DecodeBuf) error {
    m.ChatId = dbuf.Int()
    m2 := &InputUser{}
    m2.Decode(dbuf)
    m.UserId = m2
    m3 := &Bool{}
    m3.Decode(dbuf)
    m.IsAdmin = m3

return dbuf.err
}

func NewTLMessagesMigrateChat() * TLMessagesMigrateChat {
    return &TLMessagesMigrateChat{}
}

func (m* TLMessagesMigrateChat) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_migrateChat))

    x.Int(m.ChatId)

return x.buf
}

func (m* TLMessagesMigrateChat) Decode(dbuf *DecodeBuf) error {
    m.ChatId = dbuf.Int()

return dbuf.err
}

func NewTLMessagesSearchGlobal() * TLMessagesSearchGlobal {
    return &TLMessagesSearchGlobal{}
}

func (m* TLMessagesSearchGlobal) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_searchGlobal))

    x.String(m.Q)
    x.Int(m.OffsetDate)
    x.Bytes(m.OffsetPeer.Encode())
    x.Int(m.OffsetId)
    x.Int(m.Limit)

return x.buf
}

func (m* TLMessagesSearchGlobal) Decode(dbuf *DecodeBuf) error {
    m.Q = dbuf.String()
    m.OffsetDate = dbuf.Int()
    m3 := &InputPeer{}
    m3.Decode(dbuf)
    m.OffsetPeer = m3
    m.OffsetId = dbuf.Int()
    m.Limit = dbuf.Int()

return dbuf.err
}

func NewTLMessagesReorderStickerSets() * TLMessagesReorderStickerSets {
    return &TLMessagesReorderStickerSets{}
}

func (m* TLMessagesReorderStickerSets) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_reorderStickerSets))

    // flags
    var flags uint32 = 0
    if m.Masks == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.VectorLong(m.Order)


return x.buf
}

func (m* TLMessagesReorderStickerSets) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Masks = true }
    m.Order = dbuf.VectorLong()

return dbuf.err
}

func NewTLMessagesGetDocumentByHash() * TLMessagesGetDocumentByHash {
    return &TLMessagesGetDocumentByHash{}
}

func (m* TLMessagesGetDocumentByHash) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getDocumentByHash))

    x.StringBytes(m.Sha256)
    x.Int(m.Size_)
    x.String(m.MimeType)

return x.buf
}

func (m* TLMessagesGetDocumentByHash) Decode(dbuf *DecodeBuf) error {
    m.Sha256 = dbuf.StringBytes()
    m.Size_ = dbuf.Int()
    m.MimeType = dbuf.String()

return dbuf.err
}

func NewTLMessagesSearchGifs() * TLMessagesSearchGifs {
    return &TLMessagesSearchGifs{}
}

func (m* TLMessagesSearchGifs) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_searchGifs))

    x.String(m.Q)
    x.Int(m.Offset)

return x.buf
}

func (m* TLMessagesSearchGifs) Decode(dbuf *DecodeBuf) error {
    m.Q = dbuf.String()
    m.Offset = dbuf.Int()

return dbuf.err
}

func NewTLMessagesGetSavedGifs() * TLMessagesGetSavedGifs {
    return &TLMessagesGetSavedGifs{}
}

func (m* TLMessagesGetSavedGifs) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getSavedGifs))

    x.Int(m.Hash)

return x.buf
}

func (m* TLMessagesGetSavedGifs) Decode(dbuf *DecodeBuf) error {
    m.Hash = dbuf.Int()

return dbuf.err
}

func NewTLMessagesSaveGif() * TLMessagesSaveGif {
    return &TLMessagesSaveGif{}
}

func (m* TLMessagesSaveGif) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_saveGif))

    x.Bytes(m.Id.Encode())
    x.Bytes(m.Unsave.Encode())

return x.buf
}

func (m* TLMessagesSaveGif) Decode(dbuf *DecodeBuf) error {
    m1 := &InputDocument{}
    m1.Decode(dbuf)
    m.Id = m1
    m2 := &Bool{}
    m2.Decode(dbuf)
    m.Unsave = m2

return dbuf.err
}

func NewTLMessagesGetInlineBotResults() * TLMessagesGetInlineBotResults {
    return &TLMessagesGetInlineBotResults{}
}

func (m* TLMessagesGetInlineBotResults) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getInlineBotResults))

    // flags
    var flags uint32 = 0
    if m.GeoPoint != nil { flags |= 1 << 0 }
	x.UInt(flags)

    x.Bytes(m.Bot.Encode())
    x.Bytes(m.Peer.Encode())
    if m.GeoPoint != nil {
 x.Bytes(m.GeoPoint.Encode()) 
}
    x.String(m.Query)
    x.String(m.Offset)

return x.buf
}

func (m* TLMessagesGetInlineBotResults) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    m2 := &InputUser{}
    m2.Decode(dbuf)
    m.Bot = m2
    m3 := &InputPeer{}
    m3.Decode(dbuf)
    m.Peer = m3
    if (flags & (1 << 0)) != 0 {
 m4 := &InputGeoPoint{}
    m4.Decode(dbuf)
    m.GeoPoint = m4 
}
    m.Query = dbuf.String()
    m.Offset = dbuf.String()

return dbuf.err
}

func NewTLMessagesSetInlineBotResults() * TLMessagesSetInlineBotResults {
    return &TLMessagesSetInlineBotResults{}
}

func (m* TLMessagesSetInlineBotResults) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_setInlineBotResults))

    // flags
    var flags uint32 = 0
    if m.Gallery == true { flags |= 1 << 0 }
    if m.Private == true { flags |= 1 << 1 }
    if m.NextOffset != "" { flags |= 1 << 2 }
    if m.SwitchPm != nil { flags |= 1 << 3 }
	x.UInt(flags)

    
    
    x.Long(m.QueryId)
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Results)))
for _, v := range m.Results {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Int(m.CacheTime)
    if m.NextOffset != "" { x.String(m.NextOffset) }
    if m.SwitchPm != nil {
 x.Bytes(m.SwitchPm.Encode()) 
}

return x.buf
}

func (m* TLMessagesSetInlineBotResults) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Gallery = true }
    if (flags & (1 << 1)) != 0 { m.Private = true }
    m.QueryId = dbuf.Long()
    dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l5 := dbuf.Int()
m.Results = make([]*InputBotInlineResult, l5)
for i := int32(0); i < l5; i++ {
 m.Results[i] = &InputBotInlineResult{}
 (*m.Results[i]).Decode(dbuf)
}
    m.CacheTime = dbuf.Int()
    if (flags & (1 << 2)) != 0 { m.NextOffset = dbuf.String() }
    if (flags & (1 << 3)) != 0 {
 m8 := &InlineBotSwitchPM{}
    m8.Decode(dbuf)
    m.SwitchPm = m8 
}

return dbuf.err
}

func NewTLMessagesSendInlineBotResult() * TLMessagesSendInlineBotResult {
    return &TLMessagesSendInlineBotResult{}
}

func (m* TLMessagesSendInlineBotResult) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_sendInlineBotResult))

    // flags
    var flags uint32 = 0
    if m.Silent == true { flags |= 1 << 5 }
    if m.Background == true { flags |= 1 << 6 }
    if m.ClearDraft == true { flags |= 1 << 7 }
    if m.ReplyToMsgId != 0 { flags |= 1 << 0 }
	x.UInt(flags)

    
    
    
    x.Bytes(m.Peer.Encode())
    if m.ReplyToMsgId != 0 { x.Int(m.ReplyToMsgId) }
    x.Long(m.RandomId)
    x.Long(m.QueryId)
    x.String(m.Id)

return x.buf
}

func (m* TLMessagesSendInlineBotResult) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 5)) != 0 { m.Silent = true }
    if (flags & (1 << 6)) != 0 { m.Background = true }
    if (flags & (1 << 7)) != 0 { m.ClearDraft = true }
    m5 := &InputPeer{}
    m5.Decode(dbuf)
    m.Peer = m5
    if (flags & (1 << 0)) != 0 { m.ReplyToMsgId = dbuf.Int() }
    m.RandomId = dbuf.Long()
    m.QueryId = dbuf.Long()
    m.Id = dbuf.String()

return dbuf.err
}

func NewTLMessagesGetMessageEditData() * TLMessagesGetMessageEditData {
    return &TLMessagesGetMessageEditData{}
}

func (m* TLMessagesGetMessageEditData) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getMessageEditData))

    x.Bytes(m.Peer.Encode())
    x.Int(m.Id)

return x.buf
}

func (m* TLMessagesGetMessageEditData) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.Id = dbuf.Int()

return dbuf.err
}

func NewTLMessagesEditMessage() * TLMessagesEditMessage {
    return &TLMessagesEditMessage{}
}

func (m* TLMessagesEditMessage) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_editMessage))

    // flags
    var flags uint32 = 0
    if m.NoWebpage == true { flags |= 1 << 1 }
    if m.Message != "" { flags |= 1 << 11 }
    if m.ReplyMarkup != nil { flags |= 1 << 2 }
    if m.Entities != nil { flags |= 1 << 3 }
	x.UInt(flags)

    
    x.Bytes(m.Peer.Encode())
    x.Int(m.Id)
    if m.Message != "" { x.String(m.Message) }
    if m.ReplyMarkup != nil {
 x.Bytes(m.ReplyMarkup.Encode()) 
}
    if m.Entities != nil {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Entities)))
for _, v := range m.Entities {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}

return x.buf
}

func (m* TLMessagesEditMessage) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 1)) != 0 { m.NoWebpage = true }
    m3 := &InputPeer{}
    m3.Decode(dbuf)
    m.Peer = m3
    m.Id = dbuf.Int()
    if (flags & (1 << 11)) != 0 { m.Message = dbuf.String() }
    if (flags & (1 << 2)) != 0 {
 m6 := &ReplyMarkup{}
    m6.Decode(dbuf)
    m.ReplyMarkup = m6 
}
    if (flags & (1 << 3)) != 0 {
 dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l7 := dbuf.Int()
m.Entities = make([]*MessageEntity, l7)
for i := int32(0); i < l7; i++ {
 m.Entities[i] = &MessageEntity{}
 (*m.Entities[i]).Decode(dbuf)
} 
}

return dbuf.err
}

func NewTLMessagesEditInlineBotMessage() * TLMessagesEditInlineBotMessage {
    return &TLMessagesEditInlineBotMessage{}
}

func (m* TLMessagesEditInlineBotMessage) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_editInlineBotMessage))

    // flags
    var flags uint32 = 0
    if m.NoWebpage == true { flags |= 1 << 1 }
    if m.Message != "" { flags |= 1 << 11 }
    if m.ReplyMarkup != nil { flags |= 1 << 2 }
    if m.Entities != nil { flags |= 1 << 3 }
	x.UInt(flags)

    
    x.Bytes(m.Id.Encode())
    if m.Message != "" { x.String(m.Message) }
    if m.ReplyMarkup != nil {
 x.Bytes(m.ReplyMarkup.Encode()) 
}
    if m.Entities != nil {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Entities)))
for _, v := range m.Entities {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}

return x.buf
}

func (m* TLMessagesEditInlineBotMessage) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 1)) != 0 { m.NoWebpage = true }
    m3 := &InputBotInlineMessageID{}
    m3.Decode(dbuf)
    m.Id = m3
    if (flags & (1 << 11)) != 0 { m.Message = dbuf.String() }
    if (flags & (1 << 2)) != 0 {
 m5 := &ReplyMarkup{}
    m5.Decode(dbuf)
    m.ReplyMarkup = m5 
}
    if (flags & (1 << 3)) != 0 {
 dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l6 := dbuf.Int()
m.Entities = make([]*MessageEntity, l6)
for i := int32(0); i < l6; i++ {
 m.Entities[i] = &MessageEntity{}
 (*m.Entities[i]).Decode(dbuf)
} 
}

return dbuf.err
}

func NewTLMessagesGetBotCallbackAnswer() * TLMessagesGetBotCallbackAnswer {
    return &TLMessagesGetBotCallbackAnswer{}
}

func (m* TLMessagesGetBotCallbackAnswer) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getBotCallbackAnswer))

    // flags
    var flags uint32 = 0
    if m.Game == true { flags |= 1 << 1 }
    if m.Data != nil { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Bytes(m.Peer.Encode())
    x.Int(m.MsgId)
    if m.Data != nil {
 x.StringBytes(m.Data) 
}

return x.buf
}

func (m* TLMessagesGetBotCallbackAnswer) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 1)) != 0 { m.Game = true }
    m3 := &InputPeer{}
    m3.Decode(dbuf)
    m.Peer = m3
    m.MsgId = dbuf.Int()
    if (flags & (1 << 0)) != 0 {
 m.Data = dbuf.StringBytes() 
}

return dbuf.err
}

func NewTLMessagesSetBotCallbackAnswer() * TLMessagesSetBotCallbackAnswer {
    return &TLMessagesSetBotCallbackAnswer{}
}

func (m* TLMessagesSetBotCallbackAnswer) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_setBotCallbackAnswer))

    // flags
    var flags uint32 = 0
    if m.Alert == true { flags |= 1 << 1 }
    if m.Message != "" { flags |= 1 << 0 }
    if m.Url != "" { flags |= 1 << 2 }
	x.UInt(flags)

    
    x.Long(m.QueryId)
    if m.Message != "" { x.String(m.Message) }
    if m.Url != "" { x.String(m.Url) }
    x.Int(m.CacheTime)

return x.buf
}

func (m* TLMessagesSetBotCallbackAnswer) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 1)) != 0 { m.Alert = true }
    m.QueryId = dbuf.Long()
    if (flags & (1 << 0)) != 0 { m.Message = dbuf.String() }
    if (flags & (1 << 2)) != 0 { m.Url = dbuf.String() }
    m.CacheTime = dbuf.Int()

return dbuf.err
}

func NewTLMessagesGetPeerDialogs() * TLMessagesGetPeerDialogs {
    return &TLMessagesGetPeerDialogs{}
}

func (m* TLMessagesGetPeerDialogs) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getPeerDialogs))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Peers)))
for _, v := range m.Peers {
  x.buf = append(x.buf, (*v).Encode()...)
}

return x.buf
}

func (m* TLMessagesGetPeerDialogs) Decode(dbuf *DecodeBuf) error {
    dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l1 := dbuf.Int()
m.Peers = make([]*InputPeer, l1)
for i := int32(0); i < l1; i++ {
 m.Peers[i] = &InputPeer{}
 (*m.Peers[i]).Decode(dbuf)
}

return dbuf.err
}

func NewTLMessagesSaveDraft() * TLMessagesSaveDraft {
    return &TLMessagesSaveDraft{}
}

func (m* TLMessagesSaveDraft) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_saveDraft))

    // flags
    var flags uint32 = 0
    if m.NoWebpage == true { flags |= 1 << 1 }
    if m.ReplyToMsgId != 0 { flags |= 1 << 0 }
    if m.Entities != nil { flags |= 1 << 3 }
	x.UInt(flags)

    
    if m.ReplyToMsgId != 0 { x.Int(m.ReplyToMsgId) }
    x.Bytes(m.Peer.Encode())
    x.String(m.Message)
    if m.Entities != nil {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Entities)))
for _, v := range m.Entities {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}

return x.buf
}

func (m* TLMessagesSaveDraft) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 1)) != 0 { m.NoWebpage = true }
    if (flags & (1 << 0)) != 0 { m.ReplyToMsgId = dbuf.Int() }
    m4 := &InputPeer{}
    m4.Decode(dbuf)
    m.Peer = m4
    m.Message = dbuf.String()
    if (flags & (1 << 3)) != 0 {
 dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l6 := dbuf.Int()
m.Entities = make([]*MessageEntity, l6)
for i := int32(0); i < l6; i++ {
 m.Entities[i] = &MessageEntity{}
 (*m.Entities[i]).Decode(dbuf)
} 
}

return dbuf.err
}

func NewTLMessagesGetAllDrafts() * TLMessagesGetAllDrafts {
    return &TLMessagesGetAllDrafts{}
}

func (m* TLMessagesGetAllDrafts) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getAllDrafts))


return x.buf
}

func (m* TLMessagesGetAllDrafts) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLMessagesGetFeaturedStickers() * TLMessagesGetFeaturedStickers {
    return &TLMessagesGetFeaturedStickers{}
}

func (m* TLMessagesGetFeaturedStickers) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getFeaturedStickers))

    x.Int(m.Hash)

return x.buf
}

func (m* TLMessagesGetFeaturedStickers) Decode(dbuf *DecodeBuf) error {
    m.Hash = dbuf.Int()

return dbuf.err
}

func NewTLMessagesReadFeaturedStickers() * TLMessagesReadFeaturedStickers {
    return &TLMessagesReadFeaturedStickers{}
}

func (m* TLMessagesReadFeaturedStickers) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_readFeaturedStickers))

    x.VectorLong(m.Id)


return x.buf
}

func (m* TLMessagesReadFeaturedStickers) Decode(dbuf *DecodeBuf) error {
    m.Id = dbuf.VectorLong()

return dbuf.err
}

func NewTLMessagesGetRecentStickers() * TLMessagesGetRecentStickers {
    return &TLMessagesGetRecentStickers{}
}

func (m* TLMessagesGetRecentStickers) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getRecentStickers))

    // flags
    var flags uint32 = 0
    if m.Attached == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Int(m.Hash)

return x.buf
}

func (m* TLMessagesGetRecentStickers) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Attached = true }
    m.Hash = dbuf.Int()

return dbuf.err
}

func NewTLMessagesSaveRecentSticker() * TLMessagesSaveRecentSticker {
    return &TLMessagesSaveRecentSticker{}
}

func (m* TLMessagesSaveRecentSticker) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_saveRecentSticker))

    // flags
    var flags uint32 = 0
    if m.Attached == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Bytes(m.Id.Encode())
    x.Bytes(m.Unsave.Encode())

return x.buf
}

func (m* TLMessagesSaveRecentSticker) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Attached = true }
    m3 := &InputDocument{}
    m3.Decode(dbuf)
    m.Id = m3
    m4 := &Bool{}
    m4.Decode(dbuf)
    m.Unsave = m4

return dbuf.err
}

func NewTLMessagesClearRecentStickers() * TLMessagesClearRecentStickers {
    return &TLMessagesClearRecentStickers{}
}

func (m* TLMessagesClearRecentStickers) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_clearRecentStickers))

    // flags
    var flags uint32 = 0
    if m.Attached == true { flags |= 1 << 0 }
	x.UInt(flags)

    

return x.buf
}

func (m* TLMessagesClearRecentStickers) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Attached = true }

return dbuf.err
}

func NewTLMessagesGetArchivedStickers() * TLMessagesGetArchivedStickers {
    return &TLMessagesGetArchivedStickers{}
}

func (m* TLMessagesGetArchivedStickers) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getArchivedStickers))

    // flags
    var flags uint32 = 0
    if m.Masks == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Long(m.OffsetId)
    x.Int(m.Limit)

return x.buf
}

func (m* TLMessagesGetArchivedStickers) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Masks = true }
    m.OffsetId = dbuf.Long()
    m.Limit = dbuf.Int()

return dbuf.err
}

func NewTLMessagesGetMaskStickers() * TLMessagesGetMaskStickers {
    return &TLMessagesGetMaskStickers{}
}

func (m* TLMessagesGetMaskStickers) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getMaskStickers))

    x.Int(m.Hash)

return x.buf
}

func (m* TLMessagesGetMaskStickers) Decode(dbuf *DecodeBuf) error {
    m.Hash = dbuf.Int()

return dbuf.err
}

func NewTLMessagesGetAttachedStickers() * TLMessagesGetAttachedStickers {
    return &TLMessagesGetAttachedStickers{}
}

func (m* TLMessagesGetAttachedStickers) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getAttachedStickers))

    x.Bytes(m.Media.Encode())

return x.buf
}

func (m* TLMessagesGetAttachedStickers) Decode(dbuf *DecodeBuf) error {
    m1 := &InputStickeredMedia{}
    m1.Decode(dbuf)
    m.Media = m1

return dbuf.err
}

func NewTLMessagesSetGameScore() * TLMessagesSetGameScore {
    return &TLMessagesSetGameScore{}
}

func (m* TLMessagesSetGameScore) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_setGameScore))

    // flags
    var flags uint32 = 0
    if m.EditMessage == true { flags |= 1 << 0 }
    if m.Force == true { flags |= 1 << 1 }
	x.UInt(flags)

    
    
    x.Bytes(m.Peer.Encode())
    x.Int(m.Id)
    x.Bytes(m.UserId.Encode())
    x.Int(m.Score)

return x.buf
}

func (m* TLMessagesSetGameScore) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.EditMessage = true }
    if (flags & (1 << 1)) != 0 { m.Force = true }
    m4 := &InputPeer{}
    m4.Decode(dbuf)
    m.Peer = m4
    m.Id = dbuf.Int()
    m6 := &InputUser{}
    m6.Decode(dbuf)
    m.UserId = m6
    m.Score = dbuf.Int()

return dbuf.err
}

func NewTLMessagesSetInlineGameScore() * TLMessagesSetInlineGameScore {
    return &TLMessagesSetInlineGameScore{}
}

func (m* TLMessagesSetInlineGameScore) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_setInlineGameScore))

    // flags
    var flags uint32 = 0
    if m.EditMessage == true { flags |= 1 << 0 }
    if m.Force == true { flags |= 1 << 1 }
	x.UInt(flags)

    
    
    x.Bytes(m.Id.Encode())
    x.Bytes(m.UserId.Encode())
    x.Int(m.Score)

return x.buf
}

func (m* TLMessagesSetInlineGameScore) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.EditMessage = true }
    if (flags & (1 << 1)) != 0 { m.Force = true }
    m4 := &InputBotInlineMessageID{}
    m4.Decode(dbuf)
    m.Id = m4
    m5 := &InputUser{}
    m5.Decode(dbuf)
    m.UserId = m5
    m.Score = dbuf.Int()

return dbuf.err
}

func NewTLMessagesGetGameHighScores() * TLMessagesGetGameHighScores {
    return &TLMessagesGetGameHighScores{}
}

func (m* TLMessagesGetGameHighScores) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getGameHighScores))

    x.Bytes(m.Peer.Encode())
    x.Int(m.Id)
    x.Bytes(m.UserId.Encode())

return x.buf
}

func (m* TLMessagesGetGameHighScores) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.Id = dbuf.Int()
    m3 := &InputUser{}
    m3.Decode(dbuf)
    m.UserId = m3

return dbuf.err
}

func NewTLMessagesGetInlineGameHighScores() * TLMessagesGetInlineGameHighScores {
    return &TLMessagesGetInlineGameHighScores{}
}

func (m* TLMessagesGetInlineGameHighScores) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getInlineGameHighScores))

    x.Bytes(m.Id.Encode())
    x.Bytes(m.UserId.Encode())

return x.buf
}

func (m* TLMessagesGetInlineGameHighScores) Decode(dbuf *DecodeBuf) error {
    m1 := &InputBotInlineMessageID{}
    m1.Decode(dbuf)
    m.Id = m1
    m2 := &InputUser{}
    m2.Decode(dbuf)
    m.UserId = m2

return dbuf.err
}

func NewTLMessagesGetCommonChats() * TLMessagesGetCommonChats {
    return &TLMessagesGetCommonChats{}
}

func (m* TLMessagesGetCommonChats) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getCommonChats))

    x.Bytes(m.UserId.Encode())
    x.Int(m.MaxId)
    x.Int(m.Limit)

return x.buf
}

func (m* TLMessagesGetCommonChats) Decode(dbuf *DecodeBuf) error {
    m1 := &InputUser{}
    m1.Decode(dbuf)
    m.UserId = m1
    m.MaxId = dbuf.Int()
    m.Limit = dbuf.Int()

return dbuf.err
}

func NewTLMessagesGetAllChats() * TLMessagesGetAllChats {
    return &TLMessagesGetAllChats{}
}

func (m* TLMessagesGetAllChats) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getAllChats))

    x.VectorInt(m.ExceptIds)


return x.buf
}

func (m* TLMessagesGetAllChats) Decode(dbuf *DecodeBuf) error {
    m.ExceptIds = dbuf.VectorInt()

return dbuf.err
}

func NewTLMessagesGetWebPage() * TLMessagesGetWebPage {
    return &TLMessagesGetWebPage{}
}

func (m* TLMessagesGetWebPage) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getWebPage))

    x.String(m.Url)
    x.Int(m.Hash)

return x.buf
}

func (m* TLMessagesGetWebPage) Decode(dbuf *DecodeBuf) error {
    m.Url = dbuf.String()
    m.Hash = dbuf.Int()

return dbuf.err
}

func NewTLMessagesToggleDialogPin() * TLMessagesToggleDialogPin {
    return &TLMessagesToggleDialogPin{}
}

func (m* TLMessagesToggleDialogPin) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_toggleDialogPin))

    // flags
    var flags uint32 = 0
    if m.Pinned == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Bytes(m.Peer.Encode())

return x.buf
}

func (m* TLMessagesToggleDialogPin) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Pinned = true }
    m3 := &InputPeer{}
    m3.Decode(dbuf)
    m.Peer = m3

return dbuf.err
}

func NewTLMessagesReorderPinnedDialogs() * TLMessagesReorderPinnedDialogs {
    return &TLMessagesReorderPinnedDialogs{}
}

func (m* TLMessagesReorderPinnedDialogs) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_reorderPinnedDialogs))

    // flags
    var flags uint32 = 0
    if m.Force == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Order)))
for _, v := range m.Order {
  x.buf = append(x.buf, (*v).Encode()...)
}

return x.buf
}

func (m* TLMessagesReorderPinnedDialogs) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Force = true }
    dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l3 := dbuf.Int()
m.Order = make([]*InputPeer, l3)
for i := int32(0); i < l3; i++ {
 m.Order[i] = &InputPeer{}
 (*m.Order[i]).Decode(dbuf)
}

return dbuf.err
}

func NewTLMessagesGetPinnedDialogs() * TLMessagesGetPinnedDialogs {
    return &TLMessagesGetPinnedDialogs{}
}

func (m* TLMessagesGetPinnedDialogs) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getPinnedDialogs))


return x.buf
}

func (m* TLMessagesGetPinnedDialogs) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLMessagesSetBotShippingResults() * TLMessagesSetBotShippingResults {
    return &TLMessagesSetBotShippingResults{}
}

func (m* TLMessagesSetBotShippingResults) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_setBotShippingResults))

    // flags
    var flags uint32 = 0
    if m.Error != "" { flags |= 1 << 0 }
    if m.ShippingOptions != nil { flags |= 1 << 1 }
	x.UInt(flags)

    x.Long(m.QueryId)
    if m.Error != "" { x.String(m.Error) }
    if m.ShippingOptions != nil {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.ShippingOptions)))
for _, v := range m.ShippingOptions {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}

return x.buf
}

func (m* TLMessagesSetBotShippingResults) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    m.QueryId = dbuf.Long()
    if (flags & (1 << 0)) != 0 { m.Error = dbuf.String() }
    if (flags & (1 << 1)) != 0 {
 dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l4 := dbuf.Int()
m.ShippingOptions = make([]*ShippingOption, l4)
for i := int32(0); i < l4; i++ {
 m.ShippingOptions[i] = &ShippingOption{}
 (*m.ShippingOptions[i]).Decode(dbuf)
} 
}

return dbuf.err
}

func NewTLMessagesSetBotPrecheckoutResults() * TLMessagesSetBotPrecheckoutResults {
    return &TLMessagesSetBotPrecheckoutResults{}
}

func (m* TLMessagesSetBotPrecheckoutResults) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_setBotPrecheckoutResults))

    // flags
    var flags uint32 = 0
    if m.Success == true { flags |= 1 << 1 }
    if m.Error != "" { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Long(m.QueryId)
    if m.Error != "" { x.String(m.Error) }

return x.buf
}

func (m* TLMessagesSetBotPrecheckoutResults) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 1)) != 0 { m.Success = true }
    m.QueryId = dbuf.Long()
    if (flags & (1 << 0)) != 0 { m.Error = dbuf.String() }

return dbuf.err
}

func NewTLMessagesUploadMedia() * TLMessagesUploadMedia {
    return &TLMessagesUploadMedia{}
}

func (m* TLMessagesUploadMedia) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_uploadMedia))

    x.Bytes(m.Peer.Encode())
    x.Bytes(m.Media.Encode())

return x.buf
}

func (m* TLMessagesUploadMedia) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1
    m2 := &InputMedia{}
    m2.Decode(dbuf)
    m.Media = m2

return dbuf.err
}

func NewTLMessagesSendScreenshotNotification() * TLMessagesSendScreenshotNotification {
    return &TLMessagesSendScreenshotNotification{}
}

func (m* TLMessagesSendScreenshotNotification) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_sendScreenshotNotification))

    x.Bytes(m.Peer.Encode())
    x.Int(m.ReplyToMsgId)
    x.Long(m.RandomId)

return x.buf
}

func (m* TLMessagesSendScreenshotNotification) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.ReplyToMsgId = dbuf.Int()
    m.RandomId = dbuf.Long()

return dbuf.err
}

func NewTLMessagesGetFavedStickers() * TLMessagesGetFavedStickers {
    return &TLMessagesGetFavedStickers{}
}

func (m* TLMessagesGetFavedStickers) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getFavedStickers))

    x.Int(m.Hash)

return x.buf
}

func (m* TLMessagesGetFavedStickers) Decode(dbuf *DecodeBuf) error {
    m.Hash = dbuf.Int()

return dbuf.err
}

func NewTLMessagesFaveSticker() * TLMessagesFaveSticker {
    return &TLMessagesFaveSticker{}
}

func (m* TLMessagesFaveSticker) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_faveSticker))

    x.Bytes(m.Id.Encode())
    x.Bytes(m.Unfave.Encode())

return x.buf
}

func (m* TLMessagesFaveSticker) Decode(dbuf *DecodeBuf) error {
    m1 := &InputDocument{}
    m1.Decode(dbuf)
    m.Id = m1
    m2 := &Bool{}
    m2.Decode(dbuf)
    m.Unfave = m2

return dbuf.err
}

func NewTLMessagesGetUnreadMentions() * TLMessagesGetUnreadMentions {
    return &TLMessagesGetUnreadMentions{}
}

func (m* TLMessagesGetUnreadMentions) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getUnreadMentions))

    x.Bytes(m.Peer.Encode())
    x.Int(m.OffsetId)
    x.Int(m.AddOffset)
    x.Int(m.Limit)
    x.Int(m.MaxId)
    x.Int(m.MinId)

return x.buf
}

func (m* TLMessagesGetUnreadMentions) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.OffsetId = dbuf.Int()
    m.AddOffset = dbuf.Int()
    m.Limit = dbuf.Int()
    m.MaxId = dbuf.Int()
    m.MinId = dbuf.Int()

return dbuf.err
}

func NewTLUpdatesGetState() * TLUpdatesGetState {
    return &TLUpdatesGetState{}
}

func (m* TLUpdatesGetState) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_updates_getState))


return x.buf
}

func (m* TLUpdatesGetState) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLUpdatesGetDifference() * TLUpdatesGetDifference {
    return &TLUpdatesGetDifference{}
}

func (m* TLUpdatesGetDifference) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_updates_getDifference))

    // flags
    var flags uint32 = 0
    if m.PtsTotalLimit != 0 { flags |= 1 << 0 }
	x.UInt(flags)

    x.Int(m.Pts)
    if m.PtsTotalLimit != 0 { x.Int(m.PtsTotalLimit) }
    x.Int(m.Date)
    x.Int(m.Qts)

return x.buf
}

func (m* TLUpdatesGetDifference) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    m.Pts = dbuf.Int()
    if (flags & (1 << 0)) != 0 { m.PtsTotalLimit = dbuf.Int() }
    m.Date = dbuf.Int()
    m.Qts = dbuf.Int()

return dbuf.err
}

func NewTLUpdatesGetChannelDifference() * TLUpdatesGetChannelDifference {
    return &TLUpdatesGetChannelDifference{}
}

func (m* TLUpdatesGetChannelDifference) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_updates_getChannelDifference))

    // flags
    var flags uint32 = 0
    if m.Force == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Bytes(m.Channel.Encode())
    x.Bytes(m.Filter.Encode())
    x.Int(m.Pts)
    x.Int(m.Limit)

return x.buf
}

func (m* TLUpdatesGetChannelDifference) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Force = true }
    m3 := &InputChannel{}
    m3.Decode(dbuf)
    m.Channel = m3
    m4 := &ChannelMessagesFilter{}
    m4.Decode(dbuf)
    m.Filter = m4
    m.Pts = dbuf.Int()
    m.Limit = dbuf.Int()

return dbuf.err
}

func NewTLPhotosUpdateProfilePhoto() * TLPhotosUpdateProfilePhoto {
    return &TLPhotosUpdateProfilePhoto{}
}

func (m* TLPhotosUpdateProfilePhoto) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_photos_updateProfilePhoto))

    x.Bytes(m.Id.Encode())

return x.buf
}

func (m* TLPhotosUpdateProfilePhoto) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPhoto{}
    m1.Decode(dbuf)
    m.Id = m1

return dbuf.err
}

func NewTLPhotosUploadProfilePhoto() * TLPhotosUploadProfilePhoto {
    return &TLPhotosUploadProfilePhoto{}
}

func (m* TLPhotosUploadProfilePhoto) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_photos_uploadProfilePhoto))

    x.Bytes(m.File.Encode())

return x.buf
}

func (m* TLPhotosUploadProfilePhoto) Decode(dbuf *DecodeBuf) error {
    m1 := &InputFile{}
    m1.Decode(dbuf)
    m.File = m1

return dbuf.err
}

func NewTLPhotosDeletePhotos() * TLPhotosDeletePhotos {
    return &TLPhotosDeletePhotos{}
}

func (m* TLPhotosDeletePhotos) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_photos_deletePhotos))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Id)))
for _, v := range m.Id {
  x.buf = append(x.buf, (*v).Encode()...)
}

return x.buf
}

func (m* TLPhotosDeletePhotos) Decode(dbuf *DecodeBuf) error {
    dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l1 := dbuf.Int()
m.Id = make([]*InputPhoto, l1)
for i := int32(0); i < l1; i++ {
 m.Id[i] = &InputPhoto{}
 (*m.Id[i]).Decode(dbuf)
}

return dbuf.err
}

func NewTLPhotosGetUserPhotos() * TLPhotosGetUserPhotos {
    return &TLPhotosGetUserPhotos{}
}

func (m* TLPhotosGetUserPhotos) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_photos_getUserPhotos))

    x.Bytes(m.UserId.Encode())
    x.Int(m.Offset)
    x.Long(m.MaxId)
    x.Int(m.Limit)

return x.buf
}

func (m* TLPhotosGetUserPhotos) Decode(dbuf *DecodeBuf) error {
    m1 := &InputUser{}
    m1.Decode(dbuf)
    m.UserId = m1
    m.Offset = dbuf.Int()
    m.MaxId = dbuf.Long()
    m.Limit = dbuf.Int()

return dbuf.err
}

func NewTLUploadSaveFilePart() * TLUploadSaveFilePart {
    return &TLUploadSaveFilePart{}
}

func (m* TLUploadSaveFilePart) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_upload_saveFilePart))

    x.Long(m.FileId)
    x.Int(m.FilePart)
    x.StringBytes(m.Bytes)

return x.buf
}

func (m* TLUploadSaveFilePart) Decode(dbuf *DecodeBuf) error {
    m.FileId = dbuf.Long()
    m.FilePart = dbuf.Int()
    m.Bytes = dbuf.StringBytes()

return dbuf.err
}

func NewTLUploadGetFile() * TLUploadGetFile {
    return &TLUploadGetFile{}
}

func (m* TLUploadGetFile) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_upload_getFile))

    x.Bytes(m.Location.Encode())
    x.Int(m.Offset)
    x.Int(m.Limit)

return x.buf
}

func (m* TLUploadGetFile) Decode(dbuf *DecodeBuf) error {
    m1 := &InputFileLocation{}
    m1.Decode(dbuf)
    m.Location = m1
    m.Offset = dbuf.Int()
    m.Limit = dbuf.Int()

return dbuf.err
}

func NewTLUploadSaveBigFilePart() * TLUploadSaveBigFilePart {
    return &TLUploadSaveBigFilePart{}
}

func (m* TLUploadSaveBigFilePart) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_upload_saveBigFilePart))

    x.Long(m.FileId)
    x.Int(m.FilePart)
    x.Int(m.FileTotalParts)
    x.StringBytes(m.Bytes)

return x.buf
}

func (m* TLUploadSaveBigFilePart) Decode(dbuf *DecodeBuf) error {
    m.FileId = dbuf.Long()
    m.FilePart = dbuf.Int()
    m.FileTotalParts = dbuf.Int()
    m.Bytes = dbuf.StringBytes()

return dbuf.err
}

func NewTLUploadGetWebFile() * TLUploadGetWebFile {
    return &TLUploadGetWebFile{}
}

func (m* TLUploadGetWebFile) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_upload_getWebFile))

    x.Bytes(m.Location.Encode())
    x.Int(m.Offset)
    x.Int(m.Limit)

return x.buf
}

func (m* TLUploadGetWebFile) Decode(dbuf *DecodeBuf) error {
    m1 := &InputWebFileLocation{}
    m1.Decode(dbuf)
    m.Location = m1
    m.Offset = dbuf.Int()
    m.Limit = dbuf.Int()

return dbuf.err
}

func NewTLUploadGetCdnFile() * TLUploadGetCdnFile {
    return &TLUploadGetCdnFile{}
}

func (m* TLUploadGetCdnFile) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_upload_getCdnFile))

    x.StringBytes(m.FileToken)
    x.Int(m.Offset)
    x.Int(m.Limit)

return x.buf
}

func (m* TLUploadGetCdnFile) Decode(dbuf *DecodeBuf) error {
    m.FileToken = dbuf.StringBytes()
    m.Offset = dbuf.Int()
    m.Limit = dbuf.Int()

return dbuf.err
}

func NewTLUploadReuploadCdnFile() * TLUploadReuploadCdnFile {
    return &TLUploadReuploadCdnFile{}
}

func (m* TLUploadReuploadCdnFile) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_upload_reuploadCdnFile))

    x.StringBytes(m.FileToken)
    x.StringBytes(m.RequestToken)

return x.buf
}

func (m* TLUploadReuploadCdnFile) Decode(dbuf *DecodeBuf) error {
    m.FileToken = dbuf.StringBytes()
    m.RequestToken = dbuf.StringBytes()

return dbuf.err
}

func NewTLUploadGetCdnFileHashes() * TLUploadGetCdnFileHashes {
    return &TLUploadGetCdnFileHashes{}
}

func (m* TLUploadGetCdnFileHashes) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_upload_getCdnFileHashes))

    x.StringBytes(m.FileToken)
    x.Int(m.Offset)

return x.buf
}

func (m* TLUploadGetCdnFileHashes) Decode(dbuf *DecodeBuf) error {
    m.FileToken = dbuf.StringBytes()
    m.Offset = dbuf.Int()

return dbuf.err
}

func NewTLHelpGetConfig() * TLHelpGetConfig {
    return &TLHelpGetConfig{}
}

func (m* TLHelpGetConfig) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_help_getConfig))


return x.buf
}

func (m* TLHelpGetConfig) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLHelpGetNearestDc() * TLHelpGetNearestDc {
    return &TLHelpGetNearestDc{}
}

func (m* TLHelpGetNearestDc) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_help_getNearestDc))


return x.buf
}

func (m* TLHelpGetNearestDc) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLHelpGetAppUpdate() * TLHelpGetAppUpdate {
    return &TLHelpGetAppUpdate{}
}

func (m* TLHelpGetAppUpdate) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_help_getAppUpdate))


return x.buf
}

func (m* TLHelpGetAppUpdate) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLHelpSaveAppLog() * TLHelpSaveAppLog {
    return &TLHelpSaveAppLog{}
}

func (m* TLHelpSaveAppLog) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_help_saveAppLog))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Events)))
for _, v := range m.Events {
  x.buf = append(x.buf, (*v).Encode()...)
}

return x.buf
}

func (m* TLHelpSaveAppLog) Decode(dbuf *DecodeBuf) error {
    dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l1 := dbuf.Int()
m.Events = make([]*InputAppEvent, l1)
for i := int32(0); i < l1; i++ {
 m.Events[i] = &InputAppEvent{}
 (*m.Events[i]).Decode(dbuf)
}

return dbuf.err
}

func NewTLHelpGetInviteText() * TLHelpGetInviteText {
    return &TLHelpGetInviteText{}
}

func (m* TLHelpGetInviteText) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_help_getInviteText))


return x.buf
}

func (m* TLHelpGetInviteText) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLHelpGetSupport() * TLHelpGetSupport {
    return &TLHelpGetSupport{}
}

func (m* TLHelpGetSupport) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_help_getSupport))


return x.buf
}

func (m* TLHelpGetSupport) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLHelpGetAppChangelog() * TLHelpGetAppChangelog {
    return &TLHelpGetAppChangelog{}
}

func (m* TLHelpGetAppChangelog) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_help_getAppChangelog))

    x.String(m.PrevAppVersion)

return x.buf
}

func (m* TLHelpGetAppChangelog) Decode(dbuf *DecodeBuf) error {
    m.PrevAppVersion = dbuf.String()

return dbuf.err
}

func NewTLHelpGetTermsOfService() * TLHelpGetTermsOfService {
    return &TLHelpGetTermsOfService{}
}

func (m* TLHelpGetTermsOfService) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_help_getTermsOfService))


return x.buf
}

func (m* TLHelpGetTermsOfService) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLHelpSetBotUpdatesStatus() * TLHelpSetBotUpdatesStatus {
    return &TLHelpSetBotUpdatesStatus{}
}

func (m* TLHelpSetBotUpdatesStatus) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_help_setBotUpdatesStatus))

    x.Int(m.PendingUpdatesCount)
    x.String(m.Message)

return x.buf
}

func (m* TLHelpSetBotUpdatesStatus) Decode(dbuf *DecodeBuf) error {
    m.PendingUpdatesCount = dbuf.Int()
    m.Message = dbuf.String()

return dbuf.err
}

func NewTLHelpGetCdnConfig() * TLHelpGetCdnConfig {
    return &TLHelpGetCdnConfig{}
}

func (m* TLHelpGetCdnConfig) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_help_getCdnConfig))


return x.buf
}

func (m* TLHelpGetCdnConfig) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLChannelsReadHistory() * TLChannelsReadHistory {
    return &TLChannelsReadHistory{}
}

func (m* TLChannelsReadHistory) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_readHistory))

    x.Bytes(m.Channel.Encode())
    x.Int(m.MaxId)

return x.buf
}

func (m* TLChannelsReadHistory) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1
    m.MaxId = dbuf.Int()

return dbuf.err
}

func NewTLChannelsDeleteMessages() * TLChannelsDeleteMessages {
    return &TLChannelsDeleteMessages{}
}

func (m* TLChannelsDeleteMessages) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_deleteMessages))

    x.Bytes(m.Channel.Encode())
    x.VectorInt(m.Id)


return x.buf
}

func (m* TLChannelsDeleteMessages) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1
    m.Id = dbuf.VectorInt()

return dbuf.err
}

func NewTLChannelsDeleteUserHistory() * TLChannelsDeleteUserHistory {
    return &TLChannelsDeleteUserHistory{}
}

func (m* TLChannelsDeleteUserHistory) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_deleteUserHistory))

    x.Bytes(m.Channel.Encode())
    x.Bytes(m.UserId.Encode())

return x.buf
}

func (m* TLChannelsDeleteUserHistory) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1
    m2 := &InputUser{}
    m2.Decode(dbuf)
    m.UserId = m2

return dbuf.err
}

func NewTLChannelsReportSpam() * TLChannelsReportSpam {
    return &TLChannelsReportSpam{}
}

func (m* TLChannelsReportSpam) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_reportSpam))

    x.Bytes(m.Channel.Encode())
    x.Bytes(m.UserId.Encode())
    x.VectorInt(m.Id)


return x.buf
}

func (m* TLChannelsReportSpam) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1
    m2 := &InputUser{}
    m2.Decode(dbuf)
    m.UserId = m2
    m.Id = dbuf.VectorInt()

return dbuf.err
}

func NewTLChannelsGetMessages() * TLChannelsGetMessages {
    return &TLChannelsGetMessages{}
}

func (m* TLChannelsGetMessages) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_getMessages))

    x.Bytes(m.Channel.Encode())
    x.VectorInt(m.Id)


return x.buf
}

func (m* TLChannelsGetMessages) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1
    m.Id = dbuf.VectorInt()

return dbuf.err
}

func NewTLChannelsGetParticipants() * TLChannelsGetParticipants {
    return &TLChannelsGetParticipants{}
}

func (m* TLChannelsGetParticipants) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_getParticipants))

    x.Bytes(m.Channel.Encode())
    x.Bytes(m.Filter.Encode())
    x.Int(m.Offset)
    x.Int(m.Limit)

return x.buf
}

func (m* TLChannelsGetParticipants) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1
    m2 := &ChannelParticipantsFilter{}
    m2.Decode(dbuf)
    m.Filter = m2
    m.Offset = dbuf.Int()
    m.Limit = dbuf.Int()

return dbuf.err
}

func NewTLChannelsGetParticipant() * TLChannelsGetParticipant {
    return &TLChannelsGetParticipant{}
}

func (m* TLChannelsGetParticipant) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_getParticipant))

    x.Bytes(m.Channel.Encode())
    x.Bytes(m.UserId.Encode())

return x.buf
}

func (m* TLChannelsGetParticipant) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1
    m2 := &InputUser{}
    m2.Decode(dbuf)
    m.UserId = m2

return dbuf.err
}

func NewTLChannelsGetChannels() * TLChannelsGetChannels {
    return &TLChannelsGetChannels{}
}

func (m* TLChannelsGetChannels) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_getChannels))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Id)))
for _, v := range m.Id {
  x.buf = append(x.buf, (*v).Encode()...)
}

return x.buf
}

func (m* TLChannelsGetChannels) Decode(dbuf *DecodeBuf) error {
    dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l1 := dbuf.Int()
m.Id = make([]*InputChannel, l1)
for i := int32(0); i < l1; i++ {
 m.Id[i] = &InputChannel{}
 (*m.Id[i]).Decode(dbuf)
}

return dbuf.err
}

func NewTLChannelsGetFullChannel() * TLChannelsGetFullChannel {
    return &TLChannelsGetFullChannel{}
}

func (m* TLChannelsGetFullChannel) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_getFullChannel))

    x.Bytes(m.Channel.Encode())

return x.buf
}

func (m* TLChannelsGetFullChannel) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1

return dbuf.err
}

func NewTLChannelsCreateChannel() * TLChannelsCreateChannel {
    return &TLChannelsCreateChannel{}
}

func (m* TLChannelsCreateChannel) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_createChannel))

    // flags
    var flags uint32 = 0
    if m.Broadcast == true { flags |= 1 << 0 }
    if m.Megagroup == true { flags |= 1 << 1 }
	x.UInt(flags)

    
    
    x.String(m.Title)
    x.String(m.About)

return x.buf
}

func (m* TLChannelsCreateChannel) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Broadcast = true }
    if (flags & (1 << 1)) != 0 { m.Megagroup = true }
    m.Title = dbuf.String()
    m.About = dbuf.String()

return dbuf.err
}

func NewTLChannelsEditAbout() * TLChannelsEditAbout {
    return &TLChannelsEditAbout{}
}

func (m* TLChannelsEditAbout) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_editAbout))

    x.Bytes(m.Channel.Encode())
    x.String(m.About)

return x.buf
}

func (m* TLChannelsEditAbout) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1
    m.About = dbuf.String()

return dbuf.err
}

func NewTLChannelsEditAdmin() * TLChannelsEditAdmin {
    return &TLChannelsEditAdmin{}
}

func (m* TLChannelsEditAdmin) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_editAdmin))

    x.Bytes(m.Channel.Encode())
    x.Bytes(m.UserId.Encode())
    x.Bytes(m.AdminRights.Encode())

return x.buf
}

func (m* TLChannelsEditAdmin) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1
    m2 := &InputUser{}
    m2.Decode(dbuf)
    m.UserId = m2
    m3 := &ChannelAdminRights{}
    m3.Decode(dbuf)
    m.AdminRights = m3

return dbuf.err
}

func NewTLChannelsEditTitle() * TLChannelsEditTitle {
    return &TLChannelsEditTitle{}
}

func (m* TLChannelsEditTitle) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_editTitle))

    x.Bytes(m.Channel.Encode())
    x.String(m.Title)

return x.buf
}

func (m* TLChannelsEditTitle) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1
    m.Title = dbuf.String()

return dbuf.err
}

func NewTLChannelsEditPhoto() * TLChannelsEditPhoto {
    return &TLChannelsEditPhoto{}
}

func (m* TLChannelsEditPhoto) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_editPhoto))

    x.Bytes(m.Channel.Encode())
    x.Bytes(m.Photo.Encode())

return x.buf
}

func (m* TLChannelsEditPhoto) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1
    m2 := &InputChatPhoto{}
    m2.Decode(dbuf)
    m.Photo = m2

return dbuf.err
}

func NewTLChannelsCheckUsername() * TLChannelsCheckUsername {
    return &TLChannelsCheckUsername{}
}

func (m* TLChannelsCheckUsername) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_checkUsername))

    x.Bytes(m.Channel.Encode())
    x.String(m.Username)

return x.buf
}

func (m* TLChannelsCheckUsername) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1
    m.Username = dbuf.String()

return dbuf.err
}

func NewTLChannelsUpdateUsername() * TLChannelsUpdateUsername {
    return &TLChannelsUpdateUsername{}
}

func (m* TLChannelsUpdateUsername) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_updateUsername))

    x.Bytes(m.Channel.Encode())
    x.String(m.Username)

return x.buf
}

func (m* TLChannelsUpdateUsername) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1
    m.Username = dbuf.String()

return dbuf.err
}

func NewTLChannelsJoinChannel() * TLChannelsJoinChannel {
    return &TLChannelsJoinChannel{}
}

func (m* TLChannelsJoinChannel) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_joinChannel))

    x.Bytes(m.Channel.Encode())

return x.buf
}

func (m* TLChannelsJoinChannel) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1

return dbuf.err
}

func NewTLChannelsLeaveChannel() * TLChannelsLeaveChannel {
    return &TLChannelsLeaveChannel{}
}

func (m* TLChannelsLeaveChannel) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_leaveChannel))

    x.Bytes(m.Channel.Encode())

return x.buf
}

func (m* TLChannelsLeaveChannel) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1

return dbuf.err
}

func NewTLChannelsInviteToChannel() * TLChannelsInviteToChannel {
    return &TLChannelsInviteToChannel{}
}

func (m* TLChannelsInviteToChannel) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_inviteToChannel))

    x.Bytes(m.Channel.Encode())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Users)))
for _, v := range m.Users {
  x.buf = append(x.buf, (*v).Encode()...)
}

return x.buf
}

func (m* TLChannelsInviteToChannel) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1
    dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l2 := dbuf.Int()
m.Users = make([]*InputUser, l2)
for i := int32(0); i < l2; i++ {
 m.Users[i] = &InputUser{}
 (*m.Users[i]).Decode(dbuf)
}

return dbuf.err
}

func NewTLChannelsExportInvite() * TLChannelsExportInvite {
    return &TLChannelsExportInvite{}
}

func (m* TLChannelsExportInvite) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_exportInvite))

    x.Bytes(m.Channel.Encode())

return x.buf
}

func (m* TLChannelsExportInvite) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1

return dbuf.err
}

func NewTLChannelsDeleteChannel() * TLChannelsDeleteChannel {
    return &TLChannelsDeleteChannel{}
}

func (m* TLChannelsDeleteChannel) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_deleteChannel))

    x.Bytes(m.Channel.Encode())

return x.buf
}

func (m* TLChannelsDeleteChannel) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1

return dbuf.err
}

func NewTLChannelsToggleInvites() * TLChannelsToggleInvites {
    return &TLChannelsToggleInvites{}
}

func (m* TLChannelsToggleInvites) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_toggleInvites))

    x.Bytes(m.Channel.Encode())
    x.Bytes(m.Enabled.Encode())

return x.buf
}

func (m* TLChannelsToggleInvites) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1
    m2 := &Bool{}
    m2.Decode(dbuf)
    m.Enabled = m2

return dbuf.err
}

func NewTLChannelsExportMessageLink() * TLChannelsExportMessageLink {
    return &TLChannelsExportMessageLink{}
}

func (m* TLChannelsExportMessageLink) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_exportMessageLink))

    x.Bytes(m.Channel.Encode())
    x.Int(m.Id)

return x.buf
}

func (m* TLChannelsExportMessageLink) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1
    m.Id = dbuf.Int()

return dbuf.err
}

func NewTLChannelsToggleSignatures() * TLChannelsToggleSignatures {
    return &TLChannelsToggleSignatures{}
}

func (m* TLChannelsToggleSignatures) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_toggleSignatures))

    x.Bytes(m.Channel.Encode())
    x.Bytes(m.Enabled.Encode())

return x.buf
}

func (m* TLChannelsToggleSignatures) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1
    m2 := &Bool{}
    m2.Decode(dbuf)
    m.Enabled = m2

return dbuf.err
}

func NewTLChannelsUpdatePinnedMessage() * TLChannelsUpdatePinnedMessage {
    return &TLChannelsUpdatePinnedMessage{}
}

func (m* TLChannelsUpdatePinnedMessage) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_updatePinnedMessage))

    // flags
    var flags uint32 = 0
    if m.Silent == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Bytes(m.Channel.Encode())
    x.Int(m.Id)

return x.buf
}

func (m* TLChannelsUpdatePinnedMessage) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Silent = true }
    m3 := &InputChannel{}
    m3.Decode(dbuf)
    m.Channel = m3
    m.Id = dbuf.Int()

return dbuf.err
}

func NewTLChannelsGetAdminedPublicChannels() * TLChannelsGetAdminedPublicChannels {
    return &TLChannelsGetAdminedPublicChannels{}
}

func (m* TLChannelsGetAdminedPublicChannels) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_getAdminedPublicChannels))


return x.buf
}

func (m* TLChannelsGetAdminedPublicChannels) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLChannelsEditBanned() * TLChannelsEditBanned {
    return &TLChannelsEditBanned{}
}

func (m* TLChannelsEditBanned) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_editBanned))

    x.Bytes(m.Channel.Encode())
    x.Bytes(m.UserId.Encode())
    x.Bytes(m.BannedRights.Encode())

return x.buf
}

func (m* TLChannelsEditBanned) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1
    m2 := &InputUser{}
    m2.Decode(dbuf)
    m.UserId = m2
    m3 := &ChannelBannedRights{}
    m3.Decode(dbuf)
    m.BannedRights = m3

return dbuf.err
}

func NewTLChannelsGetAdminLog() * TLChannelsGetAdminLog {
    return &TLChannelsGetAdminLog{}
}

func (m* TLChannelsGetAdminLog) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_getAdminLog))

    // flags
    var flags uint32 = 0
    if m.EventsFilter != nil { flags |= 1 << 0 }
    if m.Admins != nil { flags |= 1 << 1 }
	x.UInt(flags)

    x.Bytes(m.Channel.Encode())
    x.String(m.Q)
    if m.EventsFilter != nil {
 x.Bytes(m.EventsFilter.Encode()) 
}
    if m.Admins != nil {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Admins)))
for _, v := range m.Admins {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}
    x.Long(m.MaxId)
    x.Long(m.MinId)
    x.Int(m.Limit)

return x.buf
}

func (m* TLChannelsGetAdminLog) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    m2 := &InputChannel{}
    m2.Decode(dbuf)
    m.Channel = m2
    m.Q = dbuf.String()
    if (flags & (1 << 0)) != 0 {
 m4 := &ChannelAdminLogEventsFilter{}
    m4.Decode(dbuf)
    m.EventsFilter = m4 
}
    if (flags & (1 << 1)) != 0 {
 dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l5 := dbuf.Int()
m.Admins = make([]*InputUser, l5)
for i := int32(0); i < l5; i++ {
 m.Admins[i] = &InputUser{}
 (*m.Admins[i]).Decode(dbuf)
} 
}
    m.MaxId = dbuf.Long()
    m.MinId = dbuf.Long()
    m.Limit = dbuf.Int()

return dbuf.err
}

func NewTLChannelsSetStickers() * TLChannelsSetStickers {
    return &TLChannelsSetStickers{}
}

func (m* TLChannelsSetStickers) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_setStickers))

    x.Bytes(m.Channel.Encode())
    x.Bytes(m.Stickerset.Encode())

return x.buf
}

func (m* TLChannelsSetStickers) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1
    m2 := &InputStickerSet{}
    m2.Decode(dbuf)
    m.Stickerset = m2

return dbuf.err
}

func NewTLChannelsReadMessageContents() * TLChannelsReadMessageContents {
    return &TLChannelsReadMessageContents{}
}

func (m* TLChannelsReadMessageContents) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_readMessageContents))

    x.Bytes(m.Channel.Encode())
    x.VectorInt(m.Id)


return x.buf
}

func (m* TLChannelsReadMessageContents) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1
    m.Id = dbuf.VectorInt()

return dbuf.err
}

func NewTLBotsSendCustomRequest() * TLBotsSendCustomRequest {
    return &TLBotsSendCustomRequest{}
}

func (m* TLBotsSendCustomRequest) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_bots_sendCustomRequest))

    x.String(m.CustomMethod)
    x.Bytes(m.Params.Encode())

return x.buf
}

func (m* TLBotsSendCustomRequest) Decode(dbuf *DecodeBuf) error {
    m.CustomMethod = dbuf.String()
    m2 := &DataJSON{}
    m2.Decode(dbuf)
    m.Params = m2

return dbuf.err
}

func NewTLBotsAnswerWebhookJSONQuery() * TLBotsAnswerWebhookJSONQuery {
    return &TLBotsAnswerWebhookJSONQuery{}
}

func (m* TLBotsAnswerWebhookJSONQuery) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_bots_answerWebhookJSONQuery))

    x.Long(m.QueryId)
    x.Bytes(m.Data.Encode())

return x.buf
}

func (m* TLBotsAnswerWebhookJSONQuery) Decode(dbuf *DecodeBuf) error {
    m.QueryId = dbuf.Long()
    m2 := &DataJSON{}
    m2.Decode(dbuf)
    m.Data = m2

return dbuf.err
}

func NewTLPaymentsGetPaymentForm() * TLPaymentsGetPaymentForm {
    return &TLPaymentsGetPaymentForm{}
}

func (m* TLPaymentsGetPaymentForm) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_payments_getPaymentForm))

    x.Int(m.MsgId)

return x.buf
}

func (m* TLPaymentsGetPaymentForm) Decode(dbuf *DecodeBuf) error {
    m.MsgId = dbuf.Int()

return dbuf.err
}

func NewTLPaymentsGetPaymentReceipt() * TLPaymentsGetPaymentReceipt {
    return &TLPaymentsGetPaymentReceipt{}
}

func (m* TLPaymentsGetPaymentReceipt) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_payments_getPaymentReceipt))

    x.Int(m.MsgId)

return x.buf
}

func (m* TLPaymentsGetPaymentReceipt) Decode(dbuf *DecodeBuf) error {
    m.MsgId = dbuf.Int()

return dbuf.err
}

func NewTLPaymentsValidateRequestedInfo() * TLPaymentsValidateRequestedInfo {
    return &TLPaymentsValidateRequestedInfo{}
}

func (m* TLPaymentsValidateRequestedInfo) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_payments_validateRequestedInfo))

    // flags
    var flags uint32 = 0
    if m.Save == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Int(m.MsgId)
    x.Bytes(m.Info.Encode())

return x.buf
}

func (m* TLPaymentsValidateRequestedInfo) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Save = true }
    m.MsgId = dbuf.Int()
    m4 := &PaymentRequestedInfo{}
    m4.Decode(dbuf)
    m.Info = m4

return dbuf.err
}

func NewTLPaymentsSendPaymentForm() * TLPaymentsSendPaymentForm {
    return &TLPaymentsSendPaymentForm{}
}

func (m* TLPaymentsSendPaymentForm) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_payments_sendPaymentForm))

    // flags
    var flags uint32 = 0
    if m.RequestedInfoId != "" { flags |= 1 << 0 }
    if m.ShippingOptionId != "" { flags |= 1 << 1 }
	x.UInt(flags)

    x.Int(m.MsgId)
    if m.RequestedInfoId != "" { x.String(m.RequestedInfoId) }
    if m.ShippingOptionId != "" { x.String(m.ShippingOptionId) }
    x.Bytes(m.Credentials.Encode())

return x.buf
}

func (m* TLPaymentsSendPaymentForm) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    m.MsgId = dbuf.Int()
    if (flags & (1 << 0)) != 0 { m.RequestedInfoId = dbuf.String() }
    if (flags & (1 << 1)) != 0 { m.ShippingOptionId = dbuf.String() }
    m5 := &InputPaymentCredentials{}
    m5.Decode(dbuf)
    m.Credentials = m5

return dbuf.err
}

func NewTLPaymentsGetSavedInfo() * TLPaymentsGetSavedInfo {
    return &TLPaymentsGetSavedInfo{}
}

func (m* TLPaymentsGetSavedInfo) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_payments_getSavedInfo))


return x.buf
}

func (m* TLPaymentsGetSavedInfo) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLPaymentsClearSavedInfo() * TLPaymentsClearSavedInfo {
    return &TLPaymentsClearSavedInfo{}
}

func (m* TLPaymentsClearSavedInfo) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_payments_clearSavedInfo))

    // flags
    var flags uint32 = 0
    if m.Credentials == true { flags |= 1 << 0 }
    if m.Info == true { flags |= 1 << 1 }
	x.UInt(flags)

    
    

return x.buf
}

func (m* TLPaymentsClearSavedInfo) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Credentials = true }
    if (flags & (1 << 1)) != 0 { m.Info = true }

return dbuf.err
}

func NewTLStickersCreateStickerSet() * TLStickersCreateStickerSet {
    return &TLStickersCreateStickerSet{}
}

func (m* TLStickersCreateStickerSet) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_stickers_createStickerSet))

    // flags
    var flags uint32 = 0
    if m.Masks == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Bytes(m.UserId.Encode())
    x.String(m.Title)
    x.String(m.ShortName)
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Stickers)))
for _, v := range m.Stickers {
  x.buf = append(x.buf, (*v).Encode()...)
}

return x.buf
}

func (m* TLStickersCreateStickerSet) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Masks = true }
    m3 := &InputUser{}
    m3.Decode(dbuf)
    m.UserId = m3
    m.Title = dbuf.String()
    m.ShortName = dbuf.String()
    dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l6 := dbuf.Int()
m.Stickers = make([]*InputStickerSetItem, l6)
for i := int32(0); i < l6; i++ {
 m.Stickers[i] = &InputStickerSetItem{}
 (*m.Stickers[i]).Decode(dbuf)
}

return dbuf.err
}

func NewTLStickersRemoveStickerFromSet() * TLStickersRemoveStickerFromSet {
    return &TLStickersRemoveStickerFromSet{}
}

func (m* TLStickersRemoveStickerFromSet) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_stickers_removeStickerFromSet))

    x.Bytes(m.Sticker.Encode())

return x.buf
}

func (m* TLStickersRemoveStickerFromSet) Decode(dbuf *DecodeBuf) error {
    m1 := &InputDocument{}
    m1.Decode(dbuf)
    m.Sticker = m1

return dbuf.err
}

func NewTLStickersChangeStickerPosition() * TLStickersChangeStickerPosition {
    return &TLStickersChangeStickerPosition{}
}

func (m* TLStickersChangeStickerPosition) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_stickers_changeStickerPosition))

    x.Bytes(m.Sticker.Encode())
    x.Int(m.Position)

return x.buf
}

func (m* TLStickersChangeStickerPosition) Decode(dbuf *DecodeBuf) error {
    m1 := &InputDocument{}
    m1.Decode(dbuf)
    m.Sticker = m1
    m.Position = dbuf.Int()

return dbuf.err
}

func NewTLStickersAddStickerToSet() * TLStickersAddStickerToSet {
    return &TLStickersAddStickerToSet{}
}

func (m* TLStickersAddStickerToSet) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_stickers_addStickerToSet))

    x.Bytes(m.Stickerset.Encode())
    x.Bytes(m.Sticker.Encode())

return x.buf
}

func (m* TLStickersAddStickerToSet) Decode(dbuf *DecodeBuf) error {
    m1 := &InputStickerSet{}
    m1.Decode(dbuf)
    m.Stickerset = m1
    m2 := &InputStickerSetItem{}
    m2.Decode(dbuf)
    m.Sticker = m2

return dbuf.err
}

func NewTLPhoneGetCallConfig() * TLPhoneGetCallConfig {
    return &TLPhoneGetCallConfig{}
}

func (m* TLPhoneGetCallConfig) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_phone_getCallConfig))


return x.buf
}

func (m* TLPhoneGetCallConfig) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLPhoneRequestCall() * TLPhoneRequestCall {
    return &TLPhoneRequestCall{}
}

func (m* TLPhoneRequestCall) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_phone_requestCall))

    x.Bytes(m.UserId.Encode())
    x.Int(m.RandomId)
    x.StringBytes(m.GAHash)
    x.Bytes(m.Protocol.Encode())

return x.buf
}

func (m* TLPhoneRequestCall) Decode(dbuf *DecodeBuf) error {
    m1 := &InputUser{}
    m1.Decode(dbuf)
    m.UserId = m1
    m.RandomId = dbuf.Int()
    m.GAHash = dbuf.StringBytes()
    m4 := &PhoneCallProtocol{}
    m4.Decode(dbuf)
    m.Protocol = m4

return dbuf.err
}

func NewTLPhoneAcceptCall() * TLPhoneAcceptCall {
    return &TLPhoneAcceptCall{}
}

func (m* TLPhoneAcceptCall) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_phone_acceptCall))

    x.Bytes(m.Peer.Encode())
    x.StringBytes(m.GB)
    x.Bytes(m.Protocol.Encode())

return x.buf
}

func (m* TLPhoneAcceptCall) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPhoneCall{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.GB = dbuf.StringBytes()
    m3 := &PhoneCallProtocol{}
    m3.Decode(dbuf)
    m.Protocol = m3

return dbuf.err
}

func NewTLPhoneConfirmCall() * TLPhoneConfirmCall {
    return &TLPhoneConfirmCall{}
}

func (m* TLPhoneConfirmCall) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_phone_confirmCall))

    x.Bytes(m.Peer.Encode())
    x.StringBytes(m.GA)
    x.Long(m.KeyFingerprint)
    x.Bytes(m.Protocol.Encode())

return x.buf
}

func (m* TLPhoneConfirmCall) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPhoneCall{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.GA = dbuf.StringBytes()
    m.KeyFingerprint = dbuf.Long()
    m4 := &PhoneCallProtocol{}
    m4.Decode(dbuf)
    m.Protocol = m4

return dbuf.err
}

func NewTLPhoneReceivedCall() * TLPhoneReceivedCall {
    return &TLPhoneReceivedCall{}
}

func (m* TLPhoneReceivedCall) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_phone_receivedCall))

    x.Bytes(m.Peer.Encode())

return x.buf
}

func (m* TLPhoneReceivedCall) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPhoneCall{}
    m1.Decode(dbuf)
    m.Peer = m1

return dbuf.err
}

func NewTLPhoneDiscardCall() * TLPhoneDiscardCall {
    return &TLPhoneDiscardCall{}
}

func (m* TLPhoneDiscardCall) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_phone_discardCall))

    x.Bytes(m.Peer.Encode())
    x.Int(m.Duration)
    x.Bytes(m.Reason.Encode())
    x.Long(m.ConnectionId)

return x.buf
}

func (m* TLPhoneDiscardCall) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPhoneCall{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.Duration = dbuf.Int()
    m3 := &PhoneCallDiscardReason{}
    m3.Decode(dbuf)
    m.Reason = m3
    m.ConnectionId = dbuf.Long()

return dbuf.err
}

func NewTLPhoneSetCallRating() * TLPhoneSetCallRating {
    return &TLPhoneSetCallRating{}
}

func (m* TLPhoneSetCallRating) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_phone_setCallRating))

    x.Bytes(m.Peer.Encode())
    x.Int(m.Rating)
    x.String(m.Comment)

return x.buf
}

func (m* TLPhoneSetCallRating) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPhoneCall{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.Rating = dbuf.Int()
    m.Comment = dbuf.String()

return dbuf.err
}

func NewTLPhoneSaveCallDebug() * TLPhoneSaveCallDebug {
    return &TLPhoneSaveCallDebug{}
}

func (m* TLPhoneSaveCallDebug) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_phone_saveCallDebug))

    x.Bytes(m.Peer.Encode())
    x.Bytes(m.Debug.Encode())

return x.buf
}

func (m* TLPhoneSaveCallDebug) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPhoneCall{}
    m1.Decode(dbuf)
    m.Peer = m1
    m2 := &DataJSON{}
    m2.Decode(dbuf)
    m.Debug = m2

return dbuf.err
}

func NewTLLangpackGetLangPack() * TLLangpackGetLangPack {
    return &TLLangpackGetLangPack{}
}

func (m* TLLangpackGetLangPack) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_langpack_getLangPack))

    x.String(m.LangCode)

return x.buf
}

func (m* TLLangpackGetLangPack) Decode(dbuf *DecodeBuf) error {
    m.LangCode = dbuf.String()

return dbuf.err
}

func NewTLLangpackGetStrings() * TLLangpackGetStrings {
    return &TLLangpackGetStrings{}
}

func (m* TLLangpackGetStrings) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_langpack_getStrings))

    x.String(m.LangCode)
    x.VectorString(m.Keys)


return x.buf
}

func (m* TLLangpackGetStrings) Decode(dbuf *DecodeBuf) error {
    m.LangCode = dbuf.String()
    m.Keys = dbuf.VectorString()

return dbuf.err
}

func NewTLLangpackGetDifference() * TLLangpackGetDifference {
    return &TLLangpackGetDifference{}
}

func (m* TLLangpackGetDifference) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_langpack_getDifference))

    x.Int(m.FromVersion)

return x.buf
}

func (m* TLLangpackGetDifference) Decode(dbuf *DecodeBuf) error {
    m.FromVersion = dbuf.Int()

return dbuf.err
}

func NewTLLangpackGetLanguages() * TLLangpackGetLanguages {
    return &TLLangpackGetLanguages{}
}

func (m* TLLangpackGetLanguages) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_langpack_getLanguages))


return x.buf
}

func (m* TLLangpackGetLanguages) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLUpdatesGetChannelDifference57() * TLUpdatesGetChannelDifference57 {
    return &TLUpdatesGetChannelDifference57{}
}

func (m* TLUpdatesGetChannelDifference57) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_updates_getChannelDifference57))

    x.Bytes(m.Channel.Encode())
    x.Bytes(m.Filter.Encode())
    x.Int(m.Pts)
    x.Int(m.Limit)

return x.buf
}

func (m* TLUpdatesGetChannelDifference57) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1
    m2 := &ChannelMessagesFilter{}
    m2.Decode(dbuf)
    m.Filter = m2
    m.Pts = dbuf.Int()
    m.Limit = dbuf.Int()

return dbuf.err
}

func NewTLAuthSendCode73() * TLAuthSendCode73 {
    return &TLAuthSendCode73{}
}

func (m* TLAuthSendCode73) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_auth_sendCode73))

    // flags
    var flags uint32 = 0
    if m.AllowFlashcall == true { flags |= 1 << 0 }
    if m.CurrentNumber != nil { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.String(m.PhoneNumber)
    if m.CurrentNumber != nil {
 x.Bytes(m.CurrentNumber.Encode()) 
}
    x.Int(m.ApiId)
    x.String(m.ApiHash)
    x.String(m.LangCode)

return x.buf
}

func (m* TLAuthSendCode73) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.AllowFlashcall = true }
    m.PhoneNumber = dbuf.String()
    if (flags & (1 << 0)) != 0 {
 m4 := &Bool{}
    m4.Decode(dbuf)
    m.CurrentNumber = m4 
}
    m.ApiId = dbuf.Int()
    m.ApiHash = dbuf.String()
    m.LangCode = dbuf.String()

return dbuf.err
}

func NewTLAccountRegisterDevice73() * TLAccountRegisterDevice73 {
    return &TLAccountRegisterDevice73{}
}

func (m* TLAccountRegisterDevice73) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_registerDevice73))

    x.Int(m.TokenType)
    x.String(m.Token)
    x.String(m.DeviceModel)
    x.String(m.SystemVersion)
    x.String(m.AppVersion)
    x.Bytes(m.AppSandbox.Encode())
    x.String(m.LangCode)

return x.buf
}

func (m* TLAccountRegisterDevice73) Decode(dbuf *DecodeBuf) error {
    m.TokenType = dbuf.Int()
    m.Token = dbuf.String()
    m.DeviceModel = dbuf.String()
    m.SystemVersion = dbuf.String()
    m.AppVersion = dbuf.String()
    m6 := &Bool{}
    m6.Decode(dbuf)
    m.AppSandbox = m6
    m.LangCode = dbuf.String()

return dbuf.err
}

func NewTLPhotosUpdateProfilePhoto73() * TLPhotosUpdateProfilePhoto73 {
    return &TLPhotosUpdateProfilePhoto73{}
}

func (m* TLPhotosUpdateProfilePhoto73) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_photos_updateProfilePhoto73))

    x.Bytes(m.Id.Encode())
    x.Bytes(m.Crop.Encode())

return x.buf
}

func (m* TLPhotosUpdateProfilePhoto73) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPhoto{}
    m1.Decode(dbuf)
    m.Id = m1
    m2 := &InputPhotoCrop{}
    m2.Decode(dbuf)
    m.Crop = m2

return dbuf.err
}

func NewTLPhotosUploadProfilePhoto73() * TLPhotosUploadProfilePhoto73 {
    return &TLPhotosUploadProfilePhoto73{}
}

func (m* TLPhotosUploadProfilePhoto73) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_photos_uploadProfilePhoto73))

    x.Bytes(m.File.Encode())
    x.String(m.Caption)
    x.Bytes(m.GeoPoint.Encode())
    x.Bytes(m.Crop.Encode())

return x.buf
}

func (m* TLPhotosUploadProfilePhoto73) Decode(dbuf *DecodeBuf) error {
    m1 := &InputFile{}
    m1.Decode(dbuf)
    m.File = m1
    m.Caption = dbuf.String()
    m3 := &InputGeoPoint{}
    m3.Decode(dbuf)
    m.GeoPoint = m3
    m4 := &InputPhotoCrop{}
    m4.Decode(dbuf)
    m.Crop = m4

return dbuf.err
}

func NewTLHelpGetWkConfig() * TLHelpGetWkConfig {
    return &TLHelpGetWkConfig{}
}

func (m* TLHelpGetWkConfig) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_help_getWkConfig))


return x.buf
}

func (m* TLHelpGetWkConfig) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLHelpGetJsonConfig() * TLHelpGetJsonConfig {
    return &TLHelpGetJsonConfig{}
}

func (m* TLHelpGetJsonConfig) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_help_getJsonConfig))


return x.buf
}

func (m* TLHelpGetJsonConfig) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLHelpGetScheme() * TLHelpGetScheme {
    return &TLHelpGetScheme{}
}

func (m* TLHelpGetScheme) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_help_getScheme))

    x.Int(m.Version)

return x.buf
}

func (m* TLHelpGetScheme) Decode(dbuf *DecodeBuf) error {
    m.Version = dbuf.Int()

return dbuf.err
}

func NewTLHelpGetAppUpdate73() * TLHelpGetAppUpdate73 {
    return &TLHelpGetAppUpdate73{}
}

func (m* TLHelpGetAppUpdate73) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_help_getAppUpdate73))

    x.String(m.DeviceModel)
    x.String(m.SystemVersion)
    x.String(m.AppVersion)
    x.String(m.LangCode)

return x.buf
}

func (m* TLHelpGetAppUpdate73) Decode(dbuf *DecodeBuf) error {
    m.DeviceModel = dbuf.String()
    m.SystemVersion = dbuf.String()
    m.AppVersion = dbuf.String()
    m.LangCode = dbuf.String()

return dbuf.err
}

func NewTLHelpGetInviteText73() * TLHelpGetInviteText73 {
    return &TLHelpGetInviteText73{}
}

func (m* TLHelpGetInviteText73) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_help_getInviteText73))

    x.String(m.LangCode)

return x.buf
}

func (m* TLHelpGetInviteText73) Decode(dbuf *DecodeBuf) error {
    m.LangCode = dbuf.String()

return dbuf.err
}

func NewTLHelpGetRecentMeUrls() * TLHelpGetRecentMeUrls {
    return &TLHelpGetRecentMeUrls{}
}

func (m* TLHelpGetRecentMeUrls) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_help_getRecentMeUrls))

    x.String(m.Referer)

return x.buf
}

func (m* TLHelpGetRecentMeUrls) Decode(dbuf *DecodeBuf) error {
    m.Referer = dbuf.String()

return dbuf.err
}

func NewTLHelpGetTermsOfService73() * TLHelpGetTermsOfService73 {
    return &TLHelpGetTermsOfService73{}
}

func (m* TLHelpGetTermsOfService73) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_help_getTermsOfService73))

    x.String(m.LangCode)

return x.buf
}

func (m* TLHelpGetTermsOfService73) Decode(dbuf *DecodeBuf) error {
    m.LangCode = dbuf.String()

return dbuf.err
}

func NewTLMessagesReadHistory73() * TLMessagesReadHistory73 {
    return &TLMessagesReadHistory73{}
}

func (m* TLMessagesReadHistory73) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_readHistory73))

    x.Bytes(m.Peer.Encode())
    x.Int(m.MaxId)
    x.Int(m.Offset)

return x.buf
}

func (m* TLMessagesReadHistory73) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.MaxId = dbuf.Int()
    m.Offset = dbuf.Int()

return dbuf.err
}

func NewTLMessagesEditMessage73() * TLMessagesEditMessage73 {
    return &TLMessagesEditMessage73{}
}

func (m* TLMessagesEditMessage73) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_editMessage73))

    // flags
    var flags uint32 = 0
    if m.NoWebpage == true { flags |= 1 << 1 }
    if m.StopGeoLive == true { flags |= 1 << 12 }
    if m.Message != "" { flags |= 1 << 11 }
    if m.ReplyMarkup != nil { flags |= 1 << 2 }
    if m.Entities != nil { flags |= 1 << 3 }
    if m.GeoPoint != nil { flags |= 1 << 13 }
	x.UInt(flags)

    
    
    x.Bytes(m.Peer.Encode())
    x.Int(m.Id)
    if m.Message != "" { x.String(m.Message) }
    if m.ReplyMarkup != nil {
 x.Bytes(m.ReplyMarkup.Encode()) 
}
    if m.Entities != nil {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Entities)))
for _, v := range m.Entities {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}
    if m.GeoPoint != nil {
 x.Bytes(m.GeoPoint.Encode()) 
}

return x.buf
}

func (m* TLMessagesEditMessage73) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 1)) != 0 { m.NoWebpage = true }
    if (flags & (1 << 12)) != 0 { m.StopGeoLive = true }
    m4 := &InputPeer{}
    m4.Decode(dbuf)
    m.Peer = m4
    m.Id = dbuf.Int()
    if (flags & (1 << 11)) != 0 { m.Message = dbuf.String() }
    if (flags & (1 << 2)) != 0 {
 m7 := &ReplyMarkup{}
    m7.Decode(dbuf)
    m.ReplyMarkup = m7 
}
    if (flags & (1 << 3)) != 0 {
 dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l8 := dbuf.Int()
m.Entities = make([]*MessageEntity, l8)
for i := int32(0); i < l8; i++ {
 m.Entities[i] = &MessageEntity{}
 (*m.Entities[i]).Decode(dbuf)
} 
}
    if (flags & (1 << 13)) != 0 {
 m9 := &InputGeoPoint{}
    m9.Decode(dbuf)
    m.GeoPoint = m9 
}

return dbuf.err
}

func NewTLMessagesSearch73() * TLMessagesSearch73 {
    return &TLMessagesSearch73{}
}

func (m* TLMessagesSearch73) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_search73))

    // flags
    var flags uint32 = 0
    if m.FromId != nil { flags |= 1 << 0 }
	x.UInt(flags)

    x.Bytes(m.Peer.Encode())
    x.String(m.Q)
    if m.FromId != nil {
 x.Bytes(m.FromId.Encode()) 
}
    x.Bytes(m.Filter.Encode())
    x.Int(m.MinDate)
    x.Int(m.MaxDate)
    x.Int(m.Offset)
    x.Int(m.MaxId)
    x.Int(m.Limit)

return x.buf
}

func (m* TLMessagesSearch73) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    m2 := &InputPeer{}
    m2.Decode(dbuf)
    m.Peer = m2
    m.Q = dbuf.String()
    if (flags & (1 << 0)) != 0 {
 m4 := &InputUser{}
    m4.Decode(dbuf)
    m.FromId = m4 
}
    m5 := &MessagesFilter{}
    m5.Decode(dbuf)
    m.Filter = m5
    m.MinDate = dbuf.Int()
    m.MaxDate = dbuf.Int()
    m.Offset = dbuf.Int()
    m.MaxId = dbuf.Int()
    m.Limit = dbuf.Int()

return dbuf.err
}

func NewTLMessagesReadMentions() * TLMessagesReadMentions {
    return &TLMessagesReadMentions{}
}

func (m* TLMessagesReadMentions) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_readMentions))

    x.Bytes(m.Peer.Encode())

return x.buf
}

func (m* TLMessagesReadMentions) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1

return dbuf.err
}

func NewTLMessagesGetRecentLocations() * TLMessagesGetRecentLocations {
    return &TLMessagesGetRecentLocations{}
}

func (m* TLMessagesGetRecentLocations) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getRecentLocations))

    x.Bytes(m.Peer.Encode())
    x.Int(m.Limit)

return x.buf
}

func (m* TLMessagesGetRecentLocations) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.Limit = dbuf.Int()

return dbuf.err
}

func NewTLMessagesSendMultiMedia() * TLMessagesSendMultiMedia {
    return &TLMessagesSendMultiMedia{}
}

func (m* TLMessagesSendMultiMedia) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_sendMultiMedia))

    // flags
    var flags uint32 = 0
    if m.Silent == true { flags |= 1 << 5 }
    if m.Background == true { flags |= 1 << 6 }
    if m.ClearDraft == true { flags |= 1 << 7 }
    if m.ReplyToMsgId != 0 { flags |= 1 << 0 }
	x.UInt(flags)

    
    
    
    x.Bytes(m.Peer.Encode())
    if m.ReplyToMsgId != 0 { x.Int(m.ReplyToMsgId) }
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.MultiMedia)))
for _, v := range m.MultiMedia {
  x.buf = append(x.buf, (*v).Encode()...)
}

return x.buf
}

func (m* TLMessagesSendMultiMedia) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 5)) != 0 { m.Silent = true }
    if (flags & (1 << 6)) != 0 { m.Background = true }
    if (flags & (1 << 7)) != 0 { m.ClearDraft = true }
    m5 := &InputPeer{}
    m5.Decode(dbuf)
    m.Peer = m5
    if (flags & (1 << 0)) != 0 { m.ReplyToMsgId = dbuf.Int() }
    dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l7 := dbuf.Int()
m.MultiMedia = make([]*InputSingleMedia, l7)
for i := int32(0); i < l7; i++ {
 m.MultiMedia[i] = &InputSingleMedia{}
 (*m.MultiMedia[i]).Decode(dbuf)
}

return dbuf.err
}

func NewTLMessagesUploadEncryptedFile() * TLMessagesUploadEncryptedFile {
    return &TLMessagesUploadEncryptedFile{}
}

func (m* TLMessagesUploadEncryptedFile) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_uploadEncryptedFile))

    x.Bytes(m.Peer.Encode())
    x.Bytes(m.File.Encode())

return x.buf
}

func (m* TLMessagesUploadEncryptedFile) Decode(dbuf *DecodeBuf) error {
    m1 := &InputEncryptedChat{}
    m1.Decode(dbuf)
    m.Peer = m1
    m2 := &InputEncryptedFile{}
    m2.Decode(dbuf)
    m.File = m2

return dbuf.err
}

func NewTLMessagesSaveRecentSticker73() * TLMessagesSaveRecentSticker73 {
    return &TLMessagesSaveRecentSticker73{}
}

func (m* TLMessagesSaveRecentSticker73) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_saveRecentSticker73))

    x.Bytes(m.Id.Encode())
    x.Bytes(m.Unsave.Encode())

return x.buf
}

func (m* TLMessagesSaveRecentSticker73) Decode(dbuf *DecodeBuf) error {
    m1 := &InputDocument{}
    m1.Decode(dbuf)
    m.Id = m1
    m2 := &Bool{}
    m2.Decode(dbuf)
    m.Unsave = m2

return dbuf.err
}

func NewTLChannelsDeleteHistory() * TLChannelsDeleteHistory {
    return &TLChannelsDeleteHistory{}
}

func (m* TLChannelsDeleteHistory) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_deleteHistory))

    x.Bytes(m.Channel.Encode())
    x.Int(m.MaxId)

return x.buf
}

func (m* TLChannelsDeleteHistory) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1
    m.MaxId = dbuf.Int()

return dbuf.err
}

func NewTLChannelsTogglePreHistoryHidden() * TLChannelsTogglePreHistoryHidden {
    return &TLChannelsTogglePreHistoryHidden{}
}

func (m* TLChannelsTogglePreHistoryHidden) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_togglePreHistoryHidden))

    x.Bytes(m.Channel.Encode())
    x.Bytes(m.Enabled.Encode())

return x.buf
}

func (m* TLChannelsTogglePreHistoryHidden) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1
    m2 := &Bool{}
    m2.Decode(dbuf)
    m.Enabled = m2

return dbuf.err
}

func NewTLChannelsGetParticipants73() * TLChannelsGetParticipants73 {
    return &TLChannelsGetParticipants73{}
}

func (m* TLChannelsGetParticipants73) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_getParticipants73))

    x.Bytes(m.Channel.Encode())
    x.Bytes(m.Filter.Encode())
    x.Int(m.Offset)
    x.Int(m.Limit)
    x.Int(m.Hash)

return x.buf
}

func (m* TLChannelsGetParticipants73) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1
    m2 := &ChannelParticipantsFilter{}
    m2.Decode(dbuf)
    m.Filter = m2
    m.Offset = dbuf.Int()
    m.Limit = dbuf.Int()
    m.Hash = dbuf.Int()

return dbuf.err
}

func NewTLChannelsEditBanned2() * TLChannelsEditBanned2 {
    return &TLChannelsEditBanned2{}
}

func (m* TLChannelsEditBanned2) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_editBanned2))

    x.Int(m.ChannelId)
    x.Bytes(m.IsSilence.Encode())
    x.Bytes(m.IsText.Encode())

return x.buf
}

func (m* TLChannelsEditBanned2) Decode(dbuf *DecodeBuf) error {
    m.ChannelId = dbuf.Int()
    m2 := &Bool{}
    m2.Decode(dbuf)
    m.IsSilence = m2
    m3 := &Bool{}
    m3.Decode(dbuf)
    m.IsText = m3

return dbuf.err
}

func NewTLChannelsGetBanned2() * TLChannelsGetBanned2 {
    return &TLChannelsGetBanned2{}
}

func (m* TLChannelsGetBanned2) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_getBanned2))

    x.Int(m.ChannelId)

return x.buf
}

func (m* TLChannelsGetBanned2) Decode(dbuf *DecodeBuf) error {
    m.ChannelId = dbuf.Int()

return dbuf.err
}

func NewTLPhone_WebrtcCreateOffer() * TLPhone_WebrtcCreateOffer {
    return &TLPhone_WebrtcCreateOffer{}
}

func (m* TLPhone_WebrtcCreateOffer) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_phone_WebrtcCreateOffer))

    x.Bytes(m.Peer.Encode())
    x.String(m.Sdp)

return x.buf
}

func (m* TLPhone_WebrtcCreateOffer) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPhoneCall{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.Sdp = dbuf.String()

return dbuf.err
}

func NewTLPhone_WebrtcCreateAnswer() * TLPhone_WebrtcCreateAnswer {
    return &TLPhone_WebrtcCreateAnswer{}
}

func (m* TLPhone_WebrtcCreateAnswer) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_phone_WebrtcCreateAnswer))

    x.Bytes(m.Peer.Encode())
    x.String(m.Sdp)

return x.buf
}

func (m* TLPhone_WebrtcCreateAnswer) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPhoneCall{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.Sdp = dbuf.String()

return dbuf.err
}

func NewTLPhone_WebrtcAddCandidate() * TLPhone_WebrtcAddCandidate {
    return &TLPhone_WebrtcAddCandidate{}
}

func (m* TLPhone_WebrtcAddCandidate) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_phone_WebrtcAddCandidate))

    x.Bytes(m.Peer.Encode())
    x.String(m.SdpId)
    x.Int(m.SdpIndex)
    x.String(m.Sdp)

return x.buf
}

func (m* TLPhone_WebrtcAddCandidate) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPhoneCall{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.SdpId = dbuf.String()
    m.SdpIndex = dbuf.Int()
    m.Sdp = dbuf.String()

return dbuf.err
}

func NewTLInitConnection82() * TLInitConnection82 {
    return &TLInitConnection82{}
}

func (m* TLInitConnection82) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_initConnection82))

    // flags
    var flags uint32 = 0
    if m.Proxy != nil { flags |= 1 << 0 }
	x.UInt(flags)

    x.Int(m.ApiId)
    x.String(m.DeviceModel)
    x.String(m.SystemVersion)
    x.String(m.AppVersion)
    x.String(m.SystemLangCode)
    x.String(m.LangPack)
    x.String(m.LangCode)
    if m.Proxy != nil {
 x.Bytes(m.Proxy.Encode()) 
}
    x.Bytes(m.Query)

return x.buf
}

func (m* TLInitConnection82) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    m.ApiId = dbuf.Int()
    m.DeviceModel = dbuf.String()
    m.SystemVersion = dbuf.String()
    m.AppVersion = dbuf.String()
    m.SystemLangCode = dbuf.String()
    m.LangPack = dbuf.String()
    m.LangCode = dbuf.String()
    if (flags & (1 << 0)) != 0 {
 m9 := &InputClientProxy{}
    m9.Decode(dbuf)
    m.Proxy = m9 
}
    // TODO(@benqi): 暂时这么做，估计还是使用Any类型比较好
o10 := dbuf.Object()
m.Query = o10.Encode()

return dbuf.err
}

func NewTLHelpGetTermsOfServiceUpdate() * TLHelpGetTermsOfServiceUpdate {
    return &TLHelpGetTermsOfServiceUpdate{}
}

func (m* TLHelpGetTermsOfServiceUpdate) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_help_getTermsOfServiceUpdate))


return x.buf
}

func (m* TLHelpGetTermsOfServiceUpdate) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLHelpAcceptTermsOfService() * TLHelpAcceptTermsOfService {
    return &TLHelpAcceptTermsOfService{}
}

func (m* TLHelpAcceptTermsOfService) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_help_acceptTermsOfService))

    x.Bytes(m.Id.Encode())

return x.buf
}

func (m* TLHelpAcceptTermsOfService) Decode(dbuf *DecodeBuf) error {
    m1 := &DataJSON{}
    m1.Decode(dbuf)
    m.Id = m1

return dbuf.err
}

func NewTLHelpGetDeepLinkInfo() * TLHelpGetDeepLinkInfo {
    return &TLHelpGetDeepLinkInfo{}
}

func (m* TLHelpGetDeepLinkInfo) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_help_getDeepLinkInfo))

    x.String(m.Path)

return x.buf
}

func (m* TLHelpGetDeepLinkInfo) Decode(dbuf *DecodeBuf) error {
    m.Path = dbuf.String()

return dbuf.err
}

func NewTLHelpTest() * TLHelpTest {
    return &TLHelpTest{}
}

func (m* TLHelpTest) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_help_test))


return x.buf
}

func (m* TLHelpTest) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLMessagesGetPeerDialogs82() * TLMessagesGetPeerDialogs82 {
    return &TLMessagesGetPeerDialogs82{}
}

func (m* TLMessagesGetPeerDialogs82) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getPeerDialogs82))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Peers)))
for _, v := range m.Peers {
  x.buf = append(x.buf, (*v).Encode()...)
}

return x.buf
}

func (m* TLMessagesGetPeerDialogs82) Decode(dbuf *DecodeBuf) error {
    dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l1 := dbuf.Int()
m.Peers = make([]*InputDialogPeer, l1)
for i := int32(0); i < l1; i++ {
 m.Peers[i] = &InputDialogPeer{}
 (*m.Peers[i]).Decode(dbuf)
}

return dbuf.err
}

func NewTLMessagesGetMessages82() * TLMessagesGetMessages82 {
    return &TLMessagesGetMessages82{}
}

func (m* TLMessagesGetMessages82) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getMessages82))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Id)))
for _, v := range m.Id {
  x.buf = append(x.buf, (*v).Encode()...)
}

return x.buf
}

func (m* TLMessagesGetMessages82) Decode(dbuf *DecodeBuf) error {
    dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l1 := dbuf.Int()
m.Id = make([]*InputMessage, l1)
for i := int32(0); i < l1; i++ {
 m.Id[i] = &InputMessage{}
 (*m.Id[i]).Decode(dbuf)
}

return dbuf.err
}

func NewTLMessagesGetDialogs82() * TLMessagesGetDialogs82 {
    return &TLMessagesGetDialogs82{}
}

func (m* TLMessagesGetDialogs82) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getDialogs82))

    // flags
    var flags uint32 = 0
    if m.ExcludePinned == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Int(m.OffsetDate)
    x.Int(m.OffsetId)
    x.Bytes(m.OffsetPeer.Encode())
    x.Int(m.Limit)
    x.Int(m.Hash)

return x.buf
}

func (m* TLMessagesGetDialogs82) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.ExcludePinned = true }
    m.OffsetDate = dbuf.Int()
    m.OffsetId = dbuf.Int()
    m5 := &InputPeer{}
    m5.Decode(dbuf)
    m.OffsetPeer = m5
    m.Limit = dbuf.Int()
    m.Hash = dbuf.Int()

return dbuf.err
}

func NewTLMessagesGetHistory82() * TLMessagesGetHistory82 {
    return &TLMessagesGetHistory82{}
}

func (m* TLMessagesGetHistory82) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getHistory82))

    x.Bytes(m.Peer.Encode())
    x.Int(m.OffsetId)
    x.Int(m.OffsetDate)
    x.Int(m.AddOffset)
    x.Int(m.Limit)
    x.Int(m.MaxId)
    x.Int(m.MinId)
    x.Int(m.Hash)

return x.buf
}

func (m* TLMessagesGetHistory82) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.OffsetId = dbuf.Int()
    m.OffsetDate = dbuf.Int()
    m.AddOffset = dbuf.Int()
    m.Limit = dbuf.Int()
    m.MaxId = dbuf.Int()
    m.MinId = dbuf.Int()
    m.Hash = dbuf.Int()

return dbuf.err
}

func NewTLMessagesSearch82() * TLMessagesSearch82 {
    return &TLMessagesSearch82{}
}

func (m* TLMessagesSearch82) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_search82))

    // flags
    var flags uint32 = 0
    if m.FromId != nil { flags |= 1 << 0 }
	x.UInt(flags)

    x.Bytes(m.Peer.Encode())
    x.String(m.Q)
    if m.FromId != nil {
 x.Bytes(m.FromId.Encode()) 
}
    x.Bytes(m.Filter.Encode())
    x.Int(m.MinDate)
    x.Int(m.MaxDate)
    x.Int(m.OffsetId)
    x.Int(m.AddOffset)
    x.Int(m.Limit)
    x.Int(m.MaxId)
    x.Int(m.MinId)
    x.Int(m.Hash)

return x.buf
}

func (m* TLMessagesSearch82) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    m2 := &InputPeer{}
    m2.Decode(dbuf)
    m.Peer = m2
    m.Q = dbuf.String()
    if (flags & (1 << 0)) != 0 {
 m4 := &InputUser{}
    m4.Decode(dbuf)
    m.FromId = m4 
}
    m5 := &MessagesFilter{}
    m5.Decode(dbuf)
    m.Filter = m5
    m.MinDate = dbuf.Int()
    m.MaxDate = dbuf.Int()
    m.OffsetId = dbuf.Int()
    m.AddOffset = dbuf.Int()
    m.Limit = dbuf.Int()
    m.MaxId = dbuf.Int()
    m.MinId = dbuf.Int()
    m.Hash = dbuf.Int()

return dbuf.err
}

func NewTLMessagesSendMedia82() * TLMessagesSendMedia82 {
    return &TLMessagesSendMedia82{}
}

func (m* TLMessagesSendMedia82) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_sendMedia82))

    // flags
    var flags uint32 = 0
    if m.Silent == true { flags |= 1 << 5 }
    if m.Background == true { flags |= 1 << 6 }
    if m.ClearDraft == true { flags |= 1 << 7 }
    if m.ReplyToMsgId != 0 { flags |= 1 << 0 }
    if m.ReplyMarkup != nil { flags |= 1 << 2 }
    if m.Entities != nil { flags |= 1 << 3 }
	x.UInt(flags)

    
    
    
    x.Bytes(m.Peer.Encode())
    if m.ReplyToMsgId != 0 { x.Int(m.ReplyToMsgId) }
    x.Bytes(m.Media.Encode())
    x.String(m.Message)
    x.Long(m.RandomId)
    if m.ReplyMarkup != nil {
 x.Bytes(m.ReplyMarkup.Encode()) 
}
    if m.Entities != nil {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Entities)))
for _, v := range m.Entities {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}

return x.buf
}

func (m* TLMessagesSendMedia82) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 5)) != 0 { m.Silent = true }
    if (flags & (1 << 6)) != 0 { m.Background = true }
    if (flags & (1 << 7)) != 0 { m.ClearDraft = true }
    m5 := &InputPeer{}
    m5.Decode(dbuf)
    m.Peer = m5
    if (flags & (1 << 0)) != 0 { m.ReplyToMsgId = dbuf.Int() }
    m7 := &InputMedia{}
    m7.Decode(dbuf)
    m.Media = m7
    m.Message = dbuf.String()
    m.RandomId = dbuf.Long()
    if (flags & (1 << 2)) != 0 {
 m10 := &ReplyMarkup{}
    m10.Decode(dbuf)
    m.ReplyMarkup = m10 
}
    if (flags & (1 << 3)) != 0 {
 dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l11 := dbuf.Int()
m.Entities = make([]*MessageEntity, l11)
for i := int32(0); i < l11; i++ {
 m.Entities[i] = &MessageEntity{}
 (*m.Entities[i]).Decode(dbuf)
} 
}

return dbuf.err
}

func NewTLInitConnection114() * TLInitConnection114 {
    return &TLInitConnection114{}
}

func (m* TLInitConnection114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_initConnection114))

    // flags
    var flags uint32 = 0
    if m.Proxy != nil { flags |= 1 << 0 }
    if m.Params != nil { flags |= 1 << 1 }
	x.UInt(flags)

    x.Int(m.ApiId)
    x.String(m.DeviceModel)
    x.String(m.SystemVersion)
    x.String(m.AppVersion)
    x.String(m.SystemLangCode)
    x.String(m.LangPack)
    x.String(m.LangCode)
    if m.Proxy != nil {
 x.Bytes(m.Proxy.Encode()) 
}
    if m.Params != nil {
 x.Bytes(m.Params.Encode()) 
}
    x.Bytes(m.Query)

return x.buf
}

func (m* TLInitConnection114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    m.ApiId = dbuf.Int()
    m.DeviceModel = dbuf.String()
    m.SystemVersion = dbuf.String()
    m.AppVersion = dbuf.String()
    m.SystemLangCode = dbuf.String()
    m.LangPack = dbuf.String()
    m.LangCode = dbuf.String()
    if (flags & (1 << 0)) != 0 {
 m9 := &InputClientProxy{}
    m9.Decode(dbuf)
    m.Proxy = m9 
}
    if (flags & (1 << 1)) != 0 {
 m10 := &JSONValue{}
    m10.Decode(dbuf)
    m.Params = m10 
}
    // TODO(@benqi): 暂时这么做，估计还是使用Any类型比较好
o11 := dbuf.Object()
m.Query = o11.Encode()

return dbuf.err
}

func NewTLInvokeWithMessagesRange() * TLInvokeWithMessagesRange {
    return &TLInvokeWithMessagesRange{}
}

func (m* TLInvokeWithMessagesRange) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_invokeWithMessagesRange))

    x.Bytes(m.Range.Encode())
    x.Bytes(m.Query)

return x.buf
}

func (m* TLInvokeWithMessagesRange) Decode(dbuf *DecodeBuf) error {
    m1 := &MessageRange{}
    m1.Decode(dbuf)
    m.Range = m1
    // TODO(@benqi): 暂时这么做，估计还是使用Any类型比较好
o2 := dbuf.Object()
m.Query = o2.Encode()

return dbuf.err
}

func NewTLInvokeWithTakeout() * TLInvokeWithTakeout {
    return &TLInvokeWithTakeout{}
}

func (m* TLInvokeWithTakeout) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_invokeWithTakeout))

    x.Long(m.TakeoutId)
    x.Bytes(m.Query)

return x.buf
}

func (m* TLInvokeWithTakeout) Decode(dbuf *DecodeBuf) error {
    m.TakeoutId = dbuf.Long()
    // TODO(@benqi): 暂时这么做，估计还是使用Any类型比较好
o2 := dbuf.Object()
m.Query = o2.Encode()

return dbuf.err
}

func NewTLAuthSendCode114() * TLAuthSendCode114 {
    return &TLAuthSendCode114{}
}

func (m* TLAuthSendCode114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_auth_sendCode114))

    x.String(m.PhoneNumber)
    x.Int(m.ApiId)
    x.String(m.ApiHash)
    x.Bytes(m.Settings.Encode())

return x.buf
}

func (m* TLAuthSendCode114) Decode(dbuf *DecodeBuf) error {
    m.PhoneNumber = dbuf.String()
    m.ApiId = dbuf.Int()
    m.ApiHash = dbuf.String()
    m4 := &CodeSettings{}
    m4.Decode(dbuf)
    m.Settings = m4

return dbuf.err
}

func NewTLAuthSignUp114() * TLAuthSignUp114 {
    return &TLAuthSignUp114{}
}

func (m* TLAuthSignUp114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_auth_signUp114))

    x.String(m.PhoneNumber)
    x.String(m.PhoneCodeHash)
    x.String(m.FirstName)
    x.String(m.LastName)

return x.buf
}

func (m* TLAuthSignUp114) Decode(dbuf *DecodeBuf) error {
    m.PhoneNumber = dbuf.String()
    m.PhoneCodeHash = dbuf.String()
    m.FirstName = dbuf.String()
    m.LastName = dbuf.String()

return dbuf.err
}

func NewTLAuthCheckPassword114() * TLAuthCheckPassword114 {
    return &TLAuthCheckPassword114{}
}

func (m* TLAuthCheckPassword114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_auth_checkPassword114))

    x.Bytes(m.Password.Encode())

return x.buf
}

func (m* TLAuthCheckPassword114) Decode(dbuf *DecodeBuf) error {
    m1 := &InputCheckPasswordSRP{}
    m1.Decode(dbuf)
    m.Password = m1

return dbuf.err
}

func NewTLAuthExportLoginToken() * TLAuthExportLoginToken {
    return &TLAuthExportLoginToken{}
}

func (m* TLAuthExportLoginToken) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_auth_exportLoginToken))

    x.Int(m.ApiId)
    x.String(m.ApiHash)
    x.VectorInt(m.ExceptIds)


return x.buf
}

func (m* TLAuthExportLoginToken) Decode(dbuf *DecodeBuf) error {
    m.ApiId = dbuf.Int()
    m.ApiHash = dbuf.String()
    m.ExceptIds = dbuf.VectorInt()

return dbuf.err
}

func NewTLAuthImportLoginToken() * TLAuthImportLoginToken {
    return &TLAuthImportLoginToken{}
}

func (m* TLAuthImportLoginToken) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_auth_importLoginToken))

    x.StringBytes(m.Token)

return x.buf
}

func (m* TLAuthImportLoginToken) Decode(dbuf *DecodeBuf) error {
    m.Token = dbuf.StringBytes()

return dbuf.err
}

func NewTLAuthAcceptLoginToken() * TLAuthAcceptLoginToken {
    return &TLAuthAcceptLoginToken{}
}

func (m* TLAuthAcceptLoginToken) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_auth_acceptLoginToken))

    x.StringBytes(m.Token)

return x.buf
}

func (m* TLAuthAcceptLoginToken) Decode(dbuf *DecodeBuf) error {
    m.Token = dbuf.StringBytes()

return dbuf.err
}

func NewTLAccountRegisterDevice114() * TLAccountRegisterDevice114 {
    return &TLAccountRegisterDevice114{}
}

func (m* TLAccountRegisterDevice114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_registerDevice114))

    // flags
    var flags uint32 = 0
    if m.NoMuted == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Int(m.TokenType)
    x.String(m.Token)
    x.Bytes(m.AppSandbox.Encode())
    x.StringBytes(m.Secret)
    x.VectorInt(m.OtherUids)


return x.buf
}

func (m* TLAccountRegisterDevice114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.NoMuted = true }
    m.TokenType = dbuf.Int()
    m.Token = dbuf.String()
    m5 := &Bool{}
    m5.Decode(dbuf)
    m.AppSandbox = m5
    m.Secret = dbuf.StringBytes()
    m.OtherUids = dbuf.VectorInt()

return dbuf.err
}

func NewTLAccountUnregisterDevice114() * TLAccountUnregisterDevice114 {
    return &TLAccountUnregisterDevice114{}
}

func (m* TLAccountUnregisterDevice114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_unregisterDevice114))

    x.Int(m.TokenType)
    x.String(m.Token)
    x.VectorInt(m.OtherUids)


return x.buf
}

func (m* TLAccountUnregisterDevice114) Decode(dbuf *DecodeBuf) error {
    m.TokenType = dbuf.Int()
    m.Token = dbuf.String()
    m.OtherUids = dbuf.VectorInt()

return dbuf.err
}

func NewTLAccountGetWallPapers114() * TLAccountGetWallPapers114 {
    return &TLAccountGetWallPapers114{}
}

func (m* TLAccountGetWallPapers114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_getWallPapers114))

    x.Int(m.Hash)

return x.buf
}

func (m* TLAccountGetWallPapers114) Decode(dbuf *DecodeBuf) error {
    m.Hash = dbuf.Int()

return dbuf.err
}

func NewTLAccountSendChangePhoneCode114() * TLAccountSendChangePhoneCode114 {
    return &TLAccountSendChangePhoneCode114{}
}

func (m* TLAccountSendChangePhoneCode114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_sendChangePhoneCode114))

    x.String(m.PhoneNumber)
    x.Bytes(m.Settings.Encode())

return x.buf
}

func (m* TLAccountSendChangePhoneCode114) Decode(dbuf *DecodeBuf) error {
    m.PhoneNumber = dbuf.String()
    m2 := &CodeSettings{}
    m2.Decode(dbuf)
    m.Settings = m2

return dbuf.err
}

func NewTLAccountGetPasswordSettings114() * TLAccountGetPasswordSettings114 {
    return &TLAccountGetPasswordSettings114{}
}

func (m* TLAccountGetPasswordSettings114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_getPasswordSettings114))

    x.Bytes(m.Password.Encode())

return x.buf
}

func (m* TLAccountGetPasswordSettings114) Decode(dbuf *DecodeBuf) error {
    m1 := &InputCheckPasswordSRP{}
    m1.Decode(dbuf)
    m.Password = m1

return dbuf.err
}

func NewTLAccountUpdatePasswordSettings114() * TLAccountUpdatePasswordSettings114 {
    return &TLAccountUpdatePasswordSettings114{}
}

func (m* TLAccountUpdatePasswordSettings114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_updatePasswordSettings114))

    x.Bytes(m.Password.Encode())
    x.Bytes(m.NewSettings.Encode())

return x.buf
}

func (m* TLAccountUpdatePasswordSettings114) Decode(dbuf *DecodeBuf) error {
    m1 := &InputCheckPasswordSRP{}
    m1.Decode(dbuf)
    m.Password = m1
    m2 := &Account_PasswordInputSettings{}
    m2.Decode(dbuf)
    m.NewSettings = m2

return dbuf.err
}

func NewTLAccountSendConfirmPhoneCode114() * TLAccountSendConfirmPhoneCode114 {
    return &TLAccountSendConfirmPhoneCode114{}
}

func (m* TLAccountSendConfirmPhoneCode114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_sendConfirmPhoneCode114))

    x.String(m.Hash)
    x.Bytes(m.Settings.Encode())

return x.buf
}

func (m* TLAccountSendConfirmPhoneCode114) Decode(dbuf *DecodeBuf) error {
    m.Hash = dbuf.String()
    m2 := &CodeSettings{}
    m2.Decode(dbuf)
    m.Settings = m2

return dbuf.err
}

func NewTLAccountGetTmpPassword114() * TLAccountGetTmpPassword114 {
    return &TLAccountGetTmpPassword114{}
}

func (m* TLAccountGetTmpPassword114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_getTmpPassword114))

    x.Bytes(m.Password.Encode())
    x.Int(m.Period)

return x.buf
}

func (m* TLAccountGetTmpPassword114) Decode(dbuf *DecodeBuf) error {
    m1 := &InputCheckPasswordSRP{}
    m1.Decode(dbuf)
    m.Password = m1
    m.Period = dbuf.Int()

return dbuf.err
}

func NewTLAccountGetWebAuthorizations() * TLAccountGetWebAuthorizations {
    return &TLAccountGetWebAuthorizations{}
}

func (m* TLAccountGetWebAuthorizations) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_getWebAuthorizations))


return x.buf
}

func (m* TLAccountGetWebAuthorizations) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLAccountResetWebAuthorization() * TLAccountResetWebAuthorization {
    return &TLAccountResetWebAuthorization{}
}

func (m* TLAccountResetWebAuthorization) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_resetWebAuthorization))

    x.Long(m.Hash)

return x.buf
}

func (m* TLAccountResetWebAuthorization) Decode(dbuf *DecodeBuf) error {
    m.Hash = dbuf.Long()

return dbuf.err
}

func NewTLAccountResetWebAuthorizations() * TLAccountResetWebAuthorizations {
    return &TLAccountResetWebAuthorizations{}
}

func (m* TLAccountResetWebAuthorizations) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_resetWebAuthorizations))


return x.buf
}

func (m* TLAccountResetWebAuthorizations) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLAccountGetAllSecureValues() * TLAccountGetAllSecureValues {
    return &TLAccountGetAllSecureValues{}
}

func (m* TLAccountGetAllSecureValues) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_getAllSecureValues))


return x.buf
}

func (m* TLAccountGetAllSecureValues) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLAccountGetSecureValue() * TLAccountGetSecureValue {
    return &TLAccountGetSecureValue{}
}

func (m* TLAccountGetSecureValue) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_getSecureValue))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Types)))
for _, v := range m.Types {
  x.buf = append(x.buf, (*v).Encode()...)
}

return x.buf
}

func (m* TLAccountGetSecureValue) Decode(dbuf *DecodeBuf) error {
    dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l1 := dbuf.Int()
m.Types = make([]*SecureValueType, l1)
for i := int32(0); i < l1; i++ {
 m.Types[i] = &SecureValueType{}
 (*m.Types[i]).Decode(dbuf)
}

return dbuf.err
}

func NewTLAccountSaveSecureValue() * TLAccountSaveSecureValue {
    return &TLAccountSaveSecureValue{}
}

func (m* TLAccountSaveSecureValue) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_saveSecureValue))

    x.Bytes(m.Value.Encode())
    x.Long(m.SecureSecretId)

return x.buf
}

func (m* TLAccountSaveSecureValue) Decode(dbuf *DecodeBuf) error {
    m1 := &InputSecureValue{}
    m1.Decode(dbuf)
    m.Value = m1
    m.SecureSecretId = dbuf.Long()

return dbuf.err
}

func NewTLAccountDeleteSecureValue() * TLAccountDeleteSecureValue {
    return &TLAccountDeleteSecureValue{}
}

func (m* TLAccountDeleteSecureValue) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_deleteSecureValue))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Types)))
for _, v := range m.Types {
  x.buf = append(x.buf, (*v).Encode()...)
}

return x.buf
}

func (m* TLAccountDeleteSecureValue) Decode(dbuf *DecodeBuf) error {
    dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l1 := dbuf.Int()
m.Types = make([]*SecureValueType, l1)
for i := int32(0); i < l1; i++ {
 m.Types[i] = &SecureValueType{}
 (*m.Types[i]).Decode(dbuf)
}

return dbuf.err
}

func NewTLAccountGetAuthorizationForm() * TLAccountGetAuthorizationForm {
    return &TLAccountGetAuthorizationForm{}
}

func (m* TLAccountGetAuthorizationForm) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_getAuthorizationForm))

    x.Int(m.BotId)
    x.String(m.Scope)
    x.String(m.PublicKey)

return x.buf
}

func (m* TLAccountGetAuthorizationForm) Decode(dbuf *DecodeBuf) error {
    m.BotId = dbuf.Int()
    m.Scope = dbuf.String()
    m.PublicKey = dbuf.String()

return dbuf.err
}

func NewTLAccountAcceptAuthorization() * TLAccountAcceptAuthorization {
    return &TLAccountAcceptAuthorization{}
}

func (m* TLAccountAcceptAuthorization) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_acceptAuthorization))

    x.Int(m.BotId)
    x.String(m.Scope)
    x.String(m.PublicKey)
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.ValueHashes)))
for _, v := range m.ValueHashes {
  x.buf = append(x.buf, (*v).Encode()...)
}
    x.Bytes(m.Credentials.Encode())

return x.buf
}

func (m* TLAccountAcceptAuthorization) Decode(dbuf *DecodeBuf) error {
    m.BotId = dbuf.Int()
    m.Scope = dbuf.String()
    m.PublicKey = dbuf.String()
    dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l4 := dbuf.Int()
m.ValueHashes = make([]*SecureValueHash, l4)
for i := int32(0); i < l4; i++ {
 m.ValueHashes[i] = &SecureValueHash{}
 (*m.ValueHashes[i]).Decode(dbuf)
}
    m5 := &SecureCredentialsEncrypted{}
    m5.Decode(dbuf)
    m.Credentials = m5

return dbuf.err
}

func NewTLAccountSendVerifyPhoneCode() * TLAccountSendVerifyPhoneCode {
    return &TLAccountSendVerifyPhoneCode{}
}

func (m* TLAccountSendVerifyPhoneCode) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_sendVerifyPhoneCode))

    x.String(m.PhoneNumber)
    x.Bytes(m.Settings.Encode())

return x.buf
}

func (m* TLAccountSendVerifyPhoneCode) Decode(dbuf *DecodeBuf) error {
    m.PhoneNumber = dbuf.String()
    m2 := &CodeSettings{}
    m2.Decode(dbuf)
    m.Settings = m2

return dbuf.err
}

func NewTLAccountVerifyPhone() * TLAccountVerifyPhone {
    return &TLAccountVerifyPhone{}
}

func (m* TLAccountVerifyPhone) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_verifyPhone))

    x.String(m.PhoneNumber)
    x.String(m.PhoneCodeHash)
    x.String(m.PhoneCode)

return x.buf
}

func (m* TLAccountVerifyPhone) Decode(dbuf *DecodeBuf) error {
    m.PhoneNumber = dbuf.String()
    m.PhoneCodeHash = dbuf.String()
    m.PhoneCode = dbuf.String()

return dbuf.err
}

func NewTLAccountSendVerifyEmailCode() * TLAccountSendVerifyEmailCode {
    return &TLAccountSendVerifyEmailCode{}
}

func (m* TLAccountSendVerifyEmailCode) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_sendVerifyEmailCode))

    x.String(m.Email)

return x.buf
}

func (m* TLAccountSendVerifyEmailCode) Decode(dbuf *DecodeBuf) error {
    m.Email = dbuf.String()

return dbuf.err
}

func NewTLAccountVerifyEmail() * TLAccountVerifyEmail {
    return &TLAccountVerifyEmail{}
}

func (m* TLAccountVerifyEmail) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_verifyEmail))

    x.String(m.Email)
    x.String(m.Code)

return x.buf
}

func (m* TLAccountVerifyEmail) Decode(dbuf *DecodeBuf) error {
    m.Email = dbuf.String()
    m.Code = dbuf.String()

return dbuf.err
}

func NewTLAccountInitTakeoutSession() * TLAccountInitTakeoutSession {
    return &TLAccountInitTakeoutSession{}
}

func (m* TLAccountInitTakeoutSession) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_initTakeoutSession))

    // flags
    var flags uint32 = 0
    if m.Contacts == true { flags |= 1 << 0 }
    if m.MessageUsers == true { flags |= 1 << 1 }
    if m.MessageChats == true { flags |= 1 << 2 }
    if m.MessageMegagroups == true { flags |= 1 << 3 }
    if m.MessageChannels == true { flags |= 1 << 4 }
    if m.Files == true { flags |= 1 << 5 }
    if m.FileMaxSize != 0 { flags |= 1 << 5 }
	x.UInt(flags)

    
    
    
    
    
    
    if m.FileMaxSize != 0 { x.Int(m.FileMaxSize) }

return x.buf
}

func (m* TLAccountInitTakeoutSession) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Contacts = true }
    if (flags & (1 << 1)) != 0 { m.MessageUsers = true }
    if (flags & (1 << 2)) != 0 { m.MessageChats = true }
    if (flags & (1 << 3)) != 0 { m.MessageMegagroups = true }
    if (flags & (1 << 4)) != 0 { m.MessageChannels = true }
    if (flags & (1 << 5)) != 0 { m.Files = true }
    if (flags & (1 << 5)) != 0 { m.FileMaxSize = dbuf.Int() }

return dbuf.err
}

func NewTLAccountFinishTakeoutSession() * TLAccountFinishTakeoutSession {
    return &TLAccountFinishTakeoutSession{}
}

func (m* TLAccountFinishTakeoutSession) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_finishTakeoutSession))

    // flags
    var flags uint32 = 0
    if m.Success == true { flags |= 1 << 0 }
	x.UInt(flags)

    

return x.buf
}

func (m* TLAccountFinishTakeoutSession) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Success = true }

return dbuf.err
}

func NewTLAccountConfirmPasswordEmail() * TLAccountConfirmPasswordEmail {
    return &TLAccountConfirmPasswordEmail{}
}

func (m* TLAccountConfirmPasswordEmail) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_confirmPasswordEmail))

    x.String(m.Code)

return x.buf
}

func (m* TLAccountConfirmPasswordEmail) Decode(dbuf *DecodeBuf) error {
    m.Code = dbuf.String()

return dbuf.err
}

func NewTLAccountResendPasswordEmail() * TLAccountResendPasswordEmail {
    return &TLAccountResendPasswordEmail{}
}

func (m* TLAccountResendPasswordEmail) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_resendPasswordEmail))


return x.buf
}

func (m* TLAccountResendPasswordEmail) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLAccountCancelPasswordEmail() * TLAccountCancelPasswordEmail {
    return &TLAccountCancelPasswordEmail{}
}

func (m* TLAccountCancelPasswordEmail) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_cancelPasswordEmail))


return x.buf
}

func (m* TLAccountCancelPasswordEmail) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLAccountGetContactSignUpNotification() * TLAccountGetContactSignUpNotification {
    return &TLAccountGetContactSignUpNotification{}
}

func (m* TLAccountGetContactSignUpNotification) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_getContactSignUpNotification))


return x.buf
}

func (m* TLAccountGetContactSignUpNotification) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLAccountSetContactSignUpNotification() * TLAccountSetContactSignUpNotification {
    return &TLAccountSetContactSignUpNotification{}
}

func (m* TLAccountSetContactSignUpNotification) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_setContactSignUpNotification))

    x.Bytes(m.Silent.Encode())

return x.buf
}

func (m* TLAccountSetContactSignUpNotification) Decode(dbuf *DecodeBuf) error {
    m1 := &Bool{}
    m1.Decode(dbuf)
    m.Silent = m1

return dbuf.err
}

func NewTLAccountGetNotifyExceptions() * TLAccountGetNotifyExceptions {
    return &TLAccountGetNotifyExceptions{}
}

func (m* TLAccountGetNotifyExceptions) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_getNotifyExceptions))

    // flags
    var flags uint32 = 0
    if m.CompareSound == true { flags |= 1 << 1 }
    if m.Peer != nil { flags |= 1 << 0 }
	x.UInt(flags)

    
    if m.Peer != nil {
 x.Bytes(m.Peer.Encode()) 
}

return x.buf
}

func (m* TLAccountGetNotifyExceptions) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 1)) != 0 { m.CompareSound = true }
    if (flags & (1 << 0)) != 0 {
 m3 := &InputNotifyPeer{}
    m3.Decode(dbuf)
    m.Peer = m3 
}

return dbuf.err
}

func NewTLAccountGetWallPaper() * TLAccountGetWallPaper {
    return &TLAccountGetWallPaper{}
}

func (m* TLAccountGetWallPaper) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_getWallPaper))

    x.Bytes(m.Wallpaper.Encode())

return x.buf
}

func (m* TLAccountGetWallPaper) Decode(dbuf *DecodeBuf) error {
    m1 := &InputWallPaper{}
    m1.Decode(dbuf)
    m.Wallpaper = m1

return dbuf.err
}

func NewTLAccountUploadWallPaper() * TLAccountUploadWallPaper {
    return &TLAccountUploadWallPaper{}
}

func (m* TLAccountUploadWallPaper) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_uploadWallPaper))

    x.Bytes(m.File.Encode())
    x.String(m.MimeType)
    x.Bytes(m.Settings.Encode())

return x.buf
}

func (m* TLAccountUploadWallPaper) Decode(dbuf *DecodeBuf) error {
    m1 := &InputFile{}
    m1.Decode(dbuf)
    m.File = m1
    m.MimeType = dbuf.String()
    m3 := &WallPaperSettings{}
    m3.Decode(dbuf)
    m.Settings = m3

return dbuf.err
}

func NewTLAccountSaveWallPaper() * TLAccountSaveWallPaper {
    return &TLAccountSaveWallPaper{}
}

func (m* TLAccountSaveWallPaper) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_saveWallPaper))

    x.Bytes(m.Wallpaper.Encode())
    x.Bytes(m.Unsave.Encode())
    x.Bytes(m.Settings.Encode())

return x.buf
}

func (m* TLAccountSaveWallPaper) Decode(dbuf *DecodeBuf) error {
    m1 := &InputWallPaper{}
    m1.Decode(dbuf)
    m.Wallpaper = m1
    m2 := &Bool{}
    m2.Decode(dbuf)
    m.Unsave = m2
    m3 := &WallPaperSettings{}
    m3.Decode(dbuf)
    m.Settings = m3

return dbuf.err
}

func NewTLAccountInstallWallPaper() * TLAccountInstallWallPaper {
    return &TLAccountInstallWallPaper{}
}

func (m* TLAccountInstallWallPaper) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_installWallPaper))

    x.Bytes(m.Wallpaper.Encode())
    x.Bytes(m.Settings.Encode())

return x.buf
}

func (m* TLAccountInstallWallPaper) Decode(dbuf *DecodeBuf) error {
    m1 := &InputWallPaper{}
    m1.Decode(dbuf)
    m.Wallpaper = m1
    m2 := &WallPaperSettings{}
    m2.Decode(dbuf)
    m.Settings = m2

return dbuf.err
}

func NewTLAccountResetWallPapers() * TLAccountResetWallPapers {
    return &TLAccountResetWallPapers{}
}

func (m* TLAccountResetWallPapers) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_resetWallPapers))


return x.buf
}

func (m* TLAccountResetWallPapers) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLAccountGetAutoDownloadSettings() * TLAccountGetAutoDownloadSettings {
    return &TLAccountGetAutoDownloadSettings{}
}

func (m* TLAccountGetAutoDownloadSettings) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_getAutoDownloadSettings))


return x.buf
}

func (m* TLAccountGetAutoDownloadSettings) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLAccountSaveAutoDownloadSettings() * TLAccountSaveAutoDownloadSettings {
    return &TLAccountSaveAutoDownloadSettings{}
}

func (m* TLAccountSaveAutoDownloadSettings) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_saveAutoDownloadSettings))

    // flags
    var flags uint32 = 0
    if m.Low == true { flags |= 1 << 0 }
    if m.High == true { flags |= 1 << 1 }
	x.UInt(flags)

    
    
    x.Bytes(m.Settings.Encode())

return x.buf
}

func (m* TLAccountSaveAutoDownloadSettings) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Low = true }
    if (flags & (1 << 1)) != 0 { m.High = true }
    m4 := &AutoDownloadSettings{}
    m4.Decode(dbuf)
    m.Settings = m4

return dbuf.err
}

func NewTLAccountUploadTheme() * TLAccountUploadTheme {
    return &TLAccountUploadTheme{}
}

func (m* TLAccountUploadTheme) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_uploadTheme))

    // flags
    var flags uint32 = 0
    if m.Thumb != nil { flags |= 1 << 0 }
	x.UInt(flags)

    x.Bytes(m.File.Encode())
    if m.Thumb != nil {
 x.Bytes(m.Thumb.Encode()) 
}
    x.String(m.FileName)
    x.String(m.MimeType)

return x.buf
}

func (m* TLAccountUploadTheme) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    m2 := &InputFile{}
    m2.Decode(dbuf)
    m.File = m2
    if (flags & (1 << 0)) != 0 {
 m3 := &InputFile{}
    m3.Decode(dbuf)
    m.Thumb = m3 
}
    m.FileName = dbuf.String()
    m.MimeType = dbuf.String()

return dbuf.err
}

func NewTLAccountCreateTheme() * TLAccountCreateTheme {
    return &TLAccountCreateTheme{}
}

func (m* TLAccountCreateTheme) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_createTheme))

    // flags
    var flags uint32 = 0
    if m.Document != nil { flags |= 1 << 2 }
    if m.Settings != nil { flags |= 1 << 3 }
	x.UInt(flags)

    x.String(m.Slug)
    x.String(m.Title)
    if m.Document != nil {
 x.Bytes(m.Document.Encode()) 
}
    if m.Settings != nil {
 x.Bytes(m.Settings.Encode()) 
}

return x.buf
}

func (m* TLAccountCreateTheme) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    m.Slug = dbuf.String()
    m.Title = dbuf.String()
    if (flags & (1 << 2)) != 0 {
 m4 := &InputDocument{}
    m4.Decode(dbuf)
    m.Document = m4 
}
    if (flags & (1 << 3)) != 0 {
 m5 := &InputThemeSettings{}
    m5.Decode(dbuf)
    m.Settings = m5 
}

return dbuf.err
}

func NewTLAccountUpdateTheme() * TLAccountUpdateTheme {
    return &TLAccountUpdateTheme{}
}

func (m* TLAccountUpdateTheme) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_updateTheme))

    // flags
    var flags uint32 = 0
    if m.Slug != "" { flags |= 1 << 0 }
    if m.Title != "" { flags |= 1 << 1 }
    if m.Document != nil { flags |= 1 << 2 }
    if m.Settings != nil { flags |= 1 << 3 }
	x.UInt(flags)

    x.String(m.Format)
    x.Bytes(m.Theme.Encode())
    if m.Slug != "" { x.String(m.Slug) }
    if m.Title != "" { x.String(m.Title) }
    if m.Document != nil {
 x.Bytes(m.Document.Encode()) 
}
    if m.Settings != nil {
 x.Bytes(m.Settings.Encode()) 
}

return x.buf
}

func (m* TLAccountUpdateTheme) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    m.Format = dbuf.String()
    m3 := &InputTheme{}
    m3.Decode(dbuf)
    m.Theme = m3
    if (flags & (1 << 0)) != 0 { m.Slug = dbuf.String() }
    if (flags & (1 << 1)) != 0 { m.Title = dbuf.String() }
    if (flags & (1 << 2)) != 0 {
 m6 := &InputDocument{}
    m6.Decode(dbuf)
    m.Document = m6 
}
    if (flags & (1 << 3)) != 0 {
 m7 := &InputThemeSettings{}
    m7.Decode(dbuf)
    m.Settings = m7 
}

return dbuf.err
}

func NewTLAccountSaveTheme() * TLAccountSaveTheme {
    return &TLAccountSaveTheme{}
}

func (m* TLAccountSaveTheme) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_saveTheme))

    x.Bytes(m.Theme.Encode())
    x.Bytes(m.Unsave.Encode())

return x.buf
}

func (m* TLAccountSaveTheme) Decode(dbuf *DecodeBuf) error {
    m1 := &InputTheme{}
    m1.Decode(dbuf)
    m.Theme = m1
    m2 := &Bool{}
    m2.Decode(dbuf)
    m.Unsave = m2

return dbuf.err
}

func NewTLAccountInstallTheme() * TLAccountInstallTheme {
    return &TLAccountInstallTheme{}
}

func (m* TLAccountInstallTheme) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_installTheme))

    // flags
    var flags uint32 = 0
    if m.Dark == true { flags |= 1 << 0 }
    if m.Format != "" { flags |= 1 << 1 }
    if m.Theme != nil { flags |= 1 << 1 }
	x.UInt(flags)

    
    if m.Format != "" { x.String(m.Format) }
    if m.Theme != nil {
 x.Bytes(m.Theme.Encode()) 
}

return x.buf
}

func (m* TLAccountInstallTheme) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Dark = true }
    if (flags & (1 << 1)) != 0 { m.Format = dbuf.String() }
    if (flags & (1 << 1)) != 0 {
 m4 := &InputTheme{}
    m4.Decode(dbuf)
    m.Theme = m4 
}

return dbuf.err
}

func NewTLAccountGetTheme() * TLAccountGetTheme {
    return &TLAccountGetTheme{}
}

func (m* TLAccountGetTheme) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_getTheme))

    x.String(m.Format)
    x.Bytes(m.Theme.Encode())
    x.Long(m.DocumentId)

return x.buf
}

func (m* TLAccountGetTheme) Decode(dbuf *DecodeBuf) error {
    m.Format = dbuf.String()
    m2 := &InputTheme{}
    m2.Decode(dbuf)
    m.Theme = m2
    m.DocumentId = dbuf.Long()

return dbuf.err
}

func NewTLAccountGetThemes() * TLAccountGetThemes {
    return &TLAccountGetThemes{}
}

func (m* TLAccountGetThemes) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_getThemes))

    x.String(m.Format)
    x.Int(m.Hash)

return x.buf
}

func (m* TLAccountGetThemes) Decode(dbuf *DecodeBuf) error {
    m.Format = dbuf.String()
    m.Hash = dbuf.Int()

return dbuf.err
}

func NewTLAccountSetContentSettings() * TLAccountSetContentSettings {
    return &TLAccountSetContentSettings{}
}

func (m* TLAccountSetContentSettings) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_setContentSettings))

    // flags
    var flags uint32 = 0
    if m.SensitiveEnabled == true { flags |= 1 << 0 }
	x.UInt(flags)

    

return x.buf
}

func (m* TLAccountSetContentSettings) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.SensitiveEnabled = true }

return dbuf.err
}

func NewTLAccountGetContentSettings() * TLAccountGetContentSettings {
    return &TLAccountGetContentSettings{}
}

func (m* TLAccountGetContentSettings) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_getContentSettings))


return x.buf
}

func (m* TLAccountGetContentSettings) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLAccountGetMultiWallPapers() * TLAccountGetMultiWallPapers {
    return &TLAccountGetMultiWallPapers{}
}

func (m* TLAccountGetMultiWallPapers) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_getMultiWallPapers))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Wallpapers)))
for _, v := range m.Wallpapers {
  x.buf = append(x.buf, (*v).Encode()...)
}

return x.buf
}

func (m* TLAccountGetMultiWallPapers) Decode(dbuf *DecodeBuf) error {
    dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l1 := dbuf.Int()
m.Wallpapers = make([]*InputWallPaper, l1)
for i := int32(0); i < l1; i++ {
 m.Wallpapers[i] = &InputWallPaper{}
 (*m.Wallpapers[i]).Decode(dbuf)
}

return dbuf.err
}

func NewTLUsersSetSecureValueErrors() * TLUsersSetSecureValueErrors {
    return &TLUsersSetSecureValueErrors{}
}

func (m* TLUsersSetSecureValueErrors) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_users_setSecureValueErrors))

    x.Bytes(m.Id.Encode())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Errors)))
for _, v := range m.Errors {
  x.buf = append(x.buf, (*v).Encode()...)
}

return x.buf
}

func (m* TLUsersSetSecureValueErrors) Decode(dbuf *DecodeBuf) error {
    m1 := &InputUser{}
    m1.Decode(dbuf)
    m.Id = m1
    dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l2 := dbuf.Int()
m.Errors = make([]*SecureValueError, l2)
for i := int32(0); i < l2; i++ {
 m.Errors[i] = &SecureValueError{}
 (*m.Errors[i]).Decode(dbuf)
}

return dbuf.err
}

func NewTLContactsGetContactIDs() * TLContactsGetContactIDs {
    return &TLContactsGetContactIDs{}
}

func (m* TLContactsGetContactIDs) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_contacts_getContactIDs))

    x.Int(m.Hash)

return x.buf
}

func (m* TLContactsGetContactIDs) Decode(dbuf *DecodeBuf) error {
    m.Hash = dbuf.Int()

return dbuf.err
}

func NewTLContactsDeleteContacts114() * TLContactsDeleteContacts114 {
    return &TLContactsDeleteContacts114{}
}

func (m* TLContactsDeleteContacts114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_contacts_deleteContacts114))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Id)))
for _, v := range m.Id {
  x.buf = append(x.buf, (*v).Encode()...)
}

return x.buf
}

func (m* TLContactsDeleteContacts114) Decode(dbuf *DecodeBuf) error {
    dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l1 := dbuf.Int()
m.Id = make([]*InputUser, l1)
for i := int32(0); i < l1; i++ {
 m.Id[i] = &InputUser{}
 (*m.Id[i]).Decode(dbuf)
}

return dbuf.err
}

func NewTLContactsDeleteByPhones() * TLContactsDeleteByPhones {
    return &TLContactsDeleteByPhones{}
}

func (m* TLContactsDeleteByPhones) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_contacts_deleteByPhones))

    x.VectorString(m.Phones)


return x.buf
}

func (m* TLContactsDeleteByPhones) Decode(dbuf *DecodeBuf) error {
    m.Phones = dbuf.VectorString()

return dbuf.err
}

func NewTLContactsGetSaved() * TLContactsGetSaved {
    return &TLContactsGetSaved{}
}

func (m* TLContactsGetSaved) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_contacts_getSaved))


return x.buf
}

func (m* TLContactsGetSaved) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLContactsToggleTopPeers() * TLContactsToggleTopPeers {
    return &TLContactsToggleTopPeers{}
}

func (m* TLContactsToggleTopPeers) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_contacts_toggleTopPeers))

    x.Bytes(m.Enabled.Encode())

return x.buf
}

func (m* TLContactsToggleTopPeers) Decode(dbuf *DecodeBuf) error {
    m1 := &Bool{}
    m1.Decode(dbuf)
    m.Enabled = m1

return dbuf.err
}

func NewTLContactsAddContact() * TLContactsAddContact {
    return &TLContactsAddContact{}
}

func (m* TLContactsAddContact) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_contacts_addContact))

    // flags
    var flags uint32 = 0
    if m.AddPhonePrivacyException == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Bytes(m.Id.Encode())
    x.String(m.FirstName)
    x.String(m.LastName)
    x.String(m.Phone)

return x.buf
}

func (m* TLContactsAddContact) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.AddPhonePrivacyException = true }
    m3 := &InputUser{}
    m3.Decode(dbuf)
    m.Id = m3
    m.FirstName = dbuf.String()
    m.LastName = dbuf.String()
    m.Phone = dbuf.String()

return dbuf.err
}

func NewTLContactsAcceptContact() * TLContactsAcceptContact {
    return &TLContactsAcceptContact{}
}

func (m* TLContactsAcceptContact) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_contacts_acceptContact))

    x.Bytes(m.Id.Encode())

return x.buf
}

func (m* TLContactsAcceptContact) Decode(dbuf *DecodeBuf) error {
    m1 := &InputUser{}
    m1.Decode(dbuf)
    m.Id = m1

return dbuf.err
}

func NewTLContactsGetLocated() * TLContactsGetLocated {
    return &TLContactsGetLocated{}
}

func (m* TLContactsGetLocated) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_contacts_getLocated))

    // flags
    var flags uint32 = 0
    if m.Background == true { flags |= 1 << 1 }
    if m.SelfExpires != 0 { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Bytes(m.GeoPoint.Encode())
    if m.SelfExpires != 0 { x.Int(m.SelfExpires) }

return x.buf
}

func (m* TLContactsGetLocated) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 1)) != 0 { m.Background = true }
    m3 := &InputGeoPoint{}
    m3.Decode(dbuf)
    m.GeoPoint = m3
    if (flags & (1 << 0)) != 0 { m.SelfExpires = dbuf.Int() }

return dbuf.err
}

func NewTLMessagesGetDialogs114() * TLMessagesGetDialogs114 {
    return &TLMessagesGetDialogs114{}
}

func (m* TLMessagesGetDialogs114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getDialogs114))

    // flags
    var flags uint32 = 0
    if m.ExcludePinned == true { flags |= 1 << 0 }
    if m.FolderId != 0 { flags |= 1 << 1 }
	x.UInt(flags)

    
    if m.FolderId != 0 { x.Int(m.FolderId) }
    x.Int(m.OffsetDate)
    x.Int(m.OffsetId)
    x.Bytes(m.OffsetPeer.Encode())
    x.Int(m.Limit)
    x.Int(m.Hash)

return x.buf
}

func (m* TLMessagesGetDialogs114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.ExcludePinned = true }
    if (flags & (1 << 1)) != 0 { m.FolderId = dbuf.Int() }
    m.OffsetDate = dbuf.Int()
    m.OffsetId = dbuf.Int()
    m6 := &InputPeer{}
    m6.Decode(dbuf)
    m.OffsetPeer = m6
    m.Limit = dbuf.Int()
    m.Hash = dbuf.Int()

return dbuf.err
}

func NewTLMessagesSendMessage114() * TLMessagesSendMessage114 {
    return &TLMessagesSendMessage114{}
}

func (m* TLMessagesSendMessage114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_sendMessage114))

    // flags
    var flags uint32 = 0
    if m.NoWebpage == true { flags |= 1 << 1 }
    if m.Silent == true { flags |= 1 << 5 }
    if m.Background == true { flags |= 1 << 6 }
    if m.ClearDraft == true { flags |= 1 << 7 }
    if m.ReplyToMsgId != 0 { flags |= 1 << 0 }
    if m.ReplyMarkup != nil { flags |= 1 << 2 }
    if m.Entities != nil { flags |= 1 << 3 }
    if m.ScheduleDate != 0 { flags |= 1 << 10 }
	x.UInt(flags)

    
    
    
    
    x.Bytes(m.Peer.Encode())
    if m.ReplyToMsgId != 0 { x.Int(m.ReplyToMsgId) }
    x.String(m.Message)
    x.Long(m.RandomId)
    if m.ReplyMarkup != nil {
 x.Bytes(m.ReplyMarkup.Encode()) 
}
    if m.Entities != nil {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Entities)))
for _, v := range m.Entities {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}
    if m.ScheduleDate != 0 { x.Int(m.ScheduleDate) }

return x.buf
}

func (m* TLMessagesSendMessage114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 1)) != 0 { m.NoWebpage = true }
    if (flags & (1 << 5)) != 0 { m.Silent = true }
    if (flags & (1 << 6)) != 0 { m.Background = true }
    if (flags & (1 << 7)) != 0 { m.ClearDraft = true }
    m6 := &InputPeer{}
    m6.Decode(dbuf)
    m.Peer = m6
    if (flags & (1 << 0)) != 0 { m.ReplyToMsgId = dbuf.Int() }
    m.Message = dbuf.String()
    m.RandomId = dbuf.Long()
    if (flags & (1 << 2)) != 0 {
 m10 := &ReplyMarkup{}
    m10.Decode(dbuf)
    m.ReplyMarkup = m10 
}
    if (flags & (1 << 3)) != 0 {
 dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l11 := dbuf.Int()
m.Entities = make([]*MessageEntity, l11)
for i := int32(0); i < l11; i++ {
 m.Entities[i] = &MessageEntity{}
 (*m.Entities[i]).Decode(dbuf)
} 
}
    if (flags & (1 << 10)) != 0 { m.ScheduleDate = dbuf.Int() }

return dbuf.err
}

func NewTLMessagesSendMedia114() * TLMessagesSendMedia114 {
    return &TLMessagesSendMedia114{}
}

func (m* TLMessagesSendMedia114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_sendMedia114))

    // flags
    var flags uint32 = 0
    if m.Silent == true { flags |= 1 << 5 }
    if m.Background == true { flags |= 1 << 6 }
    if m.ClearDraft == true { flags |= 1 << 7 }
    if m.ReplyToMsgId != 0 { flags |= 1 << 0 }
    if m.ReplyMarkup != nil { flags |= 1 << 2 }
    if m.Entities != nil { flags |= 1 << 3 }
    if m.ScheduleDate != 0 { flags |= 1 << 10 }
	x.UInt(flags)

    
    
    
    x.Bytes(m.Peer.Encode())
    if m.ReplyToMsgId != 0 { x.Int(m.ReplyToMsgId) }
    x.Bytes(m.Media.Encode())
    x.String(m.Message)
    x.Long(m.RandomId)
    if m.ReplyMarkup != nil {
 x.Bytes(m.ReplyMarkup.Encode()) 
}
    if m.Entities != nil {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Entities)))
for _, v := range m.Entities {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}
    if m.ScheduleDate != 0 { x.Int(m.ScheduleDate) }

return x.buf
}

func (m* TLMessagesSendMedia114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 5)) != 0 { m.Silent = true }
    if (flags & (1 << 6)) != 0 { m.Background = true }
    if (flags & (1 << 7)) != 0 { m.ClearDraft = true }
    m5 := &InputPeer{}
    m5.Decode(dbuf)
    m.Peer = m5
    if (flags & (1 << 0)) != 0 { m.ReplyToMsgId = dbuf.Int() }
    m7 := &InputMedia{}
    m7.Decode(dbuf)
    m.Media = m7
    m.Message = dbuf.String()
    m.RandomId = dbuf.Long()
    if (flags & (1 << 2)) != 0 {
 m10 := &ReplyMarkup{}
    m10.Decode(dbuf)
    m.ReplyMarkup = m10 
}
    if (flags & (1 << 3)) != 0 {
 dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l11 := dbuf.Int()
m.Entities = make([]*MessageEntity, l11)
for i := int32(0); i < l11; i++ {
 m.Entities[i] = &MessageEntity{}
 (*m.Entities[i]).Decode(dbuf)
} 
}
    if (flags & (1 << 10)) != 0 { m.ScheduleDate = dbuf.Int() }

return dbuf.err
}

func NewTLMessagesForwardMessages114() * TLMessagesForwardMessages114 {
    return &TLMessagesForwardMessages114{}
}

func (m* TLMessagesForwardMessages114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_forwardMessages114))

    // flags
    var flags uint32 = 0
    if m.Silent == true { flags |= 1 << 5 }
    if m.Background == true { flags |= 1 << 6 }
    if m.WithMyScore == true { flags |= 1 << 8 }
    if m.Grouped == true { flags |= 1 << 9 }
    if m.ScheduleDate != 0 { flags |= 1 << 10 }
	x.UInt(flags)

    
    
    
    
    x.Bytes(m.FromPeer.Encode())
    x.VectorInt(m.Id)

    x.VectorLong(m.RandomId)

    x.Bytes(m.ToPeer.Encode())
    if m.ScheduleDate != 0 { x.Int(m.ScheduleDate) }

return x.buf
}

func (m* TLMessagesForwardMessages114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 5)) != 0 { m.Silent = true }
    if (flags & (1 << 6)) != 0 { m.Background = true }
    if (flags & (1 << 8)) != 0 { m.WithMyScore = true }
    if (flags & (1 << 9)) != 0 { m.Grouped = true }
    m6 := &InputPeer{}
    m6.Decode(dbuf)
    m.FromPeer = m6
    m.Id = dbuf.VectorInt()
    m.RandomId = dbuf.VectorLong()
    m9 := &InputPeer{}
    m9.Decode(dbuf)
    m.ToPeer = m9
    if (flags & (1 << 10)) != 0 { m.ScheduleDate = dbuf.Int() }

return dbuf.err
}

func NewTLMessagesReport() * TLMessagesReport {
    return &TLMessagesReport{}
}

func (m* TLMessagesReport) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_report))

    x.Bytes(m.Peer.Encode())
    x.VectorInt(m.Id)

    x.Bytes(m.Reason.Encode())

return x.buf
}

func (m* TLMessagesReport) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.Id = dbuf.VectorInt()
    m3 := &ReportReason{}
    m3.Decode(dbuf)
    m.Reason = m3

return dbuf.err
}

func NewTLMessagesGetStickers() * TLMessagesGetStickers {
    return &TLMessagesGetStickers{}
}

func (m* TLMessagesGetStickers) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getStickers))

    x.String(m.Emoticon)
    x.Int(m.Hash)

return x.buf
}

func (m* TLMessagesGetStickers) Decode(dbuf *DecodeBuf) error {
    m.Emoticon = dbuf.String()
    m.Hash = dbuf.Int()

return dbuf.err
}

func NewTLMessagesGetWebPagePreview114() * TLMessagesGetWebPagePreview114 {
    return &TLMessagesGetWebPagePreview114{}
}

func (m* TLMessagesGetWebPagePreview114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getWebPagePreview114))

    // flags
    var flags uint32 = 0
    if m.Entities != nil { flags |= 1 << 3 }
	x.UInt(flags)

    x.String(m.Message)
    if m.Entities != nil {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Entities)))
for _, v := range m.Entities {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}

return x.buf
}

func (m* TLMessagesGetWebPagePreview114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    m.Message = dbuf.String()
    if (flags & (1 << 3)) != 0 {
 dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l3 := dbuf.Int()
m.Entities = make([]*MessageEntity, l3)
for i := int32(0); i < l3; i++ {
 m.Entities[i] = &MessageEntity{}
 (*m.Entities[i]).Decode(dbuf)
} 
}

return dbuf.err
}

func NewTLMessagesExportChatInvite114() * TLMessagesExportChatInvite114 {
    return &TLMessagesExportChatInvite114{}
}

func (m* TLMessagesExportChatInvite114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_exportChatInvite114))

    x.Bytes(m.Peer.Encode())

return x.buf
}

func (m* TLMessagesExportChatInvite114) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1

return dbuf.err
}

func NewTLMessagesSearchGlobal114() * TLMessagesSearchGlobal114 {
    return &TLMessagesSearchGlobal114{}
}

func (m* TLMessagesSearchGlobal114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_searchGlobal114))

    // flags
    var flags uint32 = 0
    if m.FolderId != 0 { flags |= 1 << 0 }
	x.UInt(flags)

    if m.FolderId != 0 { x.Int(m.FolderId) }
    x.String(m.Q)
    x.Int(m.OffsetRate)
    x.Bytes(m.OffsetPeer.Encode())
    x.Int(m.OffsetId)
    x.Int(m.Limit)

return x.buf
}

func (m* TLMessagesSearchGlobal114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.FolderId = dbuf.Int() }
    m.Q = dbuf.String()
    m.OffsetRate = dbuf.Int()
    m5 := &InputPeer{}
    m5.Decode(dbuf)
    m.OffsetPeer = m5
    m.OffsetId = dbuf.Int()
    m.Limit = dbuf.Int()

return dbuf.err
}

func NewTLMessagesSendInlineBotResult114() * TLMessagesSendInlineBotResult114 {
    return &TLMessagesSendInlineBotResult114{}
}

func (m* TLMessagesSendInlineBotResult114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_sendInlineBotResult114))

    // flags
    var flags uint32 = 0
    if m.Silent == true { flags |= 1 << 5 }
    if m.Background == true { flags |= 1 << 6 }
    if m.ClearDraft == true { flags |= 1 << 7 }
    if m.HideVia == true { flags |= 1 << 11 }
    if m.ReplyToMsgId != 0 { flags |= 1 << 0 }
    if m.ScheduleDate != 0 { flags |= 1 << 10 }
	x.UInt(flags)

    
    
    
    
    x.Bytes(m.Peer.Encode())
    if m.ReplyToMsgId != 0 { x.Int(m.ReplyToMsgId) }
    x.Long(m.RandomId)
    x.Long(m.QueryId)
    x.String(m.Id)
    if m.ScheduleDate != 0 { x.Int(m.ScheduleDate) }

return x.buf
}

func (m* TLMessagesSendInlineBotResult114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 5)) != 0 { m.Silent = true }
    if (flags & (1 << 6)) != 0 { m.Background = true }
    if (flags & (1 << 7)) != 0 { m.ClearDraft = true }
    if (flags & (1 << 11)) != 0 { m.HideVia = true }
    m6 := &InputPeer{}
    m6.Decode(dbuf)
    m.Peer = m6
    if (flags & (1 << 0)) != 0 { m.ReplyToMsgId = dbuf.Int() }
    m.RandomId = dbuf.Long()
    m.QueryId = dbuf.Long()
    m.Id = dbuf.String()
    if (flags & (1 << 10)) != 0 { m.ScheduleDate = dbuf.Int() }

return dbuf.err
}

func NewTLMessagesEditMessage114() * TLMessagesEditMessage114 {
    return &TLMessagesEditMessage114{}
}

func (m* TLMessagesEditMessage114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_editMessage114))

    // flags
    var flags uint32 = 0
    if m.NoWebpage == true { flags |= 1 << 1 }
    if m.Message != "" { flags |= 1 << 11 }
    if m.Media != nil { flags |= 1 << 14 }
    if m.ReplyMarkup != nil { flags |= 1 << 2 }
    if m.Entities != nil { flags |= 1 << 3 }
    if m.ScheduleDate != 0 { flags |= 1 << 15 }
	x.UInt(flags)

    
    x.Bytes(m.Peer.Encode())
    x.Int(m.Id)
    if m.Message != "" { x.String(m.Message) }
    if m.Media != nil {
 x.Bytes(m.Media.Encode()) 
}
    if m.ReplyMarkup != nil {
 x.Bytes(m.ReplyMarkup.Encode()) 
}
    if m.Entities != nil {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Entities)))
for _, v := range m.Entities {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}
    if m.ScheduleDate != 0 { x.Int(m.ScheduleDate) }

return x.buf
}

func (m* TLMessagesEditMessage114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 1)) != 0 { m.NoWebpage = true }
    m3 := &InputPeer{}
    m3.Decode(dbuf)
    m.Peer = m3
    m.Id = dbuf.Int()
    if (flags & (1 << 11)) != 0 { m.Message = dbuf.String() }
    if (flags & (1 << 14)) != 0 {
 m6 := &InputMedia{}
    m6.Decode(dbuf)
    m.Media = m6 
}
    if (flags & (1 << 2)) != 0 {
 m7 := &ReplyMarkup{}
    m7.Decode(dbuf)
    m.ReplyMarkup = m7 
}
    if (flags & (1 << 3)) != 0 {
 dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l8 := dbuf.Int()
m.Entities = make([]*MessageEntity, l8)
for i := int32(0); i < l8; i++ {
 m.Entities[i] = &MessageEntity{}
 (*m.Entities[i]).Decode(dbuf)
} 
}
    if (flags & (1 << 15)) != 0 { m.ScheduleDate = dbuf.Int() }

return dbuf.err
}

func NewTLMessagesEditInlineBotMessage114() * TLMessagesEditInlineBotMessage114 {
    return &TLMessagesEditInlineBotMessage114{}
}

func (m* TLMessagesEditInlineBotMessage114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_editInlineBotMessage114))

    // flags
    var flags uint32 = 0
    if m.NoWebpage == true { flags |= 1 << 1 }
    if m.Message != "" { flags |= 1 << 11 }
    if m.Media != nil { flags |= 1 << 14 }
    if m.ReplyMarkup != nil { flags |= 1 << 2 }
    if m.Entities != nil { flags |= 1 << 3 }
	x.UInt(flags)

    
    x.Bytes(m.Id.Encode())
    if m.Message != "" { x.String(m.Message) }
    if m.Media != nil {
 x.Bytes(m.Media.Encode()) 
}
    if m.ReplyMarkup != nil {
 x.Bytes(m.ReplyMarkup.Encode()) 
}
    if m.Entities != nil {
 x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Entities)))
for _, v := range m.Entities {
  x.buf = append(x.buf, (*v).Encode()...)
} 
}

return x.buf
}

func (m* TLMessagesEditInlineBotMessage114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 1)) != 0 { m.NoWebpage = true }
    m3 := &InputBotInlineMessageID{}
    m3.Decode(dbuf)
    m.Id = m3
    if (flags & (1 << 11)) != 0 { m.Message = dbuf.String() }
    if (flags & (1 << 14)) != 0 {
 m5 := &InputMedia{}
    m5.Decode(dbuf)
    m.Media = m5 
}
    if (flags & (1 << 2)) != 0 {
 m6 := &ReplyMarkup{}
    m6.Decode(dbuf)
    m.ReplyMarkup = m6 
}
    if (flags & (1 << 3)) != 0 {
 dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l7 := dbuf.Int()
m.Entities = make([]*MessageEntity, l7)
for i := int32(0); i < l7; i++ {
 m.Entities[i] = &MessageEntity{}
 (*m.Entities[i]).Decode(dbuf)
} 
}

return dbuf.err
}

func NewTLMessagesToggleDialogPin114() * TLMessagesToggleDialogPin114 {
    return &TLMessagesToggleDialogPin114{}
}

func (m* TLMessagesToggleDialogPin114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_toggleDialogPin114))

    // flags
    var flags uint32 = 0
    if m.Pinned == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Bytes(m.Peer.Encode())

return x.buf
}

func (m* TLMessagesToggleDialogPin114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Pinned = true }
    m3 := &InputDialogPeer{}
    m3.Decode(dbuf)
    m.Peer = m3

return dbuf.err
}

func NewTLMessagesReorderPinnedDialogs114() * TLMessagesReorderPinnedDialogs114 {
    return &TLMessagesReorderPinnedDialogs114{}
}

func (m* TLMessagesReorderPinnedDialogs114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_reorderPinnedDialogs114))

    // flags
    var flags uint32 = 0
    if m.Force == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Int(m.FolderId)
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Order)))
for _, v := range m.Order {
  x.buf = append(x.buf, (*v).Encode()...)
}

return x.buf
}

func (m* TLMessagesReorderPinnedDialogs114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Force = true }
    m.FolderId = dbuf.Int()
    dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l4 := dbuf.Int()
m.Order = make([]*InputDialogPeer, l4)
for i := int32(0); i < l4; i++ {
 m.Order[i] = &InputDialogPeer{}
 (*m.Order[i]).Decode(dbuf)
}

return dbuf.err
}

func NewTLMessagesGetPinnedDialogs114() * TLMessagesGetPinnedDialogs114 {
    return &TLMessagesGetPinnedDialogs114{}
}

func (m* TLMessagesGetPinnedDialogs114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getPinnedDialogs114))

    x.Int(m.FolderId)

return x.buf
}

func (m* TLMessagesGetPinnedDialogs114) Decode(dbuf *DecodeBuf) error {
    m.FolderId = dbuf.Int()

return dbuf.err
}

func NewTLMessagesGetRecentLocations114() * TLMessagesGetRecentLocations114 {
    return &TLMessagesGetRecentLocations114{}
}

func (m* TLMessagesGetRecentLocations114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getRecentLocations114))

    x.Bytes(m.Peer.Encode())
    x.Int(m.Limit)
    x.Int(m.Hash)

return x.buf
}

func (m* TLMessagesGetRecentLocations114) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.Limit = dbuf.Int()
    m.Hash = dbuf.Int()

return dbuf.err
}

func NewTLMessagesSendMultiMedia114() * TLMessagesSendMultiMedia114 {
    return &TLMessagesSendMultiMedia114{}
}

func (m* TLMessagesSendMultiMedia114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_sendMultiMedia114))

    // flags
    var flags uint32 = 0
    if m.Silent == true { flags |= 1 << 5 }
    if m.Background == true { flags |= 1 << 6 }
    if m.ClearDraft == true { flags |= 1 << 7 }
    if m.ReplyToMsgId != 0 { flags |= 1 << 0 }
    if m.ScheduleDate != 0 { flags |= 1 << 10 }
	x.UInt(flags)

    
    
    
    x.Bytes(m.Peer.Encode())
    if m.ReplyToMsgId != 0 { x.Int(m.ReplyToMsgId) }
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.MultiMedia)))
for _, v := range m.MultiMedia {
  x.buf = append(x.buf, (*v).Encode()...)
}
    if m.ScheduleDate != 0 { x.Int(m.ScheduleDate) }

return x.buf
}

func (m* TLMessagesSendMultiMedia114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 5)) != 0 { m.Silent = true }
    if (flags & (1 << 6)) != 0 { m.Background = true }
    if (flags & (1 << 7)) != 0 { m.ClearDraft = true }
    m5 := &InputPeer{}
    m5.Decode(dbuf)
    m.Peer = m5
    if (flags & (1 << 0)) != 0 { m.ReplyToMsgId = dbuf.Int() }
    dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l7 := dbuf.Int()
m.MultiMedia = make([]*InputSingleMedia, l7)
for i := int32(0); i < l7; i++ {
 m.MultiMedia[i] = &InputSingleMedia{}
 (*m.MultiMedia[i]).Decode(dbuf)
}
    if (flags & (1 << 10)) != 0 { m.ScheduleDate = dbuf.Int() }

return dbuf.err
}

func NewTLMessagesSearchStickerSets() * TLMessagesSearchStickerSets {
    return &TLMessagesSearchStickerSets{}
}

func (m* TLMessagesSearchStickerSets) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_searchStickerSets))

    // flags
    var flags uint32 = 0
    if m.ExcludeFeatured == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.String(m.Q)
    x.Int(m.Hash)

return x.buf
}

func (m* TLMessagesSearchStickerSets) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.ExcludeFeatured = true }
    m.Q = dbuf.String()
    m.Hash = dbuf.Int()

return dbuf.err
}

func NewTLMessagesGetSplitRanges() * TLMessagesGetSplitRanges {
    return &TLMessagesGetSplitRanges{}
}

func (m* TLMessagesGetSplitRanges) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getSplitRanges))


return x.buf
}

func (m* TLMessagesGetSplitRanges) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLMessagesMarkDialogUnread() * TLMessagesMarkDialogUnread {
    return &TLMessagesMarkDialogUnread{}
}

func (m* TLMessagesMarkDialogUnread) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_markDialogUnread))

    // flags
    var flags uint32 = 0
    if m.Unread == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Bytes(m.Peer.Encode())

return x.buf
}

func (m* TLMessagesMarkDialogUnread) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Unread = true }
    m3 := &InputDialogPeer{}
    m3.Decode(dbuf)
    m.Peer = m3

return dbuf.err
}

func NewTLMessagesGetDialogUnreadMarks() * TLMessagesGetDialogUnreadMarks {
    return &TLMessagesGetDialogUnreadMarks{}
}

func (m* TLMessagesGetDialogUnreadMarks) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getDialogUnreadMarks))


return x.buf
}

func (m* TLMessagesGetDialogUnreadMarks) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLMessagesClearAllDrafts() * TLMessagesClearAllDrafts {
    return &TLMessagesClearAllDrafts{}
}

func (m* TLMessagesClearAllDrafts) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_clearAllDrafts))


return x.buf
}

func (m* TLMessagesClearAllDrafts) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLMessagesUpdatePinnedMessage() * TLMessagesUpdatePinnedMessage {
    return &TLMessagesUpdatePinnedMessage{}
}

func (m* TLMessagesUpdatePinnedMessage) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_updatePinnedMessage))

    // flags
    var flags uint32 = 0
    if m.Silent == true { flags |= 1 << 0 }
    if m.Unpin == true { flags |= 1 << 1 }
    if m.PmOneside == true { flags |= 1 << 2 }
	x.UInt(flags)

    
    
    
    x.Bytes(m.Peer.Encode())
    x.Int(m.Id)

return x.buf
}

func (m* TLMessagesUpdatePinnedMessage) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Silent = true }
    if (flags & (1 << 1)) != 0 { m.Unpin = true }
    if (flags & (1 << 2)) != 0 { m.PmOneside = true }
    m5 := &InputPeer{}
    m5.Decode(dbuf)
    m.Peer = m5
    m.Id = dbuf.Int()

return dbuf.err
}

func NewTLMessagesSendVote() * TLMessagesSendVote {
    return &TLMessagesSendVote{}
}

func (m* TLMessagesSendVote) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_sendVote))

    x.Bytes(m.Peer.Encode())
    x.Int(m.MsgId)
    

return x.buf
}

func (m* TLMessagesSendVote) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.MsgId = dbuf.Int()
    

return dbuf.err
}

func NewTLMessagesGetPollResults() * TLMessagesGetPollResults {
    return &TLMessagesGetPollResults{}
}

func (m* TLMessagesGetPollResults) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getPollResults))

    x.Bytes(m.Peer.Encode())
    x.Int(m.MsgId)

return x.buf
}

func (m* TLMessagesGetPollResults) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.MsgId = dbuf.Int()

return dbuf.err
}

func NewTLMessagesGetOnlines() * TLMessagesGetOnlines {
    return &TLMessagesGetOnlines{}
}

func (m* TLMessagesGetOnlines) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getOnlines))

    x.Bytes(m.Peer.Encode())

return x.buf
}

func (m* TLMessagesGetOnlines) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1

return dbuf.err
}

func NewTLMessagesGetStatsURL() * TLMessagesGetStatsURL {
    return &TLMessagesGetStatsURL{}
}

func (m* TLMessagesGetStatsURL) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getStatsURL))

    // flags
    var flags uint32 = 0
    if m.Dark == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Bytes(m.Peer.Encode())
    x.String(m.Params)

return x.buf
}

func (m* TLMessagesGetStatsURL) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Dark = true }
    m3 := &InputPeer{}
    m3.Decode(dbuf)
    m.Peer = m3
    m.Params = dbuf.String()

return dbuf.err
}

func NewTLMessagesEditChatAbout() * TLMessagesEditChatAbout {
    return &TLMessagesEditChatAbout{}
}

func (m* TLMessagesEditChatAbout) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_editChatAbout))

    x.Bytes(m.Peer.Encode())
    x.String(m.About)

return x.buf
}

func (m* TLMessagesEditChatAbout) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.About = dbuf.String()

return dbuf.err
}

func NewTLMessagesEditChatDefaultBannedRights() * TLMessagesEditChatDefaultBannedRights {
    return &TLMessagesEditChatDefaultBannedRights{}
}

func (m* TLMessagesEditChatDefaultBannedRights) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_editChatDefaultBannedRights))

    x.Bytes(m.Peer.Encode())
    x.Bytes(m.BannedRights.Encode())

return x.buf
}

func (m* TLMessagesEditChatDefaultBannedRights) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1
    m2 := &ChatBannedRights{}
    m2.Decode(dbuf)
    m.BannedRights = m2

return dbuf.err
}

func NewTLMessagesGetEmojiKeywords() * TLMessagesGetEmojiKeywords {
    return &TLMessagesGetEmojiKeywords{}
}

func (m* TLMessagesGetEmojiKeywords) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getEmojiKeywords))

    x.String(m.LangCode)

return x.buf
}

func (m* TLMessagesGetEmojiKeywords) Decode(dbuf *DecodeBuf) error {
    m.LangCode = dbuf.String()

return dbuf.err
}

func NewTLMessagesGetEmojiKeywordsDifference() * TLMessagesGetEmojiKeywordsDifference {
    return &TLMessagesGetEmojiKeywordsDifference{}
}

func (m* TLMessagesGetEmojiKeywordsDifference) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getEmojiKeywordsDifference))

    x.String(m.LangCode)
    x.Int(m.FromVersion)

return x.buf
}

func (m* TLMessagesGetEmojiKeywordsDifference) Decode(dbuf *DecodeBuf) error {
    m.LangCode = dbuf.String()
    m.FromVersion = dbuf.Int()

return dbuf.err
}

func NewTLMessagesGetEmojiKeywordsLanguages() * TLMessagesGetEmojiKeywordsLanguages {
    return &TLMessagesGetEmojiKeywordsLanguages{}
}

func (m* TLMessagesGetEmojiKeywordsLanguages) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getEmojiKeywordsLanguages))

    x.VectorString(m.LangCodes)


return x.buf
}

func (m* TLMessagesGetEmojiKeywordsLanguages) Decode(dbuf *DecodeBuf) error {
    m.LangCodes = dbuf.VectorString()

return dbuf.err
}

func NewTLMessagesGetEmojiURL() * TLMessagesGetEmojiURL {
    return &TLMessagesGetEmojiURL{}
}

func (m* TLMessagesGetEmojiURL) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getEmojiURL))

    x.String(m.LangCode)

return x.buf
}

func (m* TLMessagesGetEmojiURL) Decode(dbuf *DecodeBuf) error {
    m.LangCode = dbuf.String()

return dbuf.err
}

func NewTLMessagesGetSearchCounters() * TLMessagesGetSearchCounters {
    return &TLMessagesGetSearchCounters{}
}

func (m* TLMessagesGetSearchCounters) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getSearchCounters))

    x.Bytes(m.Peer.Encode())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Filters)))
for _, v := range m.Filters {
  x.buf = append(x.buf, (*v).Encode()...)
}

return x.buf
}

func (m* TLMessagesGetSearchCounters) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1
    dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l2 := dbuf.Int()
m.Filters = make([]*MessagesFilter, l2)
for i := int32(0); i < l2; i++ {
 m.Filters[i] = &MessagesFilter{}
 (*m.Filters[i]).Decode(dbuf)
}

return dbuf.err
}

func NewTLMessagesRequestUrlAuth() * TLMessagesRequestUrlAuth {
    return &TLMessagesRequestUrlAuth{}
}

func (m* TLMessagesRequestUrlAuth) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_requestUrlAuth))

    x.Bytes(m.Peer.Encode())
    x.Int(m.MsgId)
    x.Int(m.ButtonId)

return x.buf
}

func (m* TLMessagesRequestUrlAuth) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.MsgId = dbuf.Int()
    m.ButtonId = dbuf.Int()

return dbuf.err
}

func NewTLMessagesAcceptUrlAuth() * TLMessagesAcceptUrlAuth {
    return &TLMessagesAcceptUrlAuth{}
}

func (m* TLMessagesAcceptUrlAuth) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_acceptUrlAuth))

    // flags
    var flags uint32 = 0
    if m.WriteAllowed == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Bytes(m.Peer.Encode())
    x.Int(m.MsgId)
    x.Int(m.ButtonId)

return x.buf
}

func (m* TLMessagesAcceptUrlAuth) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.WriteAllowed = true }
    m3 := &InputPeer{}
    m3.Decode(dbuf)
    m.Peer = m3
    m.MsgId = dbuf.Int()
    m.ButtonId = dbuf.Int()

return dbuf.err
}

func NewTLMessagesHidePeerSettingsBar() * TLMessagesHidePeerSettingsBar {
    return &TLMessagesHidePeerSettingsBar{}
}

func (m* TLMessagesHidePeerSettingsBar) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_hidePeerSettingsBar))

    x.Bytes(m.Peer.Encode())

return x.buf
}

func (m* TLMessagesHidePeerSettingsBar) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1

return dbuf.err
}

func NewTLMessagesGetScheduledHistory() * TLMessagesGetScheduledHistory {
    return &TLMessagesGetScheduledHistory{}
}

func (m* TLMessagesGetScheduledHistory) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getScheduledHistory))

    x.Bytes(m.Peer.Encode())
    x.Int(m.Hash)

return x.buf
}

func (m* TLMessagesGetScheduledHistory) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.Hash = dbuf.Int()

return dbuf.err
}

func NewTLMessagesGetScheduledMessages() * TLMessagesGetScheduledMessages {
    return &TLMessagesGetScheduledMessages{}
}

func (m* TLMessagesGetScheduledMessages) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getScheduledMessages))

    x.Bytes(m.Peer.Encode())
    x.VectorInt(m.Id)


return x.buf
}

func (m* TLMessagesGetScheduledMessages) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.Id = dbuf.VectorInt()

return dbuf.err
}

func NewTLMessagesSendScheduledMessages() * TLMessagesSendScheduledMessages {
    return &TLMessagesSendScheduledMessages{}
}

func (m* TLMessagesSendScheduledMessages) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_sendScheduledMessages))

    x.Bytes(m.Peer.Encode())
    x.VectorInt(m.Id)


return x.buf
}

func (m* TLMessagesSendScheduledMessages) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.Id = dbuf.VectorInt()

return dbuf.err
}

func NewTLMessagesDeleteScheduledMessages() * TLMessagesDeleteScheduledMessages {
    return &TLMessagesDeleteScheduledMessages{}
}

func (m* TLMessagesDeleteScheduledMessages) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_deleteScheduledMessages))

    x.Bytes(m.Peer.Encode())
    x.VectorInt(m.Id)


return x.buf
}

func (m* TLMessagesDeleteScheduledMessages) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.Id = dbuf.VectorInt()

return dbuf.err
}

func NewTLMessagesGetPollVotes() * TLMessagesGetPollVotes {
    return &TLMessagesGetPollVotes{}
}

func (m* TLMessagesGetPollVotes) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getPollVotes))

    // flags
    var flags uint32 = 0
    if m.Option != nil { flags |= 1 << 0 }
    if m.Offset != "" { flags |= 1 << 1 }
	x.UInt(flags)

    x.Bytes(m.Peer.Encode())
    x.Int(m.Id)
    if m.Option != nil {
 x.StringBytes(m.Option) 
}
    if m.Offset != "" { x.String(m.Offset) }
    x.Int(m.Limit)

return x.buf
}

func (m* TLMessagesGetPollVotes) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    m2 := &InputPeer{}
    m2.Decode(dbuf)
    m.Peer = m2
    m.Id = dbuf.Int()
    if (flags & (1 << 0)) != 0 {
 m.Option = dbuf.StringBytes() 
}
    if (flags & (1 << 1)) != 0 { m.Offset = dbuf.String() }
    m.Limit = dbuf.Int()

return dbuf.err
}

func NewTLMessagesToggleStickerSets() * TLMessagesToggleStickerSets {
    return &TLMessagesToggleStickerSets{}
}

func (m* TLMessagesToggleStickerSets) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_toggleStickerSets))

    // flags
    var flags uint32 = 0
    if m.Uninstall == true { flags |= 1 << 0 }
    if m.Archive == true { flags |= 1 << 1 }
    if m.Unarchive == true { flags |= 1 << 2 }
	x.UInt(flags)

    
    
    
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Stickersets)))
for _, v := range m.Stickersets {
  x.buf = append(x.buf, (*v).Encode()...)
}

return x.buf
}

func (m* TLMessagesToggleStickerSets) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Uninstall = true }
    if (flags & (1 << 1)) != 0 { m.Archive = true }
    if (flags & (1 << 2)) != 0 { m.Unarchive = true }
    dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l5 := dbuf.Int()
m.Stickersets = make([]*InputStickerSet, l5)
for i := int32(0); i < l5; i++ {
 m.Stickersets[i] = &InputStickerSet{}
 (*m.Stickersets[i]).Decode(dbuf)
}

return dbuf.err
}

func NewTLMessagesGetDialogFilters() * TLMessagesGetDialogFilters {
    return &TLMessagesGetDialogFilters{}
}

func (m* TLMessagesGetDialogFilters) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getDialogFilters))


return x.buf
}

func (m* TLMessagesGetDialogFilters) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLMessagesGetSuggestedDialogFilters() * TLMessagesGetSuggestedDialogFilters {
    return &TLMessagesGetSuggestedDialogFilters{}
}

func (m* TLMessagesGetSuggestedDialogFilters) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getSuggestedDialogFilters))


return x.buf
}

func (m* TLMessagesGetSuggestedDialogFilters) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLMessagesUpdateDialogFilter() * TLMessagesUpdateDialogFilter {
    return &TLMessagesUpdateDialogFilter{}
}

func (m* TLMessagesUpdateDialogFilter) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_updateDialogFilter))

    // flags
    var flags uint32 = 0
    if m.Filter != nil { flags |= 1 << 0 }
	x.UInt(flags)

    x.Int(m.Id)
    if m.Filter != nil {
 x.Bytes(m.Filter.Encode()) 
}

return x.buf
}

func (m* TLMessagesUpdateDialogFilter) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    m.Id = dbuf.Int()
    if (flags & (1 << 0)) != 0 {
 m3 := &DialogFilter{}
    m3.Decode(dbuf)
    m.Filter = m3 
}

return dbuf.err
}

func NewTLMessagesUpdateDialogFiltersOrder() * TLMessagesUpdateDialogFiltersOrder {
    return &TLMessagesUpdateDialogFiltersOrder{}
}

func (m* TLMessagesUpdateDialogFiltersOrder) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_updateDialogFiltersOrder))

    x.VectorInt(m.Order)


return x.buf
}

func (m* TLMessagesUpdateDialogFiltersOrder) Decode(dbuf *DecodeBuf) error {
    m.Order = dbuf.VectorInt()

return dbuf.err
}

func NewTLMessagesGetOldFeaturedStickers() * TLMessagesGetOldFeaturedStickers {
    return &TLMessagesGetOldFeaturedStickers{}
}

func (m* TLMessagesGetOldFeaturedStickers) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getOldFeaturedStickers))

    x.Int(m.Offset)
    x.Int(m.Limit)
    x.Int(m.Hash)

return x.buf
}

func (m* TLMessagesGetOldFeaturedStickers) Decode(dbuf *DecodeBuf) error {
    m.Offset = dbuf.Int()
    m.Limit = dbuf.Int()
    m.Hash = dbuf.Int()

return dbuf.err
}

func NewTLUploadGetFile114() * TLUploadGetFile114 {
    return &TLUploadGetFile114{}
}

func (m* TLUploadGetFile114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_upload_getFile114))

    // flags
    var flags uint32 = 0
    if m.Precise == true { flags |= 1 << 0 }
    if m.CdnSupported == true { flags |= 1 << 1 }
	x.UInt(flags)

    
    
    x.Bytes(m.Location.Encode())
    x.Int(m.Offset)
    x.Int(m.Limit)

return x.buf
}

func (m* TLUploadGetFile114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Precise = true }
    if (flags & (1 << 1)) != 0 { m.CdnSupported = true }
    m4 := &InputFileLocation{}
    m4.Decode(dbuf)
    m.Location = m4
    m.Offset = dbuf.Int()
    m.Limit = dbuf.Int()

return dbuf.err
}

func NewTLUploadReuploadCdnFile114() * TLUploadReuploadCdnFile114 {
    return &TLUploadReuploadCdnFile114{}
}

func (m* TLUploadReuploadCdnFile114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_upload_reuploadCdnFile114))

    x.StringBytes(m.FileToken)
    x.StringBytes(m.RequestToken)

return x.buf
}

func (m* TLUploadReuploadCdnFile114) Decode(dbuf *DecodeBuf) error {
    m.FileToken = dbuf.StringBytes()
    m.RequestToken = dbuf.StringBytes()

return dbuf.err
}

func NewTLUploadGetCdnFileHashes114() * TLUploadGetCdnFileHashes114 {
    return &TLUploadGetCdnFileHashes114{}
}

func (m* TLUploadGetCdnFileHashes114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_upload_getCdnFileHashes114))

    x.StringBytes(m.FileToken)
    x.Int(m.Offset)

return x.buf
}

func (m* TLUploadGetCdnFileHashes114) Decode(dbuf *DecodeBuf) error {
    m.FileToken = dbuf.StringBytes()
    m.Offset = dbuf.Int()

return dbuf.err
}

func NewTLUploadGetFileHashes() * TLUploadGetFileHashes {
    return &TLUploadGetFileHashes{}
}

func (m* TLUploadGetFileHashes) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_upload_getFileHashes))

    x.Bytes(m.Location.Encode())
    x.Int(m.Offset)

return x.buf
}

func (m* TLUploadGetFileHashes) Decode(dbuf *DecodeBuf) error {
    m1 := &InputFileLocation{}
    m1.Decode(dbuf)
    m.Location = m1
    m.Offset = dbuf.Int()

return dbuf.err
}

func NewTLHelpGetAppUpdate114() * TLHelpGetAppUpdate114 {
    return &TLHelpGetAppUpdate114{}
}

func (m* TLHelpGetAppUpdate114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_help_getAppUpdate114))

    x.String(m.Source)

return x.buf
}

func (m* TLHelpGetAppUpdate114) Decode(dbuf *DecodeBuf) error {
    m.Source = dbuf.String()

return dbuf.err
}

func NewTLHelpGetAppConfig() * TLHelpGetAppConfig {
    return &TLHelpGetAppConfig{}
}

func (m* TLHelpGetAppConfig) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_help_getAppConfig))


return x.buf
}

func (m* TLHelpGetAppConfig) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLHelpGetPassportConfig() * TLHelpGetPassportConfig {
    return &TLHelpGetPassportConfig{}
}

func (m* TLHelpGetPassportConfig) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_help_getPassportConfig))

    x.Int(m.Hash)

return x.buf
}

func (m* TLHelpGetPassportConfig) Decode(dbuf *DecodeBuf) error {
    m.Hash = dbuf.Int()

return dbuf.err
}

func NewTLHelpGetSupportName() * TLHelpGetSupportName {
    return &TLHelpGetSupportName{}
}

func (m* TLHelpGetSupportName) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_help_getSupportName))


return x.buf
}

func (m* TLHelpGetSupportName) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLHelpGetUserInfo() * TLHelpGetUserInfo {
    return &TLHelpGetUserInfo{}
}

func (m* TLHelpGetUserInfo) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_help_getUserInfo))

    x.Bytes(m.UserId.Encode())

return x.buf
}

func (m* TLHelpGetUserInfo) Decode(dbuf *DecodeBuf) error {
    m1 := &InputUser{}
    m1.Decode(dbuf)
    m.UserId = m1

return dbuf.err
}

func NewTLHelpEditUserInfo() * TLHelpEditUserInfo {
    return &TLHelpEditUserInfo{}
}

func (m* TLHelpEditUserInfo) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_help_editUserInfo))

    x.Bytes(m.UserId.Encode())
    x.String(m.Message)
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Entities)))
for _, v := range m.Entities {
  x.buf = append(x.buf, (*v).Encode()...)
}

return x.buf
}

func (m* TLHelpEditUserInfo) Decode(dbuf *DecodeBuf) error {
    m1 := &InputUser{}
    m1.Decode(dbuf)
    m.UserId = m1
    m.Message = dbuf.String()
    dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l3 := dbuf.Int()
m.Entities = make([]*MessageEntity, l3)
for i := int32(0); i < l3; i++ {
 m.Entities[i] = &MessageEntity{}
 (*m.Entities[i]).Decode(dbuf)
}

return dbuf.err
}

func NewTLHelpGetPromoData() * TLHelpGetPromoData {
    return &TLHelpGetPromoData{}
}

func (m* TLHelpGetPromoData) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_help_getPromoData))


return x.buf
}

func (m* TLHelpGetPromoData) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLHelpHidePromoData() * TLHelpHidePromoData {
    return &TLHelpHidePromoData{}
}

func (m* TLHelpHidePromoData) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_help_hidePromoData))

    x.Bytes(m.Peer.Encode())

return x.buf
}

func (m* TLHelpHidePromoData) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPeer{}
    m1.Decode(dbuf)
    m.Peer = m1

return dbuf.err
}

func NewTLChannelsGetMessages114() * TLChannelsGetMessages114 {
    return &TLChannelsGetMessages114{}
}

func (m* TLChannelsGetMessages114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_getMessages114))

    x.Bytes(m.Channel.Encode())
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Id)))
for _, v := range m.Id {
  x.buf = append(x.buf, (*v).Encode()...)
}

return x.buf
}

func (m* TLChannelsGetMessages114) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1
    dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l2 := dbuf.Int()
m.Id = make([]*InputMessage, l2)
for i := int32(0); i < l2; i++ {
 m.Id[i] = &InputMessage{}
 (*m.Id[i]).Decode(dbuf)
}

return dbuf.err
}

func NewTLChannelsCreateChannel114() * TLChannelsCreateChannel114 {
    return &TLChannelsCreateChannel114{}
}

func (m* TLChannelsCreateChannel114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_createChannel114))

    // flags
    var flags uint32 = 0
    if m.Broadcast == true { flags |= 1 << 0 }
    if m.Megagroup == true { flags |= 1 << 1 }
    if m.GeoPoint != nil { flags |= 1 << 2 }
    if m.Address != "" { flags |= 1 << 2 }
	x.UInt(flags)

    
    
    x.String(m.Title)
    x.String(m.About)
    if m.GeoPoint != nil {
 x.Bytes(m.GeoPoint.Encode()) 
}
    if m.Address != "" { x.String(m.Address) }

return x.buf
}

func (m* TLChannelsCreateChannel114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Broadcast = true }
    if (flags & (1 << 1)) != 0 { m.Megagroup = true }
    m.Title = dbuf.String()
    m.About = dbuf.String()
    if (flags & (1 << 2)) != 0 {
 m6 := &InputGeoPoint{}
    m6.Decode(dbuf)
    m.GeoPoint = m6 
}
    if (flags & (1 << 2)) != 0 { m.Address = dbuf.String() }

return dbuf.err
}

func NewTLChannelsEditAdmin114() * TLChannelsEditAdmin114 {
    return &TLChannelsEditAdmin114{}
}

func (m* TLChannelsEditAdmin114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_editAdmin114))

    x.Bytes(m.Channel.Encode())
    x.Bytes(m.UserId.Encode())
    x.Bytes(m.AdminRights.Encode())
    x.String(m.Rank)

return x.buf
}

func (m* TLChannelsEditAdmin114) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1
    m2 := &InputUser{}
    m2.Decode(dbuf)
    m.UserId = m2
    m3 := &ChatAdminRights{}
    m3.Decode(dbuf)
    m.AdminRights = m3
    m.Rank = dbuf.String()

return dbuf.err
}

func NewTLChannelsExportMessageLink114() * TLChannelsExportMessageLink114 {
    return &TLChannelsExportMessageLink114{}
}

func (m* TLChannelsExportMessageLink114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_exportMessageLink114))

    x.Bytes(m.Channel.Encode())
    x.Int(m.Id)
    x.Bytes(m.Grouped.Encode())

return x.buf
}

func (m* TLChannelsExportMessageLink114) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1
    m.Id = dbuf.Int()
    m3 := &Bool{}
    m3.Decode(dbuf)
    m.Grouped = m3

return dbuf.err
}

func NewTLChannelsGetAdminedPublicChannels114() * TLChannelsGetAdminedPublicChannels114 {
    return &TLChannelsGetAdminedPublicChannels114{}
}

func (m* TLChannelsGetAdminedPublicChannels114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_getAdminedPublicChannels114))

    // flags
    var flags uint32 = 0
    if m.ByLocation == true { flags |= 1 << 0 }
    if m.CheckLimit == true { flags |= 1 << 1 }
	x.UInt(flags)

    
    

return x.buf
}

func (m* TLChannelsGetAdminedPublicChannels114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.ByLocation = true }
    if (flags & (1 << 1)) != 0 { m.CheckLimit = true }

return dbuf.err
}

func NewTLChannelsEditBanned114() * TLChannelsEditBanned114 {
    return &TLChannelsEditBanned114{}
}

func (m* TLChannelsEditBanned114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_editBanned114))

    x.Bytes(m.Channel.Encode())
    x.Bytes(m.UserId.Encode())
    x.Bytes(m.BannedRights.Encode())

return x.buf
}

func (m* TLChannelsEditBanned114) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1
    m2 := &InputUser{}
    m2.Decode(dbuf)
    m.UserId = m2
    m3 := &ChatBannedRights{}
    m3.Decode(dbuf)
    m.BannedRights = m3

return dbuf.err
}

func NewTLChannelsGetLeftChannels() * TLChannelsGetLeftChannels {
    return &TLChannelsGetLeftChannels{}
}

func (m* TLChannelsGetLeftChannels) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_getLeftChannels))

    x.Int(m.Offset)

return x.buf
}

func (m* TLChannelsGetLeftChannels) Decode(dbuf *DecodeBuf) error {
    m.Offset = dbuf.Int()

return dbuf.err
}

func NewTLChannelsGetGroupsForDiscussion() * TLChannelsGetGroupsForDiscussion {
    return &TLChannelsGetGroupsForDiscussion{}
}

func (m* TLChannelsGetGroupsForDiscussion) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_getGroupsForDiscussion))


return x.buf
}

func (m* TLChannelsGetGroupsForDiscussion) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLChannelsSetDiscussionGroup() * TLChannelsSetDiscussionGroup {
    return &TLChannelsSetDiscussionGroup{}
}

func (m* TLChannelsSetDiscussionGroup) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_setDiscussionGroup))

    x.Bytes(m.Broadcast.Encode())
    x.Bytes(m.Group.Encode())

return x.buf
}

func (m* TLChannelsSetDiscussionGroup) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Broadcast = m1
    m2 := &InputChannel{}
    m2.Decode(dbuf)
    m.Group = m2

return dbuf.err
}

func NewTLChannelsEditCreator() * TLChannelsEditCreator {
    return &TLChannelsEditCreator{}
}

func (m* TLChannelsEditCreator) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_editCreator))

    x.Bytes(m.Channel.Encode())
    x.Bytes(m.UserId.Encode())
    x.Bytes(m.Password.Encode())

return x.buf
}

func (m* TLChannelsEditCreator) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1
    m2 := &InputUser{}
    m2.Decode(dbuf)
    m.UserId = m2
    m3 := &InputCheckPasswordSRP{}
    m3.Decode(dbuf)
    m.Password = m3

return dbuf.err
}

func NewTLChannelsEditLocation() * TLChannelsEditLocation {
    return &TLChannelsEditLocation{}
}

func (m* TLChannelsEditLocation) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_editLocation))

    x.Bytes(m.Channel.Encode())
    x.Bytes(m.GeoPoint.Encode())
    x.String(m.Address)

return x.buf
}

func (m* TLChannelsEditLocation) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1
    m2 := &InputGeoPoint{}
    m2.Decode(dbuf)
    m.GeoPoint = m2
    m.Address = dbuf.String()

return dbuf.err
}

func NewTLChannelsToggleSlowMode() * TLChannelsToggleSlowMode {
    return &TLChannelsToggleSlowMode{}
}

func (m* TLChannelsToggleSlowMode) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_toggleSlowMode))

    x.Bytes(m.Channel.Encode())
    x.Int(m.Seconds)

return x.buf
}

func (m* TLChannelsToggleSlowMode) Decode(dbuf *DecodeBuf) error {
    m1 := &InputChannel{}
    m1.Decode(dbuf)
    m.Channel = m1
    m.Seconds = dbuf.Int()

return dbuf.err
}

func NewTLChannelsGetInactiveChannels() * TLChannelsGetInactiveChannels {
    return &TLChannelsGetInactiveChannels{}
}

func (m* TLChannelsGetInactiveChannels) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_channels_getInactiveChannels))


return x.buf
}

func (m* TLChannelsGetInactiveChannels) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLBotsSetBotCommands() * TLBotsSetBotCommands {
    return &TLBotsSetBotCommands{}
}

func (m* TLBotsSetBotCommands) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_bots_setBotCommands))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Commands)))
for _, v := range m.Commands {
  x.buf = append(x.buf, (*v).Encode()...)
}

return x.buf
}

func (m* TLBotsSetBotCommands) Decode(dbuf *DecodeBuf) error {
    dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l1 := dbuf.Int()
m.Commands = make([]*BotCommand, l1)
for i := int32(0); i < l1; i++ {
 m.Commands[i] = &BotCommand{}
 (*m.Commands[i]).Decode(dbuf)
}

return dbuf.err
}

func NewTLPaymentsGetBankCardData() * TLPaymentsGetBankCardData {
    return &TLPaymentsGetBankCardData{}
}

func (m* TLPaymentsGetBankCardData) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_payments_getBankCardData))

    x.String(m.Number)

return x.buf
}

func (m* TLPaymentsGetBankCardData) Decode(dbuf *DecodeBuf) error {
    m.Number = dbuf.String()

return dbuf.err
}

func NewTLStickersCreateStickerSet114() * TLStickersCreateStickerSet114 {
    return &TLStickersCreateStickerSet114{}
}

func (m* TLStickersCreateStickerSet114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_stickers_createStickerSet114))

    // flags
    var flags uint32 = 0
    if m.Masks == true { flags |= 1 << 0 }
    if m.Animated == true { flags |= 1 << 1 }
    if m.Thumb != nil { flags |= 1 << 2 }
	x.UInt(flags)

    
    
    x.Bytes(m.UserId.Encode())
    x.String(m.Title)
    x.String(m.ShortName)
    if m.Thumb != nil {
 x.Bytes(m.Thumb.Encode()) 
}
    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.Stickers)))
for _, v := range m.Stickers {
  x.buf = append(x.buf, (*v).Encode()...)
}

return x.buf
}

func (m* TLStickersCreateStickerSet114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Masks = true }
    if (flags & (1 << 1)) != 0 { m.Animated = true }
    m4 := &InputUser{}
    m4.Decode(dbuf)
    m.UserId = m4
    m.Title = dbuf.String()
    m.ShortName = dbuf.String()
    if (flags & (1 << 2)) != 0 {
 m7 := &InputDocument{}
    m7.Decode(dbuf)
    m.Thumb = m7 
}
    dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l8 := dbuf.Int()
m.Stickers = make([]*InputStickerSetItem, l8)
for i := int32(0); i < l8; i++ {
 m.Stickers[i] = &InputStickerSetItem{}
 (*m.Stickers[i]).Decode(dbuf)
}

return dbuf.err
}

func NewTLStickersSetStickerSetThumb() * TLStickersSetStickerSetThumb {
    return &TLStickersSetStickerSetThumb{}
}

func (m* TLStickersSetStickerSetThumb) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_stickers_setStickerSetThumb))

    x.Bytes(m.Stickerset.Encode())
    x.Bytes(m.Thumb.Encode())

return x.buf
}

func (m* TLStickersSetStickerSetThumb) Decode(dbuf *DecodeBuf) error {
    m1 := &InputStickerSet{}
    m1.Decode(dbuf)
    m.Stickerset = m1
    m2 := &InputDocument{}
    m2.Decode(dbuf)
    m.Thumb = m2

return dbuf.err
}

func NewTLPhoneRequestCall114() * TLPhoneRequestCall114 {
    return &TLPhoneRequestCall114{}
}

func (m* TLPhoneRequestCall114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_phone_requestCall114))

    // flags
    var flags uint32 = 0
    if m.Video == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Bytes(m.UserId.Encode())
    x.Int(m.RandomId)
    x.StringBytes(m.GAHash)
    x.Bytes(m.Protocol.Encode())

return x.buf
}

func (m* TLPhoneRequestCall114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Video = true }
    m3 := &InputUser{}
    m3.Decode(dbuf)
    m.UserId = m3
    m.RandomId = dbuf.Int()
    m.GAHash = dbuf.StringBytes()
    m6 := &PhoneCallProtocol{}
    m6.Decode(dbuf)
    m.Protocol = m6

return dbuf.err
}

func NewTLPhoneDiscardCall114() * TLPhoneDiscardCall114 {
    return &TLPhoneDiscardCall114{}
}

func (m* TLPhoneDiscardCall114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_phone_discardCall114))

    // flags
    var flags uint32 = 0
    if m.Video == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Bytes(m.Peer.Encode())
    x.Int(m.Duration)
    x.Bytes(m.Reason.Encode())
    x.Long(m.ConnectionId)

return x.buf
}

func (m* TLPhoneDiscardCall114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Video = true }
    m3 := &InputPhoneCall{}
    m3.Decode(dbuf)
    m.Peer = m3
    m.Duration = dbuf.Int()
    m5 := &PhoneCallDiscardReason{}
    m5.Decode(dbuf)
    m.Reason = m5
    m.ConnectionId = dbuf.Long()

return dbuf.err
}

func NewTLPhoneSetCallRating114() * TLPhoneSetCallRating114 {
    return &TLPhoneSetCallRating114{}
}

func (m* TLPhoneSetCallRating114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_phone_setCallRating114))

    // flags
    var flags uint32 = 0
    if m.UserInitiative == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Bytes(m.Peer.Encode())
    x.Int(m.Rating)
    x.String(m.Comment)

return x.buf
}

func (m* TLPhoneSetCallRating114) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.UserInitiative = true }
    m3 := &InputPhoneCall{}
    m3.Decode(dbuf)
    m.Peer = m3
    m.Rating = dbuf.Int()
    m.Comment = dbuf.String()

return dbuf.err
}

func NewTLPhoneSendSignalingData() * TLPhoneSendSignalingData {
    return &TLPhoneSendSignalingData{}
}

func (m* TLPhoneSendSignalingData) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_phone_sendSignalingData))

    x.Bytes(m.Peer.Encode())
    x.StringBytes(m.Data)

return x.buf
}

func (m* TLPhoneSendSignalingData) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPhoneCall{}
    m1.Decode(dbuf)
    m.Peer = m1
    m.Data = dbuf.StringBytes()

return dbuf.err
}

func NewTLLangpackGetLangPack114() * TLLangpackGetLangPack114 {
    return &TLLangpackGetLangPack114{}
}

func (m* TLLangpackGetLangPack114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_langpack_getLangPack114))

    x.String(m.LangPack)
    x.String(m.LangCode)

return x.buf
}

func (m* TLLangpackGetLangPack114) Decode(dbuf *DecodeBuf) error {
    m.LangPack = dbuf.String()
    m.LangCode = dbuf.String()

return dbuf.err
}

func NewTLLangpackGetStrings114() * TLLangpackGetStrings114 {
    return &TLLangpackGetStrings114{}
}

func (m* TLLangpackGetStrings114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_langpack_getStrings114))

    x.String(m.LangPack)
    x.String(m.LangCode)
    x.VectorString(m.Keys)


return x.buf
}

func (m* TLLangpackGetStrings114) Decode(dbuf *DecodeBuf) error {
    m.LangPack = dbuf.String()
    m.LangCode = dbuf.String()
    m.Keys = dbuf.VectorString()

return dbuf.err
}

func NewTLLangpackGetDifference114() * TLLangpackGetDifference114 {
    return &TLLangpackGetDifference114{}
}

func (m* TLLangpackGetDifference114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_langpack_getDifference114))

    x.String(m.LangPack)
    x.String(m.LangCode)
    x.Int(m.FromVersion)

return x.buf
}

func (m* TLLangpackGetDifference114) Decode(dbuf *DecodeBuf) error {
    m.LangPack = dbuf.String()
    m.LangCode = dbuf.String()
    m.FromVersion = dbuf.Int()

return dbuf.err
}

func NewTLLangpackGetLanguages114() * TLLangpackGetLanguages114 {
    return &TLLangpackGetLanguages114{}
}

func (m* TLLangpackGetLanguages114) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_langpack_getLanguages114))

    x.String(m.LangPack)

return x.buf
}

func (m* TLLangpackGetLanguages114) Decode(dbuf *DecodeBuf) error {
    m.LangPack = dbuf.String()

return dbuf.err
}

func NewTLLangpackGetLanguage() * TLLangpackGetLanguage {
    return &TLLangpackGetLanguage{}
}

func (m* TLLangpackGetLanguage) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_langpack_getLanguage))

    x.String(m.LangPack)
    x.String(m.LangCode)

return x.buf
}

func (m* TLLangpackGetLanguage) Decode(dbuf *DecodeBuf) error {
    m.LangPack = dbuf.String()
    m.LangCode = dbuf.String()

return dbuf.err
}

func NewTLFoldersEditPeerFolders() * TLFoldersEditPeerFolders {
    return &TLFoldersEditPeerFolders{}
}

func (m* TLFoldersEditPeerFolders) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_folders_editPeerFolders))

    x.Int(int32(TLConstructor_CRC32_vector))
x.Int(int32(len(m.FolderPeers)))
for _, v := range m.FolderPeers {
  x.buf = append(x.buf, (*v).Encode()...)
}

return x.buf
}

func (m* TLFoldersEditPeerFolders) Decode(dbuf *DecodeBuf) error {
    dbuf.Int()  // TODO(@benqi): Check crc32 invalid
l1 := dbuf.Int()
m.FolderPeers = make([]*InputFolderPeer, l1)
for i := int32(0); i < l1; i++ {
 m.FolderPeers[i] = &InputFolderPeer{}
 (*m.FolderPeers[i]).Decode(dbuf)
}

return dbuf.err
}

func NewTLFoldersDeleteFolder() * TLFoldersDeleteFolder {
    return &TLFoldersDeleteFolder{}
}

func (m* TLFoldersDeleteFolder) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_folders_deleteFolder))

    x.Int(m.FolderId)

return x.buf
}

func (m* TLFoldersDeleteFolder) Decode(dbuf *DecodeBuf) error {
    m.FolderId = dbuf.Int()

return dbuf.err
}

func NewTLStatsGetBroadcastStats() * TLStatsGetBroadcastStats {
    return &TLStatsGetBroadcastStats{}
}

func (m* TLStatsGetBroadcastStats) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_stats_getBroadcastStats))

    // flags
    var flags uint32 = 0
    if m.Dark == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Bytes(m.Channel.Encode())

return x.buf
}

func (m* TLStatsGetBroadcastStats) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Dark = true }
    m3 := &InputChannel{}
    m3.Decode(dbuf)
    m.Channel = m3

return dbuf.err
}

func NewTLStatsLoadAsyncGraph() * TLStatsLoadAsyncGraph {
    return &TLStatsLoadAsyncGraph{}
}

func (m* TLStatsLoadAsyncGraph) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_stats_loadAsyncGraph))

    // flags
    var flags uint32 = 0
    if m.X != 0 { flags |= 1 << 0 }
	x.UInt(flags)

    x.String(m.Token)
    if m.X != 0 { x.Long(m.X) }

return x.buf
}

func (m* TLStatsLoadAsyncGraph) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    m.Token = dbuf.String()
    if (flags & (1 << 0)) != 0 { m.X = dbuf.Long() }

return dbuf.err
}

func NewTLAccountGetGlobalPrivacySettings() * TLAccountGetGlobalPrivacySettings {
    return &TLAccountGetGlobalPrivacySettings{}
}

func (m* TLAccountGetGlobalPrivacySettings) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_getGlobalPrivacySettings))


return x.buf
}

func (m* TLAccountGetGlobalPrivacySettings) Decode(dbuf *DecodeBuf) error {

return dbuf.err
}

func NewTLAccountSetGlobalPrivacySettings() * TLAccountSetGlobalPrivacySettings {
    return &TLAccountSetGlobalPrivacySettings{}
}

func (m* TLAccountSetGlobalPrivacySettings) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_account_setGlobalPrivacySettings))

    x.Bytes(m.Settings.Encode())

return x.buf
}

func (m* TLAccountSetGlobalPrivacySettings) Decode(dbuf *DecodeBuf) error {
    m1 := &GlobalPrivacySettings{}
    m1.Decode(dbuf)
    m.Settings = m1

return dbuf.err
}

func NewTLStatsGetMegagroupStats() * TLStatsGetMegagroupStats {
    return &TLStatsGetMegagroupStats{}
}

func (m* TLStatsGetMegagroupStats) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_stats_getMegagroupStats))

    // flags
    var flags uint32 = 0
    if m.Dark == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Bytes(m.Channel.Encode())

return x.buf
}

func (m* TLStatsGetMegagroupStats) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Dark = true }
    m3 := &InputChannel{}
    m3.Decode(dbuf)
    m.Channel = m3

return dbuf.err
}

func NewTLPhotosUploadProfilePhoto117() * TLPhotosUploadProfilePhoto117 {
    return &TLPhotosUploadProfilePhoto117{}
}

func (m* TLPhotosUploadProfilePhoto117) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_photos_uploadProfilePhoto117))

    // flags
    var flags uint32 = 0
    if m.File != nil { flags |= 1 << 0 }
    if m.Video != nil { flags |= 1 << 1 }
    if m.VideoStartTs != 0 { flags |= 1 << 2 }
	x.UInt(flags)

    if m.File != nil {
 x.Bytes(m.File.Encode()) 
}
    if m.Video != nil {
 x.Bytes(m.Video.Encode()) 
}
    

return x.buf
}

func (m* TLPhotosUploadProfilePhoto117) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 {
 m2 := &InputFile{}
    m2.Decode(dbuf)
    m.File = m2 
}
    if (flags & (1 << 1)) != 0 {
 m3 := &InputFile{}
    m3.Decode(dbuf)
    m.Video = m3 
}
    

return dbuf.err
}

func NewTLHelpDismissSuggestion() * TLHelpDismissSuggestion {
    return &TLHelpDismissSuggestion{}
}

func (m* TLHelpDismissSuggestion) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_help_dismissSuggestion))

    x.String(m.Suggestion)

return x.buf
}

func (m* TLHelpDismissSuggestion) Decode(dbuf *DecodeBuf) error {
    m.Suggestion = dbuf.String()

return dbuf.err
}

func NewTLPhotosUpdateProfilePhoto117() * TLPhotosUpdateProfilePhoto117 {
    return &TLPhotosUpdateProfilePhoto117{}
}

func (m* TLPhotosUpdateProfilePhoto117) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_photos_updateProfilePhoto117))

    x.Bytes(m.Id.Encode())

return x.buf
}

func (m* TLPhotosUpdateProfilePhoto117) Decode(dbuf *DecodeBuf) error {
    m1 := &InputPhoto{}
    m1.Decode(dbuf)
    m.Id = m1

return dbuf.err
}

func NewTLHelpGetCountriesList() * TLHelpGetCountriesList {
    return &TLHelpGetCountriesList{}
}

func (m* TLHelpGetCountriesList) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_help_getCountriesList))

    x.String(m.LangCode)
    x.Int(m.Hash)

return x.buf
}

func (m* TLHelpGetCountriesList) Decode(dbuf *DecodeBuf) error {
    m.LangCode = dbuf.String()
    m.Hash = dbuf.Int()

return dbuf.err
}

func NewTLMessagesSendEncrypted118() * TLMessagesSendEncrypted118 {
    return &TLMessagesSendEncrypted118{}
}

func (m* TLMessagesSendEncrypted118) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_sendEncrypted118))

    // flags
    var flags uint32 = 0
    if m.Silent == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Bytes(m.Peer.Encode())
    x.Long(m.RandomId)
    x.StringBytes(m.Data)

return x.buf
}

func (m* TLMessagesSendEncrypted118) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Silent = true }
    m3 := &InputEncryptedChat{}
    m3.Decode(dbuf)
    m.Peer = m3
    m.RandomId = dbuf.Long()
    m.Data = dbuf.StringBytes()

return dbuf.err
}

func NewTLMessagesGetBotCallbackAnswer118() * TLMessagesGetBotCallbackAnswer118 {
    return &TLMessagesGetBotCallbackAnswer118{}
}

func (m* TLMessagesGetBotCallbackAnswer118) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_getBotCallbackAnswer118))

    // flags
    var flags uint32 = 0
    if m.Game == true { flags |= 1 << 1 }
    if m.Data != nil { flags |= 1 << 0 }
    if m.Password != nil { flags |= 1 << 2 }
	x.UInt(flags)

    
    x.Bytes(m.Peer.Encode())
    x.Int(m.MsgId)
    if m.Data != nil {
 x.StringBytes(m.Data) 
}
    if m.Password != nil {
 x.Bytes(m.Password.Encode()) 
}

return x.buf
}

func (m* TLMessagesGetBotCallbackAnswer118) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 1)) != 0 { m.Game = true }
    m3 := &InputPeer{}
    m3.Decode(dbuf)
    m.Peer = m3
    m.MsgId = dbuf.Int()
    if (flags & (1 << 0)) != 0 {
 m.Data = dbuf.StringBytes() 
}
    if (flags & (1 << 2)) != 0 {
 m6 := &InputCheckPasswordSRP{}
    m6.Decode(dbuf)
    m.Password = m6 
}

return dbuf.err
}

func NewTLMessagesSendEncryptedFile118() * TLMessagesSendEncryptedFile118 {
    return &TLMessagesSendEncryptedFile118{}
}

func (m* TLMessagesSendEncryptedFile118) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_messages_sendEncryptedFile118))

    // flags
    var flags uint32 = 0
    if m.Silent == true { flags |= 1 << 0 }
	x.UInt(flags)

    
    x.Bytes(m.Peer.Encode())
    x.Long(m.RandomId)
    x.StringBytes(m.Data)
    x.Bytes(m.File.Encode())

return x.buf
}

func (m* TLMessagesSendEncryptedFile118) Decode(dbuf *DecodeBuf) error {
    flags := dbuf.UInt()
_ = flags
    if (flags & (1 << 0)) != 0 { m.Silent = true }
    m3 := &InputEncryptedChat{}
    m3.Decode(dbuf)
    m.Peer = m3
    m.RandomId = dbuf.Long()
    m.Data = dbuf.StringBytes()
    m6 := &InputEncryptedFile{}
    m6.Decode(dbuf)
    m.File = m6

return dbuf.err
}

func NewTLLangpackGetDifference118() * TLLangpackGetDifference118 {
    return &TLLangpackGetDifference118{}
}

func (m* TLLangpackGetDifference118) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_langpack_getDifference118))

    x.String(m.LangCode)
    x.Int(m.FromVersion)

return x.buf
}

func (m* TLLangpackGetDifference118) Decode(dbuf *DecodeBuf) error {
    m.LangCode = dbuf.String()
    m.FromVersion = dbuf.Int()

return dbuf.err
}

func NewTLApiAddAuthKey() * TLApiAddAuthKey {
    return &TLApiAddAuthKey{}
}

func (m* TLApiAddAuthKey) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_api_addAuthKey))

    x.Long(m.AuthKeyId)
    x.StringBytes(m.AuthKey)

return x.buf
}

func (m* TLApiAddAuthKey) Decode(dbuf *DecodeBuf) error {
    m.AuthKeyId = dbuf.Long()
    m.AuthKey = dbuf.StringBytes()

return dbuf.err
}

func NewTLApiInitConnectionLite() * TLApiInitConnectionLite {
    return &TLApiInitConnectionLite{}
}

func (m* TLApiInitConnectionLite) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_api_initConnectionLite))

    x.Int(m.ApiId)
    x.String(m.DeviceModel)
    x.String(m.SystemVersion)
    x.String(m.AppVersion)
    x.String(m.SystemLangCode)
    x.String(m.LangPack)
    x.String(m.LangCode)

return x.buf
}

func (m* TLApiInitConnectionLite) Decode(dbuf *DecodeBuf) error {
    m.ApiId = dbuf.Int()
    m.DeviceModel = dbuf.String()
    m.SystemVersion = dbuf.String()
    m.AppVersion = dbuf.String()
    m.SystemLangCode = dbuf.String()
    m.LangPack = dbuf.String()
    m.LangCode = dbuf.String()

return dbuf.err
}

func NewTLApiCoinRequest() * TLApiCoinRequest {
    return &TLApiCoinRequest{}
}

func (m* TLApiCoinRequest) Encode() []byte {
x := NewEncodeBuf(512)
x.Int(int32(TLConstructor_CRC32_api_coinRequest))

    x.String(m.Method)
    x.String(m.Data)

return x.buf
}

func (m* TLApiCoinRequest) Decode(dbuf *DecodeBuf) error {
    m.Method = dbuf.String()
    m.Data = dbuf.String()

return dbuf.err
}
