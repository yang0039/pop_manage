// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zproto_sync.proto

package mtproto

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 同步类型
type SyncType int32

const (
	SyncType_SYNC_TYPE_UNKNOWN    SyncType = 0
	SyncType_SYNC_TYPE_USER       SyncType = 1
	SyncType_SYNC_TYPE_USER_NOTME SyncType = 2
	SyncType_SYNC_TYPE_USER_ME    SyncType = 3
	SyncType_SYNC_TYPE_RPC_RESULT SyncType = 4
)

var SyncType_name = map[int32]string{
	0: "SYNC_TYPE_UNKNOWN",
	1: "SYNC_TYPE_USER",
	2: "SYNC_TYPE_USER_NOTME",
	3: "SYNC_TYPE_USER_ME",
	4: "SYNC_TYPE_RPC_RESULT",
}

var SyncType_value = map[string]int32{
	"SYNC_TYPE_UNKNOWN":    0,
	"SYNC_TYPE_USER":       1,
	"SYNC_TYPE_USER_NOTME": 2,
	"SYNC_TYPE_USER_ME":    3,
	"SYNC_TYPE_RPC_RESULT": 4,
}

func (x SyncType) String() string {
	return proto.EnumName(SyncType_name, int32(x))
}

func (SyncType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0df3baee6a09be32, []int{0}
}

type UpdateType int32

const (
	UpdateType_UPDATE_NORMAL  UpdateType = 0
	UpdateType_UPDATE_PHONE   UpdateType = 1
	UpdateType_UPDATE_ENCRYPT UpdateType = 2
)

var UpdateType_name = map[int32]string{
	0: "UPDATE_NORMAL",
	1: "UPDATE_PHONE",
	2: "UPDATE_ENCRYPT",
}

var UpdateType_value = map[string]int32{
	"UPDATE_NORMAL":  0,
	"UPDATE_PHONE":   1,
	"UPDATE_ENCRYPT": 2,
}

func (x UpdateType) String() string {
	return proto.EnumName(UpdateType_name, int32(x))
}

func (UpdateType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0df3baee6a09be32, []int{1}
}

type SyncOnlineType int32

const (
	SyncOnlineType_ALL          SyncOnlineType = 0
	SyncOnlineType_ONLY_ONLINE  SyncOnlineType = 1
	SyncOnlineType_ONLY_OFFLINE SyncOnlineType = 2
)

var SyncOnlineType_name = map[int32]string{
	0: "ALL",
	1: "ONLY_ONLINE",
	2: "ONLY_OFFLINE",
}

var SyncOnlineType_value = map[string]int32{
	"ALL":          0,
	"ONLY_ONLINE":  1,
	"ONLY_OFFLINE": 2,
}

func (x SyncOnlineType) String() string {
	return proto.EnumName(SyncOnlineType_name, int32(x))
}

func (SyncOnlineType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0df3baee6a09be32, []int{2}
}

type SessionType int32

const (
	SessionType_SESSION_UNKNOWN       SessionType = 0
	SessionType_SESSION_GENERIC       SessionType = 1
	SessionType_SESSION_DOWNLOAD      SessionType = 2
	SessionType_SESSION_UPLOAD        SessionType = 3
	SessionType_SESSION_PUSH          SessionType = 4
	SessionType_SESSION_TEMP          SessionType = 5
	SessionType_SESSION_PROXY         SessionType = 6
	SessionType_SESSION_GENERIC_MEDIA SessionType = 7
)

var SessionType_name = map[int32]string{
	0: "SESSION_UNKNOWN",
	1: "SESSION_GENERIC",
	2: "SESSION_DOWNLOAD",
	3: "SESSION_UPLOAD",
	4: "SESSION_PUSH",
	5: "SESSION_TEMP",
	6: "SESSION_PROXY",
	7: "SESSION_GENERIC_MEDIA",
}

var SessionType_value = map[string]int32{
	"SESSION_UNKNOWN":       0,
	"SESSION_GENERIC":       1,
	"SESSION_DOWNLOAD":      2,
	"SESSION_UPLOAD":        3,
	"SESSION_PUSH":          4,
	"SESSION_TEMP":          5,
	"SESSION_PROXY":         6,
	"SESSION_GENERIC_MEDIA": 7,
}

func (x SessionType) String() string {
	return proto.EnumName(SessionType_name, int32(x))
}

func (SessionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0df3baee6a09be32, []int{3}
}

type VoidRsp struct {
}

func (m *VoidRsp) Reset()         { *m = VoidRsp{} }
func (m *VoidRsp) String() string { return proto.CompactTextString(m) }
func (*VoidRsp) ProtoMessage()    {}
func (*VoidRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_0df3baee6a09be32, []int{0}
}
func (m *VoidRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoidRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoidRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoidRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoidRsp.Merge(m, src)
}
func (m *VoidRsp) XXX_Size() int {
	return m.Size()
}
func (m *VoidRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_VoidRsp.DiscardUnknown(m)
}

var xxx_messageInfo_VoidRsp proto.InternalMessageInfo

// PushMessage state
type ClientUpdatesState struct {
	Pts      int32 `protobuf:"varint,1,opt,name=pts,proto3" json:"pts,omitempty"`
	PtsCount int32 `protobuf:"varint,2,opt,name=pts_count,json=ptsCount,proto3" json:"pts_count,omitempty"`
	Qts      int32 `protobuf:"varint,3,opt,name=qts,proto3" json:"qts,omitempty"`
	QtsCount int32 `protobuf:"varint,4,opt,name=qts_count,json=qtsCount,proto3" json:"qts_count,omitempty"`
	Seq      int32 `protobuf:"varint,5,opt,name=seq,proto3" json:"seq,omitempty"`
	SeqStart int32 `protobuf:"varint,6,opt,name=seq_start,json=seqStart,proto3" json:"seq_start,omitempty"`
	Date     int32 `protobuf:"varint,7,opt,name=date,proto3" json:"date,omitempty"`
}

func (m *ClientUpdatesState) Reset()         { *m = ClientUpdatesState{} }
func (m *ClientUpdatesState) String() string { return proto.CompactTextString(m) }
func (*ClientUpdatesState) ProtoMessage()    {}
func (*ClientUpdatesState) Descriptor() ([]byte, []int) {
	return fileDescriptor_0df3baee6a09be32, []int{1}
}
func (m *ClientUpdatesState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientUpdatesState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientUpdatesState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientUpdatesState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientUpdatesState.Merge(m, src)
}
func (m *ClientUpdatesState) XXX_Size() int {
	return m.Size()
}
func (m *ClientUpdatesState) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientUpdatesState.DiscardUnknown(m)
}

var xxx_messageInfo_ClientUpdatesState proto.InternalMessageInfo

func (m *ClientUpdatesState) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *ClientUpdatesState) GetPtsCount() int32 {
	if m != nil {
		return m.PtsCount
	}
	return 0
}

func (m *ClientUpdatesState) GetQts() int32 {
	if m != nil {
		return m.Qts
	}
	return 0
}

func (m *ClientUpdatesState) GetQtsCount() int32 {
	if m != nil {
		return m.QtsCount
	}
	return 0
}

func (m *ClientUpdatesState) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ClientUpdatesState) GetSeqStart() int32 {
	if m != nil {
		return m.SeqStart
	}
	return 0
}

func (m *ClientUpdatesState) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

///////////////////////////////////////////////////////////////////////
// SERVER_AUTH_REQ
type ConnectToServerReq struct {
}

func (m *ConnectToServerReq) Reset()         { *m = ConnectToServerReq{} }
func (m *ConnectToServerReq) String() string { return proto.CompactTextString(m) }
func (*ConnectToServerReq) ProtoMessage()    {}
func (*ConnectToServerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_0df3baee6a09be32, []int{2}
}
func (m *ConnectToServerReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectToServerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectToServerReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectToServerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectToServerReq.Merge(m, src)
}
func (m *ConnectToServerReq) XXX_Size() int {
	return m.Size()
}
func (m *ConnectToServerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectToServerReq.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectToServerReq proto.InternalMessageInfo

type ServerConnectedRsp struct {
	ServerId   int32  `protobuf:"varint,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	ServerName string `protobuf:"bytes,2,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
}

func (m *ServerConnectedRsp) Reset()         { *m = ServerConnectedRsp{} }
func (m *ServerConnectedRsp) String() string { return proto.CompactTextString(m) }
func (*ServerConnectedRsp) ProtoMessage()    {}
func (*ServerConnectedRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_0df3baee6a09be32, []int{3}
}
func (m *ServerConnectedRsp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerConnectedRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerConnectedRsp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerConnectedRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerConnectedRsp.Merge(m, src)
}
func (m *ServerConnectedRsp) XXX_Size() int {
	return m.Size()
}
func (m *ServerConnectedRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerConnectedRsp.DiscardUnknown(m)
}

var xxx_messageInfo_ServerConnectedRsp proto.InternalMessageInfo

func (m *ServerConnectedRsp) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *ServerConnectedRsp) GetServerName() string {
	if m != nil {
		return m.ServerName
	}
	return ""
}

//前端断开连接，通知biz_server  connId not found时，也向BIZ发这个消息
type ClientCloseNotification struct {
	ConnId    uint64 `protobuf:"varint,1,opt,name=conn_id,json=connId,proto3" json:"conn_id,omitempty"`
	AuthKeyId int64  `protobuf:"varint,2,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
}

func (m *ClientCloseNotification) Reset()         { *m = ClientCloseNotification{} }
func (m *ClientCloseNotification) String() string { return proto.CompactTextString(m) }
func (*ClientCloseNotification) ProtoMessage()    {}
func (*ClientCloseNotification) Descriptor() ([]byte, []int) {
	return fileDescriptor_0df3baee6a09be32, []int{4}
}
func (m *ClientCloseNotification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientCloseNotification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientCloseNotification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientCloseNotification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientCloseNotification.Merge(m, src)
}
func (m *ClientCloseNotification) XXX_Size() int {
	return m.Size()
}
func (m *ClientCloseNotification) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientCloseNotification.DiscardUnknown(m)
}

var xxx_messageInfo_ClientCloseNotification proto.InternalMessageInfo

func (m *ClientCloseNotification) GetConnId() uint64 {
	if m != nil {
		return m.ConnId
	}
	return 0
}

func (m *ClientCloseNotification) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

//给gateway需要的auth信息，biz,db的signUp时会给gw传
type AuthInfoRequest struct {
	AuthKeyId int64 `protobuf:"varint,1,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
}

func (m *AuthInfoRequest) Reset()         { *m = AuthInfoRequest{} }
func (m *AuthInfoRequest) String() string { return proto.CompactTextString(m) }
func (*AuthInfoRequest) ProtoMessage()    {}
func (*AuthInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0df3baee6a09be32, []int{5}
}
func (m *AuthInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthInfoRequest.Merge(m, src)
}
func (m *AuthInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *AuthInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthInfoRequest proto.InternalMessageInfo

func (m *AuthInfoRequest) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

type AuthInfoResponse struct {
	AuthKeyId int64  `protobuf:"varint,1,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	UserId    int32  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthKey   []byte `protobuf:"bytes,3,opt,name=auth_key,json=authKey,proto3" json:"auth_key,omitempty"`
}

func (m *AuthInfoResponse) Reset()         { *m = AuthInfoResponse{} }
func (m *AuthInfoResponse) String() string { return proto.CompactTextString(m) }
func (*AuthInfoResponse) ProtoMessage()    {}
func (*AuthInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0df3baee6a09be32, []int{6}
}
func (m *AuthInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthInfoResponse.Merge(m, src)
}
func (m *AuthInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *AuthInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AuthInfoResponse proto.InternalMessageInfo

func (m *AuthInfoResponse) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *AuthInfoResponse) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *AuthInfoResponse) GetAuthKey() []byte {
	if m != nil {
		return m.AuthKey
	}
	return nil
}

//通知gateway，salt的值
type SaltUpdateNotification struct {
	AuthKeyId int64  `protobuf:"varint,1,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	ConnId    uint64 `protobuf:"varint,2,opt,name=conn_id,json=connId,proto3" json:"conn_id,omitempty"`
	SessionId int64  `protobuf:"varint,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Salt      int64  `protobuf:"varint,4,opt,name=salt,proto3" json:"salt,omitempty"`
}

func (m *SaltUpdateNotification) Reset()         { *m = SaltUpdateNotification{} }
func (m *SaltUpdateNotification) String() string { return proto.CompactTextString(m) }
func (*SaltUpdateNotification) ProtoMessage()    {}
func (*SaltUpdateNotification) Descriptor() ([]byte, []int) {
	return fileDescriptor_0df3baee6a09be32, []int{7}
}
func (m *SaltUpdateNotification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaltUpdateNotification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaltUpdateNotification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaltUpdateNotification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaltUpdateNotification.Merge(m, src)
}
func (m *SaltUpdateNotification) XXX_Size() int {
	return m.Size()
}
func (m *SaltUpdateNotification) XXX_DiscardUnknown() {
	xxx_messageInfo_SaltUpdateNotification.DiscardUnknown(m)
}

var xxx_messageInfo_SaltUpdateNotification proto.InternalMessageInfo

func (m *SaltUpdateNotification) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *SaltUpdateNotification) GetConnId() uint64 {
	if m != nil {
		return m.ConnId
	}
	return 0
}

func (m *SaltUpdateNotification) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *SaltUpdateNotification) GetSalt() int64 {
	if m != nil {
		return m.Salt
	}
	return 0
}

type SessionIdNotify struct {
	ConnId      uint64      `protobuf:"varint,1,opt,name=conn_id,json=connId,proto3" json:"conn_id,omitempty"`
	AuthId      int64       `protobuf:"varint,2,opt,name=auth_id,json=authId,proto3" json:"auth_id,omitempty"`
	SessionId   int64       `protobuf:"varint,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	SeqNum      uint64      `protobuf:"varint,4,opt,name=seq_num,json=seqNum,proto3" json:"seq_num,omitempty"`
	SessionType SessionType `protobuf:"varint,5,opt,name=session_type,json=sessionType,proto3,enum=mtproto.SessionType" json:"session_type,omitempty"`
}

func (m *SessionIdNotify) Reset()         { *m = SessionIdNotify{} }
func (m *SessionIdNotify) String() string { return proto.CompactTextString(m) }
func (*SessionIdNotify) ProtoMessage()    {}
func (*SessionIdNotify) Descriptor() ([]byte, []int) {
	return fileDescriptor_0df3baee6a09be32, []int{8}
}
func (m *SessionIdNotify) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionIdNotify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SessionIdNotify.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SessionIdNotify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionIdNotify.Merge(m, src)
}
func (m *SessionIdNotify) XXX_Size() int {
	return m.Size()
}
func (m *SessionIdNotify) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionIdNotify.DiscardUnknown(m)
}

var xxx_messageInfo_SessionIdNotify proto.InternalMessageInfo

func (m *SessionIdNotify) GetConnId() uint64 {
	if m != nil {
		return m.ConnId
	}
	return 0
}

func (m *SessionIdNotify) GetAuthId() int64 {
	if m != nil {
		return m.AuthId
	}
	return 0
}

func (m *SessionIdNotify) GetSessionId() int64 {
	if m != nil {
		return m.SessionId
	}
	return 0
}

func (m *SessionIdNotify) GetSeqNum() uint64 {
	if m != nil {
		return m.SeqNum
	}
	return 0
}

func (m *SessionIdNotify) GetSessionType() SessionType {
	if m != nil {
		return m.SessionType
	}
	return SessionType_SESSION_UNKNOWN
}

//没传connType过来的，若有connType，返回给gateway
type ConnTypeNotify struct {
	ConnId   uint64 `protobuf:"varint,1,opt,name=conn_id,json=connId,proto3" json:"conn_id,omitempty"`
	ConnType int32  `protobuf:"varint,2,opt,name=conn_type,json=connType,proto3" json:"conn_type,omitempty"`
}

func (m *ConnTypeNotify) Reset()         { *m = ConnTypeNotify{} }
func (m *ConnTypeNotify) String() string { return proto.CompactTextString(m) }
func (*ConnTypeNotify) ProtoMessage()    {}
func (*ConnTypeNotify) Descriptor() ([]byte, []int) {
	return fileDescriptor_0df3baee6a09be32, []int{9}
}
func (m *ConnTypeNotify) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnTypeNotify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnTypeNotify.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnTypeNotify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnTypeNotify.Merge(m, src)
}
func (m *ConnTypeNotify) XXX_Size() int {
	return m.Size()
}
func (m *ConnTypeNotify) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnTypeNotify.DiscardUnknown(m)
}

var xxx_messageInfo_ConnTypeNotify proto.InternalMessageInfo

func (m *ConnTypeNotify) GetConnId() uint64 {
	if m != nil {
		return m.ConnId
	}
	return 0
}

func (m *ConnTypeNotify) GetConnType() int32 {
	if m != nil {
		return m.ConnType
	}
	return 0
}

//通知gateway端、biz服务，某个authId被终止了，需要退出重新登录
// 某种情况（比如logOut)后，需要删除缓存中的AuthKey
type TerminateAuthKeyNotification struct {
	AuthKeyId int64 `protobuf:"varint,1,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
}

func (m *TerminateAuthKeyNotification) Reset()         { *m = TerminateAuthKeyNotification{} }
func (m *TerminateAuthKeyNotification) String() string { return proto.CompactTextString(m) }
func (*TerminateAuthKeyNotification) ProtoMessage()    {}
func (*TerminateAuthKeyNotification) Descriptor() ([]byte, []int) {
	return fileDescriptor_0df3baee6a09be32, []int{10}
}
func (m *TerminateAuthKeyNotification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TerminateAuthKeyNotification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TerminateAuthKeyNotification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TerminateAuthKeyNotification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TerminateAuthKeyNotification.Merge(m, src)
}
func (m *TerminateAuthKeyNotification) XXX_Size() int {
	return m.Size()
}
func (m *TerminateAuthKeyNotification) XXX_DiscardUnknown() {
	xxx_messageInfo_TerminateAuthKeyNotification.DiscardUnknown(m)
}

var xxx_messageInfo_TerminateAuthKeyNotification proto.InternalMessageInfo

func (m *TerminateAuthKeyNotification) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

//db_serer通知biz，要换authId 绑定的userId了
type AuthIdChangeUidNotification struct {
	AuthKeyId int64 `protobuf:"varint,1,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	UserId    int32 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OldUid    int32 `protobuf:"varint,3,opt,name=old_uid,json=oldUid,proto3" json:"old_uid,omitempty"`
}

func (m *AuthIdChangeUidNotification) Reset()         { *m = AuthIdChangeUidNotification{} }
func (m *AuthIdChangeUidNotification) String() string { return proto.CompactTextString(m) }
func (*AuthIdChangeUidNotification) ProtoMessage()    {}
func (*AuthIdChangeUidNotification) Descriptor() ([]byte, []int) {
	return fileDescriptor_0df3baee6a09be32, []int{11}
}
func (m *AuthIdChangeUidNotification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthIdChangeUidNotification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthIdChangeUidNotification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthIdChangeUidNotification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthIdChangeUidNotification.Merge(m, src)
}
func (m *AuthIdChangeUidNotification) XXX_Size() int {
	return m.Size()
}
func (m *AuthIdChangeUidNotification) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthIdChangeUidNotification.DiscardUnknown(m)
}

var xxx_messageInfo_AuthIdChangeUidNotification proto.InternalMessageInfo

func (m *AuthIdChangeUidNotification) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *AuthIdChangeUidNotification) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *AuthIdChangeUidNotification) GetOldUid() int32 {
	if m != nil {
		return m.OldUid
	}
	return 0
}

//服务器之间互相ping，检测有没断线的消息
type ServerPing struct {
	PingId int64 `protobuf:"varint,1,opt,name=ping_id,json=pingId,proto3" json:"ping_id,omitempty"`
}

func (m *ServerPing) Reset()         { *m = ServerPing{} }
func (m *ServerPing) String() string { return proto.CompactTextString(m) }
func (*ServerPing) ProtoMessage()    {}
func (*ServerPing) Descriptor() ([]byte, []int) {
	return fileDescriptor_0df3baee6a09be32, []int{12}
}
func (m *ServerPing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerPing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerPing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerPing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerPing.Merge(m, src)
}
func (m *ServerPing) XXX_Size() int {
	return m.Size()
}
func (m *ServerPing) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerPing.DiscardUnknown(m)
}

var xxx_messageInfo_ServerPing proto.InternalMessageInfo

func (m *ServerPing) GetPingId() int64 {
	if m != nil {
		return m.PingId
	}
	return 0
}

type ServerPong struct {
	PingId int64 `protobuf:"varint,1,opt,name=ping_id,json=pingId,proto3" json:"ping_id,omitempty"`
}

func (m *ServerPong) Reset()         { *m = ServerPong{} }
func (m *ServerPong) String() string { return proto.CompactTextString(m) }
func (*ServerPong) ProtoMessage()    {}
func (*ServerPong) Descriptor() ([]byte, []int) {
	return fileDescriptor_0df3baee6a09be32, []int{13}
}
func (m *ServerPong) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerPong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerPong.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerPong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerPong.Merge(m, src)
}
func (m *ServerPong) XXX_Size() int {
	return m.Size()
}
func (m *ServerPong) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerPong.DiscardUnknown(m)
}

var xxx_messageInfo_ServerPong proto.InternalMessageInfo

func (m *ServerPong) GetPingId() int64 {
	if m != nil {
		return m.PingId
	}
	return 0
}

// PushUpdatesData --> VoidRsp
type PushUpdatesData struct {
	AuthKeyId   int64               `protobuf:"varint,1,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	State       *ClientUpdatesState `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	UpdatesData []byte              `protobuf:"bytes,3,opt,name=updates_data,json=updatesData,proto3" json:"updates_data,omitempty"`
}

func (m *PushUpdatesData) Reset()         { *m = PushUpdatesData{} }
func (m *PushUpdatesData) String() string { return proto.CompactTextString(m) }
func (*PushUpdatesData) ProtoMessage()    {}
func (*PushUpdatesData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0df3baee6a09be32, []int{14}
}
func (m *PushUpdatesData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushUpdatesData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushUpdatesData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushUpdatesData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushUpdatesData.Merge(m, src)
}
func (m *PushUpdatesData) XXX_Size() int {
	return m.Size()
}
func (m *PushUpdatesData) XXX_DiscardUnknown() {
	xxx_messageInfo_PushUpdatesData.DiscardUnknown(m)
}

var xxx_messageInfo_PushUpdatesData proto.InternalMessageInfo

func (m *PushUpdatesData) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *PushUpdatesData) GetState() *ClientUpdatesState {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *PushUpdatesData) GetUpdatesData() []byte {
	if m != nil {
		return m.UpdatesData
	}
	return nil
}

// Updates
// messages_affectedHistory
// messages_affectedMessages
type RpcResultData struct {
	// int32 rpc_result_type = 1;
	Updates          *Updates                    `protobuf:"bytes,2,opt,name=updates,proto3" json:"updates,omitempty"`
	AffectedHistory  *TLMessagesAffectedHistory  `protobuf:"bytes,3,opt,name=affected_history,json=affectedHistory,proto3" json:"affected_history,omitempty"`
	AffectedMessages *TLMessagesAffectedMessages `protobuf:"bytes,4,opt,name=affected_messages,json=affectedMessages,proto3" json:"affected_messages,omitempty"`
}

func (m *RpcResultData) Reset()         { *m = RpcResultData{} }
func (m *RpcResultData) String() string { return proto.CompactTextString(m) }
func (*RpcResultData) ProtoMessage()    {}
func (*RpcResultData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0df3baee6a09be32, []int{15}
}
func (m *RpcResultData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcResultData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcResultData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcResultData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcResultData.Merge(m, src)
}
func (m *RpcResultData) XXX_Size() int {
	return m.Size()
}
func (m *RpcResultData) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcResultData.DiscardUnknown(m)
}

var xxx_messageInfo_RpcResultData proto.InternalMessageInfo

func (m *RpcResultData) GetUpdates() *Updates {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *RpcResultData) GetAffectedHistory() *TLMessagesAffectedHistory {
	if m != nil {
		return m.AffectedHistory
	}
	return nil
}

func (m *RpcResultData) GetAffectedMessages() *TLMessagesAffectedMessages {
	if m != nil {
		return m.AffectedMessages
	}
	return nil
}

///////////////////////////////////////////////////////////////////////
// RPC
type UpdatesRequest struct {
	PushType    SyncType       `protobuf:"varint,1,opt,name=push_type,json=pushType,proto3,enum=mtproto.SyncType" json:"push_type,omitempty"`
	UpdateType  UpdateType     `protobuf:"varint,2,opt,name=update_type,json=updateType,proto3,enum=mtproto.UpdateType" json:"update_type,omitempty"`
	AuthKeyId   int64          `protobuf:"varint,3,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	PushUserId  int32          `protobuf:"varint,4,opt,name=push_user_id,json=pushUserId,proto3" json:"push_user_id,omitempty"`
	ClientMsgId int64          `protobuf:"varint,5,opt,name=client_msg_id,json=clientMsgId,proto3" json:"client_msg_id,omitempty"`
	Updates     *Updates       `protobuf:"bytes,6,opt,name=updates,proto3" json:"updates,omitempty"`
	RpcResult   *RpcResultData `protobuf:"bytes,7,opt,name=rpc_result,json=rpcResult,proto3" json:"rpc_result,omitempty"`
	IsGroup     bool           `protobuf:"varint,8,opt,name=is_group,json=isGroup,proto3" json:"is_group,omitempty"`
	Sot         SyncOnlineType `protobuf:"varint,9,opt,name=sot,proto3,enum=mtproto.SyncOnlineType" json:"sot,omitempty"`
	Layer       int32          `protobuf:"varint,10,opt,name=layer,proto3" json:"layer,omitempty"`
	UidList     []int32        `protobuf:"varint,11,rep,packed,name=uid_list,json=uidList,proto3" json:"uid_list,omitempty"`
	CidList     []int32        `protobuf:"varint,12,rep,packed,name=cid_list,json=cidList,proto3" json:"cid_list,omitempty"`
}

func (m *UpdatesRequest) Reset()         { *m = UpdatesRequest{} }
func (m *UpdatesRequest) String() string { return proto.CompactTextString(m) }
func (*UpdatesRequest) ProtoMessage()    {}
func (*UpdatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0df3baee6a09be32, []int{16}
}
func (m *UpdatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatesRequest.Merge(m, src)
}
func (m *UpdatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatesRequest proto.InternalMessageInfo

func (m *UpdatesRequest) GetPushType() SyncType {
	if m != nil {
		return m.PushType
	}
	return SyncType_SYNC_TYPE_UNKNOWN
}

func (m *UpdatesRequest) GetUpdateType() UpdateType {
	if m != nil {
		return m.UpdateType
	}
	return UpdateType_UPDATE_NORMAL
}

func (m *UpdatesRequest) GetAuthKeyId() int64 {
	if m != nil {
		return m.AuthKeyId
	}
	return 0
}

func (m *UpdatesRequest) GetPushUserId() int32 {
	if m != nil {
		return m.PushUserId
	}
	return 0
}

func (m *UpdatesRequest) GetClientMsgId() int64 {
	if m != nil {
		return m.ClientMsgId
	}
	return 0
}

func (m *UpdatesRequest) GetUpdates() *Updates {
	if m != nil {
		return m.Updates
	}
	return nil
}

func (m *UpdatesRequest) GetRpcResult() *RpcResultData {
	if m != nil {
		return m.RpcResult
	}
	return nil
}

func (m *UpdatesRequest) GetIsGroup() bool {
	if m != nil {
		return m.IsGroup
	}
	return false
}

func (m *UpdatesRequest) GetSot() SyncOnlineType {
	if m != nil {
		return m.Sot
	}
	return SyncOnlineType_ALL
}

func (m *UpdatesRequest) GetLayer() int32 {
	if m != nil {
		return m.Layer
	}
	return 0
}

func (m *UpdatesRequest) GetUidList() []int32 {
	if m != nil {
		return m.UidList
	}
	return nil
}

func (m *UpdatesRequest) GetCidList() []int32 {
	if m != nil {
		return m.CidList
	}
	return nil
}

func init() {
	proto.RegisterEnum("mtproto.SyncType", SyncType_name, SyncType_value)
	proto.RegisterEnum("mtproto.UpdateType", UpdateType_name, UpdateType_value)
	proto.RegisterEnum("mtproto.SyncOnlineType", SyncOnlineType_name, SyncOnlineType_value)
	proto.RegisterEnum("mtproto.SessionType", SessionType_name, SessionType_value)
	proto.RegisterType((*VoidRsp)(nil), "mtproto.VoidRsp")
	proto.RegisterType((*ClientUpdatesState)(nil), "mtproto.ClientUpdatesState")
	proto.RegisterType((*ConnectToServerReq)(nil), "mtproto.ConnectToServerReq")
	proto.RegisterType((*ServerConnectedRsp)(nil), "mtproto.ServerConnectedRsp")
	proto.RegisterType((*ClientCloseNotification)(nil), "mtproto.ClientCloseNotification")
	proto.RegisterType((*AuthInfoRequest)(nil), "mtproto.AuthInfoRequest")
	proto.RegisterType((*AuthInfoResponse)(nil), "mtproto.AuthInfoResponse")
	proto.RegisterType((*SaltUpdateNotification)(nil), "mtproto.SaltUpdateNotification")
	proto.RegisterType((*SessionIdNotify)(nil), "mtproto.SessionIdNotify")
	proto.RegisterType((*ConnTypeNotify)(nil), "mtproto.ConnTypeNotify")
	proto.RegisterType((*TerminateAuthKeyNotification)(nil), "mtproto.TerminateAuthKeyNotification")
	proto.RegisterType((*AuthIdChangeUidNotification)(nil), "mtproto.AuthIdChangeUidNotification")
	proto.RegisterType((*ServerPing)(nil), "mtproto.ServerPing")
	proto.RegisterType((*ServerPong)(nil), "mtproto.ServerPong")
	proto.RegisterType((*PushUpdatesData)(nil), "mtproto.PushUpdatesData")
	proto.RegisterType((*RpcResultData)(nil), "mtproto.RpcResultData")
	proto.RegisterType((*UpdatesRequest)(nil), "mtproto.UpdatesRequest")
}

func init() { proto.RegisterFile("zproto_sync.proto", fileDescriptor_0df3baee6a09be32) }

var fileDescriptor_0df3baee6a09be32 = []byte{
	// 1217 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x4d, 0x6f, 0xdb, 0x46,
	0x13, 0x36, 0x25, 0x4b, 0x94, 0x46, 0x8a, 0x45, 0x6f, 0x9c, 0x48, 0x89, 0xdf, 0x57, 0x75, 0x89,
	0x06, 0x48, 0x7d, 0x30, 0x10, 0xb5, 0x45, 0x2f, 0x69, 0x01, 0x55, 0x66, 0x62, 0x22, 0x12, 0x29,
	0x2c, 0xa5, 0xa6, 0x3e, 0x11, 0x2c, 0xb9, 0xb6, 0x88, 0x4a, 0x24, 0xa5, 0x5d, 0x16, 0x50, 0x4f,
	0x3d, 0x14, 0xe8, 0xb5, 0xff, 0xa5, 0xed, 0x7f, 0xe8, 0xad, 0xe9, 0xad, 0xc7, 0x20, 0xf9, 0x23,
	0xc5, 0xee, 0x92, 0xfa, 0x4a, 0x13, 0x37, 0x27, 0xed, 0x3c, 0xf3, 0xcc, 0xc7, 0xce, 0xcc, 0x0e,
	0x05, 0x87, 0x3f, 0x24, 0x8b, 0x98, 0xc5, 0x2e, 0x5d, 0x46, 0xfe, 0x99, 0x38, 0x22, 0x75, 0xc6,
	0xc4, 0xe1, 0xfe, 0x11, 0xf5, 0x27, 0x64, 0xe6, 0x9d, 0xb1, 0xe9, 0xd9, 0x5a, 0xad, 0x57, 0x41,
	0xfd, 0x3a, 0x0e, 0x03, 0x4c, 0x13, 0xfd, 0x77, 0x05, 0x50, 0x6f, 0x1a, 0x92, 0x88, 0x8d, 0x93,
	0xc0, 0x63, 0x84, 0x3a, 0xcc, 0x63, 0x04, 0x69, 0x50, 0x4c, 0x18, 0x6d, 0x29, 0x27, 0xca, 0xc3,
	0x12, 0xe6, 0x47, 0x74, 0x0c, 0xd5, 0x84, 0x51, 0xd7, 0x8f, 0xd3, 0x88, 0xb5, 0x0a, 0x02, 0xaf,
	0x24, 0x8c, 0xf6, 0xb8, 0xcc, 0xe9, 0x73, 0x46, 0x5b, 0x45, 0x49, 0x9f, 0x4b, 0xfa, 0x7c, 0x45,
	0xdf, 0x97, 0xf4, 0xf9, 0x06, 0x9d, 0x92, 0x79, 0xab, 0x24, 0xe9, 0x94, 0xcc, 0x39, 0x9d, 0x92,
	0xb9, 0x4b, 0x99, 0xb7, 0x60, 0xad, 0xb2, 0xa4, 0x53, 0x32, 0x77, 0xb8, 0x8c, 0x10, 0xec, 0xf3,
	0xd4, 0x5a, 0xaa, 0xc0, 0xc5, 0x59, 0x3f, 0x02, 0xd4, 0x8b, 0xa3, 0x88, 0xf8, 0x6c, 0x14, 0x3b,
	0x64, 0xf1, 0x3d, 0x59, 0x60, 0x32, 0xd7, 0x31, 0x20, 0x29, 0x64, 0x3a, 0xc2, 0xef, 0x28, 0x9d,
	0x73, 0xd4, 0x0d, 0x83, 0xec, 0x4a, 0x15, 0x09, 0x98, 0x01, 0xfa, 0x00, 0x6a, 0x99, 0x32, 0xf2,
	0x66, 0x44, 0xdc, 0xac, 0x8a, 0x41, 0x42, 0x96, 0x37, 0x23, 0x3a, 0x86, 0xa6, 0x2c, 0x50, 0x6f,
	0x1a, 0x53, 0x62, 0xc5, 0x2c, 0xbc, 0x0a, 0x7d, 0x8f, 0x85, 0x71, 0x84, 0x9a, 0xa0, 0xfa, 0x71,
	0x14, 0xe5, 0x6e, 0xf7, 0x71, 0x99, 0x8b, 0x66, 0x80, 0xda, 0x50, 0xf3, 0x52, 0x36, 0x71, 0xbf,
	0x23, 0x4b, 0xae, 0xe4, 0x4e, 0x8b, 0xb8, 0xca, 0xa1, 0x67, 0x64, 0x69, 0x06, 0xfa, 0x23, 0x68,
	0x74, 0x53, 0x36, 0x31, 0xa3, 0xab, 0x18, 0x93, 0x79, 0x4a, 0x28, 0xdb, 0x35, 0x51, 0x76, 0x4d,
	0xae, 0x40, 0x5b, 0x9b, 0xd0, 0x24, 0x8e, 0x28, 0xb9, 0xc9, 0x86, 0xe7, 0x97, 0x52, 0x79, 0x6d,
	0xd9, 0xb1, 0x32, 0x17, 0xcd, 0x00, 0xdd, 0x83, 0x4a, 0x6e, 0x28, 0x9a, 0x56, 0xc7, 0x6a, 0x66,
	0xa5, 0xff, 0xa4, 0xc0, 0x5d, 0xc7, 0x9b, 0x66, 0xe3, 0xb0, 0x75, 0xdd, 0xff, 0x10, 0x2e, 0x2f,
	0x47, 0x61, 0xab, 0x1c, 0xff, 0x07, 0xa0, 0x84, 0xd2, 0x30, 0x16, 0xba, 0xa2, 0xb4, 0xcb, 0x10,
	0x33, 0xe0, 0xfd, 0xa5, 0xde, 0x54, 0x8e, 0x49, 0x11, 0x8b, 0xb3, 0xfe, 0x9b, 0x02, 0x0d, 0x27,
	0x67, 0x88, 0x2c, 0x96, 0x6f, 0x2f, 0x77, 0x13, 0x44, 0xfa, 0xeb, 0x52, 0x97, 0xb9, 0x78, 0x73,
	0xe0, 0x26, 0xa8, 0x7c, 0xea, 0xa2, 0x74, 0x26, 0x62, 0xef, 0xe3, 0x32, 0x25, 0x73, 0x2b, 0x9d,
	0xa1, 0xcf, 0xa1, 0x9e, 0xdb, 0xb1, 0x65, 0x42, 0xc4, 0xa4, 0x1e, 0x74, 0x8e, 0xce, 0xb2, 0x67,
	0x75, 0x96, 0x65, 0x36, 0x5a, 0x26, 0x04, 0xd7, 0xe8, 0x5a, 0xd0, 0x9f, 0xc0, 0x01, 0x1f, 0x3d,
	0x7e, 0xbe, 0x29, 0xe9, 0x63, 0xa8, 0x0a, 0x85, 0x08, 0x90, 0x3d, 0x28, 0x3f, 0xb3, 0xd5, 0xbf,
	0x84, 0xff, 0x8d, 0xc8, 0x62, 0x16, 0x46, 0x1e, 0x23, 0x5d, 0x59, 0xe0, 0xf7, 0x69, 0x85, 0x1e,
	0xc3, 0xb1, 0x98, 0x96, 0xa0, 0x37, 0xf1, 0xa2, 0x6b, 0x32, 0x0e, 0x83, 0xf7, 0xed, 0xe4, 0xbf,
	0x0f, 0x4e, 0x13, 0xd4, 0x78, 0x1a, 0xb8, 0x69, 0x56, 0xcd, 0x12, 0x2e, 0xc7, 0xd3, 0x60, 0x1c,
	0x06, 0xfa, 0x03, 0x00, 0xf9, 0xf2, 0x86, 0x61, 0x74, 0xcd, 0x69, 0x49, 0x18, 0x5d, 0xaf, 0x7d,
	0x97, 0xb9, 0x68, 0x6e, 0xd2, 0xe2, 0x77, 0xd1, 0x7e, 0x56, 0xa0, 0x31, 0x4c, 0xe9, 0x24, 0xdb,
	0x49, 0xe7, 0x1e, 0xf3, 0x6e, 0xcc, 0xf9, 0x11, 0x94, 0x28, 0xdf, 0x5d, 0x22, 0xe3, 0x5a, 0xe7,
	0x78, 0xd5, 0xac, 0x37, 0xd7, 0x1b, 0x96, 0x4c, 0xf4, 0x21, 0xd4, 0x53, 0x09, 0xbb, 0x81, 0xc7,
	0xbc, 0xec, 0x29, 0xd4, 0xd2, 0x75, 0x54, 0xfd, 0xa5, 0x02, 0xb7, 0x70, 0xe2, 0x63, 0x42, 0xd3,
	0x29, 0x13, 0x79, 0x9c, 0x82, 0x9a, 0x11, 0xb2, 0x48, 0xda, 0x2a, 0x52, 0x16, 0x03, 0xe7, 0x04,
	0x64, 0x83, 0xe6, 0x5d, 0x5d, 0x89, 0x45, 0xe4, 0x4e, 0x42, 0xca, 0xe2, 0x85, 0x7c, 0x6f, 0xb5,
	0xce, 0x47, 0x2b, 0xa3, 0x51, 0xdf, 0x9d, 0x11, 0x4a, 0xbd, 0x6b, 0x42, 0xdd, 0x9c, 0x7c, 0x21,
	0xb9, 0xb8, 0xb1, 0x03, 0x20, 0x0c, 0x87, 0x2b, 0x87, 0xb9, 0x95, 0x98, 0xdd, 0x5a, 0xe7, 0xc1,
	0x3b, 0x3d, 0x0e, 0x32, 0x00, 0x6b, 0xbb, 0x88, 0xfe, 0x57, 0x11, 0x0e, 0xf2, 0xcc, 0xb3, 0x65,
	0x74, 0x06, 0xd5, 0x24, 0xa5, 0x13, 0x39, 0x9b, 0x8a, 0x18, 0xfe, 0xc3, 0xf5, 0xf0, 0x2f, 0x23,
	0x5f, 0x4c, 0x7e, 0x85, 0x73, 0xf8, 0x09, 0x7d, 0x0a, 0x59, 0xd1, 0xd6, 0xd3, 0x7c, 0xd0, 0xb9,
	0xbd, 0x53, 0x17, 0x61, 0x03, 0xe9, 0xea, 0xbc, 0xdb, 0xd1, 0xe2, 0x6e, 0x47, 0x4f, 0xa0, 0x2e,
	0xb2, 0xc8, 0x47, 0x51, 0x7e, 0x46, 0x80, 0x63, 0x63, 0x39, 0x8e, 0x3a, 0xdc, 0xf2, 0x45, 0x77,
	0xdd, 0x19, 0x15, 0x63, 0x54, 0x12, 0x3e, 0x6a, 0x12, 0x1c, 0xd0, 0x6b, 0x33, 0xd8, 0xec, 0x57,
	0xf9, 0xa6, 0x7e, 0x7d, 0x06, 0xb0, 0x48, 0x7c, 0x77, 0x21, 0xba, 0x2d, 0xbe, 0x37, 0xb5, 0xce,
	0xdd, 0x15, 0x7d, 0x6b, 0x0e, 0x70, 0x75, 0x91, 0x8b, 0x7c, 0x9d, 0x86, 0xd4, 0xbd, 0x5e, 0xc4,
	0x69, 0xd2, 0xaa, 0x9c, 0x28, 0x0f, 0x2b, 0x58, 0x0d, 0xe9, 0x53, 0x2e, 0xa2, 0x8f, 0xa1, 0x48,
	0x63, 0xd6, 0xaa, 0x8a, 0x8a, 0x34, 0xb7, 0x6a, 0x68, 0x47, 0xd3, 0x30, 0x92, 0x55, 0xe1, 0x1c,
	0x74, 0x04, 0xa5, 0xa9, 0xb7, 0x24, 0x8b, 0x16, 0x88, 0x7b, 0x4a, 0x81, 0xfb, 0x4e, 0xc3, 0xc0,
	0x9d, 0x86, 0x94, 0xb5, 0x6a, 0x27, 0xc5, 0x87, 0x25, 0xac, 0xa6, 0x61, 0xd0, 0x0f, 0xa9, 0x08,
	0xeb, 0xe7, 0xaa, 0xba, 0x54, 0xf9, 0x52, 0x75, 0xfa, 0xa3, 0x02, 0x95, 0xbc, 0x4f, 0xe8, 0x0e,
	0x1c, 0x3a, 0x97, 0x56, 0xcf, 0x1d, 0x5d, 0x0e, 0x0d, 0x77, 0x6c, 0x3d, 0xb3, 0xec, 0xe7, 0x96,
	0xb6, 0x87, 0x10, 0x1c, 0x6c, 0xc0, 0x8e, 0x81, 0x35, 0x05, 0xb5, 0xe0, 0x68, 0x1b, 0x73, 0x2d,
	0x7b, 0x34, 0x30, 0xb4, 0xc2, 0x8e, 0x13, 0xae, 0x19, 0x18, 0x5a, 0x71, 0xdb, 0x00, 0x0f, 0x7b,
	0x2e, 0x36, 0x9c, 0x71, 0x7f, 0xa4, 0xed, 0x9f, 0x1a, 0x00, 0xeb, 0xbe, 0xa3, 0x43, 0xb8, 0x35,
	0x1e, 0x9e, 0x77, 0x47, 0x86, 0x6b, 0xd9, 0x78, 0xd0, 0xed, 0x6b, 0x7b, 0x48, 0x83, 0x7a, 0x06,
	0x0d, 0x2f, 0x6c, 0xcb, 0xd0, 0x14, 0x9e, 0x51, 0x86, 0x18, 0x56, 0x0f, 0x5f, 0x0e, 0x47, 0x5a,
	0xe1, 0xf4, 0x31, 0x1c, 0x6c, 0x17, 0x0b, 0xa9, 0x50, 0xec, 0xf6, 0xb9, 0x83, 0x06, 0xd4, 0x6c,
	0xab, 0x7f, 0xe9, 0xda, 0x56, 0xdf, 0x14, 0xf6, 0x1a, 0xd4, 0x25, 0xf0, 0xe4, 0x89, 0x40, 0x0a,
	0xa7, 0xbf, 0x2a, 0x50, 0xdb, 0x58, 0xd6, 0xe8, 0x36, 0x34, 0x1c, 0xc3, 0x71, 0x4c, 0xdb, 0xda,
	0x28, 0xc4, 0x06, 0xf8, 0xd4, 0xb0, 0x0c, 0x6c, 0xf6, 0x34, 0x05, 0x1d, 0x81, 0x96, 0x83, 0xe7,
	0xf6, 0x73, 0xab, 0x6f, 0x77, 0xcf, 0xb5, 0x82, 0xa8, 0x59, 0x6e, 0x3f, 0x14, 0x58, 0x91, 0x47,
	0xcd, 0xb1, 0xe1, 0xd8, 0xb9, 0xd0, 0xf6, 0x37, 0x91, 0x91, 0x31, 0x18, 0x6a, 0x25, 0x7e, 0xfd,
	0x15, 0x07, 0xdb, 0xdf, 0x5c, 0x6a, 0x65, 0x74, 0x0f, 0xee, 0xec, 0x44, 0x75, 0x07, 0xc6, 0xb9,
	0xd9, 0xd5, 0xd4, 0xce, 0x9f, 0x0a, 0xa8, 0x78, 0xd8, 0xe3, 0xf7, 0x46, 0x4f, 0xa1, 0xc1, 0x7f,
	0x37, 0x37, 0x61, 0xf3, 0x8d, 0x01, 0x96, 0xcf, 0xf6, 0xfe, 0xbb, 0x76, 0x1e, 0x7a, 0xfc, 0xe6,
	0x4a, 0x7d, 0xab, 0xa3, 0xf5, 0x13, 0xc9, 0xfe, 0x27, 0xa2, 0x2f, 0x40, 0xdb, 0xb1, 0xee, 0xbc,
	0x87, 0xf9, 0x57, 0xf7, 0xff, 0x78, 0xd5, 0x56, 0x5e, 0xbc, 0x6a, 0x2b, 0x2f, 0x5f, 0xb5, 0x95,
	0x5f, 0x5e, 0xb7, 0xf7, 0x5e, 0xbc, 0x6e, 0xef, 0xfd, 0xfd, 0xba, 0xbd, 0x77, 0x51, 0xf8, 0xb6,
	0x2c, 0xa8, 0x9f, 0xfc, 0x13, 0x00, 0x00, 0xff, 0xff, 0xd4, 0xb8, 0x17, 0xa3, 0xc8, 0x0a, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RPCSyncClient is the client API for RPCSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCSyncClient interface {
	SyncUpdatesData(ctx context.Context, in *UpdatesRequest, opts ...grpc.CallOption) (*ClientUpdatesState, error)
	PushUpdatesData(ctx context.Context, in *UpdatesRequest, opts ...grpc.CallOption) (*VoidRsp, error)
	PushUpdatesData2(ctx context.Context, in *UpdatesRequest, opts ...grpc.CallOption) (*VoidRsp, error)
}

type rPCSyncClient struct {
	cc *grpc.ClientConn
}

func NewRPCSyncClient(cc *grpc.ClientConn) RPCSyncClient {
	return &rPCSyncClient{cc}
}

func (c *rPCSyncClient) SyncUpdatesData(ctx context.Context, in *UpdatesRequest, opts ...grpc.CallOption) (*ClientUpdatesState, error) {
	out := new(ClientUpdatesState)
	err := c.cc.Invoke(ctx, "/mtproto.RPCSync/SyncUpdatesData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSyncClient) PushUpdatesData(ctx context.Context, in *UpdatesRequest, opts ...grpc.CallOption) (*VoidRsp, error) {
	out := new(VoidRsp)
	err := c.cc.Invoke(ctx, "/mtproto.RPCSync/PushUpdatesData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCSyncClient) PushUpdatesData2(ctx context.Context, in *UpdatesRequest, opts ...grpc.CallOption) (*VoidRsp, error) {
	out := new(VoidRsp)
	err := c.cc.Invoke(ctx, "/mtproto.RPCSync/PushUpdatesData2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCSyncServer is the server API for RPCSync service.
type RPCSyncServer interface {
	SyncUpdatesData(context.Context, *UpdatesRequest) (*ClientUpdatesState, error)
	PushUpdatesData(context.Context, *UpdatesRequest) (*VoidRsp, error)
	PushUpdatesData2(context.Context, *UpdatesRequest) (*VoidRsp, error)
}

// UnimplementedRPCSyncServer can be embedded to have forward compatible implementations.
type UnimplementedRPCSyncServer struct {
}

func (*UnimplementedRPCSyncServer) SyncUpdatesData(ctx context.Context, req *UpdatesRequest) (*ClientUpdatesState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncUpdatesData not implemented")
}
func (*UnimplementedRPCSyncServer) PushUpdatesData(ctx context.Context, req *UpdatesRequest) (*VoidRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushUpdatesData not implemented")
}
func (*UnimplementedRPCSyncServer) PushUpdatesData2(ctx context.Context, req *UpdatesRequest) (*VoidRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushUpdatesData2 not implemented")
}

func RegisterRPCSyncServer(s *grpc.Server, srv RPCSyncServer) {
	s.RegisterService(&_RPCSync_serviceDesc, srv)
}

func _RPCSync_SyncUpdatesData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSyncServer).SyncUpdatesData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCSync/SyncUpdatesData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSyncServer).SyncUpdatesData(ctx, req.(*UpdatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSync_PushUpdatesData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSyncServer).PushUpdatesData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCSync/PushUpdatesData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSyncServer).PushUpdatesData(ctx, req.(*UpdatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCSync_PushUpdatesData2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSyncServer).PushUpdatesData2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCSync/PushUpdatesData2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSyncServer).PushUpdatesData2(ctx, req.(*UpdatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCSync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCSync",
	HandlerType: (*RPCSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SyncUpdatesData",
			Handler:    _RPCSync_SyncUpdatesData_Handler,
		},
		{
			MethodName: "PushUpdatesData",
			Handler:    _RPCSync_PushUpdatesData_Handler,
		},
		{
			MethodName: "PushUpdatesData2",
			Handler:    _RPCSync_PushUpdatesData2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zproto_sync.proto",
}

func (m *VoidRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoidRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoidRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ClientUpdatesState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientUpdatesState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientUpdatesState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Date != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x38
	}
	if m.SeqStart != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.SeqStart))
		i--
		dAtA[i] = 0x30
	}
	if m.Seq != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x28
	}
	if m.QtsCount != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.QtsCount))
		i--
		dAtA[i] = 0x20
	}
	if m.Qts != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.Qts))
		i--
		dAtA[i] = 0x18
	}
	if m.PtsCount != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.PtsCount))
		i--
		dAtA[i] = 0x10
	}
	if m.Pts != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.Pts))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConnectToServerReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectToServerReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectToServerReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ServerConnectedRsp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerConnectedRsp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerConnectedRsp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServerName) > 0 {
		i -= len(m.ServerName)
		copy(dAtA[i:], m.ServerName)
		i = encodeVarintZprotoSync(dAtA, i, uint64(len(m.ServerName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ServerId != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.ServerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClientCloseNotification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientCloseNotification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientCloseNotification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuthKeyId != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x10
	}
	if m.ConnId != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.ConnId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AuthInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuthKeyId != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AuthInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuthKey) > 0 {
		i -= len(m.AuthKey)
		copy(dAtA[i:], m.AuthKey)
		i = encodeVarintZprotoSync(dAtA, i, uint64(len(m.AuthKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.UserId != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SaltUpdateNotification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaltUpdateNotification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaltUpdateNotification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Salt != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.Salt))
		i--
		dAtA[i] = 0x20
	}
	if m.SessionId != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x18
	}
	if m.ConnId != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.ConnId))
		i--
		dAtA[i] = 0x10
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SessionIdNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionIdNotify) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionIdNotify) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SessionType != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.SessionType))
		i--
		dAtA[i] = 0x28
	}
	if m.SeqNum != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.SeqNum))
		i--
		dAtA[i] = 0x20
	}
	if m.SessionId != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.SessionId))
		i--
		dAtA[i] = 0x18
	}
	if m.AuthId != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.AuthId))
		i--
		dAtA[i] = 0x10
	}
	if m.ConnId != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.ConnId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConnTypeNotify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnTypeNotify) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnTypeNotify) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConnType != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.ConnType))
		i--
		dAtA[i] = 0x10
	}
	if m.ConnId != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.ConnId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TerminateAuthKeyNotification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TerminateAuthKeyNotification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TerminateAuthKeyNotification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuthKeyId != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AuthIdChangeUidNotification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthIdChangeUidNotification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthIdChangeUidNotification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OldUid != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.OldUid))
		i--
		dAtA[i] = 0x18
	}
	if m.UserId != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x10
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ServerPing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerPing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerPing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PingId != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.PingId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ServerPong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerPong) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerPong) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PingId != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.PingId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PushUpdatesData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushUpdatesData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushUpdatesData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UpdatesData) > 0 {
		i -= len(m.UpdatesData)
		copy(dAtA[i:], m.UpdatesData)
		i = encodeVarintZprotoSync(dAtA, i, uint64(len(m.UpdatesData)))
		i--
		dAtA[i] = 0x1a
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZprotoSync(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RpcResultData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcResultData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcResultData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AffectedMessages != nil {
		{
			size, err := m.AffectedMessages.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZprotoSync(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.AffectedHistory != nil {
		{
			size, err := m.AffectedHistory.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZprotoSync(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Updates != nil {
		{
			size, err := m.Updates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZprotoSync(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *UpdatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CidList) > 0 {
		dAtA6 := make([]byte, len(m.CidList)*10)
		var j5 int
		for _, num1 := range m.CidList {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintZprotoSync(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x62
	}
	if len(m.UidList) > 0 {
		dAtA8 := make([]byte, len(m.UidList)*10)
		var j7 int
		for _, num1 := range m.UidList {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintZprotoSync(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x5a
	}
	if m.Layer != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.Layer))
		i--
		dAtA[i] = 0x50
	}
	if m.Sot != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.Sot))
		i--
		dAtA[i] = 0x48
	}
	if m.IsGroup {
		i--
		if m.IsGroup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.RpcResult != nil {
		{
			size, err := m.RpcResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZprotoSync(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Updates != nil {
		{
			size, err := m.Updates.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintZprotoSync(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.ClientMsgId != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.ClientMsgId))
		i--
		dAtA[i] = 0x28
	}
	if m.PushUserId != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.PushUserId))
		i--
		dAtA[i] = 0x20
	}
	if m.AuthKeyId != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.AuthKeyId))
		i--
		dAtA[i] = 0x18
	}
	if m.UpdateType != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.UpdateType))
		i--
		dAtA[i] = 0x10
	}
	if m.PushType != 0 {
		i = encodeVarintZprotoSync(dAtA, i, uint64(m.PushType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintZprotoSync(dAtA []byte, offset int, v uint64) int {
	offset -= sovZprotoSync(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VoidRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ClientUpdatesState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pts != 0 {
		n += 1 + sovZprotoSync(uint64(m.Pts))
	}
	if m.PtsCount != 0 {
		n += 1 + sovZprotoSync(uint64(m.PtsCount))
	}
	if m.Qts != 0 {
		n += 1 + sovZprotoSync(uint64(m.Qts))
	}
	if m.QtsCount != 0 {
		n += 1 + sovZprotoSync(uint64(m.QtsCount))
	}
	if m.Seq != 0 {
		n += 1 + sovZprotoSync(uint64(m.Seq))
	}
	if m.SeqStart != 0 {
		n += 1 + sovZprotoSync(uint64(m.SeqStart))
	}
	if m.Date != 0 {
		n += 1 + sovZprotoSync(uint64(m.Date))
	}
	return n
}

func (m *ConnectToServerReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ServerConnectedRsp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServerId != 0 {
		n += 1 + sovZprotoSync(uint64(m.ServerId))
	}
	l = len(m.ServerName)
	if l > 0 {
		n += 1 + l + sovZprotoSync(uint64(l))
	}
	return n
}

func (m *ClientCloseNotification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConnId != 0 {
		n += 1 + sovZprotoSync(uint64(m.ConnId))
	}
	if m.AuthKeyId != 0 {
		n += 1 + sovZprotoSync(uint64(m.AuthKeyId))
	}
	return n
}

func (m *AuthInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthKeyId != 0 {
		n += 1 + sovZprotoSync(uint64(m.AuthKeyId))
	}
	return n
}

func (m *AuthInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthKeyId != 0 {
		n += 1 + sovZprotoSync(uint64(m.AuthKeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovZprotoSync(uint64(m.UserId))
	}
	l = len(m.AuthKey)
	if l > 0 {
		n += 1 + l + sovZprotoSync(uint64(l))
	}
	return n
}

func (m *SaltUpdateNotification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthKeyId != 0 {
		n += 1 + sovZprotoSync(uint64(m.AuthKeyId))
	}
	if m.ConnId != 0 {
		n += 1 + sovZprotoSync(uint64(m.ConnId))
	}
	if m.SessionId != 0 {
		n += 1 + sovZprotoSync(uint64(m.SessionId))
	}
	if m.Salt != 0 {
		n += 1 + sovZprotoSync(uint64(m.Salt))
	}
	return n
}

func (m *SessionIdNotify) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConnId != 0 {
		n += 1 + sovZprotoSync(uint64(m.ConnId))
	}
	if m.AuthId != 0 {
		n += 1 + sovZprotoSync(uint64(m.AuthId))
	}
	if m.SessionId != 0 {
		n += 1 + sovZprotoSync(uint64(m.SessionId))
	}
	if m.SeqNum != 0 {
		n += 1 + sovZprotoSync(uint64(m.SeqNum))
	}
	if m.SessionType != 0 {
		n += 1 + sovZprotoSync(uint64(m.SessionType))
	}
	return n
}

func (m *ConnTypeNotify) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConnId != 0 {
		n += 1 + sovZprotoSync(uint64(m.ConnId))
	}
	if m.ConnType != 0 {
		n += 1 + sovZprotoSync(uint64(m.ConnType))
	}
	return n
}

func (m *TerminateAuthKeyNotification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthKeyId != 0 {
		n += 1 + sovZprotoSync(uint64(m.AuthKeyId))
	}
	return n
}

func (m *AuthIdChangeUidNotification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthKeyId != 0 {
		n += 1 + sovZprotoSync(uint64(m.AuthKeyId))
	}
	if m.UserId != 0 {
		n += 1 + sovZprotoSync(uint64(m.UserId))
	}
	if m.OldUid != 0 {
		n += 1 + sovZprotoSync(uint64(m.OldUid))
	}
	return n
}

func (m *ServerPing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PingId != 0 {
		n += 1 + sovZprotoSync(uint64(m.PingId))
	}
	return n
}

func (m *ServerPong) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PingId != 0 {
		n += 1 + sovZprotoSync(uint64(m.PingId))
	}
	return n
}

func (m *PushUpdatesData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthKeyId != 0 {
		n += 1 + sovZprotoSync(uint64(m.AuthKeyId))
	}
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovZprotoSync(uint64(l))
	}
	l = len(m.UpdatesData)
	if l > 0 {
		n += 1 + l + sovZprotoSync(uint64(l))
	}
	return n
}

func (m *RpcResultData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Updates != nil {
		l = m.Updates.Size()
		n += 1 + l + sovZprotoSync(uint64(l))
	}
	if m.AffectedHistory != nil {
		l = m.AffectedHistory.Size()
		n += 1 + l + sovZprotoSync(uint64(l))
	}
	if m.AffectedMessages != nil {
		l = m.AffectedMessages.Size()
		n += 1 + l + sovZprotoSync(uint64(l))
	}
	return n
}

func (m *UpdatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PushType != 0 {
		n += 1 + sovZprotoSync(uint64(m.PushType))
	}
	if m.UpdateType != 0 {
		n += 1 + sovZprotoSync(uint64(m.UpdateType))
	}
	if m.AuthKeyId != 0 {
		n += 1 + sovZprotoSync(uint64(m.AuthKeyId))
	}
	if m.PushUserId != 0 {
		n += 1 + sovZprotoSync(uint64(m.PushUserId))
	}
	if m.ClientMsgId != 0 {
		n += 1 + sovZprotoSync(uint64(m.ClientMsgId))
	}
	if m.Updates != nil {
		l = m.Updates.Size()
		n += 1 + l + sovZprotoSync(uint64(l))
	}
	if m.RpcResult != nil {
		l = m.RpcResult.Size()
		n += 1 + l + sovZprotoSync(uint64(l))
	}
	if m.IsGroup {
		n += 2
	}
	if m.Sot != 0 {
		n += 1 + sovZprotoSync(uint64(m.Sot))
	}
	if m.Layer != 0 {
		n += 1 + sovZprotoSync(uint64(m.Layer))
	}
	if len(m.UidList) > 0 {
		l = 0
		for _, e := range m.UidList {
			l += sovZprotoSync(uint64(e))
		}
		n += 1 + sovZprotoSync(uint64(l)) + l
	}
	if len(m.CidList) > 0 {
		l = 0
		for _, e := range m.CidList {
			l += sovZprotoSync(uint64(e))
		}
		n += 1 + sovZprotoSync(uint64(l)) + l
	}
	return n
}

func sovZprotoSync(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozZprotoSync(x uint64) (n int) {
	return sovZprotoSync(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VoidRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZprotoSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoidRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoidRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipZprotoSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientUpdatesState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZprotoSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientUpdatesState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientUpdatesState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtsCount", wireType)
			}
			m.PtsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PtsCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qts", wireType)
			}
			m.Qts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QtsCount", wireType)
			}
			m.QtsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QtsCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqStart", wireType)
			}
			m.SeqStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqStart |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZprotoSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectToServerReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZprotoSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectToServerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectToServerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipZprotoSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerConnectedRsp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZprotoSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerConnectedRsp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerConnectedRsp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerId", wireType)
			}
			m.ServerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZprotoSync
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZprotoSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientCloseNotification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZprotoSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientCloseNotification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientCloseNotification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnId", wireType)
			}
			m.ConnId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZprotoSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZprotoSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZprotoSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZprotoSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZprotoSync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthKey = append(m.AuthKey[:0], dAtA[iNdEx:postIndex]...)
			if m.AuthKey == nil {
				m.AuthKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZprotoSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaltUpdateNotification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZprotoSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaltUpdateNotification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaltUpdateNotification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnId", wireType)
			}
			m.ConnId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			m.Salt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Salt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZprotoSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SessionIdNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZprotoSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionIdNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionIdNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnId", wireType)
			}
			m.ConnId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthId", wireType)
			}
			m.AuthId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			m.SessionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqNum", wireType)
			}
			m.SeqNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionType", wireType)
			}
			m.SessionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SessionType |= SessionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZprotoSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnTypeNotify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZprotoSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnTypeNotify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnTypeNotify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnId", wireType)
			}
			m.ConnId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnType", wireType)
			}
			m.ConnType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZprotoSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TerminateAuthKeyNotification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZprotoSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TerminateAuthKeyNotification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TerminateAuthKeyNotification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZprotoSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthIdChangeUidNotification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZprotoSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthIdChangeUidNotification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthIdChangeUidNotification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldUid", wireType)
			}
			m.OldUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldUid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZprotoSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerPing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZprotoSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerPing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerPing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingId", wireType)
			}
			m.PingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PingId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZprotoSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerPong) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZprotoSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerPong: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerPong: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingId", wireType)
			}
			m.PingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PingId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZprotoSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushUpdatesData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZprotoSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushUpdatesData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushUpdatesData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZprotoSync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &ClientUpdatesState{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatesData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZprotoSync
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatesData = append(m.UpdatesData[:0], dAtA[iNdEx:postIndex]...)
			if m.UpdatesData == nil {
				m.UpdatesData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZprotoSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcResultData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZprotoSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RpcResultData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RpcResultData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZprotoSync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Updates == nil {
				m.Updates = &Updates{}
			}
			if err := m.Updates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffectedHistory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZprotoSync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AffectedHistory == nil {
				m.AffectedHistory = &TLMessagesAffectedHistory{}
			}
			if err := m.AffectedHistory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffectedMessages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZprotoSync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AffectedMessages == nil {
				m.AffectedMessages = &TLMessagesAffectedMessages{}
			}
			if err := m.AffectedMessages.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZprotoSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZprotoSync
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushType", wireType)
			}
			m.PushType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PushType |= SyncType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateType", wireType)
			}
			m.UpdateType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateType |= UpdateType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthKeyId", wireType)
			}
			m.AuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushUserId", wireType)
			}
			m.PushUserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PushUserId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientMsgId", wireType)
			}
			m.ClientMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientMsgId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZprotoSync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Updates == nil {
				m.Updates = &Updates{}
			}
			if err := m.Updates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RpcResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZprotoSync
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RpcResult == nil {
				m.RpcResult = &RpcResultData{}
			}
			if err := m.RpcResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGroup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGroup = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sot", wireType)
			}
			m.Sot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sot |= SyncOnlineType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Layer", wireType)
			}
			m.Layer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Layer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZprotoSync
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UidList = append(m.UidList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZprotoSync
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthZprotoSync
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthZprotoSync
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UidList) == 0 {
					m.UidList = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowZprotoSync
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UidList = append(m.UidList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UidList", wireType)
			}
		case 12:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZprotoSync
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CidList = append(m.CidList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZprotoSync
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthZprotoSync
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthZprotoSync
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CidList) == 0 {
					m.CidList = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowZprotoSync
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CidList = append(m.CidList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CidList", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZprotoSync(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZprotoSync
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZprotoSync(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZprotoSync
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZprotoSync
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthZprotoSync
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupZprotoSync
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthZprotoSync
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthZprotoSync        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZprotoSync          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupZprotoSync = fmt.Errorf("proto: unexpected end of group")
)
