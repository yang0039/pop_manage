// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: schema.tl.sync_service.proto

package mtproto

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

///////////////////////////////////////////////////////////////////////////////
// invokeAfterMsg#cb9f372d {X:Type} msg_id:long query:!X = X;
type TLInvokeAfterMsg struct {
	MsgId int64  `protobuf:"varint,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	Query []byte `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *TLInvokeAfterMsg) Reset()         { *m = TLInvokeAfterMsg{} }
func (m *TLInvokeAfterMsg) String() string { return proto.CompactTextString(m) }
func (*TLInvokeAfterMsg) ProtoMessage()    {}
func (*TLInvokeAfterMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{0}
}
func (m *TLInvokeAfterMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLInvokeAfterMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLInvokeAfterMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLInvokeAfterMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLInvokeAfterMsg.Merge(m, src)
}
func (m *TLInvokeAfterMsg) XXX_Size() int {
	return m.Size()
}
func (m *TLInvokeAfterMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_TLInvokeAfterMsg.DiscardUnknown(m)
}

var xxx_messageInfo_TLInvokeAfterMsg proto.InternalMessageInfo

func (m *TLInvokeAfterMsg) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *TLInvokeAfterMsg) GetQuery() []byte {
	if m != nil {
		return m.Query
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// invokeAfterMsgs#3dc4b4f0 {X:Type} msg_ids:Vector<long> query:!X = X;
type TLInvokeAfterMsgs struct {
	MsgIds []int64 `protobuf:"varint,1,rep,packed,name=msg_ids,json=msgIds,proto3" json:"msg_ids,omitempty"`
	Query  []byte  `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *TLInvokeAfterMsgs) Reset()         { *m = TLInvokeAfterMsgs{} }
func (m *TLInvokeAfterMsgs) String() string { return proto.CompactTextString(m) }
func (*TLInvokeAfterMsgs) ProtoMessage()    {}
func (*TLInvokeAfterMsgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{1}
}
func (m *TLInvokeAfterMsgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLInvokeAfterMsgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLInvokeAfterMsgs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLInvokeAfterMsgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLInvokeAfterMsgs.Merge(m, src)
}
func (m *TLInvokeAfterMsgs) XXX_Size() int {
	return m.Size()
}
func (m *TLInvokeAfterMsgs) XXX_DiscardUnknown() {
	xxx_messageInfo_TLInvokeAfterMsgs.DiscardUnknown(m)
}

var xxx_messageInfo_TLInvokeAfterMsgs proto.InternalMessageInfo

func (m *TLInvokeAfterMsgs) GetMsgIds() []int64 {
	if m != nil {
		return m.MsgIds
	}
	return nil
}

func (m *TLInvokeAfterMsgs) GetQuery() []byte {
	if m != nil {
		return m.Query
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// initConnection#c7481da6 {X:Type} api_id:int device_model:string system_version:string app_version:string system_lang_code:string lang_pack:string lang_code:string query:!X = X;
type TLInitConnection struct {
	ApiId          int32  `protobuf:"varint,1,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`
	DeviceModel    string `protobuf:"bytes,2,opt,name=device_model,json=deviceModel,proto3" json:"device_model,omitempty"`
	SystemVersion  string `protobuf:"bytes,3,opt,name=system_version,json=systemVersion,proto3" json:"system_version,omitempty"`
	AppVersion     string `protobuf:"bytes,4,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	SystemLangCode string `protobuf:"bytes,5,opt,name=system_lang_code,json=systemLangCode,proto3" json:"system_lang_code,omitempty"`
	LangPack       string `protobuf:"bytes,6,opt,name=lang_pack,json=langPack,proto3" json:"lang_pack,omitempty"`
	LangCode       string `protobuf:"bytes,7,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	Query          []byte `protobuf:"bytes,8,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *TLInitConnection) Reset()         { *m = TLInitConnection{} }
func (m *TLInitConnection) String() string { return proto.CompactTextString(m) }
func (*TLInitConnection) ProtoMessage()    {}
func (*TLInitConnection) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{2}
}
func (m *TLInitConnection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLInitConnection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLInitConnection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLInitConnection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLInitConnection.Merge(m, src)
}
func (m *TLInitConnection) XXX_Size() int {
	return m.Size()
}
func (m *TLInitConnection) XXX_DiscardUnknown() {
	xxx_messageInfo_TLInitConnection.DiscardUnknown(m)
}

var xxx_messageInfo_TLInitConnection proto.InternalMessageInfo

func (m *TLInitConnection) GetApiId() int32 {
	if m != nil {
		return m.ApiId
	}
	return 0
}

func (m *TLInitConnection) GetDeviceModel() string {
	if m != nil {
		return m.DeviceModel
	}
	return ""
}

func (m *TLInitConnection) GetSystemVersion() string {
	if m != nil {
		return m.SystemVersion
	}
	return ""
}

func (m *TLInitConnection) GetAppVersion() string {
	if m != nil {
		return m.AppVersion
	}
	return ""
}

func (m *TLInitConnection) GetSystemLangCode() string {
	if m != nil {
		return m.SystemLangCode
	}
	return ""
}

func (m *TLInitConnection) GetLangPack() string {
	if m != nil {
		return m.LangPack
	}
	return ""
}

func (m *TLInitConnection) GetLangCode() string {
	if m != nil {
		return m.LangCode
	}
	return ""
}

func (m *TLInitConnection) GetQuery() []byte {
	if m != nil {
		return m.Query
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// invokeWithLayer#da9b0d0d {X:Type} layer:int query:!X = X;
type TLInvokeWithLayer struct {
	Layer int32  `protobuf:"varint,1,opt,name=layer,proto3" json:"layer,omitempty"`
	Query []byte `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *TLInvokeWithLayer) Reset()         { *m = TLInvokeWithLayer{} }
func (m *TLInvokeWithLayer) String() string { return proto.CompactTextString(m) }
func (*TLInvokeWithLayer) ProtoMessage()    {}
func (*TLInvokeWithLayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{3}
}
func (m *TLInvokeWithLayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLInvokeWithLayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLInvokeWithLayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLInvokeWithLayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLInvokeWithLayer.Merge(m, src)
}
func (m *TLInvokeWithLayer) XXX_Size() int {
	return m.Size()
}
func (m *TLInvokeWithLayer) XXX_DiscardUnknown() {
	xxx_messageInfo_TLInvokeWithLayer.DiscardUnknown(m)
}

var xxx_messageInfo_TLInvokeWithLayer proto.InternalMessageInfo

func (m *TLInvokeWithLayer) GetLayer() int32 {
	if m != nil {
		return m.Layer
	}
	return 0
}

func (m *TLInvokeWithLayer) GetQuery() []byte {
	if m != nil {
		return m.Query
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// invokeWithoutUpdates#bf9459b7 {X:Type} query:!X = X;
type TLInvokeWithoutUpdates struct {
	Query []byte `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *TLInvokeWithoutUpdates) Reset()         { *m = TLInvokeWithoutUpdates{} }
func (m *TLInvokeWithoutUpdates) String() string { return proto.CompactTextString(m) }
func (*TLInvokeWithoutUpdates) ProtoMessage()    {}
func (*TLInvokeWithoutUpdates) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{4}
}
func (m *TLInvokeWithoutUpdates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLInvokeWithoutUpdates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLInvokeWithoutUpdates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLInvokeWithoutUpdates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLInvokeWithoutUpdates.Merge(m, src)
}
func (m *TLInvokeWithoutUpdates) XXX_Size() int {
	return m.Size()
}
func (m *TLInvokeWithoutUpdates) XXX_DiscardUnknown() {
	xxx_messageInfo_TLInvokeWithoutUpdates.DiscardUnknown(m)
}

var xxx_messageInfo_TLInvokeWithoutUpdates proto.InternalMessageInfo

func (m *TLInvokeWithoutUpdates) GetQuery() []byte {
	if m != nil {
		return m.Query
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// auth.checkPhone#6fe51dfb phone_number:string = auth.CheckedPhone;
type TLAuthCheckPhone struct {
	PhoneNumber string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
}

func (m *TLAuthCheckPhone) Reset()         { *m = TLAuthCheckPhone{} }
func (m *TLAuthCheckPhone) String() string { return proto.CompactTextString(m) }
func (*TLAuthCheckPhone) ProtoMessage()    {}
func (*TLAuthCheckPhone) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{5}
}
func (m *TLAuthCheckPhone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAuthCheckPhone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAuthCheckPhone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAuthCheckPhone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAuthCheckPhone.Merge(m, src)
}
func (m *TLAuthCheckPhone) XXX_Size() int {
	return m.Size()
}
func (m *TLAuthCheckPhone) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAuthCheckPhone.DiscardUnknown(m)
}

var xxx_messageInfo_TLAuthCheckPhone proto.InternalMessageInfo

func (m *TLAuthCheckPhone) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// auth.sendCode#86aef0ec flags:# allow_flashcall:flags.0?true phone_number:string current_number:flags.0?Bool api_id:int api_hash:string = auth.SentCode;
type TLAuthSendCode struct {
	AllowFlashcall bool   `protobuf:"varint,2,opt,name=allow_flashcall,json=allowFlashcall,proto3" json:"allow_flashcall,omitempty"`
	PhoneNumber    string `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	CurrentNumber  *Bool  `protobuf:"bytes,4,opt,name=current_number,json=currentNumber,proto3" json:"current_number,omitempty"`
	ApiId          int32  `protobuf:"varint,5,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`
	ApiHash        string `protobuf:"bytes,6,opt,name=api_hash,json=apiHash,proto3" json:"api_hash,omitempty"`
}

func (m *TLAuthSendCode) Reset()         { *m = TLAuthSendCode{} }
func (m *TLAuthSendCode) String() string { return proto.CompactTextString(m) }
func (*TLAuthSendCode) ProtoMessage()    {}
func (*TLAuthSendCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{6}
}
func (m *TLAuthSendCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAuthSendCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAuthSendCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAuthSendCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAuthSendCode.Merge(m, src)
}
func (m *TLAuthSendCode) XXX_Size() int {
	return m.Size()
}
func (m *TLAuthSendCode) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAuthSendCode.DiscardUnknown(m)
}

var xxx_messageInfo_TLAuthSendCode proto.InternalMessageInfo

func (m *TLAuthSendCode) GetAllowFlashcall() bool {
	if m != nil {
		return m.AllowFlashcall
	}
	return false
}

func (m *TLAuthSendCode) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *TLAuthSendCode) GetCurrentNumber() *Bool {
	if m != nil {
		return m.CurrentNumber
	}
	return nil
}

func (m *TLAuthSendCode) GetApiId() int32 {
	if m != nil {
		return m.ApiId
	}
	return 0
}

func (m *TLAuthSendCode) GetApiHash() string {
	if m != nil {
		return m.ApiHash
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// auth.signUp#1b067634 phone_number:string phone_code_hash:string phone_code:string first_name:string last_name:string = auth.Authorization;
type TLAuthSignUp struct {
	PhoneNumber   string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	PhoneCodeHash string `protobuf:"bytes,2,opt,name=phone_code_hash,json=phoneCodeHash,proto3" json:"phone_code_hash,omitempty"`
	PhoneCode     string `protobuf:"bytes,3,opt,name=phone_code,json=phoneCode,proto3" json:"phone_code,omitempty"`
	FirstName     string `protobuf:"bytes,4,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName      string `protobuf:"bytes,5,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
}

func (m *TLAuthSignUp) Reset()         { *m = TLAuthSignUp{} }
func (m *TLAuthSignUp) String() string { return proto.CompactTextString(m) }
func (*TLAuthSignUp) ProtoMessage()    {}
func (*TLAuthSignUp) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{7}
}
func (m *TLAuthSignUp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAuthSignUp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAuthSignUp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAuthSignUp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAuthSignUp.Merge(m, src)
}
func (m *TLAuthSignUp) XXX_Size() int {
	return m.Size()
}
func (m *TLAuthSignUp) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAuthSignUp.DiscardUnknown(m)
}

var xxx_messageInfo_TLAuthSignUp proto.InternalMessageInfo

func (m *TLAuthSignUp) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *TLAuthSignUp) GetPhoneCodeHash() string {
	if m != nil {
		return m.PhoneCodeHash
	}
	return ""
}

func (m *TLAuthSignUp) GetPhoneCode() string {
	if m != nil {
		return m.PhoneCode
	}
	return ""
}

func (m *TLAuthSignUp) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *TLAuthSignUp) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// auth.signIn#bcd51581 phone_number:string phone_code_hash:string phone_code:string = auth.Authorization;
type TLAuthSignIn struct {
	PhoneNumber   string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	PhoneCodeHash string `protobuf:"bytes,2,opt,name=phone_code_hash,json=phoneCodeHash,proto3" json:"phone_code_hash,omitempty"`
	PhoneCode     string `protobuf:"bytes,3,opt,name=phone_code,json=phoneCode,proto3" json:"phone_code,omitempty"`
}

func (m *TLAuthSignIn) Reset()         { *m = TLAuthSignIn{} }
func (m *TLAuthSignIn) String() string { return proto.CompactTextString(m) }
func (*TLAuthSignIn) ProtoMessage()    {}
func (*TLAuthSignIn) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{8}
}
func (m *TLAuthSignIn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAuthSignIn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAuthSignIn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAuthSignIn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAuthSignIn.Merge(m, src)
}
func (m *TLAuthSignIn) XXX_Size() int {
	return m.Size()
}
func (m *TLAuthSignIn) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAuthSignIn.DiscardUnknown(m)
}

var xxx_messageInfo_TLAuthSignIn proto.InternalMessageInfo

func (m *TLAuthSignIn) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *TLAuthSignIn) GetPhoneCodeHash() string {
	if m != nil {
		return m.PhoneCodeHash
	}
	return ""
}

func (m *TLAuthSignIn) GetPhoneCode() string {
	if m != nil {
		return m.PhoneCode
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// auth.logOut#5717da40 = Bool;
type TLAuthLogOut struct {
}

func (m *TLAuthLogOut) Reset()         { *m = TLAuthLogOut{} }
func (m *TLAuthLogOut) String() string { return proto.CompactTextString(m) }
func (*TLAuthLogOut) ProtoMessage()    {}
func (*TLAuthLogOut) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{9}
}
func (m *TLAuthLogOut) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAuthLogOut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAuthLogOut.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAuthLogOut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAuthLogOut.Merge(m, src)
}
func (m *TLAuthLogOut) XXX_Size() int {
	return m.Size()
}
func (m *TLAuthLogOut) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAuthLogOut.DiscardUnknown(m)
}

var xxx_messageInfo_TLAuthLogOut proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// auth.resetAuthorizations#9fab0d1a = Bool;
type TLAuthResetAuthorizations struct {
}

func (m *TLAuthResetAuthorizations) Reset()         { *m = TLAuthResetAuthorizations{} }
func (m *TLAuthResetAuthorizations) String() string { return proto.CompactTextString(m) }
func (*TLAuthResetAuthorizations) ProtoMessage()    {}
func (*TLAuthResetAuthorizations) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{10}
}
func (m *TLAuthResetAuthorizations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAuthResetAuthorizations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAuthResetAuthorizations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAuthResetAuthorizations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAuthResetAuthorizations.Merge(m, src)
}
func (m *TLAuthResetAuthorizations) XXX_Size() int {
	return m.Size()
}
func (m *TLAuthResetAuthorizations) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAuthResetAuthorizations.DiscardUnknown(m)
}

var xxx_messageInfo_TLAuthResetAuthorizations proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// auth.sendInvites#771c1d97 phone_numbers:Vector<string> message:string = Bool;
type TLAuthSendInvites struct {
	PhoneNumbers []string `protobuf:"bytes,1,rep,name=phone_numbers,json=phoneNumbers,proto3" json:"phone_numbers,omitempty"`
	Message      string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *TLAuthSendInvites) Reset()         { *m = TLAuthSendInvites{} }
func (m *TLAuthSendInvites) String() string { return proto.CompactTextString(m) }
func (*TLAuthSendInvites) ProtoMessage()    {}
func (*TLAuthSendInvites) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{11}
}
func (m *TLAuthSendInvites) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAuthSendInvites) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAuthSendInvites.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAuthSendInvites) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAuthSendInvites.Merge(m, src)
}
func (m *TLAuthSendInvites) XXX_Size() int {
	return m.Size()
}
func (m *TLAuthSendInvites) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAuthSendInvites.DiscardUnknown(m)
}

var xxx_messageInfo_TLAuthSendInvites proto.InternalMessageInfo

func (m *TLAuthSendInvites) GetPhoneNumbers() []string {
	if m != nil {
		return m.PhoneNumbers
	}
	return nil
}

func (m *TLAuthSendInvites) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// auth.exportAuthorization#e5bfffcd dc_id:int = auth.ExportedAuthorization;
type TLAuthExportAuthorization struct {
	DcId int32 `protobuf:"varint,1,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty"`
}

func (m *TLAuthExportAuthorization) Reset()         { *m = TLAuthExportAuthorization{} }
func (m *TLAuthExportAuthorization) String() string { return proto.CompactTextString(m) }
func (*TLAuthExportAuthorization) ProtoMessage()    {}
func (*TLAuthExportAuthorization) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{12}
}
func (m *TLAuthExportAuthorization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAuthExportAuthorization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAuthExportAuthorization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAuthExportAuthorization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAuthExportAuthorization.Merge(m, src)
}
func (m *TLAuthExportAuthorization) XXX_Size() int {
	return m.Size()
}
func (m *TLAuthExportAuthorization) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAuthExportAuthorization.DiscardUnknown(m)
}

var xxx_messageInfo_TLAuthExportAuthorization proto.InternalMessageInfo

func (m *TLAuthExportAuthorization) GetDcId() int32 {
	if m != nil {
		return m.DcId
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// auth.importAuthorization#e3ef9613 id:int bytes:bytes = auth.Authorization;
type TLAuthImportAuthorization struct {
	Id    int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Bytes []byte `protobuf:"bytes,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *TLAuthImportAuthorization) Reset()         { *m = TLAuthImportAuthorization{} }
func (m *TLAuthImportAuthorization) String() string { return proto.CompactTextString(m) }
func (*TLAuthImportAuthorization) ProtoMessage()    {}
func (*TLAuthImportAuthorization) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{13}
}
func (m *TLAuthImportAuthorization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAuthImportAuthorization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAuthImportAuthorization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAuthImportAuthorization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAuthImportAuthorization.Merge(m, src)
}
func (m *TLAuthImportAuthorization) XXX_Size() int {
	return m.Size()
}
func (m *TLAuthImportAuthorization) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAuthImportAuthorization.DiscardUnknown(m)
}

var xxx_messageInfo_TLAuthImportAuthorization proto.InternalMessageInfo

func (m *TLAuthImportAuthorization) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TLAuthImportAuthorization) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// auth.bindTempAuthKey#cdd42a05 perm_auth_key_id:long nonce:long expires_at:int encrypted_message:bytes = Bool;
type TLAuthBindTempAuthKey struct {
	PermAuthKeyId    int64  `protobuf:"varint,1,opt,name=perm_auth_key_id,json=permAuthKeyId,proto3" json:"perm_auth_key_id,omitempty"`
	Nonce            int64  `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ExpiresAt        int32  `protobuf:"varint,3,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	EncryptedMessage []byte `protobuf:"bytes,4,opt,name=encrypted_message,json=encryptedMessage,proto3" json:"encrypted_message,omitempty"`
}

func (m *TLAuthBindTempAuthKey) Reset()         { *m = TLAuthBindTempAuthKey{} }
func (m *TLAuthBindTempAuthKey) String() string { return proto.CompactTextString(m) }
func (*TLAuthBindTempAuthKey) ProtoMessage()    {}
func (*TLAuthBindTempAuthKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{14}
}
func (m *TLAuthBindTempAuthKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAuthBindTempAuthKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAuthBindTempAuthKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAuthBindTempAuthKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAuthBindTempAuthKey.Merge(m, src)
}
func (m *TLAuthBindTempAuthKey) XXX_Size() int {
	return m.Size()
}
func (m *TLAuthBindTempAuthKey) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAuthBindTempAuthKey.DiscardUnknown(m)
}

var xxx_messageInfo_TLAuthBindTempAuthKey proto.InternalMessageInfo

func (m *TLAuthBindTempAuthKey) GetPermAuthKeyId() int64 {
	if m != nil {
		return m.PermAuthKeyId
	}
	return 0
}

func (m *TLAuthBindTempAuthKey) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *TLAuthBindTempAuthKey) GetExpiresAt() int32 {
	if m != nil {
		return m.ExpiresAt
	}
	return 0
}

func (m *TLAuthBindTempAuthKey) GetEncryptedMessage() []byte {
	if m != nil {
		return m.EncryptedMessage
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// auth.importBotAuthorization#67a3ff2c flags:int api_id:int api_hash:string bot_auth_token:string = auth.Authorization;
type TLAuthImportBotAuthorization struct {
	Flags        int32  `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	ApiId        int32  `protobuf:"varint,2,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`
	ApiHash      string `protobuf:"bytes,3,opt,name=api_hash,json=apiHash,proto3" json:"api_hash,omitempty"`
	BotAuthToken string `protobuf:"bytes,4,opt,name=bot_auth_token,json=botAuthToken,proto3" json:"bot_auth_token,omitempty"`
}

func (m *TLAuthImportBotAuthorization) Reset()         { *m = TLAuthImportBotAuthorization{} }
func (m *TLAuthImportBotAuthorization) String() string { return proto.CompactTextString(m) }
func (*TLAuthImportBotAuthorization) ProtoMessage()    {}
func (*TLAuthImportBotAuthorization) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{15}
}
func (m *TLAuthImportBotAuthorization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAuthImportBotAuthorization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAuthImportBotAuthorization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAuthImportBotAuthorization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAuthImportBotAuthorization.Merge(m, src)
}
func (m *TLAuthImportBotAuthorization) XXX_Size() int {
	return m.Size()
}
func (m *TLAuthImportBotAuthorization) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAuthImportBotAuthorization.DiscardUnknown(m)
}

var xxx_messageInfo_TLAuthImportBotAuthorization proto.InternalMessageInfo

func (m *TLAuthImportBotAuthorization) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *TLAuthImportBotAuthorization) GetApiId() int32 {
	if m != nil {
		return m.ApiId
	}
	return 0
}

func (m *TLAuthImportBotAuthorization) GetApiHash() string {
	if m != nil {
		return m.ApiHash
	}
	return ""
}

func (m *TLAuthImportBotAuthorization) GetBotAuthToken() string {
	if m != nil {
		return m.BotAuthToken
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// auth.checkPassword#a63011e password_hash:bytes = auth.Authorization;
type TLAuthCheckPassword struct {
	PasswordHash []byte `protobuf:"bytes,1,opt,name=password_hash,json=passwordHash,proto3" json:"password_hash,omitempty"`
}

func (m *TLAuthCheckPassword) Reset()         { *m = TLAuthCheckPassword{} }
func (m *TLAuthCheckPassword) String() string { return proto.CompactTextString(m) }
func (*TLAuthCheckPassword) ProtoMessage()    {}
func (*TLAuthCheckPassword) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{16}
}
func (m *TLAuthCheckPassword) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAuthCheckPassword) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAuthCheckPassword.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAuthCheckPassword) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAuthCheckPassword.Merge(m, src)
}
func (m *TLAuthCheckPassword) XXX_Size() int {
	return m.Size()
}
func (m *TLAuthCheckPassword) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAuthCheckPassword.DiscardUnknown(m)
}

var xxx_messageInfo_TLAuthCheckPassword proto.InternalMessageInfo

func (m *TLAuthCheckPassword) GetPasswordHash() []byte {
	if m != nil {
		return m.PasswordHash
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// auth.requestPasswordRecovery#d897bc66 = auth.PasswordRecovery;
type TLAuthRequestPasswordRecovery struct {
}

func (m *TLAuthRequestPasswordRecovery) Reset()         { *m = TLAuthRequestPasswordRecovery{} }
func (m *TLAuthRequestPasswordRecovery) String() string { return proto.CompactTextString(m) }
func (*TLAuthRequestPasswordRecovery) ProtoMessage()    {}
func (*TLAuthRequestPasswordRecovery) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{17}
}
func (m *TLAuthRequestPasswordRecovery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAuthRequestPasswordRecovery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAuthRequestPasswordRecovery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAuthRequestPasswordRecovery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAuthRequestPasswordRecovery.Merge(m, src)
}
func (m *TLAuthRequestPasswordRecovery) XXX_Size() int {
	return m.Size()
}
func (m *TLAuthRequestPasswordRecovery) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAuthRequestPasswordRecovery.DiscardUnknown(m)
}

var xxx_messageInfo_TLAuthRequestPasswordRecovery proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// auth.recoverPassword#4ea56e92 code:string = auth.Authorization;
type TLAuthRecoverPassword struct {
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *TLAuthRecoverPassword) Reset()         { *m = TLAuthRecoverPassword{} }
func (m *TLAuthRecoverPassword) String() string { return proto.CompactTextString(m) }
func (*TLAuthRecoverPassword) ProtoMessage()    {}
func (*TLAuthRecoverPassword) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{18}
}
func (m *TLAuthRecoverPassword) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAuthRecoverPassword) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAuthRecoverPassword.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAuthRecoverPassword) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAuthRecoverPassword.Merge(m, src)
}
func (m *TLAuthRecoverPassword) XXX_Size() int {
	return m.Size()
}
func (m *TLAuthRecoverPassword) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAuthRecoverPassword.DiscardUnknown(m)
}

var xxx_messageInfo_TLAuthRecoverPassword proto.InternalMessageInfo

func (m *TLAuthRecoverPassword) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// auth.resendCode#3ef1a9bf phone_number:string phone_code_hash:string = auth.SentCode;
type TLAuthResendCode struct {
	PhoneNumber   string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	PhoneCodeHash string `protobuf:"bytes,2,opt,name=phone_code_hash,json=phoneCodeHash,proto3" json:"phone_code_hash,omitempty"`
}

func (m *TLAuthResendCode) Reset()         { *m = TLAuthResendCode{} }
func (m *TLAuthResendCode) String() string { return proto.CompactTextString(m) }
func (*TLAuthResendCode) ProtoMessage()    {}
func (*TLAuthResendCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{19}
}
func (m *TLAuthResendCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAuthResendCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAuthResendCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAuthResendCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAuthResendCode.Merge(m, src)
}
func (m *TLAuthResendCode) XXX_Size() int {
	return m.Size()
}
func (m *TLAuthResendCode) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAuthResendCode.DiscardUnknown(m)
}

var xxx_messageInfo_TLAuthResendCode proto.InternalMessageInfo

func (m *TLAuthResendCode) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *TLAuthResendCode) GetPhoneCodeHash() string {
	if m != nil {
		return m.PhoneCodeHash
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// auth.cancelCode#1f040578 phone_number:string phone_code_hash:string = Bool;
type TLAuthCancelCode struct {
	PhoneNumber   string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	PhoneCodeHash string `protobuf:"bytes,2,opt,name=phone_code_hash,json=phoneCodeHash,proto3" json:"phone_code_hash,omitempty"`
}

func (m *TLAuthCancelCode) Reset()         { *m = TLAuthCancelCode{} }
func (m *TLAuthCancelCode) String() string { return proto.CompactTextString(m) }
func (*TLAuthCancelCode) ProtoMessage()    {}
func (*TLAuthCancelCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{20}
}
func (m *TLAuthCancelCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAuthCancelCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAuthCancelCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAuthCancelCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAuthCancelCode.Merge(m, src)
}
func (m *TLAuthCancelCode) XXX_Size() int {
	return m.Size()
}
func (m *TLAuthCancelCode) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAuthCancelCode.DiscardUnknown(m)
}

var xxx_messageInfo_TLAuthCancelCode proto.InternalMessageInfo

func (m *TLAuthCancelCode) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *TLAuthCancelCode) GetPhoneCodeHash() string {
	if m != nil {
		return m.PhoneCodeHash
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// auth.dropTempAuthKeys#8e48a188 except_auth_keys:Vector<long> = Bool;
type TLAuthDropTempAuthKeys struct {
	ExceptAuthKeys []int64 `protobuf:"varint,1,rep,packed,name=except_auth_keys,json=exceptAuthKeys,proto3" json:"except_auth_keys,omitempty"`
}

func (m *TLAuthDropTempAuthKeys) Reset()         { *m = TLAuthDropTempAuthKeys{} }
func (m *TLAuthDropTempAuthKeys) String() string { return proto.CompactTextString(m) }
func (*TLAuthDropTempAuthKeys) ProtoMessage()    {}
func (*TLAuthDropTempAuthKeys) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{21}
}
func (m *TLAuthDropTempAuthKeys) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAuthDropTempAuthKeys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAuthDropTempAuthKeys.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAuthDropTempAuthKeys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAuthDropTempAuthKeys.Merge(m, src)
}
func (m *TLAuthDropTempAuthKeys) XXX_Size() int {
	return m.Size()
}
func (m *TLAuthDropTempAuthKeys) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAuthDropTempAuthKeys.DiscardUnknown(m)
}

var xxx_messageInfo_TLAuthDropTempAuthKeys proto.InternalMessageInfo

func (m *TLAuthDropTempAuthKeys) GetExceptAuthKeys() []int64 {
	if m != nil {
		return m.ExceptAuthKeys
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// auth.checkInviteCode#ed2a16b4 code:string = Error;
type TLAuthCheckInviteCode struct {
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *TLAuthCheckInviteCode) Reset()         { *m = TLAuthCheckInviteCode{} }
func (m *TLAuthCheckInviteCode) String() string { return proto.CompactTextString(m) }
func (*TLAuthCheckInviteCode) ProtoMessage()    {}
func (*TLAuthCheckInviteCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{22}
}
func (m *TLAuthCheckInviteCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAuthCheckInviteCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAuthCheckInviteCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAuthCheckInviteCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAuthCheckInviteCode.Merge(m, src)
}
func (m *TLAuthCheckInviteCode) XXX_Size() int {
	return m.Size()
}
func (m *TLAuthCheckInviteCode) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAuthCheckInviteCode.DiscardUnknown(m)
}

var xxx_messageInfo_TLAuthCheckInviteCode proto.InternalMessageInfo

func (m *TLAuthCheckInviteCode) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// account.registerDevice#637ea878 token_type:int token:string = Bool;
type TLAccountRegisterDevice struct {
	TokenType int32  `protobuf:"varint,1,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`
	Token     string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *TLAccountRegisterDevice) Reset()         { *m = TLAccountRegisterDevice{} }
func (m *TLAccountRegisterDevice) String() string { return proto.CompactTextString(m) }
func (*TLAccountRegisterDevice) ProtoMessage()    {}
func (*TLAccountRegisterDevice) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{23}
}
func (m *TLAccountRegisterDevice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountRegisterDevice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountRegisterDevice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountRegisterDevice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountRegisterDevice.Merge(m, src)
}
func (m *TLAccountRegisterDevice) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountRegisterDevice) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountRegisterDevice.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountRegisterDevice proto.InternalMessageInfo

func (m *TLAccountRegisterDevice) GetTokenType() int32 {
	if m != nil {
		return m.TokenType
	}
	return 0
}

func (m *TLAccountRegisterDevice) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// account.unregisterDevice#65c55b40 token_type:int token:string = Bool;
type TLAccountUnregisterDevice struct {
	TokenType int32  `protobuf:"varint,1,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`
	Token     string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *TLAccountUnregisterDevice) Reset()         { *m = TLAccountUnregisterDevice{} }
func (m *TLAccountUnregisterDevice) String() string { return proto.CompactTextString(m) }
func (*TLAccountUnregisterDevice) ProtoMessage()    {}
func (*TLAccountUnregisterDevice) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{24}
}
func (m *TLAccountUnregisterDevice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountUnregisterDevice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountUnregisterDevice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountUnregisterDevice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountUnregisterDevice.Merge(m, src)
}
func (m *TLAccountUnregisterDevice) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountUnregisterDevice) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountUnregisterDevice.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountUnregisterDevice proto.InternalMessageInfo

func (m *TLAccountUnregisterDevice) GetTokenType() int32 {
	if m != nil {
		return m.TokenType
	}
	return 0
}

func (m *TLAccountUnregisterDevice) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// account.updateNotifySettings#84be5b93 peer:InputNotifyPeer settings:InputPeerNotifySettings = Bool;
type TLAccountUpdateNotifySettings struct {
	Peer     *InputNotifyPeer         `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Settings *InputPeerNotifySettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (m *TLAccountUpdateNotifySettings) Reset()         { *m = TLAccountUpdateNotifySettings{} }
func (m *TLAccountUpdateNotifySettings) String() string { return proto.CompactTextString(m) }
func (*TLAccountUpdateNotifySettings) ProtoMessage()    {}
func (*TLAccountUpdateNotifySettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{25}
}
func (m *TLAccountUpdateNotifySettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountUpdateNotifySettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountUpdateNotifySettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountUpdateNotifySettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountUpdateNotifySettings.Merge(m, src)
}
func (m *TLAccountUpdateNotifySettings) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountUpdateNotifySettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountUpdateNotifySettings.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountUpdateNotifySettings proto.InternalMessageInfo

func (m *TLAccountUpdateNotifySettings) GetPeer() *InputNotifyPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLAccountUpdateNotifySettings) GetSettings() *InputPeerNotifySettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// account.getNotifySettings#12b3ad31 peer:InputNotifyPeer = PeerNotifySettings;
type TLAccountGetNotifySettings struct {
	Peer *InputNotifyPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *TLAccountGetNotifySettings) Reset()         { *m = TLAccountGetNotifySettings{} }
func (m *TLAccountGetNotifySettings) String() string { return proto.CompactTextString(m) }
func (*TLAccountGetNotifySettings) ProtoMessage()    {}
func (*TLAccountGetNotifySettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{26}
}
func (m *TLAccountGetNotifySettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountGetNotifySettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountGetNotifySettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountGetNotifySettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountGetNotifySettings.Merge(m, src)
}
func (m *TLAccountGetNotifySettings) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountGetNotifySettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountGetNotifySettings.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountGetNotifySettings proto.InternalMessageInfo

func (m *TLAccountGetNotifySettings) GetPeer() *InputNotifyPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// account.resetNotifySettings#db7e1747 = Bool;
type TLAccountResetNotifySettings struct {
}

func (m *TLAccountResetNotifySettings) Reset()         { *m = TLAccountResetNotifySettings{} }
func (m *TLAccountResetNotifySettings) String() string { return proto.CompactTextString(m) }
func (*TLAccountResetNotifySettings) ProtoMessage()    {}
func (*TLAccountResetNotifySettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{27}
}
func (m *TLAccountResetNotifySettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountResetNotifySettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountResetNotifySettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountResetNotifySettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountResetNotifySettings.Merge(m, src)
}
func (m *TLAccountResetNotifySettings) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountResetNotifySettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountResetNotifySettings.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountResetNotifySettings proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// account.updateProfile#78515775 flags:# first_name:flags.0?string last_name:flags.1?string about:flags.2?string = User;
type TLAccountUpdateProfile struct {
	FirstName string `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName  string `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	About     string `protobuf:"bytes,4,opt,name=about,proto3" json:"about,omitempty"`
}

func (m *TLAccountUpdateProfile) Reset()         { *m = TLAccountUpdateProfile{} }
func (m *TLAccountUpdateProfile) String() string { return proto.CompactTextString(m) }
func (*TLAccountUpdateProfile) ProtoMessage()    {}
func (*TLAccountUpdateProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{28}
}
func (m *TLAccountUpdateProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountUpdateProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountUpdateProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountUpdateProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountUpdateProfile.Merge(m, src)
}
func (m *TLAccountUpdateProfile) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountUpdateProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountUpdateProfile.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountUpdateProfile proto.InternalMessageInfo

func (m *TLAccountUpdateProfile) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *TLAccountUpdateProfile) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *TLAccountUpdateProfile) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// account.updateStatus#6628562c offline:Bool = Bool;
type TLAccountUpdateStatus struct {
	Offline *Bool `protobuf:"bytes,1,opt,name=offline,proto3" json:"offline,omitempty"`
}

func (m *TLAccountUpdateStatus) Reset()         { *m = TLAccountUpdateStatus{} }
func (m *TLAccountUpdateStatus) String() string { return proto.CompactTextString(m) }
func (*TLAccountUpdateStatus) ProtoMessage()    {}
func (*TLAccountUpdateStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{29}
}
func (m *TLAccountUpdateStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountUpdateStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountUpdateStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountUpdateStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountUpdateStatus.Merge(m, src)
}
func (m *TLAccountUpdateStatus) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountUpdateStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountUpdateStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountUpdateStatus proto.InternalMessageInfo

func (m *TLAccountUpdateStatus) GetOffline() *Bool {
	if m != nil {
		return m.Offline
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// account.getWallPapers#c04cfac2 = Vector<WallPaper>;
type TLAccountGetWallPapers struct {
}

func (m *TLAccountGetWallPapers) Reset()         { *m = TLAccountGetWallPapers{} }
func (m *TLAccountGetWallPapers) String() string { return proto.CompactTextString(m) }
func (*TLAccountGetWallPapers) ProtoMessage()    {}
func (*TLAccountGetWallPapers) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{30}
}
func (m *TLAccountGetWallPapers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountGetWallPapers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountGetWallPapers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountGetWallPapers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountGetWallPapers.Merge(m, src)
}
func (m *TLAccountGetWallPapers) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountGetWallPapers) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountGetWallPapers.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountGetWallPapers proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// account.reportPeer#ae189d5f peer:InputPeer reason:ReportReason = Bool;
type TLAccountReportPeer struct {
	Peer   *InputPeer    `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Reason *ReportReason `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *TLAccountReportPeer) Reset()         { *m = TLAccountReportPeer{} }
func (m *TLAccountReportPeer) String() string { return proto.CompactTextString(m) }
func (*TLAccountReportPeer) ProtoMessage()    {}
func (*TLAccountReportPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{31}
}
func (m *TLAccountReportPeer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountReportPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountReportPeer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountReportPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountReportPeer.Merge(m, src)
}
func (m *TLAccountReportPeer) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountReportPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountReportPeer.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountReportPeer proto.InternalMessageInfo

func (m *TLAccountReportPeer) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLAccountReportPeer) GetReason() *ReportReason {
	if m != nil {
		return m.Reason
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// account.checkUsername#2714d86c username:string = Bool;
type TLAccountCheckUsername struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (m *TLAccountCheckUsername) Reset()         { *m = TLAccountCheckUsername{} }
func (m *TLAccountCheckUsername) String() string { return proto.CompactTextString(m) }
func (*TLAccountCheckUsername) ProtoMessage()    {}
func (*TLAccountCheckUsername) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{32}
}
func (m *TLAccountCheckUsername) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountCheckUsername) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountCheckUsername.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountCheckUsername) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountCheckUsername.Merge(m, src)
}
func (m *TLAccountCheckUsername) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountCheckUsername) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountCheckUsername.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountCheckUsername proto.InternalMessageInfo

func (m *TLAccountCheckUsername) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// account.updateUsername#3e0bdd7c username:string = User;
type TLAccountUpdateUsername struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (m *TLAccountUpdateUsername) Reset()         { *m = TLAccountUpdateUsername{} }
func (m *TLAccountUpdateUsername) String() string { return proto.CompactTextString(m) }
func (*TLAccountUpdateUsername) ProtoMessage()    {}
func (*TLAccountUpdateUsername) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{33}
}
func (m *TLAccountUpdateUsername) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountUpdateUsername) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountUpdateUsername.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountUpdateUsername) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountUpdateUsername.Merge(m, src)
}
func (m *TLAccountUpdateUsername) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountUpdateUsername) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountUpdateUsername.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountUpdateUsername proto.InternalMessageInfo

func (m *TLAccountUpdateUsername) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// account.getPrivacy#dadbc950 key:InputPrivacyKey = account.PrivacyRules;
type TLAccountGetPrivacy struct {
	Key *InputPrivacyKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *TLAccountGetPrivacy) Reset()         { *m = TLAccountGetPrivacy{} }
func (m *TLAccountGetPrivacy) String() string { return proto.CompactTextString(m) }
func (*TLAccountGetPrivacy) ProtoMessage()    {}
func (*TLAccountGetPrivacy) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{34}
}
func (m *TLAccountGetPrivacy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountGetPrivacy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountGetPrivacy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountGetPrivacy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountGetPrivacy.Merge(m, src)
}
func (m *TLAccountGetPrivacy) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountGetPrivacy) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountGetPrivacy.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountGetPrivacy proto.InternalMessageInfo

func (m *TLAccountGetPrivacy) GetKey() *InputPrivacyKey {
	if m != nil {
		return m.Key
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// account.setPrivacy#c9f81ce8 key:InputPrivacyKey rules:Vector<InputPrivacyRule> = account.PrivacyRules;
type TLAccountSetPrivacy struct {
	Key   *InputPrivacyKey    `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Rules []*InputPrivacyRule `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (m *TLAccountSetPrivacy) Reset()         { *m = TLAccountSetPrivacy{} }
func (m *TLAccountSetPrivacy) String() string { return proto.CompactTextString(m) }
func (*TLAccountSetPrivacy) ProtoMessage()    {}
func (*TLAccountSetPrivacy) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{35}
}
func (m *TLAccountSetPrivacy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountSetPrivacy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountSetPrivacy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountSetPrivacy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountSetPrivacy.Merge(m, src)
}
func (m *TLAccountSetPrivacy) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountSetPrivacy) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountSetPrivacy.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountSetPrivacy proto.InternalMessageInfo

func (m *TLAccountSetPrivacy) GetKey() *InputPrivacyKey {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *TLAccountSetPrivacy) GetRules() []*InputPrivacyRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// account.deleteAccount#418d4e0b reason:string = Bool;
type TLAccountDeleteAccount struct {
	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *TLAccountDeleteAccount) Reset()         { *m = TLAccountDeleteAccount{} }
func (m *TLAccountDeleteAccount) String() string { return proto.CompactTextString(m) }
func (*TLAccountDeleteAccount) ProtoMessage()    {}
func (*TLAccountDeleteAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{36}
}
func (m *TLAccountDeleteAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountDeleteAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountDeleteAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountDeleteAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountDeleteAccount.Merge(m, src)
}
func (m *TLAccountDeleteAccount) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountDeleteAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountDeleteAccount.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountDeleteAccount proto.InternalMessageInfo

func (m *TLAccountDeleteAccount) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// account.getAccountTTL#8fc711d = AccountDaysTTL;
type TLAccountGetAccountTTL struct {
}

func (m *TLAccountGetAccountTTL) Reset()         { *m = TLAccountGetAccountTTL{} }
func (m *TLAccountGetAccountTTL) String() string { return proto.CompactTextString(m) }
func (*TLAccountGetAccountTTL) ProtoMessage()    {}
func (*TLAccountGetAccountTTL) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{37}
}
func (m *TLAccountGetAccountTTL) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountGetAccountTTL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountGetAccountTTL.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountGetAccountTTL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountGetAccountTTL.Merge(m, src)
}
func (m *TLAccountGetAccountTTL) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountGetAccountTTL) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountGetAccountTTL.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountGetAccountTTL proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// account.setAccountTTL#2442485e ttl:AccountDaysTTL = Bool;
type TLAccountSetAccountTTL struct {
	Ttl *AccountDaysTTL `protobuf:"bytes,1,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (m *TLAccountSetAccountTTL) Reset()         { *m = TLAccountSetAccountTTL{} }
func (m *TLAccountSetAccountTTL) String() string { return proto.CompactTextString(m) }
func (*TLAccountSetAccountTTL) ProtoMessage()    {}
func (*TLAccountSetAccountTTL) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{38}
}
func (m *TLAccountSetAccountTTL) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountSetAccountTTL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountSetAccountTTL.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountSetAccountTTL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountSetAccountTTL.Merge(m, src)
}
func (m *TLAccountSetAccountTTL) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountSetAccountTTL) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountSetAccountTTL.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountSetAccountTTL proto.InternalMessageInfo

func (m *TLAccountSetAccountTTL) GetTtl() *AccountDaysTTL {
	if m != nil {
		return m.Ttl
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// account.sendChangePhoneCode#8e57deb flags:# allow_flashcall:flags.0?true phone_number:string current_number:flags.0?Bool = auth.SentCode;
type TLAccountSendChangePhoneCode struct {
	AllowFlashcall bool   `protobuf:"varint,2,opt,name=allow_flashcall,json=allowFlashcall,proto3" json:"allow_flashcall,omitempty"`
	PhoneNumber    string `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	CurrentNumber  *Bool  `protobuf:"bytes,4,opt,name=current_number,json=currentNumber,proto3" json:"current_number,omitempty"`
}

func (m *TLAccountSendChangePhoneCode) Reset()         { *m = TLAccountSendChangePhoneCode{} }
func (m *TLAccountSendChangePhoneCode) String() string { return proto.CompactTextString(m) }
func (*TLAccountSendChangePhoneCode) ProtoMessage()    {}
func (*TLAccountSendChangePhoneCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{39}
}
func (m *TLAccountSendChangePhoneCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountSendChangePhoneCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountSendChangePhoneCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountSendChangePhoneCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountSendChangePhoneCode.Merge(m, src)
}
func (m *TLAccountSendChangePhoneCode) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountSendChangePhoneCode) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountSendChangePhoneCode.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountSendChangePhoneCode proto.InternalMessageInfo

func (m *TLAccountSendChangePhoneCode) GetAllowFlashcall() bool {
	if m != nil {
		return m.AllowFlashcall
	}
	return false
}

func (m *TLAccountSendChangePhoneCode) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *TLAccountSendChangePhoneCode) GetCurrentNumber() *Bool {
	if m != nil {
		return m.CurrentNumber
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// account.changePhone#70c32edb phone_number:string phone_code_hash:string phone_code:string = User;
type TLAccountChangePhone struct {
	PhoneNumber   string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	PhoneCodeHash string `protobuf:"bytes,2,opt,name=phone_code_hash,json=phoneCodeHash,proto3" json:"phone_code_hash,omitempty"`
	PhoneCode     string `protobuf:"bytes,3,opt,name=phone_code,json=phoneCode,proto3" json:"phone_code,omitempty"`
}

func (m *TLAccountChangePhone) Reset()         { *m = TLAccountChangePhone{} }
func (m *TLAccountChangePhone) String() string { return proto.CompactTextString(m) }
func (*TLAccountChangePhone) ProtoMessage()    {}
func (*TLAccountChangePhone) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{40}
}
func (m *TLAccountChangePhone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountChangePhone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountChangePhone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountChangePhone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountChangePhone.Merge(m, src)
}
func (m *TLAccountChangePhone) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountChangePhone) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountChangePhone.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountChangePhone proto.InternalMessageInfo

func (m *TLAccountChangePhone) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *TLAccountChangePhone) GetPhoneCodeHash() string {
	if m != nil {
		return m.PhoneCodeHash
	}
	return ""
}

func (m *TLAccountChangePhone) GetPhoneCode() string {
	if m != nil {
		return m.PhoneCode
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// account.updateDeviceLocked#38df3532 period:int = Bool;
type TLAccountUpdateDeviceLocked struct {
	Period int32 `protobuf:"varint,1,opt,name=period,proto3" json:"period,omitempty"`
}

func (m *TLAccountUpdateDeviceLocked) Reset()         { *m = TLAccountUpdateDeviceLocked{} }
func (m *TLAccountUpdateDeviceLocked) String() string { return proto.CompactTextString(m) }
func (*TLAccountUpdateDeviceLocked) ProtoMessage()    {}
func (*TLAccountUpdateDeviceLocked) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{41}
}
func (m *TLAccountUpdateDeviceLocked) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountUpdateDeviceLocked) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountUpdateDeviceLocked.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountUpdateDeviceLocked) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountUpdateDeviceLocked.Merge(m, src)
}
func (m *TLAccountUpdateDeviceLocked) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountUpdateDeviceLocked) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountUpdateDeviceLocked.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountUpdateDeviceLocked proto.InternalMessageInfo

func (m *TLAccountUpdateDeviceLocked) GetPeriod() int32 {
	if m != nil {
		return m.Period
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// account.getAuthorizations#e320c158 = account.Authorizations;
type TLAccountGetAuthorizations struct {
}

func (m *TLAccountGetAuthorizations) Reset()         { *m = TLAccountGetAuthorizations{} }
func (m *TLAccountGetAuthorizations) String() string { return proto.CompactTextString(m) }
func (*TLAccountGetAuthorizations) ProtoMessage()    {}
func (*TLAccountGetAuthorizations) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{42}
}
func (m *TLAccountGetAuthorizations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountGetAuthorizations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountGetAuthorizations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountGetAuthorizations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountGetAuthorizations.Merge(m, src)
}
func (m *TLAccountGetAuthorizations) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountGetAuthorizations) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountGetAuthorizations.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountGetAuthorizations proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// account.resetAuthorization#df77f3bc hash:long = Bool;
type TLAccountResetAuthorization struct {
	Hash int64 `protobuf:"varint,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TLAccountResetAuthorization) Reset()         { *m = TLAccountResetAuthorization{} }
func (m *TLAccountResetAuthorization) String() string { return proto.CompactTextString(m) }
func (*TLAccountResetAuthorization) ProtoMessage()    {}
func (*TLAccountResetAuthorization) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{43}
}
func (m *TLAccountResetAuthorization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountResetAuthorization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountResetAuthorization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountResetAuthorization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountResetAuthorization.Merge(m, src)
}
func (m *TLAccountResetAuthorization) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountResetAuthorization) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountResetAuthorization.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountResetAuthorization proto.InternalMessageInfo

func (m *TLAccountResetAuthorization) GetHash() int64 {
	if m != nil {
		return m.Hash
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// account.getPassword#548a30f5 = account.Password;
type TLAccountGetPassword struct {
}

func (m *TLAccountGetPassword) Reset()         { *m = TLAccountGetPassword{} }
func (m *TLAccountGetPassword) String() string { return proto.CompactTextString(m) }
func (*TLAccountGetPassword) ProtoMessage()    {}
func (*TLAccountGetPassword) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{44}
}
func (m *TLAccountGetPassword) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountGetPassword) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountGetPassword.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountGetPassword) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountGetPassword.Merge(m, src)
}
func (m *TLAccountGetPassword) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountGetPassword) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountGetPassword.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountGetPassword proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// account.getPasswordSettings#bc8d11bb current_password_hash:bytes = account.PasswordSettings;
type TLAccountGetPasswordSettings struct {
	CurrentPasswordHash []byte `protobuf:"bytes,1,opt,name=current_password_hash,json=currentPasswordHash,proto3" json:"current_password_hash,omitempty"`
}

func (m *TLAccountGetPasswordSettings) Reset()         { *m = TLAccountGetPasswordSettings{} }
func (m *TLAccountGetPasswordSettings) String() string { return proto.CompactTextString(m) }
func (*TLAccountGetPasswordSettings) ProtoMessage()    {}
func (*TLAccountGetPasswordSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{45}
}
func (m *TLAccountGetPasswordSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountGetPasswordSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountGetPasswordSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountGetPasswordSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountGetPasswordSettings.Merge(m, src)
}
func (m *TLAccountGetPasswordSettings) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountGetPasswordSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountGetPasswordSettings.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountGetPasswordSettings proto.InternalMessageInfo

func (m *TLAccountGetPasswordSettings) GetCurrentPasswordHash() []byte {
	if m != nil {
		return m.CurrentPasswordHash
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// account.updatePasswordSettings#fa7c4b86 current_password_hash:bytes new_settings:account.PasswordInputSettings = Bool;
type TLAccountUpdatePasswordSettings struct {
	CurrentPasswordHash []byte                         `protobuf:"bytes,1,opt,name=current_password_hash,json=currentPasswordHash,proto3" json:"current_password_hash,omitempty"`
	NewSettings         *Account_PasswordInputSettings `protobuf:"bytes,2,opt,name=new_settings,json=newSettings,proto3" json:"new_settings,omitempty"`
}

func (m *TLAccountUpdatePasswordSettings) Reset()         { *m = TLAccountUpdatePasswordSettings{} }
func (m *TLAccountUpdatePasswordSettings) String() string { return proto.CompactTextString(m) }
func (*TLAccountUpdatePasswordSettings) ProtoMessage()    {}
func (*TLAccountUpdatePasswordSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{46}
}
func (m *TLAccountUpdatePasswordSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountUpdatePasswordSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountUpdatePasswordSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountUpdatePasswordSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountUpdatePasswordSettings.Merge(m, src)
}
func (m *TLAccountUpdatePasswordSettings) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountUpdatePasswordSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountUpdatePasswordSettings.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountUpdatePasswordSettings proto.InternalMessageInfo

func (m *TLAccountUpdatePasswordSettings) GetCurrentPasswordHash() []byte {
	if m != nil {
		return m.CurrentPasswordHash
	}
	return nil
}

func (m *TLAccountUpdatePasswordSettings) GetNewSettings() *Account_PasswordInputSettings {
	if m != nil {
		return m.NewSettings
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// account.sendConfirmPhoneCode#1516d7bd flags:# allow_flashcall:flags.0?true hash:string current_number:flags.0?Bool = auth.SentCode;
type TLAccountSendConfirmPhoneCode struct {
	AllowFlashcall bool   `protobuf:"varint,2,opt,name=allow_flashcall,json=allowFlashcall,proto3" json:"allow_flashcall,omitempty"`
	Hash           string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	CurrentNumber  *Bool  `protobuf:"bytes,4,opt,name=current_number,json=currentNumber,proto3" json:"current_number,omitempty"`
}

func (m *TLAccountSendConfirmPhoneCode) Reset()         { *m = TLAccountSendConfirmPhoneCode{} }
func (m *TLAccountSendConfirmPhoneCode) String() string { return proto.CompactTextString(m) }
func (*TLAccountSendConfirmPhoneCode) ProtoMessage()    {}
func (*TLAccountSendConfirmPhoneCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{47}
}
func (m *TLAccountSendConfirmPhoneCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountSendConfirmPhoneCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountSendConfirmPhoneCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountSendConfirmPhoneCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountSendConfirmPhoneCode.Merge(m, src)
}
func (m *TLAccountSendConfirmPhoneCode) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountSendConfirmPhoneCode) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountSendConfirmPhoneCode.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountSendConfirmPhoneCode proto.InternalMessageInfo

func (m *TLAccountSendConfirmPhoneCode) GetAllowFlashcall() bool {
	if m != nil {
		return m.AllowFlashcall
	}
	return false
}

func (m *TLAccountSendConfirmPhoneCode) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *TLAccountSendConfirmPhoneCode) GetCurrentNumber() *Bool {
	if m != nil {
		return m.CurrentNumber
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// account.confirmPhone#5f2178c3 phone_code_hash:string phone_code:string = Bool;
type TLAccountConfirmPhone struct {
	PhoneCodeHash string `protobuf:"bytes,1,opt,name=phone_code_hash,json=phoneCodeHash,proto3" json:"phone_code_hash,omitempty"`
	PhoneCode     string `protobuf:"bytes,2,opt,name=phone_code,json=phoneCode,proto3" json:"phone_code,omitempty"`
}

func (m *TLAccountConfirmPhone) Reset()         { *m = TLAccountConfirmPhone{} }
func (m *TLAccountConfirmPhone) String() string { return proto.CompactTextString(m) }
func (*TLAccountConfirmPhone) ProtoMessage()    {}
func (*TLAccountConfirmPhone) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{48}
}
func (m *TLAccountConfirmPhone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountConfirmPhone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountConfirmPhone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountConfirmPhone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountConfirmPhone.Merge(m, src)
}
func (m *TLAccountConfirmPhone) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountConfirmPhone) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountConfirmPhone.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountConfirmPhone proto.InternalMessageInfo

func (m *TLAccountConfirmPhone) GetPhoneCodeHash() string {
	if m != nil {
		return m.PhoneCodeHash
	}
	return ""
}

func (m *TLAccountConfirmPhone) GetPhoneCode() string {
	if m != nil {
		return m.PhoneCode
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// account.getTmpPassword#4a82327e password_hash:bytes period:int = account.TmpPassword;
type TLAccountGetTmpPassword struct {
	PasswordHash []byte `protobuf:"bytes,1,opt,name=password_hash,json=passwordHash,proto3" json:"password_hash,omitempty"`
	Period       int32  `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
}

func (m *TLAccountGetTmpPassword) Reset()         { *m = TLAccountGetTmpPassword{} }
func (m *TLAccountGetTmpPassword) String() string { return proto.CompactTextString(m) }
func (*TLAccountGetTmpPassword) ProtoMessage()    {}
func (*TLAccountGetTmpPassword) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{49}
}
func (m *TLAccountGetTmpPassword) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountGetTmpPassword) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountGetTmpPassword.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountGetTmpPassword) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountGetTmpPassword.Merge(m, src)
}
func (m *TLAccountGetTmpPassword) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountGetTmpPassword) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountGetTmpPassword.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountGetTmpPassword proto.InternalMessageInfo

func (m *TLAccountGetTmpPassword) GetPasswordHash() []byte {
	if m != nil {
		return m.PasswordHash
	}
	return nil
}

func (m *TLAccountGetTmpPassword) GetPeriod() int32 {
	if m != nil {
		return m.Period
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// users.getUsers#d91a548 id:Vector<InputUser> = Vector<User>;
type TLUsersGetUsers struct {
	Id []*InputUser `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (m *TLUsersGetUsers) Reset()         { *m = TLUsersGetUsers{} }
func (m *TLUsersGetUsers) String() string { return proto.CompactTextString(m) }
func (*TLUsersGetUsers) ProtoMessage()    {}
func (*TLUsersGetUsers) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{50}
}
func (m *TLUsersGetUsers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUsersGetUsers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUsersGetUsers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUsersGetUsers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUsersGetUsers.Merge(m, src)
}
func (m *TLUsersGetUsers) XXX_Size() int {
	return m.Size()
}
func (m *TLUsersGetUsers) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUsersGetUsers.DiscardUnknown(m)
}

var xxx_messageInfo_TLUsersGetUsers proto.InternalMessageInfo

func (m *TLUsersGetUsers) GetId() []*InputUser {
	if m != nil {
		return m.Id
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// users.getFullUser#ca30a5b1 id:InputUser = UserFull;
type TLUsersGetFullUser struct {
	Id *InputUser `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *TLUsersGetFullUser) Reset()         { *m = TLUsersGetFullUser{} }
func (m *TLUsersGetFullUser) String() string { return proto.CompactTextString(m) }
func (*TLUsersGetFullUser) ProtoMessage()    {}
func (*TLUsersGetFullUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{51}
}
func (m *TLUsersGetFullUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUsersGetFullUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUsersGetFullUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUsersGetFullUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUsersGetFullUser.Merge(m, src)
}
func (m *TLUsersGetFullUser) XXX_Size() int {
	return m.Size()
}
func (m *TLUsersGetFullUser) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUsersGetFullUser.DiscardUnknown(m)
}

var xxx_messageInfo_TLUsersGetFullUser proto.InternalMessageInfo

func (m *TLUsersGetFullUser) GetId() *InputUser {
	if m != nil {
		return m.Id
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// users.getUserInfo#f5d27282 id:InputUser = UserInfo;
type TLUsersGetUserInfo struct {
	Id *InputUser `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *TLUsersGetUserInfo) Reset()         { *m = TLUsersGetUserInfo{} }
func (m *TLUsersGetUserInfo) String() string { return proto.CompactTextString(m) }
func (*TLUsersGetUserInfo) ProtoMessage()    {}
func (*TLUsersGetUserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{52}
}
func (m *TLUsersGetUserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUsersGetUserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUsersGetUserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUsersGetUserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUsersGetUserInfo.Merge(m, src)
}
func (m *TLUsersGetUserInfo) XXX_Size() int {
	return m.Size()
}
func (m *TLUsersGetUserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUsersGetUserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TLUsersGetUserInfo proto.InternalMessageInfo

func (m *TLUsersGetUserInfo) GetId() *InputUser {
	if m != nil {
		return m.Id
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// users.getUserInfoList#b0809aa7 type:int offset:int count:int = Vector<UserInfo>;
type TLUsersGetUserInfoList struct {
	Type   int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Count  int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *TLUsersGetUserInfoList) Reset()         { *m = TLUsersGetUserInfoList{} }
func (m *TLUsersGetUserInfoList) String() string { return proto.CompactTextString(m) }
func (*TLUsersGetUserInfoList) ProtoMessage()    {}
func (*TLUsersGetUserInfoList) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{53}
}
func (m *TLUsersGetUserInfoList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUsersGetUserInfoList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUsersGetUserInfoList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUsersGetUserInfoList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUsersGetUserInfoList.Merge(m, src)
}
func (m *TLUsersGetUserInfoList) XXX_Size() int {
	return m.Size()
}
func (m *TLUsersGetUserInfoList) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUsersGetUserInfoList.DiscardUnknown(m)
}

var xxx_messageInfo_TLUsersGetUserInfoList proto.InternalMessageInfo

func (m *TLUsersGetUserInfoList) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *TLUsersGetUserInfoList) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TLUsersGetUserInfoList) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// users.getEnvelopeState#662f8850 eid:long access_hash:long = EnvelopeState;
type TLUsersGetEnvelopeState struct {
	Eid        int64 `protobuf:"varint,1,opt,name=eid,proto3" json:"eid,omitempty"`
	AccessHash int64 `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
}

func (m *TLUsersGetEnvelopeState) Reset()         { *m = TLUsersGetEnvelopeState{} }
func (m *TLUsersGetEnvelopeState) String() string { return proto.CompactTextString(m) }
func (*TLUsersGetEnvelopeState) ProtoMessage()    {}
func (*TLUsersGetEnvelopeState) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{54}
}
func (m *TLUsersGetEnvelopeState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUsersGetEnvelopeState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUsersGetEnvelopeState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUsersGetEnvelopeState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUsersGetEnvelopeState.Merge(m, src)
}
func (m *TLUsersGetEnvelopeState) XXX_Size() int {
	return m.Size()
}
func (m *TLUsersGetEnvelopeState) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUsersGetEnvelopeState.DiscardUnknown(m)
}

var xxx_messageInfo_TLUsersGetEnvelopeState proto.InternalMessageInfo

func (m *TLUsersGetEnvelopeState) GetEid() int64 {
	if m != nil {
		return m.Eid
	}
	return 0
}

func (m *TLUsersGetEnvelopeState) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// users.getEnvelopeInfo#fa469ec3 eid:long access_hash:long = EnvelopeInfo;
type TLUsersGetEnvelopeInfo struct {
	Eid        int64 `protobuf:"varint,1,opt,name=eid,proto3" json:"eid,omitempty"`
	AccessHash int64 `protobuf:"varint,2,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
}

func (m *TLUsersGetEnvelopeInfo) Reset()         { *m = TLUsersGetEnvelopeInfo{} }
func (m *TLUsersGetEnvelopeInfo) String() string { return proto.CompactTextString(m) }
func (*TLUsersGetEnvelopeInfo) ProtoMessage()    {}
func (*TLUsersGetEnvelopeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{55}
}
func (m *TLUsersGetEnvelopeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUsersGetEnvelopeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUsersGetEnvelopeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUsersGetEnvelopeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUsersGetEnvelopeInfo.Merge(m, src)
}
func (m *TLUsersGetEnvelopeInfo) XXX_Size() int {
	return m.Size()
}
func (m *TLUsersGetEnvelopeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUsersGetEnvelopeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TLUsersGetEnvelopeInfo proto.InternalMessageInfo

func (m *TLUsersGetEnvelopeInfo) GetEid() int64 {
	if m != nil {
		return m.Eid
	}
	return 0
}

func (m *TLUsersGetEnvelopeInfo) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// users.getPointsHistory#7e44b70b type:int offset:int limit:int year:int = PointsHistoryResult;
type TLUsersGetPointsHistory struct {
	Type   int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Year   int32 `protobuf:"varint,4,opt,name=year,proto3" json:"year,omitempty"`
}

func (m *TLUsersGetPointsHistory) Reset()         { *m = TLUsersGetPointsHistory{} }
func (m *TLUsersGetPointsHistory) String() string { return proto.CompactTextString(m) }
func (*TLUsersGetPointsHistory) ProtoMessage()    {}
func (*TLUsersGetPointsHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{56}
}
func (m *TLUsersGetPointsHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUsersGetPointsHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUsersGetPointsHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUsersGetPointsHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUsersGetPointsHistory.Merge(m, src)
}
func (m *TLUsersGetPointsHistory) XXX_Size() int {
	return m.Size()
}
func (m *TLUsersGetPointsHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUsersGetPointsHistory.DiscardUnknown(m)
}

var xxx_messageInfo_TLUsersGetPointsHistory proto.InternalMessageInfo

func (m *TLUsersGetPointsHistory) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *TLUsersGetPointsHistory) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TLUsersGetPointsHistory) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *TLUsersGetPointsHistory) GetYear() int32 {
	if m != nil {
		return m.Year
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// users.getPointsRank#538b283a type:int from_rank:int count:int = PointsRankResult;
type TLUsersGetPointsRank struct {
	Type     int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	FromRank int32 `protobuf:"varint,2,opt,name=from_rank,json=fromRank,proto3" json:"from_rank,omitempty"`
	Count    int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *TLUsersGetPointsRank) Reset()         { *m = TLUsersGetPointsRank{} }
func (m *TLUsersGetPointsRank) String() string { return proto.CompactTextString(m) }
func (*TLUsersGetPointsRank) ProtoMessage()    {}
func (*TLUsersGetPointsRank) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{57}
}
func (m *TLUsersGetPointsRank) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUsersGetPointsRank) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUsersGetPointsRank.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUsersGetPointsRank) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUsersGetPointsRank.Merge(m, src)
}
func (m *TLUsersGetPointsRank) XXX_Size() int {
	return m.Size()
}
func (m *TLUsersGetPointsRank) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUsersGetPointsRank.DiscardUnknown(m)
}

var xxx_messageInfo_TLUsersGetPointsRank proto.InternalMessageInfo

func (m *TLUsersGetPointsRank) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *TLUsersGetPointsRank) GetFromRank() int32 {
	if m != nil {
		return m.FromRank
	}
	return 0
}

func (m *TLUsersGetPointsRank) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// users.setPasswd#5ec5aa9c type:int phone_code:string old_pass:string passwd:string phone_number:string = IntResult;
type TLUsersSetPasswd struct {
	Type        int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	PhoneCode   string `protobuf:"bytes,2,opt,name=phone_code,json=phoneCode,proto3" json:"phone_code,omitempty"`
	OldPass     string `protobuf:"bytes,3,opt,name=old_pass,json=oldPass,proto3" json:"old_pass,omitempty"`
	Passwd      string `protobuf:"bytes,4,opt,name=passwd,proto3" json:"passwd,omitempty"`
	PhoneNumber string `protobuf:"bytes,5,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
}

func (m *TLUsersSetPasswd) Reset()         { *m = TLUsersSetPasswd{} }
func (m *TLUsersSetPasswd) String() string { return proto.CompactTextString(m) }
func (*TLUsersSetPasswd) ProtoMessage()    {}
func (*TLUsersSetPasswd) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{58}
}
func (m *TLUsersSetPasswd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUsersSetPasswd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUsersSetPasswd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUsersSetPasswd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUsersSetPasswd.Merge(m, src)
}
func (m *TLUsersSetPasswd) XXX_Size() int {
	return m.Size()
}
func (m *TLUsersSetPasswd) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUsersSetPasswd.DiscardUnknown(m)
}

var xxx_messageInfo_TLUsersSetPasswd proto.InternalMessageInfo

func (m *TLUsersSetPasswd) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *TLUsersSetPasswd) GetPhoneCode() string {
	if m != nil {
		return m.PhoneCode
	}
	return ""
}

func (m *TLUsersSetPasswd) GetOldPass() string {
	if m != nil {
		return m.OldPass
	}
	return ""
}

func (m *TLUsersSetPasswd) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

func (m *TLUsersSetPasswd) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// users.checkPasswd#58f01737 type:int passwd:string phone_number:string = IntResult;
type TLUsersCheckPasswd struct {
	Type        int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Passwd      string `protobuf:"bytes,2,opt,name=passwd,proto3" json:"passwd,omitempty"`
	PhoneNumber string `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
}

func (m *TLUsersCheckPasswd) Reset()         { *m = TLUsersCheckPasswd{} }
func (m *TLUsersCheckPasswd) String() string { return proto.CompactTextString(m) }
func (*TLUsersCheckPasswd) ProtoMessage()    {}
func (*TLUsersCheckPasswd) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{59}
}
func (m *TLUsersCheckPasswd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUsersCheckPasswd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUsersCheckPasswd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUsersCheckPasswd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUsersCheckPasswd.Merge(m, src)
}
func (m *TLUsersCheckPasswd) XXX_Size() int {
	return m.Size()
}
func (m *TLUsersCheckPasswd) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUsersCheckPasswd.DiscardUnknown(m)
}

var xxx_messageInfo_TLUsersCheckPasswd proto.InternalMessageInfo

func (m *TLUsersCheckPasswd) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *TLUsersCheckPasswd) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

func (m *TLUsersCheckPasswd) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// users.checkResetPasswdPhoneCode#7c210c23 type:int phone_code:string phone_number:string = IntResult;
type TLUsersCheckResetPasswdPhoneCode struct {
	Type        int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	PhoneCode   string `protobuf:"bytes,2,opt,name=phone_code,json=phoneCode,proto3" json:"phone_code,omitempty"`
	PhoneNumber string `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
}

func (m *TLUsersCheckResetPasswdPhoneCode) Reset()         { *m = TLUsersCheckResetPasswdPhoneCode{} }
func (m *TLUsersCheckResetPasswdPhoneCode) String() string { return proto.CompactTextString(m) }
func (*TLUsersCheckResetPasswdPhoneCode) ProtoMessage()    {}
func (*TLUsersCheckResetPasswdPhoneCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{60}
}
func (m *TLUsersCheckResetPasswdPhoneCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUsersCheckResetPasswdPhoneCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUsersCheckResetPasswdPhoneCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUsersCheckResetPasswdPhoneCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUsersCheckResetPasswdPhoneCode.Merge(m, src)
}
func (m *TLUsersCheckResetPasswdPhoneCode) XXX_Size() int {
	return m.Size()
}
func (m *TLUsersCheckResetPasswdPhoneCode) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUsersCheckResetPasswdPhoneCode.DiscardUnknown(m)
}

var xxx_messageInfo_TLUsersCheckResetPasswdPhoneCode proto.InternalMessageInfo

func (m *TLUsersCheckResetPasswdPhoneCode) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *TLUsersCheckResetPasswdPhoneCode) GetPhoneCode() string {
	if m != nil {
		return m.PhoneCode
	}
	return ""
}

func (m *TLUsersCheckResetPasswdPhoneCode) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// users.sendResetPasswdPhoneCode#de0c351e type:int phone_number:string = IntResult;
type TLUsersSendResetPasswdPhoneCode struct {
	Type        int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	PhoneNumber string `protobuf:"bytes,2,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
}

func (m *TLUsersSendResetPasswdPhoneCode) Reset()         { *m = TLUsersSendResetPasswdPhoneCode{} }
func (m *TLUsersSendResetPasswdPhoneCode) String() string { return proto.CompactTextString(m) }
func (*TLUsersSendResetPasswdPhoneCode) ProtoMessage()    {}
func (*TLUsersSendResetPasswdPhoneCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{61}
}
func (m *TLUsersSendResetPasswdPhoneCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUsersSendResetPasswdPhoneCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUsersSendResetPasswdPhoneCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUsersSendResetPasswdPhoneCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUsersSendResetPasswdPhoneCode.Merge(m, src)
}
func (m *TLUsersSendResetPasswdPhoneCode) XXX_Size() int {
	return m.Size()
}
func (m *TLUsersSendResetPasswdPhoneCode) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUsersSendResetPasswdPhoneCode.DiscardUnknown(m)
}

var xxx_messageInfo_TLUsersSendResetPasswdPhoneCode proto.InternalMessageInfo

func (m *TLUsersSendResetPasswdPhoneCode) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *TLUsersSendResetPasswdPhoneCode) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// users.setGender#865907ba json_content:string = IntResult;
type TLUsersSetGender struct {
	JsonContent string `protobuf:"bytes,1,opt,name=json_content,json=jsonContent,proto3" json:"json_content,omitempty"`
}

func (m *TLUsersSetGender) Reset()         { *m = TLUsersSetGender{} }
func (m *TLUsersSetGender) String() string { return proto.CompactTextString(m) }
func (*TLUsersSetGender) ProtoMessage()    {}
func (*TLUsersSetGender) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{62}
}
func (m *TLUsersSetGender) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUsersSetGender) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUsersSetGender.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUsersSetGender) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUsersSetGender.Merge(m, src)
}
func (m *TLUsersSetGender) XXX_Size() int {
	return m.Size()
}
func (m *TLUsersSetGender) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUsersSetGender.DiscardUnknown(m)
}

var xxx_messageInfo_TLUsersSetGender proto.InternalMessageInfo

func (m *TLUsersSetGender) GetJsonContent() string {
	if m != nil {
		return m.JsonContent
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// users.setUserInfo#d41b94d9 json_content:string = IntResult;
type TLUsersSetUserInfo struct {
	JsonContent string `protobuf:"bytes,1,opt,name=json_content,json=jsonContent,proto3" json:"json_content,omitempty"`
}

func (m *TLUsersSetUserInfo) Reset()         { *m = TLUsersSetUserInfo{} }
func (m *TLUsersSetUserInfo) String() string { return proto.CompactTextString(m) }
func (*TLUsersSetUserInfo) ProtoMessage()    {}
func (*TLUsersSetUserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{63}
}
func (m *TLUsersSetUserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUsersSetUserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUsersSetUserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUsersSetUserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUsersSetUserInfo.Merge(m, src)
}
func (m *TLUsersSetUserInfo) XXX_Size() int {
	return m.Size()
}
func (m *TLUsersSetUserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUsersSetUserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TLUsersSetUserInfo proto.InternalMessageInfo

func (m *TLUsersSetUserInfo) GetJsonContent() string {
	if m != nil {
		return m.JsonContent
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// contacts.applyFriend#408c0d8a json_content:string = IntResult;
type TLContactsApplyFriend struct {
	JsonContent string `protobuf:"bytes,1,opt,name=json_content,json=jsonContent,proto3" json:"json_content,omitempty"`
}

func (m *TLContactsApplyFriend) Reset()         { *m = TLContactsApplyFriend{} }
func (m *TLContactsApplyFriend) String() string { return proto.CompactTextString(m) }
func (*TLContactsApplyFriend) ProtoMessage()    {}
func (*TLContactsApplyFriend) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{64}
}
func (m *TLContactsApplyFriend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLContactsApplyFriend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLContactsApplyFriend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLContactsApplyFriend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLContactsApplyFriend.Merge(m, src)
}
func (m *TLContactsApplyFriend) XXX_Size() int {
	return m.Size()
}
func (m *TLContactsApplyFriend) XXX_DiscardUnknown() {
	xxx_messageInfo_TLContactsApplyFriend.DiscardUnknown(m)
}

var xxx_messageInfo_TLContactsApplyFriend proto.InternalMessageInfo

func (m *TLContactsApplyFriend) GetJsonContent() string {
	if m != nil {
		return m.JsonContent
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// contacts.auditApply#8d22f1fb json_content:string = IntResult;
type TLContactsAuditApply struct {
	JsonContent string `protobuf:"bytes,1,opt,name=json_content,json=jsonContent,proto3" json:"json_content,omitempty"`
}

func (m *TLContactsAuditApply) Reset()         { *m = TLContactsAuditApply{} }
func (m *TLContactsAuditApply) String() string { return proto.CompactTextString(m) }
func (*TLContactsAuditApply) ProtoMessage()    {}
func (*TLContactsAuditApply) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{65}
}
func (m *TLContactsAuditApply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLContactsAuditApply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLContactsAuditApply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLContactsAuditApply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLContactsAuditApply.Merge(m, src)
}
func (m *TLContactsAuditApply) XXX_Size() int {
	return m.Size()
}
func (m *TLContactsAuditApply) XXX_DiscardUnknown() {
	xxx_messageInfo_TLContactsAuditApply.DiscardUnknown(m)
}

var xxx_messageInfo_TLContactsAuditApply proto.InternalMessageInfo

func (m *TLContactsAuditApply) GetJsonContent() string {
	if m != nil {
		return m.JsonContent
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// contacts.getApplyList#3e392bb json_content:string = DataJSON;
type TLContactsGetApplyList struct {
	JsonContent string `protobuf:"bytes,1,opt,name=json_content,json=jsonContent,proto3" json:"json_content,omitempty"`
}

func (m *TLContactsGetApplyList) Reset()         { *m = TLContactsGetApplyList{} }
func (m *TLContactsGetApplyList) String() string { return proto.CompactTextString(m) }
func (*TLContactsGetApplyList) ProtoMessage()    {}
func (*TLContactsGetApplyList) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{66}
}
func (m *TLContactsGetApplyList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLContactsGetApplyList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLContactsGetApplyList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLContactsGetApplyList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLContactsGetApplyList.Merge(m, src)
}
func (m *TLContactsGetApplyList) XXX_Size() int {
	return m.Size()
}
func (m *TLContactsGetApplyList) XXX_DiscardUnknown() {
	xxx_messageInfo_TLContactsGetApplyList.DiscardUnknown(m)
}

var xxx_messageInfo_TLContactsGetApplyList proto.InternalMessageInfo

func (m *TLContactsGetApplyList) GetJsonContent() string {
	if m != nil {
		return m.JsonContent
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// contacts.searchUser#b4670944 json_content:string = DataJSON;
type TLContactsSearchUser struct {
	JsonContent string `protobuf:"bytes,1,opt,name=json_content,json=jsonContent,proto3" json:"json_content,omitempty"`
}

func (m *TLContactsSearchUser) Reset()         { *m = TLContactsSearchUser{} }
func (m *TLContactsSearchUser) String() string { return proto.CompactTextString(m) }
func (*TLContactsSearchUser) ProtoMessage()    {}
func (*TLContactsSearchUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{67}
}
func (m *TLContactsSearchUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLContactsSearchUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLContactsSearchUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLContactsSearchUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLContactsSearchUser.Merge(m, src)
}
func (m *TLContactsSearchUser) XXX_Size() int {
	return m.Size()
}
func (m *TLContactsSearchUser) XXX_DiscardUnknown() {
	xxx_messageInfo_TLContactsSearchUser.DiscardUnknown(m)
}

var xxx_messageInfo_TLContactsSearchUser proto.InternalMessageInfo

func (m *TLContactsSearchUser) GetJsonContent() string {
	if m != nil {
		return m.JsonContent
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// contacts.searchSource#f51b186d json_content:string = DataJSON;
type TLContactsSearchSource struct {
	JsonContent string `protobuf:"bytes,1,opt,name=json_content,json=jsonContent,proto3" json:"json_content,omitempty"`
}

func (m *TLContactsSearchSource) Reset()         { *m = TLContactsSearchSource{} }
func (m *TLContactsSearchSource) String() string { return proto.CompactTextString(m) }
func (*TLContactsSearchSource) ProtoMessage()    {}
func (*TLContactsSearchSource) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{68}
}
func (m *TLContactsSearchSource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLContactsSearchSource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLContactsSearchSource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLContactsSearchSource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLContactsSearchSource.Merge(m, src)
}
func (m *TLContactsSearchSource) XXX_Size() int {
	return m.Size()
}
func (m *TLContactsSearchSource) XXX_DiscardUnknown() {
	xxx_messageInfo_TLContactsSearchSource.DiscardUnknown(m)
}

var xxx_messageInfo_TLContactsSearchSource proto.InternalMessageInfo

func (m *TLContactsSearchSource) GetJsonContent() string {
	if m != nil {
		return m.JsonContent
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// contacts.getStatuses#c4a353ee = Vector<ContactStatus>;
type TLContactsGetStatuses struct {
}

func (m *TLContactsGetStatuses) Reset()         { *m = TLContactsGetStatuses{} }
func (m *TLContactsGetStatuses) String() string { return proto.CompactTextString(m) }
func (*TLContactsGetStatuses) ProtoMessage()    {}
func (*TLContactsGetStatuses) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{69}
}
func (m *TLContactsGetStatuses) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLContactsGetStatuses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLContactsGetStatuses.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLContactsGetStatuses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLContactsGetStatuses.Merge(m, src)
}
func (m *TLContactsGetStatuses) XXX_Size() int {
	return m.Size()
}
func (m *TLContactsGetStatuses) XXX_DiscardUnknown() {
	xxx_messageInfo_TLContactsGetStatuses.DiscardUnknown(m)
}

var xxx_messageInfo_TLContactsGetStatuses proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// contacts.getContacts#c023849f hash:int = contacts.Contacts;
type TLContactsGetContacts struct {
	Hash int32 `protobuf:"varint,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TLContactsGetContacts) Reset()         { *m = TLContactsGetContacts{} }
func (m *TLContactsGetContacts) String() string { return proto.CompactTextString(m) }
func (*TLContactsGetContacts) ProtoMessage()    {}
func (*TLContactsGetContacts) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{70}
}
func (m *TLContactsGetContacts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLContactsGetContacts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLContactsGetContacts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLContactsGetContacts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLContactsGetContacts.Merge(m, src)
}
func (m *TLContactsGetContacts) XXX_Size() int {
	return m.Size()
}
func (m *TLContactsGetContacts) XXX_DiscardUnknown() {
	xxx_messageInfo_TLContactsGetContacts.DiscardUnknown(m)
}

var xxx_messageInfo_TLContactsGetContacts proto.InternalMessageInfo

func (m *TLContactsGetContacts) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// contacts.importContacts#2c800be5 contacts:Vector<InputContact> = contacts.ImportedContacts;
type TLContactsImportContacts struct {
	Contacts []*InputContact `protobuf:"bytes,1,rep,name=contacts,proto3" json:"contacts,omitempty"`
}

func (m *TLContactsImportContacts) Reset()         { *m = TLContactsImportContacts{} }
func (m *TLContactsImportContacts) String() string { return proto.CompactTextString(m) }
func (*TLContactsImportContacts) ProtoMessage()    {}
func (*TLContactsImportContacts) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{71}
}
func (m *TLContactsImportContacts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLContactsImportContacts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLContactsImportContacts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLContactsImportContacts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLContactsImportContacts.Merge(m, src)
}
func (m *TLContactsImportContacts) XXX_Size() int {
	return m.Size()
}
func (m *TLContactsImportContacts) XXX_DiscardUnknown() {
	xxx_messageInfo_TLContactsImportContacts.DiscardUnknown(m)
}

var xxx_messageInfo_TLContactsImportContacts proto.InternalMessageInfo

func (m *TLContactsImportContacts) GetContacts() []*InputContact {
	if m != nil {
		return m.Contacts
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// contacts.deleteContact#8e953744 id:InputUser = contacts.Link;
type TLContactsDeleteContact struct {
	Id *InputUser `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *TLContactsDeleteContact) Reset()         { *m = TLContactsDeleteContact{} }
func (m *TLContactsDeleteContact) String() string { return proto.CompactTextString(m) }
func (*TLContactsDeleteContact) ProtoMessage()    {}
func (*TLContactsDeleteContact) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{72}
}
func (m *TLContactsDeleteContact) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLContactsDeleteContact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLContactsDeleteContact.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLContactsDeleteContact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLContactsDeleteContact.Merge(m, src)
}
func (m *TLContactsDeleteContact) XXX_Size() int {
	return m.Size()
}
func (m *TLContactsDeleteContact) XXX_DiscardUnknown() {
	xxx_messageInfo_TLContactsDeleteContact.DiscardUnknown(m)
}

var xxx_messageInfo_TLContactsDeleteContact proto.InternalMessageInfo

func (m *TLContactsDeleteContact) GetId() *InputUser {
	if m != nil {
		return m.Id
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// contacts.deleteContacts#59ab389e id:Vector<InputUser> = Bool;
type TLContactsDeleteContacts struct {
	Id []*InputUser `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (m *TLContactsDeleteContacts) Reset()         { *m = TLContactsDeleteContacts{} }
func (m *TLContactsDeleteContacts) String() string { return proto.CompactTextString(m) }
func (*TLContactsDeleteContacts) ProtoMessage()    {}
func (*TLContactsDeleteContacts) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{73}
}
func (m *TLContactsDeleteContacts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLContactsDeleteContacts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLContactsDeleteContacts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLContactsDeleteContacts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLContactsDeleteContacts.Merge(m, src)
}
func (m *TLContactsDeleteContacts) XXX_Size() int {
	return m.Size()
}
func (m *TLContactsDeleteContacts) XXX_DiscardUnknown() {
	xxx_messageInfo_TLContactsDeleteContacts.DiscardUnknown(m)
}

var xxx_messageInfo_TLContactsDeleteContacts proto.InternalMessageInfo

func (m *TLContactsDeleteContacts) GetId() []*InputUser {
	if m != nil {
		return m.Id
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// contacts.block#332b49fc id:InputUser = Bool;
type TLContactsBlock struct {
	Id *InputUser `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *TLContactsBlock) Reset()         { *m = TLContactsBlock{} }
func (m *TLContactsBlock) String() string { return proto.CompactTextString(m) }
func (*TLContactsBlock) ProtoMessage()    {}
func (*TLContactsBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{74}
}
func (m *TLContactsBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLContactsBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLContactsBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLContactsBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLContactsBlock.Merge(m, src)
}
func (m *TLContactsBlock) XXX_Size() int {
	return m.Size()
}
func (m *TLContactsBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_TLContactsBlock.DiscardUnknown(m)
}

var xxx_messageInfo_TLContactsBlock proto.InternalMessageInfo

func (m *TLContactsBlock) GetId() *InputUser {
	if m != nil {
		return m.Id
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// contacts.unblock#e54100bd id:InputUser = Bool;
type TLContactsUnblock struct {
	Id *InputUser `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *TLContactsUnblock) Reset()         { *m = TLContactsUnblock{} }
func (m *TLContactsUnblock) String() string { return proto.CompactTextString(m) }
func (*TLContactsUnblock) ProtoMessage()    {}
func (*TLContactsUnblock) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{75}
}
func (m *TLContactsUnblock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLContactsUnblock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLContactsUnblock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLContactsUnblock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLContactsUnblock.Merge(m, src)
}
func (m *TLContactsUnblock) XXX_Size() int {
	return m.Size()
}
func (m *TLContactsUnblock) XXX_DiscardUnknown() {
	xxx_messageInfo_TLContactsUnblock.DiscardUnknown(m)
}

var xxx_messageInfo_TLContactsUnblock proto.InternalMessageInfo

func (m *TLContactsUnblock) GetId() *InputUser {
	if m != nil {
		return m.Id
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// contacts.getBlocked#f57c350f offset:int limit:int = contacts.Blocked;
type TLContactsGetBlocked struct {
	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *TLContactsGetBlocked) Reset()         { *m = TLContactsGetBlocked{} }
func (m *TLContactsGetBlocked) String() string { return proto.CompactTextString(m) }
func (*TLContactsGetBlocked) ProtoMessage()    {}
func (*TLContactsGetBlocked) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{76}
}
func (m *TLContactsGetBlocked) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLContactsGetBlocked) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLContactsGetBlocked.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLContactsGetBlocked) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLContactsGetBlocked.Merge(m, src)
}
func (m *TLContactsGetBlocked) XXX_Size() int {
	return m.Size()
}
func (m *TLContactsGetBlocked) XXX_DiscardUnknown() {
	xxx_messageInfo_TLContactsGetBlocked.DiscardUnknown(m)
}

var xxx_messageInfo_TLContactsGetBlocked proto.InternalMessageInfo

func (m *TLContactsGetBlocked) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TLContactsGetBlocked) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// contacts.exportCard#84e53737 = Vector<int>;
type TLContactsExportCard struct {
}

func (m *TLContactsExportCard) Reset()         { *m = TLContactsExportCard{} }
func (m *TLContactsExportCard) String() string { return proto.CompactTextString(m) }
func (*TLContactsExportCard) ProtoMessage()    {}
func (*TLContactsExportCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{77}
}
func (m *TLContactsExportCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLContactsExportCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLContactsExportCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLContactsExportCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLContactsExportCard.Merge(m, src)
}
func (m *TLContactsExportCard) XXX_Size() int {
	return m.Size()
}
func (m *TLContactsExportCard) XXX_DiscardUnknown() {
	xxx_messageInfo_TLContactsExportCard.DiscardUnknown(m)
}

var xxx_messageInfo_TLContactsExportCard proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// contacts.importCard#4fe196fe export_card:Vector<int> = User;
type TLContactsImportCard struct {
	ExportCard []int32 `protobuf:"varint,1,rep,packed,name=export_card,json=exportCard,proto3" json:"export_card,omitempty"`
}

func (m *TLContactsImportCard) Reset()         { *m = TLContactsImportCard{} }
func (m *TLContactsImportCard) String() string { return proto.CompactTextString(m) }
func (*TLContactsImportCard) ProtoMessage()    {}
func (*TLContactsImportCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{78}
}
func (m *TLContactsImportCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLContactsImportCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLContactsImportCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLContactsImportCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLContactsImportCard.Merge(m, src)
}
func (m *TLContactsImportCard) XXX_Size() int {
	return m.Size()
}
func (m *TLContactsImportCard) XXX_DiscardUnknown() {
	xxx_messageInfo_TLContactsImportCard.DiscardUnknown(m)
}

var xxx_messageInfo_TLContactsImportCard proto.InternalMessageInfo

func (m *TLContactsImportCard) GetExportCard() []int32 {
	if m != nil {
		return m.ExportCard
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// contacts.search#11f812d8 q:string limit:int = contacts.Found;
type TLContactsSearch struct {
	Q     string `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
	Limit int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *TLContactsSearch) Reset()         { *m = TLContactsSearch{} }
func (m *TLContactsSearch) String() string { return proto.CompactTextString(m) }
func (*TLContactsSearch) ProtoMessage()    {}
func (*TLContactsSearch) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{79}
}
func (m *TLContactsSearch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLContactsSearch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLContactsSearch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLContactsSearch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLContactsSearch.Merge(m, src)
}
func (m *TLContactsSearch) XXX_Size() int {
	return m.Size()
}
func (m *TLContactsSearch) XXX_DiscardUnknown() {
	xxx_messageInfo_TLContactsSearch.DiscardUnknown(m)
}

var xxx_messageInfo_TLContactsSearch proto.InternalMessageInfo

func (m *TLContactsSearch) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

func (m *TLContactsSearch) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// contacts.resolveUsername#f93ccba3 username:string = contacts.ResolvedPeer;
type TLContactsResolveUsername struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
}

func (m *TLContactsResolveUsername) Reset()         { *m = TLContactsResolveUsername{} }
func (m *TLContactsResolveUsername) String() string { return proto.CompactTextString(m) }
func (*TLContactsResolveUsername) ProtoMessage()    {}
func (*TLContactsResolveUsername) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{80}
}
func (m *TLContactsResolveUsername) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLContactsResolveUsername) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLContactsResolveUsername.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLContactsResolveUsername) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLContactsResolveUsername.Merge(m, src)
}
func (m *TLContactsResolveUsername) XXX_Size() int {
	return m.Size()
}
func (m *TLContactsResolveUsername) XXX_DiscardUnknown() {
	xxx_messageInfo_TLContactsResolveUsername.DiscardUnknown(m)
}

var xxx_messageInfo_TLContactsResolveUsername proto.InternalMessageInfo

func (m *TLContactsResolveUsername) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// contacts.getTopPeers#d4982db5 flags:# correspondents:flags.0?true bots_pm:flags.1?true bots_inline:flags.2?true phone_calls:flags.3?true groups:flags.10?true channels:flags.15?true offset:int limit:int hash:int = contacts.TopPeers;
type TLContactsGetTopPeers struct {
	Correspondents bool  `protobuf:"varint,2,opt,name=correspondents,proto3" json:"correspondents,omitempty"`
	BotsPm         bool  `protobuf:"varint,3,opt,name=bots_pm,json=botsPm,proto3" json:"bots_pm,omitempty"`
	BotsInline     bool  `protobuf:"varint,4,opt,name=bots_inline,json=botsInline,proto3" json:"bots_inline,omitempty"`
	PhoneCalls     bool  `protobuf:"varint,5,opt,name=phone_calls,json=phoneCalls,proto3" json:"phone_calls,omitempty"`
	Groups         bool  `protobuf:"varint,6,opt,name=groups,proto3" json:"groups,omitempty"`
	Channels       bool  `protobuf:"varint,7,opt,name=channels,proto3" json:"channels,omitempty"`
	Offset         int32 `protobuf:"varint,8,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit          int32 `protobuf:"varint,9,opt,name=limit,proto3" json:"limit,omitempty"`
	Hash           int32 `protobuf:"varint,10,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TLContactsGetTopPeers) Reset()         { *m = TLContactsGetTopPeers{} }
func (m *TLContactsGetTopPeers) String() string { return proto.CompactTextString(m) }
func (*TLContactsGetTopPeers) ProtoMessage()    {}
func (*TLContactsGetTopPeers) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{81}
}
func (m *TLContactsGetTopPeers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLContactsGetTopPeers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLContactsGetTopPeers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLContactsGetTopPeers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLContactsGetTopPeers.Merge(m, src)
}
func (m *TLContactsGetTopPeers) XXX_Size() int {
	return m.Size()
}
func (m *TLContactsGetTopPeers) XXX_DiscardUnknown() {
	xxx_messageInfo_TLContactsGetTopPeers.DiscardUnknown(m)
}

var xxx_messageInfo_TLContactsGetTopPeers proto.InternalMessageInfo

func (m *TLContactsGetTopPeers) GetCorrespondents() bool {
	if m != nil {
		return m.Correspondents
	}
	return false
}

func (m *TLContactsGetTopPeers) GetBotsPm() bool {
	if m != nil {
		return m.BotsPm
	}
	return false
}

func (m *TLContactsGetTopPeers) GetBotsInline() bool {
	if m != nil {
		return m.BotsInline
	}
	return false
}

func (m *TLContactsGetTopPeers) GetPhoneCalls() bool {
	if m != nil {
		return m.PhoneCalls
	}
	return false
}

func (m *TLContactsGetTopPeers) GetGroups() bool {
	if m != nil {
		return m.Groups
	}
	return false
}

func (m *TLContactsGetTopPeers) GetChannels() bool {
	if m != nil {
		return m.Channels
	}
	return false
}

func (m *TLContactsGetTopPeers) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TLContactsGetTopPeers) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *TLContactsGetTopPeers) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// contacts.resetTopPeerRating#1ae373ac category:TopPeerCategory peer:InputPeer = Bool;
type TLContactsResetTopPeerRating struct {
	Category *TopPeerCategory `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	Peer     *InputPeer       `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *TLContactsResetTopPeerRating) Reset()         { *m = TLContactsResetTopPeerRating{} }
func (m *TLContactsResetTopPeerRating) String() string { return proto.CompactTextString(m) }
func (*TLContactsResetTopPeerRating) ProtoMessage()    {}
func (*TLContactsResetTopPeerRating) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{82}
}
func (m *TLContactsResetTopPeerRating) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLContactsResetTopPeerRating) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLContactsResetTopPeerRating.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLContactsResetTopPeerRating) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLContactsResetTopPeerRating.Merge(m, src)
}
func (m *TLContactsResetTopPeerRating) XXX_Size() int {
	return m.Size()
}
func (m *TLContactsResetTopPeerRating) XXX_DiscardUnknown() {
	xxx_messageInfo_TLContactsResetTopPeerRating.DiscardUnknown(m)
}

var xxx_messageInfo_TLContactsResetTopPeerRating proto.InternalMessageInfo

func (m *TLContactsResetTopPeerRating) GetCategory() *TopPeerCategory {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *TLContactsResetTopPeerRating) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// contacts.resetSaved#879537f1 = Bool;
type TLContactsResetSaved struct {
}

func (m *TLContactsResetSaved) Reset()         { *m = TLContactsResetSaved{} }
func (m *TLContactsResetSaved) String() string { return proto.CompactTextString(m) }
func (*TLContactsResetSaved) ProtoMessage()    {}
func (*TLContactsResetSaved) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{83}
}
func (m *TLContactsResetSaved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLContactsResetSaved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLContactsResetSaved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLContactsResetSaved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLContactsResetSaved.Merge(m, src)
}
func (m *TLContactsResetSaved) XXX_Size() int {
	return m.Size()
}
func (m *TLContactsResetSaved) XXX_DiscardUnknown() {
	xxx_messageInfo_TLContactsResetSaved.DiscardUnknown(m)
}

var xxx_messageInfo_TLContactsResetSaved proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// messages.getMessages#4222fa74 id:Vector<int> = messages.Messages;
type TLMessagesGetMessages struct {
	Id []int32 `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (m *TLMessagesGetMessages) Reset()         { *m = TLMessagesGetMessages{} }
func (m *TLMessagesGetMessages) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetMessages) ProtoMessage()    {}
func (*TLMessagesGetMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{84}
}
func (m *TLMessagesGetMessages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetMessages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetMessages.Merge(m, src)
}
func (m *TLMessagesGetMessages) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetMessages.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetMessages proto.InternalMessageInfo

func (m *TLMessagesGetMessages) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.getDialogs#191ba9c5 flags:# exclude_pinned:flags.0?true offset_date:int offset_id:int offset_peer:InputPeer limit:int = messages.Dialogs;
type TLMessagesGetDialogs struct {
	ExcludePinned bool       `protobuf:"varint,2,opt,name=exclude_pinned,json=excludePinned,proto3" json:"exclude_pinned,omitempty"`
	OffsetDate    int32      `protobuf:"varint,3,opt,name=offset_date,json=offsetDate,proto3" json:"offset_date,omitempty"`
	OffsetId      int32      `protobuf:"varint,4,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	OffsetPeer    *InputPeer `protobuf:"bytes,5,opt,name=offset_peer,json=offsetPeer,proto3" json:"offset_peer,omitempty"`
	Limit         int32      `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *TLMessagesGetDialogs) Reset()         { *m = TLMessagesGetDialogs{} }
func (m *TLMessagesGetDialogs) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetDialogs) ProtoMessage()    {}
func (*TLMessagesGetDialogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{85}
}
func (m *TLMessagesGetDialogs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetDialogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetDialogs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetDialogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetDialogs.Merge(m, src)
}
func (m *TLMessagesGetDialogs) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetDialogs) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetDialogs.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetDialogs proto.InternalMessageInfo

func (m *TLMessagesGetDialogs) GetExcludePinned() bool {
	if m != nil {
		return m.ExcludePinned
	}
	return false
}

func (m *TLMessagesGetDialogs) GetOffsetDate() int32 {
	if m != nil {
		return m.OffsetDate
	}
	return 0
}

func (m *TLMessagesGetDialogs) GetOffsetId() int32 {
	if m != nil {
		return m.OffsetId
	}
	return 0
}

func (m *TLMessagesGetDialogs) GetOffsetPeer() *InputPeer {
	if m != nil {
		return m.OffsetPeer
	}
	return nil
}

func (m *TLMessagesGetDialogs) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.getHistory#afa92846 peer:InputPeer offset_id:int offset_date:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;
type TLMessagesGetHistory struct {
	Peer       *InputPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	OffsetId   int32      `protobuf:"varint,2,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	OffsetDate int32      `protobuf:"varint,3,opt,name=offset_date,json=offsetDate,proto3" json:"offset_date,omitempty"`
	AddOffset  int32      `protobuf:"varint,4,opt,name=add_offset,json=addOffset,proto3" json:"add_offset,omitempty"`
	Limit      int32      `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	MaxId      int32      `protobuf:"varint,6,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	MinId      int32      `protobuf:"varint,7,opt,name=min_id,json=minId,proto3" json:"min_id,omitempty"`
}

func (m *TLMessagesGetHistory) Reset()         { *m = TLMessagesGetHistory{} }
func (m *TLMessagesGetHistory) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetHistory) ProtoMessage()    {}
func (*TLMessagesGetHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{86}
}
func (m *TLMessagesGetHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetHistory.Merge(m, src)
}
func (m *TLMessagesGetHistory) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetHistory.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetHistory proto.InternalMessageInfo

func (m *TLMessagesGetHistory) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesGetHistory) GetOffsetId() int32 {
	if m != nil {
		return m.OffsetId
	}
	return 0
}

func (m *TLMessagesGetHistory) GetOffsetDate() int32 {
	if m != nil {
		return m.OffsetDate
	}
	return 0
}

func (m *TLMessagesGetHistory) GetAddOffset() int32 {
	if m != nil {
		return m.AddOffset
	}
	return 0
}

func (m *TLMessagesGetHistory) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *TLMessagesGetHistory) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *TLMessagesGetHistory) GetMinId() int32 {
	if m != nil {
		return m.MinId
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.search#39e9ea0 flags:# peer:InputPeer q:string from_id:flags.0?InputUser filter:MessagesFilter min_date:int max_date:int offset_id:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;
type TLMessagesSearch struct {
	Peer      *InputPeer      `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
	Q         string          `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	FromId    *InputUser      `protobuf:"bytes,4,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	Filter    *MessagesFilter `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
	MinDate   int32           `protobuf:"varint,6,opt,name=min_date,json=minDate,proto3" json:"min_date,omitempty"`
	MaxDate   int32           `protobuf:"varint,7,opt,name=max_date,json=maxDate,proto3" json:"max_date,omitempty"`
	OffsetId  int32           `protobuf:"varint,8,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	AddOffset int32           `protobuf:"varint,9,opt,name=add_offset,json=addOffset,proto3" json:"add_offset,omitempty"`
	Limit     int32           `protobuf:"varint,10,opt,name=limit,proto3" json:"limit,omitempty"`
	MaxId     int32           `protobuf:"varint,11,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	MinId     int32           `protobuf:"varint,12,opt,name=min_id,json=minId,proto3" json:"min_id,omitempty"`
}

func (m *TLMessagesSearch) Reset()         { *m = TLMessagesSearch{} }
func (m *TLMessagesSearch) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSearch) ProtoMessage()    {}
func (*TLMessagesSearch) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{87}
}
func (m *TLMessagesSearch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSearch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSearch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSearch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSearch.Merge(m, src)
}
func (m *TLMessagesSearch) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSearch) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSearch.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSearch proto.InternalMessageInfo

func (m *TLMessagesSearch) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSearch) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

func (m *TLMessagesSearch) GetFromId() *InputUser {
	if m != nil {
		return m.FromId
	}
	return nil
}

func (m *TLMessagesSearch) GetFilter() *MessagesFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *TLMessagesSearch) GetMinDate() int32 {
	if m != nil {
		return m.MinDate
	}
	return 0
}

func (m *TLMessagesSearch) GetMaxDate() int32 {
	if m != nil {
		return m.MaxDate
	}
	return 0
}

func (m *TLMessagesSearch) GetOffsetId() int32 {
	if m != nil {
		return m.OffsetId
	}
	return 0
}

func (m *TLMessagesSearch) GetAddOffset() int32 {
	if m != nil {
		return m.AddOffset
	}
	return 0
}

func (m *TLMessagesSearch) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *TLMessagesSearch) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *TLMessagesSearch) GetMinId() int32 {
	if m != nil {
		return m.MinId
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.readHistory#e306d3a peer:InputPeer max_id:int = messages.AffectedMessages;
type TLMessagesReadHistory struct {
	Peer  *InputPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	MaxId int32      `protobuf:"varint,2,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
}

func (m *TLMessagesReadHistory) Reset()         { *m = TLMessagesReadHistory{} }
func (m *TLMessagesReadHistory) String() string { return proto.CompactTextString(m) }
func (*TLMessagesReadHistory) ProtoMessage()    {}
func (*TLMessagesReadHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{88}
}
func (m *TLMessagesReadHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesReadHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesReadHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesReadHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesReadHistory.Merge(m, src)
}
func (m *TLMessagesReadHistory) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesReadHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesReadHistory.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesReadHistory proto.InternalMessageInfo

func (m *TLMessagesReadHistory) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesReadHistory) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.deleteHistory#1c015b09 flags:# just_clear:flags.0?true revoke:flags.1?true peer:InputPeer max_id:int = messages.AffectedHistory;
type TLMessagesDeleteHistory struct {
	JustClear bool       `protobuf:"varint,2,opt,name=just_clear,json=justClear,proto3" json:"just_clear,omitempty"`
	Revoke    bool       `protobuf:"varint,3,opt,name=revoke,proto3" json:"revoke,omitempty"`
	Peer      *InputPeer `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	MaxId     int32      `protobuf:"varint,5,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
}

func (m *TLMessagesDeleteHistory) Reset()         { *m = TLMessagesDeleteHistory{} }
func (m *TLMessagesDeleteHistory) String() string { return proto.CompactTextString(m) }
func (*TLMessagesDeleteHistory) ProtoMessage()    {}
func (*TLMessagesDeleteHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{89}
}
func (m *TLMessagesDeleteHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesDeleteHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesDeleteHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesDeleteHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesDeleteHistory.Merge(m, src)
}
func (m *TLMessagesDeleteHistory) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesDeleteHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesDeleteHistory.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesDeleteHistory proto.InternalMessageInfo

func (m *TLMessagesDeleteHistory) GetJustClear() bool {
	if m != nil {
		return m.JustClear
	}
	return false
}

func (m *TLMessagesDeleteHistory) GetRevoke() bool {
	if m != nil {
		return m.Revoke
	}
	return false
}

func (m *TLMessagesDeleteHistory) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesDeleteHistory) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.deleteMessages#e58e95d2 flags:# revoke:flags.0?true id:Vector<int> = messages.AffectedMessages;
type TLMessagesDeleteMessages struct {
	Revoke bool    `protobuf:"varint,2,opt,name=revoke,proto3" json:"revoke,omitempty"`
	Id     []int32 `protobuf:"varint,3,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (m *TLMessagesDeleteMessages) Reset()         { *m = TLMessagesDeleteMessages{} }
func (m *TLMessagesDeleteMessages) String() string { return proto.CompactTextString(m) }
func (*TLMessagesDeleteMessages) ProtoMessage()    {}
func (*TLMessagesDeleteMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{90}
}
func (m *TLMessagesDeleteMessages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesDeleteMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesDeleteMessages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesDeleteMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesDeleteMessages.Merge(m, src)
}
func (m *TLMessagesDeleteMessages) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesDeleteMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesDeleteMessages.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesDeleteMessages proto.InternalMessageInfo

func (m *TLMessagesDeleteMessages) GetRevoke() bool {
	if m != nil {
		return m.Revoke
	}
	return false
}

func (m *TLMessagesDeleteMessages) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.receivedMessages#5a954c0 max_id:int = Vector<ReceivedNotifyMessage>;
type TLMessagesReceivedMessages struct {
	MaxId int32 `protobuf:"varint,1,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
}

func (m *TLMessagesReceivedMessages) Reset()         { *m = TLMessagesReceivedMessages{} }
func (m *TLMessagesReceivedMessages) String() string { return proto.CompactTextString(m) }
func (*TLMessagesReceivedMessages) ProtoMessage()    {}
func (*TLMessagesReceivedMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{91}
}
func (m *TLMessagesReceivedMessages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesReceivedMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesReceivedMessages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesReceivedMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesReceivedMessages.Merge(m, src)
}
func (m *TLMessagesReceivedMessages) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesReceivedMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesReceivedMessages.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesReceivedMessages proto.InternalMessageInfo

func (m *TLMessagesReceivedMessages) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.setTyping#a3825e50 peer:InputPeer action:SendMessageAction = Bool;
type TLMessagesSetTyping struct {
	Peer   *InputPeer         `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Action *SendMessageAction `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
}

func (m *TLMessagesSetTyping) Reset()         { *m = TLMessagesSetTyping{} }
func (m *TLMessagesSetTyping) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSetTyping) ProtoMessage()    {}
func (*TLMessagesSetTyping) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{92}
}
func (m *TLMessagesSetTyping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSetTyping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSetTyping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSetTyping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSetTyping.Merge(m, src)
}
func (m *TLMessagesSetTyping) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSetTyping) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSetTyping.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSetTyping proto.InternalMessageInfo

func (m *TLMessagesSetTyping) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSetTyping) GetAction() *SendMessageAction {
	if m != nil {
		return m.Action
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.sendMessage#fa88427a flags:# no_webpage:flags.1?true silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Updates;
type TLMessagesSendMessage struct {
	NoWebpage    bool             `protobuf:"varint,2,opt,name=no_webpage,json=noWebpage,proto3" json:"no_webpage,omitempty"`
	Silent       bool             `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`
	Background   bool             `protobuf:"varint,4,opt,name=background,proto3" json:"background,omitempty"`
	ClearDraft   bool             `protobuf:"varint,5,opt,name=clear_draft,json=clearDraft,proto3" json:"clear_draft,omitempty"`
	Peer         *InputPeer       `protobuf:"bytes,6,opt,name=peer,proto3" json:"peer,omitempty"`
	ReplyToMsgId int32            `protobuf:"varint,7,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	Message      string           `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	RandomId     int64            `protobuf:"varint,9,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	ReplyMarkup  *ReplyMarkup     `protobuf:"bytes,10,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
	Entities     []*MessageEntity `protobuf:"bytes,11,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (m *TLMessagesSendMessage) Reset()         { *m = TLMessagesSendMessage{} }
func (m *TLMessagesSendMessage) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSendMessage) ProtoMessage()    {}
func (*TLMessagesSendMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{93}
}
func (m *TLMessagesSendMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSendMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSendMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSendMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSendMessage.Merge(m, src)
}
func (m *TLMessagesSendMessage) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSendMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSendMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSendMessage proto.InternalMessageInfo

func (m *TLMessagesSendMessage) GetNoWebpage() bool {
	if m != nil {
		return m.NoWebpage
	}
	return false
}

func (m *TLMessagesSendMessage) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *TLMessagesSendMessage) GetBackground() bool {
	if m != nil {
		return m.Background
	}
	return false
}

func (m *TLMessagesSendMessage) GetClearDraft() bool {
	if m != nil {
		return m.ClearDraft
	}
	return false
}

func (m *TLMessagesSendMessage) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSendMessage) GetReplyToMsgId() int32 {
	if m != nil {
		return m.ReplyToMsgId
	}
	return 0
}

func (m *TLMessagesSendMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TLMessagesSendMessage) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *TLMessagesSendMessage) GetReplyMarkup() *ReplyMarkup {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

func (m *TLMessagesSendMessage) GetEntities() []*MessageEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.sendMedia#c8f16791 flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int media:InputMedia random_id:long reply_markup:flags.2?ReplyMarkup = Updates;
type TLMessagesSendMedia struct {
	Silent       bool         `protobuf:"varint,2,opt,name=silent,proto3" json:"silent,omitempty"`
	Background   bool         `protobuf:"varint,3,opt,name=background,proto3" json:"background,omitempty"`
	ClearDraft   bool         `protobuf:"varint,4,opt,name=clear_draft,json=clearDraft,proto3" json:"clear_draft,omitempty"`
	Peer         *InputPeer   `protobuf:"bytes,5,opt,name=peer,proto3" json:"peer,omitempty"`
	ReplyToMsgId int32        `protobuf:"varint,6,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	Media        *InputMedia  `protobuf:"bytes,7,opt,name=media,proto3" json:"media,omitempty"`
	RandomId     int64        `protobuf:"varint,8,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	ReplyMarkup  *ReplyMarkup `protobuf:"bytes,9,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
}

func (m *TLMessagesSendMedia) Reset()         { *m = TLMessagesSendMedia{} }
func (m *TLMessagesSendMedia) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSendMedia) ProtoMessage()    {}
func (*TLMessagesSendMedia) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{94}
}
func (m *TLMessagesSendMedia) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSendMedia) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSendMedia.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSendMedia) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSendMedia.Merge(m, src)
}
func (m *TLMessagesSendMedia) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSendMedia) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSendMedia.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSendMedia proto.InternalMessageInfo

func (m *TLMessagesSendMedia) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *TLMessagesSendMedia) GetBackground() bool {
	if m != nil {
		return m.Background
	}
	return false
}

func (m *TLMessagesSendMedia) GetClearDraft() bool {
	if m != nil {
		return m.ClearDraft
	}
	return false
}

func (m *TLMessagesSendMedia) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSendMedia) GetReplyToMsgId() int32 {
	if m != nil {
		return m.ReplyToMsgId
	}
	return 0
}

func (m *TLMessagesSendMedia) GetMedia() *InputMedia {
	if m != nil {
		return m.Media
	}
	return nil
}

func (m *TLMessagesSendMedia) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *TLMessagesSendMedia) GetReplyMarkup() *ReplyMarkup {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.forwardMessages#708e0195 flags:# silent:flags.5?true background:flags.6?true with_my_score:flags.8?true from_peer:InputPeer id:Vector<int> random_id:Vector<long> to_peer:InputPeer = Updates;
type TLMessagesForwardMessages struct {
	Silent      bool       `protobuf:"varint,2,opt,name=silent,proto3" json:"silent,omitempty"`
	Background  bool       `protobuf:"varint,3,opt,name=background,proto3" json:"background,omitempty"`
	WithMyScore bool       `protobuf:"varint,4,opt,name=with_my_score,json=withMyScore,proto3" json:"with_my_score,omitempty"`
	FromPeer    *InputPeer `protobuf:"bytes,5,opt,name=from_peer,json=fromPeer,proto3" json:"from_peer,omitempty"`
	Id          []int32    `protobuf:"varint,6,rep,packed,name=id,proto3" json:"id,omitempty"`
	RandomId    []int64    `protobuf:"varint,7,rep,packed,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	ToPeer      *InputPeer `protobuf:"bytes,8,opt,name=to_peer,json=toPeer,proto3" json:"to_peer,omitempty"`
}

func (m *TLMessagesForwardMessages) Reset()         { *m = TLMessagesForwardMessages{} }
func (m *TLMessagesForwardMessages) String() string { return proto.CompactTextString(m) }
func (*TLMessagesForwardMessages) ProtoMessage()    {}
func (*TLMessagesForwardMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{95}
}
func (m *TLMessagesForwardMessages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesForwardMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesForwardMessages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesForwardMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesForwardMessages.Merge(m, src)
}
func (m *TLMessagesForwardMessages) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesForwardMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesForwardMessages.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesForwardMessages proto.InternalMessageInfo

func (m *TLMessagesForwardMessages) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *TLMessagesForwardMessages) GetBackground() bool {
	if m != nil {
		return m.Background
	}
	return false
}

func (m *TLMessagesForwardMessages) GetWithMyScore() bool {
	if m != nil {
		return m.WithMyScore
	}
	return false
}

func (m *TLMessagesForwardMessages) GetFromPeer() *InputPeer {
	if m != nil {
		return m.FromPeer
	}
	return nil
}

func (m *TLMessagesForwardMessages) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TLMessagesForwardMessages) GetRandomId() []int64 {
	if m != nil {
		return m.RandomId
	}
	return nil
}

func (m *TLMessagesForwardMessages) GetToPeer() *InputPeer {
	if m != nil {
		return m.ToPeer
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.reportSpam#cf1592db peer:InputPeer = Bool;
type TLMessagesReportSpam struct {
	Peer *InputPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *TLMessagesReportSpam) Reset()         { *m = TLMessagesReportSpam{} }
func (m *TLMessagesReportSpam) String() string { return proto.CompactTextString(m) }
func (*TLMessagesReportSpam) ProtoMessage()    {}
func (*TLMessagesReportSpam) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{96}
}
func (m *TLMessagesReportSpam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesReportSpam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesReportSpam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesReportSpam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesReportSpam.Merge(m, src)
}
func (m *TLMessagesReportSpam) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesReportSpam) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesReportSpam.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesReportSpam proto.InternalMessageInfo

func (m *TLMessagesReportSpam) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.hideReportSpam#a8f1709b peer:InputPeer = Bool;
type TLMessagesHideReportSpam struct {
	Peer *InputPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *TLMessagesHideReportSpam) Reset()         { *m = TLMessagesHideReportSpam{} }
func (m *TLMessagesHideReportSpam) String() string { return proto.CompactTextString(m) }
func (*TLMessagesHideReportSpam) ProtoMessage()    {}
func (*TLMessagesHideReportSpam) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{97}
}
func (m *TLMessagesHideReportSpam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesHideReportSpam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesHideReportSpam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesHideReportSpam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesHideReportSpam.Merge(m, src)
}
func (m *TLMessagesHideReportSpam) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesHideReportSpam) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesHideReportSpam.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesHideReportSpam proto.InternalMessageInfo

func (m *TLMessagesHideReportSpam) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.getPeerSettings#3672e09c peer:InputPeer = PeerSettings;
type TLMessagesGetPeerSettings struct {
	Peer *InputPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *TLMessagesGetPeerSettings) Reset()         { *m = TLMessagesGetPeerSettings{} }
func (m *TLMessagesGetPeerSettings) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetPeerSettings) ProtoMessage()    {}
func (*TLMessagesGetPeerSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{98}
}
func (m *TLMessagesGetPeerSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetPeerSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetPeerSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetPeerSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetPeerSettings.Merge(m, src)
}
func (m *TLMessagesGetPeerSettings) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetPeerSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetPeerSettings.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetPeerSettings proto.InternalMessageInfo

func (m *TLMessagesGetPeerSettings) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.getChats#3c6aa187 id:Vector<int> = messages.Chats;
type TLMessagesGetChats struct {
	Id []int32 `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (m *TLMessagesGetChats) Reset()         { *m = TLMessagesGetChats{} }
func (m *TLMessagesGetChats) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetChats) ProtoMessage()    {}
func (*TLMessagesGetChats) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{99}
}
func (m *TLMessagesGetChats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetChats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetChats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetChats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetChats.Merge(m, src)
}
func (m *TLMessagesGetChats) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetChats) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetChats.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetChats proto.InternalMessageInfo

func (m *TLMessagesGetChats) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.getFullChat#3b831c66 chat_id:int = messages.ChatFull;
type TLMessagesGetFullChat struct {
	ChatId int32 `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
}

func (m *TLMessagesGetFullChat) Reset()         { *m = TLMessagesGetFullChat{} }
func (m *TLMessagesGetFullChat) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetFullChat) ProtoMessage()    {}
func (*TLMessagesGetFullChat) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{100}
}
func (m *TLMessagesGetFullChat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetFullChat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetFullChat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetFullChat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetFullChat.Merge(m, src)
}
func (m *TLMessagesGetFullChat) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetFullChat) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetFullChat.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetFullChat proto.InternalMessageInfo

func (m *TLMessagesGetFullChat) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.editChatTitle#dc452855 chat_id:int title:string = Updates;
type TLMessagesEditChatTitle struct {
	ChatId int32  `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Title  string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (m *TLMessagesEditChatTitle) Reset()         { *m = TLMessagesEditChatTitle{} }
func (m *TLMessagesEditChatTitle) String() string { return proto.CompactTextString(m) }
func (*TLMessagesEditChatTitle) ProtoMessage()    {}
func (*TLMessagesEditChatTitle) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{101}
}
func (m *TLMessagesEditChatTitle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesEditChatTitle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesEditChatTitle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesEditChatTitle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesEditChatTitle.Merge(m, src)
}
func (m *TLMessagesEditChatTitle) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesEditChatTitle) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesEditChatTitle.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesEditChatTitle proto.InternalMessageInfo

func (m *TLMessagesEditChatTitle) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *TLMessagesEditChatTitle) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// messages.editChatPhoto#ca4c79d8 chat_id:int photo:InputChatPhoto = Updates;
type TLMessagesEditChatPhoto struct {
	ChatId int32           `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Photo  *InputChatPhoto `protobuf:"bytes,2,opt,name=photo,proto3" json:"photo,omitempty"`
}

func (m *TLMessagesEditChatPhoto) Reset()         { *m = TLMessagesEditChatPhoto{} }
func (m *TLMessagesEditChatPhoto) String() string { return proto.CompactTextString(m) }
func (*TLMessagesEditChatPhoto) ProtoMessage()    {}
func (*TLMessagesEditChatPhoto) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{102}
}
func (m *TLMessagesEditChatPhoto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesEditChatPhoto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesEditChatPhoto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesEditChatPhoto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesEditChatPhoto.Merge(m, src)
}
func (m *TLMessagesEditChatPhoto) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesEditChatPhoto) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesEditChatPhoto.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesEditChatPhoto proto.InternalMessageInfo

func (m *TLMessagesEditChatPhoto) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *TLMessagesEditChatPhoto) GetPhoto() *InputChatPhoto {
	if m != nil {
		return m.Photo
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.addChatUser#f9a0aa09 chat_id:int user_id:InputUser fwd_limit:int = Updates;
type TLMessagesAddChatUser struct {
	ChatId   int32      `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId   *InputUser `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FwdLimit int32      `protobuf:"varint,3,opt,name=fwd_limit,json=fwdLimit,proto3" json:"fwd_limit,omitempty"`
}

func (m *TLMessagesAddChatUser) Reset()         { *m = TLMessagesAddChatUser{} }
func (m *TLMessagesAddChatUser) String() string { return proto.CompactTextString(m) }
func (*TLMessagesAddChatUser) ProtoMessage()    {}
func (*TLMessagesAddChatUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{103}
}
func (m *TLMessagesAddChatUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesAddChatUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesAddChatUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesAddChatUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesAddChatUser.Merge(m, src)
}
func (m *TLMessagesAddChatUser) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesAddChatUser) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesAddChatUser.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesAddChatUser proto.InternalMessageInfo

func (m *TLMessagesAddChatUser) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *TLMessagesAddChatUser) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *TLMessagesAddChatUser) GetFwdLimit() int32 {
	if m != nil {
		return m.FwdLimit
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.deleteChatUser#e0611f16 chat_id:int user_id:InputUser = Updates;
type TLMessagesDeleteChatUser struct {
	ChatId int32      `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId *InputUser `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *TLMessagesDeleteChatUser) Reset()         { *m = TLMessagesDeleteChatUser{} }
func (m *TLMessagesDeleteChatUser) String() string { return proto.CompactTextString(m) }
func (*TLMessagesDeleteChatUser) ProtoMessage()    {}
func (*TLMessagesDeleteChatUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{104}
}
func (m *TLMessagesDeleteChatUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesDeleteChatUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesDeleteChatUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesDeleteChatUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesDeleteChatUser.Merge(m, src)
}
func (m *TLMessagesDeleteChatUser) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesDeleteChatUser) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesDeleteChatUser.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesDeleteChatUser proto.InternalMessageInfo

func (m *TLMessagesDeleteChatUser) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *TLMessagesDeleteChatUser) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.createChat#9cb126e users:Vector<InputUser> title:string = Updates;
type TLMessagesCreateChat struct {
	Users []*InputUser `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	Title string       `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (m *TLMessagesCreateChat) Reset()         { *m = TLMessagesCreateChat{} }
func (m *TLMessagesCreateChat) String() string { return proto.CompactTextString(m) }
func (*TLMessagesCreateChat) ProtoMessage()    {}
func (*TLMessagesCreateChat) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{105}
}
func (m *TLMessagesCreateChat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesCreateChat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesCreateChat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesCreateChat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesCreateChat.Merge(m, src)
}
func (m *TLMessagesCreateChat) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesCreateChat) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesCreateChat.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesCreateChat proto.InternalMessageInfo

func (m *TLMessagesCreateChat) GetUsers() []*InputUser {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *TLMessagesCreateChat) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// messages.forwardMessage#33963bf9 peer:InputPeer id:int random_id:long = Updates;
type TLMessagesForwardMessage struct {
	Peer     *InputPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Id       int32      `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	RandomId int64      `protobuf:"varint,3,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
}

func (m *TLMessagesForwardMessage) Reset()         { *m = TLMessagesForwardMessage{} }
func (m *TLMessagesForwardMessage) String() string { return proto.CompactTextString(m) }
func (*TLMessagesForwardMessage) ProtoMessage()    {}
func (*TLMessagesForwardMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{106}
}
func (m *TLMessagesForwardMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesForwardMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesForwardMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesForwardMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesForwardMessage.Merge(m, src)
}
func (m *TLMessagesForwardMessage) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesForwardMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesForwardMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesForwardMessage proto.InternalMessageInfo

func (m *TLMessagesForwardMessage) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesForwardMessage) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TLMessagesForwardMessage) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.getDhConfig#26cf8950 version:int random_length:int = messages.DhConfig;
type TLMessagesGetDhConfig struct {
	Version      int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	RandomLength int32 `protobuf:"varint,2,opt,name=random_length,json=randomLength,proto3" json:"random_length,omitempty"`
}

func (m *TLMessagesGetDhConfig) Reset()         { *m = TLMessagesGetDhConfig{} }
func (m *TLMessagesGetDhConfig) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetDhConfig) ProtoMessage()    {}
func (*TLMessagesGetDhConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{107}
}
func (m *TLMessagesGetDhConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetDhConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetDhConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetDhConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetDhConfig.Merge(m, src)
}
func (m *TLMessagesGetDhConfig) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetDhConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetDhConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetDhConfig proto.InternalMessageInfo

func (m *TLMessagesGetDhConfig) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *TLMessagesGetDhConfig) GetRandomLength() int32 {
	if m != nil {
		return m.RandomLength
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.requestEncryption#f64daf43 user_id:InputUser random_id:int g_a:bytes = EncryptedChat;
type TLMessagesRequestEncryption struct {
	UserId   *InputUser `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RandomId int32      `protobuf:"varint,2,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	GA       []byte     `protobuf:"bytes,3,opt,name=g_a,json=gA,proto3" json:"g_a,omitempty"`
}

func (m *TLMessagesRequestEncryption) Reset()         { *m = TLMessagesRequestEncryption{} }
func (m *TLMessagesRequestEncryption) String() string { return proto.CompactTextString(m) }
func (*TLMessagesRequestEncryption) ProtoMessage()    {}
func (*TLMessagesRequestEncryption) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{108}
}
func (m *TLMessagesRequestEncryption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesRequestEncryption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesRequestEncryption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesRequestEncryption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesRequestEncryption.Merge(m, src)
}
func (m *TLMessagesRequestEncryption) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesRequestEncryption) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesRequestEncryption.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesRequestEncryption proto.InternalMessageInfo

func (m *TLMessagesRequestEncryption) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *TLMessagesRequestEncryption) GetRandomId() int32 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *TLMessagesRequestEncryption) GetGA() []byte {
	if m != nil {
		return m.GA
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.acceptEncryption#3dbc0415 peer:InputEncryptedChat g_b:bytes key_fingerprint:long = EncryptedChat;
type TLMessagesAcceptEncryption struct {
	Peer           *InputEncryptedChat `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	GB             []byte              `protobuf:"bytes,2,opt,name=g_b,json=gB,proto3" json:"g_b,omitempty"`
	KeyFingerprint int64               `protobuf:"varint,3,opt,name=key_fingerprint,json=keyFingerprint,proto3" json:"key_fingerprint,omitempty"`
}

func (m *TLMessagesAcceptEncryption) Reset()         { *m = TLMessagesAcceptEncryption{} }
func (m *TLMessagesAcceptEncryption) String() string { return proto.CompactTextString(m) }
func (*TLMessagesAcceptEncryption) ProtoMessage()    {}
func (*TLMessagesAcceptEncryption) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{109}
}
func (m *TLMessagesAcceptEncryption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesAcceptEncryption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesAcceptEncryption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesAcceptEncryption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesAcceptEncryption.Merge(m, src)
}
func (m *TLMessagesAcceptEncryption) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesAcceptEncryption) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesAcceptEncryption.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesAcceptEncryption proto.InternalMessageInfo

func (m *TLMessagesAcceptEncryption) GetPeer() *InputEncryptedChat {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesAcceptEncryption) GetGB() []byte {
	if m != nil {
		return m.GB
	}
	return nil
}

func (m *TLMessagesAcceptEncryption) GetKeyFingerprint() int64 {
	if m != nil {
		return m.KeyFingerprint
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.discardEncryption#edd923c5 chat_id:int = Bool;
type TLMessagesDiscardEncryption struct {
	ChatId int32 `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
}

func (m *TLMessagesDiscardEncryption) Reset()         { *m = TLMessagesDiscardEncryption{} }
func (m *TLMessagesDiscardEncryption) String() string { return proto.CompactTextString(m) }
func (*TLMessagesDiscardEncryption) ProtoMessage()    {}
func (*TLMessagesDiscardEncryption) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{110}
}
func (m *TLMessagesDiscardEncryption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesDiscardEncryption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesDiscardEncryption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesDiscardEncryption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesDiscardEncryption.Merge(m, src)
}
func (m *TLMessagesDiscardEncryption) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesDiscardEncryption) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesDiscardEncryption.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesDiscardEncryption proto.InternalMessageInfo

func (m *TLMessagesDiscardEncryption) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.setEncryptedTyping#791451ed peer:InputEncryptedChat typing:Bool = Bool;
type TLMessagesSetEncryptedTyping struct {
	Peer   *InputEncryptedChat `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Typing *Bool               `protobuf:"bytes,2,opt,name=typing,proto3" json:"typing,omitempty"`
}

func (m *TLMessagesSetEncryptedTyping) Reset()         { *m = TLMessagesSetEncryptedTyping{} }
func (m *TLMessagesSetEncryptedTyping) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSetEncryptedTyping) ProtoMessage()    {}
func (*TLMessagesSetEncryptedTyping) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{111}
}
func (m *TLMessagesSetEncryptedTyping) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSetEncryptedTyping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSetEncryptedTyping.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSetEncryptedTyping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSetEncryptedTyping.Merge(m, src)
}
func (m *TLMessagesSetEncryptedTyping) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSetEncryptedTyping) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSetEncryptedTyping.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSetEncryptedTyping proto.InternalMessageInfo

func (m *TLMessagesSetEncryptedTyping) GetPeer() *InputEncryptedChat {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSetEncryptedTyping) GetTyping() *Bool {
	if m != nil {
		return m.Typing
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.readEncryptedHistory#7f4b690a peer:InputEncryptedChat max_date:int = Bool;
type TLMessagesReadEncryptedHistory struct {
	Peer    *InputEncryptedChat `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	MaxDate int32               `protobuf:"varint,2,opt,name=max_date,json=maxDate,proto3" json:"max_date,omitempty"`
}

func (m *TLMessagesReadEncryptedHistory) Reset()         { *m = TLMessagesReadEncryptedHistory{} }
func (m *TLMessagesReadEncryptedHistory) String() string { return proto.CompactTextString(m) }
func (*TLMessagesReadEncryptedHistory) ProtoMessage()    {}
func (*TLMessagesReadEncryptedHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{112}
}
func (m *TLMessagesReadEncryptedHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesReadEncryptedHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesReadEncryptedHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesReadEncryptedHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesReadEncryptedHistory.Merge(m, src)
}
func (m *TLMessagesReadEncryptedHistory) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesReadEncryptedHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesReadEncryptedHistory.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesReadEncryptedHistory proto.InternalMessageInfo

func (m *TLMessagesReadEncryptedHistory) GetPeer() *InputEncryptedChat {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesReadEncryptedHistory) GetMaxDate() int32 {
	if m != nil {
		return m.MaxDate
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.sendEncrypted#a9776773 peer:InputEncryptedChat random_id:long data:bytes = messages.SentEncryptedMessage;
type TLMessagesSendEncrypted struct {
	Peer     *InputEncryptedChat `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	RandomId int64               `protobuf:"varint,2,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	Data     []byte              `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *TLMessagesSendEncrypted) Reset()         { *m = TLMessagesSendEncrypted{} }
func (m *TLMessagesSendEncrypted) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSendEncrypted) ProtoMessage()    {}
func (*TLMessagesSendEncrypted) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{113}
}
func (m *TLMessagesSendEncrypted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSendEncrypted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSendEncrypted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSendEncrypted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSendEncrypted.Merge(m, src)
}
func (m *TLMessagesSendEncrypted) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSendEncrypted) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSendEncrypted.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSendEncrypted proto.InternalMessageInfo

func (m *TLMessagesSendEncrypted) GetPeer() *InputEncryptedChat {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSendEncrypted) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *TLMessagesSendEncrypted) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.sendEncryptedFile#9a901b66 peer:InputEncryptedChat random_id:long data:bytes file:InputEncryptedFile = messages.SentEncryptedMessage;
type TLMessagesSendEncryptedFile struct {
	Peer     *InputEncryptedChat `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	RandomId int64               `protobuf:"varint,2,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	Data     []byte              `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	File     *InputEncryptedFile `protobuf:"bytes,4,opt,name=file,proto3" json:"file,omitempty"`
}

func (m *TLMessagesSendEncryptedFile) Reset()         { *m = TLMessagesSendEncryptedFile{} }
func (m *TLMessagesSendEncryptedFile) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSendEncryptedFile) ProtoMessage()    {}
func (*TLMessagesSendEncryptedFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{114}
}
func (m *TLMessagesSendEncryptedFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSendEncryptedFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSendEncryptedFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSendEncryptedFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSendEncryptedFile.Merge(m, src)
}
func (m *TLMessagesSendEncryptedFile) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSendEncryptedFile) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSendEncryptedFile.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSendEncryptedFile proto.InternalMessageInfo

func (m *TLMessagesSendEncryptedFile) GetPeer() *InputEncryptedChat {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSendEncryptedFile) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *TLMessagesSendEncryptedFile) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TLMessagesSendEncryptedFile) GetFile() *InputEncryptedFile {
	if m != nil {
		return m.File
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.sendEncryptedService#32d439a4 peer:InputEncryptedChat random_id:long data:bytes = messages.SentEncryptedMessage;
type TLMessagesSendEncryptedService struct {
	Peer     *InputEncryptedChat `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	RandomId int64               `protobuf:"varint,2,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	Data     []byte              `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *TLMessagesSendEncryptedService) Reset()         { *m = TLMessagesSendEncryptedService{} }
func (m *TLMessagesSendEncryptedService) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSendEncryptedService) ProtoMessage()    {}
func (*TLMessagesSendEncryptedService) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{115}
}
func (m *TLMessagesSendEncryptedService) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSendEncryptedService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSendEncryptedService.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSendEncryptedService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSendEncryptedService.Merge(m, src)
}
func (m *TLMessagesSendEncryptedService) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSendEncryptedService) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSendEncryptedService.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSendEncryptedService proto.InternalMessageInfo

func (m *TLMessagesSendEncryptedService) GetPeer() *InputEncryptedChat {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSendEncryptedService) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *TLMessagesSendEncryptedService) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.receivedQueue#55a5bb66 max_qts:int = Vector<long>;
type TLMessagesReceivedQueue struct {
	MaxQts int32 `protobuf:"varint,1,opt,name=max_qts,json=maxQts,proto3" json:"max_qts,omitempty"`
}

func (m *TLMessagesReceivedQueue) Reset()         { *m = TLMessagesReceivedQueue{} }
func (m *TLMessagesReceivedQueue) String() string { return proto.CompactTextString(m) }
func (*TLMessagesReceivedQueue) ProtoMessage()    {}
func (*TLMessagesReceivedQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{116}
}
func (m *TLMessagesReceivedQueue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesReceivedQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesReceivedQueue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesReceivedQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesReceivedQueue.Merge(m, src)
}
func (m *TLMessagesReceivedQueue) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesReceivedQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesReceivedQueue.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesReceivedQueue proto.InternalMessageInfo

func (m *TLMessagesReceivedQueue) GetMaxQts() int32 {
	if m != nil {
		return m.MaxQts
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.reportEncryptedSpam#4b0c8c0f peer:InputEncryptedChat = Bool;
type TLMessagesReportEncryptedSpam struct {
	Peer *InputEncryptedChat `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *TLMessagesReportEncryptedSpam) Reset()         { *m = TLMessagesReportEncryptedSpam{} }
func (m *TLMessagesReportEncryptedSpam) String() string { return proto.CompactTextString(m) }
func (*TLMessagesReportEncryptedSpam) ProtoMessage()    {}
func (*TLMessagesReportEncryptedSpam) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{117}
}
func (m *TLMessagesReportEncryptedSpam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesReportEncryptedSpam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesReportEncryptedSpam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesReportEncryptedSpam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesReportEncryptedSpam.Merge(m, src)
}
func (m *TLMessagesReportEncryptedSpam) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesReportEncryptedSpam) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesReportEncryptedSpam.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesReportEncryptedSpam proto.InternalMessageInfo

func (m *TLMessagesReportEncryptedSpam) GetPeer() *InputEncryptedChat {
	if m != nil {
		return m.Peer
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.readMessageContents#36a73f77 id:Vector<int> = messages.AffectedMessages;
type TLMessagesReadMessageContents struct {
	Id []int32 `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (m *TLMessagesReadMessageContents) Reset()         { *m = TLMessagesReadMessageContents{} }
func (m *TLMessagesReadMessageContents) String() string { return proto.CompactTextString(m) }
func (*TLMessagesReadMessageContents) ProtoMessage()    {}
func (*TLMessagesReadMessageContents) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{118}
}
func (m *TLMessagesReadMessageContents) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesReadMessageContents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesReadMessageContents.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesReadMessageContents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesReadMessageContents.Merge(m, src)
}
func (m *TLMessagesReadMessageContents) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesReadMessageContents) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesReadMessageContents.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesReadMessageContents proto.InternalMessageInfo

func (m *TLMessagesReadMessageContents) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.getAllStickers#1c9618b1 hash:int = messages.AllStickers;
type TLMessagesGetAllStickers struct {
	Hash int32 `protobuf:"varint,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TLMessagesGetAllStickers) Reset()         { *m = TLMessagesGetAllStickers{} }
func (m *TLMessagesGetAllStickers) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetAllStickers) ProtoMessage()    {}
func (*TLMessagesGetAllStickers) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{119}
}
func (m *TLMessagesGetAllStickers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetAllStickers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetAllStickers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetAllStickers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetAllStickers.Merge(m, src)
}
func (m *TLMessagesGetAllStickers) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetAllStickers) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetAllStickers.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetAllStickers proto.InternalMessageInfo

func (m *TLMessagesGetAllStickers) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.getWebPagePreview#25223e24 message:string = MessageMedia;
type TLMessagesGetWebPagePreview struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *TLMessagesGetWebPagePreview) Reset()         { *m = TLMessagesGetWebPagePreview{} }
func (m *TLMessagesGetWebPagePreview) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetWebPagePreview) ProtoMessage()    {}
func (*TLMessagesGetWebPagePreview) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{120}
}
func (m *TLMessagesGetWebPagePreview) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetWebPagePreview) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetWebPagePreview.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetWebPagePreview) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetWebPagePreview.Merge(m, src)
}
func (m *TLMessagesGetWebPagePreview) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetWebPagePreview) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetWebPagePreview.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetWebPagePreview proto.InternalMessageInfo

func (m *TLMessagesGetWebPagePreview) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// messages.exportChatInvite#7d885289 chat_id:int = ExportedChatInvite;
type TLMessagesExportChatInvite struct {
	ChatId int32 `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
}

func (m *TLMessagesExportChatInvite) Reset()         { *m = TLMessagesExportChatInvite{} }
func (m *TLMessagesExportChatInvite) String() string { return proto.CompactTextString(m) }
func (*TLMessagesExportChatInvite) ProtoMessage()    {}
func (*TLMessagesExportChatInvite) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{121}
}
func (m *TLMessagesExportChatInvite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesExportChatInvite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesExportChatInvite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesExportChatInvite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesExportChatInvite.Merge(m, src)
}
func (m *TLMessagesExportChatInvite) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesExportChatInvite) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesExportChatInvite.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesExportChatInvite proto.InternalMessageInfo

func (m *TLMessagesExportChatInvite) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.checkChatInvite#3eadb1bb hash:string = ChatInvite;
type TLMessagesCheckChatInvite struct {
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TLMessagesCheckChatInvite) Reset()         { *m = TLMessagesCheckChatInvite{} }
func (m *TLMessagesCheckChatInvite) String() string { return proto.CompactTextString(m) }
func (*TLMessagesCheckChatInvite) ProtoMessage()    {}
func (*TLMessagesCheckChatInvite) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{122}
}
func (m *TLMessagesCheckChatInvite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesCheckChatInvite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesCheckChatInvite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesCheckChatInvite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesCheckChatInvite.Merge(m, src)
}
func (m *TLMessagesCheckChatInvite) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesCheckChatInvite) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesCheckChatInvite.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesCheckChatInvite proto.InternalMessageInfo

func (m *TLMessagesCheckChatInvite) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// messages.importChatInvite#6c50051c hash:string = Updates;
type TLMessagesImportChatInvite struct {
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TLMessagesImportChatInvite) Reset()         { *m = TLMessagesImportChatInvite{} }
func (m *TLMessagesImportChatInvite) String() string { return proto.CompactTextString(m) }
func (*TLMessagesImportChatInvite) ProtoMessage()    {}
func (*TLMessagesImportChatInvite) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{123}
}
func (m *TLMessagesImportChatInvite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesImportChatInvite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesImportChatInvite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesImportChatInvite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesImportChatInvite.Merge(m, src)
}
func (m *TLMessagesImportChatInvite) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesImportChatInvite) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesImportChatInvite.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesImportChatInvite proto.InternalMessageInfo

func (m *TLMessagesImportChatInvite) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// messages.getStickerSet#2619a90e stickerset:InputStickerSet = messages.StickerSet;
type TLMessagesGetStickerSet struct {
	Stickerset *InputStickerSet `protobuf:"bytes,1,opt,name=stickerset,proto3" json:"stickerset,omitempty"`
}

func (m *TLMessagesGetStickerSet) Reset()         { *m = TLMessagesGetStickerSet{} }
func (m *TLMessagesGetStickerSet) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetStickerSet) ProtoMessage()    {}
func (*TLMessagesGetStickerSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{124}
}
func (m *TLMessagesGetStickerSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetStickerSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetStickerSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetStickerSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetStickerSet.Merge(m, src)
}
func (m *TLMessagesGetStickerSet) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetStickerSet) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetStickerSet.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetStickerSet proto.InternalMessageInfo

func (m *TLMessagesGetStickerSet) GetStickerset() *InputStickerSet {
	if m != nil {
		return m.Stickerset
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.installStickerSet#c78fe460 stickerset:InputStickerSet archived:Bool = messages.StickerSetInstallResult;
type TLMessagesInstallStickerSet struct {
	Stickerset *InputStickerSet `protobuf:"bytes,1,opt,name=stickerset,proto3" json:"stickerset,omitempty"`
	Archived   *Bool            `protobuf:"bytes,2,opt,name=archived,proto3" json:"archived,omitempty"`
}

func (m *TLMessagesInstallStickerSet) Reset()         { *m = TLMessagesInstallStickerSet{} }
func (m *TLMessagesInstallStickerSet) String() string { return proto.CompactTextString(m) }
func (*TLMessagesInstallStickerSet) ProtoMessage()    {}
func (*TLMessagesInstallStickerSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{125}
}
func (m *TLMessagesInstallStickerSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesInstallStickerSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesInstallStickerSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesInstallStickerSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesInstallStickerSet.Merge(m, src)
}
func (m *TLMessagesInstallStickerSet) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesInstallStickerSet) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesInstallStickerSet.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesInstallStickerSet proto.InternalMessageInfo

func (m *TLMessagesInstallStickerSet) GetStickerset() *InputStickerSet {
	if m != nil {
		return m.Stickerset
	}
	return nil
}

func (m *TLMessagesInstallStickerSet) GetArchived() *Bool {
	if m != nil {
		return m.Archived
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.uninstallStickerSet#f96e55de stickerset:InputStickerSet = Bool;
type TLMessagesUninstallStickerSet struct {
	Stickerset *InputStickerSet `protobuf:"bytes,1,opt,name=stickerset,proto3" json:"stickerset,omitempty"`
}

func (m *TLMessagesUninstallStickerSet) Reset()         { *m = TLMessagesUninstallStickerSet{} }
func (m *TLMessagesUninstallStickerSet) String() string { return proto.CompactTextString(m) }
func (*TLMessagesUninstallStickerSet) ProtoMessage()    {}
func (*TLMessagesUninstallStickerSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{126}
}
func (m *TLMessagesUninstallStickerSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesUninstallStickerSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesUninstallStickerSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesUninstallStickerSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesUninstallStickerSet.Merge(m, src)
}
func (m *TLMessagesUninstallStickerSet) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesUninstallStickerSet) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesUninstallStickerSet.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesUninstallStickerSet proto.InternalMessageInfo

func (m *TLMessagesUninstallStickerSet) GetStickerset() *InputStickerSet {
	if m != nil {
		return m.Stickerset
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.startBot#e6df7378 bot:InputUser peer:InputPeer random_id:long start_param:string = Updates;
type TLMessagesStartBot struct {
	Bot        *InputUser `protobuf:"bytes,1,opt,name=bot,proto3" json:"bot,omitempty"`
	Peer       *InputPeer `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
	RandomId   int64      `protobuf:"varint,3,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	StartParam string     `protobuf:"bytes,4,opt,name=start_param,json=startParam,proto3" json:"start_param,omitempty"`
}

func (m *TLMessagesStartBot) Reset()         { *m = TLMessagesStartBot{} }
func (m *TLMessagesStartBot) String() string { return proto.CompactTextString(m) }
func (*TLMessagesStartBot) ProtoMessage()    {}
func (*TLMessagesStartBot) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{127}
}
func (m *TLMessagesStartBot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesStartBot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesStartBot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesStartBot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesStartBot.Merge(m, src)
}
func (m *TLMessagesStartBot) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesStartBot) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesStartBot.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesStartBot proto.InternalMessageInfo

func (m *TLMessagesStartBot) GetBot() *InputUser {
	if m != nil {
		return m.Bot
	}
	return nil
}

func (m *TLMessagesStartBot) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesStartBot) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *TLMessagesStartBot) GetStartParam() string {
	if m != nil {
		return m.StartParam
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// messages.getMessagesViews#c4c8a55d peer:InputPeer id:Vector<int> increment:Bool = Vector<int>;
type TLMessagesGetMessagesViews struct {
	Peer      *InputPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Id        []int32    `protobuf:"varint,2,rep,packed,name=id,proto3" json:"id,omitempty"`
	Increment *Bool      `protobuf:"bytes,3,opt,name=increment,proto3" json:"increment,omitempty"`
}

func (m *TLMessagesGetMessagesViews) Reset()         { *m = TLMessagesGetMessagesViews{} }
func (m *TLMessagesGetMessagesViews) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetMessagesViews) ProtoMessage()    {}
func (*TLMessagesGetMessagesViews) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{128}
}
func (m *TLMessagesGetMessagesViews) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetMessagesViews) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetMessagesViews.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetMessagesViews) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetMessagesViews.Merge(m, src)
}
func (m *TLMessagesGetMessagesViews) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetMessagesViews) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetMessagesViews.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetMessagesViews proto.InternalMessageInfo

func (m *TLMessagesGetMessagesViews) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesGetMessagesViews) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TLMessagesGetMessagesViews) GetIncrement() *Bool {
	if m != nil {
		return m.Increment
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.toggleChatAdmins#ec8bd9e1 chat_id:int enabled:Bool = Updates;
type TLMessagesToggleChatAdmins struct {
	ChatId  int32 `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Enabled *Bool `protobuf:"bytes,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (m *TLMessagesToggleChatAdmins) Reset()         { *m = TLMessagesToggleChatAdmins{} }
func (m *TLMessagesToggleChatAdmins) String() string { return proto.CompactTextString(m) }
func (*TLMessagesToggleChatAdmins) ProtoMessage()    {}
func (*TLMessagesToggleChatAdmins) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{129}
}
func (m *TLMessagesToggleChatAdmins) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesToggleChatAdmins) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesToggleChatAdmins.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesToggleChatAdmins) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesToggleChatAdmins.Merge(m, src)
}
func (m *TLMessagesToggleChatAdmins) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesToggleChatAdmins) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesToggleChatAdmins.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesToggleChatAdmins proto.InternalMessageInfo

func (m *TLMessagesToggleChatAdmins) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *TLMessagesToggleChatAdmins) GetEnabled() *Bool {
	if m != nil {
		return m.Enabled
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.editChatAdmin#a9e69f2e chat_id:int user_id:InputUser is_admin:Bool = Bool;
type TLMessagesEditChatAdmin struct {
	ChatId  int32      `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	UserId  *InputUser `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IsAdmin *Bool      `protobuf:"bytes,3,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`
}

func (m *TLMessagesEditChatAdmin) Reset()         { *m = TLMessagesEditChatAdmin{} }
func (m *TLMessagesEditChatAdmin) String() string { return proto.CompactTextString(m) }
func (*TLMessagesEditChatAdmin) ProtoMessage()    {}
func (*TLMessagesEditChatAdmin) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{130}
}
func (m *TLMessagesEditChatAdmin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesEditChatAdmin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesEditChatAdmin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesEditChatAdmin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesEditChatAdmin.Merge(m, src)
}
func (m *TLMessagesEditChatAdmin) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesEditChatAdmin) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesEditChatAdmin.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesEditChatAdmin proto.InternalMessageInfo

func (m *TLMessagesEditChatAdmin) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

func (m *TLMessagesEditChatAdmin) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *TLMessagesEditChatAdmin) GetIsAdmin() *Bool {
	if m != nil {
		return m.IsAdmin
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.migrateChat#15a3b8e3 chat_id:int = Updates;
type TLMessagesMigrateChat struct {
	ChatId int32 `protobuf:"varint,1,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
}

func (m *TLMessagesMigrateChat) Reset()         { *m = TLMessagesMigrateChat{} }
func (m *TLMessagesMigrateChat) String() string { return proto.CompactTextString(m) }
func (*TLMessagesMigrateChat) ProtoMessage()    {}
func (*TLMessagesMigrateChat) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{131}
}
func (m *TLMessagesMigrateChat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesMigrateChat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesMigrateChat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesMigrateChat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesMigrateChat.Merge(m, src)
}
func (m *TLMessagesMigrateChat) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesMigrateChat) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesMigrateChat.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesMigrateChat proto.InternalMessageInfo

func (m *TLMessagesMigrateChat) GetChatId() int32 {
	if m != nil {
		return m.ChatId
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.searchGlobal#9e3cacb0 q:string offset_date:int offset_peer:InputPeer offset_id:int limit:int = messages.Messages;
type TLMessagesSearchGlobal struct {
	Q          string     `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
	OffsetDate int32      `protobuf:"varint,2,opt,name=offset_date,json=offsetDate,proto3" json:"offset_date,omitempty"`
	OffsetPeer *InputPeer `protobuf:"bytes,3,opt,name=offset_peer,json=offsetPeer,proto3" json:"offset_peer,omitempty"`
	OffsetId   int32      `protobuf:"varint,4,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	Limit      int32      `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *TLMessagesSearchGlobal) Reset()         { *m = TLMessagesSearchGlobal{} }
func (m *TLMessagesSearchGlobal) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSearchGlobal) ProtoMessage()    {}
func (*TLMessagesSearchGlobal) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{132}
}
func (m *TLMessagesSearchGlobal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSearchGlobal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSearchGlobal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSearchGlobal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSearchGlobal.Merge(m, src)
}
func (m *TLMessagesSearchGlobal) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSearchGlobal) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSearchGlobal.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSearchGlobal proto.InternalMessageInfo

func (m *TLMessagesSearchGlobal) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

func (m *TLMessagesSearchGlobal) GetOffsetDate() int32 {
	if m != nil {
		return m.OffsetDate
	}
	return 0
}

func (m *TLMessagesSearchGlobal) GetOffsetPeer() *InputPeer {
	if m != nil {
		return m.OffsetPeer
	}
	return nil
}

func (m *TLMessagesSearchGlobal) GetOffsetId() int32 {
	if m != nil {
		return m.OffsetId
	}
	return 0
}

func (m *TLMessagesSearchGlobal) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.reorderStickerSets#78337739 flags:# masks:flags.0?true order:Vector<long> = Bool;
type TLMessagesReorderStickerSets struct {
	Masks bool    `protobuf:"varint,2,opt,name=masks,proto3" json:"masks,omitempty"`
	Order []int64 `protobuf:"varint,3,rep,packed,name=order,proto3" json:"order,omitempty"`
}

func (m *TLMessagesReorderStickerSets) Reset()         { *m = TLMessagesReorderStickerSets{} }
func (m *TLMessagesReorderStickerSets) String() string { return proto.CompactTextString(m) }
func (*TLMessagesReorderStickerSets) ProtoMessage()    {}
func (*TLMessagesReorderStickerSets) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{133}
}
func (m *TLMessagesReorderStickerSets) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesReorderStickerSets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesReorderStickerSets.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesReorderStickerSets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesReorderStickerSets.Merge(m, src)
}
func (m *TLMessagesReorderStickerSets) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesReorderStickerSets) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesReorderStickerSets.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesReorderStickerSets proto.InternalMessageInfo

func (m *TLMessagesReorderStickerSets) GetMasks() bool {
	if m != nil {
		return m.Masks
	}
	return false
}

func (m *TLMessagesReorderStickerSets) GetOrder() []int64 {
	if m != nil {
		return m.Order
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.getDocumentByHash#338e2464 sha256:bytes size:int mime_type:string = Document;
type TLMessagesGetDocumentByHash struct {
	Sha256   []byte `protobuf:"bytes,1,opt,name=sha256,proto3" json:"sha256,omitempty"`
	Size_    int32  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	MimeType string `protobuf:"bytes,3,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
}

func (m *TLMessagesGetDocumentByHash) Reset()         { *m = TLMessagesGetDocumentByHash{} }
func (m *TLMessagesGetDocumentByHash) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetDocumentByHash) ProtoMessage()    {}
func (*TLMessagesGetDocumentByHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{134}
}
func (m *TLMessagesGetDocumentByHash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetDocumentByHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetDocumentByHash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetDocumentByHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetDocumentByHash.Merge(m, src)
}
func (m *TLMessagesGetDocumentByHash) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetDocumentByHash) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetDocumentByHash.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetDocumentByHash proto.InternalMessageInfo

func (m *TLMessagesGetDocumentByHash) GetSha256() []byte {
	if m != nil {
		return m.Sha256
	}
	return nil
}

func (m *TLMessagesGetDocumentByHash) GetSize_() int32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *TLMessagesGetDocumentByHash) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// messages.searchGifs#bf9a776b q:string offset:int = messages.FoundGifs;
type TLMessagesSearchGifs struct {
	Q      string `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
	Offset int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *TLMessagesSearchGifs) Reset()         { *m = TLMessagesSearchGifs{} }
func (m *TLMessagesSearchGifs) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSearchGifs) ProtoMessage()    {}
func (*TLMessagesSearchGifs) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{135}
}
func (m *TLMessagesSearchGifs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSearchGifs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSearchGifs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSearchGifs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSearchGifs.Merge(m, src)
}
func (m *TLMessagesSearchGifs) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSearchGifs) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSearchGifs.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSearchGifs proto.InternalMessageInfo

func (m *TLMessagesSearchGifs) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

func (m *TLMessagesSearchGifs) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.getSavedGifs#83bf3d52 hash:int = messages.SavedGifs;
type TLMessagesGetSavedGifs struct {
	Hash int32 `protobuf:"varint,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TLMessagesGetSavedGifs) Reset()         { *m = TLMessagesGetSavedGifs{} }
func (m *TLMessagesGetSavedGifs) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetSavedGifs) ProtoMessage()    {}
func (*TLMessagesGetSavedGifs) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{136}
}
func (m *TLMessagesGetSavedGifs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetSavedGifs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetSavedGifs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetSavedGifs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetSavedGifs.Merge(m, src)
}
func (m *TLMessagesGetSavedGifs) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetSavedGifs) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetSavedGifs.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetSavedGifs proto.InternalMessageInfo

func (m *TLMessagesGetSavedGifs) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.saveGif#327a30cb id:InputDocument unsave:Bool = Bool;
type TLMessagesSaveGif struct {
	Id     *InputDocument `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Unsave *Bool          `protobuf:"bytes,2,opt,name=unsave,proto3" json:"unsave,omitempty"`
}

func (m *TLMessagesSaveGif) Reset()         { *m = TLMessagesSaveGif{} }
func (m *TLMessagesSaveGif) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSaveGif) ProtoMessage()    {}
func (*TLMessagesSaveGif) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{137}
}
func (m *TLMessagesSaveGif) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSaveGif) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSaveGif.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSaveGif) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSaveGif.Merge(m, src)
}
func (m *TLMessagesSaveGif) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSaveGif) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSaveGif.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSaveGif proto.InternalMessageInfo

func (m *TLMessagesSaveGif) GetId() *InputDocument {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TLMessagesSaveGif) GetUnsave() *Bool {
	if m != nil {
		return m.Unsave
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.getInlineBotResults#514e999d flags:# bot:InputUser peer:InputPeer geo_point:flags.0?InputGeoPoint query:string offset:string = messages.BotResults;
type TLMessagesGetInlineBotResults struct {
	Bot      *InputUser     `protobuf:"bytes,2,opt,name=bot,proto3" json:"bot,omitempty"`
	Peer     *InputPeer     `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	GeoPoint *InputGeoPoint `protobuf:"bytes,4,opt,name=geo_point,json=geoPoint,proto3" json:"geo_point,omitempty"`
	Query    string         `protobuf:"bytes,5,opt,name=query,proto3" json:"query,omitempty"`
	Offset   string         `protobuf:"bytes,6,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *TLMessagesGetInlineBotResults) Reset()         { *m = TLMessagesGetInlineBotResults{} }
func (m *TLMessagesGetInlineBotResults) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetInlineBotResults) ProtoMessage()    {}
func (*TLMessagesGetInlineBotResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{138}
}
func (m *TLMessagesGetInlineBotResults) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetInlineBotResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetInlineBotResults.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetInlineBotResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetInlineBotResults.Merge(m, src)
}
func (m *TLMessagesGetInlineBotResults) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetInlineBotResults) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetInlineBotResults.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetInlineBotResults proto.InternalMessageInfo

func (m *TLMessagesGetInlineBotResults) GetBot() *InputUser {
	if m != nil {
		return m.Bot
	}
	return nil
}

func (m *TLMessagesGetInlineBotResults) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesGetInlineBotResults) GetGeoPoint() *InputGeoPoint {
	if m != nil {
		return m.GeoPoint
	}
	return nil
}

func (m *TLMessagesGetInlineBotResults) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *TLMessagesGetInlineBotResults) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// messages.setInlineBotResults#eb5ea206 flags:# gallery:flags.0?true private:flags.1?true query_id:long results:Vector<InputBotInlineResult> cache_time:int next_offset:flags.2?string switch_pm:flags.3?InlineBotSwitchPM = Bool;
type TLMessagesSetInlineBotResults struct {
	Gallery    bool                    `protobuf:"varint,2,opt,name=gallery,proto3" json:"gallery,omitempty"`
	Private    bool                    `protobuf:"varint,3,opt,name=private,proto3" json:"private,omitempty"`
	QueryId    int64                   `protobuf:"varint,4,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	Results    []*InputBotInlineResult `protobuf:"bytes,5,rep,name=results,proto3" json:"results,omitempty"`
	CacheTime  int32                   `protobuf:"varint,6,opt,name=cache_time,json=cacheTime,proto3" json:"cache_time,omitempty"`
	NextOffset string                  `protobuf:"bytes,7,opt,name=next_offset,json=nextOffset,proto3" json:"next_offset,omitempty"`
	SwitchPm   *InlineBotSwitchPM      `protobuf:"bytes,8,opt,name=switch_pm,json=switchPm,proto3" json:"switch_pm,omitempty"`
}

func (m *TLMessagesSetInlineBotResults) Reset()         { *m = TLMessagesSetInlineBotResults{} }
func (m *TLMessagesSetInlineBotResults) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSetInlineBotResults) ProtoMessage()    {}
func (*TLMessagesSetInlineBotResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{139}
}
func (m *TLMessagesSetInlineBotResults) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSetInlineBotResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSetInlineBotResults.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSetInlineBotResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSetInlineBotResults.Merge(m, src)
}
func (m *TLMessagesSetInlineBotResults) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSetInlineBotResults) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSetInlineBotResults.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSetInlineBotResults proto.InternalMessageInfo

func (m *TLMessagesSetInlineBotResults) GetGallery() bool {
	if m != nil {
		return m.Gallery
	}
	return false
}

func (m *TLMessagesSetInlineBotResults) GetPrivate() bool {
	if m != nil {
		return m.Private
	}
	return false
}

func (m *TLMessagesSetInlineBotResults) GetQueryId() int64 {
	if m != nil {
		return m.QueryId
	}
	return 0
}

func (m *TLMessagesSetInlineBotResults) GetResults() []*InputBotInlineResult {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *TLMessagesSetInlineBotResults) GetCacheTime() int32 {
	if m != nil {
		return m.CacheTime
	}
	return 0
}

func (m *TLMessagesSetInlineBotResults) GetNextOffset() string {
	if m != nil {
		return m.NextOffset
	}
	return ""
}

func (m *TLMessagesSetInlineBotResults) GetSwitchPm() *InlineBotSwitchPM {
	if m != nil {
		return m.SwitchPm
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.sendInlineBotResult#b16e06fe flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int random_id:long query_id:long id:string = Updates;
type TLMessagesSendInlineBotResult struct {
	Silent       bool       `protobuf:"varint,2,opt,name=silent,proto3" json:"silent,omitempty"`
	Background   bool       `protobuf:"varint,3,opt,name=background,proto3" json:"background,omitempty"`
	ClearDraft   bool       `protobuf:"varint,4,opt,name=clear_draft,json=clearDraft,proto3" json:"clear_draft,omitempty"`
	Peer         *InputPeer `protobuf:"bytes,5,opt,name=peer,proto3" json:"peer,omitempty"`
	ReplyToMsgId int32      `protobuf:"varint,6,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	RandomId     int64      `protobuf:"varint,7,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	QueryId      int64      `protobuf:"varint,8,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	Id           string     `protobuf:"bytes,9,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *TLMessagesSendInlineBotResult) Reset()         { *m = TLMessagesSendInlineBotResult{} }
func (m *TLMessagesSendInlineBotResult) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSendInlineBotResult) ProtoMessage()    {}
func (*TLMessagesSendInlineBotResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{140}
}
func (m *TLMessagesSendInlineBotResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSendInlineBotResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSendInlineBotResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSendInlineBotResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSendInlineBotResult.Merge(m, src)
}
func (m *TLMessagesSendInlineBotResult) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSendInlineBotResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSendInlineBotResult.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSendInlineBotResult proto.InternalMessageInfo

func (m *TLMessagesSendInlineBotResult) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *TLMessagesSendInlineBotResult) GetBackground() bool {
	if m != nil {
		return m.Background
	}
	return false
}

func (m *TLMessagesSendInlineBotResult) GetClearDraft() bool {
	if m != nil {
		return m.ClearDraft
	}
	return false
}

func (m *TLMessagesSendInlineBotResult) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSendInlineBotResult) GetReplyToMsgId() int32 {
	if m != nil {
		return m.ReplyToMsgId
	}
	return 0
}

func (m *TLMessagesSendInlineBotResult) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *TLMessagesSendInlineBotResult) GetQueryId() int64 {
	if m != nil {
		return m.QueryId
	}
	return 0
}

func (m *TLMessagesSendInlineBotResult) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// messages.getMessageEditData#fda68d36 peer:InputPeer id:int = messages.MessageEditData;
type TLMessagesGetMessageEditData struct {
	Peer *InputPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Id   int32      `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *TLMessagesGetMessageEditData) Reset()         { *m = TLMessagesGetMessageEditData{} }
func (m *TLMessagesGetMessageEditData) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetMessageEditData) ProtoMessage()    {}
func (*TLMessagesGetMessageEditData) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{141}
}
func (m *TLMessagesGetMessageEditData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetMessageEditData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetMessageEditData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetMessageEditData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetMessageEditData.Merge(m, src)
}
func (m *TLMessagesGetMessageEditData) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetMessageEditData) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetMessageEditData.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetMessageEditData proto.InternalMessageInfo

func (m *TLMessagesGetMessageEditData) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesGetMessageEditData) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.editMessage#ce91e4ca flags:# no_webpage:flags.1?true peer:InputPeer id:int message:flags.11?string reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Updates;
type TLMessagesEditMessage struct {
	NoWebpage   bool             `protobuf:"varint,2,opt,name=no_webpage,json=noWebpage,proto3" json:"no_webpage,omitempty"`
	Peer        *InputPeer       `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Id          int32            `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	Message     string           `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	ReplyMarkup *ReplyMarkup     `protobuf:"bytes,6,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
	Entities    []*MessageEntity `protobuf:"bytes,7,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (m *TLMessagesEditMessage) Reset()         { *m = TLMessagesEditMessage{} }
func (m *TLMessagesEditMessage) String() string { return proto.CompactTextString(m) }
func (*TLMessagesEditMessage) ProtoMessage()    {}
func (*TLMessagesEditMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{142}
}
func (m *TLMessagesEditMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesEditMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesEditMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesEditMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesEditMessage.Merge(m, src)
}
func (m *TLMessagesEditMessage) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesEditMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesEditMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesEditMessage proto.InternalMessageInfo

func (m *TLMessagesEditMessage) GetNoWebpage() bool {
	if m != nil {
		return m.NoWebpage
	}
	return false
}

func (m *TLMessagesEditMessage) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesEditMessage) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TLMessagesEditMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TLMessagesEditMessage) GetReplyMarkup() *ReplyMarkup {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

func (m *TLMessagesEditMessage) GetEntities() []*MessageEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.editInlineBotMessage#130c2c85 flags:# no_webpage:flags.1?true id:InputBotInlineMessageID message:flags.11?string reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Bool;
type TLMessagesEditInlineBotMessage struct {
	NoWebpage   bool                     `protobuf:"varint,2,opt,name=no_webpage,json=noWebpage,proto3" json:"no_webpage,omitempty"`
	Id          *InputBotInlineMessageID `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Message     string                   `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	ReplyMarkup *ReplyMarkup             `protobuf:"bytes,5,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
	Entities    []*MessageEntity         `protobuf:"bytes,6,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (m *TLMessagesEditInlineBotMessage) Reset()         { *m = TLMessagesEditInlineBotMessage{} }
func (m *TLMessagesEditInlineBotMessage) String() string { return proto.CompactTextString(m) }
func (*TLMessagesEditInlineBotMessage) ProtoMessage()    {}
func (*TLMessagesEditInlineBotMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{143}
}
func (m *TLMessagesEditInlineBotMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesEditInlineBotMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesEditInlineBotMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesEditInlineBotMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesEditInlineBotMessage.Merge(m, src)
}
func (m *TLMessagesEditInlineBotMessage) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesEditInlineBotMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesEditInlineBotMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesEditInlineBotMessage proto.InternalMessageInfo

func (m *TLMessagesEditInlineBotMessage) GetNoWebpage() bool {
	if m != nil {
		return m.NoWebpage
	}
	return false
}

func (m *TLMessagesEditInlineBotMessage) GetId() *InputBotInlineMessageID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TLMessagesEditInlineBotMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TLMessagesEditInlineBotMessage) GetReplyMarkup() *ReplyMarkup {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

func (m *TLMessagesEditInlineBotMessage) GetEntities() []*MessageEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.getBotCallbackAnswer#810a9fec flags:# game:flags.1?true peer:InputPeer msg_id:int data:flags.0?bytes = messages.BotCallbackAnswer;
type TLMessagesGetBotCallbackAnswer struct {
	Game  bool       `protobuf:"varint,2,opt,name=game,proto3" json:"game,omitempty"`
	Peer  *InputPeer `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId int32      `protobuf:"varint,4,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	Data  []byte     `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *TLMessagesGetBotCallbackAnswer) Reset()         { *m = TLMessagesGetBotCallbackAnswer{} }
func (m *TLMessagesGetBotCallbackAnswer) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetBotCallbackAnswer) ProtoMessage()    {}
func (*TLMessagesGetBotCallbackAnswer) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{144}
}
func (m *TLMessagesGetBotCallbackAnswer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetBotCallbackAnswer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetBotCallbackAnswer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetBotCallbackAnswer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetBotCallbackAnswer.Merge(m, src)
}
func (m *TLMessagesGetBotCallbackAnswer) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetBotCallbackAnswer) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetBotCallbackAnswer.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetBotCallbackAnswer proto.InternalMessageInfo

func (m *TLMessagesGetBotCallbackAnswer) GetGame() bool {
	if m != nil {
		return m.Game
	}
	return false
}

func (m *TLMessagesGetBotCallbackAnswer) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesGetBotCallbackAnswer) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *TLMessagesGetBotCallbackAnswer) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.setBotCallbackAnswer#d58f130a flags:# alert:flags.1?true query_id:long message:flags.0?string url:flags.2?string cache_time:int = Bool;
type TLMessagesSetBotCallbackAnswer struct {
	Alert     bool   `protobuf:"varint,2,opt,name=alert,proto3" json:"alert,omitempty"`
	QueryId   int64  `protobuf:"varint,3,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	Message   string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Url       string `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	CacheTime int32  `protobuf:"varint,6,opt,name=cache_time,json=cacheTime,proto3" json:"cache_time,omitempty"`
}

func (m *TLMessagesSetBotCallbackAnswer) Reset()         { *m = TLMessagesSetBotCallbackAnswer{} }
func (m *TLMessagesSetBotCallbackAnswer) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSetBotCallbackAnswer) ProtoMessage()    {}
func (*TLMessagesSetBotCallbackAnswer) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{145}
}
func (m *TLMessagesSetBotCallbackAnswer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSetBotCallbackAnswer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSetBotCallbackAnswer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSetBotCallbackAnswer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSetBotCallbackAnswer.Merge(m, src)
}
func (m *TLMessagesSetBotCallbackAnswer) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSetBotCallbackAnswer) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSetBotCallbackAnswer.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSetBotCallbackAnswer proto.InternalMessageInfo

func (m *TLMessagesSetBotCallbackAnswer) GetAlert() bool {
	if m != nil {
		return m.Alert
	}
	return false
}

func (m *TLMessagesSetBotCallbackAnswer) GetQueryId() int64 {
	if m != nil {
		return m.QueryId
	}
	return 0
}

func (m *TLMessagesSetBotCallbackAnswer) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TLMessagesSetBotCallbackAnswer) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *TLMessagesSetBotCallbackAnswer) GetCacheTime() int32 {
	if m != nil {
		return m.CacheTime
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.getPeerDialogs#2d9776b9 peers:Vector<InputPeer> = messages.PeerDialogs;
type TLMessagesGetPeerDialogs struct {
	Peers []*InputPeer `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (m *TLMessagesGetPeerDialogs) Reset()         { *m = TLMessagesGetPeerDialogs{} }
func (m *TLMessagesGetPeerDialogs) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetPeerDialogs) ProtoMessage()    {}
func (*TLMessagesGetPeerDialogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{146}
}
func (m *TLMessagesGetPeerDialogs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetPeerDialogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetPeerDialogs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetPeerDialogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetPeerDialogs.Merge(m, src)
}
func (m *TLMessagesGetPeerDialogs) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetPeerDialogs) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetPeerDialogs.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetPeerDialogs proto.InternalMessageInfo

func (m *TLMessagesGetPeerDialogs) GetPeers() []*InputPeer {
	if m != nil {
		return m.Peers
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.saveDraft#bc39e14b flags:# no_webpage:flags.1?true reply_to_msg_id:flags.0?int peer:InputPeer message:string entities:flags.3?Vector<MessageEntity> = Bool;
type TLMessagesSaveDraft struct {
	NoWebpage    bool             `protobuf:"varint,2,opt,name=no_webpage,json=noWebpage,proto3" json:"no_webpage,omitempty"`
	ReplyToMsgId int32            `protobuf:"varint,3,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	Peer         *InputPeer       `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	Message      string           `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	Entities     []*MessageEntity `protobuf:"bytes,6,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (m *TLMessagesSaveDraft) Reset()         { *m = TLMessagesSaveDraft{} }
func (m *TLMessagesSaveDraft) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSaveDraft) ProtoMessage()    {}
func (*TLMessagesSaveDraft) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{147}
}
func (m *TLMessagesSaveDraft) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSaveDraft) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSaveDraft.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSaveDraft) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSaveDraft.Merge(m, src)
}
func (m *TLMessagesSaveDraft) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSaveDraft) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSaveDraft.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSaveDraft proto.InternalMessageInfo

func (m *TLMessagesSaveDraft) GetNoWebpage() bool {
	if m != nil {
		return m.NoWebpage
	}
	return false
}

func (m *TLMessagesSaveDraft) GetReplyToMsgId() int32 {
	if m != nil {
		return m.ReplyToMsgId
	}
	return 0
}

func (m *TLMessagesSaveDraft) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSaveDraft) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TLMessagesSaveDraft) GetEntities() []*MessageEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.getAllDrafts#6a3f8d65 = Updates;
type TLMessagesGetAllDrafts struct {
}

func (m *TLMessagesGetAllDrafts) Reset()         { *m = TLMessagesGetAllDrafts{} }
func (m *TLMessagesGetAllDrafts) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetAllDrafts) ProtoMessage()    {}
func (*TLMessagesGetAllDrafts) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{148}
}
func (m *TLMessagesGetAllDrafts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetAllDrafts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetAllDrafts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetAllDrafts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetAllDrafts.Merge(m, src)
}
func (m *TLMessagesGetAllDrafts) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetAllDrafts) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetAllDrafts.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetAllDrafts proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// messages.getFeaturedStickers#2dacca4f hash:int = messages.FeaturedStickers;
type TLMessagesGetFeaturedStickers struct {
	Hash int32 `protobuf:"varint,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TLMessagesGetFeaturedStickers) Reset()         { *m = TLMessagesGetFeaturedStickers{} }
func (m *TLMessagesGetFeaturedStickers) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetFeaturedStickers) ProtoMessage()    {}
func (*TLMessagesGetFeaturedStickers) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{149}
}
func (m *TLMessagesGetFeaturedStickers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetFeaturedStickers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetFeaturedStickers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetFeaturedStickers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetFeaturedStickers.Merge(m, src)
}
func (m *TLMessagesGetFeaturedStickers) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetFeaturedStickers) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetFeaturedStickers.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetFeaturedStickers proto.InternalMessageInfo

func (m *TLMessagesGetFeaturedStickers) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.readFeaturedStickers#5b118126 id:Vector<long> = Bool;
type TLMessagesReadFeaturedStickers struct {
	Id []int64 `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (m *TLMessagesReadFeaturedStickers) Reset()         { *m = TLMessagesReadFeaturedStickers{} }
func (m *TLMessagesReadFeaturedStickers) String() string { return proto.CompactTextString(m) }
func (*TLMessagesReadFeaturedStickers) ProtoMessage()    {}
func (*TLMessagesReadFeaturedStickers) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{150}
}
func (m *TLMessagesReadFeaturedStickers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesReadFeaturedStickers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesReadFeaturedStickers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesReadFeaturedStickers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesReadFeaturedStickers.Merge(m, src)
}
func (m *TLMessagesReadFeaturedStickers) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesReadFeaturedStickers) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesReadFeaturedStickers.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesReadFeaturedStickers proto.InternalMessageInfo

func (m *TLMessagesReadFeaturedStickers) GetId() []int64 {
	if m != nil {
		return m.Id
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.getRecentStickers#5ea192c9 flags:# attached:flags.0?true hash:int = messages.RecentStickers;
type TLMessagesGetRecentStickers struct {
	Attached bool  `protobuf:"varint,2,opt,name=attached,proto3" json:"attached,omitempty"`
	Hash     int32 `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TLMessagesGetRecentStickers) Reset()         { *m = TLMessagesGetRecentStickers{} }
func (m *TLMessagesGetRecentStickers) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetRecentStickers) ProtoMessage()    {}
func (*TLMessagesGetRecentStickers) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{151}
}
func (m *TLMessagesGetRecentStickers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetRecentStickers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetRecentStickers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetRecentStickers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetRecentStickers.Merge(m, src)
}
func (m *TLMessagesGetRecentStickers) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetRecentStickers) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetRecentStickers.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetRecentStickers proto.InternalMessageInfo

func (m *TLMessagesGetRecentStickers) GetAttached() bool {
	if m != nil {
		return m.Attached
	}
	return false
}

func (m *TLMessagesGetRecentStickers) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.saveRecentSticker#392718f8 flags:# attached:flags.0?true id:InputDocument unsave:Bool = Bool;
type TLMessagesSaveRecentSticker struct {
	Attached bool           `protobuf:"varint,2,opt,name=attached,proto3" json:"attached,omitempty"`
	Id       *InputDocument `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Unsave   *Bool          `protobuf:"bytes,4,opt,name=unsave,proto3" json:"unsave,omitempty"`
}

func (m *TLMessagesSaveRecentSticker) Reset()         { *m = TLMessagesSaveRecentSticker{} }
func (m *TLMessagesSaveRecentSticker) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSaveRecentSticker) ProtoMessage()    {}
func (*TLMessagesSaveRecentSticker) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{152}
}
func (m *TLMessagesSaveRecentSticker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSaveRecentSticker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSaveRecentSticker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSaveRecentSticker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSaveRecentSticker.Merge(m, src)
}
func (m *TLMessagesSaveRecentSticker) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSaveRecentSticker) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSaveRecentSticker.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSaveRecentSticker proto.InternalMessageInfo

func (m *TLMessagesSaveRecentSticker) GetAttached() bool {
	if m != nil {
		return m.Attached
	}
	return false
}

func (m *TLMessagesSaveRecentSticker) GetId() *InputDocument {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TLMessagesSaveRecentSticker) GetUnsave() *Bool {
	if m != nil {
		return m.Unsave
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.clearRecentStickers#8999602d flags:# attached:flags.0?true = Bool;
type TLMessagesClearRecentStickers struct {
	Attached bool `protobuf:"varint,2,opt,name=attached,proto3" json:"attached,omitempty"`
}

func (m *TLMessagesClearRecentStickers) Reset()         { *m = TLMessagesClearRecentStickers{} }
func (m *TLMessagesClearRecentStickers) String() string { return proto.CompactTextString(m) }
func (*TLMessagesClearRecentStickers) ProtoMessage()    {}
func (*TLMessagesClearRecentStickers) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{153}
}
func (m *TLMessagesClearRecentStickers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesClearRecentStickers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesClearRecentStickers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesClearRecentStickers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesClearRecentStickers.Merge(m, src)
}
func (m *TLMessagesClearRecentStickers) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesClearRecentStickers) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesClearRecentStickers.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesClearRecentStickers proto.InternalMessageInfo

func (m *TLMessagesClearRecentStickers) GetAttached() bool {
	if m != nil {
		return m.Attached
	}
	return false
}

///////////////////////////////////////////////////////////////////////////////
// messages.getArchivedStickers#57f17692 flags:# masks:flags.0?true offset_id:long limit:int = messages.ArchivedStickers;
type TLMessagesGetArchivedStickers struct {
	Masks    bool  `protobuf:"varint,2,opt,name=masks,proto3" json:"masks,omitempty"`
	OffsetId int64 `protobuf:"varint,3,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	Limit    int32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *TLMessagesGetArchivedStickers) Reset()         { *m = TLMessagesGetArchivedStickers{} }
func (m *TLMessagesGetArchivedStickers) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetArchivedStickers) ProtoMessage()    {}
func (*TLMessagesGetArchivedStickers) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{154}
}
func (m *TLMessagesGetArchivedStickers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetArchivedStickers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetArchivedStickers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetArchivedStickers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetArchivedStickers.Merge(m, src)
}
func (m *TLMessagesGetArchivedStickers) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetArchivedStickers) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetArchivedStickers.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetArchivedStickers proto.InternalMessageInfo

func (m *TLMessagesGetArchivedStickers) GetMasks() bool {
	if m != nil {
		return m.Masks
	}
	return false
}

func (m *TLMessagesGetArchivedStickers) GetOffsetId() int64 {
	if m != nil {
		return m.OffsetId
	}
	return 0
}

func (m *TLMessagesGetArchivedStickers) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.getMaskStickers#65b8c79f hash:int = messages.AllStickers;
type TLMessagesGetMaskStickers struct {
	Hash int32 `protobuf:"varint,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TLMessagesGetMaskStickers) Reset()         { *m = TLMessagesGetMaskStickers{} }
func (m *TLMessagesGetMaskStickers) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetMaskStickers) ProtoMessage()    {}
func (*TLMessagesGetMaskStickers) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{155}
}
func (m *TLMessagesGetMaskStickers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetMaskStickers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetMaskStickers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetMaskStickers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetMaskStickers.Merge(m, src)
}
func (m *TLMessagesGetMaskStickers) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetMaskStickers) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetMaskStickers.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetMaskStickers proto.InternalMessageInfo

func (m *TLMessagesGetMaskStickers) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.getAttachedStickers#cc5b67cc media:InputStickeredMedia = Vector<StickerSetCovered>;
type TLMessagesGetAttachedStickers struct {
	Media *InputStickeredMedia `protobuf:"bytes,1,opt,name=media,proto3" json:"media,omitempty"`
}

func (m *TLMessagesGetAttachedStickers) Reset()         { *m = TLMessagesGetAttachedStickers{} }
func (m *TLMessagesGetAttachedStickers) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetAttachedStickers) ProtoMessage()    {}
func (*TLMessagesGetAttachedStickers) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{156}
}
func (m *TLMessagesGetAttachedStickers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetAttachedStickers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetAttachedStickers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetAttachedStickers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetAttachedStickers.Merge(m, src)
}
func (m *TLMessagesGetAttachedStickers) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetAttachedStickers) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetAttachedStickers.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetAttachedStickers proto.InternalMessageInfo

func (m *TLMessagesGetAttachedStickers) GetMedia() *InputStickeredMedia {
	if m != nil {
		return m.Media
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.setGameScore#8ef8ecc0 flags:# edit_message:flags.0?true force:flags.1?true peer:InputPeer id:int user_id:InputUser score:int = Updates;
type TLMessagesSetGameScore struct {
	EditMessage bool       `protobuf:"varint,2,opt,name=edit_message,json=editMessage,proto3" json:"edit_message,omitempty"`
	Force       bool       `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	Peer        *InputPeer `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	Id          int32      `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	UserId      *InputUser `protobuf:"bytes,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Score       int32      `protobuf:"varint,7,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *TLMessagesSetGameScore) Reset()         { *m = TLMessagesSetGameScore{} }
func (m *TLMessagesSetGameScore) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSetGameScore) ProtoMessage()    {}
func (*TLMessagesSetGameScore) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{157}
}
func (m *TLMessagesSetGameScore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSetGameScore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSetGameScore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSetGameScore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSetGameScore.Merge(m, src)
}
func (m *TLMessagesSetGameScore) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSetGameScore) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSetGameScore.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSetGameScore proto.InternalMessageInfo

func (m *TLMessagesSetGameScore) GetEditMessage() bool {
	if m != nil {
		return m.EditMessage
	}
	return false
}

func (m *TLMessagesSetGameScore) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *TLMessagesSetGameScore) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSetGameScore) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TLMessagesSetGameScore) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *TLMessagesSetGameScore) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.setInlineGameScore#15ad9f64 flags:# edit_message:flags.0?true force:flags.1?true id:InputBotInlineMessageID user_id:InputUser score:int = Bool;
type TLMessagesSetInlineGameScore struct {
	EditMessage bool                     `protobuf:"varint,2,opt,name=edit_message,json=editMessage,proto3" json:"edit_message,omitempty"`
	Force       bool                     `protobuf:"varint,3,opt,name=force,proto3" json:"force,omitempty"`
	Id          *InputBotInlineMessageID `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	UserId      *InputUser               `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Score       int32                    `protobuf:"varint,6,opt,name=score,proto3" json:"score,omitempty"`
}

func (m *TLMessagesSetInlineGameScore) Reset()         { *m = TLMessagesSetInlineGameScore{} }
func (m *TLMessagesSetInlineGameScore) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSetInlineGameScore) ProtoMessage()    {}
func (*TLMessagesSetInlineGameScore) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{158}
}
func (m *TLMessagesSetInlineGameScore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSetInlineGameScore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSetInlineGameScore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSetInlineGameScore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSetInlineGameScore.Merge(m, src)
}
func (m *TLMessagesSetInlineGameScore) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSetInlineGameScore) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSetInlineGameScore.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSetInlineGameScore proto.InternalMessageInfo

func (m *TLMessagesSetInlineGameScore) GetEditMessage() bool {
	if m != nil {
		return m.EditMessage
	}
	return false
}

func (m *TLMessagesSetInlineGameScore) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *TLMessagesSetInlineGameScore) GetId() *InputBotInlineMessageID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TLMessagesSetInlineGameScore) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *TLMessagesSetInlineGameScore) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.getGameHighScores#e822649d peer:InputPeer id:int user_id:InputUser = messages.HighScores;
type TLMessagesGetGameHighScores struct {
	Peer   *InputPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Id     int32      `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	UserId *InputUser `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *TLMessagesGetGameHighScores) Reset()         { *m = TLMessagesGetGameHighScores{} }
func (m *TLMessagesGetGameHighScores) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetGameHighScores) ProtoMessage()    {}
func (*TLMessagesGetGameHighScores) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{159}
}
func (m *TLMessagesGetGameHighScores) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetGameHighScores) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetGameHighScores.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetGameHighScores) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetGameHighScores.Merge(m, src)
}
func (m *TLMessagesGetGameHighScores) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetGameHighScores) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetGameHighScores.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetGameHighScores proto.InternalMessageInfo

func (m *TLMessagesGetGameHighScores) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesGetGameHighScores) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TLMessagesGetGameHighScores) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.getInlineGameHighScores#f635e1b id:InputBotInlineMessageID user_id:InputUser = messages.HighScores;
type TLMessagesGetInlineGameHighScores struct {
	Id     *InputBotInlineMessageID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId *InputUser               `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *TLMessagesGetInlineGameHighScores) Reset()         { *m = TLMessagesGetInlineGameHighScores{} }
func (m *TLMessagesGetInlineGameHighScores) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetInlineGameHighScores) ProtoMessage()    {}
func (*TLMessagesGetInlineGameHighScores) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{160}
}
func (m *TLMessagesGetInlineGameHighScores) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetInlineGameHighScores) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetInlineGameHighScores.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetInlineGameHighScores) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetInlineGameHighScores.Merge(m, src)
}
func (m *TLMessagesGetInlineGameHighScores) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetInlineGameHighScores) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetInlineGameHighScores.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetInlineGameHighScores proto.InternalMessageInfo

func (m *TLMessagesGetInlineGameHighScores) GetId() *InputBotInlineMessageID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TLMessagesGetInlineGameHighScores) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.getCommonChats#d0a48c4 user_id:InputUser max_id:int limit:int = messages.Chats;
type TLMessagesGetCommonChats struct {
	UserId *InputUser `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MaxId  int32      `protobuf:"varint,2,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	Limit  int32      `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *TLMessagesGetCommonChats) Reset()         { *m = TLMessagesGetCommonChats{} }
func (m *TLMessagesGetCommonChats) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetCommonChats) ProtoMessage()    {}
func (*TLMessagesGetCommonChats) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{161}
}
func (m *TLMessagesGetCommonChats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetCommonChats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetCommonChats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetCommonChats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetCommonChats.Merge(m, src)
}
func (m *TLMessagesGetCommonChats) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetCommonChats) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetCommonChats.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetCommonChats proto.InternalMessageInfo

func (m *TLMessagesGetCommonChats) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *TLMessagesGetCommonChats) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *TLMessagesGetCommonChats) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.getAllChats#eba80ff0 except_ids:Vector<int> = messages.Chats;
type TLMessagesGetAllChats struct {
	ExceptIds []int32 `protobuf:"varint,1,rep,packed,name=except_ids,json=exceptIds,proto3" json:"except_ids,omitempty"`
}

func (m *TLMessagesGetAllChats) Reset()         { *m = TLMessagesGetAllChats{} }
func (m *TLMessagesGetAllChats) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetAllChats) ProtoMessage()    {}
func (*TLMessagesGetAllChats) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{162}
}
func (m *TLMessagesGetAllChats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetAllChats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetAllChats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetAllChats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetAllChats.Merge(m, src)
}
func (m *TLMessagesGetAllChats) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetAllChats) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetAllChats.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetAllChats proto.InternalMessageInfo

func (m *TLMessagesGetAllChats) GetExceptIds() []int32 {
	if m != nil {
		return m.ExceptIds
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.getWebPage#32ca8f91 url:string hash:int = WebPage;
type TLMessagesGetWebPage struct {
	Url  string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Hash int32  `protobuf:"varint,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TLMessagesGetWebPage) Reset()         { *m = TLMessagesGetWebPage{} }
func (m *TLMessagesGetWebPage) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetWebPage) ProtoMessage()    {}
func (*TLMessagesGetWebPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{163}
}
func (m *TLMessagesGetWebPage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetWebPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetWebPage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetWebPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetWebPage.Merge(m, src)
}
func (m *TLMessagesGetWebPage) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetWebPage) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetWebPage.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetWebPage proto.InternalMessageInfo

func (m *TLMessagesGetWebPage) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *TLMessagesGetWebPage) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.toggleDialogPin#3289be6a flags:# pinned:flags.0?true peer:InputPeer = Bool;
type TLMessagesToggleDialogPin struct {
	Pinned bool       `protobuf:"varint,2,opt,name=pinned,proto3" json:"pinned,omitempty"`
	Peer   *InputPeer `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *TLMessagesToggleDialogPin) Reset()         { *m = TLMessagesToggleDialogPin{} }
func (m *TLMessagesToggleDialogPin) String() string { return proto.CompactTextString(m) }
func (*TLMessagesToggleDialogPin) ProtoMessage()    {}
func (*TLMessagesToggleDialogPin) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{164}
}
func (m *TLMessagesToggleDialogPin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesToggleDialogPin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesToggleDialogPin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesToggleDialogPin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesToggleDialogPin.Merge(m, src)
}
func (m *TLMessagesToggleDialogPin) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesToggleDialogPin) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesToggleDialogPin.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesToggleDialogPin proto.InternalMessageInfo

func (m *TLMessagesToggleDialogPin) GetPinned() bool {
	if m != nil {
		return m.Pinned
	}
	return false
}

func (m *TLMessagesToggleDialogPin) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.reorderPinnedDialogs#959ff644 flags:# force:flags.0?true order:Vector<InputPeer> = Bool;
type TLMessagesReorderPinnedDialogs struct {
	Force bool         `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	Order []*InputPeer `protobuf:"bytes,3,rep,name=order,proto3" json:"order,omitempty"`
}

func (m *TLMessagesReorderPinnedDialogs) Reset()         { *m = TLMessagesReorderPinnedDialogs{} }
func (m *TLMessagesReorderPinnedDialogs) String() string { return proto.CompactTextString(m) }
func (*TLMessagesReorderPinnedDialogs) ProtoMessage()    {}
func (*TLMessagesReorderPinnedDialogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{165}
}
func (m *TLMessagesReorderPinnedDialogs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesReorderPinnedDialogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesReorderPinnedDialogs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesReorderPinnedDialogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesReorderPinnedDialogs.Merge(m, src)
}
func (m *TLMessagesReorderPinnedDialogs) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesReorderPinnedDialogs) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesReorderPinnedDialogs.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesReorderPinnedDialogs proto.InternalMessageInfo

func (m *TLMessagesReorderPinnedDialogs) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *TLMessagesReorderPinnedDialogs) GetOrder() []*InputPeer {
	if m != nil {
		return m.Order
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.getPinnedDialogs#e254d64e = messages.PeerDialogs;
type TLMessagesGetPinnedDialogs struct {
}

func (m *TLMessagesGetPinnedDialogs) Reset()         { *m = TLMessagesGetPinnedDialogs{} }
func (m *TLMessagesGetPinnedDialogs) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetPinnedDialogs) ProtoMessage()    {}
func (*TLMessagesGetPinnedDialogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{166}
}
func (m *TLMessagesGetPinnedDialogs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetPinnedDialogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetPinnedDialogs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetPinnedDialogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetPinnedDialogs.Merge(m, src)
}
func (m *TLMessagesGetPinnedDialogs) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetPinnedDialogs) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetPinnedDialogs.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetPinnedDialogs proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// messages.setBotShippingResults#e5f672fa flags:# query_id:long error:flags.0?string shipping_options:flags.1?Vector<ShippingOption> = Bool;
type TLMessagesSetBotShippingResults struct {
	QueryId         int64             `protobuf:"varint,2,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	Error           string            `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	ShippingOptions []*ShippingOption `protobuf:"bytes,4,rep,name=shipping_options,json=shippingOptions,proto3" json:"shipping_options,omitempty"`
}

func (m *TLMessagesSetBotShippingResults) Reset()         { *m = TLMessagesSetBotShippingResults{} }
func (m *TLMessagesSetBotShippingResults) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSetBotShippingResults) ProtoMessage()    {}
func (*TLMessagesSetBotShippingResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{167}
}
func (m *TLMessagesSetBotShippingResults) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSetBotShippingResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSetBotShippingResults.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSetBotShippingResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSetBotShippingResults.Merge(m, src)
}
func (m *TLMessagesSetBotShippingResults) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSetBotShippingResults) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSetBotShippingResults.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSetBotShippingResults proto.InternalMessageInfo

func (m *TLMessagesSetBotShippingResults) GetQueryId() int64 {
	if m != nil {
		return m.QueryId
	}
	return 0
}

func (m *TLMessagesSetBotShippingResults) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *TLMessagesSetBotShippingResults) GetShippingOptions() []*ShippingOption {
	if m != nil {
		return m.ShippingOptions
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.setBotPrecheckoutResults#9c2dd95 flags:# success:flags.1?true query_id:long error:flags.0?string = Bool;
type TLMessagesSetBotPrecheckoutResults struct {
	Success bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	QueryId int64  `protobuf:"varint,3,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	Error   string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *TLMessagesSetBotPrecheckoutResults) Reset()         { *m = TLMessagesSetBotPrecheckoutResults{} }
func (m *TLMessagesSetBotPrecheckoutResults) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSetBotPrecheckoutResults) ProtoMessage()    {}
func (*TLMessagesSetBotPrecheckoutResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{168}
}
func (m *TLMessagesSetBotPrecheckoutResults) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSetBotPrecheckoutResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSetBotPrecheckoutResults.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSetBotPrecheckoutResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSetBotPrecheckoutResults.Merge(m, src)
}
func (m *TLMessagesSetBotPrecheckoutResults) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSetBotPrecheckoutResults) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSetBotPrecheckoutResults.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSetBotPrecheckoutResults proto.InternalMessageInfo

func (m *TLMessagesSetBotPrecheckoutResults) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *TLMessagesSetBotPrecheckoutResults) GetQueryId() int64 {
	if m != nil {
		return m.QueryId
	}
	return 0
}

func (m *TLMessagesSetBotPrecheckoutResults) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// messages.uploadMedia#519bc2b1 peer:InputPeer media:InputMedia = MessageMedia;
type TLMessagesUploadMedia struct {
	Peer  *InputPeer  `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Media *InputMedia `protobuf:"bytes,2,opt,name=media,proto3" json:"media,omitempty"`
}

func (m *TLMessagesUploadMedia) Reset()         { *m = TLMessagesUploadMedia{} }
func (m *TLMessagesUploadMedia) String() string { return proto.CompactTextString(m) }
func (*TLMessagesUploadMedia) ProtoMessage()    {}
func (*TLMessagesUploadMedia) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{169}
}
func (m *TLMessagesUploadMedia) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesUploadMedia) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesUploadMedia.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesUploadMedia) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesUploadMedia.Merge(m, src)
}
func (m *TLMessagesUploadMedia) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesUploadMedia) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesUploadMedia.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesUploadMedia proto.InternalMessageInfo

func (m *TLMessagesUploadMedia) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesUploadMedia) GetMedia() *InputMedia {
	if m != nil {
		return m.Media
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.sendScreenshotNotification#c97df020 peer:InputPeer reply_to_msg_id:int random_id:long = Updates;
type TLMessagesSendScreenshotNotification struct {
	Peer         *InputPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	ReplyToMsgId int32      `protobuf:"varint,2,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	RandomId     int64      `protobuf:"varint,3,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
}

func (m *TLMessagesSendScreenshotNotification) Reset()         { *m = TLMessagesSendScreenshotNotification{} }
func (m *TLMessagesSendScreenshotNotification) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSendScreenshotNotification) ProtoMessage()    {}
func (*TLMessagesSendScreenshotNotification) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{170}
}
func (m *TLMessagesSendScreenshotNotification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSendScreenshotNotification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSendScreenshotNotification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSendScreenshotNotification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSendScreenshotNotification.Merge(m, src)
}
func (m *TLMessagesSendScreenshotNotification) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSendScreenshotNotification) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSendScreenshotNotification.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSendScreenshotNotification proto.InternalMessageInfo

func (m *TLMessagesSendScreenshotNotification) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSendScreenshotNotification) GetReplyToMsgId() int32 {
	if m != nil {
		return m.ReplyToMsgId
	}
	return 0
}

func (m *TLMessagesSendScreenshotNotification) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.getFavedStickers#21ce0b0e hash:int = messages.FavedStickers;
type TLMessagesGetFavedStickers struct {
	Hash int32 `protobuf:"varint,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TLMessagesGetFavedStickers) Reset()         { *m = TLMessagesGetFavedStickers{} }
func (m *TLMessagesGetFavedStickers) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetFavedStickers) ProtoMessage()    {}
func (*TLMessagesGetFavedStickers) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{171}
}
func (m *TLMessagesGetFavedStickers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetFavedStickers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetFavedStickers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetFavedStickers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetFavedStickers.Merge(m, src)
}
func (m *TLMessagesGetFavedStickers) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetFavedStickers) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetFavedStickers.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetFavedStickers proto.InternalMessageInfo

func (m *TLMessagesGetFavedStickers) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.faveSticker#b9ffc55b id:InputDocument unfave:Bool = Bool;
type TLMessagesFaveSticker struct {
	Id     *InputDocument `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Unfave *Bool          `protobuf:"bytes,2,opt,name=unfave,proto3" json:"unfave,omitempty"`
}

func (m *TLMessagesFaveSticker) Reset()         { *m = TLMessagesFaveSticker{} }
func (m *TLMessagesFaveSticker) String() string { return proto.CompactTextString(m) }
func (*TLMessagesFaveSticker) ProtoMessage()    {}
func (*TLMessagesFaveSticker) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{172}
}
func (m *TLMessagesFaveSticker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesFaveSticker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesFaveSticker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesFaveSticker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesFaveSticker.Merge(m, src)
}
func (m *TLMessagesFaveSticker) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesFaveSticker) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesFaveSticker.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesFaveSticker proto.InternalMessageInfo

func (m *TLMessagesFaveSticker) GetId() *InputDocument {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TLMessagesFaveSticker) GetUnfave() *Bool {
	if m != nil {
		return m.Unfave
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.getUnreadMentions#46578472 peer:InputPeer offset_id:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;
type TLMessagesGetUnreadMentions struct {
	Peer      *InputPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	OffsetId  int32      `protobuf:"varint,2,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	AddOffset int32      `protobuf:"varint,3,opt,name=add_offset,json=addOffset,proto3" json:"add_offset,omitempty"`
	Limit     int32      `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	MaxId     int32      `protobuf:"varint,5,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	MinId     int32      `protobuf:"varint,6,opt,name=min_id,json=minId,proto3" json:"min_id,omitempty"`
}

func (m *TLMessagesGetUnreadMentions) Reset()         { *m = TLMessagesGetUnreadMentions{} }
func (m *TLMessagesGetUnreadMentions) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetUnreadMentions) ProtoMessage()    {}
func (*TLMessagesGetUnreadMentions) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{173}
}
func (m *TLMessagesGetUnreadMentions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetUnreadMentions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetUnreadMentions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetUnreadMentions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetUnreadMentions.Merge(m, src)
}
func (m *TLMessagesGetUnreadMentions) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetUnreadMentions) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetUnreadMentions.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetUnreadMentions proto.InternalMessageInfo

func (m *TLMessagesGetUnreadMentions) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesGetUnreadMentions) GetOffsetId() int32 {
	if m != nil {
		return m.OffsetId
	}
	return 0
}

func (m *TLMessagesGetUnreadMentions) GetAddOffset() int32 {
	if m != nil {
		return m.AddOffset
	}
	return 0
}

func (m *TLMessagesGetUnreadMentions) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *TLMessagesGetUnreadMentions) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *TLMessagesGetUnreadMentions) GetMinId() int32 {
	if m != nil {
		return m.MinId
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// updates.getState#edd4882a = updates.State;
type TLUpdatesGetState struct {
}

func (m *TLUpdatesGetState) Reset()         { *m = TLUpdatesGetState{} }
func (m *TLUpdatesGetState) String() string { return proto.CompactTextString(m) }
func (*TLUpdatesGetState) ProtoMessage()    {}
func (*TLUpdatesGetState) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{174}
}
func (m *TLUpdatesGetState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUpdatesGetState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUpdatesGetState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUpdatesGetState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUpdatesGetState.Merge(m, src)
}
func (m *TLUpdatesGetState) XXX_Size() int {
	return m.Size()
}
func (m *TLUpdatesGetState) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUpdatesGetState.DiscardUnknown(m)
}

var xxx_messageInfo_TLUpdatesGetState proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// updates.getDifference#25939651 flags:# pts:int pts_total_limit:flags.0?int date:int qts:int = updates.Difference;
type TLUpdatesGetDifference struct {
	Pts           int32 `protobuf:"varint,2,opt,name=pts,proto3" json:"pts,omitempty"`
	PtsTotalLimit int32 `protobuf:"varint,3,opt,name=pts_total_limit,json=ptsTotalLimit,proto3" json:"pts_total_limit,omitempty"`
	Date          int32 `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
	Qts           int32 `protobuf:"varint,5,opt,name=qts,proto3" json:"qts,omitempty"`
}

func (m *TLUpdatesGetDifference) Reset()         { *m = TLUpdatesGetDifference{} }
func (m *TLUpdatesGetDifference) String() string { return proto.CompactTextString(m) }
func (*TLUpdatesGetDifference) ProtoMessage()    {}
func (*TLUpdatesGetDifference) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{175}
}
func (m *TLUpdatesGetDifference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUpdatesGetDifference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUpdatesGetDifference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUpdatesGetDifference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUpdatesGetDifference.Merge(m, src)
}
func (m *TLUpdatesGetDifference) XXX_Size() int {
	return m.Size()
}
func (m *TLUpdatesGetDifference) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUpdatesGetDifference.DiscardUnknown(m)
}

var xxx_messageInfo_TLUpdatesGetDifference proto.InternalMessageInfo

func (m *TLUpdatesGetDifference) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *TLUpdatesGetDifference) GetPtsTotalLimit() int32 {
	if m != nil {
		return m.PtsTotalLimit
	}
	return 0
}

func (m *TLUpdatesGetDifference) GetDate() int32 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *TLUpdatesGetDifference) GetQts() int32 {
	if m != nil {
		return m.Qts
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// updates.getChannelDifference#3173d78 flags:# force:flags.0?true channel:InputChannel filter:ChannelMessagesFilter pts:int limit:int = updates.ChannelDifference;
type TLUpdatesGetChannelDifference struct {
	Force   bool                   `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	Channel *InputChannel          `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Filter  *ChannelMessagesFilter `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	Pts     int32                  `protobuf:"varint,5,opt,name=pts,proto3" json:"pts,omitempty"`
	Limit   int32                  `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *TLUpdatesGetChannelDifference) Reset()         { *m = TLUpdatesGetChannelDifference{} }
func (m *TLUpdatesGetChannelDifference) String() string { return proto.CompactTextString(m) }
func (*TLUpdatesGetChannelDifference) ProtoMessage()    {}
func (*TLUpdatesGetChannelDifference) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{176}
}
func (m *TLUpdatesGetChannelDifference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUpdatesGetChannelDifference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUpdatesGetChannelDifference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUpdatesGetChannelDifference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUpdatesGetChannelDifference.Merge(m, src)
}
func (m *TLUpdatesGetChannelDifference) XXX_Size() int {
	return m.Size()
}
func (m *TLUpdatesGetChannelDifference) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUpdatesGetChannelDifference.DiscardUnknown(m)
}

var xxx_messageInfo_TLUpdatesGetChannelDifference proto.InternalMessageInfo

func (m *TLUpdatesGetChannelDifference) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *TLUpdatesGetChannelDifference) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLUpdatesGetChannelDifference) GetFilter() *ChannelMessagesFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *TLUpdatesGetChannelDifference) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *TLUpdatesGetChannelDifference) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// photos.updateProfilePhoto#f0bb5152 id:InputPhoto = UserProfilePhoto;
type TLPhotosUpdateProfilePhoto struct {
	Id *InputPhoto `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *TLPhotosUpdateProfilePhoto) Reset()         { *m = TLPhotosUpdateProfilePhoto{} }
func (m *TLPhotosUpdateProfilePhoto) String() string { return proto.CompactTextString(m) }
func (*TLPhotosUpdateProfilePhoto) ProtoMessage()    {}
func (*TLPhotosUpdateProfilePhoto) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{177}
}
func (m *TLPhotosUpdateProfilePhoto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPhotosUpdateProfilePhoto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPhotosUpdateProfilePhoto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLPhotosUpdateProfilePhoto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPhotosUpdateProfilePhoto.Merge(m, src)
}
func (m *TLPhotosUpdateProfilePhoto) XXX_Size() int {
	return m.Size()
}
func (m *TLPhotosUpdateProfilePhoto) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPhotosUpdateProfilePhoto.DiscardUnknown(m)
}

var xxx_messageInfo_TLPhotosUpdateProfilePhoto proto.InternalMessageInfo

func (m *TLPhotosUpdateProfilePhoto) GetId() *InputPhoto {
	if m != nil {
		return m.Id
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// photos.uploadProfilePhoto#4f32c098 file:InputFile = photos.Photo;
type TLPhotosUploadProfilePhoto struct {
	File *InputFile `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (m *TLPhotosUploadProfilePhoto) Reset()         { *m = TLPhotosUploadProfilePhoto{} }
func (m *TLPhotosUploadProfilePhoto) String() string { return proto.CompactTextString(m) }
func (*TLPhotosUploadProfilePhoto) ProtoMessage()    {}
func (*TLPhotosUploadProfilePhoto) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{178}
}
func (m *TLPhotosUploadProfilePhoto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPhotosUploadProfilePhoto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPhotosUploadProfilePhoto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLPhotosUploadProfilePhoto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPhotosUploadProfilePhoto.Merge(m, src)
}
func (m *TLPhotosUploadProfilePhoto) XXX_Size() int {
	return m.Size()
}
func (m *TLPhotosUploadProfilePhoto) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPhotosUploadProfilePhoto.DiscardUnknown(m)
}

var xxx_messageInfo_TLPhotosUploadProfilePhoto proto.InternalMessageInfo

func (m *TLPhotosUploadProfilePhoto) GetFile() *InputFile {
	if m != nil {
		return m.File
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// photos.deletePhotos#87cf7f2f id:Vector<InputPhoto> = Vector<long>;
type TLPhotosDeletePhotos struct {
	Id []*InputPhoto `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (m *TLPhotosDeletePhotos) Reset()         { *m = TLPhotosDeletePhotos{} }
func (m *TLPhotosDeletePhotos) String() string { return proto.CompactTextString(m) }
func (*TLPhotosDeletePhotos) ProtoMessage()    {}
func (*TLPhotosDeletePhotos) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{179}
}
func (m *TLPhotosDeletePhotos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPhotosDeletePhotos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPhotosDeletePhotos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLPhotosDeletePhotos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPhotosDeletePhotos.Merge(m, src)
}
func (m *TLPhotosDeletePhotos) XXX_Size() int {
	return m.Size()
}
func (m *TLPhotosDeletePhotos) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPhotosDeletePhotos.DiscardUnknown(m)
}

var xxx_messageInfo_TLPhotosDeletePhotos proto.InternalMessageInfo

func (m *TLPhotosDeletePhotos) GetId() []*InputPhoto {
	if m != nil {
		return m.Id
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// photos.getUserPhotos#91cd32a8 user_id:InputUser offset:int max_id:long limit:int = photos.Photos;
type TLPhotosGetUserPhotos struct {
	UserId *InputUser `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Offset int32      `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	MaxId  int64      `protobuf:"varint,3,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	Limit  int32      `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *TLPhotosGetUserPhotos) Reset()         { *m = TLPhotosGetUserPhotos{} }
func (m *TLPhotosGetUserPhotos) String() string { return proto.CompactTextString(m) }
func (*TLPhotosGetUserPhotos) ProtoMessage()    {}
func (*TLPhotosGetUserPhotos) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{180}
}
func (m *TLPhotosGetUserPhotos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPhotosGetUserPhotos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPhotosGetUserPhotos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLPhotosGetUserPhotos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPhotosGetUserPhotos.Merge(m, src)
}
func (m *TLPhotosGetUserPhotos) XXX_Size() int {
	return m.Size()
}
func (m *TLPhotosGetUserPhotos) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPhotosGetUserPhotos.DiscardUnknown(m)
}

var xxx_messageInfo_TLPhotosGetUserPhotos proto.InternalMessageInfo

func (m *TLPhotosGetUserPhotos) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *TLPhotosGetUserPhotos) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TLPhotosGetUserPhotos) GetMaxId() int64 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *TLPhotosGetUserPhotos) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// upload.saveFilePart#b304a621 file_id:long file_part:int bytes:bytes = Bool;
type TLUploadSaveFilePart struct {
	FileId   int64  `protobuf:"varint,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	FilePart int32  `protobuf:"varint,2,opt,name=file_part,json=filePart,proto3" json:"file_part,omitempty"`
	Bytes    []byte `protobuf:"bytes,3,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *TLUploadSaveFilePart) Reset()         { *m = TLUploadSaveFilePart{} }
func (m *TLUploadSaveFilePart) String() string { return proto.CompactTextString(m) }
func (*TLUploadSaveFilePart) ProtoMessage()    {}
func (*TLUploadSaveFilePart) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{181}
}
func (m *TLUploadSaveFilePart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUploadSaveFilePart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUploadSaveFilePart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUploadSaveFilePart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUploadSaveFilePart.Merge(m, src)
}
func (m *TLUploadSaveFilePart) XXX_Size() int {
	return m.Size()
}
func (m *TLUploadSaveFilePart) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUploadSaveFilePart.DiscardUnknown(m)
}

var xxx_messageInfo_TLUploadSaveFilePart proto.InternalMessageInfo

func (m *TLUploadSaveFilePart) GetFileId() int64 {
	if m != nil {
		return m.FileId
	}
	return 0
}

func (m *TLUploadSaveFilePart) GetFilePart() int32 {
	if m != nil {
		return m.FilePart
	}
	return 0
}

func (m *TLUploadSaveFilePart) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// upload.getFile#e3a6cfb5 location:InputFileLocation offset:int limit:int = upload.File;
type TLUploadGetFile struct {
	Location *InputFileLocation `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	Offset   int32              `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit    int32              `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *TLUploadGetFile) Reset()         { *m = TLUploadGetFile{} }
func (m *TLUploadGetFile) String() string { return proto.CompactTextString(m) }
func (*TLUploadGetFile) ProtoMessage()    {}
func (*TLUploadGetFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{182}
}
func (m *TLUploadGetFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUploadGetFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUploadGetFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUploadGetFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUploadGetFile.Merge(m, src)
}
func (m *TLUploadGetFile) XXX_Size() int {
	return m.Size()
}
func (m *TLUploadGetFile) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUploadGetFile.DiscardUnknown(m)
}

var xxx_messageInfo_TLUploadGetFile proto.InternalMessageInfo

func (m *TLUploadGetFile) GetLocation() *InputFileLocation {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *TLUploadGetFile) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TLUploadGetFile) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// upload.saveBigFilePart#de7b673d file_id:long file_part:int file_total_parts:int bytes:bytes = Bool;
type TLUploadSaveBigFilePart struct {
	FileId         int64  `protobuf:"varint,1,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	FilePart       int32  `protobuf:"varint,2,opt,name=file_part,json=filePart,proto3" json:"file_part,omitempty"`
	FileTotalParts int32  `protobuf:"varint,3,opt,name=file_total_parts,json=fileTotalParts,proto3" json:"file_total_parts,omitempty"`
	Bytes          []byte `protobuf:"bytes,4,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (m *TLUploadSaveBigFilePart) Reset()         { *m = TLUploadSaveBigFilePart{} }
func (m *TLUploadSaveBigFilePart) String() string { return proto.CompactTextString(m) }
func (*TLUploadSaveBigFilePart) ProtoMessage()    {}
func (*TLUploadSaveBigFilePart) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{183}
}
func (m *TLUploadSaveBigFilePart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUploadSaveBigFilePart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUploadSaveBigFilePart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUploadSaveBigFilePart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUploadSaveBigFilePart.Merge(m, src)
}
func (m *TLUploadSaveBigFilePart) XXX_Size() int {
	return m.Size()
}
func (m *TLUploadSaveBigFilePart) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUploadSaveBigFilePart.DiscardUnknown(m)
}

var xxx_messageInfo_TLUploadSaveBigFilePart proto.InternalMessageInfo

func (m *TLUploadSaveBigFilePart) GetFileId() int64 {
	if m != nil {
		return m.FileId
	}
	return 0
}

func (m *TLUploadSaveBigFilePart) GetFilePart() int32 {
	if m != nil {
		return m.FilePart
	}
	return 0
}

func (m *TLUploadSaveBigFilePart) GetFileTotalParts() int32 {
	if m != nil {
		return m.FileTotalParts
	}
	return 0
}

func (m *TLUploadSaveBigFilePart) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// upload.getWebFile#24e6818d location:InputWebFileLocation offset:int limit:int = upload.WebFile;
type TLUploadGetWebFile struct {
	Location *InputWebFileLocation `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	Offset   int32                 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit    int32                 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *TLUploadGetWebFile) Reset()         { *m = TLUploadGetWebFile{} }
func (m *TLUploadGetWebFile) String() string { return proto.CompactTextString(m) }
func (*TLUploadGetWebFile) ProtoMessage()    {}
func (*TLUploadGetWebFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{184}
}
func (m *TLUploadGetWebFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUploadGetWebFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUploadGetWebFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUploadGetWebFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUploadGetWebFile.Merge(m, src)
}
func (m *TLUploadGetWebFile) XXX_Size() int {
	return m.Size()
}
func (m *TLUploadGetWebFile) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUploadGetWebFile.DiscardUnknown(m)
}

var xxx_messageInfo_TLUploadGetWebFile proto.InternalMessageInfo

func (m *TLUploadGetWebFile) GetLocation() *InputWebFileLocation {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *TLUploadGetWebFile) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TLUploadGetWebFile) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// upload.getCdnFile#2000bcc3 file_token:bytes offset:int limit:int = upload.CdnFile;
type TLUploadGetCdnFile struct {
	FileToken []byte `protobuf:"bytes,1,opt,name=file_token,json=fileToken,proto3" json:"file_token,omitempty"`
	Offset    int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit     int32  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *TLUploadGetCdnFile) Reset()         { *m = TLUploadGetCdnFile{} }
func (m *TLUploadGetCdnFile) String() string { return proto.CompactTextString(m) }
func (*TLUploadGetCdnFile) ProtoMessage()    {}
func (*TLUploadGetCdnFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{185}
}
func (m *TLUploadGetCdnFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUploadGetCdnFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUploadGetCdnFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUploadGetCdnFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUploadGetCdnFile.Merge(m, src)
}
func (m *TLUploadGetCdnFile) XXX_Size() int {
	return m.Size()
}
func (m *TLUploadGetCdnFile) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUploadGetCdnFile.DiscardUnknown(m)
}

var xxx_messageInfo_TLUploadGetCdnFile proto.InternalMessageInfo

func (m *TLUploadGetCdnFile) GetFileToken() []byte {
	if m != nil {
		return m.FileToken
	}
	return nil
}

func (m *TLUploadGetCdnFile) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TLUploadGetCdnFile) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// upload.reuploadCdnFile#1af91c09 file_token:bytes request_token:bytes = Vector<CdnFileHash>;
type TLUploadReuploadCdnFile struct {
	FileToken    []byte `protobuf:"bytes,1,opt,name=file_token,json=fileToken,proto3" json:"file_token,omitempty"`
	RequestToken []byte `protobuf:"bytes,2,opt,name=request_token,json=requestToken,proto3" json:"request_token,omitempty"`
}

func (m *TLUploadReuploadCdnFile) Reset()         { *m = TLUploadReuploadCdnFile{} }
func (m *TLUploadReuploadCdnFile) String() string { return proto.CompactTextString(m) }
func (*TLUploadReuploadCdnFile) ProtoMessage()    {}
func (*TLUploadReuploadCdnFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{186}
}
func (m *TLUploadReuploadCdnFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUploadReuploadCdnFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUploadReuploadCdnFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUploadReuploadCdnFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUploadReuploadCdnFile.Merge(m, src)
}
func (m *TLUploadReuploadCdnFile) XXX_Size() int {
	return m.Size()
}
func (m *TLUploadReuploadCdnFile) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUploadReuploadCdnFile.DiscardUnknown(m)
}

var xxx_messageInfo_TLUploadReuploadCdnFile proto.InternalMessageInfo

func (m *TLUploadReuploadCdnFile) GetFileToken() []byte {
	if m != nil {
		return m.FileToken
	}
	return nil
}

func (m *TLUploadReuploadCdnFile) GetRequestToken() []byte {
	if m != nil {
		return m.RequestToken
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// upload.getCdnFileHashes#f715c87b file_token:bytes offset:int = Vector<CdnFileHash>;
type TLUploadGetCdnFileHashes struct {
	FileToken []byte `protobuf:"bytes,1,opt,name=file_token,json=fileToken,proto3" json:"file_token,omitempty"`
	Offset    int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *TLUploadGetCdnFileHashes) Reset()         { *m = TLUploadGetCdnFileHashes{} }
func (m *TLUploadGetCdnFileHashes) String() string { return proto.CompactTextString(m) }
func (*TLUploadGetCdnFileHashes) ProtoMessage()    {}
func (*TLUploadGetCdnFileHashes) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{187}
}
func (m *TLUploadGetCdnFileHashes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUploadGetCdnFileHashes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUploadGetCdnFileHashes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUploadGetCdnFileHashes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUploadGetCdnFileHashes.Merge(m, src)
}
func (m *TLUploadGetCdnFileHashes) XXX_Size() int {
	return m.Size()
}
func (m *TLUploadGetCdnFileHashes) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUploadGetCdnFileHashes.DiscardUnknown(m)
}

var xxx_messageInfo_TLUploadGetCdnFileHashes proto.InternalMessageInfo

func (m *TLUploadGetCdnFileHashes) GetFileToken() []byte {
	if m != nil {
		return m.FileToken
	}
	return nil
}

func (m *TLUploadGetCdnFileHashes) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// help.getConfig#c4f9186b = Config;
type TLHelpGetConfig struct {
}

func (m *TLHelpGetConfig) Reset()         { *m = TLHelpGetConfig{} }
func (m *TLHelpGetConfig) String() string { return proto.CompactTextString(m) }
func (*TLHelpGetConfig) ProtoMessage()    {}
func (*TLHelpGetConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{188}
}
func (m *TLHelpGetConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpGetConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpGetConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpGetConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpGetConfig.Merge(m, src)
}
func (m *TLHelpGetConfig) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpGetConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpGetConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpGetConfig proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// help.getNearestDc#1fb33026 = NearestDc;
type TLHelpGetNearestDc struct {
}

func (m *TLHelpGetNearestDc) Reset()         { *m = TLHelpGetNearestDc{} }
func (m *TLHelpGetNearestDc) String() string { return proto.CompactTextString(m) }
func (*TLHelpGetNearestDc) ProtoMessage()    {}
func (*TLHelpGetNearestDc) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{189}
}
func (m *TLHelpGetNearestDc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpGetNearestDc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpGetNearestDc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpGetNearestDc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpGetNearestDc.Merge(m, src)
}
func (m *TLHelpGetNearestDc) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpGetNearestDc) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpGetNearestDc.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpGetNearestDc proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// help.getAppUpdate#ae2de196 = help.AppUpdate;
type TLHelpGetAppUpdate struct {
}

func (m *TLHelpGetAppUpdate) Reset()         { *m = TLHelpGetAppUpdate{} }
func (m *TLHelpGetAppUpdate) String() string { return proto.CompactTextString(m) }
func (*TLHelpGetAppUpdate) ProtoMessage()    {}
func (*TLHelpGetAppUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{190}
}
func (m *TLHelpGetAppUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpGetAppUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpGetAppUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpGetAppUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpGetAppUpdate.Merge(m, src)
}
func (m *TLHelpGetAppUpdate) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpGetAppUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpGetAppUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpGetAppUpdate proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// help.saveAppLog#6f02f748 events:Vector<InputAppEvent> = Bool;
type TLHelpSaveAppLog struct {
	Events []*InputAppEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (m *TLHelpSaveAppLog) Reset()         { *m = TLHelpSaveAppLog{} }
func (m *TLHelpSaveAppLog) String() string { return proto.CompactTextString(m) }
func (*TLHelpSaveAppLog) ProtoMessage()    {}
func (*TLHelpSaveAppLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{191}
}
func (m *TLHelpSaveAppLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpSaveAppLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpSaveAppLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpSaveAppLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpSaveAppLog.Merge(m, src)
}
func (m *TLHelpSaveAppLog) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpSaveAppLog) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpSaveAppLog.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpSaveAppLog proto.InternalMessageInfo

func (m *TLHelpSaveAppLog) GetEvents() []*InputAppEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// help.getInviteText#4d392343 = help.InviteText;
type TLHelpGetInviteText struct {
}

func (m *TLHelpGetInviteText) Reset()         { *m = TLHelpGetInviteText{} }
func (m *TLHelpGetInviteText) String() string { return proto.CompactTextString(m) }
func (*TLHelpGetInviteText) ProtoMessage()    {}
func (*TLHelpGetInviteText) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{192}
}
func (m *TLHelpGetInviteText) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpGetInviteText) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpGetInviteText.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpGetInviteText) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpGetInviteText.Merge(m, src)
}
func (m *TLHelpGetInviteText) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpGetInviteText) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpGetInviteText.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpGetInviteText proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// help.getSupport#9cdf08cd = help.Support;
type TLHelpGetSupport struct {
}

func (m *TLHelpGetSupport) Reset()         { *m = TLHelpGetSupport{} }
func (m *TLHelpGetSupport) String() string { return proto.CompactTextString(m) }
func (*TLHelpGetSupport) ProtoMessage()    {}
func (*TLHelpGetSupport) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{193}
}
func (m *TLHelpGetSupport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpGetSupport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpGetSupport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpGetSupport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpGetSupport.Merge(m, src)
}
func (m *TLHelpGetSupport) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpGetSupport) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpGetSupport.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpGetSupport proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// help.getAppChangelog#9010ef6f prev_app_version:string = Updates;
type TLHelpGetAppChangelog struct {
	PrevAppVersion string `protobuf:"bytes,1,opt,name=prev_app_version,json=prevAppVersion,proto3" json:"prev_app_version,omitempty"`
}

func (m *TLHelpGetAppChangelog) Reset()         { *m = TLHelpGetAppChangelog{} }
func (m *TLHelpGetAppChangelog) String() string { return proto.CompactTextString(m) }
func (*TLHelpGetAppChangelog) ProtoMessage()    {}
func (*TLHelpGetAppChangelog) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{194}
}
func (m *TLHelpGetAppChangelog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpGetAppChangelog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpGetAppChangelog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpGetAppChangelog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpGetAppChangelog.Merge(m, src)
}
func (m *TLHelpGetAppChangelog) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpGetAppChangelog) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpGetAppChangelog.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpGetAppChangelog proto.InternalMessageInfo

func (m *TLHelpGetAppChangelog) GetPrevAppVersion() string {
	if m != nil {
		return m.PrevAppVersion
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// help.getTermsOfService#350170f3 = help.TermsOfService;
type TLHelpGetTermsOfService struct {
}

func (m *TLHelpGetTermsOfService) Reset()         { *m = TLHelpGetTermsOfService{} }
func (m *TLHelpGetTermsOfService) String() string { return proto.CompactTextString(m) }
func (*TLHelpGetTermsOfService) ProtoMessage()    {}
func (*TLHelpGetTermsOfService) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{195}
}
func (m *TLHelpGetTermsOfService) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpGetTermsOfService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpGetTermsOfService.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpGetTermsOfService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpGetTermsOfService.Merge(m, src)
}
func (m *TLHelpGetTermsOfService) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpGetTermsOfService) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpGetTermsOfService.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpGetTermsOfService proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// help.setBotUpdatesStatus#ec22cfcd pending_updates_count:int message:string = Bool;
type TLHelpSetBotUpdatesStatus struct {
	PendingUpdatesCount int32  `protobuf:"varint,1,opt,name=pending_updates_count,json=pendingUpdatesCount,proto3" json:"pending_updates_count,omitempty"`
	Message             string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *TLHelpSetBotUpdatesStatus) Reset()         { *m = TLHelpSetBotUpdatesStatus{} }
func (m *TLHelpSetBotUpdatesStatus) String() string { return proto.CompactTextString(m) }
func (*TLHelpSetBotUpdatesStatus) ProtoMessage()    {}
func (*TLHelpSetBotUpdatesStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{196}
}
func (m *TLHelpSetBotUpdatesStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpSetBotUpdatesStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpSetBotUpdatesStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpSetBotUpdatesStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpSetBotUpdatesStatus.Merge(m, src)
}
func (m *TLHelpSetBotUpdatesStatus) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpSetBotUpdatesStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpSetBotUpdatesStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpSetBotUpdatesStatus proto.InternalMessageInfo

func (m *TLHelpSetBotUpdatesStatus) GetPendingUpdatesCount() int32 {
	if m != nil {
		return m.PendingUpdatesCount
	}
	return 0
}

func (m *TLHelpSetBotUpdatesStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// help.getCdnConfig#52029342 = CdnConfig;
type TLHelpGetCdnConfig struct {
}

func (m *TLHelpGetCdnConfig) Reset()         { *m = TLHelpGetCdnConfig{} }
func (m *TLHelpGetCdnConfig) String() string { return proto.CompactTextString(m) }
func (*TLHelpGetCdnConfig) ProtoMessage()    {}
func (*TLHelpGetCdnConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{197}
}
func (m *TLHelpGetCdnConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpGetCdnConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpGetCdnConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpGetCdnConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpGetCdnConfig.Merge(m, src)
}
func (m *TLHelpGetCdnConfig) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpGetCdnConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpGetCdnConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpGetCdnConfig proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// channels.readHistory#cc104937 channel:InputChannel max_id:int = Bool;
type TLChannelsReadHistory struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	MaxId   int32         `protobuf:"varint,2,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
}

func (m *TLChannelsReadHistory) Reset()         { *m = TLChannelsReadHistory{} }
func (m *TLChannelsReadHistory) String() string { return proto.CompactTextString(m) }
func (*TLChannelsReadHistory) ProtoMessage()    {}
func (*TLChannelsReadHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{198}
}
func (m *TLChannelsReadHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsReadHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsReadHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsReadHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsReadHistory.Merge(m, src)
}
func (m *TLChannelsReadHistory) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsReadHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsReadHistory.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsReadHistory proto.InternalMessageInfo

func (m *TLChannelsReadHistory) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsReadHistory) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// channels.deleteMessages#84c1fd4e channel:InputChannel id:Vector<int> = messages.AffectedMessages;
type TLChannelsDeleteMessages struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Id      []int32       `protobuf:"varint,2,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (m *TLChannelsDeleteMessages) Reset()         { *m = TLChannelsDeleteMessages{} }
func (m *TLChannelsDeleteMessages) String() string { return proto.CompactTextString(m) }
func (*TLChannelsDeleteMessages) ProtoMessage()    {}
func (*TLChannelsDeleteMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{199}
}
func (m *TLChannelsDeleteMessages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsDeleteMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsDeleteMessages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsDeleteMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsDeleteMessages.Merge(m, src)
}
func (m *TLChannelsDeleteMessages) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsDeleteMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsDeleteMessages.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsDeleteMessages proto.InternalMessageInfo

func (m *TLChannelsDeleteMessages) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsDeleteMessages) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// channels.deleteUserHistory#d10dd71b channel:InputChannel user_id:InputUser = messages.AffectedHistory;
type TLChannelsDeleteUserHistory struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	UserId  *InputUser    `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *TLChannelsDeleteUserHistory) Reset()         { *m = TLChannelsDeleteUserHistory{} }
func (m *TLChannelsDeleteUserHistory) String() string { return proto.CompactTextString(m) }
func (*TLChannelsDeleteUserHistory) ProtoMessage()    {}
func (*TLChannelsDeleteUserHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{200}
}
func (m *TLChannelsDeleteUserHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsDeleteUserHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsDeleteUserHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsDeleteUserHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsDeleteUserHistory.Merge(m, src)
}
func (m *TLChannelsDeleteUserHistory) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsDeleteUserHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsDeleteUserHistory.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsDeleteUserHistory proto.InternalMessageInfo

func (m *TLChannelsDeleteUserHistory) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsDeleteUserHistory) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// channels.reportSpam#fe087810 channel:InputChannel user_id:InputUser id:Vector<int> = Bool;
type TLChannelsReportSpam struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	UserId  *InputUser    `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id      []int32       `protobuf:"varint,3,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (m *TLChannelsReportSpam) Reset()         { *m = TLChannelsReportSpam{} }
func (m *TLChannelsReportSpam) String() string { return proto.CompactTextString(m) }
func (*TLChannelsReportSpam) ProtoMessage()    {}
func (*TLChannelsReportSpam) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{201}
}
func (m *TLChannelsReportSpam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsReportSpam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsReportSpam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsReportSpam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsReportSpam.Merge(m, src)
}
func (m *TLChannelsReportSpam) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsReportSpam) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsReportSpam.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsReportSpam proto.InternalMessageInfo

func (m *TLChannelsReportSpam) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsReportSpam) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *TLChannelsReportSpam) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// channels.getMessages#93d7b347 channel:InputChannel id:Vector<int> = messages.Messages;
type TLChannelsGetMessages struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Id      []int32       `protobuf:"varint,2,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (m *TLChannelsGetMessages) Reset()         { *m = TLChannelsGetMessages{} }
func (m *TLChannelsGetMessages) String() string { return proto.CompactTextString(m) }
func (*TLChannelsGetMessages) ProtoMessage()    {}
func (*TLChannelsGetMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{202}
}
func (m *TLChannelsGetMessages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsGetMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsGetMessages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsGetMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsGetMessages.Merge(m, src)
}
func (m *TLChannelsGetMessages) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsGetMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsGetMessages.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsGetMessages proto.InternalMessageInfo

func (m *TLChannelsGetMessages) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsGetMessages) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// channels.getParticipants#24d98f92 channel:InputChannel filter:ChannelParticipantsFilter offset:int limit:int = channels.ChannelParticipants;
type TLChannelsGetParticipants struct {
	Channel *InputChannel              `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Filter  *ChannelParticipantsFilter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	Offset  int32                      `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit   int32                      `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *TLChannelsGetParticipants) Reset()         { *m = TLChannelsGetParticipants{} }
func (m *TLChannelsGetParticipants) String() string { return proto.CompactTextString(m) }
func (*TLChannelsGetParticipants) ProtoMessage()    {}
func (*TLChannelsGetParticipants) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{203}
}
func (m *TLChannelsGetParticipants) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsGetParticipants) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsGetParticipants.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsGetParticipants) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsGetParticipants.Merge(m, src)
}
func (m *TLChannelsGetParticipants) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsGetParticipants) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsGetParticipants.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsGetParticipants proto.InternalMessageInfo

func (m *TLChannelsGetParticipants) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsGetParticipants) GetFilter() *ChannelParticipantsFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *TLChannelsGetParticipants) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TLChannelsGetParticipants) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// channels.getParticipant#546dd7a6 channel:InputChannel user_id:InputUser = channels.ChannelParticipant;
type TLChannelsGetParticipant struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	UserId  *InputUser    `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *TLChannelsGetParticipant) Reset()         { *m = TLChannelsGetParticipant{} }
func (m *TLChannelsGetParticipant) String() string { return proto.CompactTextString(m) }
func (*TLChannelsGetParticipant) ProtoMessage()    {}
func (*TLChannelsGetParticipant) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{204}
}
func (m *TLChannelsGetParticipant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsGetParticipant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsGetParticipant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsGetParticipant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsGetParticipant.Merge(m, src)
}
func (m *TLChannelsGetParticipant) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsGetParticipant) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsGetParticipant.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsGetParticipant proto.InternalMessageInfo

func (m *TLChannelsGetParticipant) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsGetParticipant) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// channels.getChannels#a7f6bbb id:Vector<InputChannel> = messages.Chats;
type TLChannelsGetChannels struct {
	Id []*InputChannel `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (m *TLChannelsGetChannels) Reset()         { *m = TLChannelsGetChannels{} }
func (m *TLChannelsGetChannels) String() string { return proto.CompactTextString(m) }
func (*TLChannelsGetChannels) ProtoMessage()    {}
func (*TLChannelsGetChannels) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{205}
}
func (m *TLChannelsGetChannels) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsGetChannels) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsGetChannels.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsGetChannels) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsGetChannels.Merge(m, src)
}
func (m *TLChannelsGetChannels) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsGetChannels) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsGetChannels.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsGetChannels proto.InternalMessageInfo

func (m *TLChannelsGetChannels) GetId() []*InputChannel {
	if m != nil {
		return m.Id
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// channels.getFullChannel#8736a09 channel:InputChannel = messages.ChatFull;
type TLChannelsGetFullChannel struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *TLChannelsGetFullChannel) Reset()         { *m = TLChannelsGetFullChannel{} }
func (m *TLChannelsGetFullChannel) String() string { return proto.CompactTextString(m) }
func (*TLChannelsGetFullChannel) ProtoMessage()    {}
func (*TLChannelsGetFullChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{206}
}
func (m *TLChannelsGetFullChannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsGetFullChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsGetFullChannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsGetFullChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsGetFullChannel.Merge(m, src)
}
func (m *TLChannelsGetFullChannel) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsGetFullChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsGetFullChannel.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsGetFullChannel proto.InternalMessageInfo

func (m *TLChannelsGetFullChannel) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// channels.createChannel#f4893d7f flags:# broadcast:flags.0?true megagroup:flags.1?true title:string about:string = Updates;
type TLChannelsCreateChannel struct {
	Broadcast bool   `protobuf:"varint,2,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	Megagroup bool   `protobuf:"varint,3,opt,name=megagroup,proto3" json:"megagroup,omitempty"`
	Title     string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	About     string `protobuf:"bytes,5,opt,name=about,proto3" json:"about,omitempty"`
}

func (m *TLChannelsCreateChannel) Reset()         { *m = TLChannelsCreateChannel{} }
func (m *TLChannelsCreateChannel) String() string { return proto.CompactTextString(m) }
func (*TLChannelsCreateChannel) ProtoMessage()    {}
func (*TLChannelsCreateChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{207}
}
func (m *TLChannelsCreateChannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsCreateChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsCreateChannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsCreateChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsCreateChannel.Merge(m, src)
}
func (m *TLChannelsCreateChannel) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsCreateChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsCreateChannel.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsCreateChannel proto.InternalMessageInfo

func (m *TLChannelsCreateChannel) GetBroadcast() bool {
	if m != nil {
		return m.Broadcast
	}
	return false
}

func (m *TLChannelsCreateChannel) GetMegagroup() bool {
	if m != nil {
		return m.Megagroup
	}
	return false
}

func (m *TLChannelsCreateChannel) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *TLChannelsCreateChannel) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// channels.editAbout#13e27f1e channel:InputChannel about:string = Bool;
type TLChannelsEditAbout struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	About   string        `protobuf:"bytes,2,opt,name=about,proto3" json:"about,omitempty"`
}

func (m *TLChannelsEditAbout) Reset()         { *m = TLChannelsEditAbout{} }
func (m *TLChannelsEditAbout) String() string { return proto.CompactTextString(m) }
func (*TLChannelsEditAbout) ProtoMessage()    {}
func (*TLChannelsEditAbout) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{208}
}
func (m *TLChannelsEditAbout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsEditAbout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsEditAbout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsEditAbout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsEditAbout.Merge(m, src)
}
func (m *TLChannelsEditAbout) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsEditAbout) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsEditAbout.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsEditAbout proto.InternalMessageInfo

func (m *TLChannelsEditAbout) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsEditAbout) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// channels.editAdmin#20b88214 channel:InputChannel user_id:InputUser admin_rights:ChannelAdminRights = Updates;
type TLChannelsEditAdmin struct {
	Channel     *InputChannel       `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	UserId      *InputUser          `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AdminRights *ChannelAdminRights `protobuf:"bytes,3,opt,name=admin_rights,json=adminRights,proto3" json:"admin_rights,omitempty"`
}

func (m *TLChannelsEditAdmin) Reset()         { *m = TLChannelsEditAdmin{} }
func (m *TLChannelsEditAdmin) String() string { return proto.CompactTextString(m) }
func (*TLChannelsEditAdmin) ProtoMessage()    {}
func (*TLChannelsEditAdmin) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{209}
}
func (m *TLChannelsEditAdmin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsEditAdmin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsEditAdmin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsEditAdmin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsEditAdmin.Merge(m, src)
}
func (m *TLChannelsEditAdmin) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsEditAdmin) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsEditAdmin.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsEditAdmin proto.InternalMessageInfo

func (m *TLChannelsEditAdmin) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsEditAdmin) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *TLChannelsEditAdmin) GetAdminRights() *ChannelAdminRights {
	if m != nil {
		return m.AdminRights
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// channels.editTitle#566decd0 channel:InputChannel title:string = Updates;
type TLChannelsEditTitle struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Title   string        `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
}

func (m *TLChannelsEditTitle) Reset()         { *m = TLChannelsEditTitle{} }
func (m *TLChannelsEditTitle) String() string { return proto.CompactTextString(m) }
func (*TLChannelsEditTitle) ProtoMessage()    {}
func (*TLChannelsEditTitle) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{210}
}
func (m *TLChannelsEditTitle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsEditTitle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsEditTitle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsEditTitle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsEditTitle.Merge(m, src)
}
func (m *TLChannelsEditTitle) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsEditTitle) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsEditTitle.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsEditTitle proto.InternalMessageInfo

func (m *TLChannelsEditTitle) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsEditTitle) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// channels.editPhoto#f12e57c9 channel:InputChannel photo:InputChatPhoto = Updates;
type TLChannelsEditPhoto struct {
	Channel *InputChannel   `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Photo   *InputChatPhoto `protobuf:"bytes,2,opt,name=photo,proto3" json:"photo,omitempty"`
}

func (m *TLChannelsEditPhoto) Reset()         { *m = TLChannelsEditPhoto{} }
func (m *TLChannelsEditPhoto) String() string { return proto.CompactTextString(m) }
func (*TLChannelsEditPhoto) ProtoMessage()    {}
func (*TLChannelsEditPhoto) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{211}
}
func (m *TLChannelsEditPhoto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsEditPhoto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsEditPhoto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsEditPhoto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsEditPhoto.Merge(m, src)
}
func (m *TLChannelsEditPhoto) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsEditPhoto) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsEditPhoto.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsEditPhoto proto.InternalMessageInfo

func (m *TLChannelsEditPhoto) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsEditPhoto) GetPhoto() *InputChatPhoto {
	if m != nil {
		return m.Photo
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// channels.checkUsername#10e6bd2c channel:InputChannel username:string = Bool;
type TLChannelsCheckUsername struct {
	Channel  *InputChannel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Username string        `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (m *TLChannelsCheckUsername) Reset()         { *m = TLChannelsCheckUsername{} }
func (m *TLChannelsCheckUsername) String() string { return proto.CompactTextString(m) }
func (*TLChannelsCheckUsername) ProtoMessage()    {}
func (*TLChannelsCheckUsername) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{212}
}
func (m *TLChannelsCheckUsername) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsCheckUsername) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsCheckUsername.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsCheckUsername) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsCheckUsername.Merge(m, src)
}
func (m *TLChannelsCheckUsername) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsCheckUsername) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsCheckUsername.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsCheckUsername proto.InternalMessageInfo

func (m *TLChannelsCheckUsername) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsCheckUsername) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// channels.updateUsername#3514b3de channel:InputChannel username:string = Bool;
type TLChannelsUpdateUsername struct {
	Channel  *InputChannel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Username string        `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (m *TLChannelsUpdateUsername) Reset()         { *m = TLChannelsUpdateUsername{} }
func (m *TLChannelsUpdateUsername) String() string { return proto.CompactTextString(m) }
func (*TLChannelsUpdateUsername) ProtoMessage()    {}
func (*TLChannelsUpdateUsername) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{213}
}
func (m *TLChannelsUpdateUsername) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsUpdateUsername) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsUpdateUsername.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsUpdateUsername) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsUpdateUsername.Merge(m, src)
}
func (m *TLChannelsUpdateUsername) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsUpdateUsername) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsUpdateUsername.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsUpdateUsername proto.InternalMessageInfo

func (m *TLChannelsUpdateUsername) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsUpdateUsername) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// channels.joinChannel#24b524c5 channel:InputChannel = Updates;
type TLChannelsJoinChannel struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *TLChannelsJoinChannel) Reset()         { *m = TLChannelsJoinChannel{} }
func (m *TLChannelsJoinChannel) String() string { return proto.CompactTextString(m) }
func (*TLChannelsJoinChannel) ProtoMessage()    {}
func (*TLChannelsJoinChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{214}
}
func (m *TLChannelsJoinChannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsJoinChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsJoinChannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsJoinChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsJoinChannel.Merge(m, src)
}
func (m *TLChannelsJoinChannel) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsJoinChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsJoinChannel.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsJoinChannel proto.InternalMessageInfo

func (m *TLChannelsJoinChannel) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// channels.leaveChannel#f836aa95 channel:InputChannel = Updates;
type TLChannelsLeaveChannel struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *TLChannelsLeaveChannel) Reset()         { *m = TLChannelsLeaveChannel{} }
func (m *TLChannelsLeaveChannel) String() string { return proto.CompactTextString(m) }
func (*TLChannelsLeaveChannel) ProtoMessage()    {}
func (*TLChannelsLeaveChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{215}
}
func (m *TLChannelsLeaveChannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsLeaveChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsLeaveChannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsLeaveChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsLeaveChannel.Merge(m, src)
}
func (m *TLChannelsLeaveChannel) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsLeaveChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsLeaveChannel.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsLeaveChannel proto.InternalMessageInfo

func (m *TLChannelsLeaveChannel) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// channels.inviteToChannel#199f3a6c channel:InputChannel users:Vector<InputUser> = Updates;
type TLChannelsInviteToChannel struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Users   []*InputUser  `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
}

func (m *TLChannelsInviteToChannel) Reset()         { *m = TLChannelsInviteToChannel{} }
func (m *TLChannelsInviteToChannel) String() string { return proto.CompactTextString(m) }
func (*TLChannelsInviteToChannel) ProtoMessage()    {}
func (*TLChannelsInviteToChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{216}
}
func (m *TLChannelsInviteToChannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsInviteToChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsInviteToChannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsInviteToChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsInviteToChannel.Merge(m, src)
}
func (m *TLChannelsInviteToChannel) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsInviteToChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsInviteToChannel.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsInviteToChannel proto.InternalMessageInfo

func (m *TLChannelsInviteToChannel) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsInviteToChannel) GetUsers() []*InputUser {
	if m != nil {
		return m.Users
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// channels.exportInvite#c7560885 channel:InputChannel = ExportedChatInvite;
type TLChannelsExportInvite struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *TLChannelsExportInvite) Reset()         { *m = TLChannelsExportInvite{} }
func (m *TLChannelsExportInvite) String() string { return proto.CompactTextString(m) }
func (*TLChannelsExportInvite) ProtoMessage()    {}
func (*TLChannelsExportInvite) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{217}
}
func (m *TLChannelsExportInvite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsExportInvite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsExportInvite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsExportInvite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsExportInvite.Merge(m, src)
}
func (m *TLChannelsExportInvite) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsExportInvite) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsExportInvite.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsExportInvite proto.InternalMessageInfo

func (m *TLChannelsExportInvite) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// channels.deleteChannel#c0111fe3 channel:InputChannel = Updates;
type TLChannelsDeleteChannel struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *TLChannelsDeleteChannel) Reset()         { *m = TLChannelsDeleteChannel{} }
func (m *TLChannelsDeleteChannel) String() string { return proto.CompactTextString(m) }
func (*TLChannelsDeleteChannel) ProtoMessage()    {}
func (*TLChannelsDeleteChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{218}
}
func (m *TLChannelsDeleteChannel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsDeleteChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsDeleteChannel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsDeleteChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsDeleteChannel.Merge(m, src)
}
func (m *TLChannelsDeleteChannel) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsDeleteChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsDeleteChannel.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsDeleteChannel proto.InternalMessageInfo

func (m *TLChannelsDeleteChannel) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// channels.toggleInvites#49609307 channel:InputChannel enabled:Bool = Updates;
type TLChannelsToggleInvites struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Enabled *Bool         `protobuf:"bytes,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (m *TLChannelsToggleInvites) Reset()         { *m = TLChannelsToggleInvites{} }
func (m *TLChannelsToggleInvites) String() string { return proto.CompactTextString(m) }
func (*TLChannelsToggleInvites) ProtoMessage()    {}
func (*TLChannelsToggleInvites) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{219}
}
func (m *TLChannelsToggleInvites) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsToggleInvites) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsToggleInvites.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsToggleInvites) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsToggleInvites.Merge(m, src)
}
func (m *TLChannelsToggleInvites) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsToggleInvites) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsToggleInvites.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsToggleInvites proto.InternalMessageInfo

func (m *TLChannelsToggleInvites) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsToggleInvites) GetEnabled() *Bool {
	if m != nil {
		return m.Enabled
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// channels.exportMessageLink#c846d22d channel:InputChannel id:int = ExportedMessageLink;
type TLChannelsExportMessageLink struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Id      int32         `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *TLChannelsExportMessageLink) Reset()         { *m = TLChannelsExportMessageLink{} }
func (m *TLChannelsExportMessageLink) String() string { return proto.CompactTextString(m) }
func (*TLChannelsExportMessageLink) ProtoMessage()    {}
func (*TLChannelsExportMessageLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{220}
}
func (m *TLChannelsExportMessageLink) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsExportMessageLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsExportMessageLink.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsExportMessageLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsExportMessageLink.Merge(m, src)
}
func (m *TLChannelsExportMessageLink) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsExportMessageLink) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsExportMessageLink.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsExportMessageLink proto.InternalMessageInfo

func (m *TLChannelsExportMessageLink) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsExportMessageLink) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// channels.toggleSignatures#1f69b606 channel:InputChannel enabled:Bool = Updates;
type TLChannelsToggleSignatures struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Enabled *Bool         `protobuf:"bytes,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (m *TLChannelsToggleSignatures) Reset()         { *m = TLChannelsToggleSignatures{} }
func (m *TLChannelsToggleSignatures) String() string { return proto.CompactTextString(m) }
func (*TLChannelsToggleSignatures) ProtoMessage()    {}
func (*TLChannelsToggleSignatures) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{221}
}
func (m *TLChannelsToggleSignatures) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsToggleSignatures) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsToggleSignatures.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsToggleSignatures) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsToggleSignatures.Merge(m, src)
}
func (m *TLChannelsToggleSignatures) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsToggleSignatures) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsToggleSignatures.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsToggleSignatures proto.InternalMessageInfo

func (m *TLChannelsToggleSignatures) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsToggleSignatures) GetEnabled() *Bool {
	if m != nil {
		return m.Enabled
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// channels.updatePinnedMessage#a72ded52 flags:# silent:flags.0?true channel:InputChannel id:int = Updates;
type TLChannelsUpdatePinnedMessage struct {
	Silent  bool          `protobuf:"varint,2,opt,name=silent,proto3" json:"silent,omitempty"`
	Channel *InputChannel `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	Id      int32         `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *TLChannelsUpdatePinnedMessage) Reset()         { *m = TLChannelsUpdatePinnedMessage{} }
func (m *TLChannelsUpdatePinnedMessage) String() string { return proto.CompactTextString(m) }
func (*TLChannelsUpdatePinnedMessage) ProtoMessage()    {}
func (*TLChannelsUpdatePinnedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{222}
}
func (m *TLChannelsUpdatePinnedMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsUpdatePinnedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsUpdatePinnedMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsUpdatePinnedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsUpdatePinnedMessage.Merge(m, src)
}
func (m *TLChannelsUpdatePinnedMessage) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsUpdatePinnedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsUpdatePinnedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsUpdatePinnedMessage proto.InternalMessageInfo

func (m *TLChannelsUpdatePinnedMessage) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *TLChannelsUpdatePinnedMessage) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsUpdatePinnedMessage) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// channels.getAdminedPublicChannels#8d8d82d7 = messages.Chats;
type TLChannelsGetAdminedPublicChannels struct {
}

func (m *TLChannelsGetAdminedPublicChannels) Reset()         { *m = TLChannelsGetAdminedPublicChannels{} }
func (m *TLChannelsGetAdminedPublicChannels) String() string { return proto.CompactTextString(m) }
func (*TLChannelsGetAdminedPublicChannels) ProtoMessage()    {}
func (*TLChannelsGetAdminedPublicChannels) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{223}
}
func (m *TLChannelsGetAdminedPublicChannels) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsGetAdminedPublicChannels) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsGetAdminedPublicChannels.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsGetAdminedPublicChannels) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsGetAdminedPublicChannels.Merge(m, src)
}
func (m *TLChannelsGetAdminedPublicChannels) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsGetAdminedPublicChannels) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsGetAdminedPublicChannels.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsGetAdminedPublicChannels proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// channels.editBanned#bfd915cd channel:InputChannel user_id:InputUser banned_rights:ChannelBannedRights = Updates;
type TLChannelsEditBanned struct {
	Channel      *InputChannel        `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	UserId       *InputUser           `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BannedRights *ChannelBannedRights `protobuf:"bytes,3,opt,name=banned_rights,json=bannedRights,proto3" json:"banned_rights,omitempty"`
}

func (m *TLChannelsEditBanned) Reset()         { *m = TLChannelsEditBanned{} }
func (m *TLChannelsEditBanned) String() string { return proto.CompactTextString(m) }
func (*TLChannelsEditBanned) ProtoMessage()    {}
func (*TLChannelsEditBanned) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{224}
}
func (m *TLChannelsEditBanned) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsEditBanned) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsEditBanned.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsEditBanned) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsEditBanned.Merge(m, src)
}
func (m *TLChannelsEditBanned) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsEditBanned) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsEditBanned.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsEditBanned proto.InternalMessageInfo

func (m *TLChannelsEditBanned) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsEditBanned) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *TLChannelsEditBanned) GetBannedRights() *ChannelBannedRights {
	if m != nil {
		return m.BannedRights
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// channels.getAdminLog#33ddf480 flags:# channel:InputChannel q:string events_filter:flags.0?ChannelAdminLogEventsFilter admins:flags.1?Vector<InputUser> max_id:long min_id:long limit:int = channels.AdminLogResults;
type TLChannelsGetAdminLog struct {
	Channel      *InputChannel                `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	Q            string                       `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	EventsFilter *ChannelAdminLogEventsFilter `protobuf:"bytes,4,opt,name=events_filter,json=eventsFilter,proto3" json:"events_filter,omitempty"`
	Admins       []*InputUser                 `protobuf:"bytes,5,rep,name=admins,proto3" json:"admins,omitempty"`
	MaxId        int64                        `protobuf:"varint,6,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	MinId        int64                        `protobuf:"varint,7,opt,name=min_id,json=minId,proto3" json:"min_id,omitempty"`
	Limit        int32                        `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *TLChannelsGetAdminLog) Reset()         { *m = TLChannelsGetAdminLog{} }
func (m *TLChannelsGetAdminLog) String() string { return proto.CompactTextString(m) }
func (*TLChannelsGetAdminLog) ProtoMessage()    {}
func (*TLChannelsGetAdminLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{225}
}
func (m *TLChannelsGetAdminLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsGetAdminLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsGetAdminLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsGetAdminLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsGetAdminLog.Merge(m, src)
}
func (m *TLChannelsGetAdminLog) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsGetAdminLog) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsGetAdminLog.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsGetAdminLog proto.InternalMessageInfo

func (m *TLChannelsGetAdminLog) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsGetAdminLog) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

func (m *TLChannelsGetAdminLog) GetEventsFilter() *ChannelAdminLogEventsFilter {
	if m != nil {
		return m.EventsFilter
	}
	return nil
}

func (m *TLChannelsGetAdminLog) GetAdmins() []*InputUser {
	if m != nil {
		return m.Admins
	}
	return nil
}

func (m *TLChannelsGetAdminLog) GetMaxId() int64 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *TLChannelsGetAdminLog) GetMinId() int64 {
	if m != nil {
		return m.MinId
	}
	return 0
}

func (m *TLChannelsGetAdminLog) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// channels.setStickers#ea8ca4f9 channel:InputChannel stickerset:InputStickerSet = Bool;
type TLChannelsSetStickers struct {
	Channel    *InputChannel    `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Stickerset *InputStickerSet `protobuf:"bytes,2,opt,name=stickerset,proto3" json:"stickerset,omitempty"`
}

func (m *TLChannelsSetStickers) Reset()         { *m = TLChannelsSetStickers{} }
func (m *TLChannelsSetStickers) String() string { return proto.CompactTextString(m) }
func (*TLChannelsSetStickers) ProtoMessage()    {}
func (*TLChannelsSetStickers) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{226}
}
func (m *TLChannelsSetStickers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsSetStickers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsSetStickers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsSetStickers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsSetStickers.Merge(m, src)
}
func (m *TLChannelsSetStickers) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsSetStickers) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsSetStickers.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsSetStickers proto.InternalMessageInfo

func (m *TLChannelsSetStickers) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsSetStickers) GetStickerset() *InputStickerSet {
	if m != nil {
		return m.Stickerset
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// channels.readMessageContents#eab5dc38 channel:InputChannel id:Vector<int> = Bool;
type TLChannelsReadMessageContents struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Id      []int32       `protobuf:"varint,2,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (m *TLChannelsReadMessageContents) Reset()         { *m = TLChannelsReadMessageContents{} }
func (m *TLChannelsReadMessageContents) String() string { return proto.CompactTextString(m) }
func (*TLChannelsReadMessageContents) ProtoMessage()    {}
func (*TLChannelsReadMessageContents) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{227}
}
func (m *TLChannelsReadMessageContents) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsReadMessageContents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsReadMessageContents.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsReadMessageContents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsReadMessageContents.Merge(m, src)
}
func (m *TLChannelsReadMessageContents) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsReadMessageContents) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsReadMessageContents.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsReadMessageContents proto.InternalMessageInfo

func (m *TLChannelsReadMessageContents) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsReadMessageContents) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// bots.sendCustomRequest#aa2769ed custom_method:string params:DataJSON = DataJSON;
type TLBotsSendCustomRequest struct {
	CustomMethod string    `protobuf:"bytes,1,opt,name=custom_method,json=customMethod,proto3" json:"custom_method,omitempty"`
	Params       *DataJSON `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *TLBotsSendCustomRequest) Reset()         { *m = TLBotsSendCustomRequest{} }
func (m *TLBotsSendCustomRequest) String() string { return proto.CompactTextString(m) }
func (*TLBotsSendCustomRequest) ProtoMessage()    {}
func (*TLBotsSendCustomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{228}
}
func (m *TLBotsSendCustomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLBotsSendCustomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLBotsSendCustomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLBotsSendCustomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLBotsSendCustomRequest.Merge(m, src)
}
func (m *TLBotsSendCustomRequest) XXX_Size() int {
	return m.Size()
}
func (m *TLBotsSendCustomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TLBotsSendCustomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TLBotsSendCustomRequest proto.InternalMessageInfo

func (m *TLBotsSendCustomRequest) GetCustomMethod() string {
	if m != nil {
		return m.CustomMethod
	}
	return ""
}

func (m *TLBotsSendCustomRequest) GetParams() *DataJSON {
	if m != nil {
		return m.Params
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// bots.answerWebhookJSONQuery#e6213f4d query_id:long data:DataJSON = Bool;
type TLBotsAnswerWebhookJSONQuery struct {
	QueryId int64     `protobuf:"varint,1,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	Data    *DataJSON `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *TLBotsAnswerWebhookJSONQuery) Reset()         { *m = TLBotsAnswerWebhookJSONQuery{} }
func (m *TLBotsAnswerWebhookJSONQuery) String() string { return proto.CompactTextString(m) }
func (*TLBotsAnswerWebhookJSONQuery) ProtoMessage()    {}
func (*TLBotsAnswerWebhookJSONQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{229}
}
func (m *TLBotsAnswerWebhookJSONQuery) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLBotsAnswerWebhookJSONQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLBotsAnswerWebhookJSONQuery.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLBotsAnswerWebhookJSONQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLBotsAnswerWebhookJSONQuery.Merge(m, src)
}
func (m *TLBotsAnswerWebhookJSONQuery) XXX_Size() int {
	return m.Size()
}
func (m *TLBotsAnswerWebhookJSONQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_TLBotsAnswerWebhookJSONQuery.DiscardUnknown(m)
}

var xxx_messageInfo_TLBotsAnswerWebhookJSONQuery proto.InternalMessageInfo

func (m *TLBotsAnswerWebhookJSONQuery) GetQueryId() int64 {
	if m != nil {
		return m.QueryId
	}
	return 0
}

func (m *TLBotsAnswerWebhookJSONQuery) GetData() *DataJSON {
	if m != nil {
		return m.Data
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// payments.getPaymentForm#99f09745 msg_id:int = payments.PaymentForm;
type TLPaymentsGetPaymentForm struct {
	MsgId int32 `protobuf:"varint,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
}

func (m *TLPaymentsGetPaymentForm) Reset()         { *m = TLPaymentsGetPaymentForm{} }
func (m *TLPaymentsGetPaymentForm) String() string { return proto.CompactTextString(m) }
func (*TLPaymentsGetPaymentForm) ProtoMessage()    {}
func (*TLPaymentsGetPaymentForm) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{230}
}
func (m *TLPaymentsGetPaymentForm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPaymentsGetPaymentForm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPaymentsGetPaymentForm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLPaymentsGetPaymentForm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPaymentsGetPaymentForm.Merge(m, src)
}
func (m *TLPaymentsGetPaymentForm) XXX_Size() int {
	return m.Size()
}
func (m *TLPaymentsGetPaymentForm) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPaymentsGetPaymentForm.DiscardUnknown(m)
}

var xxx_messageInfo_TLPaymentsGetPaymentForm proto.InternalMessageInfo

func (m *TLPaymentsGetPaymentForm) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// payments.getPaymentReceipt#a092a980 msg_id:int = payments.PaymentReceipt;
type TLPaymentsGetPaymentReceipt struct {
	MsgId int32 `protobuf:"varint,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
}

func (m *TLPaymentsGetPaymentReceipt) Reset()         { *m = TLPaymentsGetPaymentReceipt{} }
func (m *TLPaymentsGetPaymentReceipt) String() string { return proto.CompactTextString(m) }
func (*TLPaymentsGetPaymentReceipt) ProtoMessage()    {}
func (*TLPaymentsGetPaymentReceipt) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{231}
}
func (m *TLPaymentsGetPaymentReceipt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPaymentsGetPaymentReceipt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPaymentsGetPaymentReceipt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLPaymentsGetPaymentReceipt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPaymentsGetPaymentReceipt.Merge(m, src)
}
func (m *TLPaymentsGetPaymentReceipt) XXX_Size() int {
	return m.Size()
}
func (m *TLPaymentsGetPaymentReceipt) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPaymentsGetPaymentReceipt.DiscardUnknown(m)
}

var xxx_messageInfo_TLPaymentsGetPaymentReceipt proto.InternalMessageInfo

func (m *TLPaymentsGetPaymentReceipt) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// payments.validateRequestedInfo#770a8e74 flags:# save:flags.0?true msg_id:int info:PaymentRequestedInfo = payments.ValidatedRequestedInfo;
type TLPaymentsValidateRequestedInfo struct {
	Save  bool                  `protobuf:"varint,2,opt,name=save,proto3" json:"save,omitempty"`
	MsgId int32                 `protobuf:"varint,3,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	Info  *PaymentRequestedInfo `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *TLPaymentsValidateRequestedInfo) Reset()         { *m = TLPaymentsValidateRequestedInfo{} }
func (m *TLPaymentsValidateRequestedInfo) String() string { return proto.CompactTextString(m) }
func (*TLPaymentsValidateRequestedInfo) ProtoMessage()    {}
func (*TLPaymentsValidateRequestedInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{232}
}
func (m *TLPaymentsValidateRequestedInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPaymentsValidateRequestedInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPaymentsValidateRequestedInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLPaymentsValidateRequestedInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPaymentsValidateRequestedInfo.Merge(m, src)
}
func (m *TLPaymentsValidateRequestedInfo) XXX_Size() int {
	return m.Size()
}
func (m *TLPaymentsValidateRequestedInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPaymentsValidateRequestedInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TLPaymentsValidateRequestedInfo proto.InternalMessageInfo

func (m *TLPaymentsValidateRequestedInfo) GetSave() bool {
	if m != nil {
		return m.Save
	}
	return false
}

func (m *TLPaymentsValidateRequestedInfo) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *TLPaymentsValidateRequestedInfo) GetInfo() *PaymentRequestedInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// payments.sendPaymentForm#2b8879b3 flags:# msg_id:int requested_info_id:flags.0?string shipping_option_id:flags.1?string credentials:InputPaymentCredentials = payments.PaymentResult;
type TLPaymentsSendPaymentForm struct {
	MsgId            int32                    `protobuf:"varint,2,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	RequestedInfoId  string                   `protobuf:"bytes,3,opt,name=requested_info_id,json=requestedInfoId,proto3" json:"requested_info_id,omitempty"`
	ShippingOptionId string                   `protobuf:"bytes,4,opt,name=shipping_option_id,json=shippingOptionId,proto3" json:"shipping_option_id,omitempty"`
	Credentials      *InputPaymentCredentials `protobuf:"bytes,5,opt,name=credentials,proto3" json:"credentials,omitempty"`
}

func (m *TLPaymentsSendPaymentForm) Reset()         { *m = TLPaymentsSendPaymentForm{} }
func (m *TLPaymentsSendPaymentForm) String() string { return proto.CompactTextString(m) }
func (*TLPaymentsSendPaymentForm) ProtoMessage()    {}
func (*TLPaymentsSendPaymentForm) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{233}
}
func (m *TLPaymentsSendPaymentForm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPaymentsSendPaymentForm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPaymentsSendPaymentForm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLPaymentsSendPaymentForm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPaymentsSendPaymentForm.Merge(m, src)
}
func (m *TLPaymentsSendPaymentForm) XXX_Size() int {
	return m.Size()
}
func (m *TLPaymentsSendPaymentForm) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPaymentsSendPaymentForm.DiscardUnknown(m)
}

var xxx_messageInfo_TLPaymentsSendPaymentForm proto.InternalMessageInfo

func (m *TLPaymentsSendPaymentForm) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *TLPaymentsSendPaymentForm) GetRequestedInfoId() string {
	if m != nil {
		return m.RequestedInfoId
	}
	return ""
}

func (m *TLPaymentsSendPaymentForm) GetShippingOptionId() string {
	if m != nil {
		return m.ShippingOptionId
	}
	return ""
}

func (m *TLPaymentsSendPaymentForm) GetCredentials() *InputPaymentCredentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// payments.getSavedInfo#227d824b = payments.SavedInfo;
type TLPaymentsGetSavedInfo struct {
}

func (m *TLPaymentsGetSavedInfo) Reset()         { *m = TLPaymentsGetSavedInfo{} }
func (m *TLPaymentsGetSavedInfo) String() string { return proto.CompactTextString(m) }
func (*TLPaymentsGetSavedInfo) ProtoMessage()    {}
func (*TLPaymentsGetSavedInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{234}
}
func (m *TLPaymentsGetSavedInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPaymentsGetSavedInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPaymentsGetSavedInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLPaymentsGetSavedInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPaymentsGetSavedInfo.Merge(m, src)
}
func (m *TLPaymentsGetSavedInfo) XXX_Size() int {
	return m.Size()
}
func (m *TLPaymentsGetSavedInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPaymentsGetSavedInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TLPaymentsGetSavedInfo proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// payments.clearSavedInfo#d83d70c1 flags:# credentials:flags.0?true info:flags.1?true = Bool;
type TLPaymentsClearSavedInfo struct {
	Credentials bool `protobuf:"varint,2,opt,name=credentials,proto3" json:"credentials,omitempty"`
	Info        bool `protobuf:"varint,3,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *TLPaymentsClearSavedInfo) Reset()         { *m = TLPaymentsClearSavedInfo{} }
func (m *TLPaymentsClearSavedInfo) String() string { return proto.CompactTextString(m) }
func (*TLPaymentsClearSavedInfo) ProtoMessage()    {}
func (*TLPaymentsClearSavedInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{235}
}
func (m *TLPaymentsClearSavedInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPaymentsClearSavedInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPaymentsClearSavedInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLPaymentsClearSavedInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPaymentsClearSavedInfo.Merge(m, src)
}
func (m *TLPaymentsClearSavedInfo) XXX_Size() int {
	return m.Size()
}
func (m *TLPaymentsClearSavedInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPaymentsClearSavedInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TLPaymentsClearSavedInfo proto.InternalMessageInfo

func (m *TLPaymentsClearSavedInfo) GetCredentials() bool {
	if m != nil {
		return m.Credentials
	}
	return false
}

func (m *TLPaymentsClearSavedInfo) GetInfo() bool {
	if m != nil {
		return m.Info
	}
	return false
}

///////////////////////////////////////////////////////////////////////////////
// stickers.createStickerSet#9bd86e6a flags:# masks:flags.0?true user_id:InputUser title:string short_name:string stickers:Vector<InputStickerSetItem> = messages.StickerSet;
type TLStickersCreateStickerSet struct {
	Masks     bool                   `protobuf:"varint,2,opt,name=masks,proto3" json:"masks,omitempty"`
	UserId    *InputUser             `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Title     string                 `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	ShortName string                 `protobuf:"bytes,5,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Stickers  []*InputStickerSetItem `protobuf:"bytes,6,rep,name=stickers,proto3" json:"stickers,omitempty"`
}

func (m *TLStickersCreateStickerSet) Reset()         { *m = TLStickersCreateStickerSet{} }
func (m *TLStickersCreateStickerSet) String() string { return proto.CompactTextString(m) }
func (*TLStickersCreateStickerSet) ProtoMessage()    {}
func (*TLStickersCreateStickerSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{236}
}
func (m *TLStickersCreateStickerSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLStickersCreateStickerSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLStickersCreateStickerSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLStickersCreateStickerSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLStickersCreateStickerSet.Merge(m, src)
}
func (m *TLStickersCreateStickerSet) XXX_Size() int {
	return m.Size()
}
func (m *TLStickersCreateStickerSet) XXX_DiscardUnknown() {
	xxx_messageInfo_TLStickersCreateStickerSet.DiscardUnknown(m)
}

var xxx_messageInfo_TLStickersCreateStickerSet proto.InternalMessageInfo

func (m *TLStickersCreateStickerSet) GetMasks() bool {
	if m != nil {
		return m.Masks
	}
	return false
}

func (m *TLStickersCreateStickerSet) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *TLStickersCreateStickerSet) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *TLStickersCreateStickerSet) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *TLStickersCreateStickerSet) GetStickers() []*InputStickerSetItem {
	if m != nil {
		return m.Stickers
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// stickers.removeStickerFromSet#f7760f51 sticker:InputDocument = messages.StickerSet;
type TLStickersRemoveStickerFromSet struct {
	Sticker *InputDocument `protobuf:"bytes,1,opt,name=sticker,proto3" json:"sticker,omitempty"`
}

func (m *TLStickersRemoveStickerFromSet) Reset()         { *m = TLStickersRemoveStickerFromSet{} }
func (m *TLStickersRemoveStickerFromSet) String() string { return proto.CompactTextString(m) }
func (*TLStickersRemoveStickerFromSet) ProtoMessage()    {}
func (*TLStickersRemoveStickerFromSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{237}
}
func (m *TLStickersRemoveStickerFromSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLStickersRemoveStickerFromSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLStickersRemoveStickerFromSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLStickersRemoveStickerFromSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLStickersRemoveStickerFromSet.Merge(m, src)
}
func (m *TLStickersRemoveStickerFromSet) XXX_Size() int {
	return m.Size()
}
func (m *TLStickersRemoveStickerFromSet) XXX_DiscardUnknown() {
	xxx_messageInfo_TLStickersRemoveStickerFromSet.DiscardUnknown(m)
}

var xxx_messageInfo_TLStickersRemoveStickerFromSet proto.InternalMessageInfo

func (m *TLStickersRemoveStickerFromSet) GetSticker() *InputDocument {
	if m != nil {
		return m.Sticker
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// stickers.changeStickerPosition#ffb6d4ca sticker:InputDocument position:int = messages.StickerSet;
type TLStickersChangeStickerPosition struct {
	Sticker  *InputDocument `protobuf:"bytes,1,opt,name=sticker,proto3" json:"sticker,omitempty"`
	Position int32          `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
}

func (m *TLStickersChangeStickerPosition) Reset()         { *m = TLStickersChangeStickerPosition{} }
func (m *TLStickersChangeStickerPosition) String() string { return proto.CompactTextString(m) }
func (*TLStickersChangeStickerPosition) ProtoMessage()    {}
func (*TLStickersChangeStickerPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{238}
}
func (m *TLStickersChangeStickerPosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLStickersChangeStickerPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLStickersChangeStickerPosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLStickersChangeStickerPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLStickersChangeStickerPosition.Merge(m, src)
}
func (m *TLStickersChangeStickerPosition) XXX_Size() int {
	return m.Size()
}
func (m *TLStickersChangeStickerPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_TLStickersChangeStickerPosition.DiscardUnknown(m)
}

var xxx_messageInfo_TLStickersChangeStickerPosition proto.InternalMessageInfo

func (m *TLStickersChangeStickerPosition) GetSticker() *InputDocument {
	if m != nil {
		return m.Sticker
	}
	return nil
}

func (m *TLStickersChangeStickerPosition) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// stickers.addStickerToSet#8653febe stickerset:InputStickerSet sticker:InputStickerSetItem = messages.StickerSet;
type TLStickersAddStickerToSet struct {
	Stickerset *InputStickerSet     `protobuf:"bytes,1,opt,name=stickerset,proto3" json:"stickerset,omitempty"`
	Sticker    *InputStickerSetItem `protobuf:"bytes,2,opt,name=sticker,proto3" json:"sticker,omitempty"`
}

func (m *TLStickersAddStickerToSet) Reset()         { *m = TLStickersAddStickerToSet{} }
func (m *TLStickersAddStickerToSet) String() string { return proto.CompactTextString(m) }
func (*TLStickersAddStickerToSet) ProtoMessage()    {}
func (*TLStickersAddStickerToSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{239}
}
func (m *TLStickersAddStickerToSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLStickersAddStickerToSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLStickersAddStickerToSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLStickersAddStickerToSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLStickersAddStickerToSet.Merge(m, src)
}
func (m *TLStickersAddStickerToSet) XXX_Size() int {
	return m.Size()
}
func (m *TLStickersAddStickerToSet) XXX_DiscardUnknown() {
	xxx_messageInfo_TLStickersAddStickerToSet.DiscardUnknown(m)
}

var xxx_messageInfo_TLStickersAddStickerToSet proto.InternalMessageInfo

func (m *TLStickersAddStickerToSet) GetStickerset() *InputStickerSet {
	if m != nil {
		return m.Stickerset
	}
	return nil
}

func (m *TLStickersAddStickerToSet) GetSticker() *InputStickerSetItem {
	if m != nil {
		return m.Sticker
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// phone.getCallConfig#55451fa9 = DataJSON;
type TLPhoneGetCallConfig struct {
}

func (m *TLPhoneGetCallConfig) Reset()         { *m = TLPhoneGetCallConfig{} }
func (m *TLPhoneGetCallConfig) String() string { return proto.CompactTextString(m) }
func (*TLPhoneGetCallConfig) ProtoMessage()    {}
func (*TLPhoneGetCallConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{240}
}
func (m *TLPhoneGetCallConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPhoneGetCallConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPhoneGetCallConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLPhoneGetCallConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPhoneGetCallConfig.Merge(m, src)
}
func (m *TLPhoneGetCallConfig) XXX_Size() int {
	return m.Size()
}
func (m *TLPhoneGetCallConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPhoneGetCallConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TLPhoneGetCallConfig proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// phone.requestCall#5b95b3d4 user_id:InputUser random_id:int g_a_hash:bytes protocol:PhoneCallProtocol = phone.PhoneCall;
type TLPhoneRequestCall struct {
	UserId   *InputUser         `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RandomId int32              `protobuf:"varint,2,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	GAHash   []byte             `protobuf:"bytes,3,opt,name=g_a_hash,json=gAHash,proto3" json:"g_a_hash,omitempty"`
	Protocol *PhoneCallProtocol `protobuf:"bytes,4,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (m *TLPhoneRequestCall) Reset()         { *m = TLPhoneRequestCall{} }
func (m *TLPhoneRequestCall) String() string { return proto.CompactTextString(m) }
func (*TLPhoneRequestCall) ProtoMessage()    {}
func (*TLPhoneRequestCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{241}
}
func (m *TLPhoneRequestCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPhoneRequestCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPhoneRequestCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLPhoneRequestCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPhoneRequestCall.Merge(m, src)
}
func (m *TLPhoneRequestCall) XXX_Size() int {
	return m.Size()
}
func (m *TLPhoneRequestCall) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPhoneRequestCall.DiscardUnknown(m)
}

var xxx_messageInfo_TLPhoneRequestCall proto.InternalMessageInfo

func (m *TLPhoneRequestCall) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *TLPhoneRequestCall) GetRandomId() int32 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *TLPhoneRequestCall) GetGAHash() []byte {
	if m != nil {
		return m.GAHash
	}
	return nil
}

func (m *TLPhoneRequestCall) GetProtocol() *PhoneCallProtocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// phone.acceptCall#3bd2b4a0 peer:InputPhoneCall g_b:bytes protocol:PhoneCallProtocol = phone.PhoneCall;
type TLPhoneAcceptCall struct {
	Peer     *InputPhoneCall    `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	GB       []byte             `protobuf:"bytes,2,opt,name=g_b,json=gB,proto3" json:"g_b,omitempty"`
	Protocol *PhoneCallProtocol `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (m *TLPhoneAcceptCall) Reset()         { *m = TLPhoneAcceptCall{} }
func (m *TLPhoneAcceptCall) String() string { return proto.CompactTextString(m) }
func (*TLPhoneAcceptCall) ProtoMessage()    {}
func (*TLPhoneAcceptCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{242}
}
func (m *TLPhoneAcceptCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPhoneAcceptCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPhoneAcceptCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLPhoneAcceptCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPhoneAcceptCall.Merge(m, src)
}
func (m *TLPhoneAcceptCall) XXX_Size() int {
	return m.Size()
}
func (m *TLPhoneAcceptCall) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPhoneAcceptCall.DiscardUnknown(m)
}

var xxx_messageInfo_TLPhoneAcceptCall proto.InternalMessageInfo

func (m *TLPhoneAcceptCall) GetPeer() *InputPhoneCall {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLPhoneAcceptCall) GetGB() []byte {
	if m != nil {
		return m.GB
	}
	return nil
}

func (m *TLPhoneAcceptCall) GetProtocol() *PhoneCallProtocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// phone.confirmCall#2efe1722 peer:InputPhoneCall g_a:bytes key_fingerprint:long protocol:PhoneCallProtocol = phone.PhoneCall;
type TLPhoneConfirmCall struct {
	Peer           *InputPhoneCall    `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	GA             []byte             `protobuf:"bytes,2,opt,name=g_a,json=gA,proto3" json:"g_a,omitempty"`
	KeyFingerprint int64              `protobuf:"varint,3,opt,name=key_fingerprint,json=keyFingerprint,proto3" json:"key_fingerprint,omitempty"`
	Protocol       *PhoneCallProtocol `protobuf:"bytes,4,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (m *TLPhoneConfirmCall) Reset()         { *m = TLPhoneConfirmCall{} }
func (m *TLPhoneConfirmCall) String() string { return proto.CompactTextString(m) }
func (*TLPhoneConfirmCall) ProtoMessage()    {}
func (*TLPhoneConfirmCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{243}
}
func (m *TLPhoneConfirmCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPhoneConfirmCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPhoneConfirmCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLPhoneConfirmCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPhoneConfirmCall.Merge(m, src)
}
func (m *TLPhoneConfirmCall) XXX_Size() int {
	return m.Size()
}
func (m *TLPhoneConfirmCall) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPhoneConfirmCall.DiscardUnknown(m)
}

var xxx_messageInfo_TLPhoneConfirmCall proto.InternalMessageInfo

func (m *TLPhoneConfirmCall) GetPeer() *InputPhoneCall {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLPhoneConfirmCall) GetGA() []byte {
	if m != nil {
		return m.GA
	}
	return nil
}

func (m *TLPhoneConfirmCall) GetKeyFingerprint() int64 {
	if m != nil {
		return m.KeyFingerprint
	}
	return 0
}

func (m *TLPhoneConfirmCall) GetProtocol() *PhoneCallProtocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// phone.receivedCall#17d54f61 peer:InputPhoneCall = Bool;
type TLPhoneReceivedCall struct {
	Peer *InputPhoneCall `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *TLPhoneReceivedCall) Reset()         { *m = TLPhoneReceivedCall{} }
func (m *TLPhoneReceivedCall) String() string { return proto.CompactTextString(m) }
func (*TLPhoneReceivedCall) ProtoMessage()    {}
func (*TLPhoneReceivedCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{244}
}
func (m *TLPhoneReceivedCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPhoneReceivedCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPhoneReceivedCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLPhoneReceivedCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPhoneReceivedCall.Merge(m, src)
}
func (m *TLPhoneReceivedCall) XXX_Size() int {
	return m.Size()
}
func (m *TLPhoneReceivedCall) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPhoneReceivedCall.DiscardUnknown(m)
}

var xxx_messageInfo_TLPhoneReceivedCall proto.InternalMessageInfo

func (m *TLPhoneReceivedCall) GetPeer() *InputPhoneCall {
	if m != nil {
		return m.Peer
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// phone.discardCall#78d413a6 peer:InputPhoneCall duration:int reason:PhoneCallDiscardReason connection_id:long = Updates;
type TLPhoneDiscardCall struct {
	Peer         *InputPhoneCall         `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Duration     int32                   `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`
	Reason       *PhoneCallDiscardReason `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	ConnectionId int64                   `protobuf:"varint,4,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (m *TLPhoneDiscardCall) Reset()         { *m = TLPhoneDiscardCall{} }
func (m *TLPhoneDiscardCall) String() string { return proto.CompactTextString(m) }
func (*TLPhoneDiscardCall) ProtoMessage()    {}
func (*TLPhoneDiscardCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{245}
}
func (m *TLPhoneDiscardCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPhoneDiscardCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPhoneDiscardCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLPhoneDiscardCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPhoneDiscardCall.Merge(m, src)
}
func (m *TLPhoneDiscardCall) XXX_Size() int {
	return m.Size()
}
func (m *TLPhoneDiscardCall) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPhoneDiscardCall.DiscardUnknown(m)
}

var xxx_messageInfo_TLPhoneDiscardCall proto.InternalMessageInfo

func (m *TLPhoneDiscardCall) GetPeer() *InputPhoneCall {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLPhoneDiscardCall) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *TLPhoneDiscardCall) GetReason() *PhoneCallDiscardReason {
	if m != nil {
		return m.Reason
	}
	return nil
}

func (m *TLPhoneDiscardCall) GetConnectionId() int64 {
	if m != nil {
		return m.ConnectionId
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// phone.setCallRating#1c536a34 peer:InputPhoneCall rating:int comment:string = Updates;
type TLPhoneSetCallRating struct {
	Peer    *InputPhoneCall `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Rating  int32           `protobuf:"varint,2,opt,name=rating,proto3" json:"rating,omitempty"`
	Comment string          `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (m *TLPhoneSetCallRating) Reset()         { *m = TLPhoneSetCallRating{} }
func (m *TLPhoneSetCallRating) String() string { return proto.CompactTextString(m) }
func (*TLPhoneSetCallRating) ProtoMessage()    {}
func (*TLPhoneSetCallRating) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{246}
}
func (m *TLPhoneSetCallRating) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPhoneSetCallRating) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPhoneSetCallRating.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLPhoneSetCallRating) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPhoneSetCallRating.Merge(m, src)
}
func (m *TLPhoneSetCallRating) XXX_Size() int {
	return m.Size()
}
func (m *TLPhoneSetCallRating) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPhoneSetCallRating.DiscardUnknown(m)
}

var xxx_messageInfo_TLPhoneSetCallRating proto.InternalMessageInfo

func (m *TLPhoneSetCallRating) GetPeer() *InputPhoneCall {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLPhoneSetCallRating) GetRating() int32 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *TLPhoneSetCallRating) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// phone.saveCallDebug#277add7e peer:InputPhoneCall debug:DataJSON = Bool;
type TLPhoneSaveCallDebug struct {
	Peer  *InputPhoneCall `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Debug *DataJSON       `protobuf:"bytes,2,opt,name=debug,proto3" json:"debug,omitempty"`
}

func (m *TLPhoneSaveCallDebug) Reset()         { *m = TLPhoneSaveCallDebug{} }
func (m *TLPhoneSaveCallDebug) String() string { return proto.CompactTextString(m) }
func (*TLPhoneSaveCallDebug) ProtoMessage()    {}
func (*TLPhoneSaveCallDebug) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{247}
}
func (m *TLPhoneSaveCallDebug) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPhoneSaveCallDebug) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPhoneSaveCallDebug.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLPhoneSaveCallDebug) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPhoneSaveCallDebug.Merge(m, src)
}
func (m *TLPhoneSaveCallDebug) XXX_Size() int {
	return m.Size()
}
func (m *TLPhoneSaveCallDebug) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPhoneSaveCallDebug.DiscardUnknown(m)
}

var xxx_messageInfo_TLPhoneSaveCallDebug proto.InternalMessageInfo

func (m *TLPhoneSaveCallDebug) GetPeer() *InputPhoneCall {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLPhoneSaveCallDebug) GetDebug() *DataJSON {
	if m != nil {
		return m.Debug
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// langpack.getLangPack#9ab5c58e lang_code:string = LangPackDifference;
type TLLangpackGetLangPack struct {
	LangCode string `protobuf:"bytes,1,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
}

func (m *TLLangpackGetLangPack) Reset()         { *m = TLLangpackGetLangPack{} }
func (m *TLLangpackGetLangPack) String() string { return proto.CompactTextString(m) }
func (*TLLangpackGetLangPack) ProtoMessage()    {}
func (*TLLangpackGetLangPack) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{248}
}
func (m *TLLangpackGetLangPack) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLLangpackGetLangPack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLLangpackGetLangPack.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLLangpackGetLangPack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLLangpackGetLangPack.Merge(m, src)
}
func (m *TLLangpackGetLangPack) XXX_Size() int {
	return m.Size()
}
func (m *TLLangpackGetLangPack) XXX_DiscardUnknown() {
	xxx_messageInfo_TLLangpackGetLangPack.DiscardUnknown(m)
}

var xxx_messageInfo_TLLangpackGetLangPack proto.InternalMessageInfo

func (m *TLLangpackGetLangPack) GetLangCode() string {
	if m != nil {
		return m.LangCode
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// langpack.getStrings#2e1ee318 lang_code:string keys:Vector<string> = Vector<LangPackString>;
type TLLangpackGetStrings struct {
	LangCode string   `protobuf:"bytes,1,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	Keys     []string `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (m *TLLangpackGetStrings) Reset()         { *m = TLLangpackGetStrings{} }
func (m *TLLangpackGetStrings) String() string { return proto.CompactTextString(m) }
func (*TLLangpackGetStrings) ProtoMessage()    {}
func (*TLLangpackGetStrings) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{249}
}
func (m *TLLangpackGetStrings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLLangpackGetStrings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLLangpackGetStrings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLLangpackGetStrings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLLangpackGetStrings.Merge(m, src)
}
func (m *TLLangpackGetStrings) XXX_Size() int {
	return m.Size()
}
func (m *TLLangpackGetStrings) XXX_DiscardUnknown() {
	xxx_messageInfo_TLLangpackGetStrings.DiscardUnknown(m)
}

var xxx_messageInfo_TLLangpackGetStrings proto.InternalMessageInfo

func (m *TLLangpackGetStrings) GetLangCode() string {
	if m != nil {
		return m.LangCode
	}
	return ""
}

func (m *TLLangpackGetStrings) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// langpack.getDifference#b2e4d7d from_version:int = LangPackDifference;
type TLLangpackGetDifference struct {
	FromVersion int32 `protobuf:"varint,1,opt,name=from_version,json=fromVersion,proto3" json:"from_version,omitempty"`
}

func (m *TLLangpackGetDifference) Reset()         { *m = TLLangpackGetDifference{} }
func (m *TLLangpackGetDifference) String() string { return proto.CompactTextString(m) }
func (*TLLangpackGetDifference) ProtoMessage()    {}
func (*TLLangpackGetDifference) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{250}
}
func (m *TLLangpackGetDifference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLLangpackGetDifference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLLangpackGetDifference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLLangpackGetDifference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLLangpackGetDifference.Merge(m, src)
}
func (m *TLLangpackGetDifference) XXX_Size() int {
	return m.Size()
}
func (m *TLLangpackGetDifference) XXX_DiscardUnknown() {
	xxx_messageInfo_TLLangpackGetDifference.DiscardUnknown(m)
}

var xxx_messageInfo_TLLangpackGetDifference proto.InternalMessageInfo

func (m *TLLangpackGetDifference) GetFromVersion() int32 {
	if m != nil {
		return m.FromVersion
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// langpack.getLanguages#800fd57d = Vector<LangPackLanguage>;
type TLLangpackGetLanguages struct {
}

func (m *TLLangpackGetLanguages) Reset()         { *m = TLLangpackGetLanguages{} }
func (m *TLLangpackGetLanguages) String() string { return proto.CompactTextString(m) }
func (*TLLangpackGetLanguages) ProtoMessage()    {}
func (*TLLangpackGetLanguages) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{251}
}
func (m *TLLangpackGetLanguages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLLangpackGetLanguages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLLangpackGetLanguages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLLangpackGetLanguages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLLangpackGetLanguages.Merge(m, src)
}
func (m *TLLangpackGetLanguages) XXX_Size() int {
	return m.Size()
}
func (m *TLLangpackGetLanguages) XXX_DiscardUnknown() {
	xxx_messageInfo_TLLangpackGetLanguages.DiscardUnknown(m)
}

var xxx_messageInfo_TLLangpackGetLanguages proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// updates.getChannelDifference#bb32d7c0 channel:InputChannel filter:ChannelMessagesFilter pts:int limit:int = updates.ChannelDifference;
type TLUpdatesGetChannelDifference57 struct {
	Channel *InputChannel          `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Filter  *ChannelMessagesFilter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	Pts     int32                  `protobuf:"varint,3,opt,name=pts,proto3" json:"pts,omitempty"`
	Limit   int32                  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *TLUpdatesGetChannelDifference57) Reset()         { *m = TLUpdatesGetChannelDifference57{} }
func (m *TLUpdatesGetChannelDifference57) String() string { return proto.CompactTextString(m) }
func (*TLUpdatesGetChannelDifference57) ProtoMessage()    {}
func (*TLUpdatesGetChannelDifference57) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{252}
}
func (m *TLUpdatesGetChannelDifference57) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUpdatesGetChannelDifference57) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUpdatesGetChannelDifference57.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUpdatesGetChannelDifference57) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUpdatesGetChannelDifference57.Merge(m, src)
}
func (m *TLUpdatesGetChannelDifference57) XXX_Size() int {
	return m.Size()
}
func (m *TLUpdatesGetChannelDifference57) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUpdatesGetChannelDifference57.DiscardUnknown(m)
}

var xxx_messageInfo_TLUpdatesGetChannelDifference57 proto.InternalMessageInfo

func (m *TLUpdatesGetChannelDifference57) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLUpdatesGetChannelDifference57) GetFilter() *ChannelMessagesFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *TLUpdatesGetChannelDifference57) GetPts() int32 {
	if m != nil {
		return m.Pts
	}
	return 0
}

func (m *TLUpdatesGetChannelDifference57) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// auth.sendCode#ccfd70cf flags:# allow_flashcall:flags.0?true phone_number:string current_number:flags.0?Bool api_id:int api_hash:string lang_code:string = auth.SentCode;
type TLAuthSendCode73 struct {
	AllowFlashcall bool   `protobuf:"varint,2,opt,name=allow_flashcall,json=allowFlashcall,proto3" json:"allow_flashcall,omitempty"`
	PhoneNumber    string `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	CurrentNumber  *Bool  `protobuf:"bytes,4,opt,name=current_number,json=currentNumber,proto3" json:"current_number,omitempty"`
	ApiId          int32  `protobuf:"varint,5,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`
	ApiHash        string `protobuf:"bytes,6,opt,name=api_hash,json=apiHash,proto3" json:"api_hash,omitempty"`
	LangCode       string `protobuf:"bytes,7,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
}

func (m *TLAuthSendCode73) Reset()         { *m = TLAuthSendCode73{} }
func (m *TLAuthSendCode73) String() string { return proto.CompactTextString(m) }
func (*TLAuthSendCode73) ProtoMessage()    {}
func (*TLAuthSendCode73) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{253}
}
func (m *TLAuthSendCode73) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAuthSendCode73) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAuthSendCode73.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAuthSendCode73) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAuthSendCode73.Merge(m, src)
}
func (m *TLAuthSendCode73) XXX_Size() int {
	return m.Size()
}
func (m *TLAuthSendCode73) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAuthSendCode73.DiscardUnknown(m)
}

var xxx_messageInfo_TLAuthSendCode73 proto.InternalMessageInfo

func (m *TLAuthSendCode73) GetAllowFlashcall() bool {
	if m != nil {
		return m.AllowFlashcall
	}
	return false
}

func (m *TLAuthSendCode73) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *TLAuthSendCode73) GetCurrentNumber() *Bool {
	if m != nil {
		return m.CurrentNumber
	}
	return nil
}

func (m *TLAuthSendCode73) GetApiId() int32 {
	if m != nil {
		return m.ApiId
	}
	return 0
}

func (m *TLAuthSendCode73) GetApiHash() string {
	if m != nil {
		return m.ApiHash
	}
	return ""
}

func (m *TLAuthSendCode73) GetLangCode() string {
	if m != nil {
		return m.LangCode
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// account.registerDevice#446c712c token_type:int token:string device_model:string system_version:string app_version:string app_sandbox:Bool lang_code:string = Bool;
type TLAccountRegisterDevice73 struct {
	TokenType     int32  `protobuf:"varint,1,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`
	Token         string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	DeviceModel   string `protobuf:"bytes,3,opt,name=device_model,json=deviceModel,proto3" json:"device_model,omitempty"`
	SystemVersion string `protobuf:"bytes,4,opt,name=system_version,json=systemVersion,proto3" json:"system_version,omitempty"`
	AppVersion    string `protobuf:"bytes,5,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	AppSandbox    *Bool  `protobuf:"bytes,6,opt,name=app_sandbox,json=appSandbox,proto3" json:"app_sandbox,omitempty"`
	LangCode      string `protobuf:"bytes,7,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
}

func (m *TLAccountRegisterDevice73) Reset()         { *m = TLAccountRegisterDevice73{} }
func (m *TLAccountRegisterDevice73) String() string { return proto.CompactTextString(m) }
func (*TLAccountRegisterDevice73) ProtoMessage()    {}
func (*TLAccountRegisterDevice73) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{254}
}
func (m *TLAccountRegisterDevice73) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountRegisterDevice73) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountRegisterDevice73.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountRegisterDevice73) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountRegisterDevice73.Merge(m, src)
}
func (m *TLAccountRegisterDevice73) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountRegisterDevice73) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountRegisterDevice73.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountRegisterDevice73 proto.InternalMessageInfo

func (m *TLAccountRegisterDevice73) GetTokenType() int32 {
	if m != nil {
		return m.TokenType
	}
	return 0
}

func (m *TLAccountRegisterDevice73) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *TLAccountRegisterDevice73) GetDeviceModel() string {
	if m != nil {
		return m.DeviceModel
	}
	return ""
}

func (m *TLAccountRegisterDevice73) GetSystemVersion() string {
	if m != nil {
		return m.SystemVersion
	}
	return ""
}

func (m *TLAccountRegisterDevice73) GetAppVersion() string {
	if m != nil {
		return m.AppVersion
	}
	return ""
}

func (m *TLAccountRegisterDevice73) GetAppSandbox() *Bool {
	if m != nil {
		return m.AppSandbox
	}
	return nil
}

func (m *TLAccountRegisterDevice73) GetLangCode() string {
	if m != nil {
		return m.LangCode
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// photos.updateProfilePhoto#eef579a0 id:InputPhoto crop:InputPhotoCrop = UserProfilePhoto;
type TLPhotosUpdateProfilePhoto73 struct {
	Id   *InputPhoto     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Crop *InputPhotoCrop `protobuf:"bytes,2,opt,name=crop,proto3" json:"crop,omitempty"`
}

func (m *TLPhotosUpdateProfilePhoto73) Reset()         { *m = TLPhotosUpdateProfilePhoto73{} }
func (m *TLPhotosUpdateProfilePhoto73) String() string { return proto.CompactTextString(m) }
func (*TLPhotosUpdateProfilePhoto73) ProtoMessage()    {}
func (*TLPhotosUpdateProfilePhoto73) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{255}
}
func (m *TLPhotosUpdateProfilePhoto73) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPhotosUpdateProfilePhoto73) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPhotosUpdateProfilePhoto73.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLPhotosUpdateProfilePhoto73) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPhotosUpdateProfilePhoto73.Merge(m, src)
}
func (m *TLPhotosUpdateProfilePhoto73) XXX_Size() int {
	return m.Size()
}
func (m *TLPhotosUpdateProfilePhoto73) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPhotosUpdateProfilePhoto73.DiscardUnknown(m)
}

var xxx_messageInfo_TLPhotosUpdateProfilePhoto73 proto.InternalMessageInfo

func (m *TLPhotosUpdateProfilePhoto73) GetId() *InputPhoto {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TLPhotosUpdateProfilePhoto73) GetCrop() *InputPhotoCrop {
	if m != nil {
		return m.Crop
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// photos.uploadProfilePhoto#d50f9c88 file:InputFile caption:string geo_point:InputGeoPoint crop:InputPhotoCrop = photos.Photo;
type TLPhotosUploadProfilePhoto73 struct {
	File     *InputFile      `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Caption  string          `protobuf:"bytes,2,opt,name=caption,proto3" json:"caption,omitempty"`
	GeoPoint *InputGeoPoint  `protobuf:"bytes,3,opt,name=geo_point,json=geoPoint,proto3" json:"geo_point,omitempty"`
	Crop     *InputPhotoCrop `protobuf:"bytes,4,opt,name=crop,proto3" json:"crop,omitempty"`
}

func (m *TLPhotosUploadProfilePhoto73) Reset()         { *m = TLPhotosUploadProfilePhoto73{} }
func (m *TLPhotosUploadProfilePhoto73) String() string { return proto.CompactTextString(m) }
func (*TLPhotosUploadProfilePhoto73) ProtoMessage()    {}
func (*TLPhotosUploadProfilePhoto73) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{256}
}
func (m *TLPhotosUploadProfilePhoto73) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPhotosUploadProfilePhoto73) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPhotosUploadProfilePhoto73.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLPhotosUploadProfilePhoto73) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPhotosUploadProfilePhoto73.Merge(m, src)
}
func (m *TLPhotosUploadProfilePhoto73) XXX_Size() int {
	return m.Size()
}
func (m *TLPhotosUploadProfilePhoto73) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPhotosUploadProfilePhoto73.DiscardUnknown(m)
}

var xxx_messageInfo_TLPhotosUploadProfilePhoto73 proto.InternalMessageInfo

func (m *TLPhotosUploadProfilePhoto73) GetFile() *InputFile {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *TLPhotosUploadProfilePhoto73) GetCaption() string {
	if m != nil {
		return m.Caption
	}
	return ""
}

func (m *TLPhotosUploadProfilePhoto73) GetGeoPoint() *InputGeoPoint {
	if m != nil {
		return m.GeoPoint
	}
	return nil
}

func (m *TLPhotosUploadProfilePhoto73) GetCrop() *InputPhotoCrop {
	if m != nil {
		return m.Crop
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// help.getWkConfig#86c965c = WkConfig;
type TLHelpGetWkConfig struct {
}

func (m *TLHelpGetWkConfig) Reset()         { *m = TLHelpGetWkConfig{} }
func (m *TLHelpGetWkConfig) String() string { return proto.CompactTextString(m) }
func (*TLHelpGetWkConfig) ProtoMessage()    {}
func (*TLHelpGetWkConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{257}
}
func (m *TLHelpGetWkConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpGetWkConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpGetWkConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpGetWkConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpGetWkConfig.Merge(m, src)
}
func (m *TLHelpGetWkConfig) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpGetWkConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpGetWkConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpGetWkConfig proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// help.getJsonConfig#5545a37f = DataJSON;
type TLHelpGetJsonConfig struct {
}

func (m *TLHelpGetJsonConfig) Reset()         { *m = TLHelpGetJsonConfig{} }
func (m *TLHelpGetJsonConfig) String() string { return proto.CompactTextString(m) }
func (*TLHelpGetJsonConfig) ProtoMessage()    {}
func (*TLHelpGetJsonConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{258}
}
func (m *TLHelpGetJsonConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpGetJsonConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpGetJsonConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpGetJsonConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpGetJsonConfig.Merge(m, src)
}
func (m *TLHelpGetJsonConfig) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpGetJsonConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpGetJsonConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpGetJsonConfig proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// help.getScheme#dbb69a9e version:int = Scheme;
type TLHelpGetScheme struct {
	Version int32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *TLHelpGetScheme) Reset()         { *m = TLHelpGetScheme{} }
func (m *TLHelpGetScheme) String() string { return proto.CompactTextString(m) }
func (*TLHelpGetScheme) ProtoMessage()    {}
func (*TLHelpGetScheme) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{259}
}
func (m *TLHelpGetScheme) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpGetScheme) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpGetScheme.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpGetScheme) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpGetScheme.Merge(m, src)
}
func (m *TLHelpGetScheme) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpGetScheme) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpGetScheme.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpGetScheme proto.InternalMessageInfo

func (m *TLHelpGetScheme) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// help.getConfig#c4f9186b = Config;
type TLHelpGetConfig73 struct {
}

func (m *TLHelpGetConfig73) Reset()         { *m = TLHelpGetConfig73{} }
func (m *TLHelpGetConfig73) String() string { return proto.CompactTextString(m) }
func (*TLHelpGetConfig73) ProtoMessage()    {}
func (*TLHelpGetConfig73) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{260}
}
func (m *TLHelpGetConfig73) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpGetConfig73) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpGetConfig73.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpGetConfig73) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpGetConfig73.Merge(m, src)
}
func (m *TLHelpGetConfig73) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpGetConfig73) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpGetConfig73.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpGetConfig73 proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// help.getAppUpdate#c812ac7e device_model:string system_version:string app_version:string lang_code:string = help.AppUpdate;
type TLHelpGetAppUpdate73 struct {
	DeviceModel   string `protobuf:"bytes,1,opt,name=device_model,json=deviceModel,proto3" json:"device_model,omitempty"`
	SystemVersion string `protobuf:"bytes,2,opt,name=system_version,json=systemVersion,proto3" json:"system_version,omitempty"`
	AppVersion    string `protobuf:"bytes,3,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	LangCode      string `protobuf:"bytes,4,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
}

func (m *TLHelpGetAppUpdate73) Reset()         { *m = TLHelpGetAppUpdate73{} }
func (m *TLHelpGetAppUpdate73) String() string { return proto.CompactTextString(m) }
func (*TLHelpGetAppUpdate73) ProtoMessage()    {}
func (*TLHelpGetAppUpdate73) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{261}
}
func (m *TLHelpGetAppUpdate73) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpGetAppUpdate73) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpGetAppUpdate73.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpGetAppUpdate73) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpGetAppUpdate73.Merge(m, src)
}
func (m *TLHelpGetAppUpdate73) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpGetAppUpdate73) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpGetAppUpdate73.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpGetAppUpdate73 proto.InternalMessageInfo

func (m *TLHelpGetAppUpdate73) GetDeviceModel() string {
	if m != nil {
		return m.DeviceModel
	}
	return ""
}

func (m *TLHelpGetAppUpdate73) GetSystemVersion() string {
	if m != nil {
		return m.SystemVersion
	}
	return ""
}

func (m *TLHelpGetAppUpdate73) GetAppVersion() string {
	if m != nil {
		return m.AppVersion
	}
	return ""
}

func (m *TLHelpGetAppUpdate73) GetLangCode() string {
	if m != nil {
		return m.LangCode
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// help.getInviteText#a4a95186 lang_code:string = help.InviteText;
type TLHelpGetInviteText73 struct {
	LangCode string `protobuf:"bytes,1,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
}

func (m *TLHelpGetInviteText73) Reset()         { *m = TLHelpGetInviteText73{} }
func (m *TLHelpGetInviteText73) String() string { return proto.CompactTextString(m) }
func (*TLHelpGetInviteText73) ProtoMessage()    {}
func (*TLHelpGetInviteText73) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{262}
}
func (m *TLHelpGetInviteText73) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpGetInviteText73) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpGetInviteText73.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpGetInviteText73) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpGetInviteText73.Merge(m, src)
}
func (m *TLHelpGetInviteText73) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpGetInviteText73) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpGetInviteText73.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpGetInviteText73 proto.InternalMessageInfo

func (m *TLHelpGetInviteText73) GetLangCode() string {
	if m != nil {
		return m.LangCode
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// help.getRecentMeUrls#3dc0f114 referer:string = help.RecentMeUrls;
type TLHelpGetRecentMeUrls struct {
	Referer string `protobuf:"bytes,1,opt,name=referer,proto3" json:"referer,omitempty"`
}

func (m *TLHelpGetRecentMeUrls) Reset()         { *m = TLHelpGetRecentMeUrls{} }
func (m *TLHelpGetRecentMeUrls) String() string { return proto.CompactTextString(m) }
func (*TLHelpGetRecentMeUrls) ProtoMessage()    {}
func (*TLHelpGetRecentMeUrls) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{263}
}
func (m *TLHelpGetRecentMeUrls) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpGetRecentMeUrls) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpGetRecentMeUrls.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpGetRecentMeUrls) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpGetRecentMeUrls.Merge(m, src)
}
func (m *TLHelpGetRecentMeUrls) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpGetRecentMeUrls) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpGetRecentMeUrls.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpGetRecentMeUrls proto.InternalMessageInfo

func (m *TLHelpGetRecentMeUrls) GetReferer() string {
	if m != nil {
		return m.Referer
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// help.getTermsOfService#37d78f83 lang_code:string = help.TermsOfService;
type TLHelpGetTermsOfService73 struct {
	LangCode string `protobuf:"bytes,1,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
}

func (m *TLHelpGetTermsOfService73) Reset()         { *m = TLHelpGetTermsOfService73{} }
func (m *TLHelpGetTermsOfService73) String() string { return proto.CompactTextString(m) }
func (*TLHelpGetTermsOfService73) ProtoMessage()    {}
func (*TLHelpGetTermsOfService73) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{264}
}
func (m *TLHelpGetTermsOfService73) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpGetTermsOfService73) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpGetTermsOfService73.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpGetTermsOfService73) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpGetTermsOfService73.Merge(m, src)
}
func (m *TLHelpGetTermsOfService73) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpGetTermsOfService73) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpGetTermsOfService73.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpGetTermsOfService73 proto.InternalMessageInfo

func (m *TLHelpGetTermsOfService73) GetLangCode() string {
	if m != nil {
		return m.LangCode
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// messages.readHistory#272c63bf peer:InputPeer max_id:int offset:int = messages.AffectedMessages;
type TLMessagesReadHistory73 struct {
	Peer   *InputPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	MaxId  int32      `protobuf:"varint,2,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	Offset int32      `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *TLMessagesReadHistory73) Reset()         { *m = TLMessagesReadHistory73{} }
func (m *TLMessagesReadHistory73) String() string { return proto.CompactTextString(m) }
func (*TLMessagesReadHistory73) ProtoMessage()    {}
func (*TLMessagesReadHistory73) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{265}
}
func (m *TLMessagesReadHistory73) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesReadHistory73) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesReadHistory73.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesReadHistory73) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesReadHistory73.Merge(m, src)
}
func (m *TLMessagesReadHistory73) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesReadHistory73) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesReadHistory73.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesReadHistory73 proto.InternalMessageInfo

func (m *TLMessagesReadHistory73) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesReadHistory73) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *TLMessagesReadHistory73) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.editMessage#5d1b8dd flags:# no_webpage:flags.1?true stop_geo_live:flags.12?true peer:InputPeer id:int message:flags.11?string reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> geo_point:flags.13?InputGeoPoint = Updates;
type TLMessagesEditMessage73 struct {
	NoWebpage   bool             `protobuf:"varint,2,opt,name=no_webpage,json=noWebpage,proto3" json:"no_webpage,omitempty"`
	StopGeoLive bool             `protobuf:"varint,3,opt,name=stop_geo_live,json=stopGeoLive,proto3" json:"stop_geo_live,omitempty"`
	Peer        *InputPeer       `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	Id          int32            `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	Message     string           `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	ReplyMarkup *ReplyMarkup     `protobuf:"bytes,7,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
	Entities    []*MessageEntity `protobuf:"bytes,8,rep,name=entities,proto3" json:"entities,omitempty"`
	GeoPoint    *InputGeoPoint   `protobuf:"bytes,9,opt,name=geo_point,json=geoPoint,proto3" json:"geo_point,omitempty"`
}

func (m *TLMessagesEditMessage73) Reset()         { *m = TLMessagesEditMessage73{} }
func (m *TLMessagesEditMessage73) String() string { return proto.CompactTextString(m) }
func (*TLMessagesEditMessage73) ProtoMessage()    {}
func (*TLMessagesEditMessage73) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{266}
}
func (m *TLMessagesEditMessage73) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesEditMessage73) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesEditMessage73.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesEditMessage73) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesEditMessage73.Merge(m, src)
}
func (m *TLMessagesEditMessage73) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesEditMessage73) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesEditMessage73.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesEditMessage73 proto.InternalMessageInfo

func (m *TLMessagesEditMessage73) GetNoWebpage() bool {
	if m != nil {
		return m.NoWebpage
	}
	return false
}

func (m *TLMessagesEditMessage73) GetStopGeoLive() bool {
	if m != nil {
		return m.StopGeoLive
	}
	return false
}

func (m *TLMessagesEditMessage73) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesEditMessage73) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TLMessagesEditMessage73) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TLMessagesEditMessage73) GetReplyMarkup() *ReplyMarkup {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

func (m *TLMessagesEditMessage73) GetEntities() []*MessageEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *TLMessagesEditMessage73) GetGeoPoint() *InputGeoPoint {
	if m != nil {
		return m.GeoPoint
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.search#f288a275 flags:# peer:InputPeer q:string from_id:flags.0?InputUser filter:MessagesFilter min_date:int max_date:int offset:int max_id:int limit:int = messages.Messages;
type TLMessagesSearch73 struct {
	Peer    *InputPeer      `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
	Q       string          `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	FromId  *InputUser      `protobuf:"bytes,4,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	Filter  *MessagesFilter `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
	MinDate int32           `protobuf:"varint,6,opt,name=min_date,json=minDate,proto3" json:"min_date,omitempty"`
	MaxDate int32           `protobuf:"varint,7,opt,name=max_date,json=maxDate,proto3" json:"max_date,omitempty"`
	Offset  int32           `protobuf:"varint,8,opt,name=offset,proto3" json:"offset,omitempty"`
	MaxId   int32           `protobuf:"varint,9,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	Limit   int32           `protobuf:"varint,10,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *TLMessagesSearch73) Reset()         { *m = TLMessagesSearch73{} }
func (m *TLMessagesSearch73) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSearch73) ProtoMessage()    {}
func (*TLMessagesSearch73) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{267}
}
func (m *TLMessagesSearch73) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSearch73) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSearch73.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSearch73) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSearch73.Merge(m, src)
}
func (m *TLMessagesSearch73) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSearch73) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSearch73.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSearch73 proto.InternalMessageInfo

func (m *TLMessagesSearch73) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSearch73) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

func (m *TLMessagesSearch73) GetFromId() *InputUser {
	if m != nil {
		return m.FromId
	}
	return nil
}

func (m *TLMessagesSearch73) GetFilter() *MessagesFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *TLMessagesSearch73) GetMinDate() int32 {
	if m != nil {
		return m.MinDate
	}
	return 0
}

func (m *TLMessagesSearch73) GetMaxDate() int32 {
	if m != nil {
		return m.MaxDate
	}
	return 0
}

func (m *TLMessagesSearch73) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TLMessagesSearch73) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *TLMessagesSearch73) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.readMentions#f0189d3 peer:InputPeer = messages.AffectedHistory;
type TLMessagesReadMentions struct {
	Peer *InputPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *TLMessagesReadMentions) Reset()         { *m = TLMessagesReadMentions{} }
func (m *TLMessagesReadMentions) String() string { return proto.CompactTextString(m) }
func (*TLMessagesReadMentions) ProtoMessage()    {}
func (*TLMessagesReadMentions) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{268}
}
func (m *TLMessagesReadMentions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesReadMentions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesReadMentions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesReadMentions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesReadMentions.Merge(m, src)
}
func (m *TLMessagesReadMentions) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesReadMentions) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesReadMentions.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesReadMentions proto.InternalMessageInfo

func (m *TLMessagesReadMentions) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.getRecentLocations#249431e2 peer:InputPeer limit:int = messages.Messages;
type TLMessagesGetRecentLocations struct {
	Peer  *InputPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Limit int32      `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *TLMessagesGetRecentLocations) Reset()         { *m = TLMessagesGetRecentLocations{} }
func (m *TLMessagesGetRecentLocations) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetRecentLocations) ProtoMessage()    {}
func (*TLMessagesGetRecentLocations) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{269}
}
func (m *TLMessagesGetRecentLocations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetRecentLocations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetRecentLocations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetRecentLocations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetRecentLocations.Merge(m, src)
}
func (m *TLMessagesGetRecentLocations) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetRecentLocations) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetRecentLocations.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetRecentLocations proto.InternalMessageInfo

func (m *TLMessagesGetRecentLocations) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesGetRecentLocations) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.sendMultiMedia#2095512f flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int multi_media:Vector<InputSingleMedia> = Updates;
type TLMessagesSendMultiMedia struct {
	Silent       bool                `protobuf:"varint,2,opt,name=silent,proto3" json:"silent,omitempty"`
	Background   bool                `protobuf:"varint,3,opt,name=background,proto3" json:"background,omitempty"`
	ClearDraft   bool                `protobuf:"varint,4,opt,name=clear_draft,json=clearDraft,proto3" json:"clear_draft,omitempty"`
	Peer         *InputPeer          `protobuf:"bytes,5,opt,name=peer,proto3" json:"peer,omitempty"`
	ReplyToMsgId int32               `protobuf:"varint,6,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	MultiMedia   []*InputSingleMedia `protobuf:"bytes,7,rep,name=multi_media,json=multiMedia,proto3" json:"multi_media,omitempty"`
}

func (m *TLMessagesSendMultiMedia) Reset()         { *m = TLMessagesSendMultiMedia{} }
func (m *TLMessagesSendMultiMedia) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSendMultiMedia) ProtoMessage()    {}
func (*TLMessagesSendMultiMedia) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{270}
}
func (m *TLMessagesSendMultiMedia) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSendMultiMedia) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSendMultiMedia.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSendMultiMedia) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSendMultiMedia.Merge(m, src)
}
func (m *TLMessagesSendMultiMedia) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSendMultiMedia) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSendMultiMedia.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSendMultiMedia proto.InternalMessageInfo

func (m *TLMessagesSendMultiMedia) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *TLMessagesSendMultiMedia) GetBackground() bool {
	if m != nil {
		return m.Background
	}
	return false
}

func (m *TLMessagesSendMultiMedia) GetClearDraft() bool {
	if m != nil {
		return m.ClearDraft
	}
	return false
}

func (m *TLMessagesSendMultiMedia) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSendMultiMedia) GetReplyToMsgId() int32 {
	if m != nil {
		return m.ReplyToMsgId
	}
	return 0
}

func (m *TLMessagesSendMultiMedia) GetMultiMedia() []*InputSingleMedia {
	if m != nil {
		return m.MultiMedia
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.uploadEncryptedFile#5057c497 peer:InputEncryptedChat file:InputEncryptedFile = EncryptedFile;
type TLMessagesUploadEncryptedFile struct {
	Peer *InputEncryptedChat `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	File *InputEncryptedFile `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
}

func (m *TLMessagesUploadEncryptedFile) Reset()         { *m = TLMessagesUploadEncryptedFile{} }
func (m *TLMessagesUploadEncryptedFile) String() string { return proto.CompactTextString(m) }
func (*TLMessagesUploadEncryptedFile) ProtoMessage()    {}
func (*TLMessagesUploadEncryptedFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{271}
}
func (m *TLMessagesUploadEncryptedFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesUploadEncryptedFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesUploadEncryptedFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesUploadEncryptedFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesUploadEncryptedFile.Merge(m, src)
}
func (m *TLMessagesUploadEncryptedFile) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesUploadEncryptedFile) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesUploadEncryptedFile.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesUploadEncryptedFile proto.InternalMessageInfo

func (m *TLMessagesUploadEncryptedFile) GetPeer() *InputEncryptedChat {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesUploadEncryptedFile) GetFile() *InputEncryptedFile {
	if m != nil {
		return m.File
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.saveRecentSticker#348e39bf id:InputDocument unsave:Bool = Bool;
type TLMessagesSaveRecentSticker73 struct {
	Id     *InputDocument `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Unsave *Bool          `protobuf:"bytes,2,opt,name=unsave,proto3" json:"unsave,omitempty"`
}

func (m *TLMessagesSaveRecentSticker73) Reset()         { *m = TLMessagesSaveRecentSticker73{} }
func (m *TLMessagesSaveRecentSticker73) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSaveRecentSticker73) ProtoMessage()    {}
func (*TLMessagesSaveRecentSticker73) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{272}
}
func (m *TLMessagesSaveRecentSticker73) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSaveRecentSticker73) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSaveRecentSticker73.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSaveRecentSticker73) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSaveRecentSticker73.Merge(m, src)
}
func (m *TLMessagesSaveRecentSticker73) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSaveRecentSticker73) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSaveRecentSticker73.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSaveRecentSticker73 proto.InternalMessageInfo

func (m *TLMessagesSaveRecentSticker73) GetId() *InputDocument {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TLMessagesSaveRecentSticker73) GetUnsave() *Bool {
	if m != nil {
		return m.Unsave
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// channels.deleteHistory#af369d42 channel:InputChannel max_id:int = Bool;
type TLChannelsDeleteHistory struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	MaxId   int32         `protobuf:"varint,2,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
}

func (m *TLChannelsDeleteHistory) Reset()         { *m = TLChannelsDeleteHistory{} }
func (m *TLChannelsDeleteHistory) String() string { return proto.CompactTextString(m) }
func (*TLChannelsDeleteHistory) ProtoMessage()    {}
func (*TLChannelsDeleteHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{273}
}
func (m *TLChannelsDeleteHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsDeleteHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsDeleteHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsDeleteHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsDeleteHistory.Merge(m, src)
}
func (m *TLChannelsDeleteHistory) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsDeleteHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsDeleteHistory.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsDeleteHistory proto.InternalMessageInfo

func (m *TLChannelsDeleteHistory) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsDeleteHistory) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// channels.togglePreHistoryHidden#eabbb94c channel:InputChannel enabled:Bool = Updates;
type TLChannelsTogglePreHistoryHidden struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Enabled *Bool         `protobuf:"bytes,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (m *TLChannelsTogglePreHistoryHidden) Reset()         { *m = TLChannelsTogglePreHistoryHidden{} }
func (m *TLChannelsTogglePreHistoryHidden) String() string { return proto.CompactTextString(m) }
func (*TLChannelsTogglePreHistoryHidden) ProtoMessage()    {}
func (*TLChannelsTogglePreHistoryHidden) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{274}
}
func (m *TLChannelsTogglePreHistoryHidden) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsTogglePreHistoryHidden) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsTogglePreHistoryHidden.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsTogglePreHistoryHidden) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsTogglePreHistoryHidden.Merge(m, src)
}
func (m *TLChannelsTogglePreHistoryHidden) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsTogglePreHistoryHidden) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsTogglePreHistoryHidden.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsTogglePreHistoryHidden proto.InternalMessageInfo

func (m *TLChannelsTogglePreHistoryHidden) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsTogglePreHistoryHidden) GetEnabled() *Bool {
	if m != nil {
		return m.Enabled
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// channels.getParticipants#123e05e9 channel:InputChannel filter:ChannelParticipantsFilter offset:int limit:int hash:int = channels.ChannelParticipants;
type TLChannelsGetParticipants73 struct {
	Channel *InputChannel              `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Filter  *ChannelParticipantsFilter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	Offset  int32                      `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit   int32                      `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Hash    int32                      `protobuf:"varint,5,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TLChannelsGetParticipants73) Reset()         { *m = TLChannelsGetParticipants73{} }
func (m *TLChannelsGetParticipants73) String() string { return proto.CompactTextString(m) }
func (*TLChannelsGetParticipants73) ProtoMessage()    {}
func (*TLChannelsGetParticipants73) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{275}
}
func (m *TLChannelsGetParticipants73) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsGetParticipants73) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsGetParticipants73.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsGetParticipants73) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsGetParticipants73.Merge(m, src)
}
func (m *TLChannelsGetParticipants73) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsGetParticipants73) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsGetParticipants73.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsGetParticipants73 proto.InternalMessageInfo

func (m *TLChannelsGetParticipants73) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsGetParticipants73) GetFilter() *ChannelParticipantsFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *TLChannelsGetParticipants73) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TLChannelsGetParticipants73) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *TLChannelsGetParticipants73) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// channels.editBanned2#75e6cdde channel_id:int is_silence:Bool is_text:Bool = Updates;
type TLChannelsEditBanned2 struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	IsSilence *Bool `protobuf:"bytes,2,opt,name=is_silence,json=isSilence,proto3" json:"is_silence,omitempty"`
	IsText    *Bool `protobuf:"bytes,3,opt,name=is_text,json=isText,proto3" json:"is_text,omitempty"`
}

func (m *TLChannelsEditBanned2) Reset()         { *m = TLChannelsEditBanned2{} }
func (m *TLChannelsEditBanned2) String() string { return proto.CompactTextString(m) }
func (*TLChannelsEditBanned2) ProtoMessage()    {}
func (*TLChannelsEditBanned2) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{276}
}
func (m *TLChannelsEditBanned2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsEditBanned2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsEditBanned2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsEditBanned2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsEditBanned2.Merge(m, src)
}
func (m *TLChannelsEditBanned2) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsEditBanned2) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsEditBanned2.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsEditBanned2 proto.InternalMessageInfo

func (m *TLChannelsEditBanned2) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

func (m *TLChannelsEditBanned2) GetIsSilence() *Bool {
	if m != nil {
		return m.IsSilence
	}
	return nil
}

func (m *TLChannelsEditBanned2) GetIsText() *Bool {
	if m != nil {
		return m.IsText
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// channels.getBanned2#895eb1c8 channel_id:int = Updates;
type TLChannelsGetBanned2 struct {
	ChannelId int32 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (m *TLChannelsGetBanned2) Reset()         { *m = TLChannelsGetBanned2{} }
func (m *TLChannelsGetBanned2) String() string { return proto.CompactTextString(m) }
func (*TLChannelsGetBanned2) ProtoMessage()    {}
func (*TLChannelsGetBanned2) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{277}
}
func (m *TLChannelsGetBanned2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsGetBanned2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsGetBanned2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsGetBanned2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsGetBanned2.Merge(m, src)
}
func (m *TLChannelsGetBanned2) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsGetBanned2) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsGetBanned2.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsGetBanned2 proto.InternalMessageInfo

func (m *TLChannelsGetBanned2) GetChannelId() int32 {
	if m != nil {
		return m.ChannelId
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// phone.WebrtcCreateOffer#66799090 peer:InputPhoneCall sdp:string = Bool;
type TLPhone_WebrtcCreateOffer struct {
	Peer *InputPhoneCall `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Sdp  string          `protobuf:"bytes,2,opt,name=sdp,proto3" json:"sdp,omitempty"`
}

func (m *TLPhone_WebrtcCreateOffer) Reset()         { *m = TLPhone_WebrtcCreateOffer{} }
func (m *TLPhone_WebrtcCreateOffer) String() string { return proto.CompactTextString(m) }
func (*TLPhone_WebrtcCreateOffer) ProtoMessage()    {}
func (*TLPhone_WebrtcCreateOffer) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{278}
}
func (m *TLPhone_WebrtcCreateOffer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPhone_WebrtcCreateOffer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPhone_WebrtcCreateOffer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLPhone_WebrtcCreateOffer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPhone_WebrtcCreateOffer.Merge(m, src)
}
func (m *TLPhone_WebrtcCreateOffer) XXX_Size() int {
	return m.Size()
}
func (m *TLPhone_WebrtcCreateOffer) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPhone_WebrtcCreateOffer.DiscardUnknown(m)
}

var xxx_messageInfo_TLPhone_WebrtcCreateOffer proto.InternalMessageInfo

func (m *TLPhone_WebrtcCreateOffer) GetPeer() *InputPhoneCall {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLPhone_WebrtcCreateOffer) GetSdp() string {
	if m != nil {
		return m.Sdp
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// phone.WebrtcCreateAnswer#ed4a11e4 peer:InputPhoneCall sdp:string = Bool;
type TLPhone_WebrtcCreateAnswer struct {
	Peer *InputPhoneCall `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Sdp  string          `protobuf:"bytes,2,opt,name=sdp,proto3" json:"sdp,omitempty"`
}

func (m *TLPhone_WebrtcCreateAnswer) Reset()         { *m = TLPhone_WebrtcCreateAnswer{} }
func (m *TLPhone_WebrtcCreateAnswer) String() string { return proto.CompactTextString(m) }
func (*TLPhone_WebrtcCreateAnswer) ProtoMessage()    {}
func (*TLPhone_WebrtcCreateAnswer) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{279}
}
func (m *TLPhone_WebrtcCreateAnswer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPhone_WebrtcCreateAnswer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPhone_WebrtcCreateAnswer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLPhone_WebrtcCreateAnswer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPhone_WebrtcCreateAnswer.Merge(m, src)
}
func (m *TLPhone_WebrtcCreateAnswer) XXX_Size() int {
	return m.Size()
}
func (m *TLPhone_WebrtcCreateAnswer) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPhone_WebrtcCreateAnswer.DiscardUnknown(m)
}

var xxx_messageInfo_TLPhone_WebrtcCreateAnswer proto.InternalMessageInfo

func (m *TLPhone_WebrtcCreateAnswer) GetPeer() *InputPhoneCall {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLPhone_WebrtcCreateAnswer) GetSdp() string {
	if m != nil {
		return m.Sdp
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// phone.WebrtcAddCandidate#7022198c peer:InputPhoneCall sdp_id:string sdp_index:int sdp:string = Bool;
type TLPhone_WebrtcAddCandidate struct {
	Peer     *InputPhoneCall `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	SdpId    string          `protobuf:"bytes,2,opt,name=sdp_id,json=sdpId,proto3" json:"sdp_id,omitempty"`
	SdpIndex int32           `protobuf:"varint,3,opt,name=sdp_index,json=sdpIndex,proto3" json:"sdp_index,omitempty"`
	Sdp      string          `protobuf:"bytes,4,opt,name=sdp,proto3" json:"sdp,omitempty"`
}

func (m *TLPhone_WebrtcAddCandidate) Reset()         { *m = TLPhone_WebrtcAddCandidate{} }
func (m *TLPhone_WebrtcAddCandidate) String() string { return proto.CompactTextString(m) }
func (*TLPhone_WebrtcAddCandidate) ProtoMessage()    {}
func (*TLPhone_WebrtcAddCandidate) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{280}
}
func (m *TLPhone_WebrtcAddCandidate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPhone_WebrtcAddCandidate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPhone_WebrtcAddCandidate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLPhone_WebrtcAddCandidate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPhone_WebrtcAddCandidate.Merge(m, src)
}
func (m *TLPhone_WebrtcAddCandidate) XXX_Size() int {
	return m.Size()
}
func (m *TLPhone_WebrtcAddCandidate) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPhone_WebrtcAddCandidate.DiscardUnknown(m)
}

var xxx_messageInfo_TLPhone_WebrtcAddCandidate proto.InternalMessageInfo

func (m *TLPhone_WebrtcAddCandidate) GetPeer() *InputPhoneCall {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLPhone_WebrtcAddCandidate) GetSdpId() string {
	if m != nil {
		return m.SdpId
	}
	return ""
}

func (m *TLPhone_WebrtcAddCandidate) GetSdpIndex() int32 {
	if m != nil {
		return m.SdpIndex
	}
	return 0
}

func (m *TLPhone_WebrtcAddCandidate) GetSdp() string {
	if m != nil {
		return m.Sdp
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// initConnection#785188b8 {X:Type} flags:# api_id:int device_model:string system_version:string app_version:string system_lang_code:string lang_pack:string lang_code:string proxy:flags.0?InputClientProxy query:!X = X;
type TLInitConnection82 struct {
	ApiId          int32             `protobuf:"varint,2,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`
	DeviceModel    string            `protobuf:"bytes,3,opt,name=device_model,json=deviceModel,proto3" json:"device_model,omitempty"`
	SystemVersion  string            `protobuf:"bytes,4,opt,name=system_version,json=systemVersion,proto3" json:"system_version,omitempty"`
	AppVersion     string            `protobuf:"bytes,5,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	SystemLangCode string            `protobuf:"bytes,6,opt,name=system_lang_code,json=systemLangCode,proto3" json:"system_lang_code,omitempty"`
	LangPack       string            `protobuf:"bytes,7,opt,name=lang_pack,json=langPack,proto3" json:"lang_pack,omitempty"`
	LangCode       string            `protobuf:"bytes,8,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	Proxy          *InputClientProxy `protobuf:"bytes,9,opt,name=proxy,proto3" json:"proxy,omitempty"`
	Query          []byte            `protobuf:"bytes,10,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *TLInitConnection82) Reset()         { *m = TLInitConnection82{} }
func (m *TLInitConnection82) String() string { return proto.CompactTextString(m) }
func (*TLInitConnection82) ProtoMessage()    {}
func (*TLInitConnection82) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{281}
}
func (m *TLInitConnection82) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLInitConnection82) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLInitConnection82.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLInitConnection82) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLInitConnection82.Merge(m, src)
}
func (m *TLInitConnection82) XXX_Size() int {
	return m.Size()
}
func (m *TLInitConnection82) XXX_DiscardUnknown() {
	xxx_messageInfo_TLInitConnection82.DiscardUnknown(m)
}

var xxx_messageInfo_TLInitConnection82 proto.InternalMessageInfo

func (m *TLInitConnection82) GetApiId() int32 {
	if m != nil {
		return m.ApiId
	}
	return 0
}

func (m *TLInitConnection82) GetDeviceModel() string {
	if m != nil {
		return m.DeviceModel
	}
	return ""
}

func (m *TLInitConnection82) GetSystemVersion() string {
	if m != nil {
		return m.SystemVersion
	}
	return ""
}

func (m *TLInitConnection82) GetAppVersion() string {
	if m != nil {
		return m.AppVersion
	}
	return ""
}

func (m *TLInitConnection82) GetSystemLangCode() string {
	if m != nil {
		return m.SystemLangCode
	}
	return ""
}

func (m *TLInitConnection82) GetLangPack() string {
	if m != nil {
		return m.LangPack
	}
	return ""
}

func (m *TLInitConnection82) GetLangCode() string {
	if m != nil {
		return m.LangCode
	}
	return ""
}

func (m *TLInitConnection82) GetProxy() *InputClientProxy {
	if m != nil {
		return m.Proxy
	}
	return nil
}

func (m *TLInitConnection82) GetQuery() []byte {
	if m != nil {
		return m.Query
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// auth.sendCode#86aef0ec flags:# allow_flashcall:flags.0?true phone_number:string current_number:flags.0?Bool api_id:int api_hash:string = auth.SentCode;
type TLAuthSendCode82 struct {
	AllowFlashcall bool   `protobuf:"varint,2,opt,name=allow_flashcall,json=allowFlashcall,proto3" json:"allow_flashcall,omitempty"`
	PhoneNumber    string `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	CurrentNumber  *Bool  `protobuf:"bytes,4,opt,name=current_number,json=currentNumber,proto3" json:"current_number,omitempty"`
	ApiId          int32  `protobuf:"varint,5,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`
	ApiHash        string `protobuf:"bytes,6,opt,name=api_hash,json=apiHash,proto3" json:"api_hash,omitempty"`
}

func (m *TLAuthSendCode82) Reset()         { *m = TLAuthSendCode82{} }
func (m *TLAuthSendCode82) String() string { return proto.CompactTextString(m) }
func (*TLAuthSendCode82) ProtoMessage()    {}
func (*TLAuthSendCode82) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{282}
}
func (m *TLAuthSendCode82) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAuthSendCode82) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAuthSendCode82.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAuthSendCode82) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAuthSendCode82.Merge(m, src)
}
func (m *TLAuthSendCode82) XXX_Size() int {
	return m.Size()
}
func (m *TLAuthSendCode82) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAuthSendCode82.DiscardUnknown(m)
}

var xxx_messageInfo_TLAuthSendCode82 proto.InternalMessageInfo

func (m *TLAuthSendCode82) GetAllowFlashcall() bool {
	if m != nil {
		return m.AllowFlashcall
	}
	return false
}

func (m *TLAuthSendCode82) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *TLAuthSendCode82) GetCurrentNumber() *Bool {
	if m != nil {
		return m.CurrentNumber
	}
	return nil
}

func (m *TLAuthSendCode82) GetApiId() int32 {
	if m != nil {
		return m.ApiId
	}
	return 0
}

func (m *TLAuthSendCode82) GetApiHash() string {
	if m != nil {
		return m.ApiHash
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// help.getConfig#c4f9186b = Config;
type TLHelpGetConfig82 struct {
}

func (m *TLHelpGetConfig82) Reset()         { *m = TLHelpGetConfig82{} }
func (m *TLHelpGetConfig82) String() string { return proto.CompactTextString(m) }
func (*TLHelpGetConfig82) ProtoMessage()    {}
func (*TLHelpGetConfig82) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{283}
}
func (m *TLHelpGetConfig82) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpGetConfig82) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpGetConfig82.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpGetConfig82) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpGetConfig82.Merge(m, src)
}
func (m *TLHelpGetConfig82) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpGetConfig82) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpGetConfig82.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpGetConfig82 proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// help.getTermsOfServiceUpdate#2ca51fd1 = help.TermsOfServiceUpdate;
type TLHelpGetTermsOfServiceUpdate struct {
}

func (m *TLHelpGetTermsOfServiceUpdate) Reset()         { *m = TLHelpGetTermsOfServiceUpdate{} }
func (m *TLHelpGetTermsOfServiceUpdate) String() string { return proto.CompactTextString(m) }
func (*TLHelpGetTermsOfServiceUpdate) ProtoMessage()    {}
func (*TLHelpGetTermsOfServiceUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{284}
}
func (m *TLHelpGetTermsOfServiceUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpGetTermsOfServiceUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpGetTermsOfServiceUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpGetTermsOfServiceUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpGetTermsOfServiceUpdate.Merge(m, src)
}
func (m *TLHelpGetTermsOfServiceUpdate) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpGetTermsOfServiceUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpGetTermsOfServiceUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpGetTermsOfServiceUpdate proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// help.acceptTermsOfService#ee72f79a id:DataJSON = Bool;
type TLHelpAcceptTermsOfService struct {
	Id *DataJSON `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *TLHelpAcceptTermsOfService) Reset()         { *m = TLHelpAcceptTermsOfService{} }
func (m *TLHelpAcceptTermsOfService) String() string { return proto.CompactTextString(m) }
func (*TLHelpAcceptTermsOfService) ProtoMessage()    {}
func (*TLHelpAcceptTermsOfService) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{285}
}
func (m *TLHelpAcceptTermsOfService) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpAcceptTermsOfService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpAcceptTermsOfService.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpAcceptTermsOfService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpAcceptTermsOfService.Merge(m, src)
}
func (m *TLHelpAcceptTermsOfService) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpAcceptTermsOfService) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpAcceptTermsOfService.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpAcceptTermsOfService proto.InternalMessageInfo

func (m *TLHelpAcceptTermsOfService) GetId() *DataJSON {
	if m != nil {
		return m.Id
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// help.getDeepLinkInfo#3fedc75f path:string = help.DeepLinkInfo;
type TLHelpGetDeepLinkInfo struct {
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *TLHelpGetDeepLinkInfo) Reset()         { *m = TLHelpGetDeepLinkInfo{} }
func (m *TLHelpGetDeepLinkInfo) String() string { return proto.CompactTextString(m) }
func (*TLHelpGetDeepLinkInfo) ProtoMessage()    {}
func (*TLHelpGetDeepLinkInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{286}
}
func (m *TLHelpGetDeepLinkInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpGetDeepLinkInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpGetDeepLinkInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpGetDeepLinkInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpGetDeepLinkInfo.Merge(m, src)
}
func (m *TLHelpGetDeepLinkInfo) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpGetDeepLinkInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpGetDeepLinkInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpGetDeepLinkInfo proto.InternalMessageInfo

func (m *TLHelpGetDeepLinkInfo) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// help.test#c0e202f7 = Bool;
type TLHelpTest struct {
}

func (m *TLHelpTest) Reset()         { *m = TLHelpTest{} }
func (m *TLHelpTest) String() string { return proto.CompactTextString(m) }
func (*TLHelpTest) ProtoMessage()    {}
func (*TLHelpTest) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{287}
}
func (m *TLHelpTest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpTest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpTest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpTest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpTest.Merge(m, src)
}
func (m *TLHelpTest) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpTest) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpTest.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpTest proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// messages.getPeerDialogs#e470bcfd peers:Vector<InputDialogPeer> = messages.PeerDialogs;
type TLMessagesGetPeerDialogs82 struct {
	Peers []*InputDialogPeer `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (m *TLMessagesGetPeerDialogs82) Reset()         { *m = TLMessagesGetPeerDialogs82{} }
func (m *TLMessagesGetPeerDialogs82) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetPeerDialogs82) ProtoMessage()    {}
func (*TLMessagesGetPeerDialogs82) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{288}
}
func (m *TLMessagesGetPeerDialogs82) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetPeerDialogs82) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetPeerDialogs82.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetPeerDialogs82) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetPeerDialogs82.Merge(m, src)
}
func (m *TLMessagesGetPeerDialogs82) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetPeerDialogs82) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetPeerDialogs82.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetPeerDialogs82 proto.InternalMessageInfo

func (m *TLMessagesGetPeerDialogs82) GetPeers() []*InputDialogPeer {
	if m != nil {
		return m.Peers
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.getMessages#63c66506 id:Vector<InputMessage> = messages.Messages;
type TLMessagesGetMessages82 struct {
	Id []*InputMessage `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (m *TLMessagesGetMessages82) Reset()         { *m = TLMessagesGetMessages82{} }
func (m *TLMessagesGetMessages82) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetMessages82) ProtoMessage()    {}
func (*TLMessagesGetMessages82) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{289}
}
func (m *TLMessagesGetMessages82) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetMessages82) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetMessages82.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetMessages82) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetMessages82.Merge(m, src)
}
func (m *TLMessagesGetMessages82) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetMessages82) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetMessages82.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetMessages82 proto.InternalMessageInfo

func (m *TLMessagesGetMessages82) GetId() []*InputMessage {
	if m != nil {
		return m.Id
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.getDialogs#b098aee6 flags:# exclude_pinned:flags.0?true offset_date:int offset_id:int offset_peer:InputPeer limit:int hash:int = messages.Dialogs;
type TLMessagesGetDialogs82 struct {
	ExcludePinned bool       `protobuf:"varint,2,opt,name=exclude_pinned,json=excludePinned,proto3" json:"exclude_pinned,omitempty"`
	OffsetDate    int32      `protobuf:"varint,3,opt,name=offset_date,json=offsetDate,proto3" json:"offset_date,omitempty"`
	OffsetId      int32      `protobuf:"varint,4,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	OffsetPeer    *InputPeer `protobuf:"bytes,5,opt,name=offset_peer,json=offsetPeer,proto3" json:"offset_peer,omitempty"`
	Limit         int32      `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Hash          int32      `protobuf:"varint,7,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TLMessagesGetDialogs82) Reset()         { *m = TLMessagesGetDialogs82{} }
func (m *TLMessagesGetDialogs82) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetDialogs82) ProtoMessage()    {}
func (*TLMessagesGetDialogs82) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{290}
}
func (m *TLMessagesGetDialogs82) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetDialogs82) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetDialogs82.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetDialogs82) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetDialogs82.Merge(m, src)
}
func (m *TLMessagesGetDialogs82) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetDialogs82) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetDialogs82.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetDialogs82 proto.InternalMessageInfo

func (m *TLMessagesGetDialogs82) GetExcludePinned() bool {
	if m != nil {
		return m.ExcludePinned
	}
	return false
}

func (m *TLMessagesGetDialogs82) GetOffsetDate() int32 {
	if m != nil {
		return m.OffsetDate
	}
	return 0
}

func (m *TLMessagesGetDialogs82) GetOffsetId() int32 {
	if m != nil {
		return m.OffsetId
	}
	return 0
}

func (m *TLMessagesGetDialogs82) GetOffsetPeer() *InputPeer {
	if m != nil {
		return m.OffsetPeer
	}
	return nil
}

func (m *TLMessagesGetDialogs82) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *TLMessagesGetDialogs82) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.getHistory#dcbb8260 peer:InputPeer offset_id:int offset_date:int add_offset:int limit:int max_id:int min_id:int hash:int = messages.Messages;
type TLMessagesGetHistory82 struct {
	Peer       *InputPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	OffsetId   int32      `protobuf:"varint,2,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	OffsetDate int32      `protobuf:"varint,3,opt,name=offset_date,json=offsetDate,proto3" json:"offset_date,omitempty"`
	AddOffset  int32      `protobuf:"varint,4,opt,name=add_offset,json=addOffset,proto3" json:"add_offset,omitempty"`
	Limit      int32      `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	MaxId      int32      `protobuf:"varint,6,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	MinId      int32      `protobuf:"varint,7,opt,name=min_id,json=minId,proto3" json:"min_id,omitempty"`
	Hash       int32      `protobuf:"varint,8,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TLMessagesGetHistory82) Reset()         { *m = TLMessagesGetHistory82{} }
func (m *TLMessagesGetHistory82) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetHistory82) ProtoMessage()    {}
func (*TLMessagesGetHistory82) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{291}
}
func (m *TLMessagesGetHistory82) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetHistory82) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetHistory82.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetHistory82) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetHistory82.Merge(m, src)
}
func (m *TLMessagesGetHistory82) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetHistory82) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetHistory82.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetHistory82 proto.InternalMessageInfo

func (m *TLMessagesGetHistory82) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesGetHistory82) GetOffsetId() int32 {
	if m != nil {
		return m.OffsetId
	}
	return 0
}

func (m *TLMessagesGetHistory82) GetOffsetDate() int32 {
	if m != nil {
		return m.OffsetDate
	}
	return 0
}

func (m *TLMessagesGetHistory82) GetAddOffset() int32 {
	if m != nil {
		return m.AddOffset
	}
	return 0
}

func (m *TLMessagesGetHistory82) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *TLMessagesGetHistory82) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *TLMessagesGetHistory82) GetMinId() int32 {
	if m != nil {
		return m.MinId
	}
	return 0
}

func (m *TLMessagesGetHistory82) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.search#8614ef68 flags:# peer:InputPeer q:string from_id:flags.0?InputUser filter:MessagesFilter min_date:int max_date:int offset_id:int add_offset:int limit:int max_id:int min_id:int hash:int = messages.Messages;
type TLMessagesSearch82 struct {
	Peer      *InputPeer      `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
	Q         string          `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	FromId    *InputUser      `protobuf:"bytes,4,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	Filter    *MessagesFilter `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
	MinDate   int32           `protobuf:"varint,6,opt,name=min_date,json=minDate,proto3" json:"min_date,omitempty"`
	MaxDate   int32           `protobuf:"varint,7,opt,name=max_date,json=maxDate,proto3" json:"max_date,omitempty"`
	OffsetId  int32           `protobuf:"varint,8,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	AddOffset int32           `protobuf:"varint,9,opt,name=add_offset,json=addOffset,proto3" json:"add_offset,omitempty"`
	Limit     int32           `protobuf:"varint,10,opt,name=limit,proto3" json:"limit,omitempty"`
	MaxId     int32           `protobuf:"varint,11,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	MinId     int32           `protobuf:"varint,12,opt,name=min_id,json=minId,proto3" json:"min_id,omitempty"`
	Hash      int32           `protobuf:"varint,13,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TLMessagesSearch82) Reset()         { *m = TLMessagesSearch82{} }
func (m *TLMessagesSearch82) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSearch82) ProtoMessage()    {}
func (*TLMessagesSearch82) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{292}
}
func (m *TLMessagesSearch82) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSearch82) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSearch82.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSearch82) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSearch82.Merge(m, src)
}
func (m *TLMessagesSearch82) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSearch82) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSearch82.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSearch82 proto.InternalMessageInfo

func (m *TLMessagesSearch82) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSearch82) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

func (m *TLMessagesSearch82) GetFromId() *InputUser {
	if m != nil {
		return m.FromId
	}
	return nil
}

func (m *TLMessagesSearch82) GetFilter() *MessagesFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *TLMessagesSearch82) GetMinDate() int32 {
	if m != nil {
		return m.MinDate
	}
	return 0
}

func (m *TLMessagesSearch82) GetMaxDate() int32 {
	if m != nil {
		return m.MaxDate
	}
	return 0
}

func (m *TLMessagesSearch82) GetOffsetId() int32 {
	if m != nil {
		return m.OffsetId
	}
	return 0
}

func (m *TLMessagesSearch82) GetAddOffset() int32 {
	if m != nil {
		return m.AddOffset
	}
	return 0
}

func (m *TLMessagesSearch82) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *TLMessagesSearch82) GetMaxId() int32 {
	if m != nil {
		return m.MaxId
	}
	return 0
}

func (m *TLMessagesSearch82) GetMinId() int32 {
	if m != nil {
		return m.MinId
	}
	return 0
}

func (m *TLMessagesSearch82) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.sendMedia#b8d1262b flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int media:InputMedia message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Updates;
type TLMessagesSendMedia82 struct {
	Silent       bool             `protobuf:"varint,2,opt,name=silent,proto3" json:"silent,omitempty"`
	Background   bool             `protobuf:"varint,3,opt,name=background,proto3" json:"background,omitempty"`
	ClearDraft   bool             `protobuf:"varint,4,opt,name=clear_draft,json=clearDraft,proto3" json:"clear_draft,omitempty"`
	Peer         *InputPeer       `protobuf:"bytes,5,opt,name=peer,proto3" json:"peer,omitempty"`
	ReplyToMsgId int32            `protobuf:"varint,6,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	Media        *InputMedia      `protobuf:"bytes,7,opt,name=media,proto3" json:"media,omitempty"`
	Message      string           `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	RandomId     int64            `protobuf:"varint,9,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	ReplyMarkup  *ReplyMarkup     `protobuf:"bytes,10,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
	Entities     []*MessageEntity `protobuf:"bytes,11,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (m *TLMessagesSendMedia82) Reset()         { *m = TLMessagesSendMedia82{} }
func (m *TLMessagesSendMedia82) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSendMedia82) ProtoMessage()    {}
func (*TLMessagesSendMedia82) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{293}
}
func (m *TLMessagesSendMedia82) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSendMedia82) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSendMedia82.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSendMedia82) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSendMedia82.Merge(m, src)
}
func (m *TLMessagesSendMedia82) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSendMedia82) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSendMedia82.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSendMedia82 proto.InternalMessageInfo

func (m *TLMessagesSendMedia82) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *TLMessagesSendMedia82) GetBackground() bool {
	if m != nil {
		return m.Background
	}
	return false
}

func (m *TLMessagesSendMedia82) GetClearDraft() bool {
	if m != nil {
		return m.ClearDraft
	}
	return false
}

func (m *TLMessagesSendMedia82) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSendMedia82) GetReplyToMsgId() int32 {
	if m != nil {
		return m.ReplyToMsgId
	}
	return 0
}

func (m *TLMessagesSendMedia82) GetMedia() *InputMedia {
	if m != nil {
		return m.Media
	}
	return nil
}

func (m *TLMessagesSendMedia82) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TLMessagesSendMedia82) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *TLMessagesSendMedia82) GetReplyMarkup() *ReplyMarkup {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

func (m *TLMessagesSendMedia82) GetEntities() []*MessageEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// initConnection#c1cd5ea9 {X:Type} flags:# api_id:int device_model:string system_version:string app_version:string system_lang_code:string lang_pack:string lang_code:string proxy:flags.0?InputClientProxy params:flags.1?JSONValue query:!X = X;
type TLInitConnection114 struct {
	ApiId          int32             `protobuf:"varint,2,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`
	DeviceModel    string            `protobuf:"bytes,3,opt,name=device_model,json=deviceModel,proto3" json:"device_model,omitempty"`
	SystemVersion  string            `protobuf:"bytes,4,opt,name=system_version,json=systemVersion,proto3" json:"system_version,omitempty"`
	AppVersion     string            `protobuf:"bytes,5,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	SystemLangCode string            `protobuf:"bytes,6,opt,name=system_lang_code,json=systemLangCode,proto3" json:"system_lang_code,omitempty"`
	LangPack       string            `protobuf:"bytes,7,opt,name=lang_pack,json=langPack,proto3" json:"lang_pack,omitempty"`
	LangCode       string            `protobuf:"bytes,8,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	Proxy          *InputClientProxy `protobuf:"bytes,9,opt,name=proxy,proto3" json:"proxy,omitempty"`
	Params         *JSONValue        `protobuf:"bytes,10,opt,name=params,proto3" json:"params,omitempty"`
	Query          []byte            `protobuf:"bytes,11,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *TLInitConnection114) Reset()         { *m = TLInitConnection114{} }
func (m *TLInitConnection114) String() string { return proto.CompactTextString(m) }
func (*TLInitConnection114) ProtoMessage()    {}
func (*TLInitConnection114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{294}
}
func (m *TLInitConnection114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLInitConnection114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLInitConnection114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLInitConnection114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLInitConnection114.Merge(m, src)
}
func (m *TLInitConnection114) XXX_Size() int {
	return m.Size()
}
func (m *TLInitConnection114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLInitConnection114.DiscardUnknown(m)
}

var xxx_messageInfo_TLInitConnection114 proto.InternalMessageInfo

func (m *TLInitConnection114) GetApiId() int32 {
	if m != nil {
		return m.ApiId
	}
	return 0
}

func (m *TLInitConnection114) GetDeviceModel() string {
	if m != nil {
		return m.DeviceModel
	}
	return ""
}

func (m *TLInitConnection114) GetSystemVersion() string {
	if m != nil {
		return m.SystemVersion
	}
	return ""
}

func (m *TLInitConnection114) GetAppVersion() string {
	if m != nil {
		return m.AppVersion
	}
	return ""
}

func (m *TLInitConnection114) GetSystemLangCode() string {
	if m != nil {
		return m.SystemLangCode
	}
	return ""
}

func (m *TLInitConnection114) GetLangPack() string {
	if m != nil {
		return m.LangPack
	}
	return ""
}

func (m *TLInitConnection114) GetLangCode() string {
	if m != nil {
		return m.LangCode
	}
	return ""
}

func (m *TLInitConnection114) GetProxy() *InputClientProxy {
	if m != nil {
		return m.Proxy
	}
	return nil
}

func (m *TLInitConnection114) GetParams() *JSONValue {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *TLInitConnection114) GetQuery() []byte {
	if m != nil {
		return m.Query
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// invokeWithMessagesRange#365275f2 {X:Type} range:MessageRange query:!X = X;
type TLInvokeWithMessagesRange struct {
	Range *MessageRange `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	Query []byte        `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *TLInvokeWithMessagesRange) Reset()         { *m = TLInvokeWithMessagesRange{} }
func (m *TLInvokeWithMessagesRange) String() string { return proto.CompactTextString(m) }
func (*TLInvokeWithMessagesRange) ProtoMessage()    {}
func (*TLInvokeWithMessagesRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{295}
}
func (m *TLInvokeWithMessagesRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLInvokeWithMessagesRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLInvokeWithMessagesRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLInvokeWithMessagesRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLInvokeWithMessagesRange.Merge(m, src)
}
func (m *TLInvokeWithMessagesRange) XXX_Size() int {
	return m.Size()
}
func (m *TLInvokeWithMessagesRange) XXX_DiscardUnknown() {
	xxx_messageInfo_TLInvokeWithMessagesRange.DiscardUnknown(m)
}

var xxx_messageInfo_TLInvokeWithMessagesRange proto.InternalMessageInfo

func (m *TLInvokeWithMessagesRange) GetRange() *MessageRange {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *TLInvokeWithMessagesRange) GetQuery() []byte {
	if m != nil {
		return m.Query
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// invokeWithTakeout#aca9fd2e {X:Type} takeout_id:long query:!X = X;
type TLInvokeWithTakeout struct {
	TakeoutId int64  `protobuf:"varint,1,opt,name=takeout_id,json=takeoutId,proto3" json:"takeout_id,omitempty"`
	Query     []byte `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *TLInvokeWithTakeout) Reset()         { *m = TLInvokeWithTakeout{} }
func (m *TLInvokeWithTakeout) String() string { return proto.CompactTextString(m) }
func (*TLInvokeWithTakeout) ProtoMessage()    {}
func (*TLInvokeWithTakeout) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{296}
}
func (m *TLInvokeWithTakeout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLInvokeWithTakeout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLInvokeWithTakeout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLInvokeWithTakeout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLInvokeWithTakeout.Merge(m, src)
}
func (m *TLInvokeWithTakeout) XXX_Size() int {
	return m.Size()
}
func (m *TLInvokeWithTakeout) XXX_DiscardUnknown() {
	xxx_messageInfo_TLInvokeWithTakeout.DiscardUnknown(m)
}

var xxx_messageInfo_TLInvokeWithTakeout proto.InternalMessageInfo

func (m *TLInvokeWithTakeout) GetTakeoutId() int64 {
	if m != nil {
		return m.TakeoutId
	}
	return 0
}

func (m *TLInvokeWithTakeout) GetQuery() []byte {
	if m != nil {
		return m.Query
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// auth.sendCode#a677244f phone_number:string api_id:int api_hash:string settings:CodeSettings = auth.SentCode;
type TLAuthSendCode114 struct {
	PhoneNumber string        `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	ApiId       int32         `protobuf:"varint,2,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`
	ApiHash     string        `protobuf:"bytes,3,opt,name=api_hash,json=apiHash,proto3" json:"api_hash,omitempty"`
	Settings    *CodeSettings `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (m *TLAuthSendCode114) Reset()         { *m = TLAuthSendCode114{} }
func (m *TLAuthSendCode114) String() string { return proto.CompactTextString(m) }
func (*TLAuthSendCode114) ProtoMessage()    {}
func (*TLAuthSendCode114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{297}
}
func (m *TLAuthSendCode114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAuthSendCode114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAuthSendCode114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAuthSendCode114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAuthSendCode114.Merge(m, src)
}
func (m *TLAuthSendCode114) XXX_Size() int {
	return m.Size()
}
func (m *TLAuthSendCode114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAuthSendCode114.DiscardUnknown(m)
}

var xxx_messageInfo_TLAuthSendCode114 proto.InternalMessageInfo

func (m *TLAuthSendCode114) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *TLAuthSendCode114) GetApiId() int32 {
	if m != nil {
		return m.ApiId
	}
	return 0
}

func (m *TLAuthSendCode114) GetApiHash() string {
	if m != nil {
		return m.ApiHash
	}
	return ""
}

func (m *TLAuthSendCode114) GetSettings() *CodeSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// auth.signUp#80eee427 phone_number:string phone_code_hash:string first_name:string last_name:string = auth.Authorization;
type TLAuthSignUp114 struct {
	PhoneNumber   string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	PhoneCodeHash string `protobuf:"bytes,2,opt,name=phone_code_hash,json=phoneCodeHash,proto3" json:"phone_code_hash,omitempty"`
	FirstName     string `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName      string `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
}

func (m *TLAuthSignUp114) Reset()         { *m = TLAuthSignUp114{} }
func (m *TLAuthSignUp114) String() string { return proto.CompactTextString(m) }
func (*TLAuthSignUp114) ProtoMessage()    {}
func (*TLAuthSignUp114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{298}
}
func (m *TLAuthSignUp114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAuthSignUp114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAuthSignUp114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAuthSignUp114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAuthSignUp114.Merge(m, src)
}
func (m *TLAuthSignUp114) XXX_Size() int {
	return m.Size()
}
func (m *TLAuthSignUp114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAuthSignUp114.DiscardUnknown(m)
}

var xxx_messageInfo_TLAuthSignUp114 proto.InternalMessageInfo

func (m *TLAuthSignUp114) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *TLAuthSignUp114) GetPhoneCodeHash() string {
	if m != nil {
		return m.PhoneCodeHash
	}
	return ""
}

func (m *TLAuthSignUp114) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *TLAuthSignUp114) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// auth.checkPassword#d18b4d16 password:InputCheckPasswordSRP = auth.Authorization;
type TLAuthCheckPassword114 struct {
	Password *InputCheckPasswordSRP `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *TLAuthCheckPassword114) Reset()         { *m = TLAuthCheckPassword114{} }
func (m *TLAuthCheckPassword114) String() string { return proto.CompactTextString(m) }
func (*TLAuthCheckPassword114) ProtoMessage()    {}
func (*TLAuthCheckPassword114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{299}
}
func (m *TLAuthCheckPassword114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAuthCheckPassword114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAuthCheckPassword114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAuthCheckPassword114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAuthCheckPassword114.Merge(m, src)
}
func (m *TLAuthCheckPassword114) XXX_Size() int {
	return m.Size()
}
func (m *TLAuthCheckPassword114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAuthCheckPassword114.DiscardUnknown(m)
}

var xxx_messageInfo_TLAuthCheckPassword114 proto.InternalMessageInfo

func (m *TLAuthCheckPassword114) GetPassword() *InputCheckPasswordSRP {
	if m != nil {
		return m.Password
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// auth.exportLoginToken#b1b41517 api_id:int api_hash:string except_ids:Vector<int> = auth.LoginToken;
type TLAuthExportLoginToken struct {
	ApiId     int32   `protobuf:"varint,1,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`
	ApiHash   string  `protobuf:"bytes,2,opt,name=api_hash,json=apiHash,proto3" json:"api_hash,omitempty"`
	ExceptIds []int32 `protobuf:"varint,3,rep,packed,name=except_ids,json=exceptIds,proto3" json:"except_ids,omitempty"`
}

func (m *TLAuthExportLoginToken) Reset()         { *m = TLAuthExportLoginToken{} }
func (m *TLAuthExportLoginToken) String() string { return proto.CompactTextString(m) }
func (*TLAuthExportLoginToken) ProtoMessage()    {}
func (*TLAuthExportLoginToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{300}
}
func (m *TLAuthExportLoginToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAuthExportLoginToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAuthExportLoginToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAuthExportLoginToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAuthExportLoginToken.Merge(m, src)
}
func (m *TLAuthExportLoginToken) XXX_Size() int {
	return m.Size()
}
func (m *TLAuthExportLoginToken) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAuthExportLoginToken.DiscardUnknown(m)
}

var xxx_messageInfo_TLAuthExportLoginToken proto.InternalMessageInfo

func (m *TLAuthExportLoginToken) GetApiId() int32 {
	if m != nil {
		return m.ApiId
	}
	return 0
}

func (m *TLAuthExportLoginToken) GetApiHash() string {
	if m != nil {
		return m.ApiHash
	}
	return ""
}

func (m *TLAuthExportLoginToken) GetExceptIds() []int32 {
	if m != nil {
		return m.ExceptIds
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// auth.importLoginToken#95ac5ce4 token:bytes = auth.LoginToken;
type TLAuthImportLoginToken struct {
	Token []byte `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *TLAuthImportLoginToken) Reset()         { *m = TLAuthImportLoginToken{} }
func (m *TLAuthImportLoginToken) String() string { return proto.CompactTextString(m) }
func (*TLAuthImportLoginToken) ProtoMessage()    {}
func (*TLAuthImportLoginToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{301}
}
func (m *TLAuthImportLoginToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAuthImportLoginToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAuthImportLoginToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAuthImportLoginToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAuthImportLoginToken.Merge(m, src)
}
func (m *TLAuthImportLoginToken) XXX_Size() int {
	return m.Size()
}
func (m *TLAuthImportLoginToken) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAuthImportLoginToken.DiscardUnknown(m)
}

var xxx_messageInfo_TLAuthImportLoginToken proto.InternalMessageInfo

func (m *TLAuthImportLoginToken) GetToken() []byte {
	if m != nil {
		return m.Token
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// auth.acceptLoginToken#e894ad4d token:bytes = Authorization;
type TLAuthAcceptLoginToken struct {
	Token []byte `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (m *TLAuthAcceptLoginToken) Reset()         { *m = TLAuthAcceptLoginToken{} }
func (m *TLAuthAcceptLoginToken) String() string { return proto.CompactTextString(m) }
func (*TLAuthAcceptLoginToken) ProtoMessage()    {}
func (*TLAuthAcceptLoginToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{302}
}
func (m *TLAuthAcceptLoginToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAuthAcceptLoginToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAuthAcceptLoginToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAuthAcceptLoginToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAuthAcceptLoginToken.Merge(m, src)
}
func (m *TLAuthAcceptLoginToken) XXX_Size() int {
	return m.Size()
}
func (m *TLAuthAcceptLoginToken) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAuthAcceptLoginToken.DiscardUnknown(m)
}

var xxx_messageInfo_TLAuthAcceptLoginToken proto.InternalMessageInfo

func (m *TLAuthAcceptLoginToken) GetToken() []byte {
	if m != nil {
		return m.Token
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// account.registerDevice#68976c6f flags:# no_muted:flags.0?true token_type:int token:string app_sandbox:Bool secret:bytes other_uids:Vector<int> = Bool;
type TLAccountRegisterDevice114 struct {
	NoMuted    bool    `protobuf:"varint,2,opt,name=no_muted,json=noMuted,proto3" json:"no_muted,omitempty"`
	TokenType  int32   `protobuf:"varint,3,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`
	Token      string  `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
	AppSandbox *Bool   `protobuf:"bytes,5,opt,name=app_sandbox,json=appSandbox,proto3" json:"app_sandbox,omitempty"`
	Secret     []byte  `protobuf:"bytes,6,opt,name=secret,proto3" json:"secret,omitempty"`
	OtherUids  []int32 `protobuf:"varint,7,rep,packed,name=other_uids,json=otherUids,proto3" json:"other_uids,omitempty"`
}

func (m *TLAccountRegisterDevice114) Reset()         { *m = TLAccountRegisterDevice114{} }
func (m *TLAccountRegisterDevice114) String() string { return proto.CompactTextString(m) }
func (*TLAccountRegisterDevice114) ProtoMessage()    {}
func (*TLAccountRegisterDevice114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{303}
}
func (m *TLAccountRegisterDevice114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountRegisterDevice114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountRegisterDevice114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountRegisterDevice114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountRegisterDevice114.Merge(m, src)
}
func (m *TLAccountRegisterDevice114) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountRegisterDevice114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountRegisterDevice114.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountRegisterDevice114 proto.InternalMessageInfo

func (m *TLAccountRegisterDevice114) GetNoMuted() bool {
	if m != nil {
		return m.NoMuted
	}
	return false
}

func (m *TLAccountRegisterDevice114) GetTokenType() int32 {
	if m != nil {
		return m.TokenType
	}
	return 0
}

func (m *TLAccountRegisterDevice114) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *TLAccountRegisterDevice114) GetAppSandbox() *Bool {
	if m != nil {
		return m.AppSandbox
	}
	return nil
}

func (m *TLAccountRegisterDevice114) GetSecret() []byte {
	if m != nil {
		return m.Secret
	}
	return nil
}

func (m *TLAccountRegisterDevice114) GetOtherUids() []int32 {
	if m != nil {
		return m.OtherUids
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// account.unregisterDevice#3076c4bf token_type:int token:string other_uids:Vector<int> = Bool;
type TLAccountUnregisterDevice114 struct {
	TokenType int32   `protobuf:"varint,1,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`
	Token     string  `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	OtherUids []int32 `protobuf:"varint,3,rep,packed,name=other_uids,json=otherUids,proto3" json:"other_uids,omitempty"`
}

func (m *TLAccountUnregisterDevice114) Reset()         { *m = TLAccountUnregisterDevice114{} }
func (m *TLAccountUnregisterDevice114) String() string { return proto.CompactTextString(m) }
func (*TLAccountUnregisterDevice114) ProtoMessage()    {}
func (*TLAccountUnregisterDevice114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{304}
}
func (m *TLAccountUnregisterDevice114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountUnregisterDevice114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountUnregisterDevice114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountUnregisterDevice114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountUnregisterDevice114.Merge(m, src)
}
func (m *TLAccountUnregisterDevice114) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountUnregisterDevice114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountUnregisterDevice114.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountUnregisterDevice114 proto.InternalMessageInfo

func (m *TLAccountUnregisterDevice114) GetTokenType() int32 {
	if m != nil {
		return m.TokenType
	}
	return 0
}

func (m *TLAccountUnregisterDevice114) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *TLAccountUnregisterDevice114) GetOtherUids() []int32 {
	if m != nil {
		return m.OtherUids
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// account.getWallPapers#aabb1763 hash:int = account.WallPapers;
type TLAccountGetWallPapers114 struct {
	Hash int32 `protobuf:"varint,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TLAccountGetWallPapers114) Reset()         { *m = TLAccountGetWallPapers114{} }
func (m *TLAccountGetWallPapers114) String() string { return proto.CompactTextString(m) }
func (*TLAccountGetWallPapers114) ProtoMessage()    {}
func (*TLAccountGetWallPapers114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{305}
}
func (m *TLAccountGetWallPapers114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountGetWallPapers114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountGetWallPapers114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountGetWallPapers114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountGetWallPapers114.Merge(m, src)
}
func (m *TLAccountGetWallPapers114) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountGetWallPapers114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountGetWallPapers114.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountGetWallPapers114 proto.InternalMessageInfo

func (m *TLAccountGetWallPapers114) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// account.sendChangePhoneCode#82574ae5 phone_number:string settings:CodeSettings = auth.SentCode;
type TLAccountSendChangePhoneCode114 struct {
	PhoneNumber string        `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Settings    *CodeSettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (m *TLAccountSendChangePhoneCode114) Reset()         { *m = TLAccountSendChangePhoneCode114{} }
func (m *TLAccountSendChangePhoneCode114) String() string { return proto.CompactTextString(m) }
func (*TLAccountSendChangePhoneCode114) ProtoMessage()    {}
func (*TLAccountSendChangePhoneCode114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{306}
}
func (m *TLAccountSendChangePhoneCode114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountSendChangePhoneCode114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountSendChangePhoneCode114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountSendChangePhoneCode114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountSendChangePhoneCode114.Merge(m, src)
}
func (m *TLAccountSendChangePhoneCode114) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountSendChangePhoneCode114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountSendChangePhoneCode114.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountSendChangePhoneCode114 proto.InternalMessageInfo

func (m *TLAccountSendChangePhoneCode114) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *TLAccountSendChangePhoneCode114) GetSettings() *CodeSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// account.getPasswordSettings#9cd4eaf9 password:InputCheckPasswordSRP = account.PasswordSettings;
type TLAccountGetPasswordSettings114 struct {
	Password *InputCheckPasswordSRP `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *TLAccountGetPasswordSettings114) Reset()         { *m = TLAccountGetPasswordSettings114{} }
func (m *TLAccountGetPasswordSettings114) String() string { return proto.CompactTextString(m) }
func (*TLAccountGetPasswordSettings114) ProtoMessage()    {}
func (*TLAccountGetPasswordSettings114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{307}
}
func (m *TLAccountGetPasswordSettings114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountGetPasswordSettings114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountGetPasswordSettings114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountGetPasswordSettings114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountGetPasswordSettings114.Merge(m, src)
}
func (m *TLAccountGetPasswordSettings114) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountGetPasswordSettings114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountGetPasswordSettings114.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountGetPasswordSettings114 proto.InternalMessageInfo

func (m *TLAccountGetPasswordSettings114) GetPassword() *InputCheckPasswordSRP {
	if m != nil {
		return m.Password
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// account.updatePasswordSettings#a59b102f password:InputCheckPasswordSRP new_settings:account.PasswordInputSettings = Bool;
type TLAccountUpdatePasswordSettings114 struct {
	Password    *InputCheckPasswordSRP         `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	NewSettings *Account_PasswordInputSettings `protobuf:"bytes,2,opt,name=new_settings,json=newSettings,proto3" json:"new_settings,omitempty"`
}

func (m *TLAccountUpdatePasswordSettings114) Reset()         { *m = TLAccountUpdatePasswordSettings114{} }
func (m *TLAccountUpdatePasswordSettings114) String() string { return proto.CompactTextString(m) }
func (*TLAccountUpdatePasswordSettings114) ProtoMessage()    {}
func (*TLAccountUpdatePasswordSettings114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{308}
}
func (m *TLAccountUpdatePasswordSettings114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountUpdatePasswordSettings114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountUpdatePasswordSettings114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountUpdatePasswordSettings114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountUpdatePasswordSettings114.Merge(m, src)
}
func (m *TLAccountUpdatePasswordSettings114) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountUpdatePasswordSettings114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountUpdatePasswordSettings114.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountUpdatePasswordSettings114 proto.InternalMessageInfo

func (m *TLAccountUpdatePasswordSettings114) GetPassword() *InputCheckPasswordSRP {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *TLAccountUpdatePasswordSettings114) GetNewSettings() *Account_PasswordInputSettings {
	if m != nil {
		return m.NewSettings
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// account.sendConfirmPhoneCode#1b3faa88 hash:string settings:CodeSettings = auth.SentCode;
type TLAccountSendConfirmPhoneCode114 struct {
	Hash     string        `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Settings *CodeSettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (m *TLAccountSendConfirmPhoneCode114) Reset()         { *m = TLAccountSendConfirmPhoneCode114{} }
func (m *TLAccountSendConfirmPhoneCode114) String() string { return proto.CompactTextString(m) }
func (*TLAccountSendConfirmPhoneCode114) ProtoMessage()    {}
func (*TLAccountSendConfirmPhoneCode114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{309}
}
func (m *TLAccountSendConfirmPhoneCode114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountSendConfirmPhoneCode114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountSendConfirmPhoneCode114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountSendConfirmPhoneCode114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountSendConfirmPhoneCode114.Merge(m, src)
}
func (m *TLAccountSendConfirmPhoneCode114) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountSendConfirmPhoneCode114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountSendConfirmPhoneCode114.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountSendConfirmPhoneCode114 proto.InternalMessageInfo

func (m *TLAccountSendConfirmPhoneCode114) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *TLAccountSendConfirmPhoneCode114) GetSettings() *CodeSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// account.getTmpPassword#449e0b51 password:InputCheckPasswordSRP period:int = account.TmpPassword;
type TLAccountGetTmpPassword114 struct {
	Password *InputCheckPasswordSRP `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	Period   int32                  `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
}

func (m *TLAccountGetTmpPassword114) Reset()         { *m = TLAccountGetTmpPassword114{} }
func (m *TLAccountGetTmpPassword114) String() string { return proto.CompactTextString(m) }
func (*TLAccountGetTmpPassword114) ProtoMessage()    {}
func (*TLAccountGetTmpPassword114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{310}
}
func (m *TLAccountGetTmpPassword114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountGetTmpPassword114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountGetTmpPassword114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountGetTmpPassword114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountGetTmpPassword114.Merge(m, src)
}
func (m *TLAccountGetTmpPassword114) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountGetTmpPassword114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountGetTmpPassword114.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountGetTmpPassword114 proto.InternalMessageInfo

func (m *TLAccountGetTmpPassword114) GetPassword() *InputCheckPasswordSRP {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *TLAccountGetTmpPassword114) GetPeriod() int32 {
	if m != nil {
		return m.Period
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// account.getWebAuthorizations#182e6d6f = account.WebAuthorizations;
type TLAccountGetWebAuthorizations struct {
}

func (m *TLAccountGetWebAuthorizations) Reset()         { *m = TLAccountGetWebAuthorizations{} }
func (m *TLAccountGetWebAuthorizations) String() string { return proto.CompactTextString(m) }
func (*TLAccountGetWebAuthorizations) ProtoMessage()    {}
func (*TLAccountGetWebAuthorizations) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{311}
}
func (m *TLAccountGetWebAuthorizations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountGetWebAuthorizations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountGetWebAuthorizations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountGetWebAuthorizations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountGetWebAuthorizations.Merge(m, src)
}
func (m *TLAccountGetWebAuthorizations) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountGetWebAuthorizations) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountGetWebAuthorizations.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountGetWebAuthorizations proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// account.resetWebAuthorization#2d01b9ef hash:long = Bool;
type TLAccountResetWebAuthorization struct {
	Hash int64 `protobuf:"varint,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TLAccountResetWebAuthorization) Reset()         { *m = TLAccountResetWebAuthorization{} }
func (m *TLAccountResetWebAuthorization) String() string { return proto.CompactTextString(m) }
func (*TLAccountResetWebAuthorization) ProtoMessage()    {}
func (*TLAccountResetWebAuthorization) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{312}
}
func (m *TLAccountResetWebAuthorization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountResetWebAuthorization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountResetWebAuthorization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountResetWebAuthorization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountResetWebAuthorization.Merge(m, src)
}
func (m *TLAccountResetWebAuthorization) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountResetWebAuthorization) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountResetWebAuthorization.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountResetWebAuthorization proto.InternalMessageInfo

func (m *TLAccountResetWebAuthorization) GetHash() int64 {
	if m != nil {
		return m.Hash
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// account.resetWebAuthorizations#682d2594 = Bool;
type TLAccountResetWebAuthorizations struct {
}

func (m *TLAccountResetWebAuthorizations) Reset()         { *m = TLAccountResetWebAuthorizations{} }
func (m *TLAccountResetWebAuthorizations) String() string { return proto.CompactTextString(m) }
func (*TLAccountResetWebAuthorizations) ProtoMessage()    {}
func (*TLAccountResetWebAuthorizations) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{313}
}
func (m *TLAccountResetWebAuthorizations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountResetWebAuthorizations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountResetWebAuthorizations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountResetWebAuthorizations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountResetWebAuthorizations.Merge(m, src)
}
func (m *TLAccountResetWebAuthorizations) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountResetWebAuthorizations) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountResetWebAuthorizations.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountResetWebAuthorizations proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// account.getAllSecureValues#b288bc7d = Vector<SecureValue>;
type TLAccountGetAllSecureValues struct {
}

func (m *TLAccountGetAllSecureValues) Reset()         { *m = TLAccountGetAllSecureValues{} }
func (m *TLAccountGetAllSecureValues) String() string { return proto.CompactTextString(m) }
func (*TLAccountGetAllSecureValues) ProtoMessage()    {}
func (*TLAccountGetAllSecureValues) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{314}
}
func (m *TLAccountGetAllSecureValues) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountGetAllSecureValues) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountGetAllSecureValues.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountGetAllSecureValues) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountGetAllSecureValues.Merge(m, src)
}
func (m *TLAccountGetAllSecureValues) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountGetAllSecureValues) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountGetAllSecureValues.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountGetAllSecureValues proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// account.getSecureValue#73665bc2 types:Vector<SecureValueType> = Vector<SecureValue>;
type TLAccountGetSecureValue struct {
	Types []*SecureValueType `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty"`
}

func (m *TLAccountGetSecureValue) Reset()         { *m = TLAccountGetSecureValue{} }
func (m *TLAccountGetSecureValue) String() string { return proto.CompactTextString(m) }
func (*TLAccountGetSecureValue) ProtoMessage()    {}
func (*TLAccountGetSecureValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{315}
}
func (m *TLAccountGetSecureValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountGetSecureValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountGetSecureValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountGetSecureValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountGetSecureValue.Merge(m, src)
}
func (m *TLAccountGetSecureValue) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountGetSecureValue) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountGetSecureValue.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountGetSecureValue proto.InternalMessageInfo

func (m *TLAccountGetSecureValue) GetTypes() []*SecureValueType {
	if m != nil {
		return m.Types
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// account.saveSecureValue#899fe31d value:InputSecureValue secure_secret_id:long = SecureValue;
type TLAccountSaveSecureValue struct {
	Value          *InputSecureValue `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	SecureSecretId int64             `protobuf:"varint,2,opt,name=secure_secret_id,json=secureSecretId,proto3" json:"secure_secret_id,omitempty"`
}

func (m *TLAccountSaveSecureValue) Reset()         { *m = TLAccountSaveSecureValue{} }
func (m *TLAccountSaveSecureValue) String() string { return proto.CompactTextString(m) }
func (*TLAccountSaveSecureValue) ProtoMessage()    {}
func (*TLAccountSaveSecureValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{316}
}
func (m *TLAccountSaveSecureValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountSaveSecureValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountSaveSecureValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountSaveSecureValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountSaveSecureValue.Merge(m, src)
}
func (m *TLAccountSaveSecureValue) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountSaveSecureValue) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountSaveSecureValue.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountSaveSecureValue proto.InternalMessageInfo

func (m *TLAccountSaveSecureValue) GetValue() *InputSecureValue {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *TLAccountSaveSecureValue) GetSecureSecretId() int64 {
	if m != nil {
		return m.SecureSecretId
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// account.deleteSecureValue#b880bc4b types:Vector<SecureValueType> = Bool;
type TLAccountDeleteSecureValue struct {
	Types []*SecureValueType `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty"`
}

func (m *TLAccountDeleteSecureValue) Reset()         { *m = TLAccountDeleteSecureValue{} }
func (m *TLAccountDeleteSecureValue) String() string { return proto.CompactTextString(m) }
func (*TLAccountDeleteSecureValue) ProtoMessage()    {}
func (*TLAccountDeleteSecureValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{317}
}
func (m *TLAccountDeleteSecureValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountDeleteSecureValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountDeleteSecureValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountDeleteSecureValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountDeleteSecureValue.Merge(m, src)
}
func (m *TLAccountDeleteSecureValue) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountDeleteSecureValue) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountDeleteSecureValue.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountDeleteSecureValue proto.InternalMessageInfo

func (m *TLAccountDeleteSecureValue) GetTypes() []*SecureValueType {
	if m != nil {
		return m.Types
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// account.getAuthorizationForm#b86ba8e1 bot_id:int scope:string public_key:string = account.AuthorizationForm;
type TLAccountGetAuthorizationForm struct {
	BotId     int32  `protobuf:"varint,1,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	Scope     string `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	PublicKey string `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (m *TLAccountGetAuthorizationForm) Reset()         { *m = TLAccountGetAuthorizationForm{} }
func (m *TLAccountGetAuthorizationForm) String() string { return proto.CompactTextString(m) }
func (*TLAccountGetAuthorizationForm) ProtoMessage()    {}
func (*TLAccountGetAuthorizationForm) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{318}
}
func (m *TLAccountGetAuthorizationForm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountGetAuthorizationForm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountGetAuthorizationForm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountGetAuthorizationForm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountGetAuthorizationForm.Merge(m, src)
}
func (m *TLAccountGetAuthorizationForm) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountGetAuthorizationForm) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountGetAuthorizationForm.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountGetAuthorizationForm proto.InternalMessageInfo

func (m *TLAccountGetAuthorizationForm) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *TLAccountGetAuthorizationForm) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *TLAccountGetAuthorizationForm) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// account.acceptAuthorization#e7027c94 bot_id:int scope:string public_key:string value_hashes:Vector<SecureValueHash> credentials:SecureCredentialsEncrypted = Bool;
type TLAccountAcceptAuthorization struct {
	BotId       int32                       `protobuf:"varint,1,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	Scope       string                      `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	PublicKey   string                      `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	ValueHashes []*SecureValueHash          `protobuf:"bytes,4,rep,name=value_hashes,json=valueHashes,proto3" json:"value_hashes,omitempty"`
	Credentials *SecureCredentialsEncrypted `protobuf:"bytes,5,opt,name=credentials,proto3" json:"credentials,omitempty"`
}

func (m *TLAccountAcceptAuthorization) Reset()         { *m = TLAccountAcceptAuthorization{} }
func (m *TLAccountAcceptAuthorization) String() string { return proto.CompactTextString(m) }
func (*TLAccountAcceptAuthorization) ProtoMessage()    {}
func (*TLAccountAcceptAuthorization) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{319}
}
func (m *TLAccountAcceptAuthorization) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountAcceptAuthorization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountAcceptAuthorization.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountAcceptAuthorization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountAcceptAuthorization.Merge(m, src)
}
func (m *TLAccountAcceptAuthorization) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountAcceptAuthorization) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountAcceptAuthorization.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountAcceptAuthorization proto.InternalMessageInfo

func (m *TLAccountAcceptAuthorization) GetBotId() int32 {
	if m != nil {
		return m.BotId
	}
	return 0
}

func (m *TLAccountAcceptAuthorization) GetScope() string {
	if m != nil {
		return m.Scope
	}
	return ""
}

func (m *TLAccountAcceptAuthorization) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *TLAccountAcceptAuthorization) GetValueHashes() []*SecureValueHash {
	if m != nil {
		return m.ValueHashes
	}
	return nil
}

func (m *TLAccountAcceptAuthorization) GetCredentials() *SecureCredentialsEncrypted {
	if m != nil {
		return m.Credentials
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// account.sendVerifyPhoneCode#a5a356f9 phone_number:string settings:CodeSettings = auth.SentCode;
type TLAccountSendVerifyPhoneCode struct {
	PhoneNumber string        `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Settings    *CodeSettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (m *TLAccountSendVerifyPhoneCode) Reset()         { *m = TLAccountSendVerifyPhoneCode{} }
func (m *TLAccountSendVerifyPhoneCode) String() string { return proto.CompactTextString(m) }
func (*TLAccountSendVerifyPhoneCode) ProtoMessage()    {}
func (*TLAccountSendVerifyPhoneCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{320}
}
func (m *TLAccountSendVerifyPhoneCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountSendVerifyPhoneCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountSendVerifyPhoneCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountSendVerifyPhoneCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountSendVerifyPhoneCode.Merge(m, src)
}
func (m *TLAccountSendVerifyPhoneCode) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountSendVerifyPhoneCode) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountSendVerifyPhoneCode.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountSendVerifyPhoneCode proto.InternalMessageInfo

func (m *TLAccountSendVerifyPhoneCode) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *TLAccountSendVerifyPhoneCode) GetSettings() *CodeSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// account.verifyPhone#4dd3a7f6 phone_number:string phone_code_hash:string phone_code:string = Bool;
type TLAccountVerifyPhone struct {
	PhoneNumber   string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	PhoneCodeHash string `protobuf:"bytes,2,opt,name=phone_code_hash,json=phoneCodeHash,proto3" json:"phone_code_hash,omitempty"`
	PhoneCode     string `protobuf:"bytes,3,opt,name=phone_code,json=phoneCode,proto3" json:"phone_code,omitempty"`
}

func (m *TLAccountVerifyPhone) Reset()         { *m = TLAccountVerifyPhone{} }
func (m *TLAccountVerifyPhone) String() string { return proto.CompactTextString(m) }
func (*TLAccountVerifyPhone) ProtoMessage()    {}
func (*TLAccountVerifyPhone) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{321}
}
func (m *TLAccountVerifyPhone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountVerifyPhone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountVerifyPhone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountVerifyPhone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountVerifyPhone.Merge(m, src)
}
func (m *TLAccountVerifyPhone) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountVerifyPhone) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountVerifyPhone.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountVerifyPhone proto.InternalMessageInfo

func (m *TLAccountVerifyPhone) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *TLAccountVerifyPhone) GetPhoneCodeHash() string {
	if m != nil {
		return m.PhoneCodeHash
	}
	return ""
}

func (m *TLAccountVerifyPhone) GetPhoneCode() string {
	if m != nil {
		return m.PhoneCode
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// account.sendVerifyEmailCode#7011509f email:string = account.SentEmailCode;
type TLAccountSendVerifyEmailCode struct {
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (m *TLAccountSendVerifyEmailCode) Reset()         { *m = TLAccountSendVerifyEmailCode{} }
func (m *TLAccountSendVerifyEmailCode) String() string { return proto.CompactTextString(m) }
func (*TLAccountSendVerifyEmailCode) ProtoMessage()    {}
func (*TLAccountSendVerifyEmailCode) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{322}
}
func (m *TLAccountSendVerifyEmailCode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountSendVerifyEmailCode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountSendVerifyEmailCode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountSendVerifyEmailCode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountSendVerifyEmailCode.Merge(m, src)
}
func (m *TLAccountSendVerifyEmailCode) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountSendVerifyEmailCode) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountSendVerifyEmailCode.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountSendVerifyEmailCode proto.InternalMessageInfo

func (m *TLAccountSendVerifyEmailCode) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// account.verifyEmail#ecba39db email:string code:string = Bool;
type TLAccountVerifyEmail struct {
	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Code  string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *TLAccountVerifyEmail) Reset()         { *m = TLAccountVerifyEmail{} }
func (m *TLAccountVerifyEmail) String() string { return proto.CompactTextString(m) }
func (*TLAccountVerifyEmail) ProtoMessage()    {}
func (*TLAccountVerifyEmail) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{323}
}
func (m *TLAccountVerifyEmail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountVerifyEmail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountVerifyEmail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountVerifyEmail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountVerifyEmail.Merge(m, src)
}
func (m *TLAccountVerifyEmail) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountVerifyEmail) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountVerifyEmail.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountVerifyEmail proto.InternalMessageInfo

func (m *TLAccountVerifyEmail) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *TLAccountVerifyEmail) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// account.initTakeoutSession#f05b4804 flags:# contacts:flags.0?true message_users:flags.1?true message_chats:flags.2?true message_megagroups:flags.3?true message_channels:flags.4?true files:flags.5?true file_max_size:flags.5?int = account.Takeout;
type TLAccountInitTakeoutSession struct {
	Contacts          bool  `protobuf:"varint,2,opt,name=contacts,proto3" json:"contacts,omitempty"`
	MessageUsers      bool  `protobuf:"varint,3,opt,name=message_users,json=messageUsers,proto3" json:"message_users,omitempty"`
	MessageChats      bool  `protobuf:"varint,4,opt,name=message_chats,json=messageChats,proto3" json:"message_chats,omitempty"`
	MessageMegagroups bool  `protobuf:"varint,5,opt,name=message_megagroups,json=messageMegagroups,proto3" json:"message_megagroups,omitempty"`
	MessageChannels   bool  `protobuf:"varint,6,opt,name=message_channels,json=messageChannels,proto3" json:"message_channels,omitempty"`
	Files             bool  `protobuf:"varint,7,opt,name=files,proto3" json:"files,omitempty"`
	FileMaxSize       int32 `protobuf:"varint,8,opt,name=file_max_size,json=fileMaxSize,proto3" json:"file_max_size,omitempty"`
}

func (m *TLAccountInitTakeoutSession) Reset()         { *m = TLAccountInitTakeoutSession{} }
func (m *TLAccountInitTakeoutSession) String() string { return proto.CompactTextString(m) }
func (*TLAccountInitTakeoutSession) ProtoMessage()    {}
func (*TLAccountInitTakeoutSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{324}
}
func (m *TLAccountInitTakeoutSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountInitTakeoutSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountInitTakeoutSession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountInitTakeoutSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountInitTakeoutSession.Merge(m, src)
}
func (m *TLAccountInitTakeoutSession) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountInitTakeoutSession) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountInitTakeoutSession.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountInitTakeoutSession proto.InternalMessageInfo

func (m *TLAccountInitTakeoutSession) GetContacts() bool {
	if m != nil {
		return m.Contacts
	}
	return false
}

func (m *TLAccountInitTakeoutSession) GetMessageUsers() bool {
	if m != nil {
		return m.MessageUsers
	}
	return false
}

func (m *TLAccountInitTakeoutSession) GetMessageChats() bool {
	if m != nil {
		return m.MessageChats
	}
	return false
}

func (m *TLAccountInitTakeoutSession) GetMessageMegagroups() bool {
	if m != nil {
		return m.MessageMegagroups
	}
	return false
}

func (m *TLAccountInitTakeoutSession) GetMessageChannels() bool {
	if m != nil {
		return m.MessageChannels
	}
	return false
}

func (m *TLAccountInitTakeoutSession) GetFiles() bool {
	if m != nil {
		return m.Files
	}
	return false
}

func (m *TLAccountInitTakeoutSession) GetFileMaxSize() int32 {
	if m != nil {
		return m.FileMaxSize
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// account.finishTakeoutSession#1d2652ee flags:# success:flags.0?true = Bool;
type TLAccountFinishTakeoutSession struct {
	Success bool `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *TLAccountFinishTakeoutSession) Reset()         { *m = TLAccountFinishTakeoutSession{} }
func (m *TLAccountFinishTakeoutSession) String() string { return proto.CompactTextString(m) }
func (*TLAccountFinishTakeoutSession) ProtoMessage()    {}
func (*TLAccountFinishTakeoutSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{325}
}
func (m *TLAccountFinishTakeoutSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountFinishTakeoutSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountFinishTakeoutSession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountFinishTakeoutSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountFinishTakeoutSession.Merge(m, src)
}
func (m *TLAccountFinishTakeoutSession) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountFinishTakeoutSession) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountFinishTakeoutSession.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountFinishTakeoutSession proto.InternalMessageInfo

func (m *TLAccountFinishTakeoutSession) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

///////////////////////////////////////////////////////////////////////////////
// account.confirmPasswordEmail#8fdf1920 code:string = Bool;
type TLAccountConfirmPasswordEmail struct {
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *TLAccountConfirmPasswordEmail) Reset()         { *m = TLAccountConfirmPasswordEmail{} }
func (m *TLAccountConfirmPasswordEmail) String() string { return proto.CompactTextString(m) }
func (*TLAccountConfirmPasswordEmail) ProtoMessage()    {}
func (*TLAccountConfirmPasswordEmail) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{326}
}
func (m *TLAccountConfirmPasswordEmail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountConfirmPasswordEmail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountConfirmPasswordEmail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountConfirmPasswordEmail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountConfirmPasswordEmail.Merge(m, src)
}
func (m *TLAccountConfirmPasswordEmail) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountConfirmPasswordEmail) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountConfirmPasswordEmail.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountConfirmPasswordEmail proto.InternalMessageInfo

func (m *TLAccountConfirmPasswordEmail) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// account.resendPasswordEmail#7a7f2a15 = Bool;
type TLAccountResendPasswordEmail struct {
}

func (m *TLAccountResendPasswordEmail) Reset()         { *m = TLAccountResendPasswordEmail{} }
func (m *TLAccountResendPasswordEmail) String() string { return proto.CompactTextString(m) }
func (*TLAccountResendPasswordEmail) ProtoMessage()    {}
func (*TLAccountResendPasswordEmail) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{327}
}
func (m *TLAccountResendPasswordEmail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountResendPasswordEmail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountResendPasswordEmail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountResendPasswordEmail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountResendPasswordEmail.Merge(m, src)
}
func (m *TLAccountResendPasswordEmail) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountResendPasswordEmail) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountResendPasswordEmail.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountResendPasswordEmail proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// account.cancelPasswordEmail#c1cbd5b6 = Bool;
type TLAccountCancelPasswordEmail struct {
}

func (m *TLAccountCancelPasswordEmail) Reset()         { *m = TLAccountCancelPasswordEmail{} }
func (m *TLAccountCancelPasswordEmail) String() string { return proto.CompactTextString(m) }
func (*TLAccountCancelPasswordEmail) ProtoMessage()    {}
func (*TLAccountCancelPasswordEmail) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{328}
}
func (m *TLAccountCancelPasswordEmail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountCancelPasswordEmail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountCancelPasswordEmail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountCancelPasswordEmail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountCancelPasswordEmail.Merge(m, src)
}
func (m *TLAccountCancelPasswordEmail) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountCancelPasswordEmail) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountCancelPasswordEmail.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountCancelPasswordEmail proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// account.getContactSignUpNotification#9f07c728 = Bool;
type TLAccountGetContactSignUpNotification struct {
}

func (m *TLAccountGetContactSignUpNotification) Reset()         { *m = TLAccountGetContactSignUpNotification{} }
func (m *TLAccountGetContactSignUpNotification) String() string { return proto.CompactTextString(m) }
func (*TLAccountGetContactSignUpNotification) ProtoMessage()    {}
func (*TLAccountGetContactSignUpNotification) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{329}
}
func (m *TLAccountGetContactSignUpNotification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountGetContactSignUpNotification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountGetContactSignUpNotification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountGetContactSignUpNotification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountGetContactSignUpNotification.Merge(m, src)
}
func (m *TLAccountGetContactSignUpNotification) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountGetContactSignUpNotification) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountGetContactSignUpNotification.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountGetContactSignUpNotification proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// account.setContactSignUpNotification#cff43f61 silent:Bool = Bool;
type TLAccountSetContactSignUpNotification struct {
	Silent *Bool `protobuf:"bytes,1,opt,name=silent,proto3" json:"silent,omitempty"`
}

func (m *TLAccountSetContactSignUpNotification) Reset()         { *m = TLAccountSetContactSignUpNotification{} }
func (m *TLAccountSetContactSignUpNotification) String() string { return proto.CompactTextString(m) }
func (*TLAccountSetContactSignUpNotification) ProtoMessage()    {}
func (*TLAccountSetContactSignUpNotification) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{330}
}
func (m *TLAccountSetContactSignUpNotification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountSetContactSignUpNotification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountSetContactSignUpNotification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountSetContactSignUpNotification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountSetContactSignUpNotification.Merge(m, src)
}
func (m *TLAccountSetContactSignUpNotification) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountSetContactSignUpNotification) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountSetContactSignUpNotification.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountSetContactSignUpNotification proto.InternalMessageInfo

func (m *TLAccountSetContactSignUpNotification) GetSilent() *Bool {
	if m != nil {
		return m.Silent
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// account.getNotifyExceptions#53577479 flags:# compare_sound:flags.1?true peer:flags.0?InputNotifyPeer = Updates;
type TLAccountGetNotifyExceptions struct {
	CompareSound bool             `protobuf:"varint,2,opt,name=compare_sound,json=compareSound,proto3" json:"compare_sound,omitempty"`
	Peer         *InputNotifyPeer `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *TLAccountGetNotifyExceptions) Reset()         { *m = TLAccountGetNotifyExceptions{} }
func (m *TLAccountGetNotifyExceptions) String() string { return proto.CompactTextString(m) }
func (*TLAccountGetNotifyExceptions) ProtoMessage()    {}
func (*TLAccountGetNotifyExceptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{331}
}
func (m *TLAccountGetNotifyExceptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountGetNotifyExceptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountGetNotifyExceptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountGetNotifyExceptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountGetNotifyExceptions.Merge(m, src)
}
func (m *TLAccountGetNotifyExceptions) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountGetNotifyExceptions) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountGetNotifyExceptions.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountGetNotifyExceptions proto.InternalMessageInfo

func (m *TLAccountGetNotifyExceptions) GetCompareSound() bool {
	if m != nil {
		return m.CompareSound
	}
	return false
}

func (m *TLAccountGetNotifyExceptions) GetPeer() *InputNotifyPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// account.getWallPaper#fc8ddbea wallpaper:InputWallPaper = WallPaper;
type TLAccountGetWallPaper struct {
	Wallpaper *InputWallPaper `protobuf:"bytes,1,opt,name=wallpaper,proto3" json:"wallpaper,omitempty"`
}

func (m *TLAccountGetWallPaper) Reset()         { *m = TLAccountGetWallPaper{} }
func (m *TLAccountGetWallPaper) String() string { return proto.CompactTextString(m) }
func (*TLAccountGetWallPaper) ProtoMessage()    {}
func (*TLAccountGetWallPaper) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{332}
}
func (m *TLAccountGetWallPaper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountGetWallPaper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountGetWallPaper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountGetWallPaper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountGetWallPaper.Merge(m, src)
}
func (m *TLAccountGetWallPaper) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountGetWallPaper) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountGetWallPaper.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountGetWallPaper proto.InternalMessageInfo

func (m *TLAccountGetWallPaper) GetWallpaper() *InputWallPaper {
	if m != nil {
		return m.Wallpaper
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// account.uploadWallPaper#dd853661 file:InputFile mime_type:string settings:WallPaperSettings = WallPaper;
type TLAccountUploadWallPaper struct {
	File     *InputFile         `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	MimeType string             `protobuf:"bytes,2,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	Settings *WallPaperSettings `protobuf:"bytes,3,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (m *TLAccountUploadWallPaper) Reset()         { *m = TLAccountUploadWallPaper{} }
func (m *TLAccountUploadWallPaper) String() string { return proto.CompactTextString(m) }
func (*TLAccountUploadWallPaper) ProtoMessage()    {}
func (*TLAccountUploadWallPaper) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{333}
}
func (m *TLAccountUploadWallPaper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountUploadWallPaper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountUploadWallPaper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountUploadWallPaper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountUploadWallPaper.Merge(m, src)
}
func (m *TLAccountUploadWallPaper) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountUploadWallPaper) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountUploadWallPaper.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountUploadWallPaper proto.InternalMessageInfo

func (m *TLAccountUploadWallPaper) GetFile() *InputFile {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *TLAccountUploadWallPaper) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

func (m *TLAccountUploadWallPaper) GetSettings() *WallPaperSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// account.saveWallPaper#6c5a5b37 wallpaper:InputWallPaper unsave:Bool settings:WallPaperSettings = Bool;
type TLAccountSaveWallPaper struct {
	Wallpaper *InputWallPaper    `protobuf:"bytes,1,opt,name=wallpaper,proto3" json:"wallpaper,omitempty"`
	Unsave    *Bool              `protobuf:"bytes,2,opt,name=unsave,proto3" json:"unsave,omitempty"`
	Settings  *WallPaperSettings `protobuf:"bytes,3,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (m *TLAccountSaveWallPaper) Reset()         { *m = TLAccountSaveWallPaper{} }
func (m *TLAccountSaveWallPaper) String() string { return proto.CompactTextString(m) }
func (*TLAccountSaveWallPaper) ProtoMessage()    {}
func (*TLAccountSaveWallPaper) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{334}
}
func (m *TLAccountSaveWallPaper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountSaveWallPaper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountSaveWallPaper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountSaveWallPaper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountSaveWallPaper.Merge(m, src)
}
func (m *TLAccountSaveWallPaper) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountSaveWallPaper) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountSaveWallPaper.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountSaveWallPaper proto.InternalMessageInfo

func (m *TLAccountSaveWallPaper) GetWallpaper() *InputWallPaper {
	if m != nil {
		return m.Wallpaper
	}
	return nil
}

func (m *TLAccountSaveWallPaper) GetUnsave() *Bool {
	if m != nil {
		return m.Unsave
	}
	return nil
}

func (m *TLAccountSaveWallPaper) GetSettings() *WallPaperSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// account.installWallPaper#feed5769 wallpaper:InputWallPaper settings:WallPaperSettings = Bool;
type TLAccountInstallWallPaper struct {
	Wallpaper *InputWallPaper    `protobuf:"bytes,1,opt,name=wallpaper,proto3" json:"wallpaper,omitempty"`
	Settings  *WallPaperSettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (m *TLAccountInstallWallPaper) Reset()         { *m = TLAccountInstallWallPaper{} }
func (m *TLAccountInstallWallPaper) String() string { return proto.CompactTextString(m) }
func (*TLAccountInstallWallPaper) ProtoMessage()    {}
func (*TLAccountInstallWallPaper) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{335}
}
func (m *TLAccountInstallWallPaper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountInstallWallPaper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountInstallWallPaper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountInstallWallPaper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountInstallWallPaper.Merge(m, src)
}
func (m *TLAccountInstallWallPaper) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountInstallWallPaper) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountInstallWallPaper.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountInstallWallPaper proto.InternalMessageInfo

func (m *TLAccountInstallWallPaper) GetWallpaper() *InputWallPaper {
	if m != nil {
		return m.Wallpaper
	}
	return nil
}

func (m *TLAccountInstallWallPaper) GetSettings() *WallPaperSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// account.resetWallPapers#bb3b9804 = Bool;
type TLAccountResetWallPapers struct {
}

func (m *TLAccountResetWallPapers) Reset()         { *m = TLAccountResetWallPapers{} }
func (m *TLAccountResetWallPapers) String() string { return proto.CompactTextString(m) }
func (*TLAccountResetWallPapers) ProtoMessage()    {}
func (*TLAccountResetWallPapers) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{336}
}
func (m *TLAccountResetWallPapers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountResetWallPapers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountResetWallPapers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountResetWallPapers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountResetWallPapers.Merge(m, src)
}
func (m *TLAccountResetWallPapers) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountResetWallPapers) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountResetWallPapers.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountResetWallPapers proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// account.getAutoDownloadSettings#56da0b3f = account.AutoDownloadSettings;
type TLAccountGetAutoDownloadSettings struct {
}

func (m *TLAccountGetAutoDownloadSettings) Reset()         { *m = TLAccountGetAutoDownloadSettings{} }
func (m *TLAccountGetAutoDownloadSettings) String() string { return proto.CompactTextString(m) }
func (*TLAccountGetAutoDownloadSettings) ProtoMessage()    {}
func (*TLAccountGetAutoDownloadSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{337}
}
func (m *TLAccountGetAutoDownloadSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountGetAutoDownloadSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountGetAutoDownloadSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountGetAutoDownloadSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountGetAutoDownloadSettings.Merge(m, src)
}
func (m *TLAccountGetAutoDownloadSettings) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountGetAutoDownloadSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountGetAutoDownloadSettings.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountGetAutoDownloadSettings proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// account.saveAutoDownloadSettings#76f36233 flags:# low:flags.0?true high:flags.1?true settings:AutoDownloadSettings = Bool;
type TLAccountSaveAutoDownloadSettings struct {
	Low      bool                  `protobuf:"varint,2,opt,name=low,proto3" json:"low,omitempty"`
	High     bool                  `protobuf:"varint,3,opt,name=high,proto3" json:"high,omitempty"`
	Settings *AutoDownloadSettings `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (m *TLAccountSaveAutoDownloadSettings) Reset()         { *m = TLAccountSaveAutoDownloadSettings{} }
func (m *TLAccountSaveAutoDownloadSettings) String() string { return proto.CompactTextString(m) }
func (*TLAccountSaveAutoDownloadSettings) ProtoMessage()    {}
func (*TLAccountSaveAutoDownloadSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{338}
}
func (m *TLAccountSaveAutoDownloadSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountSaveAutoDownloadSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountSaveAutoDownloadSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountSaveAutoDownloadSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountSaveAutoDownloadSettings.Merge(m, src)
}
func (m *TLAccountSaveAutoDownloadSettings) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountSaveAutoDownloadSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountSaveAutoDownloadSettings.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountSaveAutoDownloadSettings proto.InternalMessageInfo

func (m *TLAccountSaveAutoDownloadSettings) GetLow() bool {
	if m != nil {
		return m.Low
	}
	return false
}

func (m *TLAccountSaveAutoDownloadSettings) GetHigh() bool {
	if m != nil {
		return m.High
	}
	return false
}

func (m *TLAccountSaveAutoDownloadSettings) GetSettings() *AutoDownloadSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// account.uploadTheme#1c3db333 flags:# file:InputFile thumb:flags.0?InputFile file_name:string mime_type:string = Document;
type TLAccountUploadTheme struct {
	File     *InputFile `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	Thumb    *InputFile `protobuf:"bytes,3,opt,name=thumb,proto3" json:"thumb,omitempty"`
	FileName string     `protobuf:"bytes,4,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	MimeType string     `protobuf:"bytes,5,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
}

func (m *TLAccountUploadTheme) Reset()         { *m = TLAccountUploadTheme{} }
func (m *TLAccountUploadTheme) String() string { return proto.CompactTextString(m) }
func (*TLAccountUploadTheme) ProtoMessage()    {}
func (*TLAccountUploadTheme) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{339}
}
func (m *TLAccountUploadTheme) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountUploadTheme) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountUploadTheme.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountUploadTheme) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountUploadTheme.Merge(m, src)
}
func (m *TLAccountUploadTheme) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountUploadTheme) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountUploadTheme.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountUploadTheme proto.InternalMessageInfo

func (m *TLAccountUploadTheme) GetFile() *InputFile {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *TLAccountUploadTheme) GetThumb() *InputFile {
	if m != nil {
		return m.Thumb
	}
	return nil
}

func (m *TLAccountUploadTheme) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *TLAccountUploadTheme) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// account.createTheme#8432c21f flags:# slug:string title:string document:flags.2?InputDocument settings:flags.3?InputThemeSettings = Theme;
type TLAccountCreateTheme struct {
	Slug     string              `protobuf:"bytes,2,opt,name=slug,proto3" json:"slug,omitempty"`
	Title    string              `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Document *InputDocument      `protobuf:"bytes,4,opt,name=document,proto3" json:"document,omitempty"`
	Settings *InputThemeSettings `protobuf:"bytes,5,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (m *TLAccountCreateTheme) Reset()         { *m = TLAccountCreateTheme{} }
func (m *TLAccountCreateTheme) String() string { return proto.CompactTextString(m) }
func (*TLAccountCreateTheme) ProtoMessage()    {}
func (*TLAccountCreateTheme) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{340}
}
func (m *TLAccountCreateTheme) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountCreateTheme) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountCreateTheme.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountCreateTheme) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountCreateTheme.Merge(m, src)
}
func (m *TLAccountCreateTheme) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountCreateTheme) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountCreateTheme.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountCreateTheme proto.InternalMessageInfo

func (m *TLAccountCreateTheme) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *TLAccountCreateTheme) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *TLAccountCreateTheme) GetDocument() *InputDocument {
	if m != nil {
		return m.Document
	}
	return nil
}

func (m *TLAccountCreateTheme) GetSettings() *InputThemeSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// account.updateTheme#5cb367d5 flags:# format:string theme:InputTheme slug:flags.0?string title:flags.1?string document:flags.2?InputDocument settings:flags.3?InputThemeSettings = Theme;
type TLAccountUpdateTheme struct {
	Format   string              `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	Theme    *InputTheme         `protobuf:"bytes,3,opt,name=theme,proto3" json:"theme,omitempty"`
	Slug     string              `protobuf:"bytes,4,opt,name=slug,proto3" json:"slug,omitempty"`
	Title    string              `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Document *InputDocument      `protobuf:"bytes,6,opt,name=document,proto3" json:"document,omitempty"`
	Settings *InputThemeSettings `protobuf:"bytes,7,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (m *TLAccountUpdateTheme) Reset()         { *m = TLAccountUpdateTheme{} }
func (m *TLAccountUpdateTheme) String() string { return proto.CompactTextString(m) }
func (*TLAccountUpdateTheme) ProtoMessage()    {}
func (*TLAccountUpdateTheme) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{341}
}
func (m *TLAccountUpdateTheme) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountUpdateTheme) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountUpdateTheme.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountUpdateTheme) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountUpdateTheme.Merge(m, src)
}
func (m *TLAccountUpdateTheme) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountUpdateTheme) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountUpdateTheme.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountUpdateTheme proto.InternalMessageInfo

func (m *TLAccountUpdateTheme) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *TLAccountUpdateTheme) GetTheme() *InputTheme {
	if m != nil {
		return m.Theme
	}
	return nil
}

func (m *TLAccountUpdateTheme) GetSlug() string {
	if m != nil {
		return m.Slug
	}
	return ""
}

func (m *TLAccountUpdateTheme) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *TLAccountUpdateTheme) GetDocument() *InputDocument {
	if m != nil {
		return m.Document
	}
	return nil
}

func (m *TLAccountUpdateTheme) GetSettings() *InputThemeSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// account.saveTheme#f257106c theme:InputTheme unsave:Bool = Bool;
type TLAccountSaveTheme struct {
	Theme  *InputTheme `protobuf:"bytes,1,opt,name=theme,proto3" json:"theme,omitempty"`
	Unsave *Bool       `protobuf:"bytes,2,opt,name=unsave,proto3" json:"unsave,omitempty"`
}

func (m *TLAccountSaveTheme) Reset()         { *m = TLAccountSaveTheme{} }
func (m *TLAccountSaveTheme) String() string { return proto.CompactTextString(m) }
func (*TLAccountSaveTheme) ProtoMessage()    {}
func (*TLAccountSaveTheme) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{342}
}
func (m *TLAccountSaveTheme) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountSaveTheme) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountSaveTheme.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountSaveTheme) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountSaveTheme.Merge(m, src)
}
func (m *TLAccountSaveTheme) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountSaveTheme) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountSaveTheme.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountSaveTheme proto.InternalMessageInfo

func (m *TLAccountSaveTheme) GetTheme() *InputTheme {
	if m != nil {
		return m.Theme
	}
	return nil
}

func (m *TLAccountSaveTheme) GetUnsave() *Bool {
	if m != nil {
		return m.Unsave
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// account.installTheme#7ae43737 flags:# dark:flags.0?true format:flags.1?string theme:flags.1?InputTheme = Bool;
type TLAccountInstallTheme struct {
	Dark   bool        `protobuf:"varint,2,opt,name=dark,proto3" json:"dark,omitempty"`
	Format string      `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	Theme  *InputTheme `protobuf:"bytes,4,opt,name=theme,proto3" json:"theme,omitempty"`
}

func (m *TLAccountInstallTheme) Reset()         { *m = TLAccountInstallTheme{} }
func (m *TLAccountInstallTheme) String() string { return proto.CompactTextString(m) }
func (*TLAccountInstallTheme) ProtoMessage()    {}
func (*TLAccountInstallTheme) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{343}
}
func (m *TLAccountInstallTheme) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountInstallTheme) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountInstallTheme.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountInstallTheme) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountInstallTheme.Merge(m, src)
}
func (m *TLAccountInstallTheme) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountInstallTheme) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountInstallTheme.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountInstallTheme proto.InternalMessageInfo

func (m *TLAccountInstallTheme) GetDark() bool {
	if m != nil {
		return m.Dark
	}
	return false
}

func (m *TLAccountInstallTheme) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *TLAccountInstallTheme) GetTheme() *InputTheme {
	if m != nil {
		return m.Theme
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// account.getTheme#8d9d742b format:string theme:InputTheme document_id:long = Theme;
type TLAccountGetTheme struct {
	Format     string      `protobuf:"bytes,1,opt,name=format,proto3" json:"format,omitempty"`
	Theme      *InputTheme `protobuf:"bytes,2,opt,name=theme,proto3" json:"theme,omitempty"`
	DocumentId int64       `protobuf:"varint,3,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
}

func (m *TLAccountGetTheme) Reset()         { *m = TLAccountGetTheme{} }
func (m *TLAccountGetTheme) String() string { return proto.CompactTextString(m) }
func (*TLAccountGetTheme) ProtoMessage()    {}
func (*TLAccountGetTheme) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{344}
}
func (m *TLAccountGetTheme) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountGetTheme) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountGetTheme.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountGetTheme) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountGetTheme.Merge(m, src)
}
func (m *TLAccountGetTheme) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountGetTheme) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountGetTheme.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountGetTheme proto.InternalMessageInfo

func (m *TLAccountGetTheme) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *TLAccountGetTheme) GetTheme() *InputTheme {
	if m != nil {
		return m.Theme
	}
	return nil
}

func (m *TLAccountGetTheme) GetDocumentId() int64 {
	if m != nil {
		return m.DocumentId
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// account.getThemes#285946f8 format:string hash:int = account.Themes;
type TLAccountGetThemes struct {
	Format string `protobuf:"bytes,1,opt,name=format,proto3" json:"format,omitempty"`
	Hash   int32  `protobuf:"varint,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TLAccountGetThemes) Reset()         { *m = TLAccountGetThemes{} }
func (m *TLAccountGetThemes) String() string { return proto.CompactTextString(m) }
func (*TLAccountGetThemes) ProtoMessage()    {}
func (*TLAccountGetThemes) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{345}
}
func (m *TLAccountGetThemes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountGetThemes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountGetThemes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountGetThemes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountGetThemes.Merge(m, src)
}
func (m *TLAccountGetThemes) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountGetThemes) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountGetThemes.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountGetThemes proto.InternalMessageInfo

func (m *TLAccountGetThemes) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *TLAccountGetThemes) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// account.setContentSettings#b574b16b flags:# sensitive_enabled:flags.0?true = Bool;
type TLAccountSetContentSettings struct {
	SensitiveEnabled bool `protobuf:"varint,2,opt,name=sensitive_enabled,json=sensitiveEnabled,proto3" json:"sensitive_enabled,omitempty"`
}

func (m *TLAccountSetContentSettings) Reset()         { *m = TLAccountSetContentSettings{} }
func (m *TLAccountSetContentSettings) String() string { return proto.CompactTextString(m) }
func (*TLAccountSetContentSettings) ProtoMessage()    {}
func (*TLAccountSetContentSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{346}
}
func (m *TLAccountSetContentSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountSetContentSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountSetContentSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountSetContentSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountSetContentSettings.Merge(m, src)
}
func (m *TLAccountSetContentSettings) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountSetContentSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountSetContentSettings.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountSetContentSettings proto.InternalMessageInfo

func (m *TLAccountSetContentSettings) GetSensitiveEnabled() bool {
	if m != nil {
		return m.SensitiveEnabled
	}
	return false
}

///////////////////////////////////////////////////////////////////////////////
// account.getContentSettings#8b9b4dae = account.ContentSettings;
type TLAccountGetContentSettings struct {
}

func (m *TLAccountGetContentSettings) Reset()         { *m = TLAccountGetContentSettings{} }
func (m *TLAccountGetContentSettings) String() string { return proto.CompactTextString(m) }
func (*TLAccountGetContentSettings) ProtoMessage()    {}
func (*TLAccountGetContentSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{347}
}
func (m *TLAccountGetContentSettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountGetContentSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountGetContentSettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountGetContentSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountGetContentSettings.Merge(m, src)
}
func (m *TLAccountGetContentSettings) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountGetContentSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountGetContentSettings.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountGetContentSettings proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// account.getMultiWallPapers#65ad71dc wallpapers:Vector<InputWallPaper> = Vector<WallPaper>;
type TLAccountGetMultiWallPapers struct {
	Wallpapers []*InputWallPaper `protobuf:"bytes,1,rep,name=wallpapers,proto3" json:"wallpapers,omitempty"`
}

func (m *TLAccountGetMultiWallPapers) Reset()         { *m = TLAccountGetMultiWallPapers{} }
func (m *TLAccountGetMultiWallPapers) String() string { return proto.CompactTextString(m) }
func (*TLAccountGetMultiWallPapers) ProtoMessage()    {}
func (*TLAccountGetMultiWallPapers) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{348}
}
func (m *TLAccountGetMultiWallPapers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountGetMultiWallPapers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountGetMultiWallPapers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountGetMultiWallPapers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountGetMultiWallPapers.Merge(m, src)
}
func (m *TLAccountGetMultiWallPapers) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountGetMultiWallPapers) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountGetMultiWallPapers.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountGetMultiWallPapers proto.InternalMessageInfo

func (m *TLAccountGetMultiWallPapers) GetWallpapers() []*InputWallPaper {
	if m != nil {
		return m.Wallpapers
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// users.setSecureValueErrors#90c894b5 id:InputUser errors:Vector<SecureValueError> = Bool;
type TLUsersSetSecureValueErrors struct {
	Id     *InputUser          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Errors []*SecureValueError `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (m *TLUsersSetSecureValueErrors) Reset()         { *m = TLUsersSetSecureValueErrors{} }
func (m *TLUsersSetSecureValueErrors) String() string { return proto.CompactTextString(m) }
func (*TLUsersSetSecureValueErrors) ProtoMessage()    {}
func (*TLUsersSetSecureValueErrors) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{349}
}
func (m *TLUsersSetSecureValueErrors) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUsersSetSecureValueErrors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUsersSetSecureValueErrors.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUsersSetSecureValueErrors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUsersSetSecureValueErrors.Merge(m, src)
}
func (m *TLUsersSetSecureValueErrors) XXX_Size() int {
	return m.Size()
}
func (m *TLUsersSetSecureValueErrors) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUsersSetSecureValueErrors.DiscardUnknown(m)
}

var xxx_messageInfo_TLUsersSetSecureValueErrors proto.InternalMessageInfo

func (m *TLUsersSetSecureValueErrors) GetId() *InputUser {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TLUsersSetSecureValueErrors) GetErrors() []*SecureValueError {
	if m != nil {
		return m.Errors
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// contacts.getContactIDs#2caa4a42 hash:int = Vector<int>;
type TLContactsGetContactIDs struct {
	Hash int32 `protobuf:"varint,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TLContactsGetContactIDs) Reset()         { *m = TLContactsGetContactIDs{} }
func (m *TLContactsGetContactIDs) String() string { return proto.CompactTextString(m) }
func (*TLContactsGetContactIDs) ProtoMessage()    {}
func (*TLContactsGetContactIDs) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{350}
}
func (m *TLContactsGetContactIDs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLContactsGetContactIDs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLContactsGetContactIDs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLContactsGetContactIDs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLContactsGetContactIDs.Merge(m, src)
}
func (m *TLContactsGetContactIDs) XXX_Size() int {
	return m.Size()
}
func (m *TLContactsGetContactIDs) XXX_DiscardUnknown() {
	xxx_messageInfo_TLContactsGetContactIDs.DiscardUnknown(m)
}

var xxx_messageInfo_TLContactsGetContactIDs proto.InternalMessageInfo

func (m *TLContactsGetContactIDs) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// contacts.deleteContacts#96a0e00 id:Vector<InputUser> = Updates;
type TLContactsDeleteContacts114 struct {
	Id []*InputUser `protobuf:"bytes,1,rep,name=id,proto3" json:"id,omitempty"`
}

func (m *TLContactsDeleteContacts114) Reset()         { *m = TLContactsDeleteContacts114{} }
func (m *TLContactsDeleteContacts114) String() string { return proto.CompactTextString(m) }
func (*TLContactsDeleteContacts114) ProtoMessage()    {}
func (*TLContactsDeleteContacts114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{351}
}
func (m *TLContactsDeleteContacts114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLContactsDeleteContacts114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLContactsDeleteContacts114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLContactsDeleteContacts114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLContactsDeleteContacts114.Merge(m, src)
}
func (m *TLContactsDeleteContacts114) XXX_Size() int {
	return m.Size()
}
func (m *TLContactsDeleteContacts114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLContactsDeleteContacts114.DiscardUnknown(m)
}

var xxx_messageInfo_TLContactsDeleteContacts114 proto.InternalMessageInfo

func (m *TLContactsDeleteContacts114) GetId() []*InputUser {
	if m != nil {
		return m.Id
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// contacts.deleteByPhones#1013fd9e phones:Vector<string> = Bool;
type TLContactsDeleteByPhones struct {
	Phones []string `protobuf:"bytes,1,rep,name=phones,proto3" json:"phones,omitempty"`
}

func (m *TLContactsDeleteByPhones) Reset()         { *m = TLContactsDeleteByPhones{} }
func (m *TLContactsDeleteByPhones) String() string { return proto.CompactTextString(m) }
func (*TLContactsDeleteByPhones) ProtoMessage()    {}
func (*TLContactsDeleteByPhones) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{352}
}
func (m *TLContactsDeleteByPhones) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLContactsDeleteByPhones) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLContactsDeleteByPhones.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLContactsDeleteByPhones) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLContactsDeleteByPhones.Merge(m, src)
}
func (m *TLContactsDeleteByPhones) XXX_Size() int {
	return m.Size()
}
func (m *TLContactsDeleteByPhones) XXX_DiscardUnknown() {
	xxx_messageInfo_TLContactsDeleteByPhones.DiscardUnknown(m)
}

var xxx_messageInfo_TLContactsDeleteByPhones proto.InternalMessageInfo

func (m *TLContactsDeleteByPhones) GetPhones() []string {
	if m != nil {
		return m.Phones
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// contacts.getSaved#82f1e39f = Vector<SavedContact>;
type TLContactsGetSaved struct {
}

func (m *TLContactsGetSaved) Reset()         { *m = TLContactsGetSaved{} }
func (m *TLContactsGetSaved) String() string { return proto.CompactTextString(m) }
func (*TLContactsGetSaved) ProtoMessage()    {}
func (*TLContactsGetSaved) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{353}
}
func (m *TLContactsGetSaved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLContactsGetSaved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLContactsGetSaved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLContactsGetSaved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLContactsGetSaved.Merge(m, src)
}
func (m *TLContactsGetSaved) XXX_Size() int {
	return m.Size()
}
func (m *TLContactsGetSaved) XXX_DiscardUnknown() {
	xxx_messageInfo_TLContactsGetSaved.DiscardUnknown(m)
}

var xxx_messageInfo_TLContactsGetSaved proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// contacts.toggleTopPeers#8514bdda enabled:Bool = Bool;
type TLContactsToggleTopPeers struct {
	Enabled *Bool `protobuf:"bytes,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (m *TLContactsToggleTopPeers) Reset()         { *m = TLContactsToggleTopPeers{} }
func (m *TLContactsToggleTopPeers) String() string { return proto.CompactTextString(m) }
func (*TLContactsToggleTopPeers) ProtoMessage()    {}
func (*TLContactsToggleTopPeers) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{354}
}
func (m *TLContactsToggleTopPeers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLContactsToggleTopPeers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLContactsToggleTopPeers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLContactsToggleTopPeers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLContactsToggleTopPeers.Merge(m, src)
}
func (m *TLContactsToggleTopPeers) XXX_Size() int {
	return m.Size()
}
func (m *TLContactsToggleTopPeers) XXX_DiscardUnknown() {
	xxx_messageInfo_TLContactsToggleTopPeers.DiscardUnknown(m)
}

var xxx_messageInfo_TLContactsToggleTopPeers proto.InternalMessageInfo

func (m *TLContactsToggleTopPeers) GetEnabled() *Bool {
	if m != nil {
		return m.Enabled
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// contacts.addContact#e8f463d0 flags:# add_phone_privacy_exception:flags.0?true id:InputUser first_name:string last_name:string phone:string = Updates;
type TLContactsAddContact struct {
	AddPhonePrivacyException bool       `protobuf:"varint,2,opt,name=add_phone_privacy_exception,json=addPhonePrivacyException,proto3" json:"add_phone_privacy_exception,omitempty"`
	Id                       *InputUser `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	FirstName                string     `protobuf:"bytes,4,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName                 string     `protobuf:"bytes,5,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Phone                    string     `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (m *TLContactsAddContact) Reset()         { *m = TLContactsAddContact{} }
func (m *TLContactsAddContact) String() string { return proto.CompactTextString(m) }
func (*TLContactsAddContact) ProtoMessage()    {}
func (*TLContactsAddContact) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{355}
}
func (m *TLContactsAddContact) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLContactsAddContact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLContactsAddContact.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLContactsAddContact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLContactsAddContact.Merge(m, src)
}
func (m *TLContactsAddContact) XXX_Size() int {
	return m.Size()
}
func (m *TLContactsAddContact) XXX_DiscardUnknown() {
	xxx_messageInfo_TLContactsAddContact.DiscardUnknown(m)
}

var xxx_messageInfo_TLContactsAddContact proto.InternalMessageInfo

func (m *TLContactsAddContact) GetAddPhonePrivacyException() bool {
	if m != nil {
		return m.AddPhonePrivacyException
	}
	return false
}

func (m *TLContactsAddContact) GetId() *InputUser {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TLContactsAddContact) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *TLContactsAddContact) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *TLContactsAddContact) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// contacts.acceptContact#f831a20f id:InputUser = Updates;
type TLContactsAcceptContact struct {
	Id *InputUser `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *TLContactsAcceptContact) Reset()         { *m = TLContactsAcceptContact{} }
func (m *TLContactsAcceptContact) String() string { return proto.CompactTextString(m) }
func (*TLContactsAcceptContact) ProtoMessage()    {}
func (*TLContactsAcceptContact) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{356}
}
func (m *TLContactsAcceptContact) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLContactsAcceptContact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLContactsAcceptContact.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLContactsAcceptContact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLContactsAcceptContact.Merge(m, src)
}
func (m *TLContactsAcceptContact) XXX_Size() int {
	return m.Size()
}
func (m *TLContactsAcceptContact) XXX_DiscardUnknown() {
	xxx_messageInfo_TLContactsAcceptContact.DiscardUnknown(m)
}

var xxx_messageInfo_TLContactsAcceptContact proto.InternalMessageInfo

func (m *TLContactsAcceptContact) GetId() *InputUser {
	if m != nil {
		return m.Id
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// contacts.getLocated#d348bc44 flags:# background:flags.1?true geo_point:InputGeoPoint self_expires:flags.0?int = Updates;
type TLContactsGetLocated struct {
	Background  bool           `protobuf:"varint,2,opt,name=background,proto3" json:"background,omitempty"`
	GeoPoint    *InputGeoPoint `protobuf:"bytes,3,opt,name=geo_point,json=geoPoint,proto3" json:"geo_point,omitempty"`
	SelfExpires int32          `protobuf:"varint,4,opt,name=self_expires,json=selfExpires,proto3" json:"self_expires,omitempty"`
}

func (m *TLContactsGetLocated) Reset()         { *m = TLContactsGetLocated{} }
func (m *TLContactsGetLocated) String() string { return proto.CompactTextString(m) }
func (*TLContactsGetLocated) ProtoMessage()    {}
func (*TLContactsGetLocated) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{357}
}
func (m *TLContactsGetLocated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLContactsGetLocated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLContactsGetLocated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLContactsGetLocated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLContactsGetLocated.Merge(m, src)
}
func (m *TLContactsGetLocated) XXX_Size() int {
	return m.Size()
}
func (m *TLContactsGetLocated) XXX_DiscardUnknown() {
	xxx_messageInfo_TLContactsGetLocated.DiscardUnknown(m)
}

var xxx_messageInfo_TLContactsGetLocated proto.InternalMessageInfo

func (m *TLContactsGetLocated) GetBackground() bool {
	if m != nil {
		return m.Background
	}
	return false
}

func (m *TLContactsGetLocated) GetGeoPoint() *InputGeoPoint {
	if m != nil {
		return m.GeoPoint
	}
	return nil
}

func (m *TLContactsGetLocated) GetSelfExpires() int32 {
	if m != nil {
		return m.SelfExpires
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.getDialogs#a0ee3b73 flags:# exclude_pinned:flags.0?true folder_id:flags.1?int offset_date:int offset_id:int offset_peer:InputPeer limit:int hash:int = messages.Dialogs;
type TLMessagesGetDialogs114 struct {
	ExcludePinned bool       `protobuf:"varint,2,opt,name=exclude_pinned,json=excludePinned,proto3" json:"exclude_pinned,omitempty"`
	FolderId      int32      `protobuf:"varint,3,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	OffsetDate    int32      `protobuf:"varint,4,opt,name=offset_date,json=offsetDate,proto3" json:"offset_date,omitempty"`
	OffsetId      int32      `protobuf:"varint,5,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	OffsetPeer    *InputPeer `protobuf:"bytes,6,opt,name=offset_peer,json=offsetPeer,proto3" json:"offset_peer,omitempty"`
	Limit         int32      `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	Hash          int32      `protobuf:"varint,8,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TLMessagesGetDialogs114) Reset()         { *m = TLMessagesGetDialogs114{} }
func (m *TLMessagesGetDialogs114) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetDialogs114) ProtoMessage()    {}
func (*TLMessagesGetDialogs114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{358}
}
func (m *TLMessagesGetDialogs114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetDialogs114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetDialogs114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetDialogs114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetDialogs114.Merge(m, src)
}
func (m *TLMessagesGetDialogs114) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetDialogs114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetDialogs114.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetDialogs114 proto.InternalMessageInfo

func (m *TLMessagesGetDialogs114) GetExcludePinned() bool {
	if m != nil {
		return m.ExcludePinned
	}
	return false
}

func (m *TLMessagesGetDialogs114) GetFolderId() int32 {
	if m != nil {
		return m.FolderId
	}
	return 0
}

func (m *TLMessagesGetDialogs114) GetOffsetDate() int32 {
	if m != nil {
		return m.OffsetDate
	}
	return 0
}

func (m *TLMessagesGetDialogs114) GetOffsetId() int32 {
	if m != nil {
		return m.OffsetId
	}
	return 0
}

func (m *TLMessagesGetDialogs114) GetOffsetPeer() *InputPeer {
	if m != nil {
		return m.OffsetPeer
	}
	return nil
}

func (m *TLMessagesGetDialogs114) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *TLMessagesGetDialogs114) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.sendMessage#520c3870 flags:# no_webpage:flags.1?true silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int = Updates;
type TLMessagesSendMessage114 struct {
	NoWebpage    bool             `protobuf:"varint,2,opt,name=no_webpage,json=noWebpage,proto3" json:"no_webpage,omitempty"`
	Silent       bool             `protobuf:"varint,3,opt,name=silent,proto3" json:"silent,omitempty"`
	Background   bool             `protobuf:"varint,4,opt,name=background,proto3" json:"background,omitempty"`
	ClearDraft   bool             `protobuf:"varint,5,opt,name=clear_draft,json=clearDraft,proto3" json:"clear_draft,omitempty"`
	Peer         *InputPeer       `protobuf:"bytes,6,opt,name=peer,proto3" json:"peer,omitempty"`
	ReplyToMsgId int32            `protobuf:"varint,7,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	Message      string           `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	RandomId     int64            `protobuf:"varint,9,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	ReplyMarkup  *ReplyMarkup     `protobuf:"bytes,10,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
	Entities     []*MessageEntity `protobuf:"bytes,11,rep,name=entities,proto3" json:"entities,omitempty"`
	ScheduleDate int32            `protobuf:"varint,12,opt,name=schedule_date,json=scheduleDate,proto3" json:"schedule_date,omitempty"`
}

func (m *TLMessagesSendMessage114) Reset()         { *m = TLMessagesSendMessage114{} }
func (m *TLMessagesSendMessage114) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSendMessage114) ProtoMessage()    {}
func (*TLMessagesSendMessage114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{359}
}
func (m *TLMessagesSendMessage114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSendMessage114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSendMessage114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSendMessage114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSendMessage114.Merge(m, src)
}
func (m *TLMessagesSendMessage114) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSendMessage114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSendMessage114.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSendMessage114 proto.InternalMessageInfo

func (m *TLMessagesSendMessage114) GetNoWebpage() bool {
	if m != nil {
		return m.NoWebpage
	}
	return false
}

func (m *TLMessagesSendMessage114) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *TLMessagesSendMessage114) GetBackground() bool {
	if m != nil {
		return m.Background
	}
	return false
}

func (m *TLMessagesSendMessage114) GetClearDraft() bool {
	if m != nil {
		return m.ClearDraft
	}
	return false
}

func (m *TLMessagesSendMessage114) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSendMessage114) GetReplyToMsgId() int32 {
	if m != nil {
		return m.ReplyToMsgId
	}
	return 0
}

func (m *TLMessagesSendMessage114) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TLMessagesSendMessage114) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *TLMessagesSendMessage114) GetReplyMarkup() *ReplyMarkup {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

func (m *TLMessagesSendMessage114) GetEntities() []*MessageEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *TLMessagesSendMessage114) GetScheduleDate() int32 {
	if m != nil {
		return m.ScheduleDate
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.sendMedia#3491eba9 flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int media:InputMedia message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int = Updates;
type TLMessagesSendMedia114 struct {
	Silent       bool             `protobuf:"varint,2,opt,name=silent,proto3" json:"silent,omitempty"`
	Background   bool             `protobuf:"varint,3,opt,name=background,proto3" json:"background,omitempty"`
	ClearDraft   bool             `protobuf:"varint,4,opt,name=clear_draft,json=clearDraft,proto3" json:"clear_draft,omitempty"`
	Peer         *InputPeer       `protobuf:"bytes,5,opt,name=peer,proto3" json:"peer,omitempty"`
	ReplyToMsgId int32            `protobuf:"varint,6,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	Media        *InputMedia      `protobuf:"bytes,7,opt,name=media,proto3" json:"media,omitempty"`
	Message      string           `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	RandomId     int64            `protobuf:"varint,9,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	ReplyMarkup  *ReplyMarkup     `protobuf:"bytes,10,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
	Entities     []*MessageEntity `protobuf:"bytes,11,rep,name=entities,proto3" json:"entities,omitempty"`
	ScheduleDate int32            `protobuf:"varint,12,opt,name=schedule_date,json=scheduleDate,proto3" json:"schedule_date,omitempty"`
}

func (m *TLMessagesSendMedia114) Reset()         { *m = TLMessagesSendMedia114{} }
func (m *TLMessagesSendMedia114) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSendMedia114) ProtoMessage()    {}
func (*TLMessagesSendMedia114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{360}
}
func (m *TLMessagesSendMedia114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSendMedia114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSendMedia114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSendMedia114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSendMedia114.Merge(m, src)
}
func (m *TLMessagesSendMedia114) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSendMedia114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSendMedia114.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSendMedia114 proto.InternalMessageInfo

func (m *TLMessagesSendMedia114) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *TLMessagesSendMedia114) GetBackground() bool {
	if m != nil {
		return m.Background
	}
	return false
}

func (m *TLMessagesSendMedia114) GetClearDraft() bool {
	if m != nil {
		return m.ClearDraft
	}
	return false
}

func (m *TLMessagesSendMedia114) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSendMedia114) GetReplyToMsgId() int32 {
	if m != nil {
		return m.ReplyToMsgId
	}
	return 0
}

func (m *TLMessagesSendMedia114) GetMedia() *InputMedia {
	if m != nil {
		return m.Media
	}
	return nil
}

func (m *TLMessagesSendMedia114) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TLMessagesSendMedia114) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *TLMessagesSendMedia114) GetReplyMarkup() *ReplyMarkup {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

func (m *TLMessagesSendMedia114) GetEntities() []*MessageEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *TLMessagesSendMedia114) GetScheduleDate() int32 {
	if m != nil {
		return m.ScheduleDate
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.forwardMessages#d9fee60e flags:# silent:flags.5?true background:flags.6?true with_my_score:flags.8?true grouped:flags.9?true from_peer:InputPeer id:Vector<int> random_id:Vector<long> to_peer:InputPeer schedule_date:flags.10?int = Updates;
type TLMessagesForwardMessages114 struct {
	Silent       bool       `protobuf:"varint,2,opt,name=silent,proto3" json:"silent,omitempty"`
	Background   bool       `protobuf:"varint,3,opt,name=background,proto3" json:"background,omitempty"`
	WithMyScore  bool       `protobuf:"varint,4,opt,name=with_my_score,json=withMyScore,proto3" json:"with_my_score,omitempty"`
	Grouped      bool       `protobuf:"varint,5,opt,name=grouped,proto3" json:"grouped,omitempty"`
	FromPeer     *InputPeer `protobuf:"bytes,6,opt,name=from_peer,json=fromPeer,proto3" json:"from_peer,omitempty"`
	Id           []int32    `protobuf:"varint,7,rep,packed,name=id,proto3" json:"id,omitempty"`
	RandomId     []int64    `protobuf:"varint,8,rep,packed,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	ToPeer       *InputPeer `protobuf:"bytes,9,opt,name=to_peer,json=toPeer,proto3" json:"to_peer,omitempty"`
	ScheduleDate int32      `protobuf:"varint,10,opt,name=schedule_date,json=scheduleDate,proto3" json:"schedule_date,omitempty"`
}

func (m *TLMessagesForwardMessages114) Reset()         { *m = TLMessagesForwardMessages114{} }
func (m *TLMessagesForwardMessages114) String() string { return proto.CompactTextString(m) }
func (*TLMessagesForwardMessages114) ProtoMessage()    {}
func (*TLMessagesForwardMessages114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{361}
}
func (m *TLMessagesForwardMessages114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesForwardMessages114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesForwardMessages114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesForwardMessages114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesForwardMessages114.Merge(m, src)
}
func (m *TLMessagesForwardMessages114) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesForwardMessages114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesForwardMessages114.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesForwardMessages114 proto.InternalMessageInfo

func (m *TLMessagesForwardMessages114) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *TLMessagesForwardMessages114) GetBackground() bool {
	if m != nil {
		return m.Background
	}
	return false
}

func (m *TLMessagesForwardMessages114) GetWithMyScore() bool {
	if m != nil {
		return m.WithMyScore
	}
	return false
}

func (m *TLMessagesForwardMessages114) GetGrouped() bool {
	if m != nil {
		return m.Grouped
	}
	return false
}

func (m *TLMessagesForwardMessages114) GetFromPeer() *InputPeer {
	if m != nil {
		return m.FromPeer
	}
	return nil
}

func (m *TLMessagesForwardMessages114) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TLMessagesForwardMessages114) GetRandomId() []int64 {
	if m != nil {
		return m.RandomId
	}
	return nil
}

func (m *TLMessagesForwardMessages114) GetToPeer() *InputPeer {
	if m != nil {
		return m.ToPeer
	}
	return nil
}

func (m *TLMessagesForwardMessages114) GetScheduleDate() int32 {
	if m != nil {
		return m.ScheduleDate
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.report#bd82b658 peer:InputPeer id:Vector<int> reason:ReportReason = Bool;
type TLMessagesReport struct {
	Peer   *InputPeer    `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Id     []int32       `protobuf:"varint,2,rep,packed,name=id,proto3" json:"id,omitempty"`
	Reason *ReportReason `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *TLMessagesReport) Reset()         { *m = TLMessagesReport{} }
func (m *TLMessagesReport) String() string { return proto.CompactTextString(m) }
func (*TLMessagesReport) ProtoMessage()    {}
func (*TLMessagesReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{362}
}
func (m *TLMessagesReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesReport.Merge(m, src)
}
func (m *TLMessagesReport) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesReport) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesReport.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesReport proto.InternalMessageInfo

func (m *TLMessagesReport) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesReport) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TLMessagesReport) GetReason() *ReportReason {
	if m != nil {
		return m.Reason
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.getStickers#43d4f2c emoticon:string hash:int = messages.Stickers;
type TLMessagesGetStickers struct {
	Emoticon string `protobuf:"bytes,1,opt,name=emoticon,proto3" json:"emoticon,omitempty"`
	Hash     int32  `protobuf:"varint,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TLMessagesGetStickers) Reset()         { *m = TLMessagesGetStickers{} }
func (m *TLMessagesGetStickers) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetStickers) ProtoMessage()    {}
func (*TLMessagesGetStickers) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{363}
}
func (m *TLMessagesGetStickers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetStickers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetStickers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetStickers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetStickers.Merge(m, src)
}
func (m *TLMessagesGetStickers) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetStickers) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetStickers.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetStickers proto.InternalMessageInfo

func (m *TLMessagesGetStickers) GetEmoticon() string {
	if m != nil {
		return m.Emoticon
	}
	return ""
}

func (m *TLMessagesGetStickers) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.getWebPagePreview#8b68b0cc flags:# message:string entities:flags.3?Vector<MessageEntity> = MessageMedia;
type TLMessagesGetWebPagePreview114 struct {
	Message  string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Entities []*MessageEntity `protobuf:"bytes,3,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (m *TLMessagesGetWebPagePreview114) Reset()         { *m = TLMessagesGetWebPagePreview114{} }
func (m *TLMessagesGetWebPagePreview114) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetWebPagePreview114) ProtoMessage()    {}
func (*TLMessagesGetWebPagePreview114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{364}
}
func (m *TLMessagesGetWebPagePreview114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetWebPagePreview114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetWebPagePreview114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetWebPagePreview114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetWebPagePreview114.Merge(m, src)
}
func (m *TLMessagesGetWebPagePreview114) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetWebPagePreview114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetWebPagePreview114.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetWebPagePreview114 proto.InternalMessageInfo

func (m *TLMessagesGetWebPagePreview114) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TLMessagesGetWebPagePreview114) GetEntities() []*MessageEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.exportChatInvite#df7534c peer:InputPeer = ExportedChatInvite;
type TLMessagesExportChatInvite114 struct {
	Peer *InputPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *TLMessagesExportChatInvite114) Reset()         { *m = TLMessagesExportChatInvite114{} }
func (m *TLMessagesExportChatInvite114) String() string { return proto.CompactTextString(m) }
func (*TLMessagesExportChatInvite114) ProtoMessage()    {}
func (*TLMessagesExportChatInvite114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{365}
}
func (m *TLMessagesExportChatInvite114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesExportChatInvite114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesExportChatInvite114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesExportChatInvite114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesExportChatInvite114.Merge(m, src)
}
func (m *TLMessagesExportChatInvite114) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesExportChatInvite114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesExportChatInvite114.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesExportChatInvite114 proto.InternalMessageInfo

func (m *TLMessagesExportChatInvite114) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.searchGlobal#bf7225a4 flags:# folder_id:flags.0?int q:string offset_rate:int offset_peer:InputPeer offset_id:int limit:int = messages.Messages;
type TLMessagesSearchGlobal114 struct {
	FolderId   int32      `protobuf:"varint,2,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	Q          string     `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	OffsetRate int32      `protobuf:"varint,4,opt,name=offset_rate,json=offsetRate,proto3" json:"offset_rate,omitempty"`
	OffsetPeer *InputPeer `protobuf:"bytes,5,opt,name=offset_peer,json=offsetPeer,proto3" json:"offset_peer,omitempty"`
	OffsetId   int32      `protobuf:"varint,6,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	Limit      int32      `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *TLMessagesSearchGlobal114) Reset()         { *m = TLMessagesSearchGlobal114{} }
func (m *TLMessagesSearchGlobal114) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSearchGlobal114) ProtoMessage()    {}
func (*TLMessagesSearchGlobal114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{366}
}
func (m *TLMessagesSearchGlobal114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSearchGlobal114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSearchGlobal114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSearchGlobal114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSearchGlobal114.Merge(m, src)
}
func (m *TLMessagesSearchGlobal114) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSearchGlobal114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSearchGlobal114.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSearchGlobal114 proto.InternalMessageInfo

func (m *TLMessagesSearchGlobal114) GetFolderId() int32 {
	if m != nil {
		return m.FolderId
	}
	return 0
}

func (m *TLMessagesSearchGlobal114) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

func (m *TLMessagesSearchGlobal114) GetOffsetRate() int32 {
	if m != nil {
		return m.OffsetRate
	}
	return 0
}

func (m *TLMessagesSearchGlobal114) GetOffsetPeer() *InputPeer {
	if m != nil {
		return m.OffsetPeer
	}
	return nil
}

func (m *TLMessagesSearchGlobal114) GetOffsetId() int32 {
	if m != nil {
		return m.OffsetId
	}
	return 0
}

func (m *TLMessagesSearchGlobal114) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.sendInlineBotResult#220815b0 flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true hide_via:flags.11?true peer:InputPeer reply_to_msg_id:flags.0?int random_id:long query_id:long id:string schedule_date:flags.10?int = Updates;
type TLMessagesSendInlineBotResult114 struct {
	Silent       bool       `protobuf:"varint,2,opt,name=silent,proto3" json:"silent,omitempty"`
	Background   bool       `protobuf:"varint,3,opt,name=background,proto3" json:"background,omitempty"`
	ClearDraft   bool       `protobuf:"varint,4,opt,name=clear_draft,json=clearDraft,proto3" json:"clear_draft,omitempty"`
	HideVia      bool       `protobuf:"varint,5,opt,name=hide_via,json=hideVia,proto3" json:"hide_via,omitempty"`
	Peer         *InputPeer `protobuf:"bytes,6,opt,name=peer,proto3" json:"peer,omitempty"`
	ReplyToMsgId int32      `protobuf:"varint,7,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	RandomId     int64      `protobuf:"varint,8,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	QueryId      int64      `protobuf:"varint,9,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
	Id           string     `protobuf:"bytes,10,opt,name=id,proto3" json:"id,omitempty"`
	ScheduleDate int32      `protobuf:"varint,11,opt,name=schedule_date,json=scheduleDate,proto3" json:"schedule_date,omitempty"`
}

func (m *TLMessagesSendInlineBotResult114) Reset()         { *m = TLMessagesSendInlineBotResult114{} }
func (m *TLMessagesSendInlineBotResult114) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSendInlineBotResult114) ProtoMessage()    {}
func (*TLMessagesSendInlineBotResult114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{367}
}
func (m *TLMessagesSendInlineBotResult114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSendInlineBotResult114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSendInlineBotResult114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSendInlineBotResult114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSendInlineBotResult114.Merge(m, src)
}
func (m *TLMessagesSendInlineBotResult114) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSendInlineBotResult114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSendInlineBotResult114.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSendInlineBotResult114 proto.InternalMessageInfo

func (m *TLMessagesSendInlineBotResult114) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *TLMessagesSendInlineBotResult114) GetBackground() bool {
	if m != nil {
		return m.Background
	}
	return false
}

func (m *TLMessagesSendInlineBotResult114) GetClearDraft() bool {
	if m != nil {
		return m.ClearDraft
	}
	return false
}

func (m *TLMessagesSendInlineBotResult114) GetHideVia() bool {
	if m != nil {
		return m.HideVia
	}
	return false
}

func (m *TLMessagesSendInlineBotResult114) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSendInlineBotResult114) GetReplyToMsgId() int32 {
	if m != nil {
		return m.ReplyToMsgId
	}
	return 0
}

func (m *TLMessagesSendInlineBotResult114) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *TLMessagesSendInlineBotResult114) GetQueryId() int64 {
	if m != nil {
		return m.QueryId
	}
	return 0
}

func (m *TLMessagesSendInlineBotResult114) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TLMessagesSendInlineBotResult114) GetScheduleDate() int32 {
	if m != nil {
		return m.ScheduleDate
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.editMessage#48f71778 flags:# no_webpage:flags.1?true peer:InputPeer id:int message:flags.11?string media:flags.14?InputMedia reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.15?int = Updates;
type TLMessagesEditMessage114 struct {
	NoWebpage    bool             `protobuf:"varint,2,opt,name=no_webpage,json=noWebpage,proto3" json:"no_webpage,omitempty"`
	Peer         *InputPeer       `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Id           int32            `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	Message      string           `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	Media        *InputMedia      `protobuf:"bytes,6,opt,name=media,proto3" json:"media,omitempty"`
	ReplyMarkup  *ReplyMarkup     `protobuf:"bytes,7,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
	Entities     []*MessageEntity `protobuf:"bytes,8,rep,name=entities,proto3" json:"entities,omitempty"`
	ScheduleDate int32            `protobuf:"varint,9,opt,name=schedule_date,json=scheduleDate,proto3" json:"schedule_date,omitempty"`
}

func (m *TLMessagesEditMessage114) Reset()         { *m = TLMessagesEditMessage114{} }
func (m *TLMessagesEditMessage114) String() string { return proto.CompactTextString(m) }
func (*TLMessagesEditMessage114) ProtoMessage()    {}
func (*TLMessagesEditMessage114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{368}
}
func (m *TLMessagesEditMessage114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesEditMessage114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesEditMessage114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesEditMessage114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesEditMessage114.Merge(m, src)
}
func (m *TLMessagesEditMessage114) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesEditMessage114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesEditMessage114.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesEditMessage114 proto.InternalMessageInfo

func (m *TLMessagesEditMessage114) GetNoWebpage() bool {
	if m != nil {
		return m.NoWebpage
	}
	return false
}

func (m *TLMessagesEditMessage114) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesEditMessage114) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TLMessagesEditMessage114) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TLMessagesEditMessage114) GetMedia() *InputMedia {
	if m != nil {
		return m.Media
	}
	return nil
}

func (m *TLMessagesEditMessage114) GetReplyMarkup() *ReplyMarkup {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

func (m *TLMessagesEditMessage114) GetEntities() []*MessageEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *TLMessagesEditMessage114) GetScheduleDate() int32 {
	if m != nil {
		return m.ScheduleDate
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.editInlineBotMessage#83557dba flags:# no_webpage:flags.1?true id:InputBotInlineMessageID message:flags.11?string media:flags.14?InputMedia reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Bool;
type TLMessagesEditInlineBotMessage114 struct {
	NoWebpage   bool                     `protobuf:"varint,2,opt,name=no_webpage,json=noWebpage,proto3" json:"no_webpage,omitempty"`
	Id          *InputBotInlineMessageID `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Message     string                   `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	Media       *InputMedia              `protobuf:"bytes,5,opt,name=media,proto3" json:"media,omitempty"`
	ReplyMarkup *ReplyMarkup             `protobuf:"bytes,6,opt,name=reply_markup,json=replyMarkup,proto3" json:"reply_markup,omitempty"`
	Entities    []*MessageEntity         `protobuf:"bytes,7,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (m *TLMessagesEditInlineBotMessage114) Reset()         { *m = TLMessagesEditInlineBotMessage114{} }
func (m *TLMessagesEditInlineBotMessage114) String() string { return proto.CompactTextString(m) }
func (*TLMessagesEditInlineBotMessage114) ProtoMessage()    {}
func (*TLMessagesEditInlineBotMessage114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{369}
}
func (m *TLMessagesEditInlineBotMessage114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesEditInlineBotMessage114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesEditInlineBotMessage114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesEditInlineBotMessage114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesEditInlineBotMessage114.Merge(m, src)
}
func (m *TLMessagesEditInlineBotMessage114) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesEditInlineBotMessage114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesEditInlineBotMessage114.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesEditInlineBotMessage114 proto.InternalMessageInfo

func (m *TLMessagesEditInlineBotMessage114) GetNoWebpage() bool {
	if m != nil {
		return m.NoWebpage
	}
	return false
}

func (m *TLMessagesEditInlineBotMessage114) GetId() *InputBotInlineMessageID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *TLMessagesEditInlineBotMessage114) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TLMessagesEditInlineBotMessage114) GetMedia() *InputMedia {
	if m != nil {
		return m.Media
	}
	return nil
}

func (m *TLMessagesEditInlineBotMessage114) GetReplyMarkup() *ReplyMarkup {
	if m != nil {
		return m.ReplyMarkup
	}
	return nil
}

func (m *TLMessagesEditInlineBotMessage114) GetEntities() []*MessageEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.toggleDialogPin#a731e257 flags:# pinned:flags.0?true peer:InputDialogPeer = Bool;
type TLMessagesToggleDialogPin114 struct {
	Pinned bool             `protobuf:"varint,2,opt,name=pinned,proto3" json:"pinned,omitempty"`
	Peer   *InputDialogPeer `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *TLMessagesToggleDialogPin114) Reset()         { *m = TLMessagesToggleDialogPin114{} }
func (m *TLMessagesToggleDialogPin114) String() string { return proto.CompactTextString(m) }
func (*TLMessagesToggleDialogPin114) ProtoMessage()    {}
func (*TLMessagesToggleDialogPin114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{370}
}
func (m *TLMessagesToggleDialogPin114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesToggleDialogPin114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesToggleDialogPin114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesToggleDialogPin114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesToggleDialogPin114.Merge(m, src)
}
func (m *TLMessagesToggleDialogPin114) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesToggleDialogPin114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesToggleDialogPin114.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesToggleDialogPin114 proto.InternalMessageInfo

func (m *TLMessagesToggleDialogPin114) GetPinned() bool {
	if m != nil {
		return m.Pinned
	}
	return false
}

func (m *TLMessagesToggleDialogPin114) GetPeer() *InputDialogPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.reorderPinnedDialogs#3b1adf37 flags:# force:flags.0?true folder_id:int order:Vector<InputDialogPeer> = Bool;
type TLMessagesReorderPinnedDialogs114 struct {
	Force    bool               `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	FolderId int32              `protobuf:"varint,3,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	Order    []*InputDialogPeer `protobuf:"bytes,4,rep,name=order,proto3" json:"order,omitempty"`
}

func (m *TLMessagesReorderPinnedDialogs114) Reset()         { *m = TLMessagesReorderPinnedDialogs114{} }
func (m *TLMessagesReorderPinnedDialogs114) String() string { return proto.CompactTextString(m) }
func (*TLMessagesReorderPinnedDialogs114) ProtoMessage()    {}
func (*TLMessagesReorderPinnedDialogs114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{371}
}
func (m *TLMessagesReorderPinnedDialogs114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesReorderPinnedDialogs114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesReorderPinnedDialogs114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesReorderPinnedDialogs114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesReorderPinnedDialogs114.Merge(m, src)
}
func (m *TLMessagesReorderPinnedDialogs114) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesReorderPinnedDialogs114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesReorderPinnedDialogs114.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesReorderPinnedDialogs114 proto.InternalMessageInfo

func (m *TLMessagesReorderPinnedDialogs114) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

func (m *TLMessagesReorderPinnedDialogs114) GetFolderId() int32 {
	if m != nil {
		return m.FolderId
	}
	return 0
}

func (m *TLMessagesReorderPinnedDialogs114) GetOrder() []*InputDialogPeer {
	if m != nil {
		return m.Order
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.getPinnedDialogs#d6b94df2 folder_id:int = messages.PeerDialogs;
type TLMessagesGetPinnedDialogs114 struct {
	FolderId int32 `protobuf:"varint,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
}

func (m *TLMessagesGetPinnedDialogs114) Reset()         { *m = TLMessagesGetPinnedDialogs114{} }
func (m *TLMessagesGetPinnedDialogs114) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetPinnedDialogs114) ProtoMessage()    {}
func (*TLMessagesGetPinnedDialogs114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{372}
}
func (m *TLMessagesGetPinnedDialogs114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetPinnedDialogs114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetPinnedDialogs114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetPinnedDialogs114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetPinnedDialogs114.Merge(m, src)
}
func (m *TLMessagesGetPinnedDialogs114) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetPinnedDialogs114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetPinnedDialogs114.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetPinnedDialogs114 proto.InternalMessageInfo

func (m *TLMessagesGetPinnedDialogs114) GetFolderId() int32 {
	if m != nil {
		return m.FolderId
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.getRecentLocations#bbc45b09 peer:InputPeer limit:int hash:int = messages.Messages;
type TLMessagesGetRecentLocations114 struct {
	Peer  *InputPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Limit int32      `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Hash  int32      `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TLMessagesGetRecentLocations114) Reset()         { *m = TLMessagesGetRecentLocations114{} }
func (m *TLMessagesGetRecentLocations114) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetRecentLocations114) ProtoMessage()    {}
func (*TLMessagesGetRecentLocations114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{373}
}
func (m *TLMessagesGetRecentLocations114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetRecentLocations114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetRecentLocations114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetRecentLocations114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetRecentLocations114.Merge(m, src)
}
func (m *TLMessagesGetRecentLocations114) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetRecentLocations114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetRecentLocations114.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetRecentLocations114 proto.InternalMessageInfo

func (m *TLMessagesGetRecentLocations114) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesGetRecentLocations114) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *TLMessagesGetRecentLocations114) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.sendMultiMedia#cc0110cb flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int multi_media:Vector<InputSingleMedia> schedule_date:flags.10?int = Updates;
type TLMessagesSendMultiMedia114 struct {
	Silent       bool                `protobuf:"varint,2,opt,name=silent,proto3" json:"silent,omitempty"`
	Background   bool                `protobuf:"varint,3,opt,name=background,proto3" json:"background,omitempty"`
	ClearDraft   bool                `protobuf:"varint,4,opt,name=clear_draft,json=clearDraft,proto3" json:"clear_draft,omitempty"`
	Peer         *InputPeer          `protobuf:"bytes,5,opt,name=peer,proto3" json:"peer,omitempty"`
	ReplyToMsgId int32               `protobuf:"varint,6,opt,name=reply_to_msg_id,json=replyToMsgId,proto3" json:"reply_to_msg_id,omitempty"`
	MultiMedia   []*InputSingleMedia `protobuf:"bytes,7,rep,name=multi_media,json=multiMedia,proto3" json:"multi_media,omitempty"`
	ScheduleDate int32               `protobuf:"varint,8,opt,name=schedule_date,json=scheduleDate,proto3" json:"schedule_date,omitempty"`
}

func (m *TLMessagesSendMultiMedia114) Reset()         { *m = TLMessagesSendMultiMedia114{} }
func (m *TLMessagesSendMultiMedia114) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSendMultiMedia114) ProtoMessage()    {}
func (*TLMessagesSendMultiMedia114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{374}
}
func (m *TLMessagesSendMultiMedia114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSendMultiMedia114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSendMultiMedia114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSendMultiMedia114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSendMultiMedia114.Merge(m, src)
}
func (m *TLMessagesSendMultiMedia114) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSendMultiMedia114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSendMultiMedia114.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSendMultiMedia114 proto.InternalMessageInfo

func (m *TLMessagesSendMultiMedia114) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *TLMessagesSendMultiMedia114) GetBackground() bool {
	if m != nil {
		return m.Background
	}
	return false
}

func (m *TLMessagesSendMultiMedia114) GetClearDraft() bool {
	if m != nil {
		return m.ClearDraft
	}
	return false
}

func (m *TLMessagesSendMultiMedia114) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSendMultiMedia114) GetReplyToMsgId() int32 {
	if m != nil {
		return m.ReplyToMsgId
	}
	return 0
}

func (m *TLMessagesSendMultiMedia114) GetMultiMedia() []*InputSingleMedia {
	if m != nil {
		return m.MultiMedia
	}
	return nil
}

func (m *TLMessagesSendMultiMedia114) GetScheduleDate() int32 {
	if m != nil {
		return m.ScheduleDate
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.searchStickerSets#c2b7d08b flags:# exclude_featured:flags.0?true q:string hash:int = messages.FoundStickerSets;
type TLMessagesSearchStickerSets struct {
	ExcludeFeatured bool   `protobuf:"varint,2,opt,name=exclude_featured,json=excludeFeatured,proto3" json:"exclude_featured,omitempty"`
	Q               string `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	Hash            int32  `protobuf:"varint,4,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TLMessagesSearchStickerSets) Reset()         { *m = TLMessagesSearchStickerSets{} }
func (m *TLMessagesSearchStickerSets) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSearchStickerSets) ProtoMessage()    {}
func (*TLMessagesSearchStickerSets) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{375}
}
func (m *TLMessagesSearchStickerSets) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSearchStickerSets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSearchStickerSets.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSearchStickerSets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSearchStickerSets.Merge(m, src)
}
func (m *TLMessagesSearchStickerSets) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSearchStickerSets) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSearchStickerSets.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSearchStickerSets proto.InternalMessageInfo

func (m *TLMessagesSearchStickerSets) GetExcludeFeatured() bool {
	if m != nil {
		return m.ExcludeFeatured
	}
	return false
}

func (m *TLMessagesSearchStickerSets) GetQ() string {
	if m != nil {
		return m.Q
	}
	return ""
}

func (m *TLMessagesSearchStickerSets) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.getSplitRanges#1cff7e08 = Vector<MessageRange>;
type TLMessagesGetSplitRanges struct {
}

func (m *TLMessagesGetSplitRanges) Reset()         { *m = TLMessagesGetSplitRanges{} }
func (m *TLMessagesGetSplitRanges) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetSplitRanges) ProtoMessage()    {}
func (*TLMessagesGetSplitRanges) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{376}
}
func (m *TLMessagesGetSplitRanges) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetSplitRanges) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetSplitRanges.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetSplitRanges) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetSplitRanges.Merge(m, src)
}
func (m *TLMessagesGetSplitRanges) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetSplitRanges) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetSplitRanges.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetSplitRanges proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// messages.markDialogUnread#c286d98f flags:# unread:flags.0?true peer:InputDialogPeer = Bool;
type TLMessagesMarkDialogUnread struct {
	Unread bool             `protobuf:"varint,2,opt,name=unread,proto3" json:"unread,omitempty"`
	Peer   *InputDialogPeer `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *TLMessagesMarkDialogUnread) Reset()         { *m = TLMessagesMarkDialogUnread{} }
func (m *TLMessagesMarkDialogUnread) String() string { return proto.CompactTextString(m) }
func (*TLMessagesMarkDialogUnread) ProtoMessage()    {}
func (*TLMessagesMarkDialogUnread) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{377}
}
func (m *TLMessagesMarkDialogUnread) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesMarkDialogUnread) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesMarkDialogUnread.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesMarkDialogUnread) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesMarkDialogUnread.Merge(m, src)
}
func (m *TLMessagesMarkDialogUnread) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesMarkDialogUnread) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesMarkDialogUnread.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesMarkDialogUnread proto.InternalMessageInfo

func (m *TLMessagesMarkDialogUnread) GetUnread() bool {
	if m != nil {
		return m.Unread
	}
	return false
}

func (m *TLMessagesMarkDialogUnread) GetPeer() *InputDialogPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.getDialogUnreadMarks#22e24e22 = Vector<DialogPeer>;
type TLMessagesGetDialogUnreadMarks struct {
}

func (m *TLMessagesGetDialogUnreadMarks) Reset()         { *m = TLMessagesGetDialogUnreadMarks{} }
func (m *TLMessagesGetDialogUnreadMarks) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetDialogUnreadMarks) ProtoMessage()    {}
func (*TLMessagesGetDialogUnreadMarks) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{378}
}
func (m *TLMessagesGetDialogUnreadMarks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetDialogUnreadMarks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetDialogUnreadMarks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetDialogUnreadMarks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetDialogUnreadMarks.Merge(m, src)
}
func (m *TLMessagesGetDialogUnreadMarks) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetDialogUnreadMarks) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetDialogUnreadMarks.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetDialogUnreadMarks proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// messages.clearAllDrafts#7e58ee9c = Bool;
type TLMessagesClearAllDrafts struct {
}

func (m *TLMessagesClearAllDrafts) Reset()         { *m = TLMessagesClearAllDrafts{} }
func (m *TLMessagesClearAllDrafts) String() string { return proto.CompactTextString(m) }
func (*TLMessagesClearAllDrafts) ProtoMessage()    {}
func (*TLMessagesClearAllDrafts) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{379}
}
func (m *TLMessagesClearAllDrafts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesClearAllDrafts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesClearAllDrafts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesClearAllDrafts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesClearAllDrafts.Merge(m, src)
}
func (m *TLMessagesClearAllDrafts) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesClearAllDrafts) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesClearAllDrafts.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesClearAllDrafts proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// messages.updatePinnedMessage#d2aaf7ec flags:# silent:flags.0?true unpin:flags.1?true pm_oneside:flags.2?true peer:InputPeer id:int = Updates;
type TLMessagesUpdatePinnedMessage struct {
	Silent    bool       `protobuf:"varint,2,opt,name=silent,proto3" json:"silent,omitempty"`
	Unpin     bool       `protobuf:"varint,3,opt,name=unpin,proto3" json:"unpin,omitempty"`
	PmOneside bool       `protobuf:"varint,4,opt,name=pm_oneside,json=pmOneside,proto3" json:"pm_oneside,omitempty"`
	Peer      *InputPeer `protobuf:"bytes,5,opt,name=peer,proto3" json:"peer,omitempty"`
	Id        int32      `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *TLMessagesUpdatePinnedMessage) Reset()         { *m = TLMessagesUpdatePinnedMessage{} }
func (m *TLMessagesUpdatePinnedMessage) String() string { return proto.CompactTextString(m) }
func (*TLMessagesUpdatePinnedMessage) ProtoMessage()    {}
func (*TLMessagesUpdatePinnedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{380}
}
func (m *TLMessagesUpdatePinnedMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesUpdatePinnedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesUpdatePinnedMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesUpdatePinnedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesUpdatePinnedMessage.Merge(m, src)
}
func (m *TLMessagesUpdatePinnedMessage) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesUpdatePinnedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesUpdatePinnedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesUpdatePinnedMessage proto.InternalMessageInfo

func (m *TLMessagesUpdatePinnedMessage) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *TLMessagesUpdatePinnedMessage) GetUnpin() bool {
	if m != nil {
		return m.Unpin
	}
	return false
}

func (m *TLMessagesUpdatePinnedMessage) GetPmOneside() bool {
	if m != nil {
		return m.PmOneside
	}
	return false
}

func (m *TLMessagesUpdatePinnedMessage) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesUpdatePinnedMessage) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.sendVote#10ea6184 peer:InputPeer msg_id:int options:Vector<bytes> = Updates;
type TLMessagesSendVote struct {
	Peer    *InputPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId   int32      `protobuf:"varint,2,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	Options [][]byte   `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`
}

func (m *TLMessagesSendVote) Reset()         { *m = TLMessagesSendVote{} }
func (m *TLMessagesSendVote) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSendVote) ProtoMessage()    {}
func (*TLMessagesSendVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{381}
}
func (m *TLMessagesSendVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSendVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSendVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSendVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSendVote.Merge(m, src)
}
func (m *TLMessagesSendVote) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSendVote) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSendVote.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSendVote proto.InternalMessageInfo

func (m *TLMessagesSendVote) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSendVote) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *TLMessagesSendVote) GetOptions() [][]byte {
	if m != nil {
		return m.Options
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.getPollResults#73bb643b peer:InputPeer msg_id:int = Updates;
type TLMessagesGetPollResults struct {
	Peer  *InputPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId int32      `protobuf:"varint,2,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
}

func (m *TLMessagesGetPollResults) Reset()         { *m = TLMessagesGetPollResults{} }
func (m *TLMessagesGetPollResults) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetPollResults) ProtoMessage()    {}
func (*TLMessagesGetPollResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{382}
}
func (m *TLMessagesGetPollResults) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetPollResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetPollResults.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetPollResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetPollResults.Merge(m, src)
}
func (m *TLMessagesGetPollResults) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetPollResults) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetPollResults.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetPollResults proto.InternalMessageInfo

func (m *TLMessagesGetPollResults) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesGetPollResults) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.getOnlines#6e2be050 peer:InputPeer = ChatOnlines;
type TLMessagesGetOnlines struct {
	Peer *InputPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *TLMessagesGetOnlines) Reset()         { *m = TLMessagesGetOnlines{} }
func (m *TLMessagesGetOnlines) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetOnlines) ProtoMessage()    {}
func (*TLMessagesGetOnlines) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{383}
}
func (m *TLMessagesGetOnlines) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetOnlines) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetOnlines.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetOnlines) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetOnlines.Merge(m, src)
}
func (m *TLMessagesGetOnlines) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetOnlines) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetOnlines.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetOnlines proto.InternalMessageInfo

func (m *TLMessagesGetOnlines) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.getStatsURL#812c2ae6 flags:# dark:flags.0?true peer:InputPeer params:string = StatsURL;
type TLMessagesGetStatsURL struct {
	Dark   bool       `protobuf:"varint,2,opt,name=dark,proto3" json:"dark,omitempty"`
	Peer   *InputPeer `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Params string     `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *TLMessagesGetStatsURL) Reset()         { *m = TLMessagesGetStatsURL{} }
func (m *TLMessagesGetStatsURL) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetStatsURL) ProtoMessage()    {}
func (*TLMessagesGetStatsURL) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{384}
}
func (m *TLMessagesGetStatsURL) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetStatsURL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetStatsURL.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetStatsURL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetStatsURL.Merge(m, src)
}
func (m *TLMessagesGetStatsURL) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetStatsURL) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetStatsURL.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetStatsURL proto.InternalMessageInfo

func (m *TLMessagesGetStatsURL) GetDark() bool {
	if m != nil {
		return m.Dark
	}
	return false
}

func (m *TLMessagesGetStatsURL) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesGetStatsURL) GetParams() string {
	if m != nil {
		return m.Params
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// messages.editChatAbout#def60797 peer:InputPeer about:string = Bool;
type TLMessagesEditChatAbout struct {
	Peer  *InputPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	About string     `protobuf:"bytes,2,opt,name=about,proto3" json:"about,omitempty"`
}

func (m *TLMessagesEditChatAbout) Reset()         { *m = TLMessagesEditChatAbout{} }
func (m *TLMessagesEditChatAbout) String() string { return proto.CompactTextString(m) }
func (*TLMessagesEditChatAbout) ProtoMessage()    {}
func (*TLMessagesEditChatAbout) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{385}
}
func (m *TLMessagesEditChatAbout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesEditChatAbout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesEditChatAbout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesEditChatAbout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesEditChatAbout.Merge(m, src)
}
func (m *TLMessagesEditChatAbout) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesEditChatAbout) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesEditChatAbout.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesEditChatAbout proto.InternalMessageInfo

func (m *TLMessagesEditChatAbout) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesEditChatAbout) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// messages.editChatDefaultBannedRights#a5866b41 peer:InputPeer banned_rights:ChatBannedRights = Updates;
type TLMessagesEditChatDefaultBannedRights struct {
	Peer         *InputPeer        `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	BannedRights *ChatBannedRights `protobuf:"bytes,2,opt,name=banned_rights,json=bannedRights,proto3" json:"banned_rights,omitempty"`
}

func (m *TLMessagesEditChatDefaultBannedRights) Reset()         { *m = TLMessagesEditChatDefaultBannedRights{} }
func (m *TLMessagesEditChatDefaultBannedRights) String() string { return proto.CompactTextString(m) }
func (*TLMessagesEditChatDefaultBannedRights) ProtoMessage()    {}
func (*TLMessagesEditChatDefaultBannedRights) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{386}
}
func (m *TLMessagesEditChatDefaultBannedRights) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesEditChatDefaultBannedRights) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesEditChatDefaultBannedRights.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesEditChatDefaultBannedRights) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesEditChatDefaultBannedRights.Merge(m, src)
}
func (m *TLMessagesEditChatDefaultBannedRights) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesEditChatDefaultBannedRights) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesEditChatDefaultBannedRights.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesEditChatDefaultBannedRights proto.InternalMessageInfo

func (m *TLMessagesEditChatDefaultBannedRights) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesEditChatDefaultBannedRights) GetBannedRights() *ChatBannedRights {
	if m != nil {
		return m.BannedRights
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.getEmojiKeywords#35a0e062 lang_code:string = EmojiKeywordsDifference;
type TLMessagesGetEmojiKeywords struct {
	LangCode string `protobuf:"bytes,1,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
}

func (m *TLMessagesGetEmojiKeywords) Reset()         { *m = TLMessagesGetEmojiKeywords{} }
func (m *TLMessagesGetEmojiKeywords) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetEmojiKeywords) ProtoMessage()    {}
func (*TLMessagesGetEmojiKeywords) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{387}
}
func (m *TLMessagesGetEmojiKeywords) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetEmojiKeywords) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetEmojiKeywords.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetEmojiKeywords) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetEmojiKeywords.Merge(m, src)
}
func (m *TLMessagesGetEmojiKeywords) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetEmojiKeywords) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetEmojiKeywords.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetEmojiKeywords proto.InternalMessageInfo

func (m *TLMessagesGetEmojiKeywords) GetLangCode() string {
	if m != nil {
		return m.LangCode
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// messages.getEmojiKeywordsDifference#1508b6af lang_code:string from_version:int = EmojiKeywordsDifference;
type TLMessagesGetEmojiKeywordsDifference struct {
	LangCode    string `protobuf:"bytes,1,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	FromVersion int32  `protobuf:"varint,2,opt,name=from_version,json=fromVersion,proto3" json:"from_version,omitempty"`
}

func (m *TLMessagesGetEmojiKeywordsDifference) Reset()         { *m = TLMessagesGetEmojiKeywordsDifference{} }
func (m *TLMessagesGetEmojiKeywordsDifference) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetEmojiKeywordsDifference) ProtoMessage()    {}
func (*TLMessagesGetEmojiKeywordsDifference) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{388}
}
func (m *TLMessagesGetEmojiKeywordsDifference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetEmojiKeywordsDifference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetEmojiKeywordsDifference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetEmojiKeywordsDifference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetEmojiKeywordsDifference.Merge(m, src)
}
func (m *TLMessagesGetEmojiKeywordsDifference) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetEmojiKeywordsDifference) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetEmojiKeywordsDifference.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetEmojiKeywordsDifference proto.InternalMessageInfo

func (m *TLMessagesGetEmojiKeywordsDifference) GetLangCode() string {
	if m != nil {
		return m.LangCode
	}
	return ""
}

func (m *TLMessagesGetEmojiKeywordsDifference) GetFromVersion() int32 {
	if m != nil {
		return m.FromVersion
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.getEmojiKeywordsLanguages#4e9963b2 lang_codes:Vector<string> = Vector<EmojiLanguage>;
type TLMessagesGetEmojiKeywordsLanguages struct {
	LangCodes []string `protobuf:"bytes,1,rep,name=lang_codes,json=langCodes,proto3" json:"lang_codes,omitempty"`
}

func (m *TLMessagesGetEmojiKeywordsLanguages) Reset()         { *m = TLMessagesGetEmojiKeywordsLanguages{} }
func (m *TLMessagesGetEmojiKeywordsLanguages) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetEmojiKeywordsLanguages) ProtoMessage()    {}
func (*TLMessagesGetEmojiKeywordsLanguages) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{389}
}
func (m *TLMessagesGetEmojiKeywordsLanguages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetEmojiKeywordsLanguages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetEmojiKeywordsLanguages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetEmojiKeywordsLanguages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetEmojiKeywordsLanguages.Merge(m, src)
}
func (m *TLMessagesGetEmojiKeywordsLanguages) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetEmojiKeywordsLanguages) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetEmojiKeywordsLanguages.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetEmojiKeywordsLanguages proto.InternalMessageInfo

func (m *TLMessagesGetEmojiKeywordsLanguages) GetLangCodes() []string {
	if m != nil {
		return m.LangCodes
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.getEmojiURL#d5b10c26 lang_code:string = EmojiURL;
type TLMessagesGetEmojiURL struct {
	LangCode string `protobuf:"bytes,1,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
}

func (m *TLMessagesGetEmojiURL) Reset()         { *m = TLMessagesGetEmojiURL{} }
func (m *TLMessagesGetEmojiURL) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetEmojiURL) ProtoMessage()    {}
func (*TLMessagesGetEmojiURL) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{390}
}
func (m *TLMessagesGetEmojiURL) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetEmojiURL) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetEmojiURL.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetEmojiURL) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetEmojiURL.Merge(m, src)
}
func (m *TLMessagesGetEmojiURL) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetEmojiURL) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetEmojiURL.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetEmojiURL proto.InternalMessageInfo

func (m *TLMessagesGetEmojiURL) GetLangCode() string {
	if m != nil {
		return m.LangCode
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// messages.getSearchCounters#732eef00 peer:InputPeer filters:Vector<MessagesFilter> = Vector<messages.SearchCounter>;
type TLMessagesGetSearchCounters struct {
	Peer    *InputPeer        `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Filters []*MessagesFilter `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (m *TLMessagesGetSearchCounters) Reset()         { *m = TLMessagesGetSearchCounters{} }
func (m *TLMessagesGetSearchCounters) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetSearchCounters) ProtoMessage()    {}
func (*TLMessagesGetSearchCounters) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{391}
}
func (m *TLMessagesGetSearchCounters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetSearchCounters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetSearchCounters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetSearchCounters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetSearchCounters.Merge(m, src)
}
func (m *TLMessagesGetSearchCounters) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetSearchCounters) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetSearchCounters.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetSearchCounters proto.InternalMessageInfo

func (m *TLMessagesGetSearchCounters) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesGetSearchCounters) GetFilters() []*MessagesFilter {
	if m != nil {
		return m.Filters
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.requestUrlAuth#e33f5613 peer:InputPeer msg_id:int button_id:int = UrlAuthResult;
type TLMessagesRequestUrlAuth struct {
	Peer     *InputPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId    int32      `protobuf:"varint,2,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	ButtonId int32      `protobuf:"varint,3,opt,name=button_id,json=buttonId,proto3" json:"button_id,omitempty"`
}

func (m *TLMessagesRequestUrlAuth) Reset()         { *m = TLMessagesRequestUrlAuth{} }
func (m *TLMessagesRequestUrlAuth) String() string { return proto.CompactTextString(m) }
func (*TLMessagesRequestUrlAuth) ProtoMessage()    {}
func (*TLMessagesRequestUrlAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{392}
}
func (m *TLMessagesRequestUrlAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesRequestUrlAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesRequestUrlAuth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesRequestUrlAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesRequestUrlAuth.Merge(m, src)
}
func (m *TLMessagesRequestUrlAuth) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesRequestUrlAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesRequestUrlAuth.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesRequestUrlAuth proto.InternalMessageInfo

func (m *TLMessagesRequestUrlAuth) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesRequestUrlAuth) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *TLMessagesRequestUrlAuth) GetButtonId() int32 {
	if m != nil {
		return m.ButtonId
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.acceptUrlAuth#f729ea98 flags:# write_allowed:flags.0?true peer:InputPeer msg_id:int button_id:int = UrlAuthResult;
type TLMessagesAcceptUrlAuth struct {
	WriteAllowed bool       `protobuf:"varint,2,opt,name=write_allowed,json=writeAllowed,proto3" json:"write_allowed,omitempty"`
	Peer         *InputPeer `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId        int32      `protobuf:"varint,4,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	ButtonId     int32      `protobuf:"varint,5,opt,name=button_id,json=buttonId,proto3" json:"button_id,omitempty"`
}

func (m *TLMessagesAcceptUrlAuth) Reset()         { *m = TLMessagesAcceptUrlAuth{} }
func (m *TLMessagesAcceptUrlAuth) String() string { return proto.CompactTextString(m) }
func (*TLMessagesAcceptUrlAuth) ProtoMessage()    {}
func (*TLMessagesAcceptUrlAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{393}
}
func (m *TLMessagesAcceptUrlAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesAcceptUrlAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesAcceptUrlAuth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesAcceptUrlAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesAcceptUrlAuth.Merge(m, src)
}
func (m *TLMessagesAcceptUrlAuth) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesAcceptUrlAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesAcceptUrlAuth.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesAcceptUrlAuth proto.InternalMessageInfo

func (m *TLMessagesAcceptUrlAuth) GetWriteAllowed() bool {
	if m != nil {
		return m.WriteAllowed
	}
	return false
}

func (m *TLMessagesAcceptUrlAuth) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesAcceptUrlAuth) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *TLMessagesAcceptUrlAuth) GetButtonId() int32 {
	if m != nil {
		return m.ButtonId
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.hidePeerSettingsBar#4facb138 peer:InputPeer = Bool;
type TLMessagesHidePeerSettingsBar struct {
	Peer *InputPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *TLMessagesHidePeerSettingsBar) Reset()         { *m = TLMessagesHidePeerSettingsBar{} }
func (m *TLMessagesHidePeerSettingsBar) String() string { return proto.CompactTextString(m) }
func (*TLMessagesHidePeerSettingsBar) ProtoMessage()    {}
func (*TLMessagesHidePeerSettingsBar) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{394}
}
func (m *TLMessagesHidePeerSettingsBar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesHidePeerSettingsBar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesHidePeerSettingsBar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesHidePeerSettingsBar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesHidePeerSettingsBar.Merge(m, src)
}
func (m *TLMessagesHidePeerSettingsBar) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesHidePeerSettingsBar) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesHidePeerSettingsBar.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesHidePeerSettingsBar proto.InternalMessageInfo

func (m *TLMessagesHidePeerSettingsBar) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.getScheduledHistory#e2c2685b peer:InputPeer hash:int = messages.Messages;
type TLMessagesGetScheduledHistory struct {
	Peer *InputPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Hash int32      `protobuf:"varint,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TLMessagesGetScheduledHistory) Reset()         { *m = TLMessagesGetScheduledHistory{} }
func (m *TLMessagesGetScheduledHistory) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetScheduledHistory) ProtoMessage()    {}
func (*TLMessagesGetScheduledHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{395}
}
func (m *TLMessagesGetScheduledHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetScheduledHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetScheduledHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetScheduledHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetScheduledHistory.Merge(m, src)
}
func (m *TLMessagesGetScheduledHistory) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetScheduledHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetScheduledHistory.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetScheduledHistory proto.InternalMessageInfo

func (m *TLMessagesGetScheduledHistory) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesGetScheduledHistory) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.getScheduledMessages#bdbb0464 peer:InputPeer id:Vector<int> = messages.Messages;
type TLMessagesGetScheduledMessages struct {
	Peer *InputPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Id   []int32    `protobuf:"varint,2,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (m *TLMessagesGetScheduledMessages) Reset()         { *m = TLMessagesGetScheduledMessages{} }
func (m *TLMessagesGetScheduledMessages) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetScheduledMessages) ProtoMessage()    {}
func (*TLMessagesGetScheduledMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{396}
}
func (m *TLMessagesGetScheduledMessages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetScheduledMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetScheduledMessages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetScheduledMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetScheduledMessages.Merge(m, src)
}
func (m *TLMessagesGetScheduledMessages) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetScheduledMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetScheduledMessages.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetScheduledMessages proto.InternalMessageInfo

func (m *TLMessagesGetScheduledMessages) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesGetScheduledMessages) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.sendScheduledMessages#bd38850a peer:InputPeer id:Vector<int> = Updates;
type TLMessagesSendScheduledMessages struct {
	Peer *InputPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Id   []int32    `protobuf:"varint,2,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (m *TLMessagesSendScheduledMessages) Reset()         { *m = TLMessagesSendScheduledMessages{} }
func (m *TLMessagesSendScheduledMessages) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSendScheduledMessages) ProtoMessage()    {}
func (*TLMessagesSendScheduledMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{397}
}
func (m *TLMessagesSendScheduledMessages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSendScheduledMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSendScheduledMessages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSendScheduledMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSendScheduledMessages.Merge(m, src)
}
func (m *TLMessagesSendScheduledMessages) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSendScheduledMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSendScheduledMessages.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSendScheduledMessages proto.InternalMessageInfo

func (m *TLMessagesSendScheduledMessages) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSendScheduledMessages) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.deleteScheduledMessages#59ae2b16 peer:InputPeer id:Vector<int> = Updates;
type TLMessagesDeleteScheduledMessages struct {
	Peer *InputPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Id   []int32    `protobuf:"varint,2,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (m *TLMessagesDeleteScheduledMessages) Reset()         { *m = TLMessagesDeleteScheduledMessages{} }
func (m *TLMessagesDeleteScheduledMessages) String() string { return proto.CompactTextString(m) }
func (*TLMessagesDeleteScheduledMessages) ProtoMessage()    {}
func (*TLMessagesDeleteScheduledMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{398}
}
func (m *TLMessagesDeleteScheduledMessages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesDeleteScheduledMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesDeleteScheduledMessages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesDeleteScheduledMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesDeleteScheduledMessages.Merge(m, src)
}
func (m *TLMessagesDeleteScheduledMessages) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesDeleteScheduledMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesDeleteScheduledMessages.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesDeleteScheduledMessages proto.InternalMessageInfo

func (m *TLMessagesDeleteScheduledMessages) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesDeleteScheduledMessages) GetId() []int32 {
	if m != nil {
		return m.Id
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.getPollVotes#b86e380e flags:# peer:InputPeer id:int option:flags.0?bytes offset:flags.1?string limit:int = messages.VotesList;
type TLMessagesGetPollVotes struct {
	Peer   *InputPeer `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
	Id     int32      `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Option []byte     `protobuf:"bytes,4,opt,name=option,proto3" json:"option,omitempty"`
	Offset string     `protobuf:"bytes,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int32      `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *TLMessagesGetPollVotes) Reset()         { *m = TLMessagesGetPollVotes{} }
func (m *TLMessagesGetPollVotes) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetPollVotes) ProtoMessage()    {}
func (*TLMessagesGetPollVotes) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{399}
}
func (m *TLMessagesGetPollVotes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetPollVotes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetPollVotes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetPollVotes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetPollVotes.Merge(m, src)
}
func (m *TLMessagesGetPollVotes) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetPollVotes) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetPollVotes.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetPollVotes proto.InternalMessageInfo

func (m *TLMessagesGetPollVotes) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesGetPollVotes) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TLMessagesGetPollVotes) GetOption() []byte {
	if m != nil {
		return m.Option
	}
	return nil
}

func (m *TLMessagesGetPollVotes) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

func (m *TLMessagesGetPollVotes) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.toggleStickerSets#b5052fea flags:# uninstall:flags.0?true archive:flags.1?true unarchive:flags.2?true stickersets:Vector<InputStickerSet> = Bool;
type TLMessagesToggleStickerSets struct {
	Uninstall   bool               `protobuf:"varint,2,opt,name=uninstall,proto3" json:"uninstall,omitempty"`
	Archive     bool               `protobuf:"varint,3,opt,name=archive,proto3" json:"archive,omitempty"`
	Unarchive   bool               `protobuf:"varint,4,opt,name=unarchive,proto3" json:"unarchive,omitempty"`
	Stickersets []*InputStickerSet `protobuf:"bytes,5,rep,name=stickersets,proto3" json:"stickersets,omitempty"`
}

func (m *TLMessagesToggleStickerSets) Reset()         { *m = TLMessagesToggleStickerSets{} }
func (m *TLMessagesToggleStickerSets) String() string { return proto.CompactTextString(m) }
func (*TLMessagesToggleStickerSets) ProtoMessage()    {}
func (*TLMessagesToggleStickerSets) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{400}
}
func (m *TLMessagesToggleStickerSets) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesToggleStickerSets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesToggleStickerSets.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesToggleStickerSets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesToggleStickerSets.Merge(m, src)
}
func (m *TLMessagesToggleStickerSets) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesToggleStickerSets) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesToggleStickerSets.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesToggleStickerSets proto.InternalMessageInfo

func (m *TLMessagesToggleStickerSets) GetUninstall() bool {
	if m != nil {
		return m.Uninstall
	}
	return false
}

func (m *TLMessagesToggleStickerSets) GetArchive() bool {
	if m != nil {
		return m.Archive
	}
	return false
}

func (m *TLMessagesToggleStickerSets) GetUnarchive() bool {
	if m != nil {
		return m.Unarchive
	}
	return false
}

func (m *TLMessagesToggleStickerSets) GetStickersets() []*InputStickerSet {
	if m != nil {
		return m.Stickersets
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.getDialogFilters#f19ed96d = Vector<DialogFilter>;
type TLMessagesGetDialogFilters struct {
}

func (m *TLMessagesGetDialogFilters) Reset()         { *m = TLMessagesGetDialogFilters{} }
func (m *TLMessagesGetDialogFilters) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetDialogFilters) ProtoMessage()    {}
func (*TLMessagesGetDialogFilters) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{401}
}
func (m *TLMessagesGetDialogFilters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetDialogFilters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetDialogFilters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetDialogFilters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetDialogFilters.Merge(m, src)
}
func (m *TLMessagesGetDialogFilters) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetDialogFilters) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetDialogFilters.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetDialogFilters proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// messages.getSuggestedDialogFilters#a29cd42c = Vector<DialogFilterSuggested>;
type TLMessagesGetSuggestedDialogFilters struct {
}

func (m *TLMessagesGetSuggestedDialogFilters) Reset()         { *m = TLMessagesGetSuggestedDialogFilters{} }
func (m *TLMessagesGetSuggestedDialogFilters) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetSuggestedDialogFilters) ProtoMessage()    {}
func (*TLMessagesGetSuggestedDialogFilters) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{402}
}
func (m *TLMessagesGetSuggestedDialogFilters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetSuggestedDialogFilters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetSuggestedDialogFilters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetSuggestedDialogFilters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetSuggestedDialogFilters.Merge(m, src)
}
func (m *TLMessagesGetSuggestedDialogFilters) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetSuggestedDialogFilters) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetSuggestedDialogFilters.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetSuggestedDialogFilters proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// messages.updateDialogFilter#1ad4a04a flags:# id:int filter:flags.0?DialogFilter = Bool;
type TLMessagesUpdateDialogFilter struct {
	Id     int32         `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Filter *DialogFilter `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (m *TLMessagesUpdateDialogFilter) Reset()         { *m = TLMessagesUpdateDialogFilter{} }
func (m *TLMessagesUpdateDialogFilter) String() string { return proto.CompactTextString(m) }
func (*TLMessagesUpdateDialogFilter) ProtoMessage()    {}
func (*TLMessagesUpdateDialogFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{403}
}
func (m *TLMessagesUpdateDialogFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesUpdateDialogFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesUpdateDialogFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesUpdateDialogFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesUpdateDialogFilter.Merge(m, src)
}
func (m *TLMessagesUpdateDialogFilter) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesUpdateDialogFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesUpdateDialogFilter.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesUpdateDialogFilter proto.InternalMessageInfo

func (m *TLMessagesUpdateDialogFilter) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TLMessagesUpdateDialogFilter) GetFilter() *DialogFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.updateDialogFiltersOrder#c563c1e4 order:Vector<int> = Bool;
type TLMessagesUpdateDialogFiltersOrder struct {
	Order []int32 `protobuf:"varint,1,rep,packed,name=order,proto3" json:"order,omitempty"`
}

func (m *TLMessagesUpdateDialogFiltersOrder) Reset()         { *m = TLMessagesUpdateDialogFiltersOrder{} }
func (m *TLMessagesUpdateDialogFiltersOrder) String() string { return proto.CompactTextString(m) }
func (*TLMessagesUpdateDialogFiltersOrder) ProtoMessage()    {}
func (*TLMessagesUpdateDialogFiltersOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{404}
}
func (m *TLMessagesUpdateDialogFiltersOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesUpdateDialogFiltersOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesUpdateDialogFiltersOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesUpdateDialogFiltersOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesUpdateDialogFiltersOrder.Merge(m, src)
}
func (m *TLMessagesUpdateDialogFiltersOrder) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesUpdateDialogFiltersOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesUpdateDialogFiltersOrder.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesUpdateDialogFiltersOrder proto.InternalMessageInfo

func (m *TLMessagesUpdateDialogFiltersOrder) GetOrder() []int32 {
	if m != nil {
		return m.Order
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.getOldFeaturedStickers#5fe7025b offset:int limit:int hash:int = messages.FeaturedStickers;
type TLMessagesGetOldFeaturedStickers struct {
	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Hash   int32 `protobuf:"varint,3,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TLMessagesGetOldFeaturedStickers) Reset()         { *m = TLMessagesGetOldFeaturedStickers{} }
func (m *TLMessagesGetOldFeaturedStickers) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetOldFeaturedStickers) ProtoMessage()    {}
func (*TLMessagesGetOldFeaturedStickers) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{405}
}
func (m *TLMessagesGetOldFeaturedStickers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetOldFeaturedStickers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetOldFeaturedStickers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetOldFeaturedStickers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetOldFeaturedStickers.Merge(m, src)
}
func (m *TLMessagesGetOldFeaturedStickers) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetOldFeaturedStickers) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetOldFeaturedStickers.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetOldFeaturedStickers proto.InternalMessageInfo

func (m *TLMessagesGetOldFeaturedStickers) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TLMessagesGetOldFeaturedStickers) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *TLMessagesGetOldFeaturedStickers) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// upload.getFile#b15a9afc flags:# precise:flags.0?true cdn_supported:flags.1?true location:InputFileLocation offset:int limit:int = upload.File;
type TLUploadGetFile114 struct {
	Precise      bool               `protobuf:"varint,2,opt,name=precise,proto3" json:"precise,omitempty"`
	CdnSupported bool               `protobuf:"varint,3,opt,name=cdn_supported,json=cdnSupported,proto3" json:"cdn_supported,omitempty"`
	Location     *InputFileLocation `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	Offset       int32              `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit        int32              `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *TLUploadGetFile114) Reset()         { *m = TLUploadGetFile114{} }
func (m *TLUploadGetFile114) String() string { return proto.CompactTextString(m) }
func (*TLUploadGetFile114) ProtoMessage()    {}
func (*TLUploadGetFile114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{406}
}
func (m *TLUploadGetFile114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUploadGetFile114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUploadGetFile114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUploadGetFile114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUploadGetFile114.Merge(m, src)
}
func (m *TLUploadGetFile114) XXX_Size() int {
	return m.Size()
}
func (m *TLUploadGetFile114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUploadGetFile114.DiscardUnknown(m)
}

var xxx_messageInfo_TLUploadGetFile114 proto.InternalMessageInfo

func (m *TLUploadGetFile114) GetPrecise() bool {
	if m != nil {
		return m.Precise
	}
	return false
}

func (m *TLUploadGetFile114) GetCdnSupported() bool {
	if m != nil {
		return m.CdnSupported
	}
	return false
}

func (m *TLUploadGetFile114) GetLocation() *InputFileLocation {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *TLUploadGetFile114) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *TLUploadGetFile114) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// upload.reuploadCdnFile#9b2754a8 file_token:bytes request_token:bytes = Vector<FileHash>;
type TLUploadReuploadCdnFile114 struct {
	FileToken    []byte `protobuf:"bytes,1,opt,name=file_token,json=fileToken,proto3" json:"file_token,omitempty"`
	RequestToken []byte `protobuf:"bytes,2,opt,name=request_token,json=requestToken,proto3" json:"request_token,omitempty"`
}

func (m *TLUploadReuploadCdnFile114) Reset()         { *m = TLUploadReuploadCdnFile114{} }
func (m *TLUploadReuploadCdnFile114) String() string { return proto.CompactTextString(m) }
func (*TLUploadReuploadCdnFile114) ProtoMessage()    {}
func (*TLUploadReuploadCdnFile114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{407}
}
func (m *TLUploadReuploadCdnFile114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUploadReuploadCdnFile114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUploadReuploadCdnFile114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUploadReuploadCdnFile114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUploadReuploadCdnFile114.Merge(m, src)
}
func (m *TLUploadReuploadCdnFile114) XXX_Size() int {
	return m.Size()
}
func (m *TLUploadReuploadCdnFile114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUploadReuploadCdnFile114.DiscardUnknown(m)
}

var xxx_messageInfo_TLUploadReuploadCdnFile114 proto.InternalMessageInfo

func (m *TLUploadReuploadCdnFile114) GetFileToken() []byte {
	if m != nil {
		return m.FileToken
	}
	return nil
}

func (m *TLUploadReuploadCdnFile114) GetRequestToken() []byte {
	if m != nil {
		return m.RequestToken
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// upload.getCdnFileHashes#4da54231 file_token:bytes offset:int = Vector<FileHash>;
type TLUploadGetCdnFileHashes114 struct {
	FileToken []byte `protobuf:"bytes,1,opt,name=file_token,json=fileToken,proto3" json:"file_token,omitempty"`
	Offset    int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *TLUploadGetCdnFileHashes114) Reset()         { *m = TLUploadGetCdnFileHashes114{} }
func (m *TLUploadGetCdnFileHashes114) String() string { return proto.CompactTextString(m) }
func (*TLUploadGetCdnFileHashes114) ProtoMessage()    {}
func (*TLUploadGetCdnFileHashes114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{408}
}
func (m *TLUploadGetCdnFileHashes114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUploadGetCdnFileHashes114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUploadGetCdnFileHashes114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUploadGetCdnFileHashes114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUploadGetCdnFileHashes114.Merge(m, src)
}
func (m *TLUploadGetCdnFileHashes114) XXX_Size() int {
	return m.Size()
}
func (m *TLUploadGetCdnFileHashes114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUploadGetCdnFileHashes114.DiscardUnknown(m)
}

var xxx_messageInfo_TLUploadGetCdnFileHashes114 proto.InternalMessageInfo

func (m *TLUploadGetCdnFileHashes114) GetFileToken() []byte {
	if m != nil {
		return m.FileToken
	}
	return nil
}

func (m *TLUploadGetCdnFileHashes114) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// upload.getFileHashes#c7025931 location:InputFileLocation offset:int = Vector<FileHash>;
type TLUploadGetFileHashes struct {
	Location *InputFileLocation `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	Offset   int32              `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *TLUploadGetFileHashes) Reset()         { *m = TLUploadGetFileHashes{} }
func (m *TLUploadGetFileHashes) String() string { return proto.CompactTextString(m) }
func (*TLUploadGetFileHashes) ProtoMessage()    {}
func (*TLUploadGetFileHashes) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{409}
}
func (m *TLUploadGetFileHashes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLUploadGetFileHashes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLUploadGetFileHashes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLUploadGetFileHashes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLUploadGetFileHashes.Merge(m, src)
}
func (m *TLUploadGetFileHashes) XXX_Size() int {
	return m.Size()
}
func (m *TLUploadGetFileHashes) XXX_DiscardUnknown() {
	xxx_messageInfo_TLUploadGetFileHashes.DiscardUnknown(m)
}

var xxx_messageInfo_TLUploadGetFileHashes proto.InternalMessageInfo

func (m *TLUploadGetFileHashes) GetLocation() *InputFileLocation {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *TLUploadGetFileHashes) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// help.getConfig#c4f9186b = Config;
type TLHelpGetConfig114 struct {
}

func (m *TLHelpGetConfig114) Reset()         { *m = TLHelpGetConfig114{} }
func (m *TLHelpGetConfig114) String() string { return proto.CompactTextString(m) }
func (*TLHelpGetConfig114) ProtoMessage()    {}
func (*TLHelpGetConfig114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{410}
}
func (m *TLHelpGetConfig114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpGetConfig114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpGetConfig114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpGetConfig114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpGetConfig114.Merge(m, src)
}
func (m *TLHelpGetConfig114) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpGetConfig114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpGetConfig114.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpGetConfig114 proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// help.getAppUpdate#522d5a7d source:string = help.AppUpdate;
type TLHelpGetAppUpdate114 struct {
	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
}

func (m *TLHelpGetAppUpdate114) Reset()         { *m = TLHelpGetAppUpdate114{} }
func (m *TLHelpGetAppUpdate114) String() string { return proto.CompactTextString(m) }
func (*TLHelpGetAppUpdate114) ProtoMessage()    {}
func (*TLHelpGetAppUpdate114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{411}
}
func (m *TLHelpGetAppUpdate114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpGetAppUpdate114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpGetAppUpdate114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpGetAppUpdate114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpGetAppUpdate114.Merge(m, src)
}
func (m *TLHelpGetAppUpdate114) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpGetAppUpdate114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpGetAppUpdate114.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpGetAppUpdate114 proto.InternalMessageInfo

func (m *TLHelpGetAppUpdate114) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// help.getAppConfig#98914110 = JSONValue;
type TLHelpGetAppConfig struct {
}

func (m *TLHelpGetAppConfig) Reset()         { *m = TLHelpGetAppConfig{} }
func (m *TLHelpGetAppConfig) String() string { return proto.CompactTextString(m) }
func (*TLHelpGetAppConfig) ProtoMessage()    {}
func (*TLHelpGetAppConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{412}
}
func (m *TLHelpGetAppConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpGetAppConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpGetAppConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpGetAppConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpGetAppConfig.Merge(m, src)
}
func (m *TLHelpGetAppConfig) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpGetAppConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpGetAppConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpGetAppConfig proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// help.getPassportConfig#c661ad08 hash:int = help.PassportConfig;
type TLHelpGetPassportConfig struct {
	Hash int32 `protobuf:"varint,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TLHelpGetPassportConfig) Reset()         { *m = TLHelpGetPassportConfig{} }
func (m *TLHelpGetPassportConfig) String() string { return proto.CompactTextString(m) }
func (*TLHelpGetPassportConfig) ProtoMessage()    {}
func (*TLHelpGetPassportConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{413}
}
func (m *TLHelpGetPassportConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpGetPassportConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpGetPassportConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpGetPassportConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpGetPassportConfig.Merge(m, src)
}
func (m *TLHelpGetPassportConfig) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpGetPassportConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpGetPassportConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpGetPassportConfig proto.InternalMessageInfo

func (m *TLHelpGetPassportConfig) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// help.getSupportName#d360e72c = help.SupportName;
type TLHelpGetSupportName struct {
}

func (m *TLHelpGetSupportName) Reset()         { *m = TLHelpGetSupportName{} }
func (m *TLHelpGetSupportName) String() string { return proto.CompactTextString(m) }
func (*TLHelpGetSupportName) ProtoMessage()    {}
func (*TLHelpGetSupportName) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{414}
}
func (m *TLHelpGetSupportName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpGetSupportName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpGetSupportName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpGetSupportName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpGetSupportName.Merge(m, src)
}
func (m *TLHelpGetSupportName) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpGetSupportName) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpGetSupportName.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpGetSupportName proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// help.getUserInfo#38a08d3 user_id:InputUser = help.UserInfo;
type TLHelpGetUserInfo struct {
	UserId *InputUser `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *TLHelpGetUserInfo) Reset()         { *m = TLHelpGetUserInfo{} }
func (m *TLHelpGetUserInfo) String() string { return proto.CompactTextString(m) }
func (*TLHelpGetUserInfo) ProtoMessage()    {}
func (*TLHelpGetUserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{415}
}
func (m *TLHelpGetUserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpGetUserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpGetUserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpGetUserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpGetUserInfo.Merge(m, src)
}
func (m *TLHelpGetUserInfo) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpGetUserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpGetUserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpGetUserInfo proto.InternalMessageInfo

func (m *TLHelpGetUserInfo) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// help.editUserInfo#66b91b70 user_id:InputUser message:string entities:Vector<MessageEntity> = help.UserInfo;
type TLHelpEditUserInfo struct {
	UserId   *InputUser       `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Message  string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Entities []*MessageEntity `protobuf:"bytes,3,rep,name=entities,proto3" json:"entities,omitempty"`
}

func (m *TLHelpEditUserInfo) Reset()         { *m = TLHelpEditUserInfo{} }
func (m *TLHelpEditUserInfo) String() string { return proto.CompactTextString(m) }
func (*TLHelpEditUserInfo) ProtoMessage()    {}
func (*TLHelpEditUserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{416}
}
func (m *TLHelpEditUserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpEditUserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpEditUserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpEditUserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpEditUserInfo.Merge(m, src)
}
func (m *TLHelpEditUserInfo) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpEditUserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpEditUserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpEditUserInfo proto.InternalMessageInfo

func (m *TLHelpEditUserInfo) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *TLHelpEditUserInfo) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TLHelpEditUserInfo) GetEntities() []*MessageEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// help.getPromoData#c0977421 = help.PromoData;
type TLHelpGetPromoData struct {
}

func (m *TLHelpGetPromoData) Reset()         { *m = TLHelpGetPromoData{} }
func (m *TLHelpGetPromoData) String() string { return proto.CompactTextString(m) }
func (*TLHelpGetPromoData) ProtoMessage()    {}
func (*TLHelpGetPromoData) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{417}
}
func (m *TLHelpGetPromoData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpGetPromoData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpGetPromoData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpGetPromoData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpGetPromoData.Merge(m, src)
}
func (m *TLHelpGetPromoData) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpGetPromoData) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpGetPromoData.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpGetPromoData proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// help.hidePromoData#1e251c95 peer:InputPeer = Bool;
type TLHelpHidePromoData struct {
	Peer *InputPeer `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (m *TLHelpHidePromoData) Reset()         { *m = TLHelpHidePromoData{} }
func (m *TLHelpHidePromoData) String() string { return proto.CompactTextString(m) }
func (*TLHelpHidePromoData) ProtoMessage()    {}
func (*TLHelpHidePromoData) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{418}
}
func (m *TLHelpHidePromoData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpHidePromoData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpHidePromoData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpHidePromoData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpHidePromoData.Merge(m, src)
}
func (m *TLHelpHidePromoData) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpHidePromoData) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpHidePromoData.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpHidePromoData proto.InternalMessageInfo

func (m *TLHelpHidePromoData) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// channels.getMessages#ad8c9a23 channel:InputChannel id:Vector<InputMessage> = messages.Messages;
type TLChannelsGetMessages114 struct {
	Channel *InputChannel   `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Id      []*InputMessage `protobuf:"bytes,2,rep,name=id,proto3" json:"id,omitempty"`
}

func (m *TLChannelsGetMessages114) Reset()         { *m = TLChannelsGetMessages114{} }
func (m *TLChannelsGetMessages114) String() string { return proto.CompactTextString(m) }
func (*TLChannelsGetMessages114) ProtoMessage()    {}
func (*TLChannelsGetMessages114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{419}
}
func (m *TLChannelsGetMessages114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsGetMessages114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsGetMessages114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsGetMessages114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsGetMessages114.Merge(m, src)
}
func (m *TLChannelsGetMessages114) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsGetMessages114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsGetMessages114.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsGetMessages114 proto.InternalMessageInfo

func (m *TLChannelsGetMessages114) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsGetMessages114) GetId() []*InputMessage {
	if m != nil {
		return m.Id
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// channels.createChannel#3d5fb10f flags:# broadcast:flags.0?true megagroup:flags.1?true title:string about:string geo_point:flags.2?InputGeoPoint address:flags.2?string = Updates;
type TLChannelsCreateChannel114 struct {
	Broadcast bool           `protobuf:"varint,2,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	Megagroup bool           `protobuf:"varint,3,opt,name=megagroup,proto3" json:"megagroup,omitempty"`
	Title     string         `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	About     string         `protobuf:"bytes,5,opt,name=about,proto3" json:"about,omitempty"`
	GeoPoint  *InputGeoPoint `protobuf:"bytes,6,opt,name=geo_point,json=geoPoint,proto3" json:"geo_point,omitempty"`
	Address   string         `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *TLChannelsCreateChannel114) Reset()         { *m = TLChannelsCreateChannel114{} }
func (m *TLChannelsCreateChannel114) String() string { return proto.CompactTextString(m) }
func (*TLChannelsCreateChannel114) ProtoMessage()    {}
func (*TLChannelsCreateChannel114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{420}
}
func (m *TLChannelsCreateChannel114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsCreateChannel114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsCreateChannel114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsCreateChannel114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsCreateChannel114.Merge(m, src)
}
func (m *TLChannelsCreateChannel114) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsCreateChannel114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsCreateChannel114.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsCreateChannel114 proto.InternalMessageInfo

func (m *TLChannelsCreateChannel114) GetBroadcast() bool {
	if m != nil {
		return m.Broadcast
	}
	return false
}

func (m *TLChannelsCreateChannel114) GetMegagroup() bool {
	if m != nil {
		return m.Megagroup
	}
	return false
}

func (m *TLChannelsCreateChannel114) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *TLChannelsCreateChannel114) GetAbout() string {
	if m != nil {
		return m.About
	}
	return ""
}

func (m *TLChannelsCreateChannel114) GetGeoPoint() *InputGeoPoint {
	if m != nil {
		return m.GeoPoint
	}
	return nil
}

func (m *TLChannelsCreateChannel114) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// channels.editAdmin#d33c8902 channel:InputChannel user_id:InputUser admin_rights:ChatAdminRights rank:string = Updates;
type TLChannelsEditAdmin114 struct {
	Channel     *InputChannel    `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	UserId      *InputUser       `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AdminRights *ChatAdminRights `protobuf:"bytes,3,opt,name=admin_rights,json=adminRights,proto3" json:"admin_rights,omitempty"`
	Rank        string           `protobuf:"bytes,4,opt,name=rank,proto3" json:"rank,omitempty"`
}

func (m *TLChannelsEditAdmin114) Reset()         { *m = TLChannelsEditAdmin114{} }
func (m *TLChannelsEditAdmin114) String() string { return proto.CompactTextString(m) }
func (*TLChannelsEditAdmin114) ProtoMessage()    {}
func (*TLChannelsEditAdmin114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{421}
}
func (m *TLChannelsEditAdmin114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsEditAdmin114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsEditAdmin114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsEditAdmin114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsEditAdmin114.Merge(m, src)
}
func (m *TLChannelsEditAdmin114) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsEditAdmin114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsEditAdmin114.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsEditAdmin114 proto.InternalMessageInfo

func (m *TLChannelsEditAdmin114) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsEditAdmin114) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *TLChannelsEditAdmin114) GetAdminRights() *ChatAdminRights {
	if m != nil {
		return m.AdminRights
	}
	return nil
}

func (m *TLChannelsEditAdmin114) GetRank() string {
	if m != nil {
		return m.Rank
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// channels.exportMessageLink#ceb77163 channel:InputChannel id:int grouped:Bool = ExportedMessageLink;
type TLChannelsExportMessageLink114 struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Id      int32         `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Grouped *Bool         `protobuf:"bytes,3,opt,name=grouped,proto3" json:"grouped,omitempty"`
}

func (m *TLChannelsExportMessageLink114) Reset()         { *m = TLChannelsExportMessageLink114{} }
func (m *TLChannelsExportMessageLink114) String() string { return proto.CompactTextString(m) }
func (*TLChannelsExportMessageLink114) ProtoMessage()    {}
func (*TLChannelsExportMessageLink114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{422}
}
func (m *TLChannelsExportMessageLink114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsExportMessageLink114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsExportMessageLink114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsExportMessageLink114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsExportMessageLink114.Merge(m, src)
}
func (m *TLChannelsExportMessageLink114) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsExportMessageLink114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsExportMessageLink114.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsExportMessageLink114 proto.InternalMessageInfo

func (m *TLChannelsExportMessageLink114) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsExportMessageLink114) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TLChannelsExportMessageLink114) GetGrouped() *Bool {
	if m != nil {
		return m.Grouped
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// channels.getAdminedPublicChannels#f8b036af flags:# by_location:flags.0?true check_limit:flags.1?true = messages.Chats;
type TLChannelsGetAdminedPublicChannels114 struct {
	ByLocation bool `protobuf:"varint,2,opt,name=by_location,json=byLocation,proto3" json:"by_location,omitempty"`
	CheckLimit bool `protobuf:"varint,3,opt,name=check_limit,json=checkLimit,proto3" json:"check_limit,omitempty"`
}

func (m *TLChannelsGetAdminedPublicChannels114) Reset()         { *m = TLChannelsGetAdminedPublicChannels114{} }
func (m *TLChannelsGetAdminedPublicChannels114) String() string { return proto.CompactTextString(m) }
func (*TLChannelsGetAdminedPublicChannels114) ProtoMessage()    {}
func (*TLChannelsGetAdminedPublicChannels114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{423}
}
func (m *TLChannelsGetAdminedPublicChannels114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsGetAdminedPublicChannels114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsGetAdminedPublicChannels114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsGetAdminedPublicChannels114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsGetAdminedPublicChannels114.Merge(m, src)
}
func (m *TLChannelsGetAdminedPublicChannels114) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsGetAdminedPublicChannels114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsGetAdminedPublicChannels114.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsGetAdminedPublicChannels114 proto.InternalMessageInfo

func (m *TLChannelsGetAdminedPublicChannels114) GetByLocation() bool {
	if m != nil {
		return m.ByLocation
	}
	return false
}

func (m *TLChannelsGetAdminedPublicChannels114) GetCheckLimit() bool {
	if m != nil {
		return m.CheckLimit
	}
	return false
}

///////////////////////////////////////////////////////////////////////////////
// channels.editBanned#72796912 channel:InputChannel user_id:InputUser banned_rights:ChatBannedRights = Updates;
type TLChannelsEditBanned114 struct {
	Channel      *InputChannel     `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	UserId       *InputUser        `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BannedRights *ChatBannedRights `protobuf:"bytes,3,opt,name=banned_rights,json=bannedRights,proto3" json:"banned_rights,omitempty"`
}

func (m *TLChannelsEditBanned114) Reset()         { *m = TLChannelsEditBanned114{} }
func (m *TLChannelsEditBanned114) String() string { return proto.CompactTextString(m) }
func (*TLChannelsEditBanned114) ProtoMessage()    {}
func (*TLChannelsEditBanned114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{424}
}
func (m *TLChannelsEditBanned114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsEditBanned114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsEditBanned114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsEditBanned114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsEditBanned114.Merge(m, src)
}
func (m *TLChannelsEditBanned114) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsEditBanned114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsEditBanned114.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsEditBanned114 proto.InternalMessageInfo

func (m *TLChannelsEditBanned114) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsEditBanned114) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *TLChannelsEditBanned114) GetBannedRights() *ChatBannedRights {
	if m != nil {
		return m.BannedRights
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// channels.getLeftChannels#8341ecc0 offset:int = messages.Chats;
type TLChannelsGetLeftChannels struct {
	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (m *TLChannelsGetLeftChannels) Reset()         { *m = TLChannelsGetLeftChannels{} }
func (m *TLChannelsGetLeftChannels) String() string { return proto.CompactTextString(m) }
func (*TLChannelsGetLeftChannels) ProtoMessage()    {}
func (*TLChannelsGetLeftChannels) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{425}
}
func (m *TLChannelsGetLeftChannels) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsGetLeftChannels) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsGetLeftChannels.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsGetLeftChannels) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsGetLeftChannels.Merge(m, src)
}
func (m *TLChannelsGetLeftChannels) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsGetLeftChannels) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsGetLeftChannels.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsGetLeftChannels proto.InternalMessageInfo

func (m *TLChannelsGetLeftChannels) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// channels.getGroupsForDiscussion#f5dad378 = messages.Chats;
type TLChannelsGetGroupsForDiscussion struct {
}

func (m *TLChannelsGetGroupsForDiscussion) Reset()         { *m = TLChannelsGetGroupsForDiscussion{} }
func (m *TLChannelsGetGroupsForDiscussion) String() string { return proto.CompactTextString(m) }
func (*TLChannelsGetGroupsForDiscussion) ProtoMessage()    {}
func (*TLChannelsGetGroupsForDiscussion) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{426}
}
func (m *TLChannelsGetGroupsForDiscussion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsGetGroupsForDiscussion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsGetGroupsForDiscussion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsGetGroupsForDiscussion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsGetGroupsForDiscussion.Merge(m, src)
}
func (m *TLChannelsGetGroupsForDiscussion) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsGetGroupsForDiscussion) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsGetGroupsForDiscussion.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsGetGroupsForDiscussion proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// channels.setDiscussionGroup#40582bb2 broadcast:InputChannel group:InputChannel = Bool;
type TLChannelsSetDiscussionGroup struct {
	Broadcast *InputChannel `protobuf:"bytes,1,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	Group     *InputChannel `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
}

func (m *TLChannelsSetDiscussionGroup) Reset()         { *m = TLChannelsSetDiscussionGroup{} }
func (m *TLChannelsSetDiscussionGroup) String() string { return proto.CompactTextString(m) }
func (*TLChannelsSetDiscussionGroup) ProtoMessage()    {}
func (*TLChannelsSetDiscussionGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{427}
}
func (m *TLChannelsSetDiscussionGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsSetDiscussionGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsSetDiscussionGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsSetDiscussionGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsSetDiscussionGroup.Merge(m, src)
}
func (m *TLChannelsSetDiscussionGroup) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsSetDiscussionGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsSetDiscussionGroup.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsSetDiscussionGroup proto.InternalMessageInfo

func (m *TLChannelsSetDiscussionGroup) GetBroadcast() *InputChannel {
	if m != nil {
		return m.Broadcast
	}
	return nil
}

func (m *TLChannelsSetDiscussionGroup) GetGroup() *InputChannel {
	if m != nil {
		return m.Group
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// channels.editCreator#8f38cd1f channel:InputChannel user_id:InputUser password:InputCheckPasswordSRP = Updates;
type TLChannelsEditCreator struct {
	Channel  *InputChannel          `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	UserId   *InputUser             `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Password *InputCheckPasswordSRP `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *TLChannelsEditCreator) Reset()         { *m = TLChannelsEditCreator{} }
func (m *TLChannelsEditCreator) String() string { return proto.CompactTextString(m) }
func (*TLChannelsEditCreator) ProtoMessage()    {}
func (*TLChannelsEditCreator) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{428}
}
func (m *TLChannelsEditCreator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsEditCreator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsEditCreator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsEditCreator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsEditCreator.Merge(m, src)
}
func (m *TLChannelsEditCreator) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsEditCreator) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsEditCreator.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsEditCreator proto.InternalMessageInfo

func (m *TLChannelsEditCreator) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsEditCreator) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *TLChannelsEditCreator) GetPassword() *InputCheckPasswordSRP {
	if m != nil {
		return m.Password
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// channels.editLocation#58e63f6d channel:InputChannel geo_point:InputGeoPoint address:string = Bool;
type TLChannelsEditLocation struct {
	Channel  *InputChannel  `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	GeoPoint *InputGeoPoint `protobuf:"bytes,2,opt,name=geo_point,json=geoPoint,proto3" json:"geo_point,omitempty"`
	Address  string         `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *TLChannelsEditLocation) Reset()         { *m = TLChannelsEditLocation{} }
func (m *TLChannelsEditLocation) String() string { return proto.CompactTextString(m) }
func (*TLChannelsEditLocation) ProtoMessage()    {}
func (*TLChannelsEditLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{429}
}
func (m *TLChannelsEditLocation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsEditLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsEditLocation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsEditLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsEditLocation.Merge(m, src)
}
func (m *TLChannelsEditLocation) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsEditLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsEditLocation.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsEditLocation proto.InternalMessageInfo

func (m *TLChannelsEditLocation) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsEditLocation) GetGeoPoint() *InputGeoPoint {
	if m != nil {
		return m.GeoPoint
	}
	return nil
}

func (m *TLChannelsEditLocation) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// channels.toggleSlowMode#edd49ef0 channel:InputChannel seconds:int = Updates;
type TLChannelsToggleSlowMode struct {
	Channel *InputChannel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Seconds int32         `protobuf:"varint,2,opt,name=seconds,proto3" json:"seconds,omitempty"`
}

func (m *TLChannelsToggleSlowMode) Reset()         { *m = TLChannelsToggleSlowMode{} }
func (m *TLChannelsToggleSlowMode) String() string { return proto.CompactTextString(m) }
func (*TLChannelsToggleSlowMode) ProtoMessage()    {}
func (*TLChannelsToggleSlowMode) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{430}
}
func (m *TLChannelsToggleSlowMode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsToggleSlowMode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsToggleSlowMode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsToggleSlowMode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsToggleSlowMode.Merge(m, src)
}
func (m *TLChannelsToggleSlowMode) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsToggleSlowMode) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsToggleSlowMode.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsToggleSlowMode proto.InternalMessageInfo

func (m *TLChannelsToggleSlowMode) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *TLChannelsToggleSlowMode) GetSeconds() int32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// channels.getInactiveChannels#11e831ee = messages.InactiveChats;
type TLChannelsGetInactiveChannels struct {
}

func (m *TLChannelsGetInactiveChannels) Reset()         { *m = TLChannelsGetInactiveChannels{} }
func (m *TLChannelsGetInactiveChannels) String() string { return proto.CompactTextString(m) }
func (*TLChannelsGetInactiveChannels) ProtoMessage()    {}
func (*TLChannelsGetInactiveChannels) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{431}
}
func (m *TLChannelsGetInactiveChannels) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLChannelsGetInactiveChannels) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLChannelsGetInactiveChannels.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLChannelsGetInactiveChannels) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLChannelsGetInactiveChannels.Merge(m, src)
}
func (m *TLChannelsGetInactiveChannels) XXX_Size() int {
	return m.Size()
}
func (m *TLChannelsGetInactiveChannels) XXX_DiscardUnknown() {
	xxx_messageInfo_TLChannelsGetInactiveChannels.DiscardUnknown(m)
}

var xxx_messageInfo_TLChannelsGetInactiveChannels proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// bots.setBotCommands#805d46f6 commands:Vector<BotCommand> = Bool;
type TLBotsSetBotCommands struct {
	Commands []*BotCommand `protobuf:"bytes,1,rep,name=commands,proto3" json:"commands,omitempty"`
}

func (m *TLBotsSetBotCommands) Reset()         { *m = TLBotsSetBotCommands{} }
func (m *TLBotsSetBotCommands) String() string { return proto.CompactTextString(m) }
func (*TLBotsSetBotCommands) ProtoMessage()    {}
func (*TLBotsSetBotCommands) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{432}
}
func (m *TLBotsSetBotCommands) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLBotsSetBotCommands) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLBotsSetBotCommands.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLBotsSetBotCommands) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLBotsSetBotCommands.Merge(m, src)
}
func (m *TLBotsSetBotCommands) XXX_Size() int {
	return m.Size()
}
func (m *TLBotsSetBotCommands) XXX_DiscardUnknown() {
	xxx_messageInfo_TLBotsSetBotCommands.DiscardUnknown(m)
}

var xxx_messageInfo_TLBotsSetBotCommands proto.InternalMessageInfo

func (m *TLBotsSetBotCommands) GetCommands() []*BotCommand {
	if m != nil {
		return m.Commands
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// payments.getBankCardData#2e79d779 number:string = payments.BankCardData;
type TLPaymentsGetBankCardData struct {
	Number string `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
}

func (m *TLPaymentsGetBankCardData) Reset()         { *m = TLPaymentsGetBankCardData{} }
func (m *TLPaymentsGetBankCardData) String() string { return proto.CompactTextString(m) }
func (*TLPaymentsGetBankCardData) ProtoMessage()    {}
func (*TLPaymentsGetBankCardData) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{433}
}
func (m *TLPaymentsGetBankCardData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPaymentsGetBankCardData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPaymentsGetBankCardData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLPaymentsGetBankCardData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPaymentsGetBankCardData.Merge(m, src)
}
func (m *TLPaymentsGetBankCardData) XXX_Size() int {
	return m.Size()
}
func (m *TLPaymentsGetBankCardData) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPaymentsGetBankCardData.DiscardUnknown(m)
}

var xxx_messageInfo_TLPaymentsGetBankCardData proto.InternalMessageInfo

func (m *TLPaymentsGetBankCardData) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// stickers.createStickerSet#f1036780 flags:# masks:flags.0?true animated:flags.1?true user_id:InputUser title:string short_name:string thumb:flags.2?InputDocument stickers:Vector<InputStickerSetItem> = messages.StickerSet;
type TLStickersCreateStickerSet114 struct {
	Masks     bool                   `protobuf:"varint,2,opt,name=masks,proto3" json:"masks,omitempty"`
	Animated  bool                   `protobuf:"varint,3,opt,name=animated,proto3" json:"animated,omitempty"`
	UserId    *InputUser             `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Title     string                 `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	ShortName string                 `protobuf:"bytes,6,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	Thumb     *InputDocument         `protobuf:"bytes,7,opt,name=thumb,proto3" json:"thumb,omitempty"`
	Stickers  []*InputStickerSetItem `protobuf:"bytes,8,rep,name=stickers,proto3" json:"stickers,omitempty"`
}

func (m *TLStickersCreateStickerSet114) Reset()         { *m = TLStickersCreateStickerSet114{} }
func (m *TLStickersCreateStickerSet114) String() string { return proto.CompactTextString(m) }
func (*TLStickersCreateStickerSet114) ProtoMessage()    {}
func (*TLStickersCreateStickerSet114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{434}
}
func (m *TLStickersCreateStickerSet114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLStickersCreateStickerSet114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLStickersCreateStickerSet114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLStickersCreateStickerSet114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLStickersCreateStickerSet114.Merge(m, src)
}
func (m *TLStickersCreateStickerSet114) XXX_Size() int {
	return m.Size()
}
func (m *TLStickersCreateStickerSet114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLStickersCreateStickerSet114.DiscardUnknown(m)
}

var xxx_messageInfo_TLStickersCreateStickerSet114 proto.InternalMessageInfo

func (m *TLStickersCreateStickerSet114) GetMasks() bool {
	if m != nil {
		return m.Masks
	}
	return false
}

func (m *TLStickersCreateStickerSet114) GetAnimated() bool {
	if m != nil {
		return m.Animated
	}
	return false
}

func (m *TLStickersCreateStickerSet114) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *TLStickersCreateStickerSet114) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *TLStickersCreateStickerSet114) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *TLStickersCreateStickerSet114) GetThumb() *InputDocument {
	if m != nil {
		return m.Thumb
	}
	return nil
}

func (m *TLStickersCreateStickerSet114) GetStickers() []*InputStickerSetItem {
	if m != nil {
		return m.Stickers
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// stickers.setStickerSetThumb#9a364e30 stickerset:InputStickerSet thumb:InputDocument = messages.StickerSet;
type TLStickersSetStickerSetThumb struct {
	Stickerset *InputStickerSet `protobuf:"bytes,1,opt,name=stickerset,proto3" json:"stickerset,omitempty"`
	Thumb      *InputDocument   `protobuf:"bytes,2,opt,name=thumb,proto3" json:"thumb,omitempty"`
}

func (m *TLStickersSetStickerSetThumb) Reset()         { *m = TLStickersSetStickerSetThumb{} }
func (m *TLStickersSetStickerSetThumb) String() string { return proto.CompactTextString(m) }
func (*TLStickersSetStickerSetThumb) ProtoMessage()    {}
func (*TLStickersSetStickerSetThumb) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{435}
}
func (m *TLStickersSetStickerSetThumb) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLStickersSetStickerSetThumb) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLStickersSetStickerSetThumb.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLStickersSetStickerSetThumb) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLStickersSetStickerSetThumb.Merge(m, src)
}
func (m *TLStickersSetStickerSetThumb) XXX_Size() int {
	return m.Size()
}
func (m *TLStickersSetStickerSetThumb) XXX_DiscardUnknown() {
	xxx_messageInfo_TLStickersSetStickerSetThumb.DiscardUnknown(m)
}

var xxx_messageInfo_TLStickersSetStickerSetThumb proto.InternalMessageInfo

func (m *TLStickersSetStickerSetThumb) GetStickerset() *InputStickerSet {
	if m != nil {
		return m.Stickerset
	}
	return nil
}

func (m *TLStickersSetStickerSetThumb) GetThumb() *InputDocument {
	if m != nil {
		return m.Thumb
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// phone.requestCall#42ff96ed flags:# video:flags.0?true user_id:InputUser random_id:int g_a_hash:bytes protocol:PhoneCallProtocol = phone.PhoneCall;
type TLPhoneRequestCall114 struct {
	Video    bool               `protobuf:"varint,2,opt,name=video,proto3" json:"video,omitempty"`
	UserId   *InputUser         `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RandomId int32              `protobuf:"varint,4,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	GAHash   []byte             `protobuf:"bytes,5,opt,name=g_a_hash,json=gAHash,proto3" json:"g_a_hash,omitempty"`
	Protocol *PhoneCallProtocol `protobuf:"bytes,6,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (m *TLPhoneRequestCall114) Reset()         { *m = TLPhoneRequestCall114{} }
func (m *TLPhoneRequestCall114) String() string { return proto.CompactTextString(m) }
func (*TLPhoneRequestCall114) ProtoMessage()    {}
func (*TLPhoneRequestCall114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{436}
}
func (m *TLPhoneRequestCall114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPhoneRequestCall114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPhoneRequestCall114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLPhoneRequestCall114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPhoneRequestCall114.Merge(m, src)
}
func (m *TLPhoneRequestCall114) XXX_Size() int {
	return m.Size()
}
func (m *TLPhoneRequestCall114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPhoneRequestCall114.DiscardUnknown(m)
}

var xxx_messageInfo_TLPhoneRequestCall114 proto.InternalMessageInfo

func (m *TLPhoneRequestCall114) GetVideo() bool {
	if m != nil {
		return m.Video
	}
	return false
}

func (m *TLPhoneRequestCall114) GetUserId() *InputUser {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *TLPhoneRequestCall114) GetRandomId() int32 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *TLPhoneRequestCall114) GetGAHash() []byte {
	if m != nil {
		return m.GAHash
	}
	return nil
}

func (m *TLPhoneRequestCall114) GetProtocol() *PhoneCallProtocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// phone.discardCall#b2cbc1c0 flags:# video:flags.0?true peer:InputPhoneCall duration:int reason:PhoneCallDiscardReason connection_id:long = Updates;
type TLPhoneDiscardCall114 struct {
	Video        bool                    `protobuf:"varint,2,opt,name=video,proto3" json:"video,omitempty"`
	Peer         *InputPhoneCall         `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Duration     int32                   `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	Reason       *PhoneCallDiscardReason `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	ConnectionId int64                   `protobuf:"varint,6,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (m *TLPhoneDiscardCall114) Reset()         { *m = TLPhoneDiscardCall114{} }
func (m *TLPhoneDiscardCall114) String() string { return proto.CompactTextString(m) }
func (*TLPhoneDiscardCall114) ProtoMessage()    {}
func (*TLPhoneDiscardCall114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{437}
}
func (m *TLPhoneDiscardCall114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPhoneDiscardCall114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPhoneDiscardCall114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLPhoneDiscardCall114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPhoneDiscardCall114.Merge(m, src)
}
func (m *TLPhoneDiscardCall114) XXX_Size() int {
	return m.Size()
}
func (m *TLPhoneDiscardCall114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPhoneDiscardCall114.DiscardUnknown(m)
}

var xxx_messageInfo_TLPhoneDiscardCall114 proto.InternalMessageInfo

func (m *TLPhoneDiscardCall114) GetVideo() bool {
	if m != nil {
		return m.Video
	}
	return false
}

func (m *TLPhoneDiscardCall114) GetPeer() *InputPhoneCall {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLPhoneDiscardCall114) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *TLPhoneDiscardCall114) GetReason() *PhoneCallDiscardReason {
	if m != nil {
		return m.Reason
	}
	return nil
}

func (m *TLPhoneDiscardCall114) GetConnectionId() int64 {
	if m != nil {
		return m.ConnectionId
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// phone.setCallRating#59ead627 flags:# user_initiative:flags.0?true peer:InputPhoneCall rating:int comment:string = Updates;
type TLPhoneSetCallRating114 struct {
	UserInitiative bool            `protobuf:"varint,2,opt,name=user_initiative,json=userInitiative,proto3" json:"user_initiative,omitempty"`
	Peer           *InputPhoneCall `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Rating         int32           `protobuf:"varint,4,opt,name=rating,proto3" json:"rating,omitempty"`
	Comment        string          `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (m *TLPhoneSetCallRating114) Reset()         { *m = TLPhoneSetCallRating114{} }
func (m *TLPhoneSetCallRating114) String() string { return proto.CompactTextString(m) }
func (*TLPhoneSetCallRating114) ProtoMessage()    {}
func (*TLPhoneSetCallRating114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{438}
}
func (m *TLPhoneSetCallRating114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPhoneSetCallRating114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPhoneSetCallRating114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLPhoneSetCallRating114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPhoneSetCallRating114.Merge(m, src)
}
func (m *TLPhoneSetCallRating114) XXX_Size() int {
	return m.Size()
}
func (m *TLPhoneSetCallRating114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPhoneSetCallRating114.DiscardUnknown(m)
}

var xxx_messageInfo_TLPhoneSetCallRating114 proto.InternalMessageInfo

func (m *TLPhoneSetCallRating114) GetUserInitiative() bool {
	if m != nil {
		return m.UserInitiative
	}
	return false
}

func (m *TLPhoneSetCallRating114) GetPeer() *InputPhoneCall {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLPhoneSetCallRating114) GetRating() int32 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *TLPhoneSetCallRating114) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// phone.sendSignalingData#ff7a9383 peer:InputPhoneCall data:bytes = Bool;
type TLPhoneSendSignalingData struct {
	Peer *InputPhoneCall `protobuf:"bytes,1,opt,name=peer,proto3" json:"peer,omitempty"`
	Data []byte          `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *TLPhoneSendSignalingData) Reset()         { *m = TLPhoneSendSignalingData{} }
func (m *TLPhoneSendSignalingData) String() string { return proto.CompactTextString(m) }
func (*TLPhoneSendSignalingData) ProtoMessage()    {}
func (*TLPhoneSendSignalingData) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{439}
}
func (m *TLPhoneSendSignalingData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPhoneSendSignalingData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPhoneSendSignalingData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLPhoneSendSignalingData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPhoneSendSignalingData.Merge(m, src)
}
func (m *TLPhoneSendSignalingData) XXX_Size() int {
	return m.Size()
}
func (m *TLPhoneSendSignalingData) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPhoneSendSignalingData.DiscardUnknown(m)
}

var xxx_messageInfo_TLPhoneSendSignalingData proto.InternalMessageInfo

func (m *TLPhoneSendSignalingData) GetPeer() *InputPhoneCall {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLPhoneSendSignalingData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// langpack.getLangPack#f2f2330a lang_pack:string lang_code:string = LangPackDifference;
type TLLangpackGetLangPack114 struct {
	LangPack string `protobuf:"bytes,1,opt,name=lang_pack,json=langPack,proto3" json:"lang_pack,omitempty"`
	LangCode string `protobuf:"bytes,2,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
}

func (m *TLLangpackGetLangPack114) Reset()         { *m = TLLangpackGetLangPack114{} }
func (m *TLLangpackGetLangPack114) String() string { return proto.CompactTextString(m) }
func (*TLLangpackGetLangPack114) ProtoMessage()    {}
func (*TLLangpackGetLangPack114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{440}
}
func (m *TLLangpackGetLangPack114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLLangpackGetLangPack114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLLangpackGetLangPack114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLLangpackGetLangPack114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLLangpackGetLangPack114.Merge(m, src)
}
func (m *TLLangpackGetLangPack114) XXX_Size() int {
	return m.Size()
}
func (m *TLLangpackGetLangPack114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLLangpackGetLangPack114.DiscardUnknown(m)
}

var xxx_messageInfo_TLLangpackGetLangPack114 proto.InternalMessageInfo

func (m *TLLangpackGetLangPack114) GetLangPack() string {
	if m != nil {
		return m.LangPack
	}
	return ""
}

func (m *TLLangpackGetLangPack114) GetLangCode() string {
	if m != nil {
		return m.LangCode
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// langpack.getStrings#efea3803 lang_pack:string lang_code:string keys:Vector<string> = Vector<LangPackString>;
type TLLangpackGetStrings114 struct {
	LangPack string   `protobuf:"bytes,1,opt,name=lang_pack,json=langPack,proto3" json:"lang_pack,omitempty"`
	LangCode string   `protobuf:"bytes,2,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	Keys     []string `protobuf:"bytes,3,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (m *TLLangpackGetStrings114) Reset()         { *m = TLLangpackGetStrings114{} }
func (m *TLLangpackGetStrings114) String() string { return proto.CompactTextString(m) }
func (*TLLangpackGetStrings114) ProtoMessage()    {}
func (*TLLangpackGetStrings114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{441}
}
func (m *TLLangpackGetStrings114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLLangpackGetStrings114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLLangpackGetStrings114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLLangpackGetStrings114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLLangpackGetStrings114.Merge(m, src)
}
func (m *TLLangpackGetStrings114) XXX_Size() int {
	return m.Size()
}
func (m *TLLangpackGetStrings114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLLangpackGetStrings114.DiscardUnknown(m)
}

var xxx_messageInfo_TLLangpackGetStrings114 proto.InternalMessageInfo

func (m *TLLangpackGetStrings114) GetLangPack() string {
	if m != nil {
		return m.LangPack
	}
	return ""
}

func (m *TLLangpackGetStrings114) GetLangCode() string {
	if m != nil {
		return m.LangCode
	}
	return ""
}

func (m *TLLangpackGetStrings114) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// langpack.getDifference#cd984aa5 lang_pack:string lang_code:string from_version:int = LangPackDifference;
type TLLangpackGetDifference114 struct {
	LangPack    string `protobuf:"bytes,1,opt,name=lang_pack,json=langPack,proto3" json:"lang_pack,omitempty"`
	LangCode    string `protobuf:"bytes,2,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	FromVersion int32  `protobuf:"varint,3,opt,name=from_version,json=fromVersion,proto3" json:"from_version,omitempty"`
}

func (m *TLLangpackGetDifference114) Reset()         { *m = TLLangpackGetDifference114{} }
func (m *TLLangpackGetDifference114) String() string { return proto.CompactTextString(m) }
func (*TLLangpackGetDifference114) ProtoMessage()    {}
func (*TLLangpackGetDifference114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{442}
}
func (m *TLLangpackGetDifference114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLLangpackGetDifference114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLLangpackGetDifference114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLLangpackGetDifference114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLLangpackGetDifference114.Merge(m, src)
}
func (m *TLLangpackGetDifference114) XXX_Size() int {
	return m.Size()
}
func (m *TLLangpackGetDifference114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLLangpackGetDifference114.DiscardUnknown(m)
}

var xxx_messageInfo_TLLangpackGetDifference114 proto.InternalMessageInfo

func (m *TLLangpackGetDifference114) GetLangPack() string {
	if m != nil {
		return m.LangPack
	}
	return ""
}

func (m *TLLangpackGetDifference114) GetLangCode() string {
	if m != nil {
		return m.LangCode
	}
	return ""
}

func (m *TLLangpackGetDifference114) GetFromVersion() int32 {
	if m != nil {
		return m.FromVersion
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// langpack.getLanguages#42c6978f lang_pack:string = Vector<LangPackLanguage>;
type TLLangpackGetLanguages114 struct {
	LangPack string `protobuf:"bytes,1,opt,name=lang_pack,json=langPack,proto3" json:"lang_pack,omitempty"`
}

func (m *TLLangpackGetLanguages114) Reset()         { *m = TLLangpackGetLanguages114{} }
func (m *TLLangpackGetLanguages114) String() string { return proto.CompactTextString(m) }
func (*TLLangpackGetLanguages114) ProtoMessage()    {}
func (*TLLangpackGetLanguages114) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{443}
}
func (m *TLLangpackGetLanguages114) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLLangpackGetLanguages114) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLLangpackGetLanguages114.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLLangpackGetLanguages114) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLLangpackGetLanguages114.Merge(m, src)
}
func (m *TLLangpackGetLanguages114) XXX_Size() int {
	return m.Size()
}
func (m *TLLangpackGetLanguages114) XXX_DiscardUnknown() {
	xxx_messageInfo_TLLangpackGetLanguages114.DiscardUnknown(m)
}

var xxx_messageInfo_TLLangpackGetLanguages114 proto.InternalMessageInfo

func (m *TLLangpackGetLanguages114) GetLangPack() string {
	if m != nil {
		return m.LangPack
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// langpack.getLanguage#6a596502 lang_pack:string lang_code:string = LangPackLanguage;
type TLLangpackGetLanguage struct {
	LangPack string `protobuf:"bytes,1,opt,name=lang_pack,json=langPack,proto3" json:"lang_pack,omitempty"`
	LangCode string `protobuf:"bytes,2,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
}

func (m *TLLangpackGetLanguage) Reset()         { *m = TLLangpackGetLanguage{} }
func (m *TLLangpackGetLanguage) String() string { return proto.CompactTextString(m) }
func (*TLLangpackGetLanguage) ProtoMessage()    {}
func (*TLLangpackGetLanguage) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{444}
}
func (m *TLLangpackGetLanguage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLLangpackGetLanguage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLLangpackGetLanguage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLLangpackGetLanguage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLLangpackGetLanguage.Merge(m, src)
}
func (m *TLLangpackGetLanguage) XXX_Size() int {
	return m.Size()
}
func (m *TLLangpackGetLanguage) XXX_DiscardUnknown() {
	xxx_messageInfo_TLLangpackGetLanguage.DiscardUnknown(m)
}

var xxx_messageInfo_TLLangpackGetLanguage proto.InternalMessageInfo

func (m *TLLangpackGetLanguage) GetLangPack() string {
	if m != nil {
		return m.LangPack
	}
	return ""
}

func (m *TLLangpackGetLanguage) GetLangCode() string {
	if m != nil {
		return m.LangCode
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// folders.editPeerFolders#6847d0ab folder_peers:Vector<InputFolderPeer> = Updates;
type TLFoldersEditPeerFolders struct {
	FolderPeers []*InputFolderPeer `protobuf:"bytes,1,rep,name=folder_peers,json=folderPeers,proto3" json:"folder_peers,omitempty"`
}

func (m *TLFoldersEditPeerFolders) Reset()         { *m = TLFoldersEditPeerFolders{} }
func (m *TLFoldersEditPeerFolders) String() string { return proto.CompactTextString(m) }
func (*TLFoldersEditPeerFolders) ProtoMessage()    {}
func (*TLFoldersEditPeerFolders) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{445}
}
func (m *TLFoldersEditPeerFolders) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLFoldersEditPeerFolders) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLFoldersEditPeerFolders.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLFoldersEditPeerFolders) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLFoldersEditPeerFolders.Merge(m, src)
}
func (m *TLFoldersEditPeerFolders) XXX_Size() int {
	return m.Size()
}
func (m *TLFoldersEditPeerFolders) XXX_DiscardUnknown() {
	xxx_messageInfo_TLFoldersEditPeerFolders.DiscardUnknown(m)
}

var xxx_messageInfo_TLFoldersEditPeerFolders proto.InternalMessageInfo

func (m *TLFoldersEditPeerFolders) GetFolderPeers() []*InputFolderPeer {
	if m != nil {
		return m.FolderPeers
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// folders.deleteFolder#1c295881 folder_id:int = Updates;
type TLFoldersDeleteFolder struct {
	FolderId int32 `protobuf:"varint,1,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
}

func (m *TLFoldersDeleteFolder) Reset()         { *m = TLFoldersDeleteFolder{} }
func (m *TLFoldersDeleteFolder) String() string { return proto.CompactTextString(m) }
func (*TLFoldersDeleteFolder) ProtoMessage()    {}
func (*TLFoldersDeleteFolder) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{446}
}
func (m *TLFoldersDeleteFolder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLFoldersDeleteFolder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLFoldersDeleteFolder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLFoldersDeleteFolder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLFoldersDeleteFolder.Merge(m, src)
}
func (m *TLFoldersDeleteFolder) XXX_Size() int {
	return m.Size()
}
func (m *TLFoldersDeleteFolder) XXX_DiscardUnknown() {
	xxx_messageInfo_TLFoldersDeleteFolder.DiscardUnknown(m)
}

var xxx_messageInfo_TLFoldersDeleteFolder proto.InternalMessageInfo

func (m *TLFoldersDeleteFolder) GetFolderId() int32 {
	if m != nil {
		return m.FolderId
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// stats.getBroadcastStats#ab42441a flags:# dark:flags.0?true channel:InputChannel = stats.BroadcastStats;
type TLStatsGetBroadcastStats struct {
	Dark    bool          `protobuf:"varint,2,opt,name=dark,proto3" json:"dark,omitempty"`
	Channel *InputChannel `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *TLStatsGetBroadcastStats) Reset()         { *m = TLStatsGetBroadcastStats{} }
func (m *TLStatsGetBroadcastStats) String() string { return proto.CompactTextString(m) }
func (*TLStatsGetBroadcastStats) ProtoMessage()    {}
func (*TLStatsGetBroadcastStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{447}
}
func (m *TLStatsGetBroadcastStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLStatsGetBroadcastStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLStatsGetBroadcastStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLStatsGetBroadcastStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLStatsGetBroadcastStats.Merge(m, src)
}
func (m *TLStatsGetBroadcastStats) XXX_Size() int {
	return m.Size()
}
func (m *TLStatsGetBroadcastStats) XXX_DiscardUnknown() {
	xxx_messageInfo_TLStatsGetBroadcastStats.DiscardUnknown(m)
}

var xxx_messageInfo_TLStatsGetBroadcastStats proto.InternalMessageInfo

func (m *TLStatsGetBroadcastStats) GetDark() bool {
	if m != nil {
		return m.Dark
	}
	return false
}

func (m *TLStatsGetBroadcastStats) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// stats.loadAsyncGraph#621d5fa0 flags:# token:string x:flags.0?long = StatsGraph;
type TLStatsLoadAsyncGraph struct {
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	X     int64  `protobuf:"varint,3,opt,name=x,proto3" json:"x,omitempty"`
}

func (m *TLStatsLoadAsyncGraph) Reset()         { *m = TLStatsLoadAsyncGraph{} }
func (m *TLStatsLoadAsyncGraph) String() string { return proto.CompactTextString(m) }
func (*TLStatsLoadAsyncGraph) ProtoMessage()    {}
func (*TLStatsLoadAsyncGraph) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{448}
}
func (m *TLStatsLoadAsyncGraph) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLStatsLoadAsyncGraph) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLStatsLoadAsyncGraph.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLStatsLoadAsyncGraph) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLStatsLoadAsyncGraph.Merge(m, src)
}
func (m *TLStatsLoadAsyncGraph) XXX_Size() int {
	return m.Size()
}
func (m *TLStatsLoadAsyncGraph) XXX_DiscardUnknown() {
	xxx_messageInfo_TLStatsLoadAsyncGraph.DiscardUnknown(m)
}

var xxx_messageInfo_TLStatsLoadAsyncGraph proto.InternalMessageInfo

func (m *TLStatsLoadAsyncGraph) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *TLStatsLoadAsyncGraph) GetX() int64 {
	if m != nil {
		return m.X
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// account.getGlobalPrivacySettings#eb2b4cf6 = GlobalPrivacySettings;
type TLAccountGetGlobalPrivacySettings struct {
}

func (m *TLAccountGetGlobalPrivacySettings) Reset()         { *m = TLAccountGetGlobalPrivacySettings{} }
func (m *TLAccountGetGlobalPrivacySettings) String() string { return proto.CompactTextString(m) }
func (*TLAccountGetGlobalPrivacySettings) ProtoMessage()    {}
func (*TLAccountGetGlobalPrivacySettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{449}
}
func (m *TLAccountGetGlobalPrivacySettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountGetGlobalPrivacySettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountGetGlobalPrivacySettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountGetGlobalPrivacySettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountGetGlobalPrivacySettings.Merge(m, src)
}
func (m *TLAccountGetGlobalPrivacySettings) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountGetGlobalPrivacySettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountGetGlobalPrivacySettings.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountGetGlobalPrivacySettings proto.InternalMessageInfo

///////////////////////////////////////////////////////////////////////////////
// account.setGlobalPrivacySettings#1edaaac2 settings:GlobalPrivacySettings = GlobalPrivacySettings;
type TLAccountSetGlobalPrivacySettings struct {
	Settings *GlobalPrivacySettings `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (m *TLAccountSetGlobalPrivacySettings) Reset()         { *m = TLAccountSetGlobalPrivacySettings{} }
func (m *TLAccountSetGlobalPrivacySettings) String() string { return proto.CompactTextString(m) }
func (*TLAccountSetGlobalPrivacySettings) ProtoMessage()    {}
func (*TLAccountSetGlobalPrivacySettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{450}
}
func (m *TLAccountSetGlobalPrivacySettings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLAccountSetGlobalPrivacySettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLAccountSetGlobalPrivacySettings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLAccountSetGlobalPrivacySettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLAccountSetGlobalPrivacySettings.Merge(m, src)
}
func (m *TLAccountSetGlobalPrivacySettings) XXX_Size() int {
	return m.Size()
}
func (m *TLAccountSetGlobalPrivacySettings) XXX_DiscardUnknown() {
	xxx_messageInfo_TLAccountSetGlobalPrivacySettings.DiscardUnknown(m)
}

var xxx_messageInfo_TLAccountSetGlobalPrivacySettings proto.InternalMessageInfo

func (m *TLAccountSetGlobalPrivacySettings) GetSettings() *GlobalPrivacySettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// stats.getMegagroupStats#dcdf8607 flags:# dark:flags.0?true channel:InputChannel = stats.MegagroupStats;
type TLStatsGetMegagroupStats struct {
	Dark    bool          `protobuf:"varint,2,opt,name=dark,proto3" json:"dark,omitempty"`
	Channel *InputChannel `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (m *TLStatsGetMegagroupStats) Reset()         { *m = TLStatsGetMegagroupStats{} }
func (m *TLStatsGetMegagroupStats) String() string { return proto.CompactTextString(m) }
func (*TLStatsGetMegagroupStats) ProtoMessage()    {}
func (*TLStatsGetMegagroupStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{451}
}
func (m *TLStatsGetMegagroupStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLStatsGetMegagroupStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLStatsGetMegagroupStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLStatsGetMegagroupStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLStatsGetMegagroupStats.Merge(m, src)
}
func (m *TLStatsGetMegagroupStats) XXX_Size() int {
	return m.Size()
}
func (m *TLStatsGetMegagroupStats) XXX_DiscardUnknown() {
	xxx_messageInfo_TLStatsGetMegagroupStats.DiscardUnknown(m)
}

var xxx_messageInfo_TLStatsGetMegagroupStats proto.InternalMessageInfo

func (m *TLStatsGetMegagroupStats) GetDark() bool {
	if m != nil {
		return m.Dark
	}
	return false
}

func (m *TLStatsGetMegagroupStats) GetChannel() *InputChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// photos.uploadProfilePhoto#89f30f69 flags:# file:flags.0?InputFile video:flags.1?InputFile video_start_ts:flags.2?double = photos.Photo;
type TLPhotosUploadProfilePhoto117 struct {
	File         *InputFile `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`
	Video        *InputFile `protobuf:"bytes,3,opt,name=video,proto3" json:"video,omitempty"`
	VideoStartTs float64    `protobuf:"fixed64,4,opt,name=video_start_ts,json=videoStartTs,proto3" json:"video_start_ts,omitempty"`
}

func (m *TLPhotosUploadProfilePhoto117) Reset()         { *m = TLPhotosUploadProfilePhoto117{} }
func (m *TLPhotosUploadProfilePhoto117) String() string { return proto.CompactTextString(m) }
func (*TLPhotosUploadProfilePhoto117) ProtoMessage()    {}
func (*TLPhotosUploadProfilePhoto117) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{452}
}
func (m *TLPhotosUploadProfilePhoto117) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPhotosUploadProfilePhoto117) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPhotosUploadProfilePhoto117.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLPhotosUploadProfilePhoto117) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPhotosUploadProfilePhoto117.Merge(m, src)
}
func (m *TLPhotosUploadProfilePhoto117) XXX_Size() int {
	return m.Size()
}
func (m *TLPhotosUploadProfilePhoto117) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPhotosUploadProfilePhoto117.DiscardUnknown(m)
}

var xxx_messageInfo_TLPhotosUploadProfilePhoto117 proto.InternalMessageInfo

func (m *TLPhotosUploadProfilePhoto117) GetFile() *InputFile {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *TLPhotosUploadProfilePhoto117) GetVideo() *InputFile {
	if m != nil {
		return m.Video
	}
	return nil
}

func (m *TLPhotosUploadProfilePhoto117) GetVideoStartTs() float64 {
	if m != nil {
		return m.VideoStartTs
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// help.dismissSuggestion#77fa99f suggestion:string = Bool;
type TLHelpDismissSuggestion struct {
	Suggestion string `protobuf:"bytes,1,opt,name=suggestion,proto3" json:"suggestion,omitempty"`
}

func (m *TLHelpDismissSuggestion) Reset()         { *m = TLHelpDismissSuggestion{} }
func (m *TLHelpDismissSuggestion) String() string { return proto.CompactTextString(m) }
func (*TLHelpDismissSuggestion) ProtoMessage()    {}
func (*TLHelpDismissSuggestion) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{453}
}
func (m *TLHelpDismissSuggestion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpDismissSuggestion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpDismissSuggestion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpDismissSuggestion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpDismissSuggestion.Merge(m, src)
}
func (m *TLHelpDismissSuggestion) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpDismissSuggestion) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpDismissSuggestion.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpDismissSuggestion proto.InternalMessageInfo

func (m *TLHelpDismissSuggestion) GetSuggestion() string {
	if m != nil {
		return m.Suggestion
	}
	return ""
}

///////////////////////////////////////////////////////////////////////////////
// photos.updateProfilePhoto#72d4742c id:InputPhoto = photos.Photo;
type TLPhotosUpdateProfilePhoto117 struct {
	Id *InputPhoto `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *TLPhotosUpdateProfilePhoto117) Reset()         { *m = TLPhotosUpdateProfilePhoto117{} }
func (m *TLPhotosUpdateProfilePhoto117) String() string { return proto.CompactTextString(m) }
func (*TLPhotosUpdateProfilePhoto117) ProtoMessage()    {}
func (*TLPhotosUpdateProfilePhoto117) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{454}
}
func (m *TLPhotosUpdateProfilePhoto117) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLPhotosUpdateProfilePhoto117) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLPhotosUpdateProfilePhoto117.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLPhotosUpdateProfilePhoto117) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLPhotosUpdateProfilePhoto117.Merge(m, src)
}
func (m *TLPhotosUpdateProfilePhoto117) XXX_Size() int {
	return m.Size()
}
func (m *TLPhotosUpdateProfilePhoto117) XXX_DiscardUnknown() {
	xxx_messageInfo_TLPhotosUpdateProfilePhoto117.DiscardUnknown(m)
}

var xxx_messageInfo_TLPhotosUpdateProfilePhoto117 proto.InternalMessageInfo

func (m *TLPhotosUpdateProfilePhoto117) GetId() *InputPhoto {
	if m != nil {
		return m.Id
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// help.getCountriesList#735787a8 lang_code:string hash:int = help.CountriesList;
type TLHelpGetCountriesList struct {
	LangCode string `protobuf:"bytes,1,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	Hash     int32  `protobuf:"varint,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TLHelpGetCountriesList) Reset()         { *m = TLHelpGetCountriesList{} }
func (m *TLHelpGetCountriesList) String() string { return proto.CompactTextString(m) }
func (*TLHelpGetCountriesList) ProtoMessage()    {}
func (*TLHelpGetCountriesList) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{455}
}
func (m *TLHelpGetCountriesList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLHelpGetCountriesList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLHelpGetCountriesList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLHelpGetCountriesList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLHelpGetCountriesList.Merge(m, src)
}
func (m *TLHelpGetCountriesList) XXX_Size() int {
	return m.Size()
}
func (m *TLHelpGetCountriesList) XXX_DiscardUnknown() {
	xxx_messageInfo_TLHelpGetCountriesList.DiscardUnknown(m)
}

var xxx_messageInfo_TLHelpGetCountriesList proto.InternalMessageInfo

func (m *TLHelpGetCountriesList) GetLangCode() string {
	if m != nil {
		return m.LangCode
	}
	return ""
}

func (m *TLHelpGetCountriesList) GetHash() int32 {
	if m != nil {
		return m.Hash
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// messages.sendEncrypted#44fa7a15 flags:# silent:flags.0?true peer:InputEncryptedChat random_id:long data:bytes = messages.SentEncryptedMessage;
type TLMessagesSendEncrypted118 struct {
	Silent   bool                `protobuf:"varint,2,opt,name=silent,proto3" json:"silent,omitempty"`
	Peer     *InputEncryptedChat `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	RandomId int64               `protobuf:"varint,4,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	Data     []byte              `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *TLMessagesSendEncrypted118) Reset()         { *m = TLMessagesSendEncrypted118{} }
func (m *TLMessagesSendEncrypted118) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSendEncrypted118) ProtoMessage()    {}
func (*TLMessagesSendEncrypted118) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{456}
}
func (m *TLMessagesSendEncrypted118) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSendEncrypted118) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSendEncrypted118.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSendEncrypted118) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSendEncrypted118.Merge(m, src)
}
func (m *TLMessagesSendEncrypted118) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSendEncrypted118) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSendEncrypted118.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSendEncrypted118 proto.InternalMessageInfo

func (m *TLMessagesSendEncrypted118) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *TLMessagesSendEncrypted118) GetPeer() *InputEncryptedChat {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSendEncrypted118) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *TLMessagesSendEncrypted118) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.getBotCallbackAnswer#9342ca07 flags:# game:flags.1?true peer:InputPeer msg_id:int data:flags.0?bytes password:flags.2?InputCheckPasswordSRP = messages.BotCallbackAnswer;
type TLMessagesGetBotCallbackAnswer118 struct {
	Game     bool                   `protobuf:"varint,2,opt,name=game,proto3" json:"game,omitempty"`
	Peer     *InputPeer             `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	MsgId    int32                  `protobuf:"varint,4,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	Data     []byte                 `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	Password *InputCheckPasswordSRP `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *TLMessagesGetBotCallbackAnswer118) Reset()         { *m = TLMessagesGetBotCallbackAnswer118{} }
func (m *TLMessagesGetBotCallbackAnswer118) String() string { return proto.CompactTextString(m) }
func (*TLMessagesGetBotCallbackAnswer118) ProtoMessage()    {}
func (*TLMessagesGetBotCallbackAnswer118) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{457}
}
func (m *TLMessagesGetBotCallbackAnswer118) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesGetBotCallbackAnswer118) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesGetBotCallbackAnswer118.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesGetBotCallbackAnswer118) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesGetBotCallbackAnswer118.Merge(m, src)
}
func (m *TLMessagesGetBotCallbackAnswer118) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesGetBotCallbackAnswer118) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesGetBotCallbackAnswer118.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesGetBotCallbackAnswer118 proto.InternalMessageInfo

func (m *TLMessagesGetBotCallbackAnswer118) GetGame() bool {
	if m != nil {
		return m.Game
	}
	return false
}

func (m *TLMessagesGetBotCallbackAnswer118) GetPeer() *InputPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesGetBotCallbackAnswer118) GetMsgId() int32 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *TLMessagesGetBotCallbackAnswer118) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TLMessagesGetBotCallbackAnswer118) GetPassword() *InputCheckPasswordSRP {
	if m != nil {
		return m.Password
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// messages.sendEncryptedFile#5559481d flags:# silent:flags.0?true peer:InputEncryptedChat random_id:long data:bytes file:InputEncryptedFile = messages.SentEncryptedMessage;
type TLMessagesSendEncryptedFile118 struct {
	Silent   bool                `protobuf:"varint,2,opt,name=silent,proto3" json:"silent,omitempty"`
	Peer     *InputEncryptedChat `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	RandomId int64               `protobuf:"varint,4,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	Data     []byte              `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	File     *InputEncryptedFile `protobuf:"bytes,6,opt,name=file,proto3" json:"file,omitempty"`
}

func (m *TLMessagesSendEncryptedFile118) Reset()         { *m = TLMessagesSendEncryptedFile118{} }
func (m *TLMessagesSendEncryptedFile118) String() string { return proto.CompactTextString(m) }
func (*TLMessagesSendEncryptedFile118) ProtoMessage()    {}
func (*TLMessagesSendEncryptedFile118) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{458}
}
func (m *TLMessagesSendEncryptedFile118) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLMessagesSendEncryptedFile118) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLMessagesSendEncryptedFile118.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLMessagesSendEncryptedFile118) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLMessagesSendEncryptedFile118.Merge(m, src)
}
func (m *TLMessagesSendEncryptedFile118) XXX_Size() int {
	return m.Size()
}
func (m *TLMessagesSendEncryptedFile118) XXX_DiscardUnknown() {
	xxx_messageInfo_TLMessagesSendEncryptedFile118.DiscardUnknown(m)
}

var xxx_messageInfo_TLMessagesSendEncryptedFile118 proto.InternalMessageInfo

func (m *TLMessagesSendEncryptedFile118) GetSilent() bool {
	if m != nil {
		return m.Silent
	}
	return false
}

func (m *TLMessagesSendEncryptedFile118) GetPeer() *InputEncryptedChat {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *TLMessagesSendEncryptedFile118) GetRandomId() int64 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *TLMessagesSendEncryptedFile118) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TLMessagesSendEncryptedFile118) GetFile() *InputEncryptedFile {
	if m != nil {
		return m.File
	}
	return nil
}

///////////////////////////////////////////////////////////////////////////////
// langpack.getDifference#9d51e814 lang_code:string from_version:int = LangPackDifference;
type TLLangpackGetDifference118 struct {
	LangCode    string `protobuf:"bytes,1,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	FromVersion int32  `protobuf:"varint,2,opt,name=from_version,json=fromVersion,proto3" json:"from_version,omitempty"`
}

func (m *TLLangpackGetDifference118) Reset()         { *m = TLLangpackGetDifference118{} }
func (m *TLLangpackGetDifference118) String() string { return proto.CompactTextString(m) }
func (*TLLangpackGetDifference118) ProtoMessage()    {}
func (*TLLangpackGetDifference118) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{459}
}
func (m *TLLangpackGetDifference118) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TLLangpackGetDifference118) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TLLangpackGetDifference118.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TLLangpackGetDifference118) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TLLangpackGetDifference118.Merge(m, src)
}
func (m *TLLangpackGetDifference118) XXX_Size() int {
	return m.Size()
}
func (m *TLLangpackGetDifference118) XXX_DiscardUnknown() {
	xxx_messageInfo_TLLangpackGetDifference118.DiscardUnknown(m)
}

var xxx_messageInfo_TLLangpackGetDifference118 proto.InternalMessageInfo

func (m *TLLangpackGetDifference118) GetLangCode() string {
	if m != nil {
		return m.LangCode
	}
	return ""
}

func (m *TLLangpackGetDifference118) GetFromVersion() int32 {
	if m != nil {
		return m.FromVersion
	}
	return 0
}

///////////////////////////////////////////////////////////////////////////////
// Vector api result type
type Vector_WallPaper struct {
	Datas []*WallPaper `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (m *Vector_WallPaper) Reset()         { *m = Vector_WallPaper{} }
func (m *Vector_WallPaper) String() string { return proto.CompactTextString(m) }
func (*Vector_WallPaper) ProtoMessage()    {}
func (*Vector_WallPaper) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{460}
}
func (m *Vector_WallPaper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_WallPaper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_WallPaper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_WallPaper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_WallPaper.Merge(m, src)
}
func (m *Vector_WallPaper) XXX_Size() int {
	return m.Size()
}
func (m *Vector_WallPaper) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_WallPaper.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_WallPaper proto.InternalMessageInfo

func (m *Vector_WallPaper) GetDatas() []*WallPaper {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_User struct {
	Datas []*User `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (m *Vector_User) Reset()         { *m = Vector_User{} }
func (m *Vector_User) String() string { return proto.CompactTextString(m) }
func (*Vector_User) ProtoMessage()    {}
func (*Vector_User) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{461}
}
func (m *Vector_User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_User.Merge(m, src)
}
func (m *Vector_User) XXX_Size() int {
	return m.Size()
}
func (m *Vector_User) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_User.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_User proto.InternalMessageInfo

func (m *Vector_User) GetDatas() []*User {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_UserInfo struct {
	Datas []*UserInfo `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (m *Vector_UserInfo) Reset()         { *m = Vector_UserInfo{} }
func (m *Vector_UserInfo) String() string { return proto.CompactTextString(m) }
func (*Vector_UserInfo) ProtoMessage()    {}
func (*Vector_UserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{462}
}
func (m *Vector_UserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_UserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_UserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_UserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_UserInfo.Merge(m, src)
}
func (m *Vector_UserInfo) XXX_Size() int {
	return m.Size()
}
func (m *Vector_UserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_UserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_UserInfo proto.InternalMessageInfo

func (m *Vector_UserInfo) GetDatas() []*UserInfo {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_ContactStatus struct {
	Datas []*ContactStatus `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (m *Vector_ContactStatus) Reset()         { *m = Vector_ContactStatus{} }
func (m *Vector_ContactStatus) String() string { return proto.CompactTextString(m) }
func (*Vector_ContactStatus) ProtoMessage()    {}
func (*Vector_ContactStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{463}
}
func (m *Vector_ContactStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_ContactStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_ContactStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_ContactStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_ContactStatus.Merge(m, src)
}
func (m *Vector_ContactStatus) XXX_Size() int {
	return m.Size()
}
func (m *Vector_ContactStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_ContactStatus.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_ContactStatus proto.InternalMessageInfo

func (m *Vector_ContactStatus) GetDatas() []*ContactStatus {
	if m != nil {
		return m.Datas
	}
	return nil
}

type VectorInt struct {
	Datas []int32 `protobuf:"varint,1,rep,packed,name=datas,proto3" json:"datas,omitempty"`
}

func (m *VectorInt) Reset()         { *m = VectorInt{} }
func (m *VectorInt) String() string { return proto.CompactTextString(m) }
func (*VectorInt) ProtoMessage()    {}
func (*VectorInt) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{464}
}
func (m *VectorInt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VectorInt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VectorInt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VectorInt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VectorInt.Merge(m, src)
}
func (m *VectorInt) XXX_Size() int {
	return m.Size()
}
func (m *VectorInt) XXX_DiscardUnknown() {
	xxx_messageInfo_VectorInt.DiscardUnknown(m)
}

var xxx_messageInfo_VectorInt proto.InternalMessageInfo

func (m *VectorInt) GetDatas() []int32 {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_ReceivedNotifyMessage struct {
	Datas []*ReceivedNotifyMessage `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (m *Vector_ReceivedNotifyMessage) Reset()         { *m = Vector_ReceivedNotifyMessage{} }
func (m *Vector_ReceivedNotifyMessage) String() string { return proto.CompactTextString(m) }
func (*Vector_ReceivedNotifyMessage) ProtoMessage()    {}
func (*Vector_ReceivedNotifyMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{465}
}
func (m *Vector_ReceivedNotifyMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_ReceivedNotifyMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_ReceivedNotifyMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_ReceivedNotifyMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_ReceivedNotifyMessage.Merge(m, src)
}
func (m *Vector_ReceivedNotifyMessage) XXX_Size() int {
	return m.Size()
}
func (m *Vector_ReceivedNotifyMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_ReceivedNotifyMessage.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_ReceivedNotifyMessage proto.InternalMessageInfo

func (m *Vector_ReceivedNotifyMessage) GetDatas() []*ReceivedNotifyMessage {
	if m != nil {
		return m.Datas
	}
	return nil
}

type VectorLong struct {
	Datas []int64 `protobuf:"varint,1,rep,packed,name=datas,proto3" json:"datas,omitempty"`
}

func (m *VectorLong) Reset()         { *m = VectorLong{} }
func (m *VectorLong) String() string { return proto.CompactTextString(m) }
func (*VectorLong) ProtoMessage()    {}
func (*VectorLong) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{466}
}
func (m *VectorLong) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VectorLong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VectorLong.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VectorLong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VectorLong.Merge(m, src)
}
func (m *VectorLong) XXX_Size() int {
	return m.Size()
}
func (m *VectorLong) XXX_DiscardUnknown() {
	xxx_messageInfo_VectorLong.DiscardUnknown(m)
}

var xxx_messageInfo_VectorLong proto.InternalMessageInfo

func (m *VectorLong) GetDatas() []int64 {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_StickerSetCovered struct {
	Datas []*StickerSetCovered `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (m *Vector_StickerSetCovered) Reset()         { *m = Vector_StickerSetCovered{} }
func (m *Vector_StickerSetCovered) String() string { return proto.CompactTextString(m) }
func (*Vector_StickerSetCovered) ProtoMessage()    {}
func (*Vector_StickerSetCovered) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{467}
}
func (m *Vector_StickerSetCovered) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_StickerSetCovered) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_StickerSetCovered.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_StickerSetCovered) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_StickerSetCovered.Merge(m, src)
}
func (m *Vector_StickerSetCovered) XXX_Size() int {
	return m.Size()
}
func (m *Vector_StickerSetCovered) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_StickerSetCovered.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_StickerSetCovered proto.InternalMessageInfo

func (m *Vector_StickerSetCovered) GetDatas() []*StickerSetCovered {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_CdnFileHash struct {
	Datas []*CdnFileHash `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (m *Vector_CdnFileHash) Reset()         { *m = Vector_CdnFileHash{} }
func (m *Vector_CdnFileHash) String() string { return proto.CompactTextString(m) }
func (*Vector_CdnFileHash) ProtoMessage()    {}
func (*Vector_CdnFileHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{468}
}
func (m *Vector_CdnFileHash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_CdnFileHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_CdnFileHash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_CdnFileHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_CdnFileHash.Merge(m, src)
}
func (m *Vector_CdnFileHash) XXX_Size() int {
	return m.Size()
}
func (m *Vector_CdnFileHash) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_CdnFileHash.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_CdnFileHash proto.InternalMessageInfo

func (m *Vector_CdnFileHash) GetDatas() []*CdnFileHash {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_LangPackString struct {
	Datas []*LangPackString `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (m *Vector_LangPackString) Reset()         { *m = Vector_LangPackString{} }
func (m *Vector_LangPackString) String() string { return proto.CompactTextString(m) }
func (*Vector_LangPackString) ProtoMessage()    {}
func (*Vector_LangPackString) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{469}
}
func (m *Vector_LangPackString) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_LangPackString) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_LangPackString.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_LangPackString) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_LangPackString.Merge(m, src)
}
func (m *Vector_LangPackString) XXX_Size() int {
	return m.Size()
}
func (m *Vector_LangPackString) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_LangPackString.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_LangPackString proto.InternalMessageInfo

func (m *Vector_LangPackString) GetDatas() []*LangPackString {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_LangPackLanguage struct {
	Datas []*LangPackLanguage `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (m *Vector_LangPackLanguage) Reset()         { *m = Vector_LangPackLanguage{} }
func (m *Vector_LangPackLanguage) String() string { return proto.CompactTextString(m) }
func (*Vector_LangPackLanguage) ProtoMessage()    {}
func (*Vector_LangPackLanguage) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{470}
}
func (m *Vector_LangPackLanguage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_LangPackLanguage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_LangPackLanguage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_LangPackLanguage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_LangPackLanguage.Merge(m, src)
}
func (m *Vector_LangPackLanguage) XXX_Size() int {
	return m.Size()
}
func (m *Vector_LangPackLanguage) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_LangPackLanguage.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_LangPackLanguage proto.InternalMessageInfo

func (m *Vector_LangPackLanguage) GetDatas() []*LangPackLanguage {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_SecureValue struct {
	Datas []*SecureValue `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (m *Vector_SecureValue) Reset()         { *m = Vector_SecureValue{} }
func (m *Vector_SecureValue) String() string { return proto.CompactTextString(m) }
func (*Vector_SecureValue) ProtoMessage()    {}
func (*Vector_SecureValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{471}
}
func (m *Vector_SecureValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_SecureValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_SecureValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_SecureValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_SecureValue.Merge(m, src)
}
func (m *Vector_SecureValue) XXX_Size() int {
	return m.Size()
}
func (m *Vector_SecureValue) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_SecureValue.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_SecureValue proto.InternalMessageInfo

func (m *Vector_SecureValue) GetDatas() []*SecureValue {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_SavedContact struct {
	Datas []*SavedContact `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (m *Vector_SavedContact) Reset()         { *m = Vector_SavedContact{} }
func (m *Vector_SavedContact) String() string { return proto.CompactTextString(m) }
func (*Vector_SavedContact) ProtoMessage()    {}
func (*Vector_SavedContact) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{472}
}
func (m *Vector_SavedContact) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_SavedContact) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_SavedContact.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_SavedContact) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_SavedContact.Merge(m, src)
}
func (m *Vector_SavedContact) XXX_Size() int {
	return m.Size()
}
func (m *Vector_SavedContact) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_SavedContact.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_SavedContact proto.InternalMessageInfo

func (m *Vector_SavedContact) GetDatas() []*SavedContact {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_MessageRange struct {
	Datas []*MessageRange `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (m *Vector_MessageRange) Reset()         { *m = Vector_MessageRange{} }
func (m *Vector_MessageRange) String() string { return proto.CompactTextString(m) }
func (*Vector_MessageRange) ProtoMessage()    {}
func (*Vector_MessageRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{473}
}
func (m *Vector_MessageRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_MessageRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_MessageRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_MessageRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_MessageRange.Merge(m, src)
}
func (m *Vector_MessageRange) XXX_Size() int {
	return m.Size()
}
func (m *Vector_MessageRange) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_MessageRange.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_MessageRange proto.InternalMessageInfo

func (m *Vector_MessageRange) GetDatas() []*MessageRange {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_DialogPeer struct {
	Datas []*DialogPeer `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (m *Vector_DialogPeer) Reset()         { *m = Vector_DialogPeer{} }
func (m *Vector_DialogPeer) String() string { return proto.CompactTextString(m) }
func (*Vector_DialogPeer) ProtoMessage()    {}
func (*Vector_DialogPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{474}
}
func (m *Vector_DialogPeer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_DialogPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_DialogPeer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_DialogPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_DialogPeer.Merge(m, src)
}
func (m *Vector_DialogPeer) XXX_Size() int {
	return m.Size()
}
func (m *Vector_DialogPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_DialogPeer.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_DialogPeer proto.InternalMessageInfo

func (m *Vector_DialogPeer) GetDatas() []*DialogPeer {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_EmojiLanguage struct {
	Datas []*EmojiLanguage `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (m *Vector_EmojiLanguage) Reset()         { *m = Vector_EmojiLanguage{} }
func (m *Vector_EmojiLanguage) String() string { return proto.CompactTextString(m) }
func (*Vector_EmojiLanguage) ProtoMessage()    {}
func (*Vector_EmojiLanguage) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{475}
}
func (m *Vector_EmojiLanguage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_EmojiLanguage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_EmojiLanguage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_EmojiLanguage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_EmojiLanguage.Merge(m, src)
}
func (m *Vector_EmojiLanguage) XXX_Size() int {
	return m.Size()
}
func (m *Vector_EmojiLanguage) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_EmojiLanguage.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_EmojiLanguage proto.InternalMessageInfo

func (m *Vector_EmojiLanguage) GetDatas() []*EmojiLanguage {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_Messages_SearchCounter struct {
	Datas []*Messages_SearchCounter `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (m *Vector_Messages_SearchCounter) Reset()         { *m = Vector_Messages_SearchCounter{} }
func (m *Vector_Messages_SearchCounter) String() string { return proto.CompactTextString(m) }
func (*Vector_Messages_SearchCounter) ProtoMessage()    {}
func (*Vector_Messages_SearchCounter) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{476}
}
func (m *Vector_Messages_SearchCounter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_Messages_SearchCounter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_Messages_SearchCounter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_Messages_SearchCounter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_Messages_SearchCounter.Merge(m, src)
}
func (m *Vector_Messages_SearchCounter) XXX_Size() int {
	return m.Size()
}
func (m *Vector_Messages_SearchCounter) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_Messages_SearchCounter.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_Messages_SearchCounter proto.InternalMessageInfo

func (m *Vector_Messages_SearchCounter) GetDatas() []*Messages_SearchCounter {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_DialogFilter struct {
	Datas []*DialogFilter `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (m *Vector_DialogFilter) Reset()         { *m = Vector_DialogFilter{} }
func (m *Vector_DialogFilter) String() string { return proto.CompactTextString(m) }
func (*Vector_DialogFilter) ProtoMessage()    {}
func (*Vector_DialogFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{477}
}
func (m *Vector_DialogFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_DialogFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_DialogFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_DialogFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_DialogFilter.Merge(m, src)
}
func (m *Vector_DialogFilter) XXX_Size() int {
	return m.Size()
}
func (m *Vector_DialogFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_DialogFilter.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_DialogFilter proto.InternalMessageInfo

func (m *Vector_DialogFilter) GetDatas() []*DialogFilter {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_DialogFilterSuggested struct {
	Datas []*DialogFilterSuggested `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (m *Vector_DialogFilterSuggested) Reset()         { *m = Vector_DialogFilterSuggested{} }
func (m *Vector_DialogFilterSuggested) String() string { return proto.CompactTextString(m) }
func (*Vector_DialogFilterSuggested) ProtoMessage()    {}
func (*Vector_DialogFilterSuggested) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{478}
}
func (m *Vector_DialogFilterSuggested) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_DialogFilterSuggested) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_DialogFilterSuggested.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_DialogFilterSuggested) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_DialogFilterSuggested.Merge(m, src)
}
func (m *Vector_DialogFilterSuggested) XXX_Size() int {
	return m.Size()
}
func (m *Vector_DialogFilterSuggested) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_DialogFilterSuggested.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_DialogFilterSuggested proto.InternalMessageInfo

func (m *Vector_DialogFilterSuggested) GetDatas() []*DialogFilterSuggested {
	if m != nil {
		return m.Datas
	}
	return nil
}

type Vector_FileHash struct {
	Datas []*FileHash `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (m *Vector_FileHash) Reset()         { *m = Vector_FileHash{} }
func (m *Vector_FileHash) String() string { return proto.CompactTextString(m) }
func (*Vector_FileHash) ProtoMessage()    {}
func (*Vector_FileHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_171aad061a6a5831, []int{479}
}
func (m *Vector_FileHash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vector_FileHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vector_FileHash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vector_FileHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector_FileHash.Merge(m, src)
}
func (m *Vector_FileHash) XXX_Size() int {
	return m.Size()
}
func (m *Vector_FileHash) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector_FileHash.DiscardUnknown(m)
}

var xxx_messageInfo_Vector_FileHash proto.InternalMessageInfo

func (m *Vector_FileHash) GetDatas() []*FileHash {
	if m != nil {
		return m.Datas
	}
	return nil
}

func init() {
	proto.RegisterType((*TLInvokeAfterMsg)(nil), "mtproto.TL_invokeAfterMsg")
	proto.RegisterType((*TLInvokeAfterMsgs)(nil), "mtproto.TL_invokeAfterMsgs")
	proto.RegisterType((*TLInitConnection)(nil), "mtproto.TL_initConnection")
	proto.RegisterType((*TLInvokeWithLayer)(nil), "mtproto.TL_invokeWithLayer")
	proto.RegisterType((*TLInvokeWithoutUpdates)(nil), "mtproto.TL_invokeWithoutUpdates")
	proto.RegisterType((*TLAuthCheckPhone)(nil), "mtproto.TL_auth_checkPhone")
	proto.RegisterType((*TLAuthSendCode)(nil), "mtproto.TL_auth_sendCode")
	proto.RegisterType((*TLAuthSignUp)(nil), "mtproto.TL_auth_signUp")
	proto.RegisterType((*TLAuthSignIn)(nil), "mtproto.TL_auth_signIn")
	proto.RegisterType((*TLAuthLogOut)(nil), "mtproto.TL_auth_logOut")
	proto.RegisterType((*TLAuthResetAuthorizations)(nil), "mtproto.TL_auth_resetAuthorizations")
	proto.RegisterType((*TLAuthSendInvites)(nil), "mtproto.TL_auth_sendInvites")
	proto.RegisterType((*TLAuthExportAuthorization)(nil), "mtproto.TL_auth_exportAuthorization")
	proto.RegisterType((*TLAuthImportAuthorization)(nil), "mtproto.TL_auth_importAuthorization")
	proto.RegisterType((*TLAuthBindTempAuthKey)(nil), "mtproto.TL_auth_bindTempAuthKey")
	proto.RegisterType((*TLAuthImportBotAuthorization)(nil), "mtproto.TL_auth_importBotAuthorization")
	proto.RegisterType((*TLAuthCheckPassword)(nil), "mtproto.TL_auth_checkPassword")
	proto.RegisterType((*TLAuthRequestPasswordRecovery)(nil), "mtproto.TL_auth_requestPasswordRecovery")
	proto.RegisterType((*TLAuthRecoverPassword)(nil), "mtproto.TL_auth_recoverPassword")
	proto.RegisterType((*TLAuthResendCode)(nil), "mtproto.TL_auth_resendCode")
	proto.RegisterType((*TLAuthCancelCode)(nil), "mtproto.TL_auth_cancelCode")
	proto.RegisterType((*TLAuthDropTempAuthKeys)(nil), "mtproto.TL_auth_dropTempAuthKeys")
	proto.RegisterType((*TLAuthCheckInviteCode)(nil), "mtproto.TL_auth_checkInviteCode")
	proto.RegisterType((*TLAccountRegisterDevice)(nil), "mtproto.TL_account_registerDevice")
	proto.RegisterType((*TLAccountUnregisterDevice)(nil), "mtproto.TL_account_unregisterDevice")
	proto.RegisterType((*TLAccountUpdateNotifySettings)(nil), "mtproto.TL_account_updateNotifySettings")
	proto.RegisterType((*TLAccountGetNotifySettings)(nil), "mtproto.TL_account_getNotifySettings")
	proto.RegisterType((*TLAccountResetNotifySettings)(nil), "mtproto.TL_account_resetNotifySettings")
	proto.RegisterType((*TLAccountUpdateProfile)(nil), "mtproto.TL_account_updateProfile")
	proto.RegisterType((*TLAccountUpdateStatus)(nil), "mtproto.TL_account_updateStatus")
	proto.RegisterType((*TLAccountGetWallPapers)(nil), "mtproto.TL_account_getWallPapers")
	proto.RegisterType((*TLAccountReportPeer)(nil), "mtproto.TL_account_reportPeer")
	proto.RegisterType((*TLAccountCheckUsername)(nil), "mtproto.TL_account_checkUsername")
	proto.RegisterType((*TLAccountUpdateUsername)(nil), "mtproto.TL_account_updateUsername")
	proto.RegisterType((*TLAccountGetPrivacy)(nil), "mtproto.TL_account_getPrivacy")
	proto.RegisterType((*TLAccountSetPrivacy)(nil), "mtproto.TL_account_setPrivacy")
	proto.RegisterType((*TLAccountDeleteAccount)(nil), "mtproto.TL_account_deleteAccount")
	proto.RegisterType((*TLAccountGetAccountTTL)(nil), "mtproto.TL_account_getAccountTTL")
	proto.RegisterType((*TLAccountSetAccountTTL)(nil), "mtproto.TL_account_setAccountTTL")
	proto.RegisterType((*TLAccountSendChangePhoneCode)(nil), "mtproto.TL_account_sendChangePhoneCode")
	proto.RegisterType((*TLAccountChangePhone)(nil), "mtproto.TL_account_changePhone")
	proto.RegisterType((*TLAccountUpdateDeviceLocked)(nil), "mtproto.TL_account_updateDeviceLocked")
	proto.RegisterType((*TLAccountGetAuthorizations)(nil), "mtproto.TL_account_getAuthorizations")
	proto.RegisterType((*TLAccountResetAuthorization)(nil), "mtproto.TL_account_resetAuthorization")
	proto.RegisterType((*TLAccountGetPassword)(nil), "mtproto.TL_account_getPassword")
	proto.RegisterType((*TLAccountGetPasswordSettings)(nil), "mtproto.TL_account_getPasswordSettings")
	proto.RegisterType((*TLAccountUpdatePasswordSettings)(nil), "mtproto.TL_account_updatePasswordSettings")
	proto.RegisterType((*TLAccountSendConfirmPhoneCode)(nil), "mtproto.TL_account_sendConfirmPhoneCode")
	proto.RegisterType((*TLAccountConfirmPhone)(nil), "mtproto.TL_account_confirmPhone")
	proto.RegisterType((*TLAccountGetTmpPassword)(nil), "mtproto.TL_account_getTmpPassword")
	proto.RegisterType((*TLUsersGetUsers)(nil), "mtproto.TL_users_getUsers")
	proto.RegisterType((*TLUsersGetFullUser)(nil), "mtproto.TL_users_getFullUser")
	proto.RegisterType((*TLUsersGetUserInfo)(nil), "mtproto.TL_users_getUserInfo")
	proto.RegisterType((*TLUsersGetUserInfoList)(nil), "mtproto.TL_users_getUserInfoList")
	proto.RegisterType((*TLUsersGetEnvelopeState)(nil), "mtproto.TL_users_getEnvelopeState")
	proto.RegisterType((*TLUsersGetEnvelopeInfo)(nil), "mtproto.TL_users_getEnvelopeInfo")
	proto.RegisterType((*TLUsersGetPointsHistory)(nil), "mtproto.TL_users_getPointsHistory")
	proto.RegisterType((*TLUsersGetPointsRank)(nil), "mtproto.TL_users_getPointsRank")
	proto.RegisterType((*TLUsersSetPasswd)(nil), "mtproto.TL_users_setPasswd")
	proto.RegisterType((*TLUsersCheckPasswd)(nil), "mtproto.TL_users_checkPasswd")
	proto.RegisterType((*TLUsersCheckResetPasswdPhoneCode)(nil), "mtproto.TL_users_checkResetPasswdPhoneCode")
	proto.RegisterType((*TLUsersSendResetPasswdPhoneCode)(nil), "mtproto.TL_users_sendResetPasswdPhoneCode")
	proto.RegisterType((*TLUsersSetGender)(nil), "mtproto.TL_users_setGender")
	proto.RegisterType((*TLUsersSetUserInfo)(nil), "mtproto.TL_users_setUserInfo")
	proto.RegisterType((*TLContactsApplyFriend)(nil), "mtproto.TL_contacts_applyFriend")
	proto.RegisterType((*TLContactsAuditApply)(nil), "mtproto.TL_contacts_auditApply")
	proto.RegisterType((*TLContactsGetApplyList)(nil), "mtproto.TL_contacts_getApplyList")
	proto.RegisterType((*TLContactsSearchUser)(nil), "mtproto.TL_contacts_searchUser")
	proto.RegisterType((*TLContactsSearchSource)(nil), "mtproto.TL_contacts_searchSource")
	proto.RegisterType((*TLContactsGetStatuses)(nil), "mtproto.TL_contacts_getStatuses")
	proto.RegisterType((*TLContactsGetContacts)(nil), "mtproto.TL_contacts_getContacts")
	proto.RegisterType((*TLContactsImportContacts)(nil), "mtproto.TL_contacts_importContacts")
	proto.RegisterType((*TLContactsDeleteContact)(nil), "mtproto.TL_contacts_deleteContact")
	proto.RegisterType((*TLContactsDeleteContacts)(nil), "mtproto.TL_contacts_deleteContacts")
	proto.RegisterType((*TLContactsBlock)(nil), "mtproto.TL_contacts_block")
	proto.RegisterType((*TLContactsUnblock)(nil), "mtproto.TL_contacts_unblock")
	proto.RegisterType((*TLContactsGetBlocked)(nil), "mtproto.TL_contacts_getBlocked")
	proto.RegisterType((*TLContactsExportCard)(nil), "mtproto.TL_contacts_exportCard")
	proto.RegisterType((*TLContactsImportCard)(nil), "mtproto.TL_contacts_importCard")
	proto.RegisterType((*TLContactsSearch)(nil), "mtproto.TL_contacts_search")
	proto.RegisterType((*TLContactsResolveUsername)(nil), "mtproto.TL_contacts_resolveUsername")
	proto.RegisterType((*TLContactsGetTopPeers)(nil), "mtproto.TL_contacts_getTopPeers")
	proto.RegisterType((*TLContactsResetTopPeerRating)(nil), "mtproto.TL_contacts_resetTopPeerRating")
	proto.RegisterType((*TLContactsResetSaved)(nil), "mtproto.TL_contacts_resetSaved")
	proto.RegisterType((*TLMessagesGetMessages)(nil), "mtproto.TL_messages_getMessages")
	proto.RegisterType((*TLMessagesGetDialogs)(nil), "mtproto.TL_messages_getDialogs")
	proto.RegisterType((*TLMessagesGetHistory)(nil), "mtproto.TL_messages_getHistory")
	proto.RegisterType((*TLMessagesSearch)(nil), "mtproto.TL_messages_search")
	proto.RegisterType((*TLMessagesReadHistory)(nil), "mtproto.TL_messages_readHistory")
	proto.RegisterType((*TLMessagesDeleteHistory)(nil), "mtproto.TL_messages_deleteHistory")
	proto.RegisterType((*TLMessagesDeleteMessages)(nil), "mtproto.TL_messages_deleteMessages")
	proto.RegisterType((*TLMessagesReceivedMessages)(nil), "mtproto.TL_messages_receivedMessages")
	proto.RegisterType((*TLMessagesSetTyping)(nil), "mtproto.TL_messages_setTyping")
	proto.RegisterType((*TLMessagesSendMessage)(nil), "mtproto.TL_messages_sendMessage")
	proto.RegisterType((*TLMessagesSendMedia)(nil), "mtproto.TL_messages_sendMedia")
	proto.RegisterType((*TLMessagesForwardMessages)(nil), "mtproto.TL_messages_forwardMessages")
	proto.RegisterType((*TLMessagesReportSpam)(nil), "mtproto.TL_messages_reportSpam")
	proto.RegisterType((*TLMessagesHideReportSpam)(nil), "mtproto.TL_messages_hideReportSpam")
	proto.RegisterType((*TLMessagesGetPeerSettings)(nil), "mtproto.TL_messages_getPeerSettings")
	proto.RegisterType((*TLMessagesGetChats)(nil), "mtproto.TL_messages_getChats")
	proto.RegisterType((*TLMessagesGetFullChat)(nil), "mtproto.TL_messages_getFullChat")
	proto.RegisterType((*TLMessagesEditChatTitle)(nil), "mtproto.TL_messages_editChatTitle")
	proto.RegisterType((*TLMessagesEditChatPhoto)(nil), "mtproto.TL_messages_editChatPhoto")
	proto.RegisterType((*TLMessagesAddChatUser)(nil), "mtproto.TL_messages_addChatUser")
	proto.RegisterType((*TLMessagesDeleteChatUser)(nil), "mtproto.TL_messages_deleteChatUser")
	proto.RegisterType((*TLMessagesCreateChat)(nil), "mtproto.TL_messages_createChat")
	proto.RegisterType((*TLMessagesForwardMessage)(nil), "mtproto.TL_messages_forwardMessage")
	proto.RegisterType((*TLMessagesGetDhConfig)(nil), "mtproto.TL_messages_getDhConfig")
	proto.RegisterType((*TLMessagesRequestEncryption)(nil), "mtproto.TL_messages_requestEncryption")
	proto.RegisterType((*TLMessagesAcceptEncryption)(nil), "mtproto.TL_messages_acceptEncryption")
	proto.RegisterType((*TLMessagesDiscardEncryption)(nil), "mtproto.TL_messages_discardEncryption")
	proto.RegisterType((*TLMessagesSetEncryptedTyping)(nil), "mtproto.TL_messages_setEncryptedTyping")
	proto.RegisterType((*TLMessagesReadEncryptedHistory)(nil), "mtproto.TL_messages_readEncryptedHistory")
	proto.RegisterType((*TLMessagesSendEncrypted)(nil), "mtproto.TL_messages_sendEncrypted")
	proto.RegisterType((*TLMessagesSendEncryptedFile)(nil), "mtproto.TL_messages_sendEncryptedFile")
	proto.RegisterType((*TLMessagesSendEncryptedService)(nil), "mtproto.TL_messages_sendEncryptedService")
	proto.RegisterType((*TLMessagesReceivedQueue)(nil), "mtproto.TL_messages_receivedQueue")
	proto.RegisterType((*TLMessagesReportEncryptedSpam)(nil), "mtproto.TL_messages_reportEncryptedSpam")
	proto.RegisterType((*TLMessagesReadMessageContents)(nil), "mtproto.TL_messages_readMessageContents")
	proto.RegisterType((*TLMessagesGetAllStickers)(nil), "mtproto.TL_messages_getAllStickers")
	proto.RegisterType((*TLMessagesGetWebPagePreview)(nil), "mtproto.TL_messages_getWebPagePreview")
	proto.RegisterType((*TLMessagesExportChatInvite)(nil), "mtproto.TL_messages_exportChatInvite")
	proto.RegisterType((*TLMessagesCheckChatInvite)(nil), "mtproto.TL_messages_checkChatInvite")
	proto.RegisterType((*TLMessagesImportChatInvite)(nil), "mtproto.TL_messages_importChatInvite")
	proto.RegisterType((*TLMessagesGetStickerSet)(nil), "mtproto.TL_messages_getStickerSet")
	proto.RegisterType((*TLMessagesInstallStickerSet)(nil), "mtproto.TL_messages_installStickerSet")
	proto.RegisterType((*TLMessagesUninstallStickerSet)(nil), "mtproto.TL_messages_uninstallStickerSet")
	proto.RegisterType((*TLMessagesStartBot)(nil), "mtproto.TL_messages_startBot")
	proto.RegisterType((*TLMessagesGetMessagesViews)(nil), "mtproto.TL_messages_getMessagesViews")
	proto.RegisterType((*TLMessagesToggleChatAdmins)(nil), "mtproto.TL_messages_toggleChatAdmins")
	proto.RegisterType((*TLMessagesEditChatAdmin)(nil), "mtproto.TL_messages_editChatAdmin")
	proto.RegisterType((*TLMessagesMigrateChat)(nil), "mtproto.TL_messages_migrateChat")
	proto.RegisterType((*TLMessagesSearchGlobal)(nil), "mtproto.TL_messages_searchGlobal")
	proto.RegisterType((*TLMessagesReorderStickerSets)(nil), "mtproto.TL_messages_reorderStickerSets")
	proto.RegisterType((*TLMessagesGetDocumentByHash)(nil), "mtproto.TL_messages_getDocumentByHash")
	proto.RegisterType((*TLMessagesSearchGifs)(nil), "mtproto.TL_messages_searchGifs")
	proto.RegisterType((*TLMessagesGetSavedGifs)(nil), "mtproto.TL_messages_getSavedGifs")
	proto.RegisterType((*TLMessagesSaveGif)(nil), "mtproto.TL_messages_saveGif")
	proto.RegisterType((*TLMessagesGetInlineBotResults)(nil), "mtproto.TL_messages_getInlineBotResults")
	proto.RegisterType((*TLMessagesSetInlineBotResults)(nil), "mtproto.TL_messages_setInlineBotResults")
	proto.RegisterType((*TLMessagesSendInlineBotResult)(nil), "mtproto.TL_messages_sendInlineBotResult")
	proto.RegisterType((*TLMessagesGetMessageEditData)(nil), "mtproto.TL_messages_getMessageEditData")
	proto.RegisterType((*TLMessagesEditMessage)(nil), "mtproto.TL_messages_editMessage")
	proto.RegisterType((*TLMessagesEditInlineBotMessage)(nil), "mtproto.TL_messages_editInlineBotMessage")
	proto.RegisterType((*TLMessagesGetBotCallbackAnswer)(nil), "mtproto.TL_messages_getBotCallbackAnswer")
	proto.RegisterType((*TLMessagesSetBotCallbackAnswer)(nil), "mtproto.TL_messages_setBotCallbackAnswer")
	proto.RegisterType((*TLMessagesGetPeerDialogs)(nil), "mtproto.TL_messages_getPeerDialogs")
	proto.RegisterType((*TLMessagesSaveDraft)(nil), "mtproto.TL_messages_saveDraft")
	proto.RegisterType((*TLMessagesGetAllDrafts)(nil), "mtproto.TL_messages_getAllDrafts")
	proto.RegisterType((*TLMessagesGetFeaturedStickers)(nil), "mtproto.TL_messages_getFeaturedStickers")
	proto.RegisterType((*TLMessagesReadFeaturedStickers)(nil), "mtproto.TL_messages_readFeaturedStickers")
	proto.RegisterType((*TLMessagesGetRecentStickers)(nil), "mtproto.TL_messages_getRecentStickers")
	proto.RegisterType((*TLMessagesSaveRecentSticker)(nil), "mtproto.TL_messages_saveRecentSticker")
	proto.RegisterType((*TLMessagesClearRecentStickers)(nil), "mtproto.TL_messages_clearRecentStickers")
	proto.RegisterType((*TLMessagesGetArchivedStickers)(nil), "mtproto.TL_messages_getArchivedStickers")
	proto.RegisterType((*TLMessagesGetMaskStickers)(nil), "mtproto.TL_messages_getMaskStickers")
	proto.RegisterType((*TLMessagesGetAttachedStickers)(nil), "mtproto.TL_messages_getAttachedStickers")
	proto.RegisterType((*TLMessagesSetGameScore)(nil), "mtproto.TL_messages_setGameScore")
	proto.RegisterType((*TLMessagesSetInlineGameScore)(nil), "mtproto.TL_messages_setInlineGameScore")
	proto.RegisterType((*TLMessagesGetGameHighScores)(nil), "mtproto.TL_messages_getGameHighScores")
	proto.RegisterType((*TLMessagesGetInlineGameHighScores)(nil), "mtproto.TL_messages_getInlineGameHighScores")
	proto.RegisterType((*TLMessagesGetCommonChats)(nil), "mtproto.TL_messages_getCommonChats")
	proto.RegisterType((*TLMessagesGetAllChats)(nil), "mtproto.TL_messages_getAllChats")
	proto.RegisterType((*TLMessagesGetWebPage)(nil), "mtproto.TL_messages_getWebPage")
	proto.RegisterType((*TLMessagesToggleDialogPin)(nil), "mtproto.TL_messages_toggleDialogPin")
	proto.RegisterType((*TLMessagesReorderPinnedDialogs)(nil), "mtproto.TL_messages_reorderPinnedDialogs")
	proto.RegisterType((*TLMessagesGetPinnedDialogs)(nil), "mtproto.TL_messages_getPinnedDialogs")
	proto.RegisterType((*TLMessagesSetBotShippingResults)(nil), "mtproto.TL_messages_setBotShippingResults")
	proto.RegisterType((*TLMessagesSetBotPrecheckoutResults)(nil), "mtproto.TL_messages_setBotPrecheckoutResults")
	proto.RegisterType((*TLMessagesUploadMedia)(nil), "mtproto.TL_messages_uploadMedia")
	proto.RegisterType((*TLMessagesSendScreenshotNotification)(nil), "mtproto.TL_messages_sendScreenshotNotification")
	proto.RegisterType((*TLMessagesGetFavedStickers)(nil), "mtproto.TL_messages_getFavedStickers")
	proto.RegisterType((*TLMessagesFaveSticker)(nil), "mtproto.TL_messages_faveSticker")
	proto.RegisterType((*TLMessagesGetUnreadMentions)(nil), "mtproto.TL_messages_getUnreadMentions")
	proto.RegisterType((*TLUpdatesGetState)(nil), "mtproto.TL_updates_getState")
	proto.RegisterType((*TLUpdatesGetDifference)(nil), "mtproto.TL_updates_getDifference")
	proto.RegisterType((*TLUpdatesGetChannelDifference)(nil), "mtproto.TL_updates_getChannelDifference")
	proto.RegisterType((*TLPhotosUpdateProfilePhoto)(nil), "mtproto.TL_photos_updateProfilePhoto")
	proto.RegisterType((*TLPhotosUploadProfilePhoto)(nil), "mtproto.TL_photos_uploadProfilePhoto")
	proto.RegisterType((*TLPhotosDeletePhotos)(nil), "mtproto.TL_photos_deletePhotos")
	proto.RegisterType((*TLPhotosGetUserPhotos)(nil), "mtproto.TL_photos_getUserPhotos")
	proto.RegisterType((*TLUploadSaveFilePart)(nil), "mtproto.TL_upload_saveFilePart")
	proto.RegisterType((*TLUploadGetFile)(nil), "mtproto.TL_upload_getFile")
	proto.RegisterType((*TLUploadSaveBigFilePart)(nil), "mtproto.TL_upload_saveBigFilePart")
	proto.RegisterType((*TLUploadGetWebFile)(nil), "mtproto.TL_upload_getWebFile")
	proto.RegisterType((*TLUploadGetCdnFile)(nil), "mtproto.TL_upload_getCdnFile")
	proto.RegisterType((*TLUploadReuploadCdnFile)(nil), "mtproto.TL_upload_reuploadCdnFile")
	proto.RegisterType((*TLUploadGetCdnFileHashes)(nil), "mtproto.TL_upload_getCdnFileHashes")
	proto.RegisterType((*TLHelpGetConfig)(nil), "mtproto.TL_help_getConfig")
	proto.RegisterType((*TLHelpGetNearestDc)(nil), "mtproto.TL_help_getNearestDc")
	proto.RegisterType((*TLHelpGetAppUpdate)(nil), "mtproto.TL_help_getAppUpdate")
	proto.RegisterType((*TLHelpSaveAppLog)(nil), "mtproto.TL_help_saveAppLog")
	proto.RegisterType((*TLHelpGetInviteText)(nil), "mtproto.TL_help_getInviteText")
	proto.RegisterType((*TLHelpGetSupport)(nil), "mtproto.TL_help_getSupport")
	proto.RegisterType((*TLHelpGetAppChangelog)(nil), "mtproto.TL_help_getAppChangelog")
	proto.RegisterType((*TLHelpGetTermsOfService)(nil), "mtproto.TL_help_getTermsOfService")
	proto.RegisterType((*TLHelpSetBotUpdatesStatus)(nil), "mtproto.TL_help_setBotUpdatesStatus")
	proto.RegisterType((*TLHelpGetCdnConfig)(nil), "mtproto.TL_help_getCdnConfig")
	proto.RegisterType((*TLChannelsReadHistory)(nil), "mtproto.TL_channels_readHistory")
	proto.RegisterType((*TLChannelsDeleteMessages)(nil), "mtproto.TL_channels_deleteMessages")
	proto.RegisterType((*TLChannelsDeleteUserHistory)(nil), "mtproto.TL_channels_deleteUserHistory")
	proto.RegisterType((*TLChannelsReportSpam)(nil), "mtproto.TL_channels_reportSpam")
	proto.RegisterType((*TLChannelsGetMessages)(nil), "mtproto.TL_channels_getMessages")
	proto.RegisterType((*TLChannelsGetParticipants)(nil), "mtproto.TL_channels_getParticipants")
	proto.RegisterType((*TLChannelsGetParticipant)(nil), "mtproto.TL_channels_getParticipant")
	proto.RegisterType((*TLChannelsGetChannels)(nil), "mtproto.TL_channels_getChannels")
	proto.RegisterType((*TLChannelsGetFullChannel)(nil), "mtproto.TL_channels_getFullChannel")
	proto.RegisterType((*TLChannelsCreateChannel)(nil), "mtproto.TL_channels_createChannel")
	proto.RegisterType((*TLChannelsEditAbout)(nil), "mtproto.TL_channels_editAbout")
	proto.RegisterType((*TLChannelsEditAdmin)(nil), "mtproto.TL_channels_editAdmin")
	proto.RegisterType((*TLChannelsEditTitle)(nil), "mtproto.TL_channels_editTitle")
	proto.RegisterType((*TLChannelsEditPhoto)(nil), "mtproto.TL_channels_editPhoto")
	proto.RegisterType((*TLChannelsCheckUsername)(nil), "mtproto.TL_channels_checkUsername")
	proto.RegisterType((*TLChannelsUpdateUsername)(nil), "mtproto.TL_channels_updateUsername")
	proto.RegisterType((*TLChannelsJoinChannel)(nil), "mtproto.TL_channels_joinChannel")
	proto.RegisterType((*TLChannelsLeaveChannel)(nil), "mtproto.TL_channels_leaveChannel")
	proto.RegisterType((*TLChannelsInviteToChannel)(nil), "mtproto.TL_channels_inviteToChannel")
	proto.RegisterType((*TLChannelsExportInvite)(nil), "mtproto.TL_channels_exportInvite")
	proto.RegisterType((*TLChannelsDeleteChannel)(nil), "mtproto.TL_channels_deleteChannel")
	proto.RegisterType((*TLChannelsToggleInvites)(nil), "mtproto.TL_channels_toggleInvites")
	proto.RegisterType((*TLChannelsExportMessageLink)(nil), "mtproto.TL_channels_exportMessageLink")
	proto.RegisterType((*TLChannelsToggleSignatures)(nil), "mtproto.TL_channels_toggleSignatures")
	proto.RegisterType((*TLChannelsUpdatePinnedMessage)(nil), "mtproto.TL_channels_updatePinnedMessage")
	proto.RegisterType((*TLChannelsGetAdminedPublicChannels)(nil), "mtproto.TL_channels_getAdminedPublicChannels")
	proto.RegisterType((*TLChannelsEditBanned)(nil), "mtproto.TL_channels_editBanned")
	proto.RegisterType((*TLChannelsGetAdminLog)(nil), "mtproto.TL_channels_getAdminLog")
	proto.RegisterType((*TLChannelsSetStickers)(nil), "mtproto.TL_channels_setStickers")
	proto.RegisterType((*TLChannelsReadMessageContents)(nil), "mtproto.TL_channels_readMessageContents")
	proto.RegisterType((*TLBotsSendCustomRequest)(nil), "mtproto.TL_bots_sendCustomRequest")
	proto.RegisterType((*TLBotsAnswerWebhookJSONQuery)(nil), "mtproto.TL_bots_answerWebhookJSONQuery")
	proto.RegisterType((*TLPaymentsGetPaymentForm)(nil), "mtproto.TL_payments_getPaymentForm")
	proto.RegisterType((*TLPaymentsGetPaymentReceipt)(nil), "mtproto.TL_payments_getPaymentReceipt")
	proto.RegisterType((*TLPaymentsValidateRequestedInfo)(nil), "mtproto.TL_payments_validateRequestedInfo")
	proto.RegisterType((*TLPaymentsSendPaymentForm)(nil), "mtproto.TL_payments_sendPaymentForm")
	proto.RegisterType((*TLPaymentsGetSavedInfo)(nil), "mtproto.TL_payments_getSavedInfo")
	proto.RegisterType((*TLPaymentsClearSavedInfo)(nil), "mtproto.TL_payments_clearSavedInfo")
	proto.RegisterType((*TLStickersCreateStickerSet)(nil), "mtproto.TL_stickers_createStickerSet")
	proto.RegisterType((*TLStickersRemoveStickerFromSet)(nil), "mtproto.TL_stickers_removeStickerFromSet")
	proto.RegisterType((*TLStickersChangeStickerPosition)(nil), "mtproto.TL_stickers_changeStickerPosition")
	proto.RegisterType((*TLStickersAddStickerToSet)(nil), "mtproto.TL_stickers_addStickerToSet")
	proto.RegisterType((*TLPhoneGetCallConfig)(nil), "mtproto.TL_phone_getCallConfig")
	proto.RegisterType((*TLPhoneRequestCall)(nil), "mtproto.TL_phone_requestCall")
	proto.RegisterType((*TLPhoneAcceptCall)(nil), "mtproto.TL_phone_acceptCall")
	proto.RegisterType((*TLPhoneConfirmCall)(nil), "mtproto.TL_phone_confirmCall")
	proto.RegisterType((*TLPhoneReceivedCall)(nil), "mtproto.TL_phone_receivedCall")
	proto.RegisterType((*TLPhoneDiscardCall)(nil), "mtproto.TL_phone_discardCall")
	proto.RegisterType((*TLPhoneSetCallRating)(nil), "mtproto.TL_phone_setCallRating")
	proto.RegisterType((*TLPhoneSaveCallDebug)(nil), "mtproto.TL_phone_saveCallDebug")
	proto.RegisterType((*TLLangpackGetLangPack)(nil), "mtproto.TL_langpack_getLangPack")
	proto.RegisterType((*TLLangpackGetStrings)(nil), "mtproto.TL_langpack_getStrings")
	proto.RegisterType((*TLLangpackGetDifference)(nil), "mtproto.TL_langpack_getDifference")
	proto.RegisterType((*TLLangpackGetLanguages)(nil), "mtproto.TL_langpack_getLanguages")
	proto.RegisterType((*TLUpdatesGetChannelDifference57)(nil), "mtproto.TL_updates_getChannelDifference57")
	proto.RegisterType((*TLAuthSendCode73)(nil), "mtproto.TL_auth_sendCode73")
	proto.RegisterType((*TLAccountRegisterDevice73)(nil), "mtproto.TL_account_registerDevice73")
	proto.RegisterType((*TLPhotosUpdateProfilePhoto73)(nil), "mtproto.TL_photos_updateProfilePhoto73")
	proto.RegisterType((*TLPhotosUploadProfilePhoto73)(nil), "mtproto.TL_photos_uploadProfilePhoto73")
	proto.RegisterType((*TLHelpGetWkConfig)(nil), "mtproto.TL_help_getWkConfig")
	proto.RegisterType((*TLHelpGetJsonConfig)(nil), "mtproto.TL_help_getJsonConfig")
	proto.RegisterType((*TLHelpGetScheme)(nil), "mtproto.TL_help_getScheme")
	proto.RegisterType((*TLHelpGetConfig73)(nil), "mtproto.TL_help_getConfig73")
	proto.RegisterType((*TLHelpGetAppUpdate73)(nil), "mtproto.TL_help_getAppUpdate73")
	proto.RegisterType((*TLHelpGetInviteText73)(nil), "mtproto.TL_help_getInviteText73")
	proto.RegisterType((*TLHelpGetRecentMeUrls)(nil), "mtproto.TL_help_getRecentMeUrls")
	proto.RegisterType((*TLHelpGetTermsOfService73)(nil), "mtproto.TL_help_getTermsOfService73")
	proto.RegisterType((*TLMessagesReadHistory73)(nil), "mtproto.TL_messages_readHistory73")
	proto.RegisterType((*TLMessagesEditMessage73)(nil), "mtproto.TL_messages_editMessage73")
	proto.RegisterType((*TLMessagesSearch73)(nil), "mtproto.TL_messages_search73")
	proto.RegisterType((*TLMessagesReadMentions)(nil), "mtproto.TL_messages_readMentions")
	proto.RegisterType((*TLMessagesGetRecentLocations)(nil), "mtproto.TL_messages_getRecentLocations")
	proto.RegisterType((*TLMessagesSendMultiMedia)(nil), "mtproto.TL_messages_sendMultiMedia")
	proto.RegisterType((*TLMessagesUploadEncryptedFile)(nil), "mtproto.TL_messages_uploadEncryptedFile")
	proto.RegisterType((*TLMessagesSaveRecentSticker73)(nil), "mtproto.TL_messages_saveRecentSticker73")
	proto.RegisterType((*TLChannelsDeleteHistory)(nil), "mtproto.TL_channels_deleteHistory")
	proto.RegisterType((*TLChannelsTogglePreHistoryHidden)(nil), "mtproto.TL_channels_togglePreHistoryHidden")
	proto.RegisterType((*TLChannelsGetParticipants73)(nil), "mtproto.TL_channels_getParticipants73")
	proto.RegisterType((*TLChannelsEditBanned2)(nil), "mtproto.TL_channels_editBanned2")
	proto.RegisterType((*TLChannelsGetBanned2)(nil), "mtproto.TL_channels_getBanned2")
	proto.RegisterType((*TLPhone_WebrtcCreateOffer)(nil), "mtproto.TL_phone_WebrtcCreateOffer")
	proto.RegisterType((*TLPhone_WebrtcCreateAnswer)(nil), "mtproto.TL_phone_WebrtcCreateAnswer")
	proto.RegisterType((*TLPhone_WebrtcAddCandidate)(nil), "mtproto.TL_phone_WebrtcAddCandidate")
	proto.RegisterType((*TLInitConnection82)(nil), "mtproto.TL_initConnection82")
	proto.RegisterType((*TLAuthSendCode82)(nil), "mtproto.TL_auth_sendCode82")
	proto.RegisterType((*TLHelpGetConfig82)(nil), "mtproto.TL_help_getConfig82")
	proto.RegisterType((*TLHelpGetTermsOfServiceUpdate)(nil), "mtproto.TL_help_getTermsOfServiceUpdate")
	proto.RegisterType((*TLHelpAcceptTermsOfService)(nil), "mtproto.TL_help_acceptTermsOfService")
	proto.RegisterType((*TLHelpGetDeepLinkInfo)(nil), "mtproto.TL_help_getDeepLinkInfo")
	proto.RegisterType((*TLHelpTest)(nil), "mtproto.TL_help_test")
	proto.RegisterType((*TLMessagesGetPeerDialogs82)(nil), "mtproto.TL_messages_getPeerDialogs82")
	proto.RegisterType((*TLMessagesGetMessages82)(nil), "mtproto.TL_messages_getMessages82")
	proto.RegisterType((*TLMessagesGetDialogs82)(nil), "mtproto.TL_messages_getDialogs82")
	proto.RegisterType((*TLMessagesGetHistory82)(nil), "mtproto.TL_messages_getHistory82")
	proto.RegisterType((*TLMessagesSearch82)(nil), "mtproto.TL_messages_search82")
	proto.RegisterType((*TLMessagesSendMedia82)(nil), "mtproto.TL_messages_sendMedia82")
	proto.RegisterType((*TLInitConnection114)(nil), "mtproto.TL_initConnection114")
	proto.RegisterType((*TLInvokeWithMessagesRange)(nil), "mtproto.TL_invokeWithMessagesRange")
	proto.RegisterType((*TLInvokeWithTakeout)(nil), "mtproto.TL_invokeWithTakeout")
	proto.RegisterType((*TLAuthSendCode114)(nil), "mtproto.TL_auth_sendCode114")
	proto.RegisterType((*TLAuthSignUp114)(nil), "mtproto.TL_auth_signUp114")
	proto.RegisterType((*TLAuthCheckPassword114)(nil), "mtproto.TL_auth_checkPassword114")
	proto.RegisterType((*TLAuthExportLoginToken)(nil), "mtproto.TL_auth_exportLoginToken")
	proto.RegisterType((*TLAuthImportLoginToken)(nil), "mtproto.TL_auth_importLoginToken")
	proto.RegisterType((*TLAuthAcceptLoginToken)(nil), "mtproto.TL_auth_acceptLoginToken")
	proto.RegisterType((*TLAccountRegisterDevice114)(nil), "mtproto.TL_account_registerDevice114")
	proto.RegisterType((*TLAccountUnregisterDevice114)(nil), "mtproto.TL_account_unregisterDevice114")
	proto.RegisterType((*TLAccountGetWallPapers114)(nil), "mtproto.TL_account_getWallPapers114")
	proto.RegisterType((*TLAccountSendChangePhoneCode114)(nil), "mtproto.TL_account_sendChangePhoneCode114")
	proto.RegisterType((*TLAccountGetPasswordSettings114)(nil), "mtproto.TL_account_getPasswordSettings114")
	proto.RegisterType((*TLAccountUpdatePasswordSettings114)(nil), "mtproto.TL_account_updatePasswordSettings114")
	proto.RegisterType((*TLAccountSendConfirmPhoneCode114)(nil), "mtproto.TL_account_sendConfirmPhoneCode114")
	proto.RegisterType((*TLAccountGetTmpPassword114)(nil), "mtproto.TL_account_getTmpPassword114")
	proto.RegisterType((*TLAccountGetWebAuthorizations)(nil), "mtproto.TL_account_getWebAuthorizations")
	proto.RegisterType((*TLAccountResetWebAuthorization)(nil), "mtproto.TL_account_resetWebAuthorization")
	proto.RegisterType((*TLAccountResetWebAuthorizations)(nil), "mtproto.TL_account_resetWebAuthorizations")
	proto.RegisterType((*TLAccountGetAllSecureValues)(nil), "mtproto.TL_account_getAllSecureValues")
	proto.RegisterType((*TLAccountGetSecureValue)(nil), "mtproto.TL_account_getSecureValue")
	proto.RegisterType((*TLAccountSaveSecureValue)(nil), "mtproto.TL_account_saveSecureValue")
	proto.RegisterType((*TLAccountDeleteSecureValue)(nil), "mtproto.TL_account_deleteSecureValue")
	proto.RegisterType((*TLAccountGetAuthorizationForm)(nil), "mtproto.TL_account_getAuthorizationForm")
	proto.RegisterType((*TLAccountAcceptAuthorization)(nil), "mtproto.TL_account_acceptAuthorization")
	proto.RegisterType((*TLAccountSendVerifyPhoneCode)(nil), "mtproto.TL_account_sendVerifyPhoneCode")
	proto.RegisterType((*TLAccountVerifyPhone)(nil), "mtproto.TL_account_verifyPhone")
	proto.RegisterType((*TLAccountSendVerifyEmailCode)(nil), "mtproto.TL_account_sendVerifyEmailCode")
	proto.RegisterType((*TLAccountVerifyEmail)(nil), "mtproto.TL_account_verifyEmail")
	proto.RegisterType((*TLAccountInitTakeoutSession)(nil), "mtproto.TL_account_initTakeoutSession")
	proto.RegisterType((*TLAccountFinishTakeoutSession)(nil), "mtproto.TL_account_finishTakeoutSession")
	proto.RegisterType((*TLAccountConfirmPasswordEmail)(nil), "mtproto.TL_account_confirmPasswordEmail")
	proto.RegisterType((*TLAccountResendPasswordEmail)(nil), "mtproto.TL_account_resendPasswordEmail")
	proto.RegisterType((*TLAccountCancelPasswordEmail)(nil), "mtproto.TL_account_cancelPasswordEmail")
	proto.RegisterType((*TLAccountGetContactSignUpNotification)(nil), "mtproto.TL_account_getContactSignUpNotification")
	proto.RegisterType((*TLAccountSetContactSignUpNotification)(nil), "mtproto.TL_account_setContactSignUpNotification")
	proto.RegisterType((*TLAccountGetNotifyExceptions)(nil), "mtproto.TL_account_getNotifyExceptions")
	proto.RegisterType((*TLAccountGetWallPaper)(nil), "mtproto.TL_account_getWallPaper")
	proto.RegisterType((*TLAccountUploadWallPaper)(nil), "mtproto.TL_account_uploadWallPaper")
	proto.RegisterType((*TLAccountSaveWallPaper)(nil), "mtproto.TL_account_saveWallPaper")
	proto.RegisterType((*TLAccountInstallWallPaper)(nil), "mtproto.TL_account_installWallPaper")
	proto.RegisterType((*TLAccountResetWallPapers)(nil), "mtproto.TL_account_resetWallPapers")
	proto.RegisterType((*TLAccountGetAutoDownloadSettings)(nil), "mtproto.TL_account_getAutoDownloadSettings")
	proto.RegisterType((*TLAccountSaveAutoDownloadSettings)(nil), "mtproto.TL_account_saveAutoDownloadSettings")
	proto.RegisterType((*TLAccountUploadTheme)(nil), "mtproto.TL_account_uploadTheme")
	proto.RegisterType((*TLAccountCreateTheme)(nil), "mtproto.TL_account_createTheme")
	proto.RegisterType((*TLAccountUpdateTheme)(nil), "mtproto.TL_account_updateTheme")
	proto.RegisterType((*TLAccountSaveTheme)(nil), "mtproto.TL_account_saveTheme")
	proto.RegisterType((*TLAccountInstallTheme)(nil), "mtproto.TL_account_installTheme")
	proto.RegisterType((*TLAccountGetTheme)(nil), "mtproto.TL_account_getTheme")
	proto.RegisterType((*TLAccountGetThemes)(nil), "mtproto.TL_account_getThemes")
	proto.RegisterType((*TLAccountSetContentSettings)(nil), "mtproto.TL_account_setContentSettings")
	proto.RegisterType((*TLAccountGetContentSettings)(nil), "mtproto.TL_account_getContentSettings")
	proto.RegisterType((*TLAccountGetMultiWallPapers)(nil), "mtproto.TL_account_getMultiWallPapers")
	proto.RegisterType((*TLUsersSetSecureValueErrors)(nil), "mtproto.TL_users_setSecureValueErrors")
	proto.RegisterType((*TLContactsGetContactIDs)(nil), "mtproto.TL_contacts_getContactIDs")
	proto.RegisterType((*TLContactsDeleteContacts114)(nil), "mtproto.TL_contacts_deleteContacts114")
	proto.RegisterType((*TLContactsDeleteByPhones)(nil), "mtproto.TL_contacts_deleteByPhones")
	proto.RegisterType((*TLContactsGetSaved)(nil), "mtproto.TL_contacts_getSaved")
	proto.RegisterType((*TLContactsToggleTopPeers)(nil), "mtproto.TL_contacts_toggleTopPeers")
	proto.RegisterType((*TLContactsAddContact)(nil), "mtproto.TL_contacts_addContact")
	proto.RegisterType((*TLContactsAcceptContact)(nil), "mtproto.TL_contacts_acceptContact")
	proto.RegisterType((*TLContactsGetLocated)(nil), "mtproto.TL_contacts_getLocated")
	proto.RegisterType((*TLMessagesGetDialogs114)(nil), "mtproto.TL_messages_getDialogs114")
	proto.RegisterType((*TLMessagesSendMessage114)(nil), "mtproto.TL_messages_sendMessage114")
	proto.RegisterType((*TLMessagesSendMedia114)(nil), "mtproto.TL_messages_sendMedia114")
	proto.RegisterType((*TLMessagesForwardMessages114)(nil), "mtproto.TL_messages_forwardMessages114")
	proto.RegisterType((*TLMessagesReport)(nil), "mtproto.TL_messages_report")
	proto.RegisterType((*TLMessagesGetStickers)(nil), "mtproto.TL_messages_getStickers")
	proto.RegisterType((*TLMessagesGetWebPagePreview114)(nil), "mtproto.TL_messages_getWebPagePreview114")
	proto.RegisterType((*TLMessagesExportChatInvite114)(nil), "mtproto.TL_messages_exportChatInvite114")
	proto.RegisterType((*TLMessagesSearchGlobal114)(nil), "mtproto.TL_messages_searchGlobal114")
	proto.RegisterType((*TLMessagesSendInlineBotResult114)(nil), "mtproto.TL_messages_sendInlineBotResult114")
	proto.RegisterType((*TLMessagesEditMessage114)(nil), "mtproto.TL_messages_editMessage114")
	proto.RegisterType((*TLMessagesEditInlineBotMessage114)(nil), "mtproto.TL_messages_editInlineBotMessage114")
	proto.RegisterType((*TLMessagesToggleDialogPin114)(nil), "mtproto.TL_messages_toggleDialogPin114")
	proto.RegisterType((*TLMessagesReorderPinnedDialogs114)(nil), "mtproto.TL_messages_reorderPinnedDialogs114")
	proto.RegisterType((*TLMessagesGetPinnedDialogs114)(nil), "mtproto.TL_messages_getPinnedDialogs114")
	proto.RegisterType((*TLMessagesGetRecentLocations114)(nil), "mtproto.TL_messages_getRecentLocations114")
	proto.RegisterType((*TLMessagesSendMultiMedia114)(nil), "mtproto.TL_messages_sendMultiMedia114")
	proto.RegisterType((*TLMessagesSearchStickerSets)(nil), "mtproto.TL_messages_searchStickerSets")
	proto.RegisterType((*TLMessagesGetSplitRanges)(nil), "mtproto.TL_messages_getSplitRanges")
	proto.RegisterType((*TLMessagesMarkDialogUnread)(nil), "mtproto.TL_messages_markDialogUnread")
	proto.RegisterType((*TLMessagesGetDialogUnreadMarks)(nil), "mtproto.TL_messages_getDialogUnreadMarks")
	proto.RegisterType((*TLMessagesClearAllDrafts)(nil), "mtproto.TL_messages_clearAllDrafts")
	proto.RegisterType((*TLMessagesUpdatePinnedMessage)(nil), "mtproto.TL_messages_updatePinnedMessage")
	proto.RegisterType((*TLMessagesSendVote)(nil), "mtproto.TL_messages_sendVote")
	proto.RegisterType((*TLMessagesGetPollResults)(nil), "mtproto.TL_messages_getPollResults")
	proto.RegisterType((*TLMessagesGetOnlines)(nil), "mtproto.TL_messages_getOnlines")
	proto.RegisterType((*TLMessagesGetStatsURL)(nil), "mtproto.TL_messages_getStatsURL")
	proto.RegisterType((*TLMessagesEditChatAbout)(nil), "mtproto.TL_messages_editChatAbout")
	proto.RegisterType((*TLMessagesEditChatDefaultBannedRights)(nil), "mtproto.TL_messages_editChatDefaultBannedRights")
	proto.RegisterType((*TLMessagesGetEmojiKeywords)(nil), "mtproto.TL_messages_getEmojiKeywords")
	proto.RegisterType((*TLMessagesGetEmojiKeywordsDifference)(nil), "mtproto.TL_messages_getEmojiKeywordsDifference")
	proto.RegisterType((*TLMessagesGetEmojiKeywordsLanguages)(nil), "mtproto.TL_messages_getEmojiKeywordsLanguages")
	proto.RegisterType((*TLMessagesGetEmojiURL)(nil), "mtproto.TL_messages_getEmojiURL")
	proto.RegisterType((*TLMessagesGetSearchCounters)(nil), "mtproto.TL_messages_getSearchCounters")
	proto.RegisterType((*TLMessagesRequestUrlAuth)(nil), "mtproto.TL_messages_requestUrlAuth")
	proto.RegisterType((*TLMessagesAcceptUrlAuth)(nil), "mtproto.TL_messages_acceptUrlAuth")
	proto.RegisterType((*TLMessagesHidePeerSettingsBar)(nil), "mtproto.TL_messages_hidePeerSettingsBar")
	proto.RegisterType((*TLMessagesGetScheduledHistory)(nil), "mtproto.TL_messages_getScheduledHistory")
	proto.RegisterType((*TLMessagesGetScheduledMessages)(nil), "mtproto.TL_messages_getScheduledMessages")
	proto.RegisterType((*TLMessagesSendScheduledMessages)(nil), "mtproto.TL_messages_sendScheduledMessages")
	proto.RegisterType((*TLMessagesDeleteScheduledMessages)(nil), "mtproto.TL_messages_deleteScheduledMessages")
	proto.RegisterType((*TLMessagesGetPollVotes)(nil), "mtproto.TL_messages_getPollVotes")
	proto.RegisterType((*TLMessagesToggleStickerSets)(nil), "mtproto.TL_messages_toggleStickerSets")
	proto.RegisterType((*TLMessagesGetDialogFilters)(nil), "mtproto.TL_messages_getDialogFilters")
	proto.RegisterType((*TLMessagesGetSuggestedDialogFilters)(nil), "mtproto.TL_messages_getSuggestedDialogFilters")
	proto.RegisterType((*TLMessagesUpdateDialogFilter)(nil), "mtproto.TL_messages_updateDialogFilter")
	proto.RegisterType((*TLMessagesUpdateDialogFiltersOrder)(nil), "mtproto.TL_messages_updateDialogFiltersOrder")
	proto.RegisterType((*TLMessagesGetOldFeaturedStickers)(nil), "mtproto.TL_messages_getOldFeaturedStickers")
	proto.RegisterType((*TLUploadGetFile114)(nil), "mtproto.TL_upload_getFile114")
	proto.RegisterType((*TLUploadReuploadCdnFile114)(nil), "mtproto.TL_upload_reuploadCdnFile114")
	proto.RegisterType((*TLUploadGetCdnFileHashes114)(nil), "mtproto.TL_upload_getCdnFileHashes114")
	proto.RegisterType((*TLUploadGetFileHashes)(nil), "mtproto.TL_upload_getFileHashes")
	proto.RegisterType((*TLHelpGetConfig114)(nil), "mtproto.TL_help_getConfig114")
	proto.RegisterType((*TLHelpGetAppUpdate114)(nil), "mtproto.TL_help_getAppUpdate114")
	proto.RegisterType((*TLHelpGetAppConfig)(nil), "mtproto.TL_help_getAppConfig")
	proto.RegisterType((*TLHelpGetPassportConfig)(nil), "mtproto.TL_help_getPassportConfig")
	proto.RegisterType((*TLHelpGetSupportName)(nil), "mtproto.TL_help_getSupportName")
	proto.RegisterType((*TLHelpGetUserInfo)(nil), "mtproto.TL_help_getUserInfo")
	proto.RegisterType((*TLHelpEditUserInfo)(nil), "mtproto.TL_help_editUserInfo")
	proto.RegisterType((*TLHelpGetPromoData)(nil), "mtproto.TL_help_getPromoData")
	proto.RegisterType((*TLHelpHidePromoData)(nil), "mtproto.TL_help_hidePromoData")
	proto.RegisterType((*TLChannelsGetMessages114)(nil), "mtproto.TL_channels_getMessages114")
	proto.RegisterType((*TLChannelsCreateChannel114)(nil), "mtproto.TL_channels_createChannel114")
	proto.RegisterType((*TLChannelsEditAdmin114)(nil), "mtproto.TL_channels_editAdmin114")
	proto.RegisterType((*TLChannelsExportMessageLink114)(nil), "mtproto.TL_channels_exportMessageLink114")
	proto.RegisterType((*TLChannelsGetAdminedPublicChannels114)(nil), "mtproto.TL_channels_getAdminedPublicChannels114")
	proto.RegisterType((*TLChannelsEditBanned114)(nil), "mtproto.TL_channels_editBanned114")
	proto.RegisterType((*TLChannelsGetLeftChannels)(nil), "mtproto.TL_channels_getLeftChannels")
	proto.RegisterType((*TLChannelsGetGroupsForDiscussion)(nil), "mtproto.TL_channels_getGroupsForDiscussion")
	proto.RegisterType((*TLChannelsSetDiscussionGroup)(nil), "mtproto.TL_channels_setDiscussionGroup")
	proto.RegisterType((*TLChannelsEditCreator)(nil), "mtproto.TL_channels_editCreator")
	proto.RegisterType((*TLChannelsEditLocation)(nil), "mtproto.TL_channels_editLocation")
	proto.RegisterType((*TLChannelsToggleSlowMode)(nil), "mtproto.TL_channels_toggleSlowMode")
	proto.RegisterType((*TLChannelsGetInactiveChannels)(nil), "mtproto.TL_channels_getInactiveChannels")
	proto.RegisterType((*TLBotsSetBotCommands)(nil), "mtproto.TL_bots_setBotCommands")
	proto.RegisterType((*TLPaymentsGetBankCardData)(nil), "mtproto.TL_payments_getBankCardData")
	proto.RegisterType((*TLStickersCreateStickerSet114)(nil), "mtproto.TL_stickers_createStickerSet114")
	proto.RegisterType((*TLStickersSetStickerSetThumb)(nil), "mtproto.TL_stickers_setStickerSetThumb")
	proto.RegisterType((*TLPhoneRequestCall114)(nil), "mtproto.TL_phone_requestCall114")
	proto.RegisterType((*TLPhoneDiscardCall114)(nil), "mtproto.TL_phone_discardCall114")
	proto.RegisterType((*TLPhoneSetCallRating114)(nil), "mtproto.TL_phone_setCallRating114")
	proto.RegisterType((*TLPhoneSendSignalingData)(nil), "mtproto.TL_phone_sendSignalingData")
	proto.RegisterType((*TLLangpackGetLangPack114)(nil), "mtproto.TL_langpack_getLangPack114")
	proto.RegisterType((*TLLangpackGetStrings114)(nil), "mtproto.TL_langpack_getStrings114")
	proto.RegisterType((*TLLangpackGetDifference114)(nil), "mtproto.TL_langpack_getDifference114")
	proto.RegisterType((*TLLangpackGetLanguages114)(nil), "mtproto.TL_langpack_getLanguages114")
	proto.RegisterType((*TLLangpackGetLanguage)(nil), "mtproto.TL_langpack_getLanguage")
	proto.RegisterType((*TLFoldersEditPeerFolders)(nil), "mtproto.TL_folders_editPeerFolders")
	proto.RegisterType((*TLFoldersDeleteFolder)(nil), "mtproto.TL_folders_deleteFolder")
	proto.RegisterType((*TLStatsGetBroadcastStats)(nil), "mtproto.TL_stats_getBroadcastStats")
	proto.RegisterType((*TLStatsLoadAsyncGraph)(nil), "mtproto.TL_stats_loadAsyncGraph")
	proto.RegisterType((*TLAccountGetGlobalPrivacySettings)(nil), "mtproto.TL_account_getGlobalPrivacySettings")
	proto.RegisterType((*TLAccountSetGlobalPrivacySettings)(nil), "mtproto.TL_account_setGlobalPrivacySettings")
	proto.RegisterType((*TLStatsGetMegagroupStats)(nil), "mtproto.TL_stats_getMegagroupStats")
	proto.RegisterType((*TLPhotosUploadProfilePhoto117)(nil), "mtproto.TL_photos_uploadProfilePhoto117")
	proto.RegisterType((*TLHelpDismissSuggestion)(nil), "mtproto.TL_help_dismissSuggestion")
	proto.RegisterType((*TLPhotosUpdateProfilePhoto117)(nil), "mtproto.TL_photos_updateProfilePhoto117")
	proto.RegisterType((*TLHelpGetCountriesList)(nil), "mtproto.TL_help_getCountriesList")
	proto.RegisterType((*TLMessagesSendEncrypted118)(nil), "mtproto.TL_messages_sendEncrypted118")
	proto.RegisterType((*TLMessagesGetBotCallbackAnswer118)(nil), "mtproto.TL_messages_getBotCallbackAnswer118")
	proto.RegisterType((*TLMessagesSendEncryptedFile118)(nil), "mtproto.TL_messages_sendEncryptedFile118")
	proto.RegisterType((*TLLangpackGetDifference118)(nil), "mtproto.TL_langpack_getDifference118")
	proto.RegisterType((*Vector_WallPaper)(nil), "mtproto.Vector_WallPaper")
	proto.RegisterType((*Vector_User)(nil), "mtproto.Vector_User")
	proto.RegisterType((*Vector_UserInfo)(nil), "mtproto.Vector_UserInfo")
	proto.RegisterType((*Vector_ContactStatus)(nil), "mtproto.Vector_ContactStatus")
	proto.RegisterType((*VectorInt)(nil), "mtproto.Vector_int")
	proto.RegisterType((*Vector_ReceivedNotifyMessage)(nil), "mtproto.Vector_ReceivedNotifyMessage")
	proto.RegisterType((*VectorLong)(nil), "mtproto.Vector_long")
	proto.RegisterType((*Vector_StickerSetCovered)(nil), "mtproto.Vector_StickerSetCovered")
	proto.RegisterType((*Vector_CdnFileHash)(nil), "mtproto.Vector_CdnFileHash")
	proto.RegisterType((*Vector_LangPackString)(nil), "mtproto.Vector_LangPackString")
	proto.RegisterType((*Vector_LangPackLanguage)(nil), "mtproto.Vector_LangPackLanguage")
	proto.RegisterType((*Vector_SecureValue)(nil), "mtproto.Vector_SecureValue")
	proto.RegisterType((*Vector_SavedContact)(nil), "mtproto.Vector_SavedContact")
	proto.RegisterType((*Vector_MessageRange)(nil), "mtproto.Vector_MessageRange")
	proto.RegisterType((*Vector_DialogPeer)(nil), "mtproto.Vector_DialogPeer")
	proto.RegisterType((*Vector_EmojiLanguage)(nil), "mtproto.Vector_EmojiLanguage")
	proto.RegisterType((*Vector_Messages_SearchCounter)(nil), "mtproto.Vector_Messages_SearchCounter")
	proto.RegisterType((*Vector_DialogFilter)(nil), "mtproto.Vector_DialogFilter")
	proto.RegisterType((*Vector_DialogFilterSuggested)(nil), "mtproto.Vector_DialogFilterSuggested")
	proto.RegisterType((*Vector_FileHash)(nil), "mtproto.Vector_FileHash")
}

func init() { proto.RegisterFile("schema.tl.sync_service.proto", fileDescriptor_171aad061a6a5831) }

var fileDescriptor_171aad061a6a5831 = []byte{
	// 18956 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0xbd, 0x59, 0x8c, 0x24, 0x49,
	0x96, 0x18, 0x56, 0x11, 0x99, 0x91, 0x87, 0xd5, 0xd1, 0x55, 0x5e, 0x57, 0x56, 0xd6, 0xed, 0x75,
	0xf7, 0x5d, 0x59, 0xdd, 0x9d, 0x35, 0xf7, 0x64, 0x65, 0x55, 0x75, 0x67, 0x77, 0x56, 0x57, 0x4e,
	0x64, 0x56, 0x75, 0xf7, 0xcc, 0xf6, 0xc4, 0x78, 0x86, 0x5b, 0x46, 0x7a, 0xa7, 0x87, 0x7b, 0xb4,
	0xbb, 0x47, 0x56, 0x65, 0x53, 0x4b, 0x49, 0xdc, 0x01, 0x41, 0x72, 0x29, 0x72, 0x56, 0x22, 0xa0,
	0x5d, 0x42, 0x2b, 0x08, 0x2b, 0x4a, 0xdc, 0x0f, 0x5d, 0xa4, 0x44, 0x42, 0x84, 0x20, 0x48, 0x10,
	0x08, 0x72, 0x24, 0x81, 0xc4, 0x6a, 0x75, 0x02, 0x02, 0x08, 0x69, 0x17, 0xfa, 0xd1, 0x8f, 0x04,
	0x41, 0x00, 0x21, 0x41, 0x90, 0x04, 0x7b, 0x76, 0xb8, 0x9d, 0x1e, 0x1e, 0x59, 0xd5, 0x43, 0xce,
	0x62, 0xbe, 0x32, 0xc3, 0xec, 0xf9, 0x33, 0xb3, 0x67, 0x66, 0xcf, 0x9e, 0xbd, 0xf7, 0xec, 0x3d,
	0x74, 0x2e, 0xef, 0x6e, 0xe3, 0x7e, 0xf0, 0x66, 0x11, 0xbf, 0x99, 0xef, 0x25, 0xdd, 0x4e, 0x8e,
	0xb3, 0xdd, 0xa8, 0x8b, 0xdf, 0x1c, 0x64, 0x69, 0x91, 0x7a, 0xd3, 0xfd, 0x02, 0xfe, 0x99, 0x9f,
	0x2f, 0xc1, 0xba, 0x69, 0x86, 0x3b, 0xc5, 0xde, 0x00, 0xe7, 0x14, 0x68, 0xfe, 0x84, 0x8a, 0x82,
	0x96, 0xfa, 0xdf, 0x47, 0xc7, 0x36, 0x56, 0x3b, 0x51, 0xb2, 0x9b, 0xee, 0xe0, 0xa5, 0xad, 0x02,
	0x67, 0x8f, 0xf2, 0x9e, 0x77, 0x12, 0x4d, 0xf5, 0xf3, 0x5e, 0x27, 0x0a, 0xe7, 0x1a, 0x97, 0x1a,
	0x37, 0x27, 0xda, 0xad, 0x7e, 0xde, 0x5b, 0x09, 0xbd, 0x13, 0xa8, 0xf5, 0xe5, 0x10, 0x67, 0x7b,
	0x73, 0xcd, 0x4b, 0x8d, 0x9b, 0x87, 0xda, 0xf4, 0x87, 0xbf, 0x8c, 0x3c, 0x03, 0x43, 0xee, 0x9d,
	0x46, 0xd3, 0x14, 0x45, 0x3e, 0xd7, 0xb8, 0x34, 0x71, 0x73, 0xa2, 0x3d, 0x05, 0x38, 0x72, 0x07,
	0x92, 0xbf, 0xdc, 0x64, 0xfd, 0x88, 0x8a, 0xe5, 0x34, 0x49, 0x70, 0xb7, 0x88, 0xd2, 0x84, 0xf4,
	0x23, 0x18, 0x44, 0xbc, 0x1f, 0xad, 0x76, 0x2b, 0x18, 0x44, 0x2b, 0xa1, 0x77, 0x19, 0x1d, 0x0a,
	0x31, 0x19, 0x7e, 0xa7, 0x9f, 0x86, 0x38, 0x06, 0x4c, 0xb3, 0xed, 0x83, 0xb4, 0xec, 0x11, 0x29,
	0xf2, 0xae, 0xa1, 0x23, 0xf9, 0x5e, 0x5e, 0xe0, 0x7e, 0x67, 0x17, 0x67, 0x79, 0x94, 0x26, 0x73,
	0x13, 0x00, 0x74, 0x98, 0x96, 0x3e, 0xa5, 0x85, 0xde, 0x45, 0x74, 0x30, 0x18, 0x0c, 0x04, 0xcc,
	0x24, 0xc0, 0xa0, 0x60, 0x30, 0xe0, 0x00, 0x37, 0xd1, 0x51, 0x86, 0x27, 0x0e, 0x92, 0x5e, 0xa7,
	0x9b, 0x86, 0x78, 0xae, 0x05, 0x50, 0x0c, 0xff, 0x6a, 0x90, 0xf4, 0x96, 0xd3, 0x10, 0x7b, 0x67,
	0xd1, 0x2c, 0x80, 0x0c, 0x82, 0xee, 0xce, 0xdc, 0x14, 0x80, 0xcc, 0x90, 0x82, 0xb5, 0xa0, 0xbb,
	0x23, 0x2a, 0xe1, 0xfb, 0xe9, 0xb2, 0x12, 0xbe, 0x14, 0x14, 0x99, 0x91, 0x29, 0xf2, 0x7d, 0x89,
	0xac, 0x9f, 0x44, 0xc5, 0xf6, 0x6a, 0xb0, 0x87, 0x33, 0x02, 0x1b, 0x93, 0x7f, 0x38, 0x41, 0x62,
	0x5e, 0x6a, 0xa1, 0xe9, 0x5b, 0xe8, 0xb4, 0x82, 0x21, 0x1d, 0x16, 0x4f, 0x06, 0x61, 0x50, 0x60,
	0x69, 0x12, 0x1a, 0xf2, 0x07, 0x8b, 0xd0, 0x64, 0x30, 0x2c, 0xb6, 0x3b, 0xdd, 0x6d, 0xdc, 0xdd,
	0x59, 0xdb, 0x4e, 0x13, 0x4c, 0xa8, 0x3d, 0x20, 0xff, 0x74, 0x92, 0x61, 0x7f, 0x93, 0xb5, 0x3c,
	0xdb, 0x3e, 0x08, 0x65, 0x1f, 0x43, 0x91, 0xff, 0xf7, 0x1a, 0xe8, 0x28, 0xff, 0x32, 0xc7, 0x49,
	0x08, 0xc3, 0xba, 0x81, 0x5e, 0x09, 0xe2, 0x38, 0x7d, 0xd6, 0xd9, 0x8a, 0x83, 0x7c, 0xbb, 0x1b,
	0xc4, 0x74, 0xa2, 0x66, 0xda, 0x47, 0xa0, 0xf8, 0x21, 0x2f, 0x35, 0x1a, 0x98, 0x30, 0x1a, 0xf0,
	0xde, 0x41, 0x47, 0xba, 0xc3, 0x2c, 0xc3, 0x49, 0xc1, 0x81, 0xc8, 0x54, 0x1d, 0x5c, 0x38, 0xfc,
	0x26, 0x5b, 0xf9, 0x6f, 0xde, 0x4b, 0xd3, 0xb8, 0x7d, 0x98, 0x01, 0xb1, 0xaf, 0xca, 0xe5, 0xd3,
	0x92, 0x97, 0xcf, 0x19, 0x34, 0x43, 0x8a, 0xb7, 0x83, 0x7c, 0x9b, 0x4d, 0xd4, 0x74, 0x30, 0x88,
	0x3e, 0x08, 0xf2, 0x6d, 0xff, 0x6f, 0x37, 0xd0, 0x11, 0x31, 0x90, 0xa8, 0x97, 0x3c, 0x19, 0xd4,
	0x18, 0xbe, 0x77, 0x1d, 0xbd, 0x42, 0x41, 0xc8, 0xf4, 0x52, 0xbc, 0x74, 0x49, 0x1e, 0x86, 0x62,
	0x42, 0x0d, 0x82, 0xdd, 0x3b, 0x8f, 0x50, 0x09, 0xc7, 0x86, 0x39, 0x2b, 0x40, 0x48, 0xf5, 0x56,
	0x94, 0xe5, 0x45, 0x27, 0x09, 0xfa, 0x98, 0xad, 0xc5, 0x59, 0x28, 0xf9, 0x38, 0xe8, 0xb3, 0x05,
	0xc6, 0x6b, 0x5b, 0x7c, 0x0d, 0xd1, 0x4a, 0xff, 0x2b, 0xb5, 0xdf, 0x2b, 0xc9, 0x2f, 0xae, 0xdf,
	0xfe, 0xd1, 0xb2, 0xed, 0x38, 0xed, 0x3d, 0x1e, 0x16, 0xfe, 0x79, 0x74, 0x96, 0x97, 0x64, 0x38,
	0xc7, 0xc5, 0xd2, 0xb0, 0xd8, 0x4e, 0xb3, 0xe8, 0xab, 0x80, 0xec, 0xea, 0xdc, 0xdf, 0x40, 0xc7,
	0xe5, 0xd5, 0xb2, 0x92, 0xec, 0x46, 0x64, 0x51, 0x5e, 0x41, 0x87, 0xe5, 0x1e, 0x53, 0xc6, 0x31,
	0xdb, 0x3e, 0x24, 0x75, 0x39, 0xf7, 0xe6, 0xd0, 0x74, 0x1f, 0xe7, 0x79, 0xd0, 0xc3, 0xac, 0xaf,
	0xfc, 0xa7, 0xbf, 0x50, 0x36, 0x8a, 0x9f, 0x0f, 0xd2, 0x4c, 0x6d, 0xd5, 0x3b, 0x8e, 0x5a, 0x61,
	0xb7, 0x64, 0x25, 0x93, 0x61, 0x77, 0x25, 0xf4, 0x97, 0xcb, 0x6f, 0xa2, 0xbe, 0xf9, 0xcd, 0x11,
	0xd4, 0x14, 0x1f, 0x34, 0x23, 0x60, 0x80, 0x9b, 0x7b, 0x05, 0xce, 0xf9, 0x3e, 0x83, 0x1f, 0xfe,
	0x5f, 0x6b, 0xc0, 0x46, 0x03, 0x2c, 0x9b, 0x51, 0x12, 0x6e, 0xe0, 0xfe, 0x80, 0xe0, 0xf9, 0x08,
	0xef, 0x79, 0x37, 0xd0, 0xd1, 0x01, 0xce, 0xfa, 0xb4, 0x72, 0x07, 0xef, 0x95, 0x3c, 0xf5, 0x30,
	0x29, 0x67, 0x60, 0x94, 0xb7, 0x26, 0x69, 0xd2, 0xa5, 0xa3, 0x9a, 0x68, 0xd3, 0x1f, 0x84, 0xf2,
	0xf8, 0xf9, 0x20, 0xca, 0x70, 0xde, 0x09, 0x0a, 0xa0, 0x7c, 0xab, 0x3d, 0xcb, 0x4a, 0x96, 0x0a,
	0xef, 0x35, 0x74, 0x0c, 0x27, 0xdd, 0x6c, 0x6f, 0x50, 0xe0, 0xb0, 0xc3, 0xc9, 0x32, 0x09, 0x7d,
	0x3b, 0x2a, 0x2a, 0x1e, 0x31, 0xfa, 0xfc, 0xa5, 0x06, 0xba, 0xa0, 0x0e, 0xf6, 0x5e, 0xaa, 0x8d,
	0xf7, 0x04, 0x6a, 0x6d, 0xc5, 0x41, 0x2f, 0xe7, 0xdc, 0x05, 0x7e, 0x48, 0xdb, 0xa8, 0xe9, 0xda,
	0x46, 0x13, 0xca, 0x36, 0xf2, 0xae, 0xa2, 0x23, 0x9b, 0x69, 0x41, 0x9b, 0x2a, 0xd2, 0x1d, 0xcc,
	0x39, 0xeb, 0xa1, 0x4d, 0xda, 0xe2, 0x06, 0x29, 0xf3, 0xbf, 0x8d, 0x4e, 0xaa, 0xec, 0x26, 0xc8,
	0xf3, 0x67, 0x69, 0x16, 0xc2, 0x42, 0x60, 0xff, 0x53, 0xf4, 0x94, 0x4b, 0x1d, 0xe2, 0x85, 0xb0,
	0x55, 0x2f, 0xa3, 0x8b, 0xe5, 0x1a, 0xfb, 0x72, 0x88, 0xf3, 0x82, 0x7f, 0xdf, 0xc6, 0xdd, 0x74,
	0x97, 0xf0, 0xb3, 0x37, 0xca, 0x79, 0xc9, 0x68, 0x99, 0x68, 0xc2, 0x43, 0x93, 0xb0, 0x98, 0xe9,
	0xae, 0x80, 0xff, 0xfd, 0x4e, 0xc9, 0xfe, 0xc8, 0xaa, 0x65, 0x6c, 0xec, 0xe5, 0xed, 0x23, 0xb9,
	0x81, 0x6e, 0x90, 0x74, 0x71, 0xfc, 0xb2, 0x1b, 0xb8, 0x8f, 0xe6, 0x78, 0x03, 0x61, 0x96, 0x0e,
	0xa4, 0x85, 0x98, 0x93, 0x93, 0x0c, 0x3f, 0xef, 0xe2, 0x41, 0x21, 0xd6, 0x22, 0x3f, 0x99, 0x8f,
	0xd0, 0x72, 0x0e, 0x29, 0x93, 0x0d, 0xe6, 0x85, 0xee, 0x4f, 0xe8, 0xab, 0x8d, 0x6c, 0x6b, 0xe8,
	0x0c, 0x01, 0xef, 0x76, 0xd3, 0x61, 0x52, 0x74, 0x32, 0xdc, 0x8b, 0xf2, 0x02, 0x67, 0xf7, 0xe1,
	0x30, 0x26, 0x0b, 0x18, 0x16, 0x00, 0x48, 0x22, 0x6c, 0x59, 0xcd, 0x42, 0xc9, 0xc6, 0xde, 0x00,
	0x8e, 0x3e, 0xba, 0x3e, 0xe8, 0x70, 0xe8, 0x0f, 0xbf, 0x4d, 0x77, 0x25, 0xc3, 0x38, 0x4c, 0x5e,
	0x06, 0xce, 0x7f, 0xa1, 0x41, 0xd7, 0x0b, 0x47, 0x0a, 0x07, 0xe1, 0xc7, 0x69, 0x11, 0x6d, 0xed,
	0xad, 0xe3, 0xa2, 0x88, 0x92, 0x5e, 0xee, 0xbd, 0x8e, 0x26, 0x07, 0x98, 0xcd, 0xc0, 0xc1, 0x85,
	0x39, 0x71, 0xb6, 0xac, 0x24, 0x83, 0x61, 0x41, 0x61, 0xd7, 0x30, 0xce, 0xda, 0x00, 0xe5, 0x7d,
	0x1b, 0xcd, 0xe4, 0xec, 0x4b, 0x68, 0xea, 0xe0, 0xc2, 0x25, 0xf5, 0x0b, 0x02, 0xab, 0xb6, 0xd0,
	0x16, 0x5f, 0xf8, 0xab, 0xe8, 0x9c, 0xd4, 0x9d, 0x1e, 0x2e, 0x5e, 0xa4, 0x2f, 0xfe, 0x25, 0xba,
	0xb5, 0xc5, 0x1c, 0xe4, 0x3a, 0x3e, 0x3f, 0xa6, 0x4b, 0x43, 0x19, 0xfe, 0x5a, 0x96, 0x6e, 0x45,
	0xb1, 0x7e, 0xf0, 0x34, 0x2b, 0x0f, 0x9e, 0x09, 0xf5, 0xe0, 0x21, 0xd4, 0x0e, 0x36, 0xd3, 0x61,
	0xc1, 0x76, 0x38, 0xfd, 0xe1, 0xdf, 0xa3, 0x4b, 0x48, 0x69, 0x6d, 0xbd, 0x08, 0x8a, 0x61, 0xee,
	0xdd, 0x40, 0xd3, 0xe9, 0xd6, 0x56, 0x1c, 0x25, 0x98, 0x8d, 0x4d, 0x3b, 0xc3, 0x79, 0xad, 0x3f,
	0xaf, 0xf4, 0xb8, 0x87, 0x8b, 0x4f, 0x82, 0x38, 0x5e, 0x0b, 0x06, 0x38, 0xcb, 0xfd, 0x84, 0xb2,
	0x0e, 0x31, 0x5e, 0xc2, 0xcd, 0x08, 0x39, 0xbc, 0xeb, 0x0a, 0xd9, 0x3c, 0x73, 0x42, 0xd8, 0xe4,
	0xbd, 0x81, 0xa6, 0x32, 0x1c, 0xe4, 0x69, 0xc2, 0xa6, 0xee, 0xa4, 0x80, 0x6c, 0x03, 0xb2, 0x36,
	0x54, 0xb6, 0x19, 0x90, 0xff, 0x9e, 0xd2, 0x17, 0xd8, 0x15, 0x4f, 0x72, 0x9c, 0x11, 0x8a, 0x78,
	0xf3, 0x68, 0x66, 0xc8, 0xfe, 0x67, 0xfb, 0x42, 0xfc, 0xf6, 0x17, 0x95, 0xbd, 0x41, 0xe9, 0x50,
	0xeb, 0xc3, 0x65, 0x65, 0x80, 0x3d, 0x5c, 0xac, 0x65, 0xd1, 0x6e, 0xd0, 0xdd, 0xf3, 0x5e, 0x45,
	0x13, 0x3b, 0x78, 0xcf, 0xbe, 0x2c, 0x18, 0xcc, 0x47, 0x78, 0xaf, 0x4d, 0x80, 0xfc, 0x42, 0x41,
	0x92, 0xef, 0x0b, 0x89, 0xf7, 0x16, 0x6a, 0x65, 0xc3, 0x18, 0xce, 0xbc, 0x89, 0x9b, 0x07, 0x17,
	0xce, 0x58, 0xa1, 0xdb, 0xc3, 0x18, 0xb7, 0x29, 0x9c, 0xbf, 0xa0, 0xd0, 0x2a, 0xc4, 0x31, 0x2e,
	0xf0, 0x12, 0xfd, 0xe5, 0x9d, 0x12, 0x64, 0xa7, 0x03, 0xe6, 0xf4, 0x35, 0xe6, 0x9a, 0x7d, 0xb0,
	0xb1, 0xb1, 0xea, 0x3f, 0x50, 0xea, 0x72, 0xb9, 0xce, 0xbb, 0x85, 0x26, 0x8a, 0x22, 0x66, 0x03,
	0x39, 0x2d, 0xba, 0xc6, 0x20, 0xee, 0x07, 0x7b, 0xf9, 0xc6, 0xc6, 0x6a, 0x9b, 0xc0, 0xf8, 0xbf,
	0xd7, 0x50, 0xf6, 0x08, 0xf0, 0xf7, 0xed, 0x20, 0xe9, 0xe1, 0x35, 0x21, 0x80, 0xfd, 0x13, 0x97,
	0x58, 0xfd, 0x3f, 0xd3, 0x40, 0xa7, 0x94, 0x85, 0x26, 0x3a, 0xf8, 0x0b, 0x94, 0xe7, 0x16, 0xd1,
	0x79, 0x63, 0xd1, 0x52, 0xd6, 0xbb, 0x9a, 0x76, 0x77, 0x70, 0x48, 0x66, 0x71, 0x80, 0xb3, 0x28,
	0xe5, 0xa2, 0x11, 0xfb, 0xe5, 0x5f, 0xd0, 0x79, 0x9a, 0x26, 0xf7, 0xdd, 0x51, 0x10, 0x9b, 0x92,
	0x21, 0x39, 0x5e, 0xc4, 0x79, 0x3f, 0xd1, 0x86, 0xff, 0xfd, 0x39, 0x85, 0x22, 0x64, 0x27, 0xb0,
	0x33, 0xdc, 0xdf, 0x50, 0x26, 0x54, 0xaa, 0x11, 0x4c, 0x74, 0x01, 0x9d, 0xe4, 0x93, 0x60, 0x13,
	0x28, 0x8e, 0xb3, 0xca, 0x35, 0x59, 0xae, 0xf8, 0xbd, 0x06, 0xba, 0x6c, 0x72, 0xca, 0x97, 0x80,
	0xd9, 0x5b, 0x41, 0x87, 0x12, 0xfc, 0xac, 0xa3, 0x1d, 0x1a, 0xd7, 0xc5, 0x82, 0xe0, 0x4d, 0xf2,
	0x8f, 0x60, 0x83, 0x89, 0xa3, 0xe3, 0x60, 0x82, 0x9f, 0x09, 0x6e, 0xfe, 0x57, 0xd4, 0xd3, 0x8c,
	0x0a, 0x2b, 0xc9, 0x56, 0x94, 0xf5, 0xf7, 0xb1, 0x9a, 0x39, 0xd5, 0xe9, 0x42, 0x80, 0xff, 0xf7,
	0xb9, 0x7c, 0x7f, 0xa2, 0xb0, 0xfd, 0xae, 0xd4, 0x23, 0xdb, 0xda, 0x6c, 0x8c, 0x5e, 0x9b, 0x4d,
	0x7d, 0x6d, 0x7e, 0xaa, 0x30, 0xd4, 0x1e, 0x2e, 0x36, 0xfa, 0x83, 0xb1, 0xe4, 0x46, 0x69, 0xf1,
	0x36, 0x95, 0xc5, 0xbb, 0x08, 0x0a, 0x08, 0xc2, 0x80, 0x73, 0x82, 0x97, 0x70, 0xe9, 0xdc, 0xf3,
	0xd9, 0x05, 0x60, 0xc2, 0x3c, 0x4c, 0x08, 0x00, 0xb9, 0x14, 0xf8, 0xdf, 0x44, 0x27, 0xe4, 0x0f,
	0x1f, 0x0e, 0xe3, 0x98, 0xd4, 0x89, 0x6f, 0x1b, 0xf5, 0xbf, 0x25, 0xe5, 0x2b, 0xc9, 0x56, 0x5a,
	0xeb, 0xdb, 0x5f, 0x03, 0xbe, 0x68, 0x7c, 0xbb, 0x1a, 0xe5, 0x05, 0x99, 0x52, 0x49, 0x38, 0x82,
	0xff, 0xc9, 0xc0, 0xd3, 0xad, 0xad, 0x1c, 0x17, 0x7c, 0xe0, 0xf4, 0x17, 0x39, 0xc1, 0x81, 0x9a,
	0xec, 0x7a, 0x41, 0x7f, 0xf8, 0x1f, 0x03, 0xa1, 0x05, 0xf6, 0x07, 0xc9, 0x2e, 0x8e, 0xd3, 0x01,
	0x1c, 0xe2, 0xd8, 0x3b, 0x8a, 0x26, 0xb0, 0xb8, 0xc8, 0x90, 0x7f, 0x41, 0x91, 0xd2, 0xed, 0xe2,
	0x3c, 0x2f, 0xd9, 0xce, 0x44, 0x1b, 0xd1, 0x22, 0xd8, 0x56, 0x8f, 0xd4, 0xde, 0x72, 0x7c, 0x30,
	0xda, 0x7d, 0xa0, 0xfb, 0x52, 0xed, 0xde, 0x5a, 0x1a, 0x25, 0x45, 0xfe, 0x41, 0x94, 0x17, 0x69,
	0xb6, 0x37, 0xee, 0xe8, 0xe3, 0xa8, 0x1f, 0x89, 0xd1, 0xc3, 0x0f, 0x82, 0x61, 0x0f, 0x07, 0x74,
	0xd1, 0xb7, 0xda, 0xf0, 0xbf, 0xdf, 0x01, 0x46, 0xa4, 0x35, 0xd9, 0x0e, 0x92, 0x1d, 0x6b, 0x7b,
	0x67, 0xd1, 0xec, 0x56, 0x96, 0xf6, 0x3b, 0x59, 0x90, 0xec, 0xb0, 0x26, 0x67, 0x48, 0x01, 0x7c,
	0x60, 0x27, 0xf9, 0xef, 0x36, 0xe0, 0x7e, 0x40, 0x5b, 0xc8, 0x19, 0x3b, 0x0b, 0xad, 0xd8, 0xab,
	0x77, 0x09, 0xb9, 0x9a, 0xa5, 0x71, 0x08, 0x9c, 0x89, 0x5f, 0xcd, 0xd2, 0x38, 0x24, 0xf8, 0x60,
	0xf9, 0x03, 0x5e, 0x26, 0xb0, 0xb1, 0x5f, 0xc6, 0xf1, 0xd2, 0x32, 0xb5, 0x3c, 0x58, 0x5a, 0xac,
	0xe5, 0x85, 0x2d, 0x74, 0x91, 0x9b, 0x35, 0xd3, 0xac, 0x6c, 0xc6, 0x3c, 0x39, 0xfd, 0xaf, 0x90,
	0xaf, 0x36, 0xd3, 0xc6, 0x82, 0x18, 0x25, 0x77, 0xdb, 0x07, 0x55, 0x6a, 0xb4, 0xfd, 0x43, 0xe0,
	0xfd, 0x7c, 0x06, 0x92, 0xb0, 0x76, 0xd3, 0x3a, 0xee, 0xa6, 0x89, 0x7b, 0x51, 0x9d, 0xdd, 0xf7,
	0x71, 0x12, 0xe2, 0x8c, 0x7c, 0xf8, 0x45, 0x9e, 0x26, 0x84, 0x59, 0x16, 0x38, 0x29, 0xf8, 0xb1,
	0x4e, 0xca, 0x96, 0x69, 0x91, 0xff, 0x0d, 0x89, 0xee, 0xb9, 0xc4, 0x24, 0x6a, 0x7c, 0xfa, 0x6d,
	0x60, 0xc8, 0x04, 0x20, 0xe8, 0x16, 0x79, 0x27, 0x18, 0x0c, 0xe2, 0xbd, 0x87, 0x59, 0x84, 0x93,
	0xb0, 0xce, 0xd7, 0xdf, 0x82, 0x15, 0x5f, 0x7e, 0x3d, 0x0c, 0xa3, 0x62, 0x89, 0xa0, 0xa8, 0xf3,
	0xf1, 0x77, 0x60, 0xc3, 0x8b, 0x8f, 0x89, 0x34, 0x40, 0x3e, 0x05, 0xf6, 0x34, 0x7e, 0xdb, 0x39,
	0x0e, 0xb2, 0xee, 0x36, 0xf0, 0xd5, 0xf1, 0xdb, 0xa6, 0x1f, 0xaf, 0xa7, 0xc3, 0xac, 0x8b, 0xeb,
	0x7c, 0x7e, 0x46, 0xa5, 0x5a, 0x0f, 0x17, 0xf4, 0xee, 0x82, 0xf9, 0xdd, 0x58, 0xae, 0x5a, 0x66,
	0xff, 0x2b, 0xc2, 0x4b, 0x8b, 0x09, 0x2f, 0x8f, 0xd1, 0xbc, 0x0c, 0x4e, 0xd5, 0x2e, 0xe2, 0x8b,
	0xdb, 0x68, 0x86, 0x57, 0xb1, 0x33, 0xe6, 0xa4, 0xca, 0xeb, 0x19, 0x64, 0x5b, 0x80, 0xf9, 0xdf,
	0x03, 0xbe, 0x27, 0x10, 0x52, 0xe9, 0x9a, 0x81, 0xd5, 0x3a, 0x35, 0xbe, 0xaf, 0xf6, 0x48, 0x41,
	0x50, 0xef, 0xbc, 0xa3, 0x07, 0xa5, 0xc0, 0xb0, 0x19, 0xa7, 0xdd, 0x9d, 0x5a, 0x4d, 0x7f, 0x03,
	0xd4, 0x7e, 0xe2, 0xc3, 0x61, 0x52, 0xff, 0xd3, 0x87, 0xea, 0x6a, 0xe8, 0xe1, 0xe2, 0x5e, 0x2c,
	0x64, 0x51, 0xc6, 0xd7, 0x1b, 0x76, 0xbe, 0xde, 0x94, 0xf8, 0x3a, 0x13, 0x26, 0x05, 0x1e, 0xaa,
	0x27, 0x5c, 0x0e, 0x32, 0xd2, 0xb9, 0x53, 0x96, 0x99, 0x0a, 0x32, 0x38, 0x8b, 0x28, 0x5c, 0xa7,
	0x1b, 0x64, 0x94, 0x38, 0xad, 0x36, 0x92, 0x3e, 0xbd, 0x0b, 0x1b, 0x5b, 0x5b, 0x6d, 0xde, 0x21,
	0xd4, 0xf8, 0x92, 0x2d, 0xae, 0xc6, 0x97, 0x8e, 0xee, 0x7c, 0x03, 0x14, 0x1d, 0xe2, 0xcb, 0x0c,
	0xe7, 0x69, 0xbc, 0x5b, 0xef, 0x82, 0xf8, 0x2f, 0x36, 0x8d, 0x95, 0xb8, 0x91, 0x0e, 0xc8, 0x0d,
	0x37, 0xf7, 0xae, 0xa3, 0x23, 0xdd, 0x34, 0xcb, 0x70, 0x3e, 0x48, 0x93, 0x10, 0x27, 0x45, 0xce,
	0x05, 0x3f, 0xb5, 0xd4, 0x3b, 0x8d, 0xa6, 0x37, 0xd3, 0x22, 0xef, 0x0c, 0xfa, 0xc0, 0x0b, 0x67,
	0xda, 0x53, 0xe4, 0xe7, 0x5a, 0x9f, 0x0c, 0x19, 0x2a, 0xa2, 0x04, 0xee, 0xe9, 0x93, 0x50, 0x89,
	0x48, 0xd1, 0x0a, 0x94, 0x10, 0x00, 0xc6, 0x69, 0x83, 0x38, 0xce, 0xe1, 0xb0, 0x98, 0x69, 0x53,
	0xe6, 0xbb, 0x4c, 0x4a, 0xc8, 0xb4, 0xf4, 0xb2, 0x74, 0x38, 0xc8, 0x41, 0xc3, 0x3e, 0xd3, 0x66,
	0xbf, 0xc8, 0x90, 0xc8, 0xa5, 0x26, 0xc1, 0x71, 0x0e, 0x76, 0x90, 0x99, 0xb6, 0xf8, 0x2d, 0x4d,
	0xe5, 0x8c, 0x7d, 0x2a, 0x67, 0xb5, 0x23, 0x1a, 0xb6, 0x1b, 0x92, 0xb6, 0xdb, 0x9f, 0x86, 0x1b,
	0x81, 0x4c, 0x4f, 0x41, 0x95, 0x76, 0x40, 0x24, 0x67, 0xef, 0x1d, 0x34, 0xd3, 0x0d, 0x0a, 0xdc,
	0x4b, 0x33, 0xf3, 0xfa, 0xcb, 0x20, 0x97, 0x59, 0x7d, 0x5b, 0x40, 0x0a, 0xad, 0x42, 0xb3, 0x5a,
	0xab, 0xa0, 0x2f, 0x2f, 0x68, 0x7f, 0x3d, 0xd8, 0xc5, 0xa1, 0x7f, 0x0b, 0x66, 0x8b, 0xa9, 0x68,
	0x61, 0xb6, 0x98, 0x5a, 0x36, 0x17, 0x4a, 0xe6, 0x09, 0xaa, 0x64, 0xf6, 0x7f, 0x4e, 0xef, 0x80,
	0x32, 0xec, 0xfd, 0x28, 0x88, 0xd3, 0x5e, 0xee, 0x5d, 0x43, 0x47, 0xf0, 0xf3, 0x6e, 0x3c, 0x0c,
	0x71, 0x67, 0x10, 0x25, 0x09, 0x0e, 0xd9, 0xc4, 0x1e, 0x66, 0xa5, 0x6b, 0x50, 0x48, 0x66, 0x87,
	0x92, 0xae, 0x43, 0xee, 0x2e, 0x4c, 0xc8, 0x40, 0xb4, 0xe8, 0x3e, 0x91, 0xdf, 0xce, 0xa2, 0x59,
	0x06, 0x10, 0x85, 0x4c, 0xc6, 0x99, 0xa1, 0x05, 0x2b, 0xa1, 0x77, 0x47, 0x7c, 0x0d, 0x63, 0x6e,
	0x39, 0xc7, 0xcc, 0x30, 0x82, 0xde, 0x45, 0xcc, 0xd1, 0x94, 0xbc, 0xbe, 0xff, 0x67, 0x73, 0x28,
	0x5c, 0x46, 0xab, 0xab, 0xa8, 0x51, 0xba, 0xda, 0xd4, 0xba, 0x3a, 0x72, 0xa0, 0xe7, 0x11, 0x0a,
	0xc2, 0xb0, 0xc3, 0x96, 0x15, 0x1d, 0xe9, 0x6c, 0x10, 0x86, 0x8f, 0xb5, 0x95, 0xd5, 0x92, 0x57,
	0xd6, 0x49, 0x34, 0xd5, 0x0f, 0x9e, 0x93, 0xf6, 0xd8, 0x60, 0xfa, 0xc1, 0xf3, 0x95, 0x10, 0x8a,
	0xa3, 0x84, 0x14, 0x4f, 0xb3, 0xe2, 0x28, 0x59, 0x09, 0xfd, 0x7f, 0xd4, 0x84, 0xed, 0x2f, 0xc6,
	0xc8, 0xb6, 0x7f, 0xcd, 0x25, 0x43, 0xd9, 0xc4, 0x04, 0x67, 0x13, 0xaf, 0xa1, 0x69, 0x90, 0x1a,
	0xd9, 0xb4, 0xd8, 0x19, 0xe2, 0x14, 0x01, 0x59, 0x09, 0xbd, 0xb7, 0xd0, 0xd4, 0x56, 0x14, 0x17,
	0x62, 0x8e, 0x4a, 0xfd, 0x07, 0x5f, 0x5b, 0x0f, 0xa1, 0xba, 0xcd, 0xc0, 0x88, 0x58, 0x48, 0x46,
	0x00, 0xb4, 0xa2, 0x43, 0x9b, 0xee, 0x47, 0x09, 0x10, 0x8a, 0x54, 0x05, 0xcf, 0x69, 0xd5, 0x34,
	0xab, 0x0a, 0x9e, 0x9b, 0x8b, 0x65, 0x46, 0x9b, 0x01, 0x95, 0xc0, 0xb3, 0x4e, 0x02, 0x23, 0x3b,
	0x81, 0x0f, 0xda, 0x09, 0x7c, 0x48, 0x26, 0xf0, 0xa7, 0xea, 0xd6, 0xc9, 0x70, 0x10, 0x8e, 0xbb,
	0x88, 0xca, 0x06, 0x9b, 0x52, 0x83, 0xfe, 0x6f, 0x35, 0xe0, 0x34, 0x15, 0xa8, 0xe9, 0x61, 0xc8,
	0x91, 0x9f, 0x47, 0xe8, 0x8b, 0x61, 0x5e, 0x74, 0xba, 0x31, 0xb9, 0x09, 0xd0, 0x8d, 0x36, 0x4b,
	0x4a, 0x96, 0x49, 0x01, 0x55, 0x65, 0xed, 0xa6, 0x3b, 0x98, 0xf3, 0x4e, 0xfa, 0x4b, 0xf4, 0x69,
	0xb2, 0x76, 0x9f, 0x5a, 0x72, 0x9f, 0xee, 0xc3, 0xf9, 0xac, 0x75, 0x49, 0xf0, 0x8a, 0xb2, 0xd1,
	0xa6, 0xd2, 0x28, 0xe5, 0x21, 0x13, 0x82, 0x87, 0xbc, 0x0b, 0x9a, 0x18, 0x89, 0x66, 0x5d, 0x1c,
	0xed, 0x0a, 0x53, 0x50, 0x2e, 0x35, 0xde, 0x90, 0x1b, 0xcf, 0x41, 0x61, 0x28, 0x2d, 0xe5, 0x62,
	0x63, 0x6f, 0x40, 0xd8, 0x66, 0x5d, 0x42, 0x2f, 0xa0, 0xa9, 0x00, 0x4c, 0xf7, 0x6c, 0xdd, 0xcf,
	0x0b, 0xc8, 0x75, 0x9c, 0xf0, 0xe6, 0x97, 0x00, 0xa2, 0xcd, 0x20, 0xfd, 0x9f, 0x4e, 0xa8, 0x13,
	0x9c, 0x97, 0x90, 0x64, 0x0e, 0x92, 0xb4, 0xf3, 0x0c, 0x6f, 0x0e, 0xb8, 0xc1, 0x6f, 0xa6, 0x3d,
	0x9b, 0xa4, 0x9f, 0xd0, 0x02, 0x42, 0x8e, 0x3c, 0x8a, 0x31, 0xbb, 0x48, 0xcd, 0xb4, 0xd9, 0x2f,
	0xef, 0x02, 0x42, 0x9b, 0x41, 0x77, 0x87, 0x9c, 0x39, 0x49, 0x28, 0x8e, 0x2f, 0x51, 0x42, 0xf8,
	0x06, 0xcc, 0x6a, 0x27, 0xcc, 0x82, 0xad, 0x82, 0x1f, 0x5f, 0x50, 0x74, 0x9f, 0x94, 0x88, 0xf1,
	0x4e, 0x8d, 0x18, 0xef, 0x35, 0xf4, 0x4a, 0x86, 0x07, 0xf1, 0x5e, 0xa7, 0x48, 0x3b, 0xcc, 0x63,
	0x82, 0xee, 0x9e, 0x43, 0x50, 0xbc, 0x91, 0x3e, 0x02, 0xc7, 0x09, 0xc9, 0x68, 0x39, 0xa3, 0x18,
	0x2d, 0xc9, 0xe6, 0xca, 0x82, 0x24, 0xa4, 0x5b, 0x7e, 0x16, 0xae, 0xb9, 0x33, 0xb4, 0x60, 0x25,
	0xf4, 0x16, 0x11, 0x45, 0xd3, 0xe9, 0x07, 0xd9, 0xce, 0x70, 0x00, 0x9b, 0xe8, 0xe0, 0xc2, 0x09,
	0x59, 0x55, 0x1d, 0xef, 0x3d, 0x82, 0xba, 0xf6, 0xc1, 0xac, 0xfc, 0xe1, 0x2d, 0xa0, 0x19, 0x9c,
	0x14, 0x51, 0x11, 0xe1, 0x7c, 0xee, 0x20, 0x08, 0x73, 0xa7, 0x74, 0xde, 0xf0, 0x80, 0xd4, 0xef,
	0xb5, 0x05, 0x9c, 0xff, 0x9f, 0x36, 0xf5, 0xc9, 0x27, 0xd3, 0x10, 0x46, 0x81, 0x44, 0xe5, 0x66,
	0x05, 0x95, 0x27, 0x46, 0x51, 0x79, 0xd2, 0x49, 0xe5, 0xd6, 0xf8, 0x54, 0x9e, 0xb2, 0x50, 0xf9,
	0x16, 0x6a, 0xf5, 0x49, 0x87, 0x61, 0x0a, 0x0e, 0x2e, 0x1c, 0x57, 0xf1, 0xc1, 0x58, 0xda, 0x14,
	0x42, 0x25, 0xfb, 0xcc, 0x08, 0xb2, 0xcf, 0xd6, 0x24, 0xbb, 0xff, 0xd3, 0x26, 0xc8, 0x73, 0x82,
	0x84, 0x5b, 0x69, 0xf6, 0x2c, 0xc8, 0x42, 0x79, 0xf7, 0xee, 0x8b, 0x90, 0x3e, 0x3a, 0xfc, 0x2c,
	0x2a, 0xb6, 0x3b, 0xfd, 0xbd, 0x4e, 0xde, 0x4d, 0x33, 0x2e, 0x90, 0x1d, 0x24, 0x85, 0x8f, 0xf6,
	0xd6, 0x49, 0x91, 0xf7, 0x16, 0xd3, 0x37, 0x8c, 0x20, 0x28, 0xe8, 0x20, 0xe0, 0xc4, 0xa6, 0x2c,
	0x63, 0x8a, 0xb3, 0x0c, 0x95, 0x24, 0xd3, 0x60, 0x18, 0x2c, 0x49, 0xf2, 0x1a, 0x9a, 0x2e, 0x52,
	0x8a, 0x7b, 0xc6, 0x89, 0x7b, 0xaa, 0x48, 0xc9, 0x5f, 0xff, 0xfb, 0xea, 0xa1, 0x4f, 0xad, 0x33,
	0xeb, 0x83, 0xa0, 0x5f, 0x97, 0x8d, 0xe8, 0x4c, 0x70, 0x3b, 0x0a, 0x71, 0x7b, 0x7c, 0x2c, 0x0f,
	0xd4, 0xd9, 0xe8, 0x51, 0x51, 0x45, 0xa8, 0x70, 0xeb, 0xa2, 0xb9, 0x0e, 0xd7, 0x6f, 0x19, 0xcd,
	0xf2, 0x76, 0x50, 0x98, 0x72, 0xdb, 0x82, 0x21, 0xe2, 0x3d, 0x1c, 0xc6, 0x31, 0x81, 0x25, 0x82,
	0x76, 0x77, 0x3b, 0x28, 0x4a, 0x7e, 0x3b, 0x45, 0x7e, 0xae, 0x84, 0xfe, 0x87, 0xea, 0x01, 0x84,
	0xc3, 0x08, 0x90, 0x6f, 0x44, 0x45, 0x8c, 0x9d, 0x5f, 0x81, 0x85, 0x93, 0x40, 0x08, 0x0b, 0x27,
	0xf9, 0xe1, 0x77, 0xed, 0xb8, 0xd6, 0xb6, 0xd3, 0x22, 0x75, 0xe3, 0x7a, 0x03, 0xb5, 0x06, 0x04,
	0x82, 0x31, 0xec, 0xd3, 0xda, 0x05, 0x94, 0x23, 0x68, 0x53, 0x28, 0xff, 0x9f, 0x51, 0x07, 0x19,
	0x84, 0x21, 0x01, 0x81, 0x7b, 0xb9, 0xb3, 0x89, 0xd7, 0xd0, 0x34, 0xb9, 0xb6, 0xf0, 0xe3, 0xd7,
	0x21, 0xd4, 0x10, 0x90, 0x15, 0x58, 0x86, 0x5b, 0xcf, 0xc2, 0x8e, 0xac, 0x93, 0x9b, 0xd9, 0x7a,
	0x16, 0xae, 0x82, 0x3c, 0xb9, 0x69, 0x3b, 0x1c, 0x5f, 0x6e, 0x07, 0xfc, 0x4f, 0xd5, 0xd5, 0xdb,
	0xcd, 0x70, 0x40, 0xdb, 0xf0, 0x6e, 0xa2, 0x16, 0x28, 0x61, 0x2a, 0xee, 0xc7, 0x14, 0xc0, 0x31,
	0x41, 0x5f, 0xaa, 0xbd, 0x57, 0xb9, 0x43, 0xed, 0x23, 0x96, 0x2e, 0xbb, 0xa6, 0xf0, 0x49, 0x51,
	0xf6, 0xed, 0x84, 0xca, 0xca, 0x74, 0xd9, 0x89, 0x5c, 0x25, 0xb6, 0xc1, 0x50, 0xd0, 0x23, 0x67,
	0x12, 0x77, 0x7b, 0xa3, 0xd4, 0xe2, 0x3f, 0xbd, 0x2b, 0xe8, 0x30, 0xc3, 0x18, 0xe3, 0xa4, 0x57,
	0x6c, 0xb3, 0xc6, 0x0e, 0xd1, 0xc2, 0x55, 0x28, 0xf3, 0xbf, 0x02, 0x5b, 0x8e, 0xb4, 0xc9, 0xc1,
	0x05, 0xe3, 0x01, 0x75, 0x3a, 0x21, 0x58, 0x24, 0xa2, 0x37, 0xea, 0xcc, 0x7a, 0x39, 0x08, 0x26,
	0xe5, 0x0b, 0xe6, 0xf3, 0x0a, 0x9a, 0xe8, 0x75, 0x02, 0x18, 0xdb, 0xa1, 0x76, 0xb3, 0xb7, 0xe4,
	0xff, 0xf9, 0x86, 0x2a, 0xde, 0x04, 0xdd, 0x2e, 0x1e, 0xc8, 0x6d, 0xbf, 0xa5, 0xd0, 0xf2, 0xac,
	0xda, 0xf0, 0x03, 0xee, 0x18, 0x43, 0x26, 0x95, 0x11, 0x15, 0x9a, 0xd8, 0x64, 0x6e, 0x3d, 0xcd,
	0xde, 0x3d, 0xef, 0x06, 0x7a, 0x65, 0x07, 0xef, 0x75, 0xb6, 0xa2, 0xa4, 0x87, 0xb3, 0x41, 0x16,
	0x31, 0x11, 0x63, 0xa2, 0x7d, 0x64, 0x07, 0xef, 0x3d, 0x2c, 0x4b, 0xfd, 0xbb, 0x2a, 0x1d, 0xc2,
	0x28, 0xef, 0x06, 0x59, 0x28, 0xf5, 0xc5, 0xb9, 0xf7, 0x9f, 0xc3, 0x65, 0x55, 0x16, 0xb6, 0x44,
	0xcf, 0x98, 0xd4, 0x35, 0xf6, 0x30, 0xae, 0xa1, 0xa9, 0x02, 0x3e, 0x65, 0xeb, 0x5c, 0xb3, 0xd6,
	0xb0, 0x4a, 0x3f, 0x41, 0x97, 0x74, 0x89, 0x5a, 0x60, 0xe3, 0xd2, 0xef, 0xd8, 0x6d, 0xcb, 0x37,
	0x88, 0xa6, 0x72, 0x83, 0xf0, 0x7f, 0x5d, 0xe5, 0x4c, 0x44, 0xb2, 0x10, 0x18, 0xc6, 0x6f, 0xc8,
	0x58, 0x2b, 0xf2, 0x41, 0xe5, 0xa1, 0xc9, 0x30, 0x28, 0xf8, 0x62, 0x81, 0xff, 0xfd, 0xbf, 0xd9,
	0x50, 0xe7, 0x48, 0x69, 0xff, 0x61, 0x14, 0xe3, 0xaf, 0xbf, 0x0f, 0xa4, 0x85, 0xad, 0x28, 0xc6,
	0xec, 0x56, 0xe0, 0x6a, 0x81, 0x74, 0xa6, 0x0d, 0x80, 0xfe, 0x4f, 0x1b, 0xea, 0x24, 0x29, 0x9d,
	0x5e, 0xa7, 0xde, 0xbf, 0xbf, 0x00, 0xda, 0xbd, 0xa3, 0x4e, 0x1d, 0xbf, 0x48, 0xfc, 0x60, 0x88,
	0x87, 0x70, 0x40, 0x91, 0x29, 0xff, 0xb2, 0xe0, 0x0e, 0x63, 0xe4, 0x52, 0xf1, 0x83, 0x22, 0xf7,
	0xdb, 0x60, 0x9d, 0xd4, 0x24, 0x80, 0xb2, 0xf7, 0xe4, 0x10, 0x1f, 0xb7, 0xeb, 0xfe, 0x6d, 0x1d,
	0x67, 0xc0, 0x59, 0x27, 0x53, 0xdb, 0x9a, 0x27, 0xf2, 0xdb, 0x2a, 0xc3, 0xed, 0xe1, 0x62, 0x29,
	0x8e, 0xd7, 0x8b, 0xa8, 0xbb, 0x43, 0x98, 0xb4, 0x4d, 0x5f, 0xfb, 0x0d, 0x75, 0xa5, 0xf4, 0x70,
	0xf1, 0x09, 0xde, 0x5c, 0x0b, 0x7a, 0x78, 0x2d, 0xc3, 0xbb, 0x11, 0x7e, 0x26, 0x4b, 0xf2, 0x0d,
	0xd5, 0xfd, 0x70, 0x51, 0xe5, 0x49, 0x4c, 0x3f, 0x48, 0xb6, 0x3a, 0xb8, 0x4f, 0xb9, 0xf9, 0xc0,
	0x6d, 0x55, 0x4c, 0x01, 0x93, 0x87, 0xf4, 0x9d, 0xdc, 0x4d, 0x66, 0x9d, 0xf5, 0x17, 0xd4, 0xb6,
	0x98, 0xb2, 0xb2, 0xfa, 0x9b, 0x27, 0xea, 0x4c, 0x82, 0x52, 0x1b, 0x28, 0xb1, 0x8e, 0x0b, 0xef,
	0x2e, 0x42, 0x39, 0xa3, 0x0b, 0xd3, 0xa4, 0x1a, 0x7e, 0x21, 0x25, 0x74, 0x5b, 0x82, 0x25, 0xeb,
	0x54, 0x21, 0x59, 0x94, 0xe4, 0x45, 0x20, 0xa8, 0xfc, 0x42, 0xb8, 0xbd, 0x5b, 0x68, 0x26, 0xc8,
	0xba, 0xdb, 0x64, 0xc1, 0xd9, 0x19, 0x9a, 0xa8, 0xf6, 0x7f, 0xa4, 0xae, 0x8e, 0x61, 0xf2, 0x12,
	0xfb, 0xe1, 0xff, 0x5e, 0x43, 0x15, 0x01, 0xf3, 0x22, 0x00, 0xe7, 0x49, 0xef, 0x2a, 0x9a, 0xd8,
	0x4c, 0x8b, 0x8a, 0xf3, 0x8d, 0x54, 0xd7, 0x56, 0x05, 0x55, 0x9d, 0xe4, 0xe4, 0x32, 0x05, 0xcd,
	0x76, 0x06, 0x41, 0x16, 0xf4, 0xb9, 0xa7, 0x3a, 0x14, 0xad, 0x91, 0x12, 0xff, 0x37, 0xb4, 0x43,
	0x51, 0x52, 0x31, 0x3e, 0x8d, 0xf0, 0xb3, 0x7c, 0x6c, 0x01, 0x83, 0x5f, 0x0c, 0x5e, 0x43, 0xb3,
	0x51, 0xd2, 0xcd, 0x70, 0x9f, 0xdf, 0xb3, 0x8d, 0x69, 0x28, 0xeb, 0xfd, 0x9f, 0xa8, 0x9d, 0x28,
	0xd2, 0x5e, 0x2f, 0x06, 0xe9, 0x69, 0x29, 0xec, 0x47, 0x49, 0xee, 0x96, 0xd1, 0x6e, 0xa0, 0x69,
	0x9c, 0x04, 0x9b, 0xb1, 0x6b, 0xaa, 0x79, 0xad, 0xff, 0x9b, 0x0d, 0xbb, 0x9c, 0x0b, 0x0d, 0xbc,
	0x24, 0x21, 0xf4, 0x26, 0x9a, 0x89, 0x88, 0x70, 0xdb, 0x8f, 0x12, 0xfb, 0x88, 0xa7, 0xa3, 0x1c,
	0xda, 0xd3, 0x85, 0xfe, 0x7e, 0xd4, 0xcb, 0xb8, 0xb8, 0xe8, 0xdc, 0xf0, 0x7f, 0xa3, 0x01, 0xe6,
	0x29, 0x4d, 0x63, 0xf8, 0x7e, 0x9c, 0x6e, 0x06, 0xb1, 0x66, 0x36, 0xd0, 0x14, 0x9c, 0x4d, 0x43,
	0xc1, 0xa9, 0x29, 0x6b, 0x27, 0x6a, 0x29, 0x6b, 0x2b, 0xd5, 0xbf, 0x56, 0x9d, 0xa8, 0xbf, 0xaa,
	0x0a, 0x2b, 0x19, 0x4e, 0xb3, 0x10, 0x67, 0xe5, 0x7e, 0x01, 0x99, 0xb7, 0x1f, 0xe4, 0x3b, 0xdc,
	0xd6, 0x40, 0x7f, 0x90, 0x52, 0x80, 0x04, 0xdd, 0xd4, 0x44, 0x9b, 0xfe, 0xf0, 0xb7, 0x0d, 0x36,
	0x7b, 0x3f, 0xed, 0x0e, 0xc9, 0x02, 0xba, 0xb7, 0xc7, 0x9d, 0x34, 0xf2, 0xed, 0x60, 0xe1, 0xdd,
	0xf7, 0x98, 0x0b, 0x07, 0xfb, 0x45, 0x18, 0x5b, 0x1e, 0x7d, 0xc5, 0x09, 0x01, 0xff, 0x93, 0xd1,
	0xf4, 0xa3, 0x3e, 0x7d, 0xeb, 0xc2, 0xdd, 0x13, 0x49, 0xc1, 0xc6, 0xde, 0x00, 0xfb, 0xdf, 0x55,
	0xa5, 0x79, 0x46, 0xea, 0x68, 0x2b, 0xd7, 0x08, 0xed, 0x70, 0x0f, 0xf0, 0xdf, 0x54, 0xa7, 0xaa,
	0xc7, 0xf4, 0xf9, 0x80, 0xc1, 0x76, 0x80, 0x84, 0x60, 0xe3, 0x2a, 0xdb, 0x0b, 0x76, 0xf1, 0xfb,
	0xd1, 0x96, 0x77, 0x5d, 0xb2, 0x71, 0x9d, 0x52, 0x67, 0x87, 0x8f, 0x1c, 0xf6, 0xda, 0x35, 0x34,
	0x35, 0x4c, 0xc8, 0x47, 0x0e, 0x01, 0x8e, 0x56, 0xfa, 0x7f, 0xd8, 0x50, 0xd9, 0x5d, 0x0f, 0x17,
	0xd4, 0x30, 0x73, 0x2f, 0x2d, 0xda, 0x38, 0x1f, 0xc6, 0x45, 0xce, 0x79, 0x53, 0xb3, 0x1e, 0x6f,
	0x9a, 0x18, 0xc1, 0x14, 0xee, 0xa0, 0xd9, 0x1e, 0x4e, 0x3b, 0x83, 0x94, 0x48, 0xc2, 0x93, 0xb6,
	0x71, 0xbc, 0x8f, 0x53, 0x70, 0x89, 0x68, 0xcf, 0xf4, 0xd8, 0x7f, 0xe5, 0x2b, 0x13, 0xea, 0x4c,
	0x40, 0x7f, 0x48, 0xa4, 0xa6, 0x8f, 0x2f, 0x38, 0xa9, 0x7f, 0xaf, 0xa9, 0x0e, 0x2a, 0xb7, 0x0c,
	0x6a, 0x0e, 0x4d, 0xf7, 0x82, 0x38, 0xe6, 0x4f, 0x5d, 0x66, 0xda, 0xfc, 0x27, 0xa9, 0x19, 0x64,
	0xd1, 0x2e, 0x37, 0x03, 0xcc, 0xb4, 0xf9, 0x4f, 0x22, 0x98, 0x42, 0xc3, 0x7c, 0xb1, 0x4f, 0xb4,
	0xa7, 0xe1, 0x37, 0x68, 0x7a, 0xa6, 0x33, 0x8a, 0x79, 0xae, 0x05, 0x77, 0xba, 0xf3, 0xea, 0x98,
	0xee, 0xa5, 0xac, 0x0b, 0xb4, 0xfd, 0x36, 0x87, 0xf6, 0xce, 0x23, 0xd4, 0x0d, 0xba, 0xdb, 0xb8,
	0x53, 0x44, 0x7d, 0xae, 0x4b, 0x9f, 0x85, 0x92, 0x8d, 0xa8, 0x0f, 0xe6, 0xb1, 0x04, 0x3f, 0x2f,
	0xb8, 0x5a, 0x9c, 0x3e, 0xf8, 0x41, 0xa4, 0x88, 0xe9, 0xc5, 0x17, 0xd1, 0x6c, 0xfe, 0x2c, 0x2a,
	0xba, 0xdb, 0x9d, 0x41, 0x9f, 0x69, 0x54, 0xe6, 0xa5, 0xa6, 0xd9, 0xa8, 0xd7, 0x01, 0x64, 0xed,
	0x51, 0x7b, 0x86, 0x02, 0xaf, 0xf5, 0xfd, 0xdf, 0x32, 0x88, 0x94, 0x84, 0x1a, 0x95, 0x7e, 0x69,
	0xf4, 0x75, 0x9a, 0xc6, 0x49, 0x3d, 0xef, 0xe4, 0x59, 0x9b, 0x51, 0x67, 0x8d, 0x1e, 0x50, 0xb3,
	0x40, 0x54, 0x22, 0xe6, 0x7d, 0xaa, 0xf2, 0xa6, 0xf2, 0xe0, 0x7b, 0x10, 0x46, 0x84, 0x4b, 0x06,
	0xfb, 0xbd, 0x5b, 0xfb, 0xff, 0xb8, 0xa1, 0xb2, 0x77, 0x72, 0xd6, 0xd4, 0x54, 0x4d, 0xd7, 0xdd,
	0x58, 0xb4, 0xc9, 0x49, 0x71, 0x9d, 0x97, 0x04, 0xcc, 0x96, 0xaa, 0x2a, 0xd6, 0xd5, 0x92, 0x53,
	0xfb, 0xd1, 0x06, 0x4f, 0xd7, 0xd4, 0x06, 0xff, 0xdf, 0xda, 0xf5, 0x83, 0x8c, 0x5c, 0xac, 0xb3,
	0x9a, 0x24, 0x78, 0x9b, 0x19, 0x25, 0x2c, 0xae, 0xf1, 0x62, 0x63, 0x31, 0x54, 0x2b, 0xf7, 0xf5,
	0xc1, 0x4f, 0x56, 0x0f, 0xbe, 0xb5, 0x9f, 0xc1, 0x4f, 0xd5, 0x1c, 0xfc, 0x9f, 0xd7, 0x06, 0xdf,
	0xc3, 0xa4, 0xc3, 0xcb, 0x41, 0x1c, 0x93, 0xdd, 0xb2, 0x94, 0xe4, 0xcf, 0x70, 0x46, 0xb8, 0x7f,
	0x8f, 0xbb, 0xcb, 0xcf, 0xb4, 0xe1, 0xff, 0xda, 0x93, 0x5e, 0xbe, 0xaf, 0x9c, 0x64, 0xe6, 0x17,
	0xd8, 0x10, 0xfc, 0x02, 0xd6, 0x92, 0x2e, 0x60, 0xff, 0xaa, 0x71, 0x0f, 0xb4, 0xf4, 0xe5, 0x04,
	0x6a, 0x05, 0x31, 0xce, 0xf8, 0x86, 0xa7, 0x3f, 0x94, 0x2d, 0x34, 0xa1, 0x6e, 0x21, 0x37, 0xa1,
	0x8f, 0xa2, 0x89, 0x61, 0x16, 0xb3, 0xb5, 0x47, 0xfe, 0x1d, 0xc1, 0xeb, 0xfc, 0x87, 0xc6, 0x25,
	0x8b, 0x0c, 0x94, 0x5b, 0xac, 0x6f, 0xa2, 0x16, 0x19, 0xb1, 0x43, 0x67, 0x06, 0x24, 0xa1, 0x00,
	0xfe, 0x7f, 0xdd, 0xd0, 0xec, 0x0f, 0xc1, 0x2e, 0xa6, 0x6c, 0x67, 0xc4, 0x32, 0xb3, 0x70, 0x9b,
	0x09, 0x0b, 0xb7, 0xa9, 0x6b, 0x97, 0x73, 0x6f, 0xc0, 0xfd, 0x2c, 0xa5, 0x79, 0x43, 0x7e, 0x58,
	0x8a, 0x63, 0x18, 0x56, 0xee, 0xbf, 0x6b, 0x1c, 0xe2, 0x0f, 0x71, 0x50, 0x0c, 0x33, 0x1c, 0x56,
	0xde, 0x51, 0x17, 0x4c, 0xed, 0x8d, 0xf1, 0x5d, 0x79, 0x13, 0x9e, 0x00, 0x46, 0xf6, 0xd8, 0x10,
	0xb8, 0xda, 0xb8, 0x8b, 0x93, 0x42, 0x7c, 0x30, 0x8f, 0x66, 0x82, 0xa2, 0x20, 0x93, 0xca, 0x7d,
	0x0a, 0xc4, 0x6f, 0xc5, 0x3f, 0x98, 0x77, 0xe2, 0x2f, 0xe8, 0x3a, 0x95, 0x60, 0x17, 0x2b, 0x28,
	0x2b, 0x31, 0x5e, 0x97, 0x38, 0x43, 0x3d, 0x71, 0x68, 0xb2, 0x4a, 0x1c, 0xfa, 0x8e, 0x4a, 0x48,
	0x38, 0xb1, 0xea, 0x8f, 0xcf, 0xff, 0xc2, 0x98, 0x87, 0x25, 0x76, 0xad, 0x14, 0x9f, 0xdb, 0x85,
	0x5b, 0x45, 0x8e, 0x66, 0x17, 0x36, 0x53, 0x8e, 0x9e, 0x94, 0xe5, 0xe8, 0xdb, 0x86, 0x4d, 0xe2,
	0x51, 0x90, 0xef, 0x54, 0xce, 0xf7, 0x13, 0xb3, 0x7b, 0xac, 0xe7, 0xe2, 0xb3, 0x05, 0x6e, 0xf9,
	0xa2, 0x07, 0xdc, 0x39, 0xeb, 0xad, 0x16, 0x87, 0xb2, 0x09, 0xcc, 0xff, 0x87, 0xc6, 0x2d, 0xa4,
	0x78, 0x3f, 0xe8, 0x63, 0x6a, 0x4d, 0xba, 0x8c, 0x0e, 0x11, 0x8e, 0xdf, 0x91, 0x9f, 0x5a, 0xce,
	0xb4, 0x0f, 0xca, 0xe7, 0xdf, 0x09, 0xd4, 0xda, 0x4a, 0xb3, 0x2e, 0x17, 0xb7, 0xe8, 0x8f, 0xda,
	0xbb, 0x8c, 0x2e, 0xd0, 0x96, 0x38, 0xf6, 0xa4, 0xeb, 0xd9, 0xd4, 0xc8, 0xeb, 0xd9, 0x09, 0xd4,
	0xa2, 0x76, 0x30, 0xe6, 0x88, 0x01, 0x3f, 0xc8, 0x80, 0x2e, 0x58, 0xe5, 0xc7, 0x97, 0x30, 0xac,
	0xb7, 0xc5, 0x29, 0x5d, 0xf7, 0x28, 0x93, 0x06, 0xd4, 0xaa, 0x3f, 0xa0, 0x29, 0x79, 0x40, 0xba,
	0x6a, 0xa5, 0x47, 0x67, 0xe8, 0x83, 0xa8, 0xb7, 0x0d, 0xc3, 0xc9, 0xf7, 0x6d, 0x33, 0x90, 0x3a,
	0x37, 0x31, 0xd2, 0x20, 0xf2, 0xd3, 0x06, 0xba, 0x62, 0xbd, 0x6c, 0x68, 0x9d, 0x79, 0x5b, 0xba,
	0xe3, 0x8c, 0x4d, 0xa3, 0xd1, 0x76, 0x99, 0x5d, 0xe3, 0x9c, 0x59, 0x4e, 0xfb, 0xfd, 0x34, 0xa1,
	0xc6, 0xb8, 0xb1, 0xac, 0x0d, 0x76, 0x77, 0x10, 0xbb, 0x2b, 0xb8, 0x7f, 0xd7, 0x30, 0xa1, 0x2c,
	0x51, 0xab, 0x5e, 0x4e, 0x5f, 0xe7, 0xc2, 0x93, 0x4a, 0x1e, 0xe6, 0x00, 0x5e, 0xe7, 0x92, 0x92,
	0x95, 0x30, 0xd7, 0xef, 0x9e, 0xa5, 0x32, 0x91, 0x1f, 0xb2, 0x8d, 0xf2, 0x90, 0xe5, 0x1b, 0xbf,
	0x29, 0x6d, 0xfc, 0xcf, 0x55, 0x5e, 0x41, 0x75, 0x29, 0xf4, 0x60, 0x5d, 0x8b, 0x12, 0x70, 0xb1,
	0x96, 0x9d, 0xc0, 0xd8, 0xaf, 0xba, 0x42, 0x88, 0xbf, 0xa9, 0x9f, 0x23, 0x70, 0x37, 0xa7, 0x2e,
	0x64, 0xfc, 0xf8, 0x16, 0xbb, 0xa1, 0x29, 0xef, 0x86, 0x9b, 0xf2, 0xa5, 0xde, 0x71, 0xa8, 0xd3,
	0x8b, 0xfe, 0x05, 0x43, 0x27, 0xa5, 0xe0, 0xf7, 0x7f, 0x9b, 0x3e, 0xb6, 0xd1, 0xa4, 0x9b, 0xf5,
	0xed, 0x68, 0x30, 0x88, 0x92, 0x1e, 0xbf, 0xf5, 0xc9, 0x82, 0x4c, 0x53, 0x15, 0x64, 0x4e, 0xa0,
	0x16, 0xce, 0xb2, 0x94, 0x3b, 0x73, 0xd3, 0x1f, 0xde, 0x3d, 0x74, 0x34, 0x67, 0x38, 0x3a, 0x29,
	0x98, 0x61, 0xf2, 0xb9, 0x49, 0xe8, 0x6b, 0x69, 0xdf, 0xe4, 0x8d, 0x3c, 0x86, 0xfa, 0xf6, 0x2b,
	0xb9, 0xf2, 0x3b, 0xf7, 0xbf, 0x44, 0x57, 0xcd, 0x9e, 0xad, 0x65, 0x18, 0xf4, 0xb3, 0xe9, 0x50,
	0xbe, 0x92, 0xe6, 0x43, 0x78, 0x98, 0xc0, 0xaf, 0xa4, 0xec, 0x67, 0x95, 0xfc, 0x25, 0xba, 0x3d,
	0x29, 0x75, 0xdb, 0x8f, 0xd5, 0xa5, 0x36, 0x1c, 0xc4, 0x69, 0xc0, 0x7c, 0x30, 0xea, 0xee, 0x74,
	0xe1, 0x03, 0xd1, 0x1c, 0xe5, 0x03, 0xe1, 0xff, 0x95, 0x06, 0xba, 0xae, 0x5f, 0x25, 0xd7, 0xbb,
	0x19, 0xc6, 0x49, 0xbe, 0x9d, 0xd2, 0xe7, 0xa3, 0x51, 0x97, 0xbe, 0xcb, 0xaa, 0xdb, 0xba, 0x45,
	0x14, 0x6b, 0x8e, 0xba, 0xf8, 0xe9, 0x26, 0xcb, 0x05, 0x63, 0xc9, 0x3c, 0x0c, 0x76, 0x47, 0x88,
	0x44, 0xdb, 0x2a, 0xe1, 0xb6, 0x82, 0x5d, 0xcc, 0xc5, 0x90, 0xb1, 0x34, 0x2f, 0x5b, 0x55, 0x9a,
	0x17, 0x52, 0xe9, 0xff, 0x7d, 0x93, 0x27, 0x3f, 0x49, 0xa8, 0x2d, 0x22, 0x81, 0x75, 0xf3, 0x72,
	0x1c, 0x1b, 0x55, 0xb7, 0xba, 0x09, 0xa7, 0x5b, 0xdd, 0xa4, 0xdd, 0xad, 0xae, 0x65, 0x77, 0xab,
	0x9b, 0x92, 0xdd, 0xea, 0x4e, 0x82, 0xa6, 0x8a, 0x3e, 0x6f, 0x13, 0x3e, 0xee, 0xd8, 0xff, 0x8a,
	0xbe, 0xd3, 0x29, 0x8b, 0xef, 0x47, 0x5b, 0x5b, 0x38, 0xc3, 0x49, 0x17, 0xd8, 0xd6, 0x80, 0x39,
	0x13, 0xb7, 0xda, 0xe4, 0x5f, 0x78, 0xd5, 0x55, 0x10, 0xd6, 0x54, 0x04, 0xb1, 0x62, 0xb3, 0x3f,
	0x3c, 0x28, 0xf2, 0x0d, 0x52, 0xba, 0xca, 0x9d, 0x75, 0x41, 0x81, 0xc9, 0xde, 0xd3, 0x84, 0xec,
	0x11, 0xd1, 0x97, 0x45, 0xce, 0xfa, 0x4a, 0xfe, 0xf5, 0x7f, 0x4e, 0xd5, 0x5a, 0x52, 0xe3, 0xcb,
	0xd4, 0x37, 0x58, 0xea, 0x83, 0x9d, 0x23, 0xbd, 0x05, 0xba, 0x56, 0x02, 0xca, 0xd8, 0xde, 0x49,
	0xc3, 0x8f, 0x81, 0x54, 0xb6, 0x39, 0x94, 0xf7, 0x9e, 0xf0, 0x9d, 0xa4, 0x87, 0xfa, 0x05, 0x01,
	0xcf, 0x40, 0x1d, 0x2e, 0x94, 0x8c, 0x04, 0xad, 0x92, 0x04, 0x76, 0xcf, 0xd7, 0x65, 0x58, 0xc5,
	0xe0, 0x33, 0x91, 0xab, 0xaf, 0xad, 0xa9, 0x3f, 0xc6, 0x15, 0x69, 0x59, 0x6a, 0x9b, 0x94, 0xfa,
	0x5b, 0x50, 0xaf, 0x77, 0x05, 0x09, 0xe1, 0x06, 0x0a, 0x92, 0xeb, 0xcc, 0xa8, 0x68, 0x5d, 0x6a,
	0x92, 0x2d, 0xf1, 0x3b, 0x70, 0x10, 0x31, 0x3c, 0xd4, 0x69, 0x02, 0x10, 0xe4, 0xa2, 0x1b, 0x13,
	0x55, 0xdd, 0xf8, 0x4d, 0xaa, 0x05, 0x61, 0xdf, 0xb3, 0xa7, 0x66, 0x0c, 0xc1, 0x58, 0xe7, 0xae,
	0xeb, 0x0d, 0x56, 0xb9, 0x70, 0x27, 0x58, 0xb8, 0x21, 0xf5, 0x3c, 0x56, 0x24, 0xe8, 0x90, 0x3e,
	0xc3, 0x02, 0x6a, 0xc0, 0xb5, 0x83, 0x0c, 0x74, 0x2d, 0xc8, 0x40, 0xe1, 0x4e, 0x86, 0x5b, 0x86,
	0xd8, 0x20, 0x93, 0x86, 0x99, 0x4f, 0x09, 0xa9, 0x18, 0x04, 0x59, 0x21, 0xde, 0x62, 0xf1, 0xaf,
	0x44, 0x4c, 0x8f, 0x09, 0x39, 0xa6, 0xc7, 0x1e, 0x7d, 0x0d, 0x48, 0x5b, 0x21, 0x3c, 0x28, 0x8a,
	0xb1, 0xf7, 0x1e, 0x9a, 0x89, 0x53, 0xca, 0x12, 0xd9, 0x68, 0xe7, 0x4d, 0x9a, 0xaf, 0x32, 0x88,
	0xb6, 0x80, 0x1d, 0xef, 0xed, 0x19, 0xf7, 0x4a, 0x95, 0x46, 0x78, 0x2f, 0xea, 0xbd, 0xe0, 0x20,
	0x6f, 0xa2, 0xa3, 0x50, 0x49, 0x37, 0x2a, 0x01, 0xc9, 0x59, 0xa3, 0x47, 0x48, 0x39, 0xec, 0x54,
	0x02, 0x98, 0x97, 0xe4, 0x98, 0x94, 0xc9, 0xf1, 0xcf, 0xd2, 0x27, 0x48, 0x82, 0x1c, 0x9f, 0xe0,
	0x4d, 0xa0, 0xc8, 0x37, 0x0c, 0x8a, 0x68, 0x1a, 0x54, 0x06, 0xf8, 0xc2, 0x44, 0xe9, 0x6a, 0x1d,
	0x58, 0x0e, 0x93, 0x87, 0x22, 0x74, 0x01, 0x0c, 0x6c, 0x07, 0x27, 0xcc, 0x58, 0x30, 0x4b, 0x87,
	0xb4, 0x83, 0xc7, 0x6d, 0xa4, 0x23, 0x13, 0x3e, 0xc3, 0xf4, 0x9f, 0x9a, 0x2d, 0x5d, 0x41, 0x87,
	0x99, 0x0f, 0x4c, 0xa7, 0x8c, 0x3e, 0x71, 0x88, 0x1c, 0x7c, 0x50, 0x48, 0x23, 0x9e, 0xac, 0x83,
	0x0c, 0x6b, 0x8c, 0xe2, 0x83, 0x20, 0xdf, 0xc6, 0xf9, 0x3e, 0xc7, 0xe2, 0x1f, 0x87, 0xa5, 0xba,
	0x8d, 0xe3, 0x01, 0x7b, 0x8e, 0xb4, 0x15, 0xf5, 0xfc, 0x53, 0x40, 0x2f, 0x5e, 0xf8, 0x31, 0x0e,
	0x32, 0x9c, 0x17, 0xf7, 0xbb, 0x5a, 0xf9, 0xd2, 0x60, 0x40, 0x23, 0x42, 0xf9, 0xf7, 0xc1, 0x89,
	0x1d, 0xca, 0xc9, 0x8a, 0x5b, 0x1a, 0x0c, 0x56, 0xd3, 0x9e, 0xf7, 0x26, 0x9a, 0xc2, 0xbb, 0xf0,
	0x80, 0xa4, 0xa1, 0xe9, 0x3b, 0x60, 0x72, 0x97, 0x06, 0x83, 0x07, 0xa4, 0xba, 0xcd, 0xa0, 0xfc,
	0xd3, 0xa0, 0xc2, 0xe1, 0xd8, 0xa9, 0x31, 0x7a, 0x03, 0x3f, 0x2f, 0xfc, 0x13, 0x25, 0x7a, 0x72,
	0xd2, 0x0c, 0x07, 0x83, 0x34, 0x23, 0x4c, 0xf2, 0xb4, 0xda, 0x19, 0xfa, 0x20, 0x3f, 0x4e, 0x7b,
	0x64, 0xc1, 0x0e, 0x32, 0xbc, 0xdb, 0x91, 0xa3, 0x73, 0x51, 0x71, 0xf9, 0x08, 0x29, 0x5f, 0x12,
	0x11, 0xba, 0xfc, 0xb3, 0x30, 0x69, 0x1c, 0xc9, 0x06, 0xce, 0xfa, 0xf9, 0xe3, 0x2d, 0xe6, 0x20,
	0xe1, 0xef, 0x80, 0x08, 0x4d, 0x87, 0x05, 0x02, 0x1c, 0x0b, 0x80, 0xc5, 0x62, 0x51, 0x2c, 0xa0,
	0x93, 0x03, 0x9c, 0x84, 0x44, 0x4c, 0xe4, 0x87, 0x0e, 0x7d, 0x97, 0x49, 0x85, 0x8b, 0xe3, 0xac,
	0x92, 0x7d, 0xb4, 0x0c, 0x21, 0x0c, 0xdc, 0x01, 0x88, 0x54, 0xda, 0x2e, 0x87, 0x09, 0x9b, 0x8b,
	0x80, 0xbe, 0xd4, 0x61, 0xcf, 0x5c, 0x14, 0x07, 0x76, 0xe9, 0xdc, 0x6a, 0xd4, 0x3a, 0xb7, 0x1c,
	0x9e, 0xec, 0x9f, 0xd3, 0x57, 0x5d, 0xbc, 0x09, 0xcd, 0x6b, 0x7c, 0xec, 0x56, 0x34, 0x13, 0xb0,
	0xff, 0xeb, 0x20, 0xf4, 0x68, 0xe8, 0x09, 0x6b, 0xdf, 0xf7, 0x38, 0xc6, 0xba, 0xfa, 0xfd, 0x59,
	0xfa, 0x8c, 0x44, 0xa2, 0xa0, 0xf0, 0x05, 0xfd, 0x5a, 0x1b, 0x36, 0xdc, 0xea, 0x7f, 0xa8, 0xce,
	0xa4, 0xfc, 0x8a, 0xe7, 0x85, 0x69, 0xfc, 0x1f, 0x36, 0xe8, 0x63, 0x30, 0x09, 0x39, 0xe1, 0xc8,
	0x51, 0x37, 0x1a, 0x04, 0x49, 0xb1, 0x8f, 0x06, 0xbe, 0x29, 0x44, 0x1c, 0x3a, 0x50, 0x5f, 0x17,
	0x71, 0x64, 0xf4, 0x9a, 0x98, 0x53, 0xf2, 0x9a, 0x09, 0x3b, 0xdf, 0x54, 0x8e, 0xe4, 0xaf, 0xd4,
	0xd5, 0xa7, 0xf6, 0xfc, 0x6b, 0x5e, 0x1b, 0xdf, 0x37, 0xa6, 0x64, 0x99, 0xbf, 0x27, 0xbb, 0x26,
	0x09, 0x37, 0x8e, 0x36, 0x09, 0xe1, 0x1f, 0x19, 0xbd, 0x67, 0x7e, 0xbb, 0xd0, 0x99, 0x71, 0x7b,
	0xef, 0xff, 0x06, 0x3d, 0xbe, 0x05, 0x3e, 0xe1, 0x40, 0x0a, 0xe8, 0xce, 0xa1, 0xd9, 0xcd, 0x2c,
	0x0d, 0xc2, 0x6e, 0x90, 0x73, 0x6d, 0x7d, 0x59, 0x40, 0x6a, 0xfb, 0xb8, 0x17, 0xc0, 0x5b, 0x39,
	0xa6, 0x80, 0x2a, 0x0b, 0x4a, 0xaf, 0xd2, 0x49, 0xc9, 0xab, 0xb4, 0x0c, 0xc0, 0xd3, 0x92, 0x03,
	0xf0, 0xfc, 0x18, 0x38, 0xb1, 0xe8, 0x04, 0x0e, 0xa3, 0x62, 0x89, 0x54, 0x8c, 0x3f, 0x1b, 0x02,
	0x7f, 0x53, 0xc6, 0xff, 0xb7, 0x1a, 0x96, 0x06, 0xc0, 0x03, 0xe3, 0xeb, 0xdd, 0x91, 0xdf, 0x45,
	0x87, 0xc0, 0x2d, 0xa3, 0x93, 0x45, 0xbd, 0x6d, 0x26, 0xc4, 0xc8, 0xee, 0x63, 0x0c, 0x3b, 0x74,
	0xa5, 0x0d, 0x20, 0xed, 0x83, 0x41, 0xf9, 0xc3, 0x46, 0x17, 0xea, 0x6c, 0xbd, 0x1f, 0xba, 0x58,
	0x7c, 0x7c, 0x9f, 0x99, 0xf8, 0xa9, 0xac, 0x3e, 0x36, 0xfe, 0x31, 0x1d, 0xb3, 0xb7, 0xb5, 0x55,
	0xa7, 0x84, 0x28, 0x1a, 0xbb, 0x71, 0xf9, 0xe5, 0x69, 0x53, 0x7b, 0x79, 0x1a, 0xa9, 0xfb, 0x45,
	0x0b, 0x6a, 0xf4, 0x52, 0x9b, 0xfa, 0x50, 0xdd, 0xdc, 0x5f, 0xa4, 0x51, 0xb2, 0xef, 0x7d, 0xf9,
	0x11, 0x7d, 0x13, 0xce, 0x71, 0xc5, 0x38, 0xd8, 0xc5, 0xfb, 0x46, 0xf6, 0x5c, 0xe5, 0xd5, 0x11,
	0x95, 0x74, 0xd2, 0xfd, 0xe2, 0x2b, 0x5d, 0xcb, 0x9b, 0x23, 0x5c, 0xcb, 0xf5, 0x61, 0x50, 0x37,
	0x43, 0xe6, 0xf6, 0x37, 0xf6, 0x30, 0x56, 0xd5, 0x45, 0x23, 0xfc, 0xe9, 0xf7, 0x47, 0x94, 0xa1,
	0x8a, 0x8d, 0xea, 0x2b, 0x79, 0x70, 0xc7, 0xb1, 0x49, 0x52, 0xdb, 0x21, 0xec, 0x27, 0xaa, 0x70,
	0x42, 0x29, 0xc2, 0xce, 0xe5, 0xd5, 0x28, 0xd9, 0xd9, 0xff, 0xd1, 0xcc, 0xdd, 0x00, 0x9e, 0xc3,
	0x3d, 0x5c, 0x1b, 0xd8, 0x7a, 0xd4, 0x4b, 0xc0, 0xea, 0xf6, 0x75, 0x8e, 0xed, 0x2b, 0x50, 0x88,
	0x68, 0x7b, 0x8d, 0xaa, 0x50, 0xb9, 0xc1, 0xc2, 0xe5, 0xed, 0x31, 0xb6, 0x4a, 0x44, 0xf3, 0x44,
	0xf0, 0xaf, 0x83, 0x02, 0x54, 0x3e, 0x17, 0x81, 0xab, 0xe2, 0x70, 0x6d, 0xb8, 0x19, 0x47, 0x5d,
	0x7e, 0xcc, 0xfa, 0x7f, 0x47, 0x93, 0xce, 0x08, 0xcf, 0xbb, 0x17, 0x80, 0x2a, 0xfa, 0xeb, 0x3d,
	0x0b, 0x96, 0xd0, 0xe1, 0x4d, 0x68, 0x47, 0x3d, 0x0c, 0xce, 0xe9, 0x87, 0x01, 0xed, 0x0c, 0x3b,
	0x0d, 0x0e, 0x6d, 0x4a, 0xbf, 0xfc, 0x7f, 0xa9, 0x69, 0x88, 0x0f, 0x30, 0x48, 0x72, 0xf9, 0x91,
	0x3a, 0xdf, 0xac, 0xd5, 0x79, 0xf5, 0x29, 0xef, 0x0a, 0x3a, 0x4c, 0x6f, 0x45, 0x1d, 0x45, 0xd1,
	0x74, 0xd5, 0x7a, 0x54, 0xad, 0xa6, 0x3d, 0xb8, 0x49, 0x71, 0x39, 0xec, 0x10, 0x96, 0x7e, 0x79,
	0xaf, 0xa2, 0x29, 0x38, 0xc3, 0xb8, 0x97, 0x92, 0x95, 0x28, 0x14, 0x42, 0x7b, 0xbc, 0x3c, 0x61,
	0x7f, 0xbc, 0x3c, 0xc1, 0x94, 0x80, 0xa5, 0x3c, 0x37, 0x23, 0xcb, 0x73, 0x3f, 0x6d, 0xa8, 0x54,
	0xc9, 0x71, 0x69, 0x48, 0x1d, 0x7b, 0x4a, 0x55, 0xb7, 0xdb, 0xe6, 0x18, 0x6e, 0xb7, 0x9b, 0xea,
	0xe2, 0xb7, 0x79, 0x7c, 0xbf, 0xb0, 0xd4, 0xbd, 0x03, 0x3c, 0x0b, 0x82, 0x1d, 0x40, 0x10, 0xad,
	0x61, 0x5e, 0xa4, 0xfd, 0x36, 0xbd, 0xb3, 0x93, 0x3b, 0x7d, 0x17, 0x0a, 0x3a, 0x7d, 0x5c, 0x6c,
	0xb3, 0x70, 0x67, 0xb3, 0xed, 0x43, 0xb4, 0xf0, 0x11, 0x94, 0x79, 0xb7, 0xd0, 0x14, 0xb8, 0xe4,
	0xf2, 0x78, 0x5e, 0xc7, 0x44, 0x0f, 0xee, 0x07, 0x45, 0xf0, 0xe1, 0xfa, 0xe3, 0x8f, 0xdb, 0x0c,
	0xc0, 0xdf, 0x04, 0x03, 0x25, 0x34, 0x16, 0x80, 0xe3, 0xc6, 0x27, 0x78, 0x73, 0x3b, 0x4d, 0x77,
	0x08, 0xd0, 0x0f, 0xc0, 0x37, 0x4e, 0x36, 0x19, 0x34, 0x54, 0x93, 0xc1, 0x35, 0xe6, 0x1c, 0xe2,
	0x6c, 0x85, 0xfa, 0x8b, 0xdc, 0x81, 0xd3, 0x79, 0x10, 0xec, 0xf5, 0x61, 0xed, 0x81, 0x2c, 0x0e,
	0xff, 0x3f, 0x4c, 0xb3, 0xbe, 0x16, 0xd8, 0x9b, 0x3b, 0x9e, 0xf8, 0xef, 0x01, 0x0b, 0xb5, 0x7c,
	0xd4, 0xc6, 0x5d, 0x1c, 0x0d, 0x0a, 0xd7, 0x77, 0xff, 0x3c, 0x35, 0xdf, 0x88, 0x0f, 0x77, 0x83,
	0x38, 0x22, 0x1c, 0x8a, 0x11, 0x10, 0x87, 0x10, 0xa7, 0xc6, 0x43, 0x93, 0xc2, 0xa5, 0x71, 0xa6,
	0x0d, 0xff, 0x4b, 0x08, 0x27, 0x64, 0x0f, 0x98, 0xdb, 0x68, 0x32, 0x4a, 0xb6, 0x52, 0xb6, 0x57,
	0x4a, 0x5d, 0x92, 0xe8, 0x8e, 0x84, 0xb7, 0x0d, 0xa0, 0xfe, 0x1f, 0xd2, 0x7b, 0x93, 0xe8, 0x03,
	0x99, 0x46, 0xfb, 0x90, 0x9b, 0x72, 0x4b, 0xaf, 0xa2, 0x63, 0x19, 0xc7, 0xd6, 0x21, 0x88, 0x78,
	0x5f, 0x66, 0xdb, 0xaf, 0x64, 0x72, 0x33, 0x2b, 0xa1, 0xf7, 0x3a, 0xf2, 0x34, 0x73, 0x12, 0x77,
	0xdd, 0x99, 0x6d, 0x1f, 0x55, 0xed, 0x46, 0x2b, 0xa1, 0x77, 0x0f, 0x1d, 0xec, 0x66, 0x38, 0xc4,
	0x49, 0x11, 0x05, 0x2c, 0x36, 0x86, 0x19, 0x1a, 0x94, 0x76, 0x70, 0xb9, 0x84, 0x6b, 0xcb, 0x1f,
	0x31, 0xb7, 0x11, 0x79, 0x42, 0xc0, 0xed, 0x94, 0xf4, 0xc7, 0x6f, 0xab, 0x33, 0x0c, 0xde, 0x0e,
	0xa2, 0xd6, 0xbb, 0xa4, 0xb6, 0xce, 0x2c, 0xdc, 0x52, 0x11, 0x99, 0x0e, 0xa0, 0x31, 0xbd, 0x5f,
	0x50, 0x22, 0xfe, 0x01, 0x75, 0x1e, 0xe7, 0x9b, 0x8f, 0x5d, 0x5a, 0x24, 0xe7, 0x79, 0xbb, 0x03,
	0xc4, 0x38, 0x76, 0x64, 0xc7, 0xf5, 0xe5, 0x3c, 0x42, 0xf9, 0x76, 0x9a, 0x29, 0x61, 0xad, 0x67,
	0xa1, 0x04, 0xc2, 0x8b, 0xde, 0x45, 0x33, 0xbc, 0x53, 0xcc, 0xe7, 0xe6, 0x9c, 0x8b, 0x77, 0xac,
	0x14, 0xb8, 0xdf, 0x16, 0xd0, 0xfe, 0x06, 0x98, 0x37, 0xc5, 0x88, 0x32, 0xdc, 0x4f, 0x85, 0x55,
	0xe8, 0x61, 0x96, 0xf6, 0xc9, 0xa8, 0xde, 0x46, 0xd3, 0x0c, 0x60, 0x84, 0x85, 0x88, 0x83, 0xf9,
	0x5f, 0xc2, 0x82, 0x2f, 0xe9, 0x04, 0x0a, 0x2b, 0x86, 0x75, 0x2d, 0xcd, 0x23, 0x50, 0x6d, 0x8e,
	0x8d, 0x96, 0x08, 0xc1, 0x03, 0xf6, 0x35, 0xd7, 0xdd, 0xf2, 0xdf, 0xfe, 0x5f, 0xa6, 0x0b, 0x5c,
	0xb4, 0x19, 0x84, 0xdc, 0x18, 0xb6, 0x91, 0xbe, 0xd8, 0xfb, 0x8a, 0xf7, 0xca, 0x7e, 0x36, 0x2b,
	0x1c, 0x47, 0x38, 0x6d, 0x05, 0x11, 0xe6, 0xb8, 0x3d, 0x21, 0xc1, 0x70, 0xe1, 0x0e, 0xe2, 0x98,
	0xa9, 0xba, 0xfe, 0x26, 0x7d, 0x29, 0x41, 0xab, 0xd8, 0x36, 0x22, 0xd5, 0x2f, 0xf1, 0x35, 0xe0,
	0x1c, 0x9a, 0xe9, 0x75, 0x82, 0x32, 0xec, 0xf4, 0xa1, 0xf6, 0x54, 0x6f, 0x09, 0x9c, 0xc6, 0xdf,
	0x43, 0x33, 0x80, 0xb1, 0x9b, 0xc6, 0x8c, 0x81, 0x94, 0xea, 0xf9, 0x35, 0x1e, 0x9a, 0x66, 0x8d,
	0x41, 0xb4, 0x05, 0xac, 0xff, 0x9b, 0x0d, 0x30, 0x85, 0xd1, 0x4e, 0xd3, 0xb7, 0x84, 0xac, 0xcf,
	0xb2, 0x25, 0xef, 0xb4, 0x61, 0x1e, 0xa1, 0x08, 0x5d, 0x2f, 0x08, 0xe5, 0xde, 0x4c, 0x8c, 0xd1,
	0x9b, 0xbf, 0x25, 0x93, 0x90, 0x85, 0x50, 0xdc, 0x67, 0x77, 0x02, 0xd1, 0x9d, 0xa5, 0xda, 0x0f,
	0x1a, 0xf7, 0x4d, 0xc5, 0xfb, 0x70, 0xf3, 0xe5, 0x33, 0x4f, 0x9f, 0x89, 0x8d, 0xdd, 0x6f, 0xff,
	0x3f, 0x96, 0x47, 0xcf, 0x1e, 0x53, 0x8e, 0x3f, 0xfa, 0x79, 0x34, 0x13, 0x0e, 0xb3, 0x40, 0xde,
	0x4e, 0xfc, 0xb7, 0xb7, 0x28, 0x42, 0xd0, 0xd2, 0x59, 0xb9, 0x68, 0x8e, 0xee, 0x3e, 0x6d, 0x57,
	0x8d, 0x01, 0x0c, 0xd2, 0x80, 0x48, 0x4d, 0x51, 0x3a, 0x93, 0x1f, 0x2a, 0x0b, 0x57, 0x42, 0xff,
	0x99, 0xb4, 0x35, 0x72, 0xba, 0x35, 0x58, 0xe4, 0xa1, 0xb1, 0x06, 0x70, 0x0a, 0x4d, 0x65, 0xf0,
	0x19, 0xd7, 0xf5, 0xd3, 0x5f, 0xde, 0x1c, 0x9a, 0xee, 0xa6, 0x7d, 0xf1, 0x12, 0x67, 0xb6, 0xcd,
	0x7f, 0xfa, 0x89, 0xdc, 0x30, 0xb9, 0xda, 0x92, 0x71, 0xe0, 0xcd, 0xe1, 0x98, 0x0d, 0xdf, 0x40,
	0xad, 0x90, 0x7c, 0xe5, 0x16, 0x33, 0x68, 0xbd, 0xff, 0x1e, 0x88, 0x88, 0x71, 0x90, 0xf4, 0x06,
	0x41, 0x77, 0x87, 0xb0, 0x81, 0x55, 0x6b, 0xb2, 0x8b, 0x86, 0x9a, 0xec, 0xc2, 0x5f, 0x81, 0x7e,
	0xca, 0xdf, 0xad, 0x17, 0x19, 0xbc, 0xc7, 0xaf, 0xfa, 0x8c, 0x1c, 0x5a, 0x10, 0xb1, 0xbc, 0x09,
	0x29, 0x01, 0xe0, 0x7f, 0xff, 0xbb, 0x20, 0xbb, 0xc9, 0xa8, 0x24, 0x3b, 0xf1, 0x65, 0x74, 0x08,
	0xe2, 0x21, 0xa8, 0x6f, 0x9c, 0x0f, 0x92, 0x32, 0x6e, 0x39, 0xa0, 0x87, 0xac, 0x3e, 0x84, 0x61,
	0xd0, 0xc3, 0xb9, 0xff, 0x1f, 0x50, 0xc9, 0xa6, 0xca, 0x14, 0xfd, 0xee, 0xe2, 0xf8, 0xe2, 0xe7,
	0x7b, 0x9a, 0x4e, 0x76, 0x4c, 0xb3, 0xf3, 0x84, 0xc5, 0xec, 0xac, 0x68, 0x62, 0xff, 0x97, 0x46,
	0x19, 0x62, 0x9e, 0x47, 0xb0, 0x5f, 0xbc, 0xf3, 0xcb, 0x98, 0x8a, 0xa3, 0x32, 0x65, 0x8a, 0xff,
	0x17, 0x9a, 0x4a, 0x88, 0x78, 0x35, 0x40, 0xfc, 0xe2, 0x9d, 0x7d, 0x85, 0x88, 0x37, 0xd2, 0xca,
	0x4c, 0xd4, 0x49, 0x2b, 0x33, 0x59, 0x23, 0xad, 0x4c, 0xcb, 0x48, 0x2b, 0xf3, 0x26, 0x05, 0xc8,
	0x83, 0x24, 0xdc, 0x4c, 0x9f, 0x33, 0x97, 0x47, 0x8d, 0x82, 0x04, 0x7e, 0x9d, 0x02, 0x54, 0x13,
	0x23, 0x83, 0x6b, 0x85, 0xd3, 0xd7, 0x60, 0xf1, 0x4e, 0x2d, 0x6f, 0x03, 0xc2, 0x27, 0xba, 0x59,
	0x3a, 0xb0, 0xeb, 0x1b, 0x01, 0x6c, 0x39, 0x4b, 0x07, 0x6d, 0x00, 0xf2, 0xff, 0x6e, 0x43, 0x6d,
	0x54, 0xf7, 0x4d, 0x58, 0xbc, 0x53, 0xd7, 0x3b, 0x01, 0x78, 0x5a, 0x30, 0x10, 0xbc, 0x9a, 0xf0,
	0x34, 0xfa, 0x53, 0x7d, 0x74, 0x34, 0x51, 0xf3, 0xd1, 0x11, 0x1f, 0xc6, 0x64, 0x9d, 0x61, 0x50,
	0x27, 0x18, 0x6e, 0xb2, 0xfb, 0x64, 0x87, 0x89, 0x31, 0xaa, 0x1d, 0xf3, 0x43, 0x1a, 0x1a, 0x92,
	0x54, 0xbc, 0xa1, 0xd8, 0x5a, 0xd7, 0xbb, 0xdb, 0xb8, 0x8f, 0xdd, 0x91, 0x14, 0x34, 0xf4, 0x14,
	0xc7, 0xe2, 0x1d, 0xff, 0x5f, 0xa3, 0x1a, 0x13, 0xc3, 0x0a, 0xbb, 0x78, 0xc7, 0x58, 0x83, 0x8d,
	0x3a, 0x6b, 0xb0, 0x59, 0x63, 0x0d, 0x4e, 0x18, 0x6b, 0x50, 0x59, 0x53, 0x93, 0xda, 0x9a, 0x7a,
	0x4f, 0x31, 0xcd, 0x96, 0x96, 0xdc, 0xc5, 0x3b, 0xd5, 0xec, 0xfd, 0x8e, 0xf2, 0x1d, 0x75, 0xc2,
	0x7e, 0x84, 0x9f, 0x64, 0x31, 0x38, 0xca, 0x65, 0x98, 0xf0, 0x4e, 0x1e, 0xbb, 0x9c, 0xff, 0xf4,
	0xbf, 0x59, 0x5a, 0x69, 0x0d, 0x13, 0xee, 0xa8, 0x06, 0x33, 0xfd, 0x81, 0xba, 0x30, 0xae, 0xd2,
	0x25, 0xf8, 0x02, 0xf1, 0xc1, 0x5c, 0x56, 0x30, 0xff, 0x0f, 0x9b, 0xe6, 0x13, 0x54, 0xc6, 0xb8,
	0x29, 0xef, 0xa9, 0x7a, 0xae, 0xe0, 0xa3, 0xc3, 0x79, 0x91, 0x92, 0x91, 0xa6, 0x9d, 0x38, 0xda,
	0xe5, 0x8e, 0xc6, 0x07, 0x49, 0xe1, 0xfb, 0x38, 0x5d, 0x8d, 0x76, 0xf7, 0xef, 0x45, 0x2d, 0xd9,
	0xa6, 0xa7, 0xaa, 0xdf, 0xcf, 0x4c, 0xef, 0xe7, 0xfd, 0xcc, 0x4c, 0xbd, 0x47, 0x0f, 0xea, 0xbe,
	0x9d, 0xad, 0xb7, 0x6f, 0xfd, 0x7f, 0xa3, 0xa9, 0x3d, 0xb2, 0x86, 0xa7, 0x9a, 0xd2, 0x24, 0xfe,
	0xf2, 0x47, 0xd2, 0x73, 0x05, 0xb8, 0x2c, 0x97, 0xdf, 0xac, 0xd5, 0x1f, 0x59, 0x0e, 0x9e, 0xe7,
	0xdf, 0x53, 0xdd, 0xf6, 0xf7, 0xe3, 0x7b, 0xe8, 0xff, 0xd8, 0x78, 0x31, 0x47, 0x77, 0x2a, 0x77,
	0xd3, 0xa9, 0xef, 0xc5, 0x68, 0x8f, 0x6b, 0xfa, 0xcf, 0x35, 0x55, 0x67, 0x6d, 0x88, 0x25, 0x36,
	0x8c, 0x8b, 0xe8, 0x97, 0x2b, 0xa0, 0xd8, 0x37, 0xd1, 0xc1, 0x3e, 0xe9, 0x75, 0x87, 0x87, 0x15,
	0xb3, 0x24, 0xc0, 0x58, 0x8f, 0x92, 0x5e, 0x8c, 0xa9, 0x63, 0x2d, 0xea, 0x8b, 0x31, 0xfa, 0xbf,
	0xa1, 0x3d, 0xd1, 0xa5, 0x47, 0xe4, 0x0b, 0x86, 0x1d, 0xe1, 0x51, 0x44, 0x9a, 0x75, 0xa3, 0x88,
	0x0c, 0xb4, 0xd7, 0xa2, 0xfa, 0x2b, 0x1d, 0xd8, 0x5e, 0x2f, 0xf5, 0x69, 0x72, 0xd7, 0x66, 0x52,
	0x7a, 0xd9, 0xee, 0x2e, 0x7f, 0x1a, 0x42, 0x84, 0x6b, 0x06, 0x99, 0xb5, 0x8c, 0xb7, 0xf3, 0x41,
	0x14, 0x86, 0x38, 0xf9, 0x1a, 0xcd, 0x32, 0xff, 0xb0, 0xa1, 0xda, 0x9c, 0x34, 0x5f, 0x8d, 0xc5,
	0x3b, 0xff, 0x14, 0x7b, 0x6b, 0x08, 0x07, 0xea, 0x96, 0xe4, 0x40, 0xfd, 0x97, 0x34, 0x8d, 0x7f,
	0x69, 0xc3, 0x59, 0x80, 0xf7, 0x7f, 0xb4, 0xbc, 0xd4, 0xff, 0xce, 0xb2, 0x12, 0x50, 0x8e, 0xa2,
	0x28, 0xef, 0xc0, 0x0e, 0xee, 0x3a, 0xd6, 0xc6, 0x6c, 0x94, 0xaf, 0xd3, 0x7a, 0xef, 0x3a, 0x9a,
	0x8e, 0xf2, 0x4e, 0x81, 0x9f, 0x3b, 0x42, 0x49, 0x4c, 0x45, 0x39, 0x38, 0x8c, 0x2d, 0xaa, 0x36,
	0xa5, 0x1e, 0xae, 0xd9, 0x1d, 0xff, 0x47, 0x54, 0x3b, 0x0a, 0x97, 0x98, 0x4f, 0xf0, 0x66, 0x56,
	0x74, 0x97, 0x41, 0x97, 0xf9, 0x98, 0x5c, 0xdb, 0xc6, 0xbb, 0x0b, 0x1f, 0x45, 0x13, 0x79, 0x38,
	0x60, 0xd2, 0x15, 0xf9, 0xd7, 0xff, 0x35, 0xaa, 0x6a, 0x36, 0x90, 0xb3, 0x67, 0x98, 0x2f, 0x88,
	0xfd, 0x67, 0x0d, 0x03, 0xfd, 0x52, 0x18, 0x2e, 0x07, 0x49, 0x08, 0x4a, 0xf5, 0xf1, 0xd0, 0x9f,
	0x44, 0x53, 0x79, 0x38, 0xe0, 0x3b, 0x67, 0xb6, 0xdd, 0xca, 0xc3, 0x01, 0x55, 0xad, 0x41, 0x71,
	0x12, 0xe2, 0xe7, 0x3c, 0xbc, 0x1a, 0xa9, 0x21, 0xbf, 0x79, 0x97, 0x26, 0xcb, 0x2e, 0xfd, 0x67,
	0x4d, 0x90, 0x60, 0xd5, 0xb4, 0x9c, 0x77, 0x17, 0x5c, 0x29, 0xe1, 0x7e, 0x81, 0x37, 0x28, 0x5b,
	0x62, 0xce, 0xa9, 0xd1, 0x89, 0x39, 0xa7, 0xab, 0x12, 0x73, 0xce, 0x68, 0x4a, 0x87, 0xb7, 0x50,
	0x6b, 0x90, 0xa5, 0xcf, 0xf7, 0x98, 0x0c, 0xa3, 0x71, 0xfe, 0xe5, 0x38, 0xc2, 0x49, 0xb1, 0x46,
	0x00, 0xda, 0x14, 0xae, 0x0c, 0x78, 0x80, 0xe4, 0xb4, 0x9a, 0x3f, 0xb7, 0x5c, 0xca, 0xef, 0x2e,
	0xfc, 0x52, 0xe6, 0xc7, 0xb4, 0x5d, 0x68, 0xee, 0x2e, 0xb0, 0x5c, 0x7c, 0x76, 0x01, 0x9e, 0x39,
	0x98, 0x2e, 0x81, 0x81, 0x01, 0x40, 0xa8, 0x8a, 0x55, 0x85, 0xf2, 0x2e, 0x4b, 0xc7, 0x90, 0x45,
	0xeb, 0xd4, 0x8c, 0x42, 0x16, 0x7b, 0x9f, 0xb7, 0x72, 0x1f, 0xe3, 0xc1, 0x6a, 0x94, 0xec, 0x70,
	0x13, 0xd3, 0x20, 0x28, 0x44, 0xc0, 0x23, 0xf2, 0xbf, 0x7f, 0x04, 0x1d, 0xe2, 0xe0, 0x05, 0xce,
	0x0b, 0xff, 0x63, 0xf3, 0x2d, 0x52, 0xf9, 0x50, 0xf9, 0xee, 0x82, 0xf7, 0xa6, 0xfa, 0x54, 0x59,
	0x53, 0xa1, 0xb3, 0x77, 0x57, 0xd2, 0x83, 0xe5, 0x7b, 0x46, 0x40, 0x25, 0x2e, 0x2c, 0xde, 0x5d,
	0xa8, 0xf2, 0x3d, 0x63, 0x50, 0x30, 0xa4, 0x7f, 0xd4, 0x30, 0xde, 0x07, 0x97, 0x1d, 0xfa, 0x25,
	0x8b, 0xf6, 0x2d, 0x0e, 0x96, 0x69, 0xe9, 0x60, 0xf9, 0xc7, 0xe6, 0x00, 0xd9, 0x21, 0x7d, 0x77,
	0xe1, 0x4f, 0x4c, 0x0c, 0x70, 0x31, 0xf2, 0x19, 0x69, 0xe4, 0xff, 0xa7, 0xf5, 0x3e, 0x23, 0x8d,
	0xfa, 0x57, 0x91, 0xc1, 0x5f, 0x30, 0x32, 0xb8, 0x20, 0xfb, 0x61, 0x89, 0xec, 0x3f, 0xb3, 0x46,
	0x93, 0x0e, 0xa3, 0xe0, 0xee, 0xc2, 0x9f, 0xc4, 0x40, 0xc6, 0xbf, 0x0c, 0x91, 0xa5, 0xff, 0x37,
	0xba, 0x13, 0x54, 0x21, 0xe2, 0xf6, 0xed, 0x77, 0x7e, 0x25, 0x45, 0xd8, 0xa5, 0x88, 0x57, 0x85,
	0x47, 0x09, 0xd2, 0xd6, 0x13, 0x39, 0x0a, 0x9f, 0x06, 0xf1, 0x10, 0x73, 0x97, 0x92, 0x52, 0xe2,
	0x38, 0x28, 0x4b, 0x1c, 0x1d, 0x10, 0x82, 0xcb, 0xcc, 0xdf, 0x7c, 0xd7, 0xb7, 0x83, 0xa4, 0x47,
	0xe4, 0xc8, 0x56, 0x46, 0xfe, 0x31, 0x6e, 0x26, 0xfc, 0x64, 0x22, 0x95, 0x6d, 0x0a, 0xe3, 0x48,
	0x2d, 0xfe, 0x11, 0x9b, 0x51, 0xde, 0xc0, 0x46, 0xb0, 0x83, 0xd3, 0x21, 0x84, 0xea, 0x28, 0xe8,
	0xbf, 0xa5, 0x07, 0xcb, 0x2c, 0x2b, 0x71, 0x26, 0x90, 0xff, 0xdd, 0x86, 0x9a, 0x0f, 0x9a, 0x50,
	0x8d, 0x2c, 0x8f, 0x1a, 0x19, 0x0f, 0xc7, 0x4f, 0x4d, 0x7c, 0x5b, 0xca, 0xda, 0x3a, 0xa9, 0x8d,
	0x9f, 0x34, 0x6c, 0x49, 0xd5, 0xfa, 0x57, 0x1b, 0xa0, 0xf5, 0x95, 0x92, 0x82, 0xd7, 0xec, 0xdd,
	0x18, 0xf9, 0x18, 0xa5, 0xfc, 0xab, 0x13, 0x95, 0xf9, 0x57, 0x27, 0xb5, 0xc4, 0xdf, 0x4f, 0xcb,
	0x94, 0xbf, 0x4a, 0x12, 0x65, 0xd2, 0xc5, 0x6f, 0xa2, 0x19, 0x9e, 0xfa, 0x8e, 0xcd, 0xf5, 0x05,
	0xfd, 0x16, 0x2a, 0x7d, 0xb1, 0xde, 0x5e, 0x6b, 0x0b, 0x78, 0x7f, 0xa7, 0xc4, 0x4b, 0x3d, 0x2a,
	0x57, 0xd3, 0x5e, 0x94, 0xd0, 0x97, 0x48, 0x8e, 0xb4, 0xfc, 0x32, 0xd5, 0x9b, 0x2a, 0xd5, 0xd5,
	0x97, 0xf2, 0x13, 0xfa, 0x4b, 0xf9, 0xb7, 0xcb, 0xc6, 0x68, 0x2c, 0x4b, 0xa9, 0x31, 0x61, 0xab,
	0x61, 0xa9, 0xea, 0x69, 0x3a, 0x5f, 0xe9, 0x0b, 0x2a, 0x4e, 0x8e, 0xfc, 0xe2, 0xbf, 0x6d, 0x28,
	0xd9, 0x29, 0x55, 0x93, 0x11, 0xa1, 0xd6, 0x19, 0x34, 0x93, 0xa4, 0x9d, 0xfe, 0xb0, 0x10, 0x82,
	0xd6, 0x74, 0x92, 0x3e, 0x22, 0x3f, 0x35, 0x73, 0xd2, 0x84, 0xd3, 0x9c, 0x34, 0x29, 0x9b, 0x93,
	0x34, 0x1b, 0x4f, 0x6b, 0x94, 0x8d, 0x87, 0x9c, 0x4e, 0xb8, 0x9b, 0xb1, 0xb8, 0x68, 0x87, 0xda,
	0xec, 0x17, 0x69, 0x3c, 0x2d, 0xb6, 0x71, 0xd6, 0x19, 0x12, 0xda, 0x4d, 0x53, 0xda, 0x41, 0xc9,
	0x93, 0x28, 0xcc, 0xfd, 0x42, 0xc9, 0x82, 0xa9, 0x27, 0x4b, 0x26, 0x03, 0xdb, 0x97, 0x31, 0x4c,
	0x6d, 0x75, 0x42, 0x6f, 0xf5, 0xb6, 0x62, 0x7f, 0x53, 0x92, 0xf3, 0x92, 0x26, 0x6d, 0x8f, 0xb4,
	0xf7, 0x94, 0xbc, 0x9a, 0x96, 0xfc, 0xab, 0x35, 0x77, 0xd5, 0x6d, 0x23, 0xef, 0xf2, 0xc8, 0x1d,
	0xdc, 0x51, 0x9a, 0xb6, 0x64, 0x0a, 0x7d, 0xd1, 0xdd, 0xf2, 0x6f, 0x37, 0xc0, 0x59, 0xb6, 0x3a,
	0x69, 0xe8, 0x0b, 0x36, 0xf2, 0x32, 0xf3, 0x87, 0xee, 0x80, 0x02, 0xad, 0x2a, 0x7d, 0xa8, 0x3e,
	0x8b, 0x3c, 0x31, 0xe8, 0x3e, 0xa8, 0x9f, 0xe9, 0x69, 0x61, 0xa5, 0x9c, 0x9d, 0x2f, 0x4a, 0x13,
	0x57, 0x36, 0xcf, 0xcb, 0x4a, 0x7e, 0x54, 0xfa, 0x62, 0x55, 0xcb, 0x46, 0xfb, 0x1e, 0x38, 0x88,
	0x29, 0xd9, 0x68, 0x75, 0x20, 0x6b, 0x42, 0xda, 0x2b, 0xca, 0x62, 0xb2, 0x7e, 0x97, 0xfb, 0x17,
	0x95, 0x54, 0xb7, 0x2c, 0xf2, 0x30, 0xee, 0x0e, 0x33, 0x0c, 0xe7, 0x77, 0xee, 0x7f, 0xa4, 0x27,
	0x32, 0x95, 0x6a, 0xc9, 0x55, 0x94, 0xec, 0x55, 0xf3, 0x2a, 0x2a, 0x01, 0x91, 0xbd, 0xdb, 0xa6,
	0x60, 0xfe, 0x33, 0x38, 0xef, 0xc5, 0x74, 0x06, 0xbb, 0x58, 0xc6, 0xf6, 0x16, 0x6a, 0xed, 0x92,
	0x7f, 0x18, 0x71, 0x75, 0x05, 0x76, 0x09, 0xd9, 0xa6, 0x70, 0x20, 0x15, 0x41, 0x69, 0x87, 0xb2,
	0xa0, 0x32, 0xee, 0xc6, 0x11, 0x5a, 0xbe, 0x0e, 0xc5, 0x2b, 0x21, 0xbb, 0x53, 0xab, 0xb9, 0x9e,
	0x5f, 0x64, 0x20, 0x7d, 0x7d, 0xda, 0x14, 0xb2, 0x72, 0x7f, 0xce, 0xcd, 0x54, 0x8a, 0xaa, 0xda,
	0xda, 0x4c, 0x0b, 0x11, 0x42, 0x67, 0x20, 0x9e, 0xe3, 0xc0, 0x0f, 0xc8, 0x08, 0x09, 0xde, 0xea,
	0x9d, 0x1d, 0xbc, 0x27, 0x32, 0x1d, 0x43, 0xc9, 0x47, 0x78, 0xcf, 0xff, 0xdf, 0xd5, 0x9c, 0xd0,
	0xf4, 0x24, 0x51, 0x57, 0xc0, 0x4b, 0x6c, 0xce, 0xfb, 0x16, 0x3a, 0x04, 0x04, 0x86, 0x23, 0x12,
	0xf3, 0x90, 0x24, 0x56, 0xa2, 0x90, 0x53, 0xb3, 0x7d, 0x70, 0x97, 0xff, 0x8b, 0x73, 0xef, 0x81,
	0xcd, 0xad, 0xf4, 0x8a, 0xf6, 0xad, 0xe4, 0x50, 0x2a, 0xcc, 0x01, 0xaa, 0x67, 0xe9, 0xae, 0x91,
	0x05, 0xfb, 0x29, 0xce, 0xa2, 0xad, 0xbd, 0x35, 0x67, 0x9a, 0xcc, 0x97, 0xc3, 0x82, 0xb5, 0xcc,
	0xd6, 0xbb, 0x65, 0xa3, 0xbf, 0xc0, 0xcc, 0xd6, 0xef, 0x39, 0x06, 0xff, 0xa0, 0x1f, 0x44, 0x31,
	0x0c, 0xfe, 0x04, 0x6a, 0x61, 0xf2, 0x83, 0x75, 0x82, 0xfe, 0xf0, 0xef, 0x59, 0xfa, 0x0e, 0xdf,
	0xd8, 0xe1, 0x09, 0xdb, 0x90, 0x52, 0x90, 0xc2, 0xff, 0xfe, 0xef, 0x34, 0x15, 0x96, 0x40, 0x6e,
	0x43, 0x4c, 0x6a, 0x5e, 0xc7, 0x39, 0x5c, 0x46, 0xe6, 0xa5, 0x74, 0x90, 0x2c, 0x46, 0x19, 0xff,
	0xed, 0x5d, 0x41, 0x87, 0xd9, 0xc5, 0x8e, 0x26, 0x02, 0x65, 0xb7, 0xd4, 0x43, 0xac, 0x90, 0x66,
	0x2b, 0x96, 0x80, 0xba, 0xdb, 0x41, 0x91, 0xb3, 0x9b, 0x2a, 0x07, 0xa2, 0x41, 0x8b, 0xde, 0x40,
	0x1e, 0x07, 0x12, 0x4f, 0x0b, 0x79, 0x06, 0xbf, 0x63, 0xac, 0xe6, 0x91, 0xa8, 0xf0, 0x6e, 0xa1,
	0xa3, 0x12, 0x4e, 0x9a, 0xb8, 0x8f, 0xa6, 0xf4, 0x7b, 0xa5, 0x44, 0x4b, 0xdf, 0x5b, 0x9e, 0x40,
	0xad, 0xad, 0x28, 0xc6, 0x3c, 0xb1, 0x1f, 0xfd, 0xe1, 0xf9, 0xe8, 0x30, 0xbc, 0x6a, 0x27, 0xf7,
	0x7a, 0x88, 0xdd, 0x3b, 0xc3, 0x3c, 0xb1, 0xa2, 0x18, 0x3f, 0x0a, 0x9e, 0xaf, 0x47, 0x5f, 0x61,
	0xff, 0x5b, 0xca, 0xb6, 0xdf, 0x8a, 0x92, 0x28, 0xdf, 0xd6, 0x88, 0xe3, 0x0c, 0xb3, 0xc3, 0xc2,
	0xe8, 0xe9, 0x49, 0xa7, 0xd9, 0x01, 0xf1, 0x40, 0x99, 0x8f, 0x86, 0x34, 0x1f, 0x97, 0x94, 0xb5,
	0x40, 0xd8, 0x78, 0x12, 0x2a, 0x5f, 0x69, 0x10, 0xdd, 0x20, 0xe9, 0xe2, 0x58, 0x85, 0xb8, 0x85,
	0x6e, 0xa8, 0xec, 0x8a, 0x25, 0xd2, 0x5c, 0x87, 0x5b, 0x82, 0x1c, 0x42, 0xc7, 0x5f, 0x53, 0x40,
	0xf3, 0x0a, 0x50, 0xef, 0x9a, 0x50, 0x53, 0x34, 0xac, 0x26, 0x12, 0x5a, 0xe9, 0xe7, 0x7a, 0xfa,
	0x73, 0x40, 0xb2, 0xf7, 0x00, 0xa4, 0x6a, 0x30, 0xe2, 0x82, 0xc7, 0x62, 0x7f, 0x10, 0x10, 0x46,
	0x0e, 0xaa, 0x0d, 0x4a, 0xb9, 0x43, 0xac, 0x70, 0x1d, 0x94, 0x1b, 0xaf, 0x2b, 0xe1, 0xa2, 0x34,
	0xad, 0x27, 0x45, 0x29, 0x59, 0x8e, 0xd7, 0x94, 0x0c, 0xdf, 0xb2, 0xdc, 0xe7, 0xbd, 0x8b, 0x66,
	0x9f, 0x05, 0x71, 0x3c, 0x20, 0x3f, 0xec, 0x36, 0x0a, 0x01, 0xdb, 0x2e, 0x21, 0xfd, 0xdf, 0x69,
	0x28, 0x87, 0x17, 0xb5, 0x93, 0x96, 0x58, 0xeb, 0x7a, 0x11, 0x29, 0x51, 0xa0, 0x9b, 0x6a, 0x14,
	0x68, 0xef, 0x3d, 0x89, 0x5f, 0xe9, 0xbe, 0xb8, 0xa2, 0x29, 0x0b, 0xd3, 0xfa, 0xf7, 0xa8, 0xf6,
	0x52, 0x3e, 0x58, 0x5f, 0x74, 0xbc, 0x35, 0xed, 0xa8, 0xfb, 0xee, 0xf2, 0x5f, 0x6c, 0x28, 0x92,
	0x39, 0x0b, 0x83, 0xff, 0xc2, 0xbd, 0x7e, 0xcf, 0xe0, 0xf8, 0xf5, 0xba, 0x73, 0x4e, 0x99, 0x5c,
	0x2a, 0x2c, 0x89, 0x9b, 0x82, 0x7f, 0x55, 0x11, 0x43, 0xe9, 0x71, 0x9f, 0xde, 0x4f, 0x9f, 0x25,
	0x64, 0x0d, 0x08, 0x61, 0xf5, 0xcf, 0xd2, 0x00, 0x74, 0xf2, 0x2c, 0xd8, 0xe0, 0xbc, 0xa3, 0x68,
	0x22, 0x4e, 0x9f, 0xb1, 0x45, 0x4e, 0xfe, 0x05, 0xf1, 0x2d, 0xea, 0x6d, 0xf3, 0xa7, 0x0e, 0xe4,
	0x7f, 0xef, 0x1b, 0x86, 0x02, 0xa0, 0x7c, 0x66, 0x62, 0x43, 0x2b, 0x0d, 0xe6, 0xaf, 0xa9, 0x67,
	0x18, 0x5d, 0xaa, 0x1b, 0xe0, 0x03, 0x76, 0x5d, 0xb1, 0xcc, 0xbb, 0x97, 0xe9, 0x4d, 0xd4, 0x2a,
	0xb6, 0x87, 0xfd, 0x4d, 0xfb, 0x7b, 0x09, 0x00, 0xa4, 0x00, 0x22, 0x9e, 0x8b, 0x7c, 0xeb, 0x27,
	0x05, 0x5c, 0x25, 0x50, 0xae, 0xf6, 0x96, 0x16, 0xf3, 0xfc, 0xdf, 0x55, 0xbb, 0x49, 0xdf, 0x72,
	0xd0, 0x6e, 0x7a, 0x68, 0x32, 0x8f, 0x99, 0x77, 0xef, 0x6c, 0x1b, 0xfe, 0x2f, 0xdf, 0x65, 0x4c,
	0xc8, 0xef, 0x32, 0x16, 0xd0, 0x4c, 0xc8, 0xcc, 0xff, 0xf6, 0x78, 0xdf, 0xc2, 0x39, 0x40, 0xc0,
	0x79, 0x8b, 0x12, 0x69, 0x5b, 0x36, 0x17, 0x05, 0xe8, 0x84, 0x85, 0xb0, 0xff, 0x87, 0x4e, 0xd8,
	0x50, 0xf4, 0xf8, 0x14, 0x9a, 0xda, 0x4a, 0xb3, 0x7e, 0xc0, 0xdf, 0x9f, 0xb3, 0x5f, 0xde, 0x2d,
	0x42, 0x48, 0xcc, 0xd4, 0x25, 0x86, 0x8e, 0x14, 0xbe, 0x6d, 0x53, 0x08, 0x31, 0xe8, 0x49, 0xdb,
	0xa0, 0x5b, 0xae, 0x41, 0x4f, 0xed, 0x63, 0xd0, 0xd3, 0xe3, 0x0c, 0x7a, 0x1b, 0x74, 0x68, 0xf2,
	0xaa, 0xa6, 0x23, 0x16, 0x23, 0x6b, 0x8c, 0x1c, 0x59, 0x4d, 0x9f, 0x8c, 0x81, 0xc2, 0xb4, 0x19,
	0x4b, 0x10, 0x0b, 0x22, 0x0c, 0xb2, 0x1d, 0xfe, 0x36, 0x8b, 0xfc, 0x2f, 0x91, 0x7c, 0xc2, 0x4e,
	0xf2, 0xc9, 0x51, 0x1d, 0xf3, 0xf7, 0xa8, 0x46, 0x4f, 0xba, 0xf2, 0x69, 0x93, 0xd9, 0xb0, 0x63,
	0x6e, 0x8e, 0x1c, 0xf2, 0x45, 0x74, 0x90, 0x93, 0xbe, 0x0c, 0x18, 0x85, 0x78, 0xd1, 0x4a, 0xe8,
	0xdf, 0x53, 0xc8, 0xca, 0x9b, 0xce, 0x9d, 0x6d, 0xdb, 0x22, 0x2f, 0xae, 0x2a, 0xa2, 0x1a, 0x3b,
	0xac, 0x71, 0x22, 0x2e, 0xd3, 0xde, 0x6b, 0xe8, 0x58, 0x8e, 0x93, 0x3c, 0x2a, 0xa2, 0x5d, 0xdc,
	0x91, 0x7d, 0x46, 0x66, 0xda, 0x47, 0x45, 0xc5, 0x03, 0xe6, 0x2d, 0x62, 0xdc, 0x05, 0x35, 0x6c,
	0xfe, 0xa7, 0x3a, 0x00, 0xf8, 0x4a, 0x95, 0x7c, 0xd2, 0x5b, 0x44, 0x48, 0xb0, 0x62, 0x7e, 0x97,
	0x72, 0x72, 0x6d, 0x09, 0xd4, 0xdf, 0x05, 0xcc, 0x22, 0x75, 0xbc, 0x74, 0xc1, 0x78, 0x90, 0x65,
	0x69, 0x96, 0xd7, 0x49, 0xbe, 0xed, 0xdd, 0x46, 0x53, 0x10, 0x9f, 0x90, 0xbf, 0x4e, 0x3f, 0x63,
	0xbb, 0xb0, 0x00, 0xbe, 0x36, 0x03, 0xf4, 0xdf, 0x52, 0xd3, 0x94, 0x97, 0x92, 0xd1, 0xca, 0x7d,
	0x7b, 0x04, 0xbf, 0x65, 0xea, 0x50, 0x63, 0x4f, 0x4b, 0x7e, 0xfb, 0xf6, 0x3b, 0xb5, 0x32, 0x93,
	0xbf, 0x63, 0xcb, 0x6d, 0x7e, 0x8f, 0xde, 0x32, 0x60, 0x01, 0xc0, 0x4d, 0x80, 0x12, 0x70, 0xb6,
	0xcd, 0x7e, 0xb1, 0xb0, 0x3d, 0x4a, 0xb6, 0x77, 0x48, 0xd9, 0xfc, 0x40, 0xc5, 0x46, 0x9d, 0x8c,
	0x44, 0x8e, 0x6d, 0xc9, 0x57, 0xa8, 0x51, 0xe9, 0x2b, 0xf4, 0x0f, 0x1a, 0x5a, 0x16, 0xfd, 0x30,
	0xe4, 0xf9, 0xda, 0xbf, 0x83, 0xce, 0x06, 0x61, 0xc8, 0x1c, 0x3e, 0x20, 0x5d, 0x41, 0x77, 0xaf,
	0x83, 0xb9, 0xfc, 0xc6, 0xd6, 0xd3, 0x5c, 0x10, 0x86, 0x30, 0x82, 0x35, 0x0a, 0x20, 0xe4, 0x3b,
	0x46, 0x92, 0x89, 0xca, 0xb9, 0x53, 0x55, 0xcb, 0x93, 0x95, 0xaa, 0xe5, 0x96, 0xaa, 0x5a, 0x26,
	0x3c, 0x12, 0xba, 0xc6, 0x2c, 0x22, 0xf4, 0x87, 0x9e, 0x81, 0x9e, 0xbd, 0x97, 0x1a, 0x23, 0x03,
	0xfd, 0xcf, 0x1a, 0x46, 0x32, 0x77, 0xf0, 0x3b, 0xc4, 0xa1, 0x66, 0x88, 0x6b, 0x1a, 0x86, 0xb8,
	0x7d, 0x39, 0x84, 0x5f, 0x46, 0x87, 0x72, 0x1c, 0x6f, 0x75, 0xf0, 0xf3, 0x41, 0x94, 0xb1, 0xc0,
	0x66, 0xad, 0xf6, 0x41, 0x52, 0xf6, 0x80, 0x16, 0xf9, 0xff, 0x4f, 0xc3, 0xb0, 0xe5, 0x33, 0x33,
	0x3c, 0x59, 0x7a, 0x35, 0xed, 0xf0, 0xe4, 0xc0, 0x4e, 0xe3, 0xb0, 0x7c, 0x0e, 0xd9, 0x6a, 0xcf,
	0xd0, 0x02, 0xd3, 0x4a, 0x3d, 0x59, 0x6d, 0xa4, 0x6f, 0x55, 0x1b, 0xe9, 0xa7, 0xc6, 0x33, 0xd2,
	0x4f, 0xdb, 0x8c, 0xf4, 0xb2, 0xa9, 0xfa, 0xdf, 0x9a, 0xb0, 0xb8, 0x6b, 0xd2, 0x1f, 0x4c, 0x7f,
	0xfc, 0xab, 0x24, 0xbc, 0xbf, 0x10, 0x53, 0x29, 0xb9, 0xb1, 0xe5, 0xdd, 0x6d, 0x1c, 0x0e, 0x63,
	0x4c, 0x17, 0x0a, 0xb5, 0x77, 0x1f, 0xe2, 0x85, 0x90, 0x4e, 0xef, 0x6f, 0x4f, 0xe8, 0x91, 0xbb,
	0x99, 0x89, 0x9b, 0x4c, 0xd6, 0xaf, 0x6c, 0xdc, 0xff, 0xf4, 0x4e, 0xdc, 0xdf, 0x6b, 0xaa, 0x7e,
	0xd7, 0x5a, 0x7e, 0xe0, 0x17, 0x99, 0xbe, 0x3a, 0x29, 0x82, 0xe7, 0xd0, 0x34, 0x28, 0x75, 0x70,
	0xc8, 0x36, 0x1b, 0xff, 0xa9, 0x26, 0x0f, 0x9e, 0xaa, 0x9d, 0x3c, 0x78, 0xda, 0x9e, 0x3c, 0x78,
	0xc6, 0x9d, 0x3c, 0x78, 0x76, 0x54, 0xf2, 0x60, 0x93, 0x90, 0xc8, 0x42, 0xc8, 0x3f, 0xa5, 0xa6,
	0xdc, 0xa7, 0xf1, 0xe0, 0xf6, 0x9d, 0xe0, 0xec, 0x0d, 0xed, 0x45, 0xe8, 0x49, 0x79, 0x89, 0xa4,
	0x59, 0xa1, 0xbe, 0x03, 0xf5, 0x57, 0x8c, 0x80, 0xe0, 0x72, 0x96, 0x01, 0xdc, 0x4f, 0x8b, 0xa8,
	0x2b, 0xa2, 0x15, 0x8a, 0xdf, 0x56, 0x39, 0x73, 0x60, 0xe4, 0x19, 0x51, 0xd3, 0x0d, 0x92, 0x15,
	0xe1, 0x8c, 0x37, 0xa8, 0xac, 0xd3, 0x89, 0x9a, 0xbe, 0x18, 0x2b, 0xaa, 0x43, 0xb8, 0x9e, 0xa5,
	0x90, 0x34, 0x58, 0xf7, 0x11, 0xc1, 0x7f, 0xd5, 0x50, 0xe3, 0x93, 0xcb, 0x69, 0xcc, 0x08, 0x1e,
	0xe5, 0x3c, 0x6c, 0x6a, 0xe7, 0xa1, 0xea, 0xdc, 0x54, 0x9e, 0x8e, 0x99, 0x71, 0x3a, 0xb6, 0x2d,
	0x69, 0xce, 0x5a, 0xe3, 0xa7, 0x39, 0x9b, 0x72, 0xa5, 0x39, 0x93, 0x4f, 0x47, 0xff, 0xbf, 0x69,
	0x82, 0x46, 0xa2, 0x2a, 0xbd, 0xd2, 0xd7, 0xca, 0x64, 0xcf, 0xa0, 0x99, 0xed, 0x28, 0xc4, 0x9d,
	0xdd, 0x28, 0xe0, 0x7b, 0x94, 0xfc, 0x7e, 0x2a, 0x45, 0x00, 0x7f, 0x49, 0xa7, 0x61, 0x65, 0x06,
	0x74, 0x39, 0x0c, 0xc9, 0xac, 0x2d, 0xf9, 0x12, 0xe2, 0xc9, 0x97, 0xcc, 0xfd, 0x7a, 0xd0, 0xb2,
	0x5f, 0xff, 0x0b, 0xed, 0x3d, 0x88, 0xf4, 0x60, 0xaa, 0x86, 0x80, 0xf1, 0xf2, 0x53, 0x29, 0x89,
	0xc3, 0x67, 0x6a, 0xe4, 0xe1, 0xf3, 0x0b, 0x7d, 0x38, 0x65, 0x10, 0x73, 0xd6, 0x42, 0xcc, 0xdf,
	0x6f, 0xaa, 0xf9, 0x18, 0x6c, 0xa9, 0x99, 0x6a, 0x50, 0xf5, 0x65, 0x66, 0x67, 0x12, 0xf4, 0x6c,
	0x8d, 0x4d, 0xcf, 0xaf, 0x35, 0x8b, 0xd5, 0x96, 0x7a, 0xde, 0x6a, 0x19, 0x14, 0xd8, 0x4e, 0xb6,
	0x26, 0x51, 0xa8, 0xd4, 0x8a, 0x4b, 0xbe, 0xc0, 0x94, 0x15, 0xfe, 0x39, 0x2d, 0x45, 0x86, 0x2d,
	0x97, 0x02, 0x69, 0xcd, 0x1e, 0xbc, 0xbc, 0xf2, 0xe2, 0xf0, 0x26, 0xcf, 0xb5, 0x30, 0x39, 0xca,
	0x2b, 0x99, 0x66, 0x5c, 0xf8, 0xae, 0x91, 0x2d, 0xc6, 0xe8, 0x85, 0xd2, 0x5e, 0x43, 0x6d, 0xcf,
	0x1f, 0xaa, 0x09, 0x19, 0xcc, 0xa7, 0x61, 0x63, 0x1c, 0x11, 0xf6, 0xd7, 0x61, 0xd6, 0x7c, 0x42,
	0xbf, 0xdf, 0x34, 0x73, 0x34, 0x97, 0x2f, 0xc6, 0x7e, 0x99, 0x04, 0xdb, 0x17, 0x78, 0x34, 0x66,
	0xee, 0xff, 0x19, 0xcb, 0xfe, 0x8f, 0x75, 0x4a, 0x91, 0x63, 0x57, 0xce, 0xc4, 0x79, 0x0b, 0x1d,
	0xe5, 0xf7, 0xd5, 0x2d, 0x96, 0x18, 0x8a, 0xd1, 0xec, 0x15, 0x56, 0xce, 0xf3, 0x45, 0x69, 0xc7,
	0x30, 0x9f, 0x98, 0x49, 0x69, 0x62, 0xce, 0x19, 0x69, 0x57, 0xd6, 0x07, 0x71, 0x54, 0x80, 0x8f,
	0x60, 0xee, 0x87, 0xaa, 0x4f, 0x3d, 0xd9, 0xd3, 0x74, 0xa1, 0xd1, 0xa4, 0x08, 0x64, 0xd2, 0x86,
	0xf0, 0x1f, 0x9f, 0x34, 0xfa, 0x6b, 0xcc, 0xed, 0xe5, 0x1b, 0x62, 0x92, 0xdc, 0x08, 0xe1, 0x0f,
	0xb9, 0xde, 0x4f, 0x98, 0xdf, 0x32, 0xd5, 0xd6, 0xbf, 0x69, 0xbc, 0xc6, 0xab, 0x1f, 0x48, 0xef,
	0x04, 0x6a, 0x0d, 0x93, 0x01, 0xcb, 0x04, 0x3b, 0xd3, 0xa6, 0x3f, 0xc0, 0xd2, 0xdc, 0xef, 0xa4,
	0x09, 0xce, 0xa3, 0x90, 0x4b, 0xdb, 0xb3, 0x83, 0xfe, 0x63, 0x5a, 0x50, 0x7b, 0x51, 0xd1, 0x33,
	0x6b, 0x4a, 0x04, 0xdd, 0x4b, 0x75, 0xa7, 0xf1, 0x24, 0x7c, 0x9a, 0x16, 0x78, 0xac, 0x97, 0xcc,
	0x96, 0x68, 0x57, 0x73, 0x68, 0x9a, 0xe7, 0x41, 0x21, 0x92, 0xe2, 0xa1, 0x36, 0xff, 0xc9, 0xde,
	0x4b, 0x29, 0xfc, 0x22, 0x8d, 0x63, 0x9e, 0xdc, 0xe4, 0xc5, 0x9a, 0xf5, 0xbf, 0x6f, 0x64, 0xc0,
	0x79, 0x0c, 0xe7, 0x4a, 0xfd, 0x97, 0xaa, 0x7d, 0x8b, 0xb0, 0x1d, 0x14, 0xf9, 0x93, 0xf6, 0xaa,
	0x55, 0x75, 0x5d, 0x57, 0x54, 0x38, 0x25, 0x5c, 0x6c, 0xe9, 0x49, 0xc6, 0x23, 0xb4, 0x7d, 0xe6,
	0xc8, 0x2d, 0x0c, 0xa1, 0x73, 0xc7, 0xe0, 0x7a, 0x96, 0x88, 0xb9, 0xbf, 0xd5, 0x00, 0x0b, 0xb0,
	0x81, 0xfb, 0x3e, 0xde, 0x0a, 0x86, 0x71, 0x21, 0x07, 0x29, 0xac, 0xdd, 0xd2, 0x77, 0xf5, 0x08,
	0x88, 0x4d, 0xcd, 0xc3, 0x87, 0x34, 0x50, 0x11, 0xfe, 0xf0, 0x5b, 0xc6, 0x93, 0x98, 0x07, 0xfd,
	0xf4, 0x8b, 0xe8, 0x23, 0xbc, 0xf7, 0x2c, 0xcd, 0xc2, 0xea, 0x90, 0x2c, 0xfe, 0xb6, 0x9a, 0x3e,
	0x46, 0xff, 0x58, 0x8a, 0xc5, 0x52, 0x19, 0xd9, 0x45, 0x0f, 0xd4, 0xd2, 0x34, 0x03, 0xb5, 0x3c,
	0x44, 0xd7, 0xaa, 0x5a, 0x12, 0x51, 0x5b, 0xc8, 0xa6, 0x14, 0x0d, 0x71, 0x35, 0xef, 0x2c, 0x6f,
	0x29, 0x67, 0x41, 0x0d, 0x0c, 0x3c, 0x64, 0x31, 0x55, 0x8e, 0xf4, 0x2b, 0x23, 0xe7, 0xcb, 0x3a,
	0x30, 0x5d, 0x08, 0x08, 0x4f, 0xee, 0x7d, 0x75, 0xe7, 0xeb, 0x36, 0x24, 0x6f, 0x28, 0xca, 0x40,
	0xaf, 0xce, 0x87, 0x19, 0x1c, 0xce, 0x7f, 0xae, 0xee, 0x4f, 0x16, 0x53, 0xeb, 0x49, 0x16, 0x2f,
	0x0d, 0x8b, 0xed, 0x17, 0x65, 0x0b, 0x67, 0xd1, 0xec, 0xe6, 0xb0, 0x28, 0x68, 0x38, 0x23, 0x26,
	0x79, 0xd0, 0x82, 0x95, 0xd0, 0xff, 0x57, 0x34, 0xa5, 0x28, 0xd5, 0xf4, 0xf2, 0x96, 0xaf, 0xa0,
	0xc3, 0xcf, 0xb2, 0xa8, 0xc0, 0x1d, 0x78, 0xac, 0x26, 0x4e, 0x98, 0x43, 0x50, 0xb8, 0x44, 0xcb,
	0x5e, 0x34, 0x1f, 0xa6, 0xd2, 0xbd, 0x96, 0xd6, 0x3d, 0xed, 0x26, 0x4b, 0xae, 0x49, 0x04, 0x23,
	0x37, 0xaa, 0xdc, 0x0b, 0xb2, 0xda, 0x4c, 0xe6, 0x73, 0x43, 0x66, 0x5a, 0x67, 0x07, 0xae, 0x08,
	0xd4, 0x5f, 0x97, 0xd0, 0xb6, 0x5b, 0xfe, 0x0f, 0x8d, 0xe3, 0x4b, 0xa0, 0x17, 0xe1, 0xe3, 0xf7,
	0xa9, 0xbb, 0xf0, 0x7f, 0xa4, 0xe7, 0xcf, 0x4a, 0xc2, 0x97, 0x87, 0xfc, 0x73, 0x55, 0xaa, 0x65,
	0xee, 0x7d, 0x2f, 0x0d, 0xfd, 0x6f, 0x9b, 0x6f, 0xc3, 0xc8, 0xd9, 0x43, 0xce, 0xbb, 0xbc, 0xf6,
	0x2b, 0xa9, 0x23, 0xe2, 0x1a, 0x43, 0x2f, 0x7d, 0xa7, 0xd0, 0x14, 0x3d, 0xda, 0x58, 0x02, 0x13,
	0xf6, 0x4b, 0x7a, 0x23, 0xdd, 0x92, 0xb3, 0x4e, 0x3b, 0xd2, 0xf7, 0xfc, 0x0d, 0x2d, 0xcd, 0x13,
	0x0b, 0xf9, 0x2b, 0x09, 0x59, 0xe7, 0xd0, 0xec, 0x30, 0x61, 0xa6, 0x54, 0x7e, 0xb9, 0x12, 0x05,
	0xe4, 0xbc, 0x0d, 0x68, 0x0e, 0x49, 0x9e, 0x8d, 0x9a, 0xfd, 0xa4, 0xdf, 0xf1, 0xba, 0x49, 0xfe,
	0x1d, 0xaf, 0xfd, 0x26, 0x3a, 0x58, 0xc6, 0xe7, 0xe3, 0xe1, 0x5e, 0xdd, 0xc1, 0xfc, 0x64, 0x60,
	0x4b, 0xae, 0x35, 0x2a, 0x25, 0x3d, 0x64, 0x9c, 0xe4, 0x86, 0xc1, 0x45, 0xd7, 0x87, 0xbd, 0x1e,
	0xc4, 0xb9, 0x54, 0x01, 0x3b, 0xea, 0xad, 0x89, 0xca, 0x4a, 0x32, 0x88, 0x91, 0x4f, 0xf0, 0x0d,
	0xf1, 0xde, 0x4c, 0xd7, 0xa0, 0xc9, 0x9f, 0xf1, 0xd7, 0x66, 0xfe, 0xb7, 0xd5, 0xd4, 0x6a, 0x66,
	0x03, 0xf9, 0x63, 0x72, 0x97, 0x29, 0x93, 0xc7, 0xd3, 0xd4, 0x7a, 0xec, 0x86, 0xb3, 0xa5, 0xaa,
	0x68, 0x88, 0x50, 0x11, 0x9b, 0x19, 0x50, 0xcb, 0xf9, 0x6e, 0xd8, 0xdf, 0xc4, 0x8f, 0xbc, 0x92,
	0xfc, 0x47, 0x0d, 0x2d, 0xe7, 0xcc, 0xc3, 0x28, 0xc6, 0x4c, 0x23, 0x37, 0xc8, 0x70, 0x37, 0xca,
	0xf9, 0x3d, 0x8e, 0xff, 0x04, 0x87, 0xab, 0x30, 0xe9, 0xe4, 0x34, 0xbf, 0x09, 0xe6, 0xd7, 0x91,
	0x43, 0xdd, 0x30, 0x59, 0xe7, 0x65, 0x4a, 0x16, 0xa1, 0xc9, 0x7d, 0x65, 0x11, 0x6a, 0xd9, 0x47,
	0xa4, 0xac, 0xe0, 0x4d, 0x58, 0x0d, 0xf6, 0x5c, 0x36, 0x4c, 0x3b, 0xf0, 0xc2, 0xe9, 0x6c, 0x9e,
	0x52, 0xeb, 0xb2, 0x3d, 0x9d, 0x4d, 0x8d, 0x46, 0x5c, 0x19, 0x6d, 0x22, 0x38, 0xa7, 0x55, 0xc2,
	0x33, 0x2f, 0xd8, 0x97, 0x9c, 0x82, 0x49, 0xcf, 0xd9, 0x02, 0x0f, 0x9a, 0x6f, 0xdf, 0x7e, 0xc7,
	0xbf, 0xad, 0xa7, 0xa6, 0xa1, 0xcf, 0x98, 0xf9, 0x45, 0x34, 0x1d, 0x92, 0x5b, 0x3c, 0x73, 0x24,
	0xa0, 0xbf, 0xcc, 0xd4, 0x3a, 0x2c, 0x66, 0xd4, 0x5b, 0x4a, 0x82, 0x9a, 0xb5, 0x20, 0xcf, 0x41,
	0xe7, 0x0a, 0x95, 0x56, 0x5b, 0xf8, 0x9c, 0x12, 0x1d, 0x8a, 0x2d, 0x1c, 0x78, 0xec, 0x73, 0x4f,
	0x79, 0x7e, 0xfd, 0x24, 0xc7, 0x19, 0xbc, 0x7e, 0x1e, 0x27, 0xb8, 0x26, 0x91, 0x43, 0x45, 0x3f,
	0x89, 0x0c, 0xba, 0x2f, 0x2c, 0x2f, 0x59, 0x2b, 0xad, 0x92, 0x6e, 0x2d, 0x4b, 0xfb, 0xe9, 0xfd,
	0xa0, 0x08, 0xfc, 0xef, 0x95, 0x71, 0xb8, 0xe0, 0x7c, 0xe7, 0x15, 0xb5, 0x4f, 0xf6, 0xc2, 0xc8,
	0xed, 0x21, 0x1b, 0x5b, 0xc6, 0x0e, 0xd2, 0x71, 0x4d, 0x9c, 0x60, 0x95, 0xaf, 0xba, 0xd9, 0x53,
	0x23, 0x7b, 0x0a, 0x10, 0xd2, 0xf0, 0x2f, 0x28, 0x0b, 0x88, 0x6a, 0x2f, 0x9f, 0xaa, 0x69, 0x2f,
	0x27, 0x67, 0x57, 0x18, 0x66, 0x38, 0xcf, 0xd9, 0x3b, 0x47, 0xfe, 0xd3, 0xff, 0xcf, 0x1b, 0x5a,
	0xf2, 0x01, 0x9e, 0xf4, 0x63, 0x5f, 0xc4, 0x1c, 0x2b, 0xd6, 0xfb, 0xb7, 0xac, 0x79, 0x3f, 0xe6,
	0x94, 0x8b, 0x8e, 0x2b, 0xe9, 0x07, 0xd9, 0x64, 0x59, 0x90, 0xec, 0x70, 0x07, 0x30, 0xf2, 0xbf,
	0xff, 0x17, 0x69, 0x5e, 0x75, 0x77, 0xda, 0x80, 0x7d, 0x8d, 0x49, 0x3f, 0x18, 0x6f, 0x94, 0x26,
	0x37, 0x6b, 0xb8, 0x13, 0x5e, 0xeb, 0xef, 0xc0, 0xe5, 0x70, 0x64, 0xb0, 0x7d, 0xd2, 0xa9, 0x8b,
	0xe8, 0xe0, 0xe6, 0x5e, 0x47, 0x70, 0x41, 0xee, 0x25, 0xb1, 0xc7, 0xb9, 0x1e, 0x68, 0xbc, 0xb6,
	0x71, 0x77, 0x47, 0x4a, 0xc8, 0x38, 0xd3, 0x46, 0x50, 0x04, 0xd9, 0x18, 0xfd, 0xbf, 0xa3, 0xa5,
	0xa8, 0x29, 0xa3, 0xbd, 0x7c, 0xfd, 0x13, 0xf9, 0x5d, 0x7b, 0xd0, 0xfe, 0xda, 0x57, 0xd6, 0x77,
	0x8d, 0x2c, 0x49, 0xab, 0x78, 0xab, 0xcc, 0xf9, 0xe3, 0x38, 0xf6, 0x99, 0xa7, 0xa9, 0xfc, 0xd9,
	0xfb, 0xe0, 0xdf, 0xfe, 0x30, 0xcd, 0xee, 0x47, 0x79, 0x77, 0x08, 0x4e, 0xe6, 0xfe, 0x9f, 0xa1,
	0xef, 0x41, 0xe4, 0xc0, 0xf7, 0x65, 0x2d, 0x7c, 0x40, 0xb6, 0x54, 0xb9, 0x75, 0x2b, 0xe9, 0x23,
	0xed, 0xe8, 0xd7, 0x50, 0x8b, 0xee, 0xe6, 0xca, 0x44, 0x02, 0x14, 0xc6, 0xff, 0xf7, 0x2d, 0xb1,
	0x78, 0x20, 0xcc, 0x4c, 0x9a, 0x7d, 0xcd, 0x73, 0x23, 0x3f, 0xc4, 0x9a, 0x18, 0xf3, 0x05, 0xdc,
	0x5f, 0xb5, 0xf0, 0x06, 0xb1, 0x22, 0xc7, 0xee, 0xb6, 0xc2, 0xb8, 0x9a, 0xe3, 0x33, 0xae, 0x09,
	0x95, 0x71, 0xf5, 0xd4, 0x63, 0x80, 0x49, 0xf3, 0x71, 0xfa, 0xec, 0x11, 0x7d, 0xa0, 0x3d, 0x66,
	0xef, 0xe6, 0xd0, 0x74, 0x8e, 0xbb, 0x69, 0x12, 0xf2, 0x5c, 0xa8, 0xfc, 0x27, 0x7b, 0x76, 0x26,
	0x2f, 0xb3, 0x95, 0x24, 0xe8, 0x16, 0x91, 0x48, 0x35, 0x93, 0xb3, 0x00, 0xb8, 0x2c, 0xe3, 0x40,
	0x71, 0x2f, 0x85, 0x34, 0xd6, 0x41, 0x12, 0xe6, 0xde, 0x5b, 0x68, 0xa6, 0xcb, 0xfe, 0x37, 0x52,
	0x72, 0x96, 0x70, 0x6d, 0x01, 0xc4, 0xf6, 0x82, 0x1c, 0x25, 0xfe, 0x5e, 0x90, 0xec, 0x2c, 0x07,
	0x59, 0x08, 0x87, 0xe4, 0x29, 0x34, 0xa5, 0xbc, 0xa8, 0x61, 0xbf, 0xfc, 0xdf, 0x6d, 0x42, 0x2f,
	0x9d, 0xc1, 0xde, 0x99, 0xa5, 0xc2, 0x12, 0xef, 0x7d, 0x1e, 0xcd, 0x04, 0x49, 0xd4, 0x0f, 0x4a,
	0xd1, 0x56, 0xfc, 0x96, 0x57, 0xda, 0x64, 0xfd, 0x58, 0xf0, 0x2d, 0x77, 0x2c, 0xf8, 0x29, 0x3d,
	0x16, 0xfc, 0xeb, 0xdc, 0x77, 0x7a, 0xba, 0xd2, 0x35, 0x97, 0xf9, 0x4f, 0xcb, 0x91, 0xe3, 0x67,
	0xc6, 0x8a, 0x1c, 0xff, 0xe7, 0x28, 0x17, 0x10, 0xf4, 0x29, 0xd3, 0x5f, 0xac, 0xe3, 0x62, 0x83,
	0x21, 0xdf, 0x6f, 0xcc, 0x75, 0x31, 0x88, 0x66, 0x8d, 0x41, 0xf8, 0xff, 0xa5, 0x48, 0xbd, 0xaa,
	0xc6, 0x53, 0x67, 0x53, 0xb4, 0x1b, 0x85, 0x38, 0xe5, 0x53, 0x04, 0x3f, 0xc6, 0x0b, 0xc9, 0xaf,
	0x18, 0x81, 0x27, 0x2b, 0x02, 0xad, 0xb7, 0x9c, 0x81, 0xd6, 0xa7, 0xc6, 0x08, 0x11, 0xfe, 0xdf,
	0xc9, 0xa3, 0x91, 0x82, 0x7b, 0x57, 0x8d, 0x46, 0x56, 0x20, 0x8d, 0x11, 0xf5, 0x7b, 0xd2, 0x19,
	0xf5, 0xbb, 0xf5, 0x82, 0x51, 0xbf, 0xa7, 0x2c, 0x51, 0xbf, 0xff, 0x75, 0x7a, 0xa0, 0x5a, 0xc2,
	0x7e, 0x93, 0xa1, 0xdd, 0x40, 0xaf, 0xd0, 0x29, 0x49, 0xa2, 0x22, 0x0a, 0x08, 0x33, 0xe0, 0x81,
	0x9e, 0x60, 0x1a, 0x44, 0xe9, 0x78, 0xa3, 0x2d, 0x43, 0x84, 0x4f, 0xba, 0x42, 0x84, 0xb7, 0xd4,
	0x10, 0xe1, 0x9f, 0x4b, 0xa1, 0xd1, 0x40, 0x51, 0x14, 0xf5, 0x92, 0x20, 0x8e, 0x92, 0x1e, 0x70,
	0x8b, 0xb1, 0xa2, 0x8b, 0x79, 0x52, 0x32, 0x92, 0x43, 0x2c, 0xf3, 0xc8, 0x53, 0x40, 0x6f, 0x8b,
	0x08, 0xce, 0x8c, 0x8e, 0x65, 0xfc, 0x8c, 0x46, 0x55, 0xfc, 0x8c, 0xa6, 0xa6, 0x7d, 0x8d, 0x8c,
	0x30, 0xdf, 0x2c, 0x62, 0xf8, 0x0b, 0xa1, 0x15, 0x11, 0xc5, 0x27, 0xa4, 0x88, 0xe2, 0x7f, 0x0a,
	0xe4, 0x76, 0x7b, 0x44, 0xf1, 0x17, 0x6b, 0x4d, 0xd7, 0x72, 0x4f, 0x98, 0x5a, 0x6e, 0x1a, 0x05,
	0xd7, 0x1a, 0x8e, 0x7c, 0x54, 0xdb, 0xfe, 0xba, 0x35, 0x1a, 0xfb, 0x90, 0xf9, 0xc8, 0xed, 0x93,
	0xf0, 0x9f, 0xc1, 0x84, 0x52, 0xcb, 0x30, 0x4b, 0x65, 0x87, 0x71, 0xf6, 0x90, 0xfe, 0x26, 0x12,
	0x39, 0xb3, 0x22, 0x57, 0x44, 0xcd, 0xa2, 0xc0, 0x70, 0x21, 0x3b, 0xb8, 0x25, 0xfe, 0xe7, 0x9a,
	0x78, 0x8e, 0x9a, 0x2a, 0x16, 0x29, 0x6c, 0xb5, 0x75, 0x3a, 0x80, 0x2e, 0xe5, 0x45, 0xc0, 0x8e,
	0x3b, 0x2e, 0x61, 0x81, 0x51, 0xc8, 0x6a, 0x11, 0x1a, 0x37, 0x0d, 0x96, 0xff, 0x1d, 0xe8, 0x1a,
	0x6d, 0x22, 0x4e, 0x83, 0x70, 0x29, 0xdf, 0x4b, 0xba, 0xef, 0x67, 0xc1, 0x60, 0xdb, 0x11, 0x29,
	0xe1, 0x10, 0x6a, 0x3c, 0x67, 0xef, 0x10, 0x1a, 0xcf, 0xfd, 0x6b, 0xca, 0x5b, 0x25, 0x22, 0x67,
	0x82, 0x43, 0x14, 0x73, 0xde, 0x16, 0x2e, 0xff, 0x81, 0xfa, 0xa4, 0xc9, 0x01, 0x46, 0x24, 0x32,
	0xf1, 0xb8, 0x44, 0x7f, 0x1a, 0x6f, 0xfd, 0x42, 0x7a, 0x5f, 0xa2, 0xd1, 0x4a, 0xbc, 0xe9, 0x7c,
	0x89, 0xb4, 0xfa, 0x1d, 0x6a, 0x56, 0x75, 0x46, 0x01, 0xbf, 0x7d, 0x7b, 0x71, 0x9c, 0x97, 0x51,
	0xf4, 0x00, 0xa8, 0x78, 0x19, 0x45, 0x0f, 0x85, 0xab, 0xe8, 0x08, 0xfc, 0x43, 0xc6, 0x96, 0x15,
	0x1d, 0xf6, 0xce, 0xb5, 0xd1, 0x3e, 0x04, 0xa5, 0xeb, 0xa4, 0x70, 0x23, 0xf7, 0xbf, 0x55, 0xaa,
	0x5d, 0xc2, 0x28, 0xef, 0x47, 0x79, 0xce, 0xd4, 0x9d, 0xe4, 0x38, 0xb8, 0x80, 0x50, 0x2e, 0x7e,
	0xb1, 0x5d, 0x21, 0x95, 0xf8, 0x0f, 0xd5, 0x71, 0xe9, 0x21, 0xd5, 0xc9, 0xb8, 0x6a, 0x65, 0x70,
	0xa7, 0xd9, 0xfa, 0x4a, 0xf5, 0xd2, 0x30, 0x29, 0xb2, 0x08, 0xe7, 0xab, 0x51, 0x5e, 0x8c, 0xcc,
	0x77, 0x60, 0xd8, 0x11, 0x7e, 0xbb, 0xa1, 0x6a, 0x78, 0x09, 0x0f, 0x17, 0xaf, 0xbc, 0x6f, 0xdf,
	0xbe, 0x5b, 0x91, 0x0a, 0x4e, 0x3e, 0x57, 0x6a, 0xc4, 0x99, 0x35, 0xe4, 0x02, 0xd9, 0x39, 0x8c,
	0xf3, 0xfe, 0x96, 0xc4, 0xfb, 0x7f, 0xae, 0x39, 0xc0, 0xf4, 0xa8, 0x64, 0x1b, 0xc4, 0xf1, 0x66,
	0xd0, 0xdd, 0xa1, 0xe1, 0x31, 0x49, 0x0f, 0x3d, 0x34, 0xd9, 0xe3, 0x89, 0x1e, 0x67, 0xda, 0xf0,
	0xff, 0x8b, 0x1a, 0x89, 0x2c, 0xdd, 0x51, 0x2e, 0x32, 0x53, 0x63, 0x5e, 0x64, 0xfe, 0x41, 0x43,
	0x35, 0xd7, 0x28, 0x54, 0xa6, 0xda, 0xd3, 0x7f, 0x82, 0x94, 0x16, 0x21, 0x80, 0xa7, 0xea, 0x86,
	0x00, 0xfe, 0x71, 0xe5, 0x99, 0x76, 0xf7, 0x85, 0x8d, 0xb3, 0xdf, 0x46, 0x47, 0x9f, 0xe2, 0x6e,
	0x91, 0x66, 0x9d, 0xf2, 0x91, 0xe9, 0x4d, 0xd4, 0x22, 0x9d, 0xcd, 0x8d, 0xf7, 0x3a, 0xe5, 0x2b,
	0x25, 0x0a, 0xe0, 0x2f, 0xa0, 0x83, 0xec, 0x6b, 0x22, 0x98, 0x7a, 0x57, 0xd4, 0x0f, 0x4b, 0x6d,
	0x09, 0x4d, 0x81, 0x49, 0xbf, 0xf9, 0x26, 0x7a, 0x45, 0xfa, 0x06, 0x74, 0x97, 0x37, 0xd4, 0xef,
	0x8e, 0x29, 0xdf, 0x41, 0xb2, 0x30, 0xf6, 0xed, 0x7d, 0x74, 0x82, 0x7d, 0xcb, 0xdf, 0x5f, 0xd3,
	0x4c, 0xe0, 0xaf, 0xab, 0x08, 0x4e, 0x49, 0xe1, 0x0c, 0x24, 0x30, 0x8e, 0xc5, 0x47, 0x88, 0x61,
	0x89, 0xa8, 0x83, 0x48, 0xf9, 0x6d, 0x8b, 0xc3, 0x6c, 0xa0, 0x73, 0x0c, 0xa6, 0xcd, 0xb2, 0xe1,
	0xd0, 0xc7, 0xd4, 0xdc, 0xdd, 0xe4, 0x1d, 0xb5, 0xc5, 0x0b, 0x92, 0x07, 0x9c, 0x05, 0x9c, 0x63,
	0xbd, 0x22, 0xe8, 0x15, 0xa7, 0x49, 0x4f, 0x6d, 0x7a, 0x82, 0x03, 0xad, 0xa2, 0x39, 0x06, 0x54,
	0x5e, 0x42, 0x96, 0xd3, 0x5d, 0x9c, 0xe1, 0xd0, 0x7b, 0x5b, 0x6d, 0xb6, 0x14, 0xdc, 0x0d, 0x50,
	0x8e, 0xed, 0xfb, 0xc8, 0xe3, 0x24, 0x2b, 0xf5, 0xfb, 0xde, 0xab, 0x2a, 0x9e, 0xd2, 0x81, 0x4f,
	0x02, 0xe2, 0x18, 0x1e, 0xa2, 0x93, 0x0c, 0x03, 0x97, 0x08, 0xa9, 0x04, 0xe7, 0xbd, 0xa1, 0x22,
	0x29, 0x85, 0x4e, 0x15, 0x8e, 0xe3, 0xf9, 0x10, 0x9d, 0xd6, 0xf0, 0x08, 0x29, 0xe7, 0x2d, 0x15,
	0xd3, 0x19, 0x03, 0x13, 0x87, 0x34, 0x47, 0x25, 0xc7, 0x2b, 0x71, 0x8e, 0x4a, 0x89, 0x92, 0x42,
	0x31, 0xdc, 0x43, 0xc7, 0x39, 0x86, 0x60, 0x17, 0x8b, 0x47, 0x5d, 0xaf, 0xa9, 0x28, 0xca, 0x23,
	0x54, 0x86, 0x32, 0x71, 0xc8, 0xb1, 0xd7, 0xdc, 0x38, 0xd4, 0x08, 0x6d, 0x14, 0xc7, 0x77, 0xd1,
	0x31, 0x86, 0xa3, 0x74, 0x9c, 0xf2, 0x6e, 0xa9, 0x18, 0x8e, 0x6b, 0x06, 0x39, 0xea, 0x31, 0xa8,
	0x6f, 0x09, 0xf0, 0x86, 0x10, 0x24, 0x75, 0x6e, 0x09, 0x05, 0x8c, 0x63, 0x79, 0x8a, 0xce, 0xab,
	0x23, 0xc9, 0x3b, 0x8a, 0x93, 0x84, 0xf7, 0xae, 0x8a, 0xae, 0xbc, 0x80, 0xf5, 0xad, 0xf0, 0x26,
	0x85, 0x14, 0x0b, 0xa4, 0x93, 0x42, 0x8a, 0xc1, 0xd1, 0xd8, 0x8a, 0x72, 0xad, 0xb0, 0x7e, 0xba,
	0xb7, 0xa2, 0x15, 0xdc, 0x64, 0x43, 0x62, 0x53, 0x38, 0xd9, 0x90, 0xb6, 0x23, 0x16, 0x7e, 0xb7,
	0x89, 0x66, 0xda, 0x6b, 0xcb, 0x54, 0x14, 0xeb, 0xa0, 0xd3, 0x2e, 0x89, 0xb6, 0x8c, 0xef, 0xe2,
	0x16, 0x7b, 0xe7, 0xcb, 0xf7, 0xeb, 0x14, 0x42, 0xad, 0xf6, 0x0f, 0x78, 0x8f, 0xd1, 0x09, 0xab,
	0x3c, 0x7b, 0xc9, 0xc4, 0xae, 0x42, 0xcc, 0x1f, 0x97, 0xd8, 0x43, 0x50, 0xe4, 0x50, 0xe8, 0x1f,
	0x50, 0x7a, 0xac, 0xc9, 0x95, 0xf6, 0x1e, 0xab, 0x40, 0x46, 0x8f, 0xd5, 0x6a, 0xff, 0xc0, 0xc2,
	0xff, 0xd5, 0x42, 0xb3, 0xed, 0xb5, 0x65, 0x10, 0xa4, 0x08, 0x81, 0xce, 0x38, 0x45, 0x31, 0xef,
	0x9a, 0xdc, 0xa0, 0x13, 0x6c, 0xfe, 0x8c, 0x72, 0x24, 0xc8, 0x55, 0xfe, 0x01, 0xef, 0x47, 0x52,
	0x03, 0xba, 0x0c, 0xeb, 0x68, 0x40, 0x07, 0x9b, 0x2f, 0x97, 0x20, 0x83, 0xe1, 0xc8, 0x3f, 0x46,
	0xc7, 0x59, 0x09, 0xbd, 0xe7, 0xb0, 0x41, 0x5d, 0xb4, 0xa0, 0x95, 0x01, 0xe6, 0x4b, 0xe6, 0x23,
	0x71, 0x7c, 0xff, 0x80, 0xd7, 0x46, 0x27, 0x18, 0x38, 0xb3, 0x01, 0x32, 0x84, 0x97, 0x2c, 0x08,
	0x15, 0x88, 0xf9, 0x53, 0xd6, 0x2e, 0x92, 0x15, 0xd2, 0x45, 0x67, 0xab, 0xf2, 0x07, 0xdd, 0xa8,
	0x45, 0xe3, 0xc5, 0x3b, 0xd5, 0x54, 0xee, 0x48, 0x8d, 0x58, 0xf2, 0x05, 0xdd, 0xa8, 0x45, 0xe7,
	0xc5, 0x3b, 0x6e, 0x4a, 0x07, 0xe8, 0x5c, 0xe5, 0x55, 0xe4, 0x66, 0xad, 0x16, 0x6e, 0xdf, 0x5e,
	0xac, 0xd7, 0x84, 0xed, 0x56, 0x70, 0xb3, 0x16, 0xa5, 0xaa, 0x9a, 0x58, 0xf8, 0xff, 0x26, 0xd1,
	0x41, 0xe0, 0x0d, 0xcc, 0x93, 0x61, 0x13, 0x9d, 0x71, 0xe7, 0xe5, 0xbc, 0xa6, 0x6e, 0x37, 0x07,
	0xd8, 0xfc, 0x39, 0x0b, 0xb7, 0x15, 0xb5, 0xfe, 0x01, 0xef, 0x0b, 0x74, 0xbe, 0x3a, 0x53, 0xe6,
	0x2d, 0x6b, 0x3b, 0x36, 0xd0, 0x91, 0x6d, 0xc5, 0xe8, 0xc2, 0x88, 0xfc, 0x99, 0xaf, 0xda, 0x07,
	0x65, 0x83, 0x1d, 0xd9, 0xda, 0x4f, 0xd0, 0x9c, 0x33, 0x73, 0xe6, 0x55, 0x6b, 0x3b, 0x1a, 0xd4,
	0xc8, 0x16, 0xb6, 0xd1, 0xb9, 0x4a, 0x55, 0xfa, 0xcd, 0x5a, 0x53, 0x74, 0xfb, 0xf6, 0x3b, 0x23,
	0x5b, 0xda, 0x42, 0x67, 0xab, 0x94, 0xd2, 0x37, 0xac, 0x0d, 0x99, 0x80, 0xa3, 0xda, 0x59, 0xf8,
	0xeb, 0xb3, 0x70, 0x3a, 0xd1, 0xe8, 0x5c, 0x1f, 0x01, 0xfb, 0xd2, 0x33, 0x7d, 0x1a, 0xec, 0x4b,
	0x07, 0x98, 0x37, 0x83, 0xb8, 0x03, 0x2f, 0x3c, 0x66, 0xe6, 0x06, 0x3d, 0x6f, 0xa2, 0x92, 0xaa,
	0xe7, 0xe7, 0xe4, 0x8d, 0x92, 0xe0, 0x8e, 0xd0, 0x45, 0xfa, 0x07, 0xbc, 0x55, 0x74, 0xd4, 0x48,
	0xdb, 0x79, 0xce, 0x44, 0x57, 0xd6, 0x56, 0x62, 0x13, 0xbd, 0x93, 0xd3, 0x6e, 0x5a, 0x7a, 0x27,
	0x55, 0x57, 0xe2, 0x7b, 0x80, 0x3c, 0x4b, 0x3e, 0xcc, 0x0b, 0xb6, 0xe1, 0x96, 0xf5, 0xf3, 0xaa,
	0x89, 0xd8, 0x3f, 0xe0, 0x3d, 0xe4, 0xdd, 0x92, 0xf3, 0x61, 0x5a, 0xba, 0x25, 0x55, 0xcf, 0x1f,
	0x2d, 0x19, 0x31, 0x4d, 0x61, 0xe8, 0x1f, 0xf0, 0x3e, 0xe4, 0x33, 0xa9, 0x26, 0xa6, 0xb4, 0xcc,
	0xa4, 0x02, 0x60, 0xc5, 0xf5, 0xbe, 0xc0, 0xa5, 0xe4, 0x9a, 0xb4, 0xe1, 0x92, 0x01, 0xcc, 0xc1,
	0x3d, 0x46, 0xa7, 0x5d, 0xc9, 0x3a, 0xae, 0x98, 0xc8, 0x0c, 0x20, 0x13, 0xe1, 0x0f, 0xd0, 0x9c,
	0x33, 0x41, 0xc7, 0xd5, 0x6a, 0x8c, 0x14, 0x6a, 0x24, 0x4a, 0x25, 0x29, 0x87, 0x13, 0xa5, 0x0c,
	0x65, 0xa2, 0xdc, 0x80, 0x43, 0xdc, 0x34, 0xea, 0x5c, 0xaa, 0xdc, 0x0b, 0x84, 0x49, 0x54, 0x6f,
	0x87, 0x13, 0x56, 0xe3, 0xca, 0xa5, 0xca, 0xc5, 0x42, 0xb0, 0xda, 0xe6, 0x78, 0x0d, 0x9d, 0x72,
	0x58, 0x34, 0xfc, 0x11, 0x4b, 0xc6, 0x85, 0x51, 0x4c, 0xb6, 0x69, 0x7e, 0xb8, 0x62, 0x43, 0xa9,
	0x01, 0x19, 0x64, 0x5c, 0xf8, 0x4f, 0xa6, 0xe1, 0xac, 0x5c, 0x65, 0xda, 0x0d, 0xef, 0x13, 0x74,
	0xc2, 0x9a, 0x92, 0x54, 0x21, 0x80, 0x0d, 0x62, 0xfe, 0xac, 0x71, 0x63, 0x2c, 0xd5, 0x24, 0xfe,
	0x01, 0xef, 0x53, 0x74, 0xdc, 0x96, 0xb3, 0xf4, 0xa2, 0x0b, 0x2f, 0x03, 0x98, 0xbf, 0xa0, 0x0b,
	0x71, 0xea, 0xcd, 0x16, 0x64, 0xcf, 0x53, 0x8e, 0x14, 0xa6, 0xbe, 0x0b, 0x79, 0x09, 0x33, 0xaa,
	0xdb, 0x3f, 0x46, 0x27, 0xad, 0x06, 0x05, 0xef, 0x72, 0x15, 0x41, 0x00, 0x64, 0xfe, 0x92, 0xab,
	0xeb, 0x1c, 0xc4, 0x3f, 0xe0, 0x7d, 0x8e, 0x4e, 0xbb, 0x0c, 0x3e, 0x57, 0x46, 0x91, 0x9c, 0x2c,
	0x92, 0x91, 0xdd, 0x3f, 0xe5, 0xb0, 0xfb, 0xf8, 0x23, 0x08, 0x4f, 0x90, 0x8f, 0xa6, 0x7d, 0x80,
	0xce, 0xb8, 0x8d, 0x3d, 0xd7, 0x46, 0x93, 0xbf, 0xc6, 0x10, 0x42, 0x34, 0xe7, 0x34, 0xe9, 0x5c,
	0x1d, 0x39, 0x09, 0xa4, 0x81, 0x3a, 0xf3, 0xf0, 0xc4, 0x5c, 0xf7, 0x70, 0x87, 0xbf, 0x34, 0xaa,
	0x85, 0x79, 0xb7, 0xa6, 0xa4, 0x9a, 0x3e, 0x77, 0xeb, 0xd1, 0xe7, 0xee, 0x08, 0xfa, 0x2c, 0xfc,
	0xf5, 0x69, 0xb8, 0xe9, 0x3d, 0x01, 0x31, 0x9c, 0x1c, 0x2b, 0xcc, 0xed, 0x93, 0x1c, 0x1b, 0xe4,
	0xd6, 0xbc, 0x16, 0x64, 0x85, 0xba, 0xcd, 0x2c, 0x00, 0x26, 0x7f, 0xbd, 0x8f, 0x8e, 0xa8, 0xfe,
	0xa3, 0xde, 0xbc, 0x05, 0x07, 0xab, 0x93, 0xae, 0x5a, 0xac, 0x82, 0x94, 0xfa, 0x07, 0xbc, 0x47,
	0xe8, 0x94, 0xd4, 0xda, 0xbd, 0xa8, 0x27, 0x7a, 0xe4, 0x3b, 0x7a, 0x24, 0xc1, 0x98, 0x9d, 0x7a,
	0x84, 0x8e, 0x95, 0x0d, 0x7f, 0x82, 0x37, 0xa1, 0x5f, 0xe7, 0xed, 0xfd, 0x62, 0xd5, 0xf3, 0xa7,
	0xf5, 0xae, 0xb1, 0x0a, 0x1d, 0x1d, 0x53, 0xbb, 0xb9, 0xd0, 0xb1, 0x6a, 0x13, 0x1d, 0xab, 0xa0,
	0x8c, 0xc8, 0xee, 0x2e, 0x6c, 0x1d, 0xac, 0x06, 0x23, 0x4d, 0xb3, 0xa9, 0x2c, 0xa4, 0x8c, 0xc2,
	0xe1, 0x27, 0xac, 0x32, 0x0a, 0x07, 0xd0, 0x28, 0xf4, 0x1f, 0xca, 0xa4, 0x10, 0x2e, 0xce, 0xee,
	0x19, 0x27, 0xfb, 0xca, 0x35, 0xe9, 0x3f, 0x46, 0x67, 0xdc, 0x6e, 0xd3, 0xd7, 0x46, 0x93, 0x42,
	0x3d, 0xa4, 0x35, 0x15, 0x11, 0xdc, 0x48, 0xe6, 0x2b, 0x5c, 0xa6, 0xaf, 0xd7, 0xa0, 0xc6, 0xa8,
	0x16, 0x36, 0xd0, 0x09, 0xab, 0xf3, 0xf4, 0x25, 0x37, 0x41, 0x18, 0x99, 0x2b, 0xb0, 0x2e, 0xfc,
	0xec, 0x24, 0x9a, 0x6e, 0xaf, 0x2d, 0x7f, 0x80, 0xe3, 0x81, 0xf7, 0x3d, 0x74, 0x44, 0xf5, 0x99,
	0x56, 0xb7, 0x97, 0x5a, 0x37, 0xff, 0x8a, 0xac, 0x4d, 0xdf, 0x8a, 0x08, 0xe7, 0xfd, 0x00, 0x1d,
	0xe3, 0x40, 0x1f, 0xe3, 0x20, 0xc3, 0x79, 0x71, 0xbf, 0xab, 0x4e, 0x98, 0x51, 0x3d, 0x5f, 0x9a,
	0x11, 0x44, 0x19, 0xdd, 0x05, 0x86, 0x9b, 0xb6, 0x1d, 0x93, 0xa8, 0x96, 0x76, 0x01, 0xd4, 0x89,
	0x0a, 0xff, 0x80, 0xf7, 0x3d, 0xf4, 0x0a, 0x94, 0x41, 0x94, 0xc9, 0xc1, 0x60, 0x35, 0xed, 0x79,
	0x67, 0x0d, 0x64, 0x65, 0xa5, 0xb9, 0xc9, 0xd7, 0x90, 0x67, 0xa6, 0xcd, 0x55, 0x85, 0x7e, 0xb3,
	0x5e, 0x22, 0x3c, 0x54, 0x96, 0x35, 0x20, 0x6b, 0xbf, 0xa2, 0x39, 0x83, 0x5b, 0xba, 0x54, 0x56,
	0x4a, 0x9a, 0x05, 0xa8, 0x61, 0xc5, 0x54, 0x3c, 0x94, 0xdd, 0xd3, 0xe1, 0x3e, 0x1d, 0xa7, 0x3d,
	0x75, 0x5d, 0xd8, 0x20, 0xac, 0xc2, 0xdc, 0xaf, 0xa1, 0x53, 0xf6, 0x8c, 0x5f, 0x2a, 0xbf, 0xb0,
	0xc3, 0x48, 0x77, 0x50, 0x00, 0x50, 0x6b, 0xa9, 0xcc, 0x4d, 0x49, 0x0d, 0x96, 0x44, 0xd6, 0x2a,
	0x33, 0xd6, 0x5c, 0x35, 0x27, 0xc4, 0x84, 0x32, 0x67, 0x46, 0x5a, 0x73, 0xcb, 0x21, 0xcb, 0xe8,
	0x6c, 0x5f, 0x29, 0xa2, 0x5a, 0x5a, 0x73, 0xa2, 0x0c, 0x2e, 0x76, 0x47, 0xf5, 0x9c, 0xd1, 0xea,
	0xb5, 0x53, 0xaf, 0x95, 0x6e, 0xc3, 0x22, 0xc9, 0xf4, 0x01, 0x6f, 0xa5, 0x5c, 0x2a, 0x65, 0x8e,
	0x69, 0xfb, 0x52, 0x29, 0xeb, 0xed, 0x17, 0x6b, 0x69, 0x43, 0xb2, 0xac, 0xd4, 0xd6, 0x0d, 0x49,
	0xeb, 0xa4, 0x0d, 0x49, 0x0b, 0xfc, 0x03, 0xde, 0x72, 0x39, 0x24, 0x9e, 0xa7, 0xba, 0x72, 0x4f,
	0x1f, 0xd3, 0xf6, 0xf4, 0xe2, 0x1d, 0x98, 0xb4, 0xe3, 0xb6, 0xa4, 0xd6, 0x17, 0x2b, 0x77, 0xe3,
	0xe2, 0x9d, 0xaa, 0xfd, 0xb8, 0x51, 0xae, 0x59, 0x25, 0x0b, 0xf5, 0xa5, 0xea, 0x0d, 0xb5, 0x78,
	0xa7, 0x72, 0x4b, 0x3d, 0x2d, 0xb1, 0x2a, 0x39, 0xaa, 0xad, 0x58, 0x65, 0x88, 0xf9, 0x79, 0x15,
	0xab, 0x5c, 0x47, 0xb5, 0x4d, 0xce, 0x34, 0xd6, 0x57, 0x47, 0xef, 0x8a, 0xc5, 0x3b, 0x23, 0xf7,
	0x85, 0x31, 0x4f, 0x77, 0x17, 0xc6, 0x9a, 0xa7, 0xbb, 0x0b, 0xfe, 0x01, 0x2f, 0x41, 0xe7, 0xaa,
	0x92, 0xf5, 0xa9, 0x2a, 0xab, 0x2a, 0xc8, 0x79, 0xbf, 0xaa, 0xbb, 0x62, 0x12, 0xd7, 0xd1, 0x19,
	0x77, 0xe6, 0xbf, 0x6b, 0x46, 0x63, 0x36, 0x30, 0x73, 0x3b, 0x4b, 0x73, 0xa8, 0xe4, 0x02, 0xb4,
	0xce, 0xa1, 0x0c, 0xa1, 0xcf, 0xa1, 0x5c, 0xe7, 0x1f, 0xf0, 0xee, 0xa0, 0x59, 0x91, 0x34, 0xd0,
	0x3b, 0x69, 0x20, 0x23, 0xc5, 0xd5, 0xbc, 0x85, 0x3f, 0x22, 0x72, 0xf0, 0x16, 0x5e, 0x2d, 0xf3,
	0x16, 0xf1, 0xee, 0x88, 0xd0, 0xea, 0x84, 0xf5, 0xd9, 0xd1, 0xa5, 0xca, 0x4d, 0x44, 0xf0, 0x55,
	0xec, 0xa2, 0x0f, 0x94, 0x43, 0xb2, 0x8a, 0xf5, 0x89, 0xea, 0x79, 0x4b, 0xda, 0x29, 0x95, 0xeb,
	0x6b, 0x4f, 0x99, 0xac, 0x5c, 0x5f, 0x85, 0xd1, 0x57, 0xb7, 0x5a, 0x0b, 0x83, 0x3f, 0x6e, 0x79,
	0xf7, 0x64, 0x67, 0x20, 0x12, 0x80, 0x74, 0x8b, 0x91, 0x8f, 0x3c, 0x78, 0x33, 0x45, 0x84, 0xc3,
	0xa3, 0xc6, 0x93, 0x29, 0x2b, 0xb7, 0xe6, 0xb5, 0x92, 0xa1, 0x04, 0xaa, 0x78, 0x39, 0x1c, 0xa1,
	0xc7, 0xcc, 0x97, 0x53, 0x26, 0x21, 0xe5, 0xea, 0x0a, 0x6c, 0x92, 0xec, 0x52, 0xbe, 0x6d, 0xb2,
	0x4e, 0x8b, 0xa8, 0xd6, 0x67, 0xb9, 0x7c, 0x2c, 0x05, 0xfa, 0x46, 0xcb, 0x5b, 0x29, 0xf3, 0x3c,
	0x51, 0xea, 0x6d, 0xd7, 0x94, 0x53, 0x0e, 0xb7, 0x29, 0x73, 0x8a, 0x0d, 0x18, 0x13, 0xdd, 0x67,
	0xe8, 0xa4, 0xdd, 0x01, 0xea, 0xb2, 0x7d, 0x7b, 0x48, 0x20, 0x92, 0xd8, 0x0f, 0xf5, 0x4a, 0xa5,
	0x7f, 0x60, 0xe1, 0xf7, 0x2f, 0x83, 0xfa, 0x47, 0xbc, 0xfe, 0x58, 0x41, 0x27, 0x84, 0xef, 0x7d,
	0x86, 0x03, 0xf1, 0x7a, 0x5b, 0xd9, 0x3b, 0x36, 0x08, 0xb3, 0xd7, 0x21, 0x3a, 0xad, 0x25, 0xb1,
	0x16, 0xef, 0x9d, 0xaf, 0x58, 0xb1, 0xa9, 0x40, 0x12, 0x63, 0x14, 0x3a, 0xf6, 0xa5, 0xad, 0x2d,
	0xdc, 0x2d, 0xca, 0x87, 0xd3, 0xfe, 0x01, 0x2f, 0x42, 0xf3, 0x1a, 0x02, 0xb2, 0x3a, 0xc4, 0xa3,
	0xf3, 0x8a, 0x86, 0x24, 0xb8, 0xf9, 0xcb, 0xee, 0xb6, 0x18, 0x08, 0xd5, 0xd8, 0x4a, 0x23, 0x27,
	0xdb, 0x63, 0x7d, 0x10, 0xf4, 0xd5, 0xad, 0x65, 0x01, 0xb0, 0xf2, 0x5d, 0xdb, 0x83, 0x3a, 0x07,
	0x91, 0x25, 0x08, 0x89, 0xef, 0x8a, 0x7e, 0x2a, 0xb4, 0x98, 0x73, 0x25, 0xd4, 0x56, 0xcf, 0x4e,
	0x17, 0xd4, 0x7c, 0x79, 0x92, 0x08, 0x10, 0x4b, 0xf2, 0x6c, 0x30, 0xa4, 0x9c, 0x76, 0x20, 0x71,
	0x4c, 0xae, 0x0a, 0x34, 0x7f, 0xb5, 0x4e, 0x43, 0x94, 0x97, 0xcb, 0x28, 0xc4, 0x3a, 0x75, 0x92,
	0x8a, 0x43, 0x48, 0xbb, 0x5c, 0x90, 0x0a, 0xd2, 0x77, 0x00, 0x07, 0x56, 0x3a, 0xff, 0x70, 0x18,
	0xc7, 0xec, 0x33, 0x77, 0xe7, 0x25, 0x20, 0xdb, 0x2c, 0x10, 0xd4, 0x04, 0x84, 0x2a, 0x7d, 0xed,
	0xef, 0x16, 0xd5, 0xcd, 0x6f, 0x87, 0xb1, 0xde, 0x13, 0x1e, 0x20, 0x4f, 0x7d, 0x31, 0x08, 0x4f,
	0x13, 0x2f, 0x58, 0xb1, 0x89, 0x7a, 0xdb, 0x09, 0xeb, 0x99, 0x0f, 0x0f, 0xab, 0xd0, 0x90, 0x7a,
	0x6b, 0x87, 0x74, 0x4c, 0x1b, 0xf0, 0xf8, 0xc4, 0x8d, 0x09, 0xea, 0x6b, 0x61, 0xa2, 0x0e, 0x03,
	0x6e, 0x4c, 0xd4, 0x53, 0xc0, 0x86, 0xe9, 0x91, 0x4c, 0xf6, 0x6d, 0xdc, 0xdd, 0x21, 0xfb, 0x3b,
	0x21, 0x67, 0x9f, 0x83, 0xec, 0x32, 0x8c, 0xd5, 0xaa, 0x22, 0x40, 0xa9, 0xf9, 0x59, 0xe0, 0xb3,
	0xaf, 0x11, 0x15, 0xc8, 0x44, 0xb8, 0x2a, 0xad, 0xe4, 0x2f, 0xd2, 0x28, 0xe1, 0x8b, 0xc2, 0xbe,
	0x92, 0x25, 0x08, 0xeb, 0x68, 0x3f, 0x46, 0x27, 0x05, 0x6c, 0x8c, 0x03, 0xf1, 0x3a, 0x4a, 0x3d,
	0x12, 0xac, 0x20, 0x56, 0x7c, 0x1b, 0x12, 0xeb, 0x88, 0xa8, 0x9c, 0x9f, 0x72, 0x94, 0x76, 0xd6,
	0xa1, 0x41, 0x59, 0xb1, 0x7e, 0x26, 0xf5, 0x92, 0x3e, 0x0f, 0xa5, 0x77, 0x08, 0x47, 0x2f, 0x65,
	0x10, 0xe9, 0xe0, 0x7a, 0xf0, 0x9c, 0xbe, 0xfb, 0x2f, 0x83, 0x6c, 0x6a, 0xbb, 0x8c, 0xc5, 0x3a,
	0xaf, 0xdc, 0x65, 0x0a, 0x8c, 0xcb, 0x58, 0xa3, 0xbd, 0x6f, 0xa3, 0x8d, 0xe5, 0x0e, 0x8c, 0x0a,
	0x8c, 0x15, 0x63, 0x28, 0x9d, 0x4d, 0xc6, 0xeb, 0x58, 0xc7, 0xd9, 0x64, 0xc0, 0x49, 0x12, 0x1f,
	0x27, 0x84, 0x54, 0x0b, 0xa7, 0xc9, 0x19, 0xfd, 0x5d, 0x5e, 0xd4, 0x4b, 0x20, 0x98, 0x43, 0xae,
	0x5e, 0x0d, 0x9c, 0x60, 0x0e, 0xed, 0xc4, 0x39, 0x6d, 0x71, 0xab, 0xd1, 0xbe, 0x6e, 0x56, 0x6c,
	0x03, 0x05, 0xd2, 0x8a, 0xbd, 0x8f, 0x2e, 0x8f, 0x7c, 0xab, 0xeb, 0xbd, 0xe1, 0xe2, 0xc6, 0x56,
	0xf0, 0x2a, 0x96, 0xff, 0xa1, 0x74, 0x76, 0x97, 0x8f, 0x75, 0x1d, 0x67, 0x77, 0x09, 0x60, 0xed,
	0xfa, 0xe7, 0xea, 0x99, 0x04, 0x7d, 0x59, 0xd5, 0x95, 0x40, 0x36, 0x08, 0x49, 0xcc, 0x10, 0xd5,
	0xbc, 0x8e, 0xc5, 0x0b, 0x03, 0x9d, 0xc6, 0x09, 0xf9, 0xf9, 0xac, 0xf0, 0x62, 0xb1, 0xa3, 0x97,
	0x20, 0x6c, 0x82, 0xe3, 0x39, 0x45, 0x56, 0x63, 0x13, 0xc2, 0xb2, 0x27, 0xe4, 0x8e, 0x29, 0xb4,
	0x40, 0x5a, 0x45, 0x5c, 0x6d, 0x6f, 0x71, 0x99, 0xab, 0x6a, 0xff, 0x39, 0x85, 0xc5, 0x4d, 0x74,
	0x51, 0x5b, 0x9d, 0x6b, 0x19, 0x87, 0xfe, 0x20, 0x0a, 0x43, 0x9c, 0x78, 0xaf, 0x55, 0x2c, 0x65,
	0x1d, 0xd8, 0xb1, 0xe4, 0xe6, 0x5d, 0x82, 0xcf, 0xe2, 0x1d, 0xc7, 0x76, 0x34, 0xe0, 0xea, 0x8b,
	0x48, 0x32, 0xc3, 0x2f, 0x57, 0xd4, 0x82, 0x63, 0x1e, 0x25, 0x08, 0x97, 0xeb, 0x81, 0xdc, 0x29,
	0x8e, 0xec, 0xa2, 0xab, 0xd7, 0x55, 0xb8, 0x34, 0xf9, 0x47, 0x0e, 0xe8, 0x70, 0x65, 0x94, 0x08,
	0x4a, 0xae, 0xc9, 0xd5, 0x52, 0xa8, 0xcc, 0x8f, 0x8c, 0xb8, 0x0d, 0xd7, 0x46, 0x8b, 0x40, 0x2e,
	0xd3, 0xb7, 0x7c, 0xe4, 0x29, 0x71, 0x13, 0x2e, 0x57, 0x4b, 0x30, 0x2e, 0x7c, 0x5f, 0xa0, 0xf3,
	0xd5, 0xb1, 0x0b, 0x6e, 0xd5, 0x63, 0xd0, 0xaa, 0xdf, 0x91, 0x9d, 0x47, 0xe7, 0xe8, 0x6a, 0xad,
	0xc8, 0x04, 0x6f, 0x8f, 0xc5, 0xf0, 0x54, 0x95, 0x85, 0xc1, 0xf3, 0xe4, 0x03, 0x4d, 0x0d, 0x50,
	0xe0, 0x8f, 0x58, 0x82, 0x2e, 0x92, 0xfd, 0x48, 0xbd, 0x60, 0x28, 0x71, 0x03, 0x9c, 0x17, 0x0c,
	0x19, 0xaa, 0xaa, 0xbb, 0x91, 0xc4, 0x02, 0xec, 0xd1, 0x05, 0x1c, 0x2c, 0xc0, 0x0e, 0x5c, 0xd5,
	0xd4, 0x27, 0xe8, 0x6c, 0x55, 0x84, 0x82, 0x1b, 0x2e, 0x4e, 0xab, 0x01, 0x56, 0x0b, 0x79, 0x72,
	0xd4, 0x01, 0xf7, 0x9e, 0x67, 0x10, 0x56, 0x72, 0x7f, 0xa4, 0xad, 0x78, 0x11, 0x0d, 0xc0, 0xbd,
	0xe2, 0x39, 0x88, 0xd9, 0xb5, 0xb6, 0xb4, 0xe9, 0xb5, 0xe7, 0xfb, 0x57, 0xaa, 0x84, 0x04, 0x06,
	0x64, 0xed, 0xe0, 0x8e, 0x74, 0xbe, 0x58, 0x5e, 0xea, 0x3b, 0xce, 0x17, 0x0b, 0xe4, 0xbc, 0xc5,
	0x99, 0x5d, 0x82, 0x01, 0x8f, 0xe6, 0xff, 0xb7, 0x01, 0xd6, 0xb3, 0x7b, 0x69, 0x91, 0x7b, 0x3f,
	0x40, 0xa7, 0xd8, 0xfb, 0xff, 0x24, 0x5c, 0x1e, 0xe6, 0x45, 0xda, 0x6f, 0x53, 0x1f, 0x1f, 0x75,
	0x69, 0xdb, 0x61, 0xec, 0xfa, 0xff, 0x4f, 0xd0, 0x59, 0x00, 0x0f, 0xc0, 0x85, 0xe9, 0x13, 0xbc,
	0xb9, 0x9d, 0xa6, 0x3b, 0xa4, 0xee, 0x07, 0x43, 0x9c, 0xed, 0xa9, 0x6b, 0xa2, 0x02, 0xd0, 0x24,
	0xfc, 0xfb, 0xe8, 0xb8, 0x2d, 0x56, 0xc1, 0x45, 0x4b, 0x47, 0x65, 0x00, 0xd3, 0x55, 0xe7, 0xef,
	0xb7, 0x40, 0x57, 0xb3, 0xc6, 0xa2, 0x15, 0x78, 0x1d, 0x74, 0x5a, 0x8e, 0x5c, 0xc0, 0xca, 0x21,
	0xc5, 0xab, 0xea, 0x0b, 0x64, 0x07, 0x92, 0x7c, 0xc8, 0x05, 0x84, 0x54, 0x0d, 0x7e, 0x99, 0xf3,
	0x96, 0x6f, 0xe1, 0x75, 0xcd, 0xa0, 0x50, 0x0f, 0x4c, 0x37, 0x9c, 0xe4, 0x7d, 0xa1, 0x37, 0xc3,
	0x20, 0xfc, 0x03, 0xde, 0x73, 0x74, 0x41, 0x54, 0xee, 0x06, 0x31, 0xb8, 0x7c, 0xb1, 0xd9, 0xc2,
	0x21, 0x68, 0x08, 0x5f, 0xb5, 0xb6, 0x66, 0x85, 0x9d, 0xbf, 0x69, 0xb6, 0xf8, 0x94, 0x01, 0x86,
	0x0a, 0x24, 0xf8, 0x6d, 0xcf, 0x09, 0x20, 0x9a, 0xc0, 0xb2, 0xa4, 0xe2, 0x55, 0x6b, 0x9b, 0x1a,
	0x94, 0xb4, 0x74, 0xcd, 0xf1, 0x11, 0x99, 0x8e, 0xde, 0x83, 0x64, 0x02, 0xc1, 0x3b, 0x16, 0x18,
	0xd5, 0x65, 0x17, 0x0d, 0x05, 0x88, 0x74, 0x0f, 0x12, 0xf5, 0xa2, 0x92, 0x39, 0x84, 0xf1, 0x72,
	0x08, 0xd9, 0x5b, 0x22, 0xb7, 0x2f, 0x02, 0x15, 0xc8, 0x26, 0x89, 0xcd, 0x39, 0xe3, 0x61, 0x5c,
	0x75, 0x75, 0x57, 0x86, 0x92, 0xbc, 0x86, 0x04, 0x88, 0x5c, 0xef, 0x1f, 0x58, 0xf8, 0x1f, 0xa9,
	0x7b, 0x2c, 0xcd, 0xb9, 0x7a, 0x1f, 0x1d, 0xa1, 0xe9, 0xb5, 0x98, 0xfe, 0x38, 0xd7, 0x1c, 0x4d,
	0x94, 0x3a, 0xd3, 0xa7, 0x9f, 0x14, 0xc3, 0x2e, 0x3b, 0x26, 0x20, 0x1f, 0x0e, 0xe3, 0x18, 0x1e,
	0xc3, 0x9d, 0xb7, 0x22, 0xe2, 0xd5, 0xf3, 0xea, 0x23, 0x37, 0xa6, 0xbe, 0x91, 0x11, 0xd9, 0xf5,
	0xd3, 0x46, 0xf5, 0xbc, 0xf9, 0x5a, 0x0e, 0xe4, 0xa0, 0x93, 0x06, 0xa4, 0xa9, 0xb5, 0xb5, 0x82,
	0x98, 0x5e, 0x04, 0x0a, 0xde, 0x53, 0xe2, 0xa3, 0x07, 0xc9, 0x2e, 0x8e, 0xd3, 0x01, 0x5e, 0x2f,
	0x82, 0x42, 0xf7, 0x32, 0xb1, 0xc2, 0x48, 0xaa, 0x74, 0xa5, 0x1c, 0x54, 0x6d, 0x27, 0x8d, 0x6f,
	0xcc, 0x45, 0x6a, 0x05, 0x91, 0x0c, 0xe6, 0x72, 0x31, 0x35, 0x76, 0x88, 0x2f, 0x20, 0xc6, 0x4c,
	0x6e, 0xbd, 0x26, 0xd8, 0x61, 0x24, 0xb1, 0x4a, 0x29, 0x17, 0xfb, 0x6a, 0x1d, 0x1d, 0xd7, 0xbe,
	0x6c, 0x07, 0xc9, 0x8e, 0xe6, 0xec, 0x64, 0x02, 0x48, 0xc6, 0x8e, 0xb2, 0x50, 0x20, 0xbd, 0x4f,
	0x83, 0x4d, 0x00, 0x3f, 0x86, 0x07, 0xae, 0xa1, 0xea, 0x2c, 0xa0, 0x55, 0xce, 0xcb, 0xef, 0x6d,
	0xcb, 0x2d, 0xff, 0x01, 0x5f, 0x46, 0x5d, 0xf1, 0x50, 0x36, 0xb4, 0x2d, 0x23, 0xa9, 0xda, 0x81,
	0x29, 0x44, 0x17, 0x25, 0xd0, 0x36, 0x16, 0x2d, 0x97, 0x09, 0xa7, 0x5f, 0x73, 0xe0, 0xb5, 0x01,
	0x3b, 0x5a, 0xd9, 0x44, 0x17, 0xf8, 0xc0, 0x92, 0xd0, 0xda, 0xc8, 0xab, 0x36, 0x22, 0xd8, 0x61,
	0x1d, 0x6d, 0xc8, 0x94, 0x7d, 0x1f, 0x27, 0x10, 0xab, 0xc0, 0x4a, 0x59, 0x5a, 0x39, 0x8a, 0xb2,
	0x79, 0xf5, 0x06, 0x95, 0xaa, 0x1d, 0x98, 0x9e, 0xa0, 0xf9, 0x8a, 0xc4, 0x7e, 0xd7, 0xad, 0x28,
	0x0d, 0x38, 0xf3, 0x9c, 0xfe, 0x5f, 0x07, 0x70, 0x4e, 0x0b, 0xb5, 0xfe, 0x53, 0x74, 0x42, 0x7e,
	0xd6, 0x6d, 0x57, 0xf7, 0xdb, 0x20, 0x46, 0x5c, 0xb4, 0xd6, 0xd1, 0x71, 0x4b, 0xbe, 0x35, 0x75,
	0xf5, 0x5b, 0x00, 0xa4, 0xd5, 0x2f, 0x6a, 0x59, 0x15, 0x28, 0x02, 0x15, 0xa4, 0x7c, 0xb7, 0x3a,
	0x91, 0xf2, 0xad, 0x5a, 0xdd, 0xd5, 0x55, 0xf4, 0x8a, 0x16, 0x6e, 0x5f, 0x9d, 0x79, 0xad, 0x72,
	0x04, 0xb6, 0x1f, 0x4b, 0x04, 0x75, 0x1a, 0xa9, 0x6c, 0x10, 0x35, 0x6d, 0x4a, 0x01, 0x3a, 0xa5,
	0x85, 0xec, 0xb5, 0x32, 0x2d, 0x3b, 0x4c, 0x3d, 0x5b, 0x52, 0x88, 0x4e, 0x6b, 0x9f, 0xdb, 0x8d,
	0x63, 0x0e, 0xa0, 0x9a, 0x03, 0xd9, 0x41, 0x67, 0x24, 0x32, 0xd0, 0x17, 0x12, 0xa2, 0x9d, 0x6b,
	0x0e, 0x6a, 0xa9, 0x60, 0x92, 0xbe, 0xa3, 0xea, 0x31, 0x36, 0xb5, 0x52, 0x48, 0xd3, 0x58, 0x6c,
	0xec, 0x0d, 0xa2, 0x44, 0xf3, 0xc5, 0x31, 0xeb, 0xad, 0x57, 0x28, 0x5b, 0x1a, 0x3d, 0xc7, 0xe4,
	0x4a, 0x10, 0x2e, 0xfb, 0x82, 0x99, 0xe5, 0xcd, 0xd9, 0x29, 0x56, 0xef, 0xd2, 0x90, 0xbb, 0xd2,
	0x8e, 0xa9, 0x72, 0x91, 0x0b, 0xca, 0xf5, 0x0a, 0x44, 0x4b, 0xc2, 0x65, 0xda, 0x14, 0x2d, 0x00,
	0x56, 0x7b, 0x85, 0x12, 0xc9, 0xbb, 0x5d, 0x22, 0xb3, 0x2f, 0x28, 0x15, 0xc8, 0xa6, 0x3b, 0x9c,
	0x53, 0xe2, 0x4a, 0x4b, 0x91, 0xc1, 0x1d, 0xe3, 0xd5, 0xa0, 0x24, 0xa1, 0x40, 0x2e, 0xa6, 0x46,
	0x7b, 0xf9, 0x23, 0x9a, 0x55, 0xff, 0xbc, 0x0b, 0x27, 0x54, 0x57, 0xdd, 0xe6, 0x35, 0xfe, 0xca,
	0x2c, 0x75, 0x85, 0x9b, 0xbf, 0x72, 0x88, 0xd1, 0x86, 0x3c, 0x23, 0xd7, 0x00, 0xb5, 0x74, 0xd9,
	0xd9, 0x80, 0x02, 0xe3, 0x32, 0x31, 0x18, 0xd0, 0xd4, 0xe2, 0x55, 0x8d, 0xd1, 0x6d, 0xf5, 0x92,
	0x77, 0x4b, 0x10, 0x82, 0x89, 0x04, 0x24, 0x5f, 0xfb, 0xd8, 0x25, 0x08, 0x2b, 0xb6, 0xb6, 0xc1,
	0x95, 0x04, 0xc2, 0x2a, 0xae, 0x54, 0x89, 0xf3, 0x43, 0x69, 0x85, 0x0b, 0x3d, 0x5f, 0xe1, 0x58,
	0xe1, 0x25, 0xc0, 0xc8, 0xfe, 0xa9, 0xbb, 0xcb, 0xd1, 0x3f, 0x15, 0xc8, 0x8a, 0x53, 0x5b, 0x3d,
	0xf7, 0xb7, 0x99, 0x33, 0x8e, 0x73, 0xf5, 0x70, 0x08, 0xdb, 0xea, 0xe1, 0x75, 0x70, 0x48, 0xcd,
	0xeb, 0x39, 0x07, 0x58, 0x70, 0x91, 0x28, 0x4d, 0x54, 0xe1, 0xc2, 0x0d, 0xa7, 0x88, 0xeb, 0x52,
	0xec, 0x13, 0x90, 0xac, 0xcf, 0x68, 0x89, 0x05, 0x24, 0xf4, 0x76, 0xde, 0xae, 0x83, 0x55, 0x60,
	0x7f, 0x22, 0xf5, 0x9e, 0x3d, 0x74, 0x1a, 0xd9, 0x7b, 0x03, 0xce, 0x64, 0x2a, 0x9f, 0xa0, 0xb3,
	0xf2, 0x19, 0x20, 0x5a, 0x65, 0x87, 0xc5, 0x0d, 0xd7, 0x61, 0xa1, 0x01, 0x9a, 0x88, 0x7f, 0x84,
	0xce, 0x2b, 0x07, 0xbe, 0xf8, 0x80, 0x9f, 0xdc, 0xb7, 0x9c, 0xb2, 0x81, 0x0e, 0x6a, 0x22, 0xdf,
	0x92, 0xb6, 0xad, 0x12, 0xcc, 0xc6, 0xb1, 0x6d, 0x15, 0x98, 0xf9, 0xeb, 0xb6, 0x38, 0x0d, 0x49,
	0x39, 0xa4, 0xf2, 0x04, 0x4d, 0x24, 0xa2, 0x1b, 0x41, 0x73, 0x1c, 0x44, 0x37, 0xe0, 0xc6, 0x68,
	0xaf, 0x90, 0x88, 0xa6, 0xe0, 0xe1, 0x8e, 0x85, 0xb7, 0x46, 0x37, 0xc9, 0x9d, 0x0b, 0xeb, 0xb7,
	0xba, 0x21, 0x51, 0x93, 0x4b, 0x1b, 0x3f, 0x18, 0xe2, 0xa1, 0x8b, 0xad, 0x2a, 0x30, 0xce, 0x37,
	0xfd, 0x9f, 0xa1, 0x73, 0xda, 0x39, 0x59, 0x76, 0x91, 0x1c, 0x82, 0x37, 0x2b, 0x4e, 0x54, 0x05,
	0xd2, 0x9c, 0xfe, 0x44, 0x41, 0x3d, 0xc2, 0x8a, 0x56, 0x05, 0x59, 0x53, 0x6a, 0xeb, 0x48, 0x5c,
	0xae, 0x87, 0x8b, 0xa5, 0x38, 0x16, 0x36, 0xc0, 0x2b, 0x2e, 0xa6, 0x24, 0x01, 0x49, 0x7a, 0xbd,
	0xb2, 0x95, 0xb2, 0x1a, 0x0c, 0x98, 0xf3, 0xee, 0x8c, 0x99, 0x8e, 0x75, 0x66, 0xc0, 0xcd, 0x1b,
	0x31, 0x55, 0x40, 0x76, 0xa2, 0x6f, 0x9e, 0x9c, 0xe9, 0x31, 0x1d, 0x9c, 0x49, 0x07, 0x1b, 0x65,
	0xfd, 0xff, 0x44, 0x12, 0x4e, 0xe0, 0xa6, 0x2b, 0xb5, 0x60, 0x17, 0x4e, 0x34, 0x28, 0x29, 0x2e,
	0x87, 0x82, 0xf8, 0xa9, 0xd4, 0xf7, 0xa8, 0x5f, 0xab, 0xef, 0x3a, 0x98, 0xcb, 0xd5, 0xdf, 0x92,
	0xef, 0x74, 0x1d, 0x17, 0x8e, 0x45, 0xaf, 0xc0, 0x8c, 0x7c, 0xd6, 0xfe, 0xa5, 0x34, 0xa1, 0x2c,
	0x81, 0x86, 0xd4, 0x82, 0x7d, 0x42, 0x0d, 0xb8, 0xf9, 0x5b, 0x55, 0xad, 0xac, 0x50, 0x70, 0x49,
	0xa5, 0x59, 0x6e, 0x0a, 0x91, 0xb5, 0x43, 0x6a, 0xd4, 0xbe, 0x29, 0x2c, 0x90, 0xd6, 0xd7, 0xda,
	0x25, 0xaf, 0x29, 0x82, 0xac, 0xb8, 0x97, 0x16, 0x0e, 0xf1, 0x90, 0x57, 0x3b, 0xbc, 0x4f, 0xce,
	0xd8, 0x6e, 0xd5, 0x4f, 0x23, 0xfc, 0xcc, 0x75, 0xfb, 0xd1, 0xc1, 0xa4, 0x65, 0x52, 0x86, 0xab,
	0xd2, 0x96, 0x09, 0xb5, 0x93, 0x88, 0xf0, 0xe9, 0x2e, 0xd4, 0x3a, 0x98, 0xcb, 0x89, 0xc9, 0x4c,
	0x9d, 0x05, 0x6e, 0x5a, 0xd5, 0x02, 0x22, 0x75, 0xd5, 0xaa, 0xbc, 0x4b, 0xf5, 0xa3, 0x5e, 0xc6,
	0x85, 0x2f, 0xbb, 0x6c, 0x23, 0x41, 0x58, 0x3b, 0xf7, 0x29, 0x3a, 0x69, 0x4d, 0x55, 0xab, 0x2a,
	0x08, 0xad, 0x20, 0x23, 0x2e, 0xf4, 0xb2, 0x58, 0xc0, 0x32, 0x3f, 0xca, 0x99, 0x62, 0x6e, 0x38,
	0x18, 0xac, 0x0e, 0x68, 0xbb, 0xc4, 0x28, 0x9c, 0x8e, 0x07, 0x07, 0xbe, 0xb7, 0x07, 0xc1, 0x86,
	0x9c, 0x9c, 0x4e, 0x85, 0x93, 0xed, 0x45, 0xac, 0x02, 0x24, 0xa4, 0xe3, 0xfa, 0x50, 0xa3, 0x2d,
	0x97, 0xf6, 0xa5, 0x04, 0x90, 0x38, 0x9b, 0xa8, 0x7d, 0x98, 0x0e, 0x93, 0x90, 0x54, 0x52, 0x53,
	0x81, 0xc2, 0x04, 0x82, 0x5d, 0x0c, 0x55, 0x0e, 0x22, 0xcb, 0x20, 0x36, 0xd4, 0xa2, 0xd2, 0x3f,
	0xe0, 0x2d, 0xa1, 0xa3, 0x65, 0x87, 0x82, 0x5d, 0xfc, 0x7e, 0xb4, 0xa5, 0x7a, 0x71, 0xeb, 0xb5,
	0x26, 0x3d, 0xb7, 0xa5, 0x5d, 0x0f, 0x66, 0x3c, 0x25, 0xb1, 0xaf, 0xeb, 0x28, 0xb4, 0x40, 0xda,
	0x58, 0x5a, 0x59, 0xab, 0xf1, 0x97, 0xbc, 0x76, 0x4b, 0x16, 0x48, 0x73, 0x10, 0xbf, 0xa6, 0xa0,
	0x36, 0xd2, 0x13, 0x3b, 0x51, 0x1b, 0x90, 0x0e, 0x9b, 0xe8, 0x59, 0x0b, 0x3b, 0x79, 0x10, 0x46,
	0x05, 0x98, 0x50, 0x6e, 0x8c, 0xe0, 0x3b, 0x1c, 0xd0, 0xa6, 0x46, 0xd2, 0x40, 0xb4, 0x0d, 0x2e,
	0xa5, 0x04, 0x76, 0x6c, 0x70, 0x09, 0xc2, 0x61, 0xde, 0x3f, 0x5f, 0x99, 0x13, 0xd7, 0x21, 0x0f,
	0xda, 0x40, 0x4d, 0xaa, 0x7f, 0x29, 0x21, 0xb7, 0x05, 0xb7, 0x74, 0x20, 0xb7, 0x81, 0xce, 0x5f,
	0xb1, 0x2e, 0x1e, 0x15, 0x48, 0x1b, 0x4f, 0x5e, 0xbf, 0x49, 0x1b, 0xa8, 0x39, 0x1e, 0x4d, 0x4a,
	0x5b, 0xc3, 0x38, 0xe3, 0x1a, 0xd8, 0x2b, 0x55, 0xea, 0x11, 0xae, 0x85, 0xb5, 0x48, 0x69, 0x52,
	0xb5, 0xae, 0x4f, 0x0b, 0x76, 0x31, 0xcd, 0xb5, 0x7a, 0xc1, 0xb9, 0x61, 0xa1, 0xde, 0xec, 0xe7,
	0xc7, 0x2a, 0x43, 0x11, 0x19, 0x3d, 0xdd, 0x0c, 0x45, 0x80, 0x58, 0x17, 0x49, 0xa2, 0xb2, 0x00,
	0x23, 0x6d, 0x94, 0x93, 0x05, 0xe8, 0x90, 0x36, 0x69, 0x58, 0x87, 0xb1, 0xdc, 0xec, 0x8c, 0x06,
	0xdd, 0x37, 0x3b, 0xa3, 0x45, 0x0b, 0x3f, 0x9b, 0x37, 0x13, 0xf5, 0x0a, 0xcc, 0xce, 0xf3, 0x41,
	0x85, 0x93, 0x2c, 0xdc, 0x02, 0x48, 0x85, 0xd0, 0x2e, 0xd4, 0x64, 0xb6, 0x14, 0x00, 0xd7, 0xdd,
	0x4e, 0x87, 0xb3, 0x7a, 0xf8, 0xa9, 0x19, 0x5b, 0xb5, 0x21, 0xd8, 0x67, 0xc3, 0x02, 0x59, 0x7d,
	0xed, 0x21, 0xab, 0x82, 0x26, 0x58, 0xab, 0x31, 0xd1, 0x3a, 0xa4, 0xf5, 0xda, 0xa3, 0xc1, 0xc0,
	0xb5, 0x41, 0x51, 0x38, 0x3e, 0x0a, 0xf2, 0x1d, 0xd1, 0x96, 0x53, 0xe1, 0x28, 0x43, 0x8d, 0xbe,
	0xf8, 0xf4, 0xb5, 0x21, 0x15, 0x45, 0xd0, 0xdd, 0xae, 0x35, 0x24, 0x0d, 0x52, 0xe2, 0xce, 0xae,
	0x38, 0xa1, 0xda, 0xd6, 0xcb, 0x71, 0xf1, 0x7e, 0xd0, 0xc7, 0xeb, 0xdd, 0x34, 0xc3, 0x4e, 0x81,
	0xa9, 0x04, 0xb1, 0x6e, 0x3d, 0x4d, 0x7b, 0x42, 0x79, 0x6e, 0x89, 0xf5, 0x46, 0xf5, 0x91, 0x58,
	0xe2, 0xb6, 0x3c, 0xd5, 0x51, 0xb6, 0x01, 0x81, 0xfc, 0x20, 0xea, 0x6d, 0x03, 0x74, 0xc5, 0x36,
	0x50, 0xe1, 0x6c, 0x47, 0x7a, 0x59, 0xeb, 0x1f, 0xf0, 0x06, 0xe8, 0x92, 0x29, 0x12, 0x68, 0x6d,
	0xbd, 0x5e, 0x2d, 0x40, 0x8c, 0xd9, 0xe2, 0x67, 0x2a, 0x8f, 0x5e, 0x4e, 0xfb, 0xfd, 0x34, 0xa1,
	0xea, 0x66, 0x27, 0x8f, 0x96, 0x80, 0xaa, 0x94, 0xce, 0xeb, 0xaa, 0xda, 0x70, 0x89, 0x6a, 0x94,
	0x2b, 0x8c, 0x7a, 0x1c, 0x62, 0x84, 0x97, 0xb2, 0xe5, 0xc2, 0xed, 0x36, 0xbe, 0x31, 0x00, 0x69,
	0xb1, 0xb0, 0x12, 0xfa, 0xfc, 0xdb, 0x95, 0xb6, 0xdd, 0xb1, 0x9d, 0x34, 0xa8, 0x51, 0x4a, 0x36,
	0x33, 0x41, 0xbb, 0x93, 0x15, 0x9b, 0xa0, 0x26, 0xf2, 0xae, 0x7a, 0x5b, 0x53, 0x11, 0x3b, 0x6f,
	0x6b, 0x2a, 0xd2, 0x91, 0x67, 0xea, 0xe7, 0xe8, 0x82, 0x76, 0xcc, 0xaf, 0x6f, 0x47, 0x83, 0x41,
	0x94, 0x70, 0xff, 0x6b, 0xd5, 0xca, 0x5d, 0x0d, 0x6b, 0x1b, 0xc3, 0x65, 0xed, 0x93, 0xb5, 0x0c,
	0x83, 0xe6, 0x21, 0x1d, 0x0a, 0xc9, 0xf5, 0x8d, 0x8a, 0x16, 0x4c, 0x70, 0x5b, 0x2c, 0xad, 0x13,
	0x52, 0xe2, 0xc7, 0x38, 0x0d, 0x98, 0x51, 0xcb, 0xbe, 0xf2, 0x24, 0x08, 0xb7, 0xc6, 0xe6, 0x0b,
	0x74, 0x45, 0x4b, 0x80, 0x9a, 0x61, 0x9c, 0xe4, 0xdb, 0x69, 0x01, 0x46, 0xbe, 0x88, 0x27, 0x21,
	0x72, 0x0a, 0xc6, 0xf6, 0x0f, 0xac, 0x4c, 0x0c, 0xab, 0xf3, 0xfc, 0x30, 0x90, 0xcf, 0x14, 0xe7,
	0x3c, 0x2b, 0x60, 0x36, 0x6f, 0x41, 0x05, 0x80, 0x7a, 0xd1, 0x97, 0x56, 0x80, 0x40, 0x84, 0x58,
	0x74, 0x50, 0x49, 0x82, 0xb0, 0x79, 0x44, 0x29, 0xdc, 0x91, 0xe5, 0x4c, 0xc7, 0x09, 0xa4, 0xff,
	0x76, 0x73, 0x47, 0x15, 0x6e, 0xc4, 0x0d, 0x78, 0x53, 0x51, 0x8a, 0x0a, 0x83, 0xf5, 0xe2, 0x1d,
	0xa7, 0x52, 0x54, 0x82, 0xa9, 0xa9, 0x57, 0xd4, 0xad, 0x4f, 0xac, 0xca, 0xd9, 0x86, 0x02, 0xe3,
	0xb0, 0x67, 0x1d, 0xd3, 0xae, 0xb8, 0x8b, 0x77, 0x5c, 0x9a, 0x1a, 0x56, 0x3d, 0x82, 0x0e, 0x1d,
	0xe9, 0xc8, 0x54, 0xc8, 0x7c, 0xb9, 0x42, 0xc9, 0xca, 0x28, 0x5c, 0xd3, 0xf0, 0x7e, 0xd6, 0x94,
	0xe4, 0xb8, 0xd7, 0x6c, 0xee, 0xbe, 0x9e, 0x69, 0x80, 0x23, 0x86, 0x21, 0x1b, 0xaa, 0xc0, 0xac,
	0x3c, 0x8c, 0x8b, 0x88, 0x6e, 0xd3, 0x2b, 0x6e, 0xdb, 0xb3, 0x00, 0xb2, 0x12, 0x7b, 0x53, 0xd6,
	0xb8, 0xc1, 0xae, 0x56, 0xed, 0x03, 0x37, 0x2b, 0xf6, 0xbf, 0x6a, 0x21, 0xb0, 0x98, 0x7d, 0x58,
	0xe4, 0x1e, 0xe5, 0xd6, 0xad, 0x4b, 0x9f, 0x8b, 0x77, 0x5c, 0x57, 0x63, 0x13, 0x72, 0x34, 0x7f,
	0x2f, 0xf9, 0xf2, 0xdd, 0x85, 0x0a, 0xfe, 0x2e, 0x83, 0x8d, 0xe6, 0xef, 0x3f, 0x54, 0xd5, 0xac,
	0x7c, 0x46, 0xee, 0x2e, 0xb8, 0xd5, 0xac, 0x25, 0xcc, 0x48, 0x25, 0xd5, 0x49, 0x8b, 0x37, 0xcd,
	0xdd, 0x05, 0xf7, 0x45, 0xaa, 0xec, 0x78, 0xa5, 0xcb, 0xcd, 0xa7, 0x2a, 0x62, 0xb6, 0x56, 0xab,
	0x10, 0x0b, 0x90, 0x11, 0x5d, 0x36, 0xf7, 0xe7, 0xdd, 0x85, 0xca, 0xfd, 0x39, 0x12, 0xa3, 0xe9,
	0x9d, 0x11, 0x46, 0xc1, 0xdd, 0x85, 0x4a, 0xef, 0x0c, 0x80, 0x70, 0x68, 0x68, 0x4f, 0x59, 0xe8,
	0x65, 0xbc, 0x50, 0xb0, 0xc3, 0x54, 0x13, 0xd5, 0xd8, 0x81, 0xf4, 0x87, 0xf1, 0xc6, 0xc5, 0x01,
	0xe4, 0x7a, 0x81, 0x62, 0x0e, 0xcd, 0x78, 0x81, 0x62, 0x05, 0xb1, 0xe2, 0xfb, 0xa1, 0xc4, 0x8b,
	0x34, 0x67, 0x11, 0xc8, 0x7a, 0x55, 0xc7, 0xab, 0xc4, 0x85, 0xfb, 0x7b, 0x92, 0xc7, 0x15, 0xb5,
	0x72, 0x39, 0x3c, 0xae, 0x68, 0xa5, 0xf5, 0x91, 0xba, 0xc5, 0x1a, 0x51, 0x21, 0xe0, 0x8a, 0xd3,
	0x79, 0xde, 0x69, 0x47, 0xa0, 0x81, 0xb2, 0xcf, 0xbb, 0x8d, 0x4a, 0xc6, 0xb3, 0x9b, 0x4a, 0x50,
	0xb7, 0x40, 0xd3, 0x93, 0xf8, 0x98, 0x6e, 0x5b, 0x32, 0x22, 0x0a, 0x57, 0x41, 0x8e, 0x32, 0x44,
	0xfd, 0x58, 0x92, 0xb2, 0x65, 0x85, 0xb7, 0x11, 0x9c, 0xd0, 0x05, 0x35, 0x52, 0x2e, 0xb8, 0x58,
	0xa5, 0x81, 0x24, 0xcd, 0xbc, 0x56, 0x57, 0x5d, 0xe9, 0x5a, 0x2a, 0xf2, 0x56, 0x91, 0xce, 0x7c,
	0xf7, 0x56, 0x51, 0x81, 0xac, 0x38, 0x03, 0xe9, 0xae, 0x67, 0xd3, 0x0f, 0x12, 0xe4, 0xaf, 0xd7,
	0xd6, 0x26, 0x92, 0x56, 0x2a, 0x7d, 0x09, 0xb4, 0xab, 0x8b, 0x7b, 0xf7, 0x98, 0x80, 0x26, 0x62,
	0xb9, 0xef, 0xb6, 0xbb, 0x8b, 0xbb, 0xef, 0x0e, 0x68, 0xb3, 0x89, 0x48, 0x55, 0x44, 0x18, 0xe8,
	0x6f, 0xd6, 0xba, 0xef, 0x10, 0xd4, 0x23, 0x8f, 0xc4, 0x2f, 0xa4, 0x2b, 0x8f, 0x29, 0xc7, 0x90,
	0xc6, 0x5e, 0xad, 0x29, 0xf3, 0x8c, 0x5e, 0xad, 0x9f, 0x6a, 0x0e, 0x0c, 0xa5, 0x44, 0x63, 0x04,
	0xe6, 0x73, 0xc3, 0x39, 0x1e, 0xeb, 0xcd, 0x6b, 0x3b, 0x48, 0x36, 0x10, 0x5d, 0xaf, 0xd8, 0x69,
	0xb2, 0x7d, 0xc8, 0x77, 0xd8, 0x5e, 0x24, 0x18, 0xd8, 0xd3, 0x8a, 0xd6, 0x60, 0x7d, 0x10, 0x47,
	0x05, 0xe4, 0x0b, 0xa9, 0xd0, 0x1a, 0x48, 0x40, 0x92, 0x56, 0xc2, 0x92, 0x99, 0x84, 0xc6, 0x72,
	0x2a, 0x6d, 0x6e, 0x41, 0xb6, 0x43, 0xe7, 0x8a, 0x5e, 0x17, 0x1c, 0x92, 0x90, 0x0e, 0x66, 0xd3,
	0x64, 0x9e, 0x37, 0x8f, 0x49, 0x76, 0x05, 0x09, 0xb2, 0x9d, 0xdc, 0xcd, 0x56, 0x0d, 0x50, 0x69,
	0x92, 0x8d, 0xb4, 0x28, 0x9a, 0xa7, 0x21, 0x28, 0x12, 0x4b, 0x95, 0xf2, 0x15, 0xb7, 0xb6, 0xb1,
	0x54, 0x2a, 0x57, 0xda, 0x63, 0x46, 0x3e, 0x34, 0xaf, 0x82, 0xb4, 0xae, 0x1c, 0xc5, 0x9a, 0x8c,
	0x93, 0xf0, 0x69, 0xaa, 0x47, 0x37, 0x34, 0xaa, 0x47, 0x72, 0x49, 0x78, 0x4d, 0xc0, 0x8d, 0xe1,
	0x55, 0xfa, 0xfe, 0x12, 0xc8, 0x21, 0x50, 0x28, 0xfa, 0x9e, 0xc7, 0xc0, 0xf6, 0x2a, 0x3c, 0xb8,
	0x19, 0x80, 0xe4, 0x04, 0x43, 0x0e, 0x23, 0x56, 0x0a, 0xe6, 0x63, 0xed, 0xcc, 0x0e, 0x8a, 0xfc,
	0x49, 0x7b, 0xb5, 0xea, 0xcc, 0xa6, 0x10, 0x92, 0x89, 0x93, 0x17, 0xb9, 0xac, 0xd1, 0x10, 0x7b,
	0x64, 0x84, 0x35, 0xda, 0x1e, 0x7f, 0x24, 0x46, 0x57, 0x0d, 0xd0, 0xfb, 0x78, 0x2b, 0x18, 0xc6,
	0x4a, 0xba, 0x6a, 0xf5, 0x11, 0x6c, 0x9d, 0x2f, 0xac, 0xb4, 0xdd, 0x52, 0xef, 0x1b, 0x90, 0x72,
	0xe7, 0x23, 0xbc, 0xf7, 0x2c, 0xcd, 0xc2, 0x0a, 0x3d, 0x83, 0x02, 0x26, 0x29, 0xf6, 0x95, 0x72,
	0x25, 0x3c, 0xf1, 0x57, 0x92, 0xee, 0x44, 0x47, 0x20, 0x85, 0xa2, 0x7e, 0xab, 0x56, 0x8b, 0x52,
	0x5c, 0xea, 0x3a, 0x6d, 0x0f, 0x91, 0xef, 0x44, 0x55, 0x46, 0xaa, 0x7e, 0xb3, 0x56, 0xd3, 0x65,
	0xd8, 0xea, 0xf3, 0xfa, 0xf6, 0x57, 0xd2, 0x15, 0x99, 0xcb, 0x0c, 0xaa, 0x2b, 0x97, 0x19, 0x87,
	0x90, 0x96, 0x19, 0x2f, 0xd2, 0xdc, 0xde, 0xc8, 0x9a, 0x94, 0x93, 0x18, 0x55, 0xe8, 0x57, 0x54,
	0x38, 0xc9, 0x01, 0xad, 0x32, 0x8b, 0x12, 0x9c, 0x52, 0xa7, 0x75, 0x8f, 0xcb, 0x27, 0x59, 0xbc,
	0x34, 0x2c, 0xb6, 0x1d, 0x3b, 0x59, 0x05, 0x92, 0xae, 0xcf, 0xac, 0x44, 0x38, 0xc5, 0x3c, 0x95,
	0x36, 0x0c, 0x75, 0xb6, 0xe4, 0x88, 0xfd, 0x0a, 0x87, 0xcc, 0xd1, 0x78, 0xe5, 0x6b, 0x39, 0x84,
	0x1e, 0x93, 0xfc, 0xa9, 0xef, 0x05, 0x99, 0x83, 0x43, 0x5a, 0x20, 0x6d, 0xbe, 0x8d, 0x8a, 0x24,
	0xb2, 0xde, 0xdd, 0xc6, 0xe1, 0x30, 0x2e, 0xfd, 0x26, 0x9d, 0x92, 0x88, 0x0e, 0x39, 0x42, 0x34,
	0xd0, 0xce, 0x27, 0xf1, 0xb5, 0xf0, 0xa1, 0xbf, 0x35, 0xb2, 0xa1, 0x9a, 0xcf, 0x62, 0x7e, 0xa2,
	0xe8, 0x78, 0x93, 0xd0, 0x6c, 0xea, 0xd5, 0x0a, 0x3d, 0xa6, 0xde, 0x96, 0x3d, 0xae, 0xcb, 0x25,
	0xcd, 0x03, 0xda, 0x6c, 0xe3, 0xf5, 0x0a, 0x7f, 0xe9, 0x7a, 0xad, 0x68, 0x9e, 0x20, 0xe4, 0x2c,
	0x21, 0x87, 0x53, 0x85, 0xe1, 0x56, 0x80, 0xd8, 0x3c, 0x41, 0xa0, 0x82, 0x46, 0x7d, 0x53, 0x8c,
	0x91, 0xec, 0x99, 0xf7, 0x48, 0x69, 0xca, 0x80, 0xb3, 0x29, 0x4a, 0xcf, 0x98, 0x82, 0x05, 0xcd,
	0xfd, 0x55, 0xc1, 0x72, 0x15, 0x30, 0x53, 0x78, 0x92, 0xab, 0xfd, 0x03, 0xde, 0xaf, 0xab, 0x2c,
	0x4f, 0xe4, 0x14, 0x53, 0x1b, 0x73, 0xb2, 0x3c, 0x3b, 0xbc, 0xf9, 0xc8, 0xc5, 0x9a, 0xb7, 0x4c,
	0xbb, 0x74, 0x50, 0x09, 0x44, 0x49, 0xaa, 0x76, 0xa3, 0x42, 0x54, 0x91, 0x01, 0xab, 0x4d, 0x07,
	0x26, 0x7c, 0xfe, 0x98, 0xdc, 0x2b, 0x1c, 0xa6, 0x03, 0x17, 0xb8, 0xd9, 0x48, 0x21, 0xdd, 0x26,
	0x89, 0x38, 0x11, 0x9b, 0xd6, 0xf4, 0xd7, 0x9c, 0xb2, 0x87, 0x09, 0x5c, 0xd3, 0x82, 0x1f, 0x4b,
	0xcb, 0xc2, 0xc8, 0xb8, 0x7a, 0x6d, 0xb4, 0x8b, 0xf1, 0xed, 0xdb, 0x77, 0xc7, 0x70, 0x2f, 0x7e,
	0xa6, 0x5a, 0x19, 0xad, 0x49, 0x54, 0x5f, 0xaf, 0xed, 0x6a, 0x42, 0xda, 0xae, 0xe9, 0x6d, 0xe2,
	0xf4, 0xa6, 0xe6, 0x29, 0x4f, 0x6f, 0xd5, 0x73, 0xe0, 0x1e, 0x6b, 0xb8, 0x0b, 0x7f, 0xf7, 0x28,
	0x44, 0x45, 0x80, 0x43, 0x66, 0x15, 0xbd, 0x12, 0x0c, 0x8b, 0x6d, 0xf6, 0xa6, 0x14, 0x72, 0x0f,
	0x29, 0x3a, 0x1f, 0xad, 0x52, 0xe2, 0xa3, 0x50, 0x03, 0x29, 0x5d, 0x31, 0x7d, 0xc5, 0x09, 0xaf,
	0x35, 0x0f, 0x43, 0x31, 0xc4, 0x4f, 0x48, 0x43, 0xec, 0x9d, 0x31, 0x70, 0xf1, 0x2a, 0xe9, 0xe8,
	0x82, 0x72, 0xd2, 0x57, 0x48, 0x80, 0x7d, 0xc0, 0x7b, 0x80, 0x0e, 0x52, 0xd0, 0xa8, 0x97, 0x3c,
	0x19, 0x78, 0xa7, 0x4d, 0x1c, 0x50, 0x21, 0x71, 0x2c, 0x28, 0x25, 0xe3, 0x49, 0xb3, 0xe8, 0x2b,
	0xb8, 0x79, 0x6a, 0x68, 0x56, 0x12, 0x07, 0x9a, 0x95, 0x64, 0x14, 0x9a, 0x45, 0x86, 0x26, 0x4e,
	0x7b, 0x8f, 0x87, 0x85, 0x05, 0x0d, 0xad, 0xb0, 0x26, 0xb0, 0x81, 0xfa, 0x0c, 0xe7, 0xb8, 0x50,
	0xb0, 0x6a, 0xce, 0x09, 0x2e, 0x28, 0x13, 0xe5, 0x12, 0x3a, 0x2a, 0x88, 0xc8, 0x23, 0x8d, 0x9d,
	0xb3, 0x92, 0x98, 0xc7, 0x18, 0x33, 0x50, 0xf4, 0x58, 0xaf, 0xa8, 0xe2, 0x4a, 0x69, 0xd0, 0xd2,
	0x2b, 0x0b, 0x94, 0xb4, 0xb6, 0x01, 0x84, 0xeb, 0xb8, 0x74, 0xba, 0x75, 0x58, 0x43, 0xd4, 0xd7,
	0x79, 0x54, 0x43, 0x16, 0xa8, 0x51, 0x13, 0xb3, 0x82, 0x4e, 0x40, 0xf9, 0x66, 0x94, 0x84, 0x1b,
	0xb8, 0x3f, 0x20, 0xf5, 0x1f, 0x61, 0xed, 0x49, 0xa7, 0x0d, 0xc2, 0x24, 0x0a, 0x46, 0x67, 0xa5,
	0x5e, 0xdc, 0x4b, 0xb5, 0xee, 0xde, 0x70, 0x74, 0x57, 0x07, 0x1c, 0xd5, 0xe3, 0x75, 0xe4, 0x49,
	0xfb, 0x89, 0xe5, 0x3e, 0x56, 0xdd, 0xb3, 0xcc, 0xfa, 0x51, 0x48, 0xbf, 0x40, 0xe7, 0xd8, 0x02,
	0x02, 0x89, 0x93, 0x7f, 0xd6, 0xc6, 0xdd, 0x74, 0x17, 0xeb, 0xd2, 0x58, 0x15, 0xa4, 0x14, 0x84,
	0x01, 0xc0, 0xf4, 0x7a, 0x38, 0xca, 0x4e, 0x30, 0x0c, 0x50, 0x24, 0x86, 0x70, 0xc9, 0xd2, 0x86,
	0x02, 0x31, 0x6a, 0x10, 0x1f, 0x30, 0x36, 0x44, 0x76, 0x01, 0x63, 0x1d, 0x67, 0xad, 0x5b, 0x64,
	0x24, 0xf3, 0xf8, 0x1e, 0x67, 0x68, 0x41, 0xd2, 0xc5, 0xb1, 0x03, 0x53, 0x59, 0x69, 0xae, 0x85,
	0x8f, 0xd0, 0x49, 0x80, 0x09, 0xb3, 0x74, 0x20, 0x2d, 0x1a, 0x4d, 0x86, 0xb2, 0x82, 0x98, 0xc8,
	0x3e, 0x64, 0x04, 0x83, 0x19, 0xa5, 0x7b, 0x12, 0xba, 0x74, 0xc9, 0x3e, 0xe7, 0x25, 0xc4, 0xfc,
	0x91, 0xf2, 0xda, 0x93, 0x65, 0x69, 0x26, 0xd1, 0x88, 0x13, 0x61, 0xf1, 0x8e, 0x65, 0x64, 0x65,
	0x65, 0x05, 0x8d, 0x3e, 0xd4, 0x30, 0xdd, 0x5d, 0xa8, 0xc6, 0x34, 0x67, 0xc7, 0x04, 0x51, 0xcd,
	0x3f, 0x94, 0x58, 0x12, 0x29, 0xbc, 0x7d, 0xfb, 0x1d, 0x07, 0x4b, 0x62, 0xb5, 0x15, 0xfd, 0xfa,
	0x08, 0x1d, 0x91, 0xf8, 0x3b, 0xc1, 0x34, 0xef, 0xe0, 0xfd, 0xaa, 0x9a, 0xdd, 0xba, 0xa4, 0x3e,
	0x63, 0xf3, 0xa8, 0x6c, 0x26, 0xc3, 0xf2, 0x62, 0x05, 0x19, 0x85, 0xfa, 0x29, 0x43, 0x4d, 0xb9,
	0xe3, 0x6a, 0xda, 0x8b, 0x92, 0x8d, 0x74, 0x07, 0x27, 0x16, 0xd4, 0x3a, 0x88, 0x4e, 0xcb, 0xb2,
	0x46, 0xc2, 0x4b, 0xb9, 0x4b, 0x25, 0x5e, 0x1d, 0xa4, 0x12, 0xef, 0x06, 0xc3, 0x4b, 0xef, 0x8e,
	0x95, 0x78, 0x75, 0x10, 0x69, 0xb6, 0x34, 0x2a, 0x2c, 0xfc, 0xf7, 0xef, 0x22, 0x44, 0xc4, 0x88,
	0x6e, 0x97, 0x5c, 0x93, 0xbd, 0x47, 0xe8, 0x54, 0x40, 0xff, 0xed, 0x64, 0xb8, 0x17, 0xe5, 0x05,
	0xce, 0xee, 0x63, 0x33, 0x33, 0x85, 0x1d, 0xc6, 0x7e, 0x7a, 0x32, 0xd0, 0x61, 0xa2, 0x21, 0xbc,
	0x6a, 0x43, 0xa8, 0x43, 0x59, 0x1d, 0x1f, 0x05, 0x30, 0xc8, 0xbf, 0xf4, 0x39, 0xba, 0x78, 0xa2,
	0x7c, 0xd3, 0x8a, 0xd6, 0x02, 0x69, 0xd3, 0xff, 0x9f, 0xe1, 0x1f, 0xf4, 0x70, 0xa1, 0xe1, 0xbd,
	0x66, 0xc3, 0x6b, 0x80, 0x49, 0x8b, 0x8e, 0xdc, 0xc0, 0xd5, 0x4a, 0x7a, 0x8d, 0x28, 0x69, 0x97,
	0x1b, 0x8d, 0xdc, 0xb0, 0x13, 0xd9, 0x00, 0xb4, 0x33, 0x3c, 0x65, 0xb0, 0x2c, 0x69, 0xaa, 0xb6,
	0x3a, 0x6c, 0x20, 0xf3, 0x6a, 0xae, 0x78, 0x76, 0x28, 0x2b, 0x90, 0x2c, 0x7b, 0xc8, 0x25, 0x37,
	0x2e, 0x57, 0xe6, 0x90, 0x4f, 0xca, 0x7e, 0xf5, 0x70, 0x21, 0x92, 0xd8, 0xe7, 0xf6, 0x7e, 0x29,
	0x20, 0x92, 0x9d, 0x57, 0x4f, 0x93, 0x4f, 0xbd, 0xa4, 0x4b, 0x02, 0x91, 0x6d, 0x04, 0xc9, 0xbb,
	0x2f, 0xd8, 0x09, 0xc8, 0xeb, 0x2b, 0xe9, 0xa6, 0x06, 0x0f, 0xb6, 0xf6, 0x6f, 0x44, 0xec, 0x60,
	0x69, 0xf7, 0x68, 0xa1, 0x83, 0x7d, 0x37, 0xe5, 0x2c, 0xe8, 0xd8, 0x34, 0x3c, 0x29, 0x87, 0x08,
	0x71, 0xec, 0xa3, 0xdd, 0xa0, 0xbb, 0x67, 0x1f, 0x62, 0x59, 0x2f, 0x69, 0xf1, 0x78, 0x25, 0xab,
	0x69, 0x0f, 0x63, 0x9c, 0xab, 0x68, 0xf3, 0x11, 0x68, 0xf3, 0x31, 0xd0, 0x4a, 0x94, 0xa4, 0xda,
	0x0e, 0xce, 0x53, 0xac, 0x94, 0x54, 0x40, 0x4c, 0x4a, 0x3e, 0x51, 0x96, 0x0d, 0x03, 0xdb, 0xd8,
	0x58, 0x75, 0x2e, 0x9b, 0x12, 0x44, 0xf2, 0xb3, 0x64, 0x85, 0xf7, 0x83, 0xbd, 0x7c, 0x63, 0x63,
	0x55, 0xed, 0x63, 0x3e, 0x1a, 0xad, 0x02, 0x62, 0xf6, 0xf1, 0x27, 0xe5, 0x5e, 0x86, 0x93, 0x11,
	0x52, 0xfe, 0x94, 0x61, 0x73, 0x6e, 0xd8, 0x51, 0x1a, 0x80, 0x15, 0x47, 0xe9, 0xfb, 0xe8, 0x78,
	0xb9, 0xf2, 0xc4, 0x47, 0xaa, 0x99, 0xc0, 0x02, 0x60, 0x5b, 0x49, 0xf3, 0xea, 0xa2, 0xa3, 0xdc,
	0x75, 0x35, 0x25, 0xf7, 0x3e, 0x55, 0xef, 0xe3, 0x86, 0xb3, 0x49, 0xdc, 0x32, 0xc3, 0xd4, 0x6e,
	0x47, 0x2e, 0x86, 0xa9, 0x5d, 0x8f, 0x2e, 0x1a, 0xeb, 0x4a, 0x05, 0x50, 0x7b, 0x6f, 0x5e, 0xb0,
	0xec, 0xbd, 0x37, 0xe1, 0xcc, 0xde, 0xaf, 0x97, 0xd4, 0x65, 0xe9, 0x36, 0x40, 0x0c, 0xbe, 0xe8,
	0xda, 0x5f, 0x5c, 0x0a, 0x3e, 0x63, 0xee, 0x04, 0x56, 0x45, 0x5f, 0x01, 0x59, 0xbe, 0xa9, 0x66,
	0xf0, 0x16, 0x40, 0xc9, 0xa7, 0x4d, 0x6f, 0x44, 0x3a, 0x4d, 0x3e, 0x47, 0x17, 0x34, 0x8e, 0xae,
	0xb7, 0xf7, 0x6a, 0x05, 0xf7, 0xd7, 0x9b, 0xb4, 0xa8, 0xf5, 0xce, 0x29, 0xeb, 0x96, 0xe6, 0xee,
	0x2d, 0x57, 0xf8, 0x4d, 0xe7, 0x0a, 0xd7, 0x20, 0x2b, 0x96, 0xb8, 0x74, 0xd4, 0x74, 0xa5, 0xaf,
	0xec, 0x47, 0x8d, 0x0c, 0x61, 0x33, 0x27, 0x9e, 0x92, 0x28, 0xba, 0xd1, 0x1f, 0x88, 0x29, 0xf5,
	0x1d, 0x54, 0x97, 0x60, 0x24, 0xfd, 0x23, 0x07, 0x90, 0x6a, 0x55, 0x51, 0x46, 0x15, 0x51, 0xf4,
	0xfc, 0x44, 0x2e, 0x28, 0xdb, 0x02, 0x3c, 0x63, 0x07, 0x36, 0x02, 0xe6, 0x3a, 0xc1, 0xac, 0xde,
	0x11, 0x2e, 0x61, 0xca, 0xf0, 0x8e, 0xa8, 0x00, 0xb4, 0xbd, 0x7b, 0x9a, 0xb3, 0x1e, 0xd3, 0x86,
	0xc7, 0x8b, 0x0b, 0x4a, 0x16, 0xc8, 0x19, 0x48, 0x59, 0x0f, 0x16, 0x89, 0x0b, 0x15, 0x6c, 0xd2,
	0x70, 0x58, 0xa8, 0x86, 0xad, 0x58, 0x72, 0x5f, 0x96, 0xed, 0x58, 0x76, 0x9e, 0xb3, 0x1d, 0x3b,
	0x6c, 0xbd, 0x8d, 0xda, 0x45, 0x97, 0xab, 0x37, 0x1f, 0x69, 0xf5, 0x8d, 0xfa, 0x7b, 0xd5, 0x3a,
	0x41, 0xdb, 0xe8, 0x62, 0xd5, 0x26, 0x34, 0x5c, 0x86, 0x46, 0x00, 0x57, 0x50, 0x70, 0x53, 0xe1,
	0xfb, 0xd2, 0x3e, 0x71, 0x2e, 0x5c, 0x03, 0x6c, 0xe4, 0x7e, 0x4b, 0x4a, 0xe6, 0x43, 0x5d, 0xc0,
	0xb4, 0xe3, 0xe5, 0xa6, 0x6b, 0xc9, 0xe9, 0x90, 0x92, 0xb2, 0x5a, 0x2c, 0x3b, 0x1d, 0x86, 0xbe,
	0x71, 0x50, 0x0e, 0x0f, 0x1d, 0x46, 0xd5, 0xe2, 0x56, 0x82, 0x9a, 0x53, 0x23, 0x31, 0x6a, 0xeb,
	0x17, 0x0e, 0x46, 0x6d, 0x87, 0xb5, 0xd9, 0x10, 0xe6, 0xe5, 0x03, 0x36, 0x8e, 0xa5, 0x60, 0x75,
	0xb9, 0xfd, 0x80, 0x34, 0xe1, 0xcc, 0x44, 0xa1, 0x52, 0x2d, 0x4d, 0x72, 0x2a, 0x7d, 0x2c, 0xd5,
	0x39, 0xd9, 0xab, 0x04, 0x33, 0x0a, 0xf9, 0x53, 0x74, 0x5a, 0x2c, 0xc7, 0x60, 0x17, 0xcb, 0xd8,
	0xaf, 0x58, 0xd7, 0xac, 0x0a, 0x24, 0x39, 0x46, 0xa8, 0x78, 0x25, 0x16, 0xcb, 0x4c, 0x70, 0x12,
	0xe6, 0x6b, 0x6e, 0xc1, 0x54, 0xc6, 0x6d, 0x7b, 0x20, 0xe7, 0x92, 0x67, 0x20, 0x7c, 0xec, 0xcd,
	0x3a, 0x92, 0x0f, 0x84, 0x90, 0xf5, 0xab, 0x85, 0x1f, 0x16, 0x8e, 0x57, 0x62, 0xe9, 0xf4, 0x66,
	0x5f, 0xa5, 0xd8, 0x74, 0x03, 0x8e, 0x94, 0x60, 0x9f, 0xe2, 0x2c, 0xda, 0xda, 0xab, 0x21, 0xc1,
	0x6a, 0x80, 0xf5, 0x24, 0xd8, 0xdd, 0xf2, 0x23, 0xbb, 0x8c, 0x25, 0x01, 0xd8, 0x98, 0x9b, 0xa5,
	0xab, 0x0f, 0xfa, 0x41, 0x14, 0xd7, 0xe9, 0xaa, 0x00, 0x94, 0xd5, 0xa3, 0x0c, 0x0a, 0xec, 0x2b,
	0xbc, 0xde, 0xd6, 0x65, 0xa8, 0xac, 0xea, 0x32, 0x00, 0xd8, 0xa8, 0x2b, 0x76, 0x65, 0x94, 0x44,
	0xc5, 0x46, 0xb0, 0x83, 0xd3, 0x61, 0xb1, 0x8e, 0x69, 0x48, 0x73, 0xeb, 0xae, 0x34, 0xe1, 0x64,
	0x95, 0x10, 0xe7, 0x93, 0x14, 0x40, 0xd5, 0x85, 0x6c, 0x45, 0x49, 0x94, 0x6f, 0x6b, 0x6d, 0x58,
	0x17, 0xa2, 0x0d, 0xb2, 0x52, 0xcd, 0xc2, 0xa5, 0x2e, 0xc6, 0x9b, 0x29, 0x39, 0x6e, 0x56, 0xc9,
	0x67, 0x32, 0x64, 0xa5, 0x84, 0x42, 0x95, 0xc1, 0x2a, 0x66, 0xa7, 0x0e, 0x44, 0x03, 0xac, 0x44,
	0x4c, 0x75, 0xc3, 0x35, 0x10, 0x5b, 0x00, 0x6d, 0x5e, 0x9b, 0x57, 0xa5, 0x6d, 0xbc, 0x9c, 0x26,
	0x45, 0xd0, 0x2d, 0xd6, 0x41, 0x87, 0xa9, 0xbc, 0x93, 0x7a, 0xdb, 0xb1, 0xf1, 0x9d, 0x5f, 0x54,
	0x36, 0x95, 0x8f, 0xdd, 0x54, 0x3e, 0x56, 0x53, 0x3f, 0x54, 0xae, 0x2a, 0x54, 0xc1, 0xf4, 0xe0,
	0x39, 0x61, 0x1b, 0xe6, 0x8b, 0x98, 0x0a, 0x40, 0x87, 0x83, 0xdb, 0x09, 0x9b, 0x18, 0x68, 0x17,
	0xeb, 0x65, 0x08, 0x29, 0x62, 0xab, 0xac, 0xed, 0xd9, 0x28, 0xcf, 0x07, 0xfa, 0xb0, 0xa5, 0x44,
	0x79, 0xc5, 0x2e, 0x36, 0x29, 0x40, 0x0e, 0xac, 0xb2, 0x3a, 0x20, 0xd8, 0xc5, 0x25, 0xce, 0xcb,
	0xae, 0x33, 0xa7, 0xc4, 0x58, 0xa5, 0xeb, 0x64, 0xb1, 0x6e, 0x4a, 0x7c, 0x57, 0xed, 0x9b, 0x5d,
	0x85, 0xb2, 0xc6, 0x76, 0x54, 0x45, 0x81, 0x52, 0x7d, 0x76, 0xc5, 0x2d, 0x2f, 0x94, 0x0a, 0x34,
	0x03, 0xe1, 0xb3, 0x52, 0x44, 0xa4, 0xe7, 0x51, 0x7a, 0x3f, 0x7d, 0x96, 0x10, 0x52, 0x89, 0x1b,
	0xe3, 0x6b, 0xee, 0xc3, 0xcb, 0x00, 0x96, 0xdc, 0x27, 0xa4, 0xf3, 0xcb, 0x00, 0xa3, 0xae, 0xd5,
	0x32, 0x19, 0xad, 0x2d, 0xbf, 0xee, 0x22, 0xba, 0xb5, 0x69, 0x8b, 0x26, 0xef, 0xb8, 0x3a, 0xfb,
	0x1b, 0x90, 0xcc, 0xf7, 0xa2, 0x7b, 0x79, 0x00, 0x80, 0x3d, 0xc8, 0xcb, 0x07, 0x92, 0xe6, 0x05,
	0x42, 0x13, 0x56, 0x20, 0x93, 0x00, 0x24, 0x83, 0xcf, 0x06, 0xcb, 0x0e, 0xfc, 0x81, 0xdc, 0xad,
	0xb0, 0x1a, 0x93, 0x04, 0x60, 0xc1, 0xb4, 0x8c, 0x8e, 0xc9, 0x54, 0xa1, 0x78, 0xce, 0xbb, 0x88,
	0x46, 0xb1, 0x18, 0x54, 0x92, 0xee, 0xdb, 0x6c, 0xfd, 0x51, 0x3c, 0x97, 0x2a, 0x56, 0xa8, 0x03,
	0xd5, 0x3d, 0x74, 0x54, 0x16, 0xef, 0x01, 0xcd, 0x39, 0x97, 0xf0, 0xef, 0x18, 0xd3, 0xa3, 0x72,
	0x4c, 0x1c, 0x2a, 0xb7, 0x8f, 0x49, 0x54, 0x4b, 0xfa, 0x3d, 0x71, 0x22, 0x42, 0x85, 0xaa, 0x29,
	0x62, 0xbc, 0x10, 0x27, 0x85, 0x58, 0x60, 0xd7, 0x2b, 0x78, 0xa6, 0x04, 0x67, 0x8d, 0x16, 0xa1,
	0x71, 0xf3, 0x91, 0x68, 0x4d, 0x38, 0xc9, 0xb1, 0x93, 0x03, 0x69, 0x10, 0xb0, 0x4f, 0xe4, 0x96,
	0xc0, 0x3d, 0x5e, 0xda, 0xf4, 0xae, 0x96, 0x34, 0xb8, 0x6a, 0xc5, 0x79, 0x56, 0x6e, 0xc5, 0x1e,
	0x2e, 0xe8, 0x7b, 0x14, 0xa6, 0xca, 0xad, 0xde, 0x8a, 0x2e, 0x68, 0x49, 0xa6, 0xb2, 0xd6, 0xab,
	0x6d, 0xe6, 0x63, 0xb5, 0x99, 0xef, 0xbb, 0xcd, 0x85, 0xdf, 0xf0, 0x68, 0x86, 0x53, 0x7a, 0x20,
	0xe6, 0xe4, 0x48, 0xea, 0xb2, 0xff, 0x3b, 0xc1, 0x60, 0x10, 0xef, 0x3d, 0xcc, 0x22, 0x9c, 0x68,
	0x66, 0x6f, 0x1b, 0x84, 0x23, 0x88, 0xf8, 0x2a, 0x3a, 0x5e, 0x42, 0x0f, 0xc3, 0xa8, 0x58, 0x22,
	0x9f, 0x68, 0x89, 0x99, 0x4c, 0x00, 0x07, 0xb6, 0xc7, 0xe8, 0xa4, 0x00, 0xa6, 0xb9, 0x84, 0xe3,
	0x3d, 0x33, 0x69, 0x80, 0x15, 0xc4, 0x9e, 0xd6, 0xe4, 0x23, 0xa9, 0x7b, 0xf4, 0x41, 0x04, 0x84,
	0x73, 0xb5, 0x77, 0xaf, 0x04, 0xb0, 0x23, 0x93, 0x7b, 0xc7, 0x5e, 0x57, 0xa4, 0xc3, 0xac, 0x8b,
	0x1d, 0xbd, 0x93, 0x41, 0xec, 0x08, 0x3f, 0x93, 0x26, 0x83, 0xb9, 0xa3, 0x0f, 0x73, 0x23, 0x13,
	0xaa, 0x05, 0xc2, 0x74, 0x52, 0xe6, 0x12, 0x0f, 0x00, 0xb0, 0x24, 0xab, 0xd2, 0x87, 0x62, 0xfe,
	0x9d, 0xa8, 0x39, 0x84, 0xe4, 0x16, 0x25, 0xaa, 0x79, 0x1d, 0x4b, 0x6b, 0xcb, 0x8b, 0x59, 0xe8,
	0x3f, 0x8e, 0xfa, 0x8a, 0x15, 0xb5, 0x0a, 0x24, 0xdd, 0xf5, 0x04, 0xc4, 0x4a, 0x9f, 0xbd, 0x2c,
	0x2b, 0x5b, 0x79, 0x8a, 0x4e, 0x89, 0x6a, 0x16, 0x64, 0x97, 0xfe, 0xd4, 0x72, 0x37, 0x59, 0x61,
	0xa4, 0x8b, 0x98, 0x00, 0x60, 0x89, 0xa8, 0x1e, 0x4b, 0xbd, 0x57, 0xbe, 0x71, 0xf5, 0x5e, 0x05,
	0x32, 0x79, 0xe2, 0x77, 0xd0, 0x11, 0x01, 0xbb, 0x19, 0xa7, 0xdd, 0x1d, 0xd5, 0xcc, 0xaf, 0xd6,
	0x59, 0x9d, 0xa0, 0x04, 0xc8, 0x30, 0xa1, 0x08, 0xce, 0x59, 0x11, 0xb0, 0x5a, 0xab, 0xfe, 0x5e,
	0x9e, 0xc6, 0x7b, 0x31, 0xb5, 0x66, 0x5c, 0x74, 0xcd, 0x33, 0x03, 0x90, 0xb8, 0xa3, 0xa8, 0x65,
	0x55, 0x70, 0x20, 0x95, 0x48, 0xd9, 0xb3, 0xc0, 0x20, 0x73, 0x21, 0x2d, 0x01, 0x5c, 0xf1, 0x02,
	0xdf, 0x97, 0xd0, 0xb1, 0xf5, 0xe0, 0x46, 0x57, 0x02, 0xd8, 0x4c, 0xb2, 0xaf, 0x68, 0xdb, 0x4b,
	0xf5, 0xf6, 0xd0, 0x2a, 0xa5, 0x43, 0x52, 0xd4, 0xc0, 0x8b, 0x27, 0x9a, 0xe8, 0x45, 0x94, 0x65,
	0x38, 0x4f, 0xe3, 0xdd, 0xd2, 0x4e, 0x79, 0xd5, 0x8a, 0x53, 0x83, 0x92, 0x98, 0xaf, 0x00, 0x69,
	0x53, 0x90, 0x90, 0xbd, 0x15, 0xd2, 0x36, 0xe1, 0x46, 0x3a, 0x20, 0x15, 0x15, 0x9b, 0x90, 0x43,
	0xd8, 0x36, 0x21, 0xaf, 0x63, 0x09, 0xbc, 0xa4, 0x5e, 0x89, 0xef, 0xda, 0x41, 0x61, 0xc4, 0x11,
	0xae, 0x00, 0xb4, 0x26, 0x6b, 0x52, 0xe1, 0x21, 0x80, 0x9e, 0x63, 0xa2, 0x4a, 0x00, 0xdb, 0xaa,
	0x3c, 0x65, 0x61, 0x2e, 0x2b, 0xf7, 0x73, 0xc7, 0x06, 0x56, 0x60, 0x5c, 0xcb, 0xe8, 0x53, 0x34,
	0xef, 0xd8, 0x98, 0xc6, 0xfb, 0x3a, 0x37, 0x9c, 0xf5, 0xa2, 0x66, 0xf2, 0x85, 0x7b, 0x54, 0x05,
	0x53, 0xcd, 0x17, 0x38, 0x90, 0x2d, 0xdd, 0xd8, 0x31, 0x85, 0x6f, 0x03, 0x19, 0xcf, 0x3b, 0xd9,
	0x3a, 0x10, 0xd1, 0xf0, 0xfd, 0x86, 0x62, 0xd6, 0x75, 0xad, 0x93, 0xd4, 0x1d, 0x5d, 0x2c, 0x28,
	0x7b, 0x27, 0x55, 0x20, 0x9b, 0x47, 0x97, 0x74, 0x76, 0x87, 0xbc, 0x25, 0xd7, 0xd9, 0x2d, 0x00,
	0x9c, 0xe9, 0x63, 0x05, 0x28, 0x68, 0xdd, 0xaa, 0x39, 0xb6, 0x02, 0xe3, 0x4c, 0xf9, 0x28, 0xd1,
	0x08, 0xde, 0x61, 0x56, 0x31, 0x36, 0x06, 0x60, 0xc3, 0xb5, 0xf0, 0x2f, 0x4f, 0x80, 0x7f, 0x0f,
	0x2b, 0xf0, 0x3e, 0x44, 0x47, 0xe9, 0x25, 0x43, 0x1c, 0xaa, 0x9a, 0xcc, 0xae, 0xd7, 0x4a, 0x47,
	0x0a, 0xaf, 0xe2, 0x79, 0x83, 0x3e, 0x43, 0x27, 0x25, 0x68, 0xe9, 0xc9, 0xd3, 0x65, 0x07, 0x42,
	0xe9, 0x91, 0xd3, 0x59, 0x03, 0xab, 0xf2, 0xbe, 0x29, 0x41, 0xe7, 0xa4, 0xef, 0x58, 0xb2, 0x38,
	0xa9, 0x85, 0x9b, 0x8e, 0x16, 0x0c, 0x48, 0xe9, 0xd4, 0xe5, 0x60, 0x06, 0x0c, 0xc8, 0xa7, 0x17,
	0xaa, 0xb0, 0xbc, 0xbb, 0xa8, 0x25, 0xc1, 0xa9, 0x84, 0xad, 0xd7, 0xe6, 0xc2, 0xbf, 0xd3, 0x80,
	0x99, 0x79, 0x98, 0xc6, 0x21, 0x59, 0xc8, 0x6d, 0x74, 0x7a, 0x8b, 0xfe, 0x4b, 0xf3, 0x5d, 0x63,
	0x9c, 0xf1, 0x2a, 0x65, 0x8d, 0x3b, 0x80, 0x5c, 0x49, 0x02, 0x38, 0x38, 0xdd, 0xb6, 0x14, 0x58,
	0xe5, 0xc2, 0x36, 0x08, 0x1b, 0xb6, 0x7b, 0xf3, 0x3f, 0xff, 0xa3, 0x0b, 0x8d, 0x3f, 0xf8, 0xa3,
	0x0b, 0x8d, 0xff, 0xe9, 0x8f, 0x2e, 0x34, 0x7e, 0xf6, 0xc7, 0x17, 0x0e, 0xfc, 0xc1, 0x1f, 0x5f,
	0x38, 0xf0, 0x3f, 0xfc, 0xf1, 0x85, 0x03, 0x1f, 0x34, 0x37, 0xa7, 0x00, 0xf8, 0xce, 0xff, 0x1f,
	0x00, 0x00, 0xff, 0xff, 0x34, 0x9c, 0xdd, 0xd2, 0x6d, 0x6b, 0x01, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RPCStatsClient is the client API for RPCStats service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCStatsClient interface {
	// stats.getBroadcastStats#ab42441a flags:# dark:flags.0?true channel:InputChannel = stats.BroadcastStats;
	StatsGetBroadcastStats(ctx context.Context, in *TLStatsGetBroadcastStats, opts ...grpc.CallOption) (*Stats_BroadcastStats, error)
	// stats.loadAsyncGraph#621d5fa0 flags:# token:string x:flags.0?long = StatsGraph;
	StatsLoadAsyncGraph(ctx context.Context, in *TLStatsLoadAsyncGraph, opts ...grpc.CallOption) (*StatsGraph, error)
	// stats.getMegagroupStats#dcdf8607 flags:# dark:flags.0?true channel:InputChannel = stats.MegagroupStats;
	StatsGetMegagroupStats(ctx context.Context, in *TLStatsGetMegagroupStats, opts ...grpc.CallOption) (*Stats_MegagroupStats, error)
}

type rPCStatsClient struct {
	cc *grpc.ClientConn
}

func NewRPCStatsClient(cc *grpc.ClientConn) RPCStatsClient {
	return &rPCStatsClient{cc}
}

func (c *rPCStatsClient) StatsGetBroadcastStats(ctx context.Context, in *TLStatsGetBroadcastStats, opts ...grpc.CallOption) (*Stats_BroadcastStats, error) {
	out := new(Stats_BroadcastStats)
	err := c.cc.Invoke(ctx, "/mtproto.RPCStats/stats_getBroadcastStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStatsClient) StatsLoadAsyncGraph(ctx context.Context, in *TLStatsLoadAsyncGraph, opts ...grpc.CallOption) (*StatsGraph, error) {
	out := new(StatsGraph)
	err := c.cc.Invoke(ctx, "/mtproto.RPCStats/stats_loadAsyncGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStatsClient) StatsGetMegagroupStats(ctx context.Context, in *TLStatsGetMegagroupStats, opts ...grpc.CallOption) (*Stats_MegagroupStats, error) {
	out := new(Stats_MegagroupStats)
	err := c.cc.Invoke(ctx, "/mtproto.RPCStats/stats_getMegagroupStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCStatsServer is the server API for RPCStats service.
type RPCStatsServer interface {
	// stats.getBroadcastStats#ab42441a flags:# dark:flags.0?true channel:InputChannel = stats.BroadcastStats;
	StatsGetBroadcastStats(context.Context, *TLStatsGetBroadcastStats) (*Stats_BroadcastStats, error)
	// stats.loadAsyncGraph#621d5fa0 flags:# token:string x:flags.0?long = StatsGraph;
	StatsLoadAsyncGraph(context.Context, *TLStatsLoadAsyncGraph) (*StatsGraph, error)
	// stats.getMegagroupStats#dcdf8607 flags:# dark:flags.0?true channel:InputChannel = stats.MegagroupStats;
	StatsGetMegagroupStats(context.Context, *TLStatsGetMegagroupStats) (*Stats_MegagroupStats, error)
}

// UnimplementedRPCStatsServer can be embedded to have forward compatible implementations.
type UnimplementedRPCStatsServer struct {
}

func (*UnimplementedRPCStatsServer) StatsGetBroadcastStats(ctx context.Context, req *TLStatsGetBroadcastStats) (*Stats_BroadcastStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsGetBroadcastStats not implemented")
}
func (*UnimplementedRPCStatsServer) StatsLoadAsyncGraph(ctx context.Context, req *TLStatsLoadAsyncGraph) (*StatsGraph, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsLoadAsyncGraph not implemented")
}
func (*UnimplementedRPCStatsServer) StatsGetMegagroupStats(ctx context.Context, req *TLStatsGetMegagroupStats) (*Stats_MegagroupStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsGetMegagroupStats not implemented")
}

func RegisterRPCStatsServer(s *grpc.Server, srv RPCStatsServer) {
	s.RegisterService(&_RPCStats_serviceDesc, srv)
}

func _RPCStats_StatsGetBroadcastStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatsGetBroadcastStats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatsServer).StatsGetBroadcastStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCStats/StatsGetBroadcastStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatsServer).StatsGetBroadcastStats(ctx, req.(*TLStatsGetBroadcastStats))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStats_StatsLoadAsyncGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatsLoadAsyncGraph)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatsServer).StatsLoadAsyncGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCStats/StatsLoadAsyncGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatsServer).StatsLoadAsyncGraph(ctx, req.(*TLStatsLoadAsyncGraph))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStats_StatsGetMegagroupStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatsGetMegagroupStats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatsServer).StatsGetMegagroupStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCStats/StatsGetMegagroupStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatsServer).StatsGetMegagroupStats(ctx, req.(*TLStatsGetMegagroupStats))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCStats_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCStats",
	HandlerType: (*RPCStatsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "stats_getBroadcastStats",
			Handler:    _RPCStats_StatsGetBroadcastStats_Handler,
		},
		{
			MethodName: "stats_loadAsyncGraph",
			Handler:    _RPCStats_StatsLoadAsyncGraph_Handler,
		},
		{
			MethodName: "stats_getMegagroupStats",
			Handler:    _RPCStats_StatsGetMegagroupStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

// RPCPhotosClient is the client API for RPCPhotos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCPhotosClient interface {
	// photos.updateProfilePhoto#f0bb5152 id:InputPhoto = UserProfilePhoto;
	PhotosUpdateProfilePhoto(ctx context.Context, in *TLPhotosUpdateProfilePhoto, opts ...grpc.CallOption) (*UserProfilePhoto, error)
	// photos.uploadProfilePhoto#4f32c098 file:InputFile = photos.Photo;
	PhotosUploadProfilePhoto(ctx context.Context, in *TLPhotosUploadProfilePhoto, opts ...grpc.CallOption) (*Photos_Photo, error)
	// photos.deletePhotos#87cf7f2f id:Vector<InputPhoto> = Vector<long>;
	PhotosDeletePhotos(ctx context.Context, in *TLPhotosDeletePhotos, opts ...grpc.CallOption) (*VectorLong, error)
	// photos.getUserPhotos#91cd32a8 user_id:InputUser offset:int max_id:long limit:int = photos.Photos;
	PhotosGetUserPhotos(ctx context.Context, in *TLPhotosGetUserPhotos, opts ...grpc.CallOption) (*Photos_Photos, error)
	// photos.updateProfilePhoto#eef579a0 id:InputPhoto crop:InputPhotoCrop = UserProfilePhoto;
	PhotosUpdateProfilePhoto73(ctx context.Context, in *TLPhotosUpdateProfilePhoto73, opts ...grpc.CallOption) (*UserProfilePhoto, error)
	// photos.uploadProfilePhoto#d50f9c88 file:InputFile caption:string geo_point:InputGeoPoint crop:InputPhotoCrop = photos.Photo;
	PhotosUploadProfilePhoto73(ctx context.Context, in *TLPhotosUploadProfilePhoto73, opts ...grpc.CallOption) (*Photos_Photo, error)
	// photos.uploadProfilePhoto#89f30f69 flags:# file:flags.0?InputFile video:flags.1?InputFile video_start_ts:flags.2?double = photos.Photo;
	PhotosUploadProfilePhoto117(ctx context.Context, in *TLPhotosUploadProfilePhoto117, opts ...grpc.CallOption) (*Photos_Photo, error)
	// photos.updateProfilePhoto#72d4742c id:InputPhoto = photos.Photo;
	PhotosUpdateProfilePhoto117(ctx context.Context, in *TLPhotosUpdateProfilePhoto117, opts ...grpc.CallOption) (*Photos_Photo, error)
}

type rPCPhotosClient struct {
	cc *grpc.ClientConn
}

func NewRPCPhotosClient(cc *grpc.ClientConn) RPCPhotosClient {
	return &rPCPhotosClient{cc}
}

func (c *rPCPhotosClient) PhotosUpdateProfilePhoto(ctx context.Context, in *TLPhotosUpdateProfilePhoto, opts ...grpc.CallOption) (*UserProfilePhoto, error) {
	out := new(UserProfilePhoto)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhotos/photos_updateProfilePhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhotosClient) PhotosUploadProfilePhoto(ctx context.Context, in *TLPhotosUploadProfilePhoto, opts ...grpc.CallOption) (*Photos_Photo, error) {
	out := new(Photos_Photo)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhotos/photos_uploadProfilePhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhotosClient) PhotosDeletePhotos(ctx context.Context, in *TLPhotosDeletePhotos, opts ...grpc.CallOption) (*VectorLong, error) {
	out := new(VectorLong)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhotos/photos_deletePhotos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhotosClient) PhotosGetUserPhotos(ctx context.Context, in *TLPhotosGetUserPhotos, opts ...grpc.CallOption) (*Photos_Photos, error) {
	out := new(Photos_Photos)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhotos/photos_getUserPhotos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhotosClient) PhotosUpdateProfilePhoto73(ctx context.Context, in *TLPhotosUpdateProfilePhoto73, opts ...grpc.CallOption) (*UserProfilePhoto, error) {
	out := new(UserProfilePhoto)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhotos/photos_updateProfilePhoto73", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhotosClient) PhotosUploadProfilePhoto73(ctx context.Context, in *TLPhotosUploadProfilePhoto73, opts ...grpc.CallOption) (*Photos_Photo, error) {
	out := new(Photos_Photo)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhotos/photos_uploadProfilePhoto73", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhotosClient) PhotosUploadProfilePhoto117(ctx context.Context, in *TLPhotosUploadProfilePhoto117, opts ...grpc.CallOption) (*Photos_Photo, error) {
	out := new(Photos_Photo)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhotos/photos_uploadProfilePhoto117", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhotosClient) PhotosUpdateProfilePhoto117(ctx context.Context, in *TLPhotosUpdateProfilePhoto117, opts ...grpc.CallOption) (*Photos_Photo, error) {
	out := new(Photos_Photo)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhotos/photos_updateProfilePhoto117", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCPhotosServer is the server API for RPCPhotos service.
type RPCPhotosServer interface {
	// photos.updateProfilePhoto#f0bb5152 id:InputPhoto = UserProfilePhoto;
	PhotosUpdateProfilePhoto(context.Context, *TLPhotosUpdateProfilePhoto) (*UserProfilePhoto, error)
	// photos.uploadProfilePhoto#4f32c098 file:InputFile = photos.Photo;
	PhotosUploadProfilePhoto(context.Context, *TLPhotosUploadProfilePhoto) (*Photos_Photo, error)
	// photos.deletePhotos#87cf7f2f id:Vector<InputPhoto> = Vector<long>;
	PhotosDeletePhotos(context.Context, *TLPhotosDeletePhotos) (*VectorLong, error)
	// photos.getUserPhotos#91cd32a8 user_id:InputUser offset:int max_id:long limit:int = photos.Photos;
	PhotosGetUserPhotos(context.Context, *TLPhotosGetUserPhotos) (*Photos_Photos, error)
	// photos.updateProfilePhoto#eef579a0 id:InputPhoto crop:InputPhotoCrop = UserProfilePhoto;
	PhotosUpdateProfilePhoto73(context.Context, *TLPhotosUpdateProfilePhoto73) (*UserProfilePhoto, error)
	// photos.uploadProfilePhoto#d50f9c88 file:InputFile caption:string geo_point:InputGeoPoint crop:InputPhotoCrop = photos.Photo;
	PhotosUploadProfilePhoto73(context.Context, *TLPhotosUploadProfilePhoto73) (*Photos_Photo, error)
	// photos.uploadProfilePhoto#89f30f69 flags:# file:flags.0?InputFile video:flags.1?InputFile video_start_ts:flags.2?double = photos.Photo;
	PhotosUploadProfilePhoto117(context.Context, *TLPhotosUploadProfilePhoto117) (*Photos_Photo, error)
	// photos.updateProfilePhoto#72d4742c id:InputPhoto = photos.Photo;
	PhotosUpdateProfilePhoto117(context.Context, *TLPhotosUpdateProfilePhoto117) (*Photos_Photo, error)
}

// UnimplementedRPCPhotosServer can be embedded to have forward compatible implementations.
type UnimplementedRPCPhotosServer struct {
}

func (*UnimplementedRPCPhotosServer) PhotosUpdateProfilePhoto(ctx context.Context, req *TLPhotosUpdateProfilePhoto) (*UserProfilePhoto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhotosUpdateProfilePhoto not implemented")
}
func (*UnimplementedRPCPhotosServer) PhotosUploadProfilePhoto(ctx context.Context, req *TLPhotosUploadProfilePhoto) (*Photos_Photo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhotosUploadProfilePhoto not implemented")
}
func (*UnimplementedRPCPhotosServer) PhotosDeletePhotos(ctx context.Context, req *TLPhotosDeletePhotos) (*VectorLong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhotosDeletePhotos not implemented")
}
func (*UnimplementedRPCPhotosServer) PhotosGetUserPhotos(ctx context.Context, req *TLPhotosGetUserPhotos) (*Photos_Photos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhotosGetUserPhotos not implemented")
}
func (*UnimplementedRPCPhotosServer) PhotosUpdateProfilePhoto73(ctx context.Context, req *TLPhotosUpdateProfilePhoto73) (*UserProfilePhoto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhotosUpdateProfilePhoto73 not implemented")
}
func (*UnimplementedRPCPhotosServer) PhotosUploadProfilePhoto73(ctx context.Context, req *TLPhotosUploadProfilePhoto73) (*Photos_Photo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhotosUploadProfilePhoto73 not implemented")
}
func (*UnimplementedRPCPhotosServer) PhotosUploadProfilePhoto117(ctx context.Context, req *TLPhotosUploadProfilePhoto117) (*Photos_Photo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhotosUploadProfilePhoto117 not implemented")
}
func (*UnimplementedRPCPhotosServer) PhotosUpdateProfilePhoto117(ctx context.Context, req *TLPhotosUpdateProfilePhoto117) (*Photos_Photo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhotosUpdateProfilePhoto117 not implemented")
}

func RegisterRPCPhotosServer(s *grpc.Server, srv RPCPhotosServer) {
	s.RegisterService(&_RPCPhotos_serviceDesc, srv)
}

func _RPCPhotos_PhotosUpdateProfilePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhotosUpdateProfilePhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhotosServer).PhotosUpdateProfilePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhotos/PhotosUpdateProfilePhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhotosServer).PhotosUpdateProfilePhoto(ctx, req.(*TLPhotosUpdateProfilePhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhotos_PhotosUploadProfilePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhotosUploadProfilePhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhotosServer).PhotosUploadProfilePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhotos/PhotosUploadProfilePhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhotosServer).PhotosUploadProfilePhoto(ctx, req.(*TLPhotosUploadProfilePhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhotos_PhotosDeletePhotos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhotosDeletePhotos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhotosServer).PhotosDeletePhotos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhotos/PhotosDeletePhotos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhotosServer).PhotosDeletePhotos(ctx, req.(*TLPhotosDeletePhotos))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhotos_PhotosGetUserPhotos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhotosGetUserPhotos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhotosServer).PhotosGetUserPhotos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhotos/PhotosGetUserPhotos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhotosServer).PhotosGetUserPhotos(ctx, req.(*TLPhotosGetUserPhotos))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhotos_PhotosUpdateProfilePhoto73_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhotosUpdateProfilePhoto73)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhotosServer).PhotosUpdateProfilePhoto73(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhotos/PhotosUpdateProfilePhoto73",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhotosServer).PhotosUpdateProfilePhoto73(ctx, req.(*TLPhotosUpdateProfilePhoto73))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhotos_PhotosUploadProfilePhoto73_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhotosUploadProfilePhoto73)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhotosServer).PhotosUploadProfilePhoto73(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhotos/PhotosUploadProfilePhoto73",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhotosServer).PhotosUploadProfilePhoto73(ctx, req.(*TLPhotosUploadProfilePhoto73))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhotos_PhotosUploadProfilePhoto117_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhotosUploadProfilePhoto117)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhotosServer).PhotosUploadProfilePhoto117(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhotos/PhotosUploadProfilePhoto117",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhotosServer).PhotosUploadProfilePhoto117(ctx, req.(*TLPhotosUploadProfilePhoto117))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhotos_PhotosUpdateProfilePhoto117_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhotosUpdateProfilePhoto117)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhotosServer).PhotosUpdateProfilePhoto117(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhotos/PhotosUpdateProfilePhoto117",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhotosServer).PhotosUpdateProfilePhoto117(ctx, req.(*TLPhotosUpdateProfilePhoto117))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCPhotos_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCPhotos",
	HandlerType: (*RPCPhotosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "photos_updateProfilePhoto",
			Handler:    _RPCPhotos_PhotosUpdateProfilePhoto_Handler,
		},
		{
			MethodName: "photos_uploadProfilePhoto",
			Handler:    _RPCPhotos_PhotosUploadProfilePhoto_Handler,
		},
		{
			MethodName: "photos_deletePhotos",
			Handler:    _RPCPhotos_PhotosDeletePhotos_Handler,
		},
		{
			MethodName: "photos_getUserPhotos",
			Handler:    _RPCPhotos_PhotosGetUserPhotos_Handler,
		},
		{
			MethodName: "photos_updateProfilePhoto73",
			Handler:    _RPCPhotos_PhotosUpdateProfilePhoto73_Handler,
		},
		{
			MethodName: "photos_uploadProfilePhoto73",
			Handler:    _RPCPhotos_PhotosUploadProfilePhoto73_Handler,
		},
		{
			MethodName: "photos_uploadProfilePhoto117",
			Handler:    _RPCPhotos_PhotosUploadProfilePhoto117_Handler,
		},
		{
			MethodName: "photos_updateProfilePhoto117",
			Handler:    _RPCPhotos_PhotosUpdateProfilePhoto117_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

// RPCStickersClient is the client API for RPCStickers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCStickersClient interface {
	// stickers.createStickerSet#9bd86e6a flags:# masks:flags.0?true user_id:InputUser title:string short_name:string stickers:Vector<InputStickerSetItem> = messages.StickerSet;
	StickersCreateStickerSet(ctx context.Context, in *TLStickersCreateStickerSet, opts ...grpc.CallOption) (*Messages_StickerSet, error)
	// stickers.removeStickerFromSet#f7760f51 sticker:InputDocument = messages.StickerSet;
	StickersRemoveStickerFromSet(ctx context.Context, in *TLStickersRemoveStickerFromSet, opts ...grpc.CallOption) (*Messages_StickerSet, error)
	// stickers.changeStickerPosition#ffb6d4ca sticker:InputDocument position:int = messages.StickerSet;
	StickersChangeStickerPosition(ctx context.Context, in *TLStickersChangeStickerPosition, opts ...grpc.CallOption) (*Messages_StickerSet, error)
	// stickers.addStickerToSet#8653febe stickerset:InputStickerSet sticker:InputStickerSetItem = messages.StickerSet;
	StickersAddStickerToSet(ctx context.Context, in *TLStickersAddStickerToSet, opts ...grpc.CallOption) (*Messages_StickerSet, error)
	// stickers.createStickerSet#f1036780 flags:# masks:flags.0?true animated:flags.1?true user_id:InputUser title:string short_name:string thumb:flags.2?InputDocument stickers:Vector<InputStickerSetItem> = messages.StickerSet;
	StickersCreateStickerSet114(ctx context.Context, in *TLStickersCreateStickerSet114, opts ...grpc.CallOption) (*Messages_StickerSet, error)
	// stickers.setStickerSetThumb#9a364e30 stickerset:InputStickerSet thumb:InputDocument = messages.StickerSet;
	StickersSetStickerSetThumb(ctx context.Context, in *TLStickersSetStickerSetThumb, opts ...grpc.CallOption) (*Messages_StickerSet, error)
}

type rPCStickersClient struct {
	cc *grpc.ClientConn
}

func NewRPCStickersClient(cc *grpc.ClientConn) RPCStickersClient {
	return &rPCStickersClient{cc}
}

func (c *rPCStickersClient) StickersCreateStickerSet(ctx context.Context, in *TLStickersCreateStickerSet, opts ...grpc.CallOption) (*Messages_StickerSet, error) {
	out := new(Messages_StickerSet)
	err := c.cc.Invoke(ctx, "/mtproto.RPCStickers/stickers_createStickerSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) StickersRemoveStickerFromSet(ctx context.Context, in *TLStickersRemoveStickerFromSet, opts ...grpc.CallOption) (*Messages_StickerSet, error) {
	out := new(Messages_StickerSet)
	err := c.cc.Invoke(ctx, "/mtproto.RPCStickers/stickers_removeStickerFromSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) StickersChangeStickerPosition(ctx context.Context, in *TLStickersChangeStickerPosition, opts ...grpc.CallOption) (*Messages_StickerSet, error) {
	out := new(Messages_StickerSet)
	err := c.cc.Invoke(ctx, "/mtproto.RPCStickers/stickers_changeStickerPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) StickersAddStickerToSet(ctx context.Context, in *TLStickersAddStickerToSet, opts ...grpc.CallOption) (*Messages_StickerSet, error) {
	out := new(Messages_StickerSet)
	err := c.cc.Invoke(ctx, "/mtproto.RPCStickers/stickers_addStickerToSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) StickersCreateStickerSet114(ctx context.Context, in *TLStickersCreateStickerSet114, opts ...grpc.CallOption) (*Messages_StickerSet, error) {
	out := new(Messages_StickerSet)
	err := c.cc.Invoke(ctx, "/mtproto.RPCStickers/stickers_createStickerSet114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStickersClient) StickersSetStickerSetThumb(ctx context.Context, in *TLStickersSetStickerSetThumb, opts ...grpc.CallOption) (*Messages_StickerSet, error) {
	out := new(Messages_StickerSet)
	err := c.cc.Invoke(ctx, "/mtproto.RPCStickers/stickers_setStickerSetThumb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCStickersServer is the server API for RPCStickers service.
type RPCStickersServer interface {
	// stickers.createStickerSet#9bd86e6a flags:# masks:flags.0?true user_id:InputUser title:string short_name:string stickers:Vector<InputStickerSetItem> = messages.StickerSet;
	StickersCreateStickerSet(context.Context, *TLStickersCreateStickerSet) (*Messages_StickerSet, error)
	// stickers.removeStickerFromSet#f7760f51 sticker:InputDocument = messages.StickerSet;
	StickersRemoveStickerFromSet(context.Context, *TLStickersRemoveStickerFromSet) (*Messages_StickerSet, error)
	// stickers.changeStickerPosition#ffb6d4ca sticker:InputDocument position:int = messages.StickerSet;
	StickersChangeStickerPosition(context.Context, *TLStickersChangeStickerPosition) (*Messages_StickerSet, error)
	// stickers.addStickerToSet#8653febe stickerset:InputStickerSet sticker:InputStickerSetItem = messages.StickerSet;
	StickersAddStickerToSet(context.Context, *TLStickersAddStickerToSet) (*Messages_StickerSet, error)
	// stickers.createStickerSet#f1036780 flags:# masks:flags.0?true animated:flags.1?true user_id:InputUser title:string short_name:string thumb:flags.2?InputDocument stickers:Vector<InputStickerSetItem> = messages.StickerSet;
	StickersCreateStickerSet114(context.Context, *TLStickersCreateStickerSet114) (*Messages_StickerSet, error)
	// stickers.setStickerSetThumb#9a364e30 stickerset:InputStickerSet thumb:InputDocument = messages.StickerSet;
	StickersSetStickerSetThumb(context.Context, *TLStickersSetStickerSetThumb) (*Messages_StickerSet, error)
}

// UnimplementedRPCStickersServer can be embedded to have forward compatible implementations.
type UnimplementedRPCStickersServer struct {
}

func (*UnimplementedRPCStickersServer) StickersCreateStickerSet(ctx context.Context, req *TLStickersCreateStickerSet) (*Messages_StickerSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StickersCreateStickerSet not implemented")
}
func (*UnimplementedRPCStickersServer) StickersRemoveStickerFromSet(ctx context.Context, req *TLStickersRemoveStickerFromSet) (*Messages_StickerSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StickersRemoveStickerFromSet not implemented")
}
func (*UnimplementedRPCStickersServer) StickersChangeStickerPosition(ctx context.Context, req *TLStickersChangeStickerPosition) (*Messages_StickerSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StickersChangeStickerPosition not implemented")
}
func (*UnimplementedRPCStickersServer) StickersAddStickerToSet(ctx context.Context, req *TLStickersAddStickerToSet) (*Messages_StickerSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StickersAddStickerToSet not implemented")
}
func (*UnimplementedRPCStickersServer) StickersCreateStickerSet114(ctx context.Context, req *TLStickersCreateStickerSet114) (*Messages_StickerSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StickersCreateStickerSet114 not implemented")
}
func (*UnimplementedRPCStickersServer) StickersSetStickerSetThumb(ctx context.Context, req *TLStickersSetStickerSetThumb) (*Messages_StickerSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StickersSetStickerSetThumb not implemented")
}

func RegisterRPCStickersServer(s *grpc.Server, srv RPCStickersServer) {
	s.RegisterService(&_RPCStickers_serviceDesc, srv)
}

func _RPCStickers_StickersCreateStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStickersCreateStickerSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).StickersCreateStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCStickers/StickersCreateStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).StickersCreateStickerSet(ctx, req.(*TLStickersCreateStickerSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_StickersRemoveStickerFromSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStickersRemoveStickerFromSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).StickersRemoveStickerFromSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCStickers/StickersRemoveStickerFromSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).StickersRemoveStickerFromSet(ctx, req.(*TLStickersRemoveStickerFromSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_StickersChangeStickerPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStickersChangeStickerPosition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).StickersChangeStickerPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCStickers/StickersChangeStickerPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).StickersChangeStickerPosition(ctx, req.(*TLStickersChangeStickerPosition))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_StickersAddStickerToSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStickersAddStickerToSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).StickersAddStickerToSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCStickers/StickersAddStickerToSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).StickersAddStickerToSet(ctx, req.(*TLStickersAddStickerToSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_StickersCreateStickerSet114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStickersCreateStickerSet114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).StickersCreateStickerSet114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCStickers/StickersCreateStickerSet114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).StickersCreateStickerSet114(ctx, req.(*TLStickersCreateStickerSet114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStickers_StickersSetStickerSetThumb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStickersSetStickerSetThumb)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStickersServer).StickersSetStickerSetThumb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCStickers/StickersSetStickerSetThumb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStickersServer).StickersSetStickerSetThumb(ctx, req.(*TLStickersSetStickerSetThumb))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCStickers_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCStickers",
	HandlerType: (*RPCStickersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "stickers_createStickerSet",
			Handler:    _RPCStickers_StickersCreateStickerSet_Handler,
		},
		{
			MethodName: "stickers_removeStickerFromSet",
			Handler:    _RPCStickers_StickersRemoveStickerFromSet_Handler,
		},
		{
			MethodName: "stickers_changeStickerPosition",
			Handler:    _RPCStickers_StickersChangeStickerPosition_Handler,
		},
		{
			MethodName: "stickers_addStickerToSet",
			Handler:    _RPCStickers_StickersAddStickerToSet_Handler,
		},
		{
			MethodName: "stickers_createStickerSet114",
			Handler:    _RPCStickers_StickersCreateStickerSet114_Handler,
		},
		{
			MethodName: "stickers_setStickerSetThumb",
			Handler:    _RPCStickers_StickersSetStickerSetThumb_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

// RPCPhoneClient is the client API for RPCPhone service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCPhoneClient interface {
	// phone.getCallConfig#55451fa9 = DataJSON;
	PhoneGetCallConfig(ctx context.Context, in *TLPhoneGetCallConfig, opts ...grpc.CallOption) (*DataJSON, error)
	// phone.requestCall#5b95b3d4 user_id:InputUser random_id:int g_a_hash:bytes protocol:PhoneCallProtocol = phone.PhoneCall;
	PhoneRequestCall(ctx context.Context, in *TLPhoneRequestCall, opts ...grpc.CallOption) (*Phone_PhoneCall, error)
	// phone.acceptCall#3bd2b4a0 peer:InputPhoneCall g_b:bytes protocol:PhoneCallProtocol = phone.PhoneCall;
	PhoneAcceptCall(ctx context.Context, in *TLPhoneAcceptCall, opts ...grpc.CallOption) (*Phone_PhoneCall, error)
	// phone.confirmCall#2efe1722 peer:InputPhoneCall g_a:bytes key_fingerprint:long protocol:PhoneCallProtocol = phone.PhoneCall;
	PhoneConfirmCall(ctx context.Context, in *TLPhoneConfirmCall, opts ...grpc.CallOption) (*Phone_PhoneCall, error)
	// phone.receivedCall#17d54f61 peer:InputPhoneCall = Bool;
	PhoneReceivedCall(ctx context.Context, in *TLPhoneReceivedCall, opts ...grpc.CallOption) (*Bool, error)
	// phone.discardCall#78d413a6 peer:InputPhoneCall duration:int reason:PhoneCallDiscardReason connection_id:long = Updates;
	PhoneDiscardCall(ctx context.Context, in *TLPhoneDiscardCall, opts ...grpc.CallOption) (*Updates, error)
	// phone.setCallRating#1c536a34 peer:InputPhoneCall rating:int comment:string = Updates;
	PhoneSetCallRating(ctx context.Context, in *TLPhoneSetCallRating, opts ...grpc.CallOption) (*Updates, error)
	// phone.saveCallDebug#277add7e peer:InputPhoneCall debug:DataJSON = Bool;
	PhoneSaveCallDebug(ctx context.Context, in *TLPhoneSaveCallDebug, opts ...grpc.CallOption) (*Bool, error)
	// phone.WebrtcCreateOffer#66799090 peer:InputPhoneCall sdp:string = Bool;
	Phone_WebrtcCreateOffer(ctx context.Context, in *TLPhone_WebrtcCreateOffer, opts ...grpc.CallOption) (*Bool, error)
	// phone.WebrtcCreateAnswer#ed4a11e4 peer:InputPhoneCall sdp:string = Bool;
	Phone_WebrtcCreateAnswer(ctx context.Context, in *TLPhone_WebrtcCreateAnswer, opts ...grpc.CallOption) (*Bool, error)
	// phone.WebrtcAddCandidate#7022198c peer:InputPhoneCall sdp_id:string sdp_index:int sdp:string = Bool;
	Phone_WebrtcAddCandidate(ctx context.Context, in *TLPhone_WebrtcAddCandidate, opts ...grpc.CallOption) (*Bool, error)
	// phone.requestCall#42ff96ed flags:# video:flags.0?true user_id:InputUser random_id:int g_a_hash:bytes protocol:PhoneCallProtocol = phone.PhoneCall;
	PhoneRequestCall114(ctx context.Context, in *TLPhoneRequestCall114, opts ...grpc.CallOption) (*Phone_PhoneCall, error)
	// phone.discardCall#b2cbc1c0 flags:# video:flags.0?true peer:InputPhoneCall duration:int reason:PhoneCallDiscardReason connection_id:long = Updates;
	PhoneDiscardCall114(ctx context.Context, in *TLPhoneDiscardCall114, opts ...grpc.CallOption) (*Updates, error)
	// phone.setCallRating#59ead627 flags:# user_initiative:flags.0?true peer:InputPhoneCall rating:int comment:string = Updates;
	PhoneSetCallRating114(ctx context.Context, in *TLPhoneSetCallRating114, opts ...grpc.CallOption) (*Updates, error)
	// phone.sendSignalingData#ff7a9383 peer:InputPhoneCall data:bytes = Bool;
	PhoneSendSignalingData(ctx context.Context, in *TLPhoneSendSignalingData, opts ...grpc.CallOption) (*Bool, error)
}

type rPCPhoneClient struct {
	cc *grpc.ClientConn
}

func NewRPCPhoneClient(cc *grpc.ClientConn) RPCPhoneClient {
	return &rPCPhoneClient{cc}
}

func (c *rPCPhoneClient) PhoneGetCallConfig(ctx context.Context, in *TLPhoneGetCallConfig, opts ...grpc.CallOption) (*DataJSON, error) {
	out := new(DataJSON)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhone/phone_getCallConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneClient) PhoneRequestCall(ctx context.Context, in *TLPhoneRequestCall, opts ...grpc.CallOption) (*Phone_PhoneCall, error) {
	out := new(Phone_PhoneCall)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhone/phone_requestCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneClient) PhoneAcceptCall(ctx context.Context, in *TLPhoneAcceptCall, opts ...grpc.CallOption) (*Phone_PhoneCall, error) {
	out := new(Phone_PhoneCall)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhone/phone_acceptCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneClient) PhoneConfirmCall(ctx context.Context, in *TLPhoneConfirmCall, opts ...grpc.CallOption) (*Phone_PhoneCall, error) {
	out := new(Phone_PhoneCall)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhone/phone_confirmCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneClient) PhoneReceivedCall(ctx context.Context, in *TLPhoneReceivedCall, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhone/phone_receivedCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneClient) PhoneDiscardCall(ctx context.Context, in *TLPhoneDiscardCall, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhone/phone_discardCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneClient) PhoneSetCallRating(ctx context.Context, in *TLPhoneSetCallRating, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhone/phone_setCallRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneClient) PhoneSaveCallDebug(ctx context.Context, in *TLPhoneSaveCallDebug, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhone/phone_saveCallDebug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneClient) Phone_WebrtcCreateOffer(ctx context.Context, in *TLPhone_WebrtcCreateOffer, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhone/phone_WebrtcCreateOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneClient) Phone_WebrtcCreateAnswer(ctx context.Context, in *TLPhone_WebrtcCreateAnswer, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhone/phone_WebrtcCreateAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneClient) Phone_WebrtcAddCandidate(ctx context.Context, in *TLPhone_WebrtcAddCandidate, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhone/phone_WebrtcAddCandidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneClient) PhoneRequestCall114(ctx context.Context, in *TLPhoneRequestCall114, opts ...grpc.CallOption) (*Phone_PhoneCall, error) {
	out := new(Phone_PhoneCall)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhone/phone_requestCall114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneClient) PhoneDiscardCall114(ctx context.Context, in *TLPhoneDiscardCall114, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhone/phone_discardCall114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneClient) PhoneSetCallRating114(ctx context.Context, in *TLPhoneSetCallRating114, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhone/phone_setCallRating114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPhoneClient) PhoneSendSignalingData(ctx context.Context, in *TLPhoneSendSignalingData, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPhone/phone_sendSignalingData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCPhoneServer is the server API for RPCPhone service.
type RPCPhoneServer interface {
	// phone.getCallConfig#55451fa9 = DataJSON;
	PhoneGetCallConfig(context.Context, *TLPhoneGetCallConfig) (*DataJSON, error)
	// phone.requestCall#5b95b3d4 user_id:InputUser random_id:int g_a_hash:bytes protocol:PhoneCallProtocol = phone.PhoneCall;
	PhoneRequestCall(context.Context, *TLPhoneRequestCall) (*Phone_PhoneCall, error)
	// phone.acceptCall#3bd2b4a0 peer:InputPhoneCall g_b:bytes protocol:PhoneCallProtocol = phone.PhoneCall;
	PhoneAcceptCall(context.Context, *TLPhoneAcceptCall) (*Phone_PhoneCall, error)
	// phone.confirmCall#2efe1722 peer:InputPhoneCall g_a:bytes key_fingerprint:long protocol:PhoneCallProtocol = phone.PhoneCall;
	PhoneConfirmCall(context.Context, *TLPhoneConfirmCall) (*Phone_PhoneCall, error)
	// phone.receivedCall#17d54f61 peer:InputPhoneCall = Bool;
	PhoneReceivedCall(context.Context, *TLPhoneReceivedCall) (*Bool, error)
	// phone.discardCall#78d413a6 peer:InputPhoneCall duration:int reason:PhoneCallDiscardReason connection_id:long = Updates;
	PhoneDiscardCall(context.Context, *TLPhoneDiscardCall) (*Updates, error)
	// phone.setCallRating#1c536a34 peer:InputPhoneCall rating:int comment:string = Updates;
	PhoneSetCallRating(context.Context, *TLPhoneSetCallRating) (*Updates, error)
	// phone.saveCallDebug#277add7e peer:InputPhoneCall debug:DataJSON = Bool;
	PhoneSaveCallDebug(context.Context, *TLPhoneSaveCallDebug) (*Bool, error)
	// phone.WebrtcCreateOffer#66799090 peer:InputPhoneCall sdp:string = Bool;
	Phone_WebrtcCreateOffer(context.Context, *TLPhone_WebrtcCreateOffer) (*Bool, error)
	// phone.WebrtcCreateAnswer#ed4a11e4 peer:InputPhoneCall sdp:string = Bool;
	Phone_WebrtcCreateAnswer(context.Context, *TLPhone_WebrtcCreateAnswer) (*Bool, error)
	// phone.WebrtcAddCandidate#7022198c peer:InputPhoneCall sdp_id:string sdp_index:int sdp:string = Bool;
	Phone_WebrtcAddCandidate(context.Context, *TLPhone_WebrtcAddCandidate) (*Bool, error)
	// phone.requestCall#42ff96ed flags:# video:flags.0?true user_id:InputUser random_id:int g_a_hash:bytes protocol:PhoneCallProtocol = phone.PhoneCall;
	PhoneRequestCall114(context.Context, *TLPhoneRequestCall114) (*Phone_PhoneCall, error)
	// phone.discardCall#b2cbc1c0 flags:# video:flags.0?true peer:InputPhoneCall duration:int reason:PhoneCallDiscardReason connection_id:long = Updates;
	PhoneDiscardCall114(context.Context, *TLPhoneDiscardCall114) (*Updates, error)
	// phone.setCallRating#59ead627 flags:# user_initiative:flags.0?true peer:InputPhoneCall rating:int comment:string = Updates;
	PhoneSetCallRating114(context.Context, *TLPhoneSetCallRating114) (*Updates, error)
	// phone.sendSignalingData#ff7a9383 peer:InputPhoneCall data:bytes = Bool;
	PhoneSendSignalingData(context.Context, *TLPhoneSendSignalingData) (*Bool, error)
}

// UnimplementedRPCPhoneServer can be embedded to have forward compatible implementations.
type UnimplementedRPCPhoneServer struct {
}

func (*UnimplementedRPCPhoneServer) PhoneGetCallConfig(ctx context.Context, req *TLPhoneGetCallConfig) (*DataJSON, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneGetCallConfig not implemented")
}
func (*UnimplementedRPCPhoneServer) PhoneRequestCall(ctx context.Context, req *TLPhoneRequestCall) (*Phone_PhoneCall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneRequestCall not implemented")
}
func (*UnimplementedRPCPhoneServer) PhoneAcceptCall(ctx context.Context, req *TLPhoneAcceptCall) (*Phone_PhoneCall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneAcceptCall not implemented")
}
func (*UnimplementedRPCPhoneServer) PhoneConfirmCall(ctx context.Context, req *TLPhoneConfirmCall) (*Phone_PhoneCall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneConfirmCall not implemented")
}
func (*UnimplementedRPCPhoneServer) PhoneReceivedCall(ctx context.Context, req *TLPhoneReceivedCall) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneReceivedCall not implemented")
}
func (*UnimplementedRPCPhoneServer) PhoneDiscardCall(ctx context.Context, req *TLPhoneDiscardCall) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneDiscardCall not implemented")
}
func (*UnimplementedRPCPhoneServer) PhoneSetCallRating(ctx context.Context, req *TLPhoneSetCallRating) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneSetCallRating not implemented")
}
func (*UnimplementedRPCPhoneServer) PhoneSaveCallDebug(ctx context.Context, req *TLPhoneSaveCallDebug) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneSaveCallDebug not implemented")
}
func (*UnimplementedRPCPhoneServer) Phone_WebrtcCreateOffer(ctx context.Context, req *TLPhone_WebrtcCreateOffer) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Phone_WebrtcCreateOffer not implemented")
}
func (*UnimplementedRPCPhoneServer) Phone_WebrtcCreateAnswer(ctx context.Context, req *TLPhone_WebrtcCreateAnswer) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Phone_WebrtcCreateAnswer not implemented")
}
func (*UnimplementedRPCPhoneServer) Phone_WebrtcAddCandidate(ctx context.Context, req *TLPhone_WebrtcAddCandidate) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Phone_WebrtcAddCandidate not implemented")
}
func (*UnimplementedRPCPhoneServer) PhoneRequestCall114(ctx context.Context, req *TLPhoneRequestCall114) (*Phone_PhoneCall, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneRequestCall114 not implemented")
}
func (*UnimplementedRPCPhoneServer) PhoneDiscardCall114(ctx context.Context, req *TLPhoneDiscardCall114) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneDiscardCall114 not implemented")
}
func (*UnimplementedRPCPhoneServer) PhoneSetCallRating114(ctx context.Context, req *TLPhoneSetCallRating114) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneSetCallRating114 not implemented")
}
func (*UnimplementedRPCPhoneServer) PhoneSendSignalingData(ctx context.Context, req *TLPhoneSendSignalingData) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhoneSendSignalingData not implemented")
}

func RegisterRPCPhoneServer(s *grpc.Server, srv RPCPhoneServer) {
	s.RegisterService(&_RPCPhone_serviceDesc, srv)
}

func _RPCPhone_PhoneGetCallConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneGetCallConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServer).PhoneGetCallConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhone/PhoneGetCallConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServer).PhoneGetCallConfig(ctx, req.(*TLPhoneGetCallConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhone_PhoneRequestCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneRequestCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServer).PhoneRequestCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhone/PhoneRequestCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServer).PhoneRequestCall(ctx, req.(*TLPhoneRequestCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhone_PhoneAcceptCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneAcceptCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServer).PhoneAcceptCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhone/PhoneAcceptCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServer).PhoneAcceptCall(ctx, req.(*TLPhoneAcceptCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhone_PhoneConfirmCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneConfirmCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServer).PhoneConfirmCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhone/PhoneConfirmCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServer).PhoneConfirmCall(ctx, req.(*TLPhoneConfirmCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhone_PhoneReceivedCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneReceivedCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServer).PhoneReceivedCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhone/PhoneReceivedCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServer).PhoneReceivedCall(ctx, req.(*TLPhoneReceivedCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhone_PhoneDiscardCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneDiscardCall)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServer).PhoneDiscardCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhone/PhoneDiscardCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServer).PhoneDiscardCall(ctx, req.(*TLPhoneDiscardCall))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhone_PhoneSetCallRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneSetCallRating)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServer).PhoneSetCallRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhone/PhoneSetCallRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServer).PhoneSetCallRating(ctx, req.(*TLPhoneSetCallRating))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhone_PhoneSaveCallDebug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneSaveCallDebug)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServer).PhoneSaveCallDebug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhone/PhoneSaveCallDebug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServer).PhoneSaveCallDebug(ctx, req.(*TLPhoneSaveCallDebug))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhone_Phone_WebrtcCreateOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhone_WebrtcCreateOffer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServer).Phone_WebrtcCreateOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhone/Phone_WebrtcCreateOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServer).Phone_WebrtcCreateOffer(ctx, req.(*TLPhone_WebrtcCreateOffer))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhone_Phone_WebrtcCreateAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhone_WebrtcCreateAnswer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServer).Phone_WebrtcCreateAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhone/Phone_WebrtcCreateAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServer).Phone_WebrtcCreateAnswer(ctx, req.(*TLPhone_WebrtcCreateAnswer))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhone_Phone_WebrtcAddCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhone_WebrtcAddCandidate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServer).Phone_WebrtcAddCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhone/Phone_WebrtcAddCandidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServer).Phone_WebrtcAddCandidate(ctx, req.(*TLPhone_WebrtcAddCandidate))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhone_PhoneRequestCall114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneRequestCall114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServer).PhoneRequestCall114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhone/PhoneRequestCall114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServer).PhoneRequestCall114(ctx, req.(*TLPhoneRequestCall114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhone_PhoneDiscardCall114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneDiscardCall114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServer).PhoneDiscardCall114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhone/PhoneDiscardCall114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServer).PhoneDiscardCall114(ctx, req.(*TLPhoneDiscardCall114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhone_PhoneSetCallRating114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneSetCallRating114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServer).PhoneSetCallRating114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhone/PhoneSetCallRating114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServer).PhoneSetCallRating114(ctx, req.(*TLPhoneSetCallRating114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPhone_PhoneSendSignalingData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPhoneSendSignalingData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPhoneServer).PhoneSendSignalingData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPhone/PhoneSendSignalingData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPhoneServer).PhoneSendSignalingData(ctx, req.(*TLPhoneSendSignalingData))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCPhone_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCPhone",
	HandlerType: (*RPCPhoneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "phone_getCallConfig",
			Handler:    _RPCPhone_PhoneGetCallConfig_Handler,
		},
		{
			MethodName: "phone_requestCall",
			Handler:    _RPCPhone_PhoneRequestCall_Handler,
		},
		{
			MethodName: "phone_acceptCall",
			Handler:    _RPCPhone_PhoneAcceptCall_Handler,
		},
		{
			MethodName: "phone_confirmCall",
			Handler:    _RPCPhone_PhoneConfirmCall_Handler,
		},
		{
			MethodName: "phone_receivedCall",
			Handler:    _RPCPhone_PhoneReceivedCall_Handler,
		},
		{
			MethodName: "phone_discardCall",
			Handler:    _RPCPhone_PhoneDiscardCall_Handler,
		},
		{
			MethodName: "phone_setCallRating",
			Handler:    _RPCPhone_PhoneSetCallRating_Handler,
		},
		{
			MethodName: "phone_saveCallDebug",
			Handler:    _RPCPhone_PhoneSaveCallDebug_Handler,
		},
		{
			MethodName: "phone_WebrtcCreateOffer",
			Handler:    _RPCPhone_Phone_WebrtcCreateOffer_Handler,
		},
		{
			MethodName: "phone_WebrtcCreateAnswer",
			Handler:    _RPCPhone_Phone_WebrtcCreateAnswer_Handler,
		},
		{
			MethodName: "phone_WebrtcAddCandidate",
			Handler:    _RPCPhone_Phone_WebrtcAddCandidate_Handler,
		},
		{
			MethodName: "phone_requestCall114",
			Handler:    _RPCPhone_PhoneRequestCall114_Handler,
		},
		{
			MethodName: "phone_discardCall114",
			Handler:    _RPCPhone_PhoneDiscardCall114_Handler,
		},
		{
			MethodName: "phone_setCallRating114",
			Handler:    _RPCPhone_PhoneSetCallRating114_Handler,
		},
		{
			MethodName: "phone_sendSignalingData",
			Handler:    _RPCPhone_PhoneSendSignalingData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

// RPCLangpackClient is the client API for RPCLangpack service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCLangpackClient interface {
	// langpack.getLangPack#9ab5c58e lang_code:string = LangPackDifference;
	LangpackGetLangPack(ctx context.Context, in *TLLangpackGetLangPack, opts ...grpc.CallOption) (*LangPackDifference, error)
	// langpack.getStrings#2e1ee318 lang_code:string keys:Vector<string> = Vector<LangPackString>;
	LangpackGetStrings(ctx context.Context, in *TLLangpackGetStrings, opts ...grpc.CallOption) (*Vector_LangPackString, error)
	// langpack.getDifference#b2e4d7d from_version:int = LangPackDifference;
	LangpackGetDifference(ctx context.Context, in *TLLangpackGetDifference, opts ...grpc.CallOption) (*LangPackDifference, error)
	// langpack.getLanguages#800fd57d = Vector<LangPackLanguage>;
	LangpackGetLanguages(ctx context.Context, in *TLLangpackGetLanguages, opts ...grpc.CallOption) (*Vector_LangPackLanguage, error)
	// langpack.getLangPack#f2f2330a lang_pack:string lang_code:string = LangPackDifference;
	LangpackGetLangPack114(ctx context.Context, in *TLLangpackGetLangPack114, opts ...grpc.CallOption) (*LangPackDifference, error)
	// langpack.getStrings#efea3803 lang_pack:string lang_code:string keys:Vector<string> = Vector<LangPackString>;
	LangpackGetStrings114(ctx context.Context, in *TLLangpackGetStrings114, opts ...grpc.CallOption) (*Vector_LangPackString, error)
	// langpack.getDifference#cd984aa5 lang_pack:string lang_code:string from_version:int = LangPackDifference;
	LangpackGetDifference114(ctx context.Context, in *TLLangpackGetDifference114, opts ...grpc.CallOption) (*LangPackDifference, error)
	// langpack.getLanguages#42c6978f lang_pack:string = Vector<LangPackLanguage>;
	LangpackGetLanguages114(ctx context.Context, in *TLLangpackGetLanguages114, opts ...grpc.CallOption) (*Vector_LangPackLanguage, error)
	// langpack.getLanguage#6a596502 lang_pack:string lang_code:string = LangPackLanguage;
	LangpackGetLanguage(ctx context.Context, in *TLLangpackGetLanguage, opts ...grpc.CallOption) (*LangPackLanguage, error)
	// langpack.getDifference#9d51e814 lang_code:string from_version:int = LangPackDifference;
	LangpackGetDifference118(ctx context.Context, in *TLLangpackGetDifference118, opts ...grpc.CallOption) (*LangPackDifference, error)
}

type rPCLangpackClient struct {
	cc *grpc.ClientConn
}

func NewRPCLangpackClient(cc *grpc.ClientConn) RPCLangpackClient {
	return &rPCLangpackClient{cc}
}

func (c *rPCLangpackClient) LangpackGetLangPack(ctx context.Context, in *TLLangpackGetLangPack, opts ...grpc.CallOption) (*LangPackDifference, error) {
	out := new(LangPackDifference)
	err := c.cc.Invoke(ctx, "/mtproto.RPCLangpack/langpack_getLangPack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCLangpackClient) LangpackGetStrings(ctx context.Context, in *TLLangpackGetStrings, opts ...grpc.CallOption) (*Vector_LangPackString, error) {
	out := new(Vector_LangPackString)
	err := c.cc.Invoke(ctx, "/mtproto.RPCLangpack/langpack_getStrings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCLangpackClient) LangpackGetDifference(ctx context.Context, in *TLLangpackGetDifference, opts ...grpc.CallOption) (*LangPackDifference, error) {
	out := new(LangPackDifference)
	err := c.cc.Invoke(ctx, "/mtproto.RPCLangpack/langpack_getDifference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCLangpackClient) LangpackGetLanguages(ctx context.Context, in *TLLangpackGetLanguages, opts ...grpc.CallOption) (*Vector_LangPackLanguage, error) {
	out := new(Vector_LangPackLanguage)
	err := c.cc.Invoke(ctx, "/mtproto.RPCLangpack/langpack_getLanguages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCLangpackClient) LangpackGetLangPack114(ctx context.Context, in *TLLangpackGetLangPack114, opts ...grpc.CallOption) (*LangPackDifference, error) {
	out := new(LangPackDifference)
	err := c.cc.Invoke(ctx, "/mtproto.RPCLangpack/langpack_getLangPack114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCLangpackClient) LangpackGetStrings114(ctx context.Context, in *TLLangpackGetStrings114, opts ...grpc.CallOption) (*Vector_LangPackString, error) {
	out := new(Vector_LangPackString)
	err := c.cc.Invoke(ctx, "/mtproto.RPCLangpack/langpack_getStrings114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCLangpackClient) LangpackGetDifference114(ctx context.Context, in *TLLangpackGetDifference114, opts ...grpc.CallOption) (*LangPackDifference, error) {
	out := new(LangPackDifference)
	err := c.cc.Invoke(ctx, "/mtproto.RPCLangpack/langpack_getDifference114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCLangpackClient) LangpackGetLanguages114(ctx context.Context, in *TLLangpackGetLanguages114, opts ...grpc.CallOption) (*Vector_LangPackLanguage, error) {
	out := new(Vector_LangPackLanguage)
	err := c.cc.Invoke(ctx, "/mtproto.RPCLangpack/langpack_getLanguages114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCLangpackClient) LangpackGetLanguage(ctx context.Context, in *TLLangpackGetLanguage, opts ...grpc.CallOption) (*LangPackLanguage, error) {
	out := new(LangPackLanguage)
	err := c.cc.Invoke(ctx, "/mtproto.RPCLangpack/langpack_getLanguage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCLangpackClient) LangpackGetDifference118(ctx context.Context, in *TLLangpackGetDifference118, opts ...grpc.CallOption) (*LangPackDifference, error) {
	out := new(LangPackDifference)
	err := c.cc.Invoke(ctx, "/mtproto.RPCLangpack/langpack_getDifference118", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCLangpackServer is the server API for RPCLangpack service.
type RPCLangpackServer interface {
	// langpack.getLangPack#9ab5c58e lang_code:string = LangPackDifference;
	LangpackGetLangPack(context.Context, *TLLangpackGetLangPack) (*LangPackDifference, error)
	// langpack.getStrings#2e1ee318 lang_code:string keys:Vector<string> = Vector<LangPackString>;
	LangpackGetStrings(context.Context, *TLLangpackGetStrings) (*Vector_LangPackString, error)
	// langpack.getDifference#b2e4d7d from_version:int = LangPackDifference;
	LangpackGetDifference(context.Context, *TLLangpackGetDifference) (*LangPackDifference, error)
	// langpack.getLanguages#800fd57d = Vector<LangPackLanguage>;
	LangpackGetLanguages(context.Context, *TLLangpackGetLanguages) (*Vector_LangPackLanguage, error)
	// langpack.getLangPack#f2f2330a lang_pack:string lang_code:string = LangPackDifference;
	LangpackGetLangPack114(context.Context, *TLLangpackGetLangPack114) (*LangPackDifference, error)
	// langpack.getStrings#efea3803 lang_pack:string lang_code:string keys:Vector<string> = Vector<LangPackString>;
	LangpackGetStrings114(context.Context, *TLLangpackGetStrings114) (*Vector_LangPackString, error)
	// langpack.getDifference#cd984aa5 lang_pack:string lang_code:string from_version:int = LangPackDifference;
	LangpackGetDifference114(context.Context, *TLLangpackGetDifference114) (*LangPackDifference, error)
	// langpack.getLanguages#42c6978f lang_pack:string = Vector<LangPackLanguage>;
	LangpackGetLanguages114(context.Context, *TLLangpackGetLanguages114) (*Vector_LangPackLanguage, error)
	// langpack.getLanguage#6a596502 lang_pack:string lang_code:string = LangPackLanguage;
	LangpackGetLanguage(context.Context, *TLLangpackGetLanguage) (*LangPackLanguage, error)
	// langpack.getDifference#9d51e814 lang_code:string from_version:int = LangPackDifference;
	LangpackGetDifference118(context.Context, *TLLangpackGetDifference118) (*LangPackDifference, error)
}

// UnimplementedRPCLangpackServer can be embedded to have forward compatible implementations.
type UnimplementedRPCLangpackServer struct {
}

func (*UnimplementedRPCLangpackServer) LangpackGetLangPack(ctx context.Context, req *TLLangpackGetLangPack) (*LangPackDifference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LangpackGetLangPack not implemented")
}
func (*UnimplementedRPCLangpackServer) LangpackGetStrings(ctx context.Context, req *TLLangpackGetStrings) (*Vector_LangPackString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LangpackGetStrings not implemented")
}
func (*UnimplementedRPCLangpackServer) LangpackGetDifference(ctx context.Context, req *TLLangpackGetDifference) (*LangPackDifference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LangpackGetDifference not implemented")
}
func (*UnimplementedRPCLangpackServer) LangpackGetLanguages(ctx context.Context, req *TLLangpackGetLanguages) (*Vector_LangPackLanguage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LangpackGetLanguages not implemented")
}
func (*UnimplementedRPCLangpackServer) LangpackGetLangPack114(ctx context.Context, req *TLLangpackGetLangPack114) (*LangPackDifference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LangpackGetLangPack114 not implemented")
}
func (*UnimplementedRPCLangpackServer) LangpackGetStrings114(ctx context.Context, req *TLLangpackGetStrings114) (*Vector_LangPackString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LangpackGetStrings114 not implemented")
}
func (*UnimplementedRPCLangpackServer) LangpackGetDifference114(ctx context.Context, req *TLLangpackGetDifference114) (*LangPackDifference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LangpackGetDifference114 not implemented")
}
func (*UnimplementedRPCLangpackServer) LangpackGetLanguages114(ctx context.Context, req *TLLangpackGetLanguages114) (*Vector_LangPackLanguage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LangpackGetLanguages114 not implemented")
}
func (*UnimplementedRPCLangpackServer) LangpackGetLanguage(ctx context.Context, req *TLLangpackGetLanguage) (*LangPackLanguage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LangpackGetLanguage not implemented")
}
func (*UnimplementedRPCLangpackServer) LangpackGetDifference118(ctx context.Context, req *TLLangpackGetDifference118) (*LangPackDifference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LangpackGetDifference118 not implemented")
}

func RegisterRPCLangpackServer(s *grpc.Server, srv RPCLangpackServer) {
	s.RegisterService(&_RPCLangpack_serviceDesc, srv)
}

func _RPCLangpack_LangpackGetLangPack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLLangpackGetLangPack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCLangpackServer).LangpackGetLangPack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCLangpack/LangpackGetLangPack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCLangpackServer).LangpackGetLangPack(ctx, req.(*TLLangpackGetLangPack))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCLangpack_LangpackGetStrings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLLangpackGetStrings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCLangpackServer).LangpackGetStrings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCLangpack/LangpackGetStrings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCLangpackServer).LangpackGetStrings(ctx, req.(*TLLangpackGetStrings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCLangpack_LangpackGetDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLLangpackGetDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCLangpackServer).LangpackGetDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCLangpack/LangpackGetDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCLangpackServer).LangpackGetDifference(ctx, req.(*TLLangpackGetDifference))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCLangpack_LangpackGetLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLLangpackGetLanguages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCLangpackServer).LangpackGetLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCLangpack/LangpackGetLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCLangpackServer).LangpackGetLanguages(ctx, req.(*TLLangpackGetLanguages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCLangpack_LangpackGetLangPack114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLLangpackGetLangPack114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCLangpackServer).LangpackGetLangPack114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCLangpack/LangpackGetLangPack114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCLangpackServer).LangpackGetLangPack114(ctx, req.(*TLLangpackGetLangPack114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCLangpack_LangpackGetStrings114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLLangpackGetStrings114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCLangpackServer).LangpackGetStrings114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCLangpack/LangpackGetStrings114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCLangpackServer).LangpackGetStrings114(ctx, req.(*TLLangpackGetStrings114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCLangpack_LangpackGetDifference114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLLangpackGetDifference114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCLangpackServer).LangpackGetDifference114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCLangpack/LangpackGetDifference114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCLangpackServer).LangpackGetDifference114(ctx, req.(*TLLangpackGetDifference114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCLangpack_LangpackGetLanguages114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLLangpackGetLanguages114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCLangpackServer).LangpackGetLanguages114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCLangpack/LangpackGetLanguages114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCLangpackServer).LangpackGetLanguages114(ctx, req.(*TLLangpackGetLanguages114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCLangpack_LangpackGetLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLLangpackGetLanguage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCLangpackServer).LangpackGetLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCLangpack/LangpackGetLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCLangpackServer).LangpackGetLanguage(ctx, req.(*TLLangpackGetLanguage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCLangpack_LangpackGetDifference118_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLLangpackGetDifference118)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCLangpackServer).LangpackGetDifference118(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCLangpack/LangpackGetDifference118",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCLangpackServer).LangpackGetDifference118(ctx, req.(*TLLangpackGetDifference118))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCLangpack_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCLangpack",
	HandlerType: (*RPCLangpackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "langpack_getLangPack",
			Handler:    _RPCLangpack_LangpackGetLangPack_Handler,
		},
		{
			MethodName: "langpack_getStrings",
			Handler:    _RPCLangpack_LangpackGetStrings_Handler,
		},
		{
			MethodName: "langpack_getDifference",
			Handler:    _RPCLangpack_LangpackGetDifference_Handler,
		},
		{
			MethodName: "langpack_getLanguages",
			Handler:    _RPCLangpack_LangpackGetLanguages_Handler,
		},
		{
			MethodName: "langpack_getLangPack114",
			Handler:    _RPCLangpack_LangpackGetLangPack114_Handler,
		},
		{
			MethodName: "langpack_getStrings114",
			Handler:    _RPCLangpack_LangpackGetStrings114_Handler,
		},
		{
			MethodName: "langpack_getDifference114",
			Handler:    _RPCLangpack_LangpackGetDifference114_Handler,
		},
		{
			MethodName: "langpack_getLanguages114",
			Handler:    _RPCLangpack_LangpackGetLanguages114_Handler,
		},
		{
			MethodName: "langpack_getLanguage",
			Handler:    _RPCLangpack_LangpackGetLanguage_Handler,
		},
		{
			MethodName: "langpack_getDifference118",
			Handler:    _RPCLangpack_LangpackGetDifference118_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

// RPCUploadClient is the client API for RPCUpload service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCUploadClient interface {
	// upload.saveFilePart#b304a621 file_id:long file_part:int bytes:bytes = Bool;
	UploadSaveFilePart(ctx context.Context, in *TLUploadSaveFilePart, opts ...grpc.CallOption) (*Bool, error)
	// upload.getFile#e3a6cfb5 location:InputFileLocation offset:int limit:int = upload.File;
	UploadGetFile(ctx context.Context, in *TLUploadGetFile, opts ...grpc.CallOption) (*Upload_File, error)
	// upload.saveBigFilePart#de7b673d file_id:long file_part:int file_total_parts:int bytes:bytes = Bool;
	UploadSaveBigFilePart(ctx context.Context, in *TLUploadSaveBigFilePart, opts ...grpc.CallOption) (*Bool, error)
	// upload.getWebFile#24e6818d location:InputWebFileLocation offset:int limit:int = upload.WebFile;
	UploadGetWebFile(ctx context.Context, in *TLUploadGetWebFile, opts ...grpc.CallOption) (*Upload_WebFile, error)
	// upload.getCdnFile#2000bcc3 file_token:bytes offset:int limit:int = upload.CdnFile;
	UploadGetCdnFile(ctx context.Context, in *TLUploadGetCdnFile, opts ...grpc.CallOption) (*Upload_CdnFile, error)
	// upload.reuploadCdnFile#1af91c09 file_token:bytes request_token:bytes = Vector<CdnFileHash>;
	UploadReuploadCdnFile(ctx context.Context, in *TLUploadReuploadCdnFile, opts ...grpc.CallOption) (*Vector_CdnFileHash, error)
	// upload.getCdnFileHashes#f715c87b file_token:bytes offset:int = Vector<CdnFileHash>;
	UploadGetCdnFileHashes(ctx context.Context, in *TLUploadGetCdnFileHashes, opts ...grpc.CallOption) (*Vector_CdnFileHash, error)
	// upload.getFile#b15a9afc flags:# precise:flags.0?true cdn_supported:flags.1?true location:InputFileLocation offset:int limit:int = upload.File;
	UploadGetFile114(ctx context.Context, in *TLUploadGetFile114, opts ...grpc.CallOption) (*Upload_File, error)
	// upload.reuploadCdnFile#9b2754a8 file_token:bytes request_token:bytes = Vector<FileHash>;
	UploadReuploadCdnFile114(ctx context.Context, in *TLUploadReuploadCdnFile114, opts ...grpc.CallOption) (*Vector_FileHash, error)
	// upload.getCdnFileHashes#4da54231 file_token:bytes offset:int = Vector<FileHash>;
	UploadGetCdnFileHashes114(ctx context.Context, in *TLUploadGetCdnFileHashes114, opts ...grpc.CallOption) (*Vector_FileHash, error)
	// upload.getFileHashes#c7025931 location:InputFileLocation offset:int = Vector<FileHash>;
	UploadGetFileHashes(ctx context.Context, in *TLUploadGetFileHashes, opts ...grpc.CallOption) (*Vector_FileHash, error)
}

type rPCUploadClient struct {
	cc *grpc.ClientConn
}

func NewRPCUploadClient(cc *grpc.ClientConn) RPCUploadClient {
	return &rPCUploadClient{cc}
}

func (c *rPCUploadClient) UploadSaveFilePart(ctx context.Context, in *TLUploadSaveFilePart, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUpload/upload_saveFilePart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUploadClient) UploadGetFile(ctx context.Context, in *TLUploadGetFile, opts ...grpc.CallOption) (*Upload_File, error) {
	out := new(Upload_File)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUpload/upload_getFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUploadClient) UploadSaveBigFilePart(ctx context.Context, in *TLUploadSaveBigFilePart, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUpload/upload_saveBigFilePart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUploadClient) UploadGetWebFile(ctx context.Context, in *TLUploadGetWebFile, opts ...grpc.CallOption) (*Upload_WebFile, error) {
	out := new(Upload_WebFile)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUpload/upload_getWebFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUploadClient) UploadGetCdnFile(ctx context.Context, in *TLUploadGetCdnFile, opts ...grpc.CallOption) (*Upload_CdnFile, error) {
	out := new(Upload_CdnFile)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUpload/upload_getCdnFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUploadClient) UploadReuploadCdnFile(ctx context.Context, in *TLUploadReuploadCdnFile, opts ...grpc.CallOption) (*Vector_CdnFileHash, error) {
	out := new(Vector_CdnFileHash)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUpload/upload_reuploadCdnFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUploadClient) UploadGetCdnFileHashes(ctx context.Context, in *TLUploadGetCdnFileHashes, opts ...grpc.CallOption) (*Vector_CdnFileHash, error) {
	out := new(Vector_CdnFileHash)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUpload/upload_getCdnFileHashes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUploadClient) UploadGetFile114(ctx context.Context, in *TLUploadGetFile114, opts ...grpc.CallOption) (*Upload_File, error) {
	out := new(Upload_File)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUpload/upload_getFile114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUploadClient) UploadReuploadCdnFile114(ctx context.Context, in *TLUploadReuploadCdnFile114, opts ...grpc.CallOption) (*Vector_FileHash, error) {
	out := new(Vector_FileHash)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUpload/upload_reuploadCdnFile114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUploadClient) UploadGetCdnFileHashes114(ctx context.Context, in *TLUploadGetCdnFileHashes114, opts ...grpc.CallOption) (*Vector_FileHash, error) {
	out := new(Vector_FileHash)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUpload/upload_getCdnFileHashes114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUploadClient) UploadGetFileHashes(ctx context.Context, in *TLUploadGetFileHashes, opts ...grpc.CallOption) (*Vector_FileHash, error) {
	out := new(Vector_FileHash)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUpload/upload_getFileHashes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCUploadServer is the server API for RPCUpload service.
type RPCUploadServer interface {
	// upload.saveFilePart#b304a621 file_id:long file_part:int bytes:bytes = Bool;
	UploadSaveFilePart(context.Context, *TLUploadSaveFilePart) (*Bool, error)
	// upload.getFile#e3a6cfb5 location:InputFileLocation offset:int limit:int = upload.File;
	UploadGetFile(context.Context, *TLUploadGetFile) (*Upload_File, error)
	// upload.saveBigFilePart#de7b673d file_id:long file_part:int file_total_parts:int bytes:bytes = Bool;
	UploadSaveBigFilePart(context.Context, *TLUploadSaveBigFilePart) (*Bool, error)
	// upload.getWebFile#24e6818d location:InputWebFileLocation offset:int limit:int = upload.WebFile;
	UploadGetWebFile(context.Context, *TLUploadGetWebFile) (*Upload_WebFile, error)
	// upload.getCdnFile#2000bcc3 file_token:bytes offset:int limit:int = upload.CdnFile;
	UploadGetCdnFile(context.Context, *TLUploadGetCdnFile) (*Upload_CdnFile, error)
	// upload.reuploadCdnFile#1af91c09 file_token:bytes request_token:bytes = Vector<CdnFileHash>;
	UploadReuploadCdnFile(context.Context, *TLUploadReuploadCdnFile) (*Vector_CdnFileHash, error)
	// upload.getCdnFileHashes#f715c87b file_token:bytes offset:int = Vector<CdnFileHash>;
	UploadGetCdnFileHashes(context.Context, *TLUploadGetCdnFileHashes) (*Vector_CdnFileHash, error)
	// upload.getFile#b15a9afc flags:# precise:flags.0?true cdn_supported:flags.1?true location:InputFileLocation offset:int limit:int = upload.File;
	UploadGetFile114(context.Context, *TLUploadGetFile114) (*Upload_File, error)
	// upload.reuploadCdnFile#9b2754a8 file_token:bytes request_token:bytes = Vector<FileHash>;
	UploadReuploadCdnFile114(context.Context, *TLUploadReuploadCdnFile114) (*Vector_FileHash, error)
	// upload.getCdnFileHashes#4da54231 file_token:bytes offset:int = Vector<FileHash>;
	UploadGetCdnFileHashes114(context.Context, *TLUploadGetCdnFileHashes114) (*Vector_FileHash, error)
	// upload.getFileHashes#c7025931 location:InputFileLocation offset:int = Vector<FileHash>;
	UploadGetFileHashes(context.Context, *TLUploadGetFileHashes) (*Vector_FileHash, error)
}

// UnimplementedRPCUploadServer can be embedded to have forward compatible implementations.
type UnimplementedRPCUploadServer struct {
}

func (*UnimplementedRPCUploadServer) UploadSaveFilePart(ctx context.Context, req *TLUploadSaveFilePart) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadSaveFilePart not implemented")
}
func (*UnimplementedRPCUploadServer) UploadGetFile(ctx context.Context, req *TLUploadGetFile) (*Upload_File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadGetFile not implemented")
}
func (*UnimplementedRPCUploadServer) UploadSaveBigFilePart(ctx context.Context, req *TLUploadSaveBigFilePart) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadSaveBigFilePart not implemented")
}
func (*UnimplementedRPCUploadServer) UploadGetWebFile(ctx context.Context, req *TLUploadGetWebFile) (*Upload_WebFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadGetWebFile not implemented")
}
func (*UnimplementedRPCUploadServer) UploadGetCdnFile(ctx context.Context, req *TLUploadGetCdnFile) (*Upload_CdnFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadGetCdnFile not implemented")
}
func (*UnimplementedRPCUploadServer) UploadReuploadCdnFile(ctx context.Context, req *TLUploadReuploadCdnFile) (*Vector_CdnFileHash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadReuploadCdnFile not implemented")
}
func (*UnimplementedRPCUploadServer) UploadGetCdnFileHashes(ctx context.Context, req *TLUploadGetCdnFileHashes) (*Vector_CdnFileHash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadGetCdnFileHashes not implemented")
}
func (*UnimplementedRPCUploadServer) UploadGetFile114(ctx context.Context, req *TLUploadGetFile114) (*Upload_File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadGetFile114 not implemented")
}
func (*UnimplementedRPCUploadServer) UploadReuploadCdnFile114(ctx context.Context, req *TLUploadReuploadCdnFile114) (*Vector_FileHash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadReuploadCdnFile114 not implemented")
}
func (*UnimplementedRPCUploadServer) UploadGetCdnFileHashes114(ctx context.Context, req *TLUploadGetCdnFileHashes114) (*Vector_FileHash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadGetCdnFileHashes114 not implemented")
}
func (*UnimplementedRPCUploadServer) UploadGetFileHashes(ctx context.Context, req *TLUploadGetFileHashes) (*Vector_FileHash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadGetFileHashes not implemented")
}

func RegisterRPCUploadServer(s *grpc.Server, srv RPCUploadServer) {
	s.RegisterService(&_RPCUpload_serviceDesc, srv)
}

func _RPCUpload_UploadSaveFilePart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadSaveFilePart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUploadServer).UploadSaveFilePart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUpload/UploadSaveFilePart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUploadServer).UploadSaveFilePart(ctx, req.(*TLUploadSaveFilePart))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUpload_UploadGetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadGetFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUploadServer).UploadGetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUpload/UploadGetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUploadServer).UploadGetFile(ctx, req.(*TLUploadGetFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUpload_UploadSaveBigFilePart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadSaveBigFilePart)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUploadServer).UploadSaveBigFilePart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUpload/UploadSaveBigFilePart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUploadServer).UploadSaveBigFilePart(ctx, req.(*TLUploadSaveBigFilePart))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUpload_UploadGetWebFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadGetWebFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUploadServer).UploadGetWebFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUpload/UploadGetWebFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUploadServer).UploadGetWebFile(ctx, req.(*TLUploadGetWebFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUpload_UploadGetCdnFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadGetCdnFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUploadServer).UploadGetCdnFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUpload/UploadGetCdnFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUploadServer).UploadGetCdnFile(ctx, req.(*TLUploadGetCdnFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUpload_UploadReuploadCdnFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadReuploadCdnFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUploadServer).UploadReuploadCdnFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUpload/UploadReuploadCdnFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUploadServer).UploadReuploadCdnFile(ctx, req.(*TLUploadReuploadCdnFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUpload_UploadGetCdnFileHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadGetCdnFileHashes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUploadServer).UploadGetCdnFileHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUpload/UploadGetCdnFileHashes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUploadServer).UploadGetCdnFileHashes(ctx, req.(*TLUploadGetCdnFileHashes))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUpload_UploadGetFile114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadGetFile114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUploadServer).UploadGetFile114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUpload/UploadGetFile114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUploadServer).UploadGetFile114(ctx, req.(*TLUploadGetFile114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUpload_UploadReuploadCdnFile114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadReuploadCdnFile114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUploadServer).UploadReuploadCdnFile114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUpload/UploadReuploadCdnFile114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUploadServer).UploadReuploadCdnFile114(ctx, req.(*TLUploadReuploadCdnFile114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUpload_UploadGetCdnFileHashes114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadGetCdnFileHashes114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUploadServer).UploadGetCdnFileHashes114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUpload/UploadGetCdnFileHashes114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUploadServer).UploadGetCdnFileHashes114(ctx, req.(*TLUploadGetCdnFileHashes114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUpload_UploadGetFileHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUploadGetFileHashes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUploadServer).UploadGetFileHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUpload/UploadGetFileHashes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUploadServer).UploadGetFileHashes(ctx, req.(*TLUploadGetFileHashes))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCUpload_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCUpload",
	HandlerType: (*RPCUploadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "upload_saveFilePart",
			Handler:    _RPCUpload_UploadSaveFilePart_Handler,
		},
		{
			MethodName: "upload_getFile",
			Handler:    _RPCUpload_UploadGetFile_Handler,
		},
		{
			MethodName: "upload_saveBigFilePart",
			Handler:    _RPCUpload_UploadSaveBigFilePart_Handler,
		},
		{
			MethodName: "upload_getWebFile",
			Handler:    _RPCUpload_UploadGetWebFile_Handler,
		},
		{
			MethodName: "upload_getCdnFile",
			Handler:    _RPCUpload_UploadGetCdnFile_Handler,
		},
		{
			MethodName: "upload_reuploadCdnFile",
			Handler:    _RPCUpload_UploadReuploadCdnFile_Handler,
		},
		{
			MethodName: "upload_getCdnFileHashes",
			Handler:    _RPCUpload_UploadGetCdnFileHashes_Handler,
		},
		{
			MethodName: "upload_getFile114",
			Handler:    _RPCUpload_UploadGetFile114_Handler,
		},
		{
			MethodName: "upload_reuploadCdnFile114",
			Handler:    _RPCUpload_UploadReuploadCdnFile114_Handler,
		},
		{
			MethodName: "upload_getCdnFileHashes114",
			Handler:    _RPCUpload_UploadGetCdnFileHashes114_Handler,
		},
		{
			MethodName: "upload_getFileHashes",
			Handler:    _RPCUpload_UploadGetFileHashes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

// RPCHelpClient is the client API for RPCHelp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCHelpClient interface {
	// help.getConfig#c4f9186b = Config;
	HelpGetConfig(ctx context.Context, in *TLHelpGetConfig, opts ...grpc.CallOption) (*Config, error)
	// help.getNearestDc#1fb33026 = NearestDc;
	HelpGetNearestDc(ctx context.Context, in *TLHelpGetNearestDc, opts ...grpc.CallOption) (*NearestDc, error)
	// help.getAppUpdate#ae2de196 = help.AppUpdate;
	HelpGetAppUpdate(ctx context.Context, in *TLHelpGetAppUpdate, opts ...grpc.CallOption) (*Help_AppUpdate, error)
	// help.saveAppLog#6f02f748 events:Vector<InputAppEvent> = Bool;
	HelpSaveAppLog(ctx context.Context, in *TLHelpSaveAppLog, opts ...grpc.CallOption) (*Bool, error)
	// help.getInviteText#4d392343 = help.InviteText;
	HelpGetInviteText(ctx context.Context, in *TLHelpGetInviteText, opts ...grpc.CallOption) (*Help_InviteText, error)
	// help.getSupport#9cdf08cd = help.Support;
	HelpGetSupport(ctx context.Context, in *TLHelpGetSupport, opts ...grpc.CallOption) (*Help_Support, error)
	// help.getAppChangelog#9010ef6f prev_app_version:string = Updates;
	HelpGetAppChangelog(ctx context.Context, in *TLHelpGetAppChangelog, opts ...grpc.CallOption) (*Updates, error)
	// help.getTermsOfService#350170f3 = help.TermsOfService;
	HelpGetTermsOfService(ctx context.Context, in *TLHelpGetTermsOfService, opts ...grpc.CallOption) (*Help_TermsOfService, error)
	// help.setBotUpdatesStatus#ec22cfcd pending_updates_count:int message:string = Bool;
	HelpSetBotUpdatesStatus(ctx context.Context, in *TLHelpSetBotUpdatesStatus, opts ...grpc.CallOption) (*Bool, error)
	// help.getCdnConfig#52029342 = CdnConfig;
	HelpGetCdnConfig(ctx context.Context, in *TLHelpGetCdnConfig, opts ...grpc.CallOption) (*CdnConfig, error)
	// help.getWkConfig#86c965c = WkConfig;
	HelpGetWkConfig(ctx context.Context, in *TLHelpGetWkConfig, opts ...grpc.CallOption) (*WkConfig, error)
	// help.getJsonConfig#5545a37f = DataJSON;
	HelpGetJsonConfig(ctx context.Context, in *TLHelpGetJsonConfig, opts ...grpc.CallOption) (*DataJSON, error)
	// help.getScheme#dbb69a9e version:int = Scheme;
	HelpGetScheme(ctx context.Context, in *TLHelpGetScheme, opts ...grpc.CallOption) (*Scheme, error)
	// help.getConfig#c4f9186b = Config;
	HelpGetConfig73(ctx context.Context, in *TLHelpGetConfig, opts ...grpc.CallOption) (*Config73, error)
	// help.getAppUpdate#c812ac7e device_model:string system_version:string app_version:string lang_code:string = help.AppUpdate;
	HelpGetAppUpdate73(ctx context.Context, in *TLHelpGetAppUpdate73, opts ...grpc.CallOption) (*Help_AppUpdate, error)
	// help.getInviteText#a4a95186 lang_code:string = help.InviteText;
	HelpGetInviteText73(ctx context.Context, in *TLHelpGetInviteText73, opts ...grpc.CallOption) (*Help_InviteText, error)
	// help.getRecentMeUrls#3dc0f114 referer:string = help.RecentMeUrls;
	HelpGetRecentMeUrls(ctx context.Context, in *TLHelpGetRecentMeUrls, opts ...grpc.CallOption) (*Help_RecentMeUrls, error)
	// help.getTermsOfService#37d78f83 lang_code:string = help.TermsOfService;
	HelpGetTermsOfService73(ctx context.Context, in *TLHelpGetTermsOfService73, opts ...grpc.CallOption) (*Help_TermsOfService, error)
	// help.getConfig#c4f9186b = Config;
	HelpGetConfig82(ctx context.Context, in *TLHelpGetConfig, opts ...grpc.CallOption) (*Config82, error)
	// help.getTermsOfServiceUpdate#2ca51fd1 = help.TermsOfServiceUpdate;
	HelpGetTermsOfServiceUpdate(ctx context.Context, in *TLHelpGetTermsOfServiceUpdate, opts ...grpc.CallOption) (*Help_TermsOfServiceUpdate, error)
	// help.acceptTermsOfService#ee72f79a id:DataJSON = Bool;
	HelpAcceptTermsOfService(ctx context.Context, in *TLHelpAcceptTermsOfService, opts ...grpc.CallOption) (*Bool, error)
	// help.getDeepLinkInfo#3fedc75f path:string = help.DeepLinkInfo;
	HelpGetDeepLinkInfo(ctx context.Context, in *TLHelpGetDeepLinkInfo, opts ...grpc.CallOption) (*Help_DeepLinkInfo, error)
	// help.test#c0e202f7 = Bool;
	HelpTest(ctx context.Context, in *TLHelpTest, opts ...grpc.CallOption) (*Bool, error)
	// help.getConfig#c4f9186b = Config;
	HelpGetConfig114(ctx context.Context, in *TLHelpGetConfig114, opts ...grpc.CallOption) (*Config114, error)
	// help.getAppUpdate#522d5a7d source:string = help.AppUpdate;
	HelpGetAppUpdate114(ctx context.Context, in *TLHelpGetAppUpdate114, opts ...grpc.CallOption) (*Help_AppUpdate, error)
	// help.getAppConfig#98914110 = JSONValue;
	HelpGetAppConfig(ctx context.Context, in *TLHelpGetAppConfig, opts ...grpc.CallOption) (*JSONValue, error)
	// help.getPassportConfig#c661ad08 hash:int = help.PassportConfig;
	HelpGetPassportConfig(ctx context.Context, in *TLHelpGetPassportConfig, opts ...grpc.CallOption) (*Help_PassportConfig, error)
	// help.getSupportName#d360e72c = help.SupportName;
	HelpGetSupportName(ctx context.Context, in *TLHelpGetSupportName, opts ...grpc.CallOption) (*Help_SupportName, error)
	// help.getUserInfo#38a08d3 user_id:InputUser = help.UserInfo;
	HelpGetUserInfo(ctx context.Context, in *TLHelpGetUserInfo, opts ...grpc.CallOption) (*Help_UserInfo, error)
	// help.editUserInfo#66b91b70 user_id:InputUser message:string entities:Vector<MessageEntity> = help.UserInfo;
	HelpEditUserInfo(ctx context.Context, in *TLHelpEditUserInfo, opts ...grpc.CallOption) (*Help_UserInfo, error)
	// help.getPromoData#c0977421 = help.PromoData;
	HelpGetPromoData(ctx context.Context, in *TLHelpGetPromoData, opts ...grpc.CallOption) (*Help_PromoData, error)
	// help.hidePromoData#1e251c95 peer:InputPeer = Bool;
	HelpHidePromoData(ctx context.Context, in *TLHelpHidePromoData, opts ...grpc.CallOption) (*Bool, error)
	// help.dismissSuggestion#77fa99f suggestion:string = Bool;
	HelpDismissSuggestion(ctx context.Context, in *TLHelpDismissSuggestion, opts ...grpc.CallOption) (*Bool, error)
	// help.getCountriesList#735787a8 lang_code:string hash:int = help.CountriesList;
	HelpGetCountriesList(ctx context.Context, in *TLHelpGetCountriesList, opts ...grpc.CallOption) (*Help_CountriesList, error)
}

type rPCHelpClient struct {
	cc *grpc.ClientConn
}

func NewRPCHelpClient(cc *grpc.ClientConn) RPCHelpClient {
	return &rPCHelpClient{cc}
}

func (c *rPCHelpClient) HelpGetConfig(ctx context.Context, in *TLHelpGetConfig, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_getConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpGetNearestDc(ctx context.Context, in *TLHelpGetNearestDc, opts ...grpc.CallOption) (*NearestDc, error) {
	out := new(NearestDc)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_getNearestDc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpGetAppUpdate(ctx context.Context, in *TLHelpGetAppUpdate, opts ...grpc.CallOption) (*Help_AppUpdate, error) {
	out := new(Help_AppUpdate)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_getAppUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpSaveAppLog(ctx context.Context, in *TLHelpSaveAppLog, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_saveAppLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpGetInviteText(ctx context.Context, in *TLHelpGetInviteText, opts ...grpc.CallOption) (*Help_InviteText, error) {
	out := new(Help_InviteText)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_getInviteText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpGetSupport(ctx context.Context, in *TLHelpGetSupport, opts ...grpc.CallOption) (*Help_Support, error) {
	out := new(Help_Support)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_getSupport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpGetAppChangelog(ctx context.Context, in *TLHelpGetAppChangelog, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_getAppChangelog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpGetTermsOfService(ctx context.Context, in *TLHelpGetTermsOfService, opts ...grpc.CallOption) (*Help_TermsOfService, error) {
	out := new(Help_TermsOfService)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_getTermsOfService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpSetBotUpdatesStatus(ctx context.Context, in *TLHelpSetBotUpdatesStatus, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_setBotUpdatesStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpGetCdnConfig(ctx context.Context, in *TLHelpGetCdnConfig, opts ...grpc.CallOption) (*CdnConfig, error) {
	out := new(CdnConfig)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_getCdnConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpGetWkConfig(ctx context.Context, in *TLHelpGetWkConfig, opts ...grpc.CallOption) (*WkConfig, error) {
	out := new(WkConfig)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_getWkConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpGetJsonConfig(ctx context.Context, in *TLHelpGetJsonConfig, opts ...grpc.CallOption) (*DataJSON, error) {
	out := new(DataJSON)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_getJsonConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpGetScheme(ctx context.Context, in *TLHelpGetScheme, opts ...grpc.CallOption) (*Scheme, error) {
	out := new(Scheme)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_getScheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpGetConfig73(ctx context.Context, in *TLHelpGetConfig, opts ...grpc.CallOption) (*Config73, error) {
	out := new(Config73)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_getConfig73", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpGetAppUpdate73(ctx context.Context, in *TLHelpGetAppUpdate73, opts ...grpc.CallOption) (*Help_AppUpdate, error) {
	out := new(Help_AppUpdate)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_getAppUpdate73", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpGetInviteText73(ctx context.Context, in *TLHelpGetInviteText73, opts ...grpc.CallOption) (*Help_InviteText, error) {
	out := new(Help_InviteText)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_getInviteText73", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpGetRecentMeUrls(ctx context.Context, in *TLHelpGetRecentMeUrls, opts ...grpc.CallOption) (*Help_RecentMeUrls, error) {
	out := new(Help_RecentMeUrls)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_getRecentMeUrls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpGetTermsOfService73(ctx context.Context, in *TLHelpGetTermsOfService73, opts ...grpc.CallOption) (*Help_TermsOfService, error) {
	out := new(Help_TermsOfService)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_getTermsOfService73", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpGetConfig82(ctx context.Context, in *TLHelpGetConfig, opts ...grpc.CallOption) (*Config82, error) {
	out := new(Config82)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_getConfig82", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpGetTermsOfServiceUpdate(ctx context.Context, in *TLHelpGetTermsOfServiceUpdate, opts ...grpc.CallOption) (*Help_TermsOfServiceUpdate, error) {
	out := new(Help_TermsOfServiceUpdate)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_getTermsOfServiceUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpAcceptTermsOfService(ctx context.Context, in *TLHelpAcceptTermsOfService, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_acceptTermsOfService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpGetDeepLinkInfo(ctx context.Context, in *TLHelpGetDeepLinkInfo, opts ...grpc.CallOption) (*Help_DeepLinkInfo, error) {
	out := new(Help_DeepLinkInfo)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_getDeepLinkInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpTest(ctx context.Context, in *TLHelpTest, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpGetConfig114(ctx context.Context, in *TLHelpGetConfig114, opts ...grpc.CallOption) (*Config114, error) {
	out := new(Config114)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_getConfig114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpGetAppUpdate114(ctx context.Context, in *TLHelpGetAppUpdate114, opts ...grpc.CallOption) (*Help_AppUpdate, error) {
	out := new(Help_AppUpdate)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_getAppUpdate114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpGetAppConfig(ctx context.Context, in *TLHelpGetAppConfig, opts ...grpc.CallOption) (*JSONValue, error) {
	out := new(JSONValue)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_getAppConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpGetPassportConfig(ctx context.Context, in *TLHelpGetPassportConfig, opts ...grpc.CallOption) (*Help_PassportConfig, error) {
	out := new(Help_PassportConfig)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_getPassportConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpGetSupportName(ctx context.Context, in *TLHelpGetSupportName, opts ...grpc.CallOption) (*Help_SupportName, error) {
	out := new(Help_SupportName)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_getSupportName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpGetUserInfo(ctx context.Context, in *TLHelpGetUserInfo, opts ...grpc.CallOption) (*Help_UserInfo, error) {
	out := new(Help_UserInfo)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_getUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpEditUserInfo(ctx context.Context, in *TLHelpEditUserInfo, opts ...grpc.CallOption) (*Help_UserInfo, error) {
	out := new(Help_UserInfo)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_editUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpGetPromoData(ctx context.Context, in *TLHelpGetPromoData, opts ...grpc.CallOption) (*Help_PromoData, error) {
	out := new(Help_PromoData)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_getPromoData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpHidePromoData(ctx context.Context, in *TLHelpHidePromoData, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_hidePromoData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpDismissSuggestion(ctx context.Context, in *TLHelpDismissSuggestion, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_dismissSuggestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCHelpClient) HelpGetCountriesList(ctx context.Context, in *TLHelpGetCountriesList, opts ...grpc.CallOption) (*Help_CountriesList, error) {
	out := new(Help_CountriesList)
	err := c.cc.Invoke(ctx, "/mtproto.RPCHelp/help_getCountriesList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCHelpServer is the server API for RPCHelp service.
type RPCHelpServer interface {
	// help.getConfig#c4f9186b = Config;
	HelpGetConfig(context.Context, *TLHelpGetConfig) (*Config, error)
	// help.getNearestDc#1fb33026 = NearestDc;
	HelpGetNearestDc(context.Context, *TLHelpGetNearestDc) (*NearestDc, error)
	// help.getAppUpdate#ae2de196 = help.AppUpdate;
	HelpGetAppUpdate(context.Context, *TLHelpGetAppUpdate) (*Help_AppUpdate, error)
	// help.saveAppLog#6f02f748 events:Vector<InputAppEvent> = Bool;
	HelpSaveAppLog(context.Context, *TLHelpSaveAppLog) (*Bool, error)
	// help.getInviteText#4d392343 = help.InviteText;
	HelpGetInviteText(context.Context, *TLHelpGetInviteText) (*Help_InviteText, error)
	// help.getSupport#9cdf08cd = help.Support;
	HelpGetSupport(context.Context, *TLHelpGetSupport) (*Help_Support, error)
	// help.getAppChangelog#9010ef6f prev_app_version:string = Updates;
	HelpGetAppChangelog(context.Context, *TLHelpGetAppChangelog) (*Updates, error)
	// help.getTermsOfService#350170f3 = help.TermsOfService;
	HelpGetTermsOfService(context.Context, *TLHelpGetTermsOfService) (*Help_TermsOfService, error)
	// help.setBotUpdatesStatus#ec22cfcd pending_updates_count:int message:string = Bool;
	HelpSetBotUpdatesStatus(context.Context, *TLHelpSetBotUpdatesStatus) (*Bool, error)
	// help.getCdnConfig#52029342 = CdnConfig;
	HelpGetCdnConfig(context.Context, *TLHelpGetCdnConfig) (*CdnConfig, error)
	// help.getWkConfig#86c965c = WkConfig;
	HelpGetWkConfig(context.Context, *TLHelpGetWkConfig) (*WkConfig, error)
	// help.getJsonConfig#5545a37f = DataJSON;
	HelpGetJsonConfig(context.Context, *TLHelpGetJsonConfig) (*DataJSON, error)
	// help.getScheme#dbb69a9e version:int = Scheme;
	HelpGetScheme(context.Context, *TLHelpGetScheme) (*Scheme, error)
	// help.getConfig#c4f9186b = Config;
	HelpGetConfig73(context.Context, *TLHelpGetConfig) (*Config73, error)
	// help.getAppUpdate#c812ac7e device_model:string system_version:string app_version:string lang_code:string = help.AppUpdate;
	HelpGetAppUpdate73(context.Context, *TLHelpGetAppUpdate73) (*Help_AppUpdate, error)
	// help.getInviteText#a4a95186 lang_code:string = help.InviteText;
	HelpGetInviteText73(context.Context, *TLHelpGetInviteText73) (*Help_InviteText, error)
	// help.getRecentMeUrls#3dc0f114 referer:string = help.RecentMeUrls;
	HelpGetRecentMeUrls(context.Context, *TLHelpGetRecentMeUrls) (*Help_RecentMeUrls, error)
	// help.getTermsOfService#37d78f83 lang_code:string = help.TermsOfService;
	HelpGetTermsOfService73(context.Context, *TLHelpGetTermsOfService73) (*Help_TermsOfService, error)
	// help.getConfig#c4f9186b = Config;
	HelpGetConfig82(context.Context, *TLHelpGetConfig) (*Config82, error)
	// help.getTermsOfServiceUpdate#2ca51fd1 = help.TermsOfServiceUpdate;
	HelpGetTermsOfServiceUpdate(context.Context, *TLHelpGetTermsOfServiceUpdate) (*Help_TermsOfServiceUpdate, error)
	// help.acceptTermsOfService#ee72f79a id:DataJSON = Bool;
	HelpAcceptTermsOfService(context.Context, *TLHelpAcceptTermsOfService) (*Bool, error)
	// help.getDeepLinkInfo#3fedc75f path:string = help.DeepLinkInfo;
	HelpGetDeepLinkInfo(context.Context, *TLHelpGetDeepLinkInfo) (*Help_DeepLinkInfo, error)
	// help.test#c0e202f7 = Bool;
	HelpTest(context.Context, *TLHelpTest) (*Bool, error)
	// help.getConfig#c4f9186b = Config;
	HelpGetConfig114(context.Context, *TLHelpGetConfig114) (*Config114, error)
	// help.getAppUpdate#522d5a7d source:string = help.AppUpdate;
	HelpGetAppUpdate114(context.Context, *TLHelpGetAppUpdate114) (*Help_AppUpdate, error)
	// help.getAppConfig#98914110 = JSONValue;
	HelpGetAppConfig(context.Context, *TLHelpGetAppConfig) (*JSONValue, error)
	// help.getPassportConfig#c661ad08 hash:int = help.PassportConfig;
	HelpGetPassportConfig(context.Context, *TLHelpGetPassportConfig) (*Help_PassportConfig, error)
	// help.getSupportName#d360e72c = help.SupportName;
	HelpGetSupportName(context.Context, *TLHelpGetSupportName) (*Help_SupportName, error)
	// help.getUserInfo#38a08d3 user_id:InputUser = help.UserInfo;
	HelpGetUserInfo(context.Context, *TLHelpGetUserInfo) (*Help_UserInfo, error)
	// help.editUserInfo#66b91b70 user_id:InputUser message:string entities:Vector<MessageEntity> = help.UserInfo;
	HelpEditUserInfo(context.Context, *TLHelpEditUserInfo) (*Help_UserInfo, error)
	// help.getPromoData#c0977421 = help.PromoData;
	HelpGetPromoData(context.Context, *TLHelpGetPromoData) (*Help_PromoData, error)
	// help.hidePromoData#1e251c95 peer:InputPeer = Bool;
	HelpHidePromoData(context.Context, *TLHelpHidePromoData) (*Bool, error)
	// help.dismissSuggestion#77fa99f suggestion:string = Bool;
	HelpDismissSuggestion(context.Context, *TLHelpDismissSuggestion) (*Bool, error)
	// help.getCountriesList#735787a8 lang_code:string hash:int = help.CountriesList;
	HelpGetCountriesList(context.Context, *TLHelpGetCountriesList) (*Help_CountriesList, error)
}

// UnimplementedRPCHelpServer can be embedded to have forward compatible implementations.
type UnimplementedRPCHelpServer struct {
}

func (*UnimplementedRPCHelpServer) HelpGetConfig(ctx context.Context, req *TLHelpGetConfig) (*Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetConfig not implemented")
}
func (*UnimplementedRPCHelpServer) HelpGetNearestDc(ctx context.Context, req *TLHelpGetNearestDc) (*NearestDc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetNearestDc not implemented")
}
func (*UnimplementedRPCHelpServer) HelpGetAppUpdate(ctx context.Context, req *TLHelpGetAppUpdate) (*Help_AppUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetAppUpdate not implemented")
}
func (*UnimplementedRPCHelpServer) HelpSaveAppLog(ctx context.Context, req *TLHelpSaveAppLog) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpSaveAppLog not implemented")
}
func (*UnimplementedRPCHelpServer) HelpGetInviteText(ctx context.Context, req *TLHelpGetInviteText) (*Help_InviteText, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetInviteText not implemented")
}
func (*UnimplementedRPCHelpServer) HelpGetSupport(ctx context.Context, req *TLHelpGetSupport) (*Help_Support, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetSupport not implemented")
}
func (*UnimplementedRPCHelpServer) HelpGetAppChangelog(ctx context.Context, req *TLHelpGetAppChangelog) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetAppChangelog not implemented")
}
func (*UnimplementedRPCHelpServer) HelpGetTermsOfService(ctx context.Context, req *TLHelpGetTermsOfService) (*Help_TermsOfService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetTermsOfService not implemented")
}
func (*UnimplementedRPCHelpServer) HelpSetBotUpdatesStatus(ctx context.Context, req *TLHelpSetBotUpdatesStatus) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpSetBotUpdatesStatus not implemented")
}
func (*UnimplementedRPCHelpServer) HelpGetCdnConfig(ctx context.Context, req *TLHelpGetCdnConfig) (*CdnConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetCdnConfig not implemented")
}
func (*UnimplementedRPCHelpServer) HelpGetWkConfig(ctx context.Context, req *TLHelpGetWkConfig) (*WkConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetWkConfig not implemented")
}
func (*UnimplementedRPCHelpServer) HelpGetJsonConfig(ctx context.Context, req *TLHelpGetJsonConfig) (*DataJSON, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetJsonConfig not implemented")
}
func (*UnimplementedRPCHelpServer) HelpGetScheme(ctx context.Context, req *TLHelpGetScheme) (*Scheme, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetScheme not implemented")
}
func (*UnimplementedRPCHelpServer) HelpGetConfig73(ctx context.Context, req *TLHelpGetConfig) (*Config73, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetConfig73 not implemented")
}
func (*UnimplementedRPCHelpServer) HelpGetAppUpdate73(ctx context.Context, req *TLHelpGetAppUpdate73) (*Help_AppUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetAppUpdate73 not implemented")
}
func (*UnimplementedRPCHelpServer) HelpGetInviteText73(ctx context.Context, req *TLHelpGetInviteText73) (*Help_InviteText, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetInviteText73 not implemented")
}
func (*UnimplementedRPCHelpServer) HelpGetRecentMeUrls(ctx context.Context, req *TLHelpGetRecentMeUrls) (*Help_RecentMeUrls, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetRecentMeUrls not implemented")
}
func (*UnimplementedRPCHelpServer) HelpGetTermsOfService73(ctx context.Context, req *TLHelpGetTermsOfService73) (*Help_TermsOfService, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetTermsOfService73 not implemented")
}
func (*UnimplementedRPCHelpServer) HelpGetConfig82(ctx context.Context, req *TLHelpGetConfig) (*Config82, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetConfig82 not implemented")
}
func (*UnimplementedRPCHelpServer) HelpGetTermsOfServiceUpdate(ctx context.Context, req *TLHelpGetTermsOfServiceUpdate) (*Help_TermsOfServiceUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetTermsOfServiceUpdate not implemented")
}
func (*UnimplementedRPCHelpServer) HelpAcceptTermsOfService(ctx context.Context, req *TLHelpAcceptTermsOfService) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpAcceptTermsOfService not implemented")
}
func (*UnimplementedRPCHelpServer) HelpGetDeepLinkInfo(ctx context.Context, req *TLHelpGetDeepLinkInfo) (*Help_DeepLinkInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetDeepLinkInfo not implemented")
}
func (*UnimplementedRPCHelpServer) HelpTest(ctx context.Context, req *TLHelpTest) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpTest not implemented")
}
func (*UnimplementedRPCHelpServer) HelpGetConfig114(ctx context.Context, req *TLHelpGetConfig114) (*Config114, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetConfig114 not implemented")
}
func (*UnimplementedRPCHelpServer) HelpGetAppUpdate114(ctx context.Context, req *TLHelpGetAppUpdate114) (*Help_AppUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetAppUpdate114 not implemented")
}
func (*UnimplementedRPCHelpServer) HelpGetAppConfig(ctx context.Context, req *TLHelpGetAppConfig) (*JSONValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetAppConfig not implemented")
}
func (*UnimplementedRPCHelpServer) HelpGetPassportConfig(ctx context.Context, req *TLHelpGetPassportConfig) (*Help_PassportConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetPassportConfig not implemented")
}
func (*UnimplementedRPCHelpServer) HelpGetSupportName(ctx context.Context, req *TLHelpGetSupportName) (*Help_SupportName, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetSupportName not implemented")
}
func (*UnimplementedRPCHelpServer) HelpGetUserInfo(ctx context.Context, req *TLHelpGetUserInfo) (*Help_UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetUserInfo not implemented")
}
func (*UnimplementedRPCHelpServer) HelpEditUserInfo(ctx context.Context, req *TLHelpEditUserInfo) (*Help_UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpEditUserInfo not implemented")
}
func (*UnimplementedRPCHelpServer) HelpGetPromoData(ctx context.Context, req *TLHelpGetPromoData) (*Help_PromoData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetPromoData not implemented")
}
func (*UnimplementedRPCHelpServer) HelpHidePromoData(ctx context.Context, req *TLHelpHidePromoData) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpHidePromoData not implemented")
}
func (*UnimplementedRPCHelpServer) HelpDismissSuggestion(ctx context.Context, req *TLHelpDismissSuggestion) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpDismissSuggestion not implemented")
}
func (*UnimplementedRPCHelpServer) HelpGetCountriesList(ctx context.Context, req *TLHelpGetCountriesList) (*Help_CountriesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelpGetCountriesList not implemented")
}

func RegisterRPCHelpServer(s *grpc.Server, srv RPCHelpServer) {
	s.RegisterService(&_RPCHelp_serviceDesc, srv)
}

func _RPCHelp_HelpGetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpGetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetConfig(ctx, req.(*TLHelpGetConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpGetNearestDc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetNearestDc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetNearestDc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpGetNearestDc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetNearestDc(ctx, req.(*TLHelpGetNearestDc))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpGetAppUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetAppUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetAppUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpGetAppUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetAppUpdate(ctx, req.(*TLHelpGetAppUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpSaveAppLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpSaveAppLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpSaveAppLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpSaveAppLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpSaveAppLog(ctx, req.(*TLHelpSaveAppLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpGetInviteText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetInviteText)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetInviteText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpGetInviteText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetInviteText(ctx, req.(*TLHelpGetInviteText))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpGetSupport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetSupport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetSupport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpGetSupport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetSupport(ctx, req.(*TLHelpGetSupport))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpGetAppChangelog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetAppChangelog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetAppChangelog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpGetAppChangelog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetAppChangelog(ctx, req.(*TLHelpGetAppChangelog))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpGetTermsOfService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetTermsOfService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetTermsOfService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpGetTermsOfService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetTermsOfService(ctx, req.(*TLHelpGetTermsOfService))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpSetBotUpdatesStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpSetBotUpdatesStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpSetBotUpdatesStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpSetBotUpdatesStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpSetBotUpdatesStatus(ctx, req.(*TLHelpSetBotUpdatesStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpGetCdnConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetCdnConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetCdnConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpGetCdnConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetCdnConfig(ctx, req.(*TLHelpGetCdnConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpGetWkConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetWkConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetWkConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpGetWkConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetWkConfig(ctx, req.(*TLHelpGetWkConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpGetJsonConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetJsonConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetJsonConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpGetJsonConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetJsonConfig(ctx, req.(*TLHelpGetJsonConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpGetScheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetScheme)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetScheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpGetScheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetScheme(ctx, req.(*TLHelpGetScheme))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpGetConfig73_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetConfig73(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpGetConfig73",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetConfig73(ctx, req.(*TLHelpGetConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpGetAppUpdate73_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetAppUpdate73)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetAppUpdate73(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpGetAppUpdate73",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetAppUpdate73(ctx, req.(*TLHelpGetAppUpdate73))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpGetInviteText73_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetInviteText73)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetInviteText73(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpGetInviteText73",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetInviteText73(ctx, req.(*TLHelpGetInviteText73))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpGetRecentMeUrls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetRecentMeUrls)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetRecentMeUrls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpGetRecentMeUrls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetRecentMeUrls(ctx, req.(*TLHelpGetRecentMeUrls))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpGetTermsOfService73_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetTermsOfService73)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetTermsOfService73(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpGetTermsOfService73",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetTermsOfService73(ctx, req.(*TLHelpGetTermsOfService73))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpGetConfig82_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetConfig82(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpGetConfig82",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetConfig82(ctx, req.(*TLHelpGetConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpGetTermsOfServiceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetTermsOfServiceUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetTermsOfServiceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpGetTermsOfServiceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetTermsOfServiceUpdate(ctx, req.(*TLHelpGetTermsOfServiceUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpAcceptTermsOfService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpAcceptTermsOfService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpAcceptTermsOfService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpAcceptTermsOfService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpAcceptTermsOfService(ctx, req.(*TLHelpAcceptTermsOfService))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpGetDeepLinkInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetDeepLinkInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetDeepLinkInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpGetDeepLinkInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetDeepLinkInfo(ctx, req.(*TLHelpGetDeepLinkInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpTest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpTest(ctx, req.(*TLHelpTest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpGetConfig114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetConfig114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetConfig114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpGetConfig114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetConfig114(ctx, req.(*TLHelpGetConfig114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpGetAppUpdate114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetAppUpdate114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetAppUpdate114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpGetAppUpdate114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetAppUpdate114(ctx, req.(*TLHelpGetAppUpdate114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpGetAppConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetAppConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetAppConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpGetAppConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetAppConfig(ctx, req.(*TLHelpGetAppConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpGetPassportConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetPassportConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetPassportConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpGetPassportConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetPassportConfig(ctx, req.(*TLHelpGetPassportConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpGetSupportName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetSupportName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetSupportName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpGetSupportName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetSupportName(ctx, req.(*TLHelpGetSupportName))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpGetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetUserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpGetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetUserInfo(ctx, req.(*TLHelpGetUserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpEditUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpEditUserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpEditUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpEditUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpEditUserInfo(ctx, req.(*TLHelpEditUserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpGetPromoData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetPromoData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetPromoData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpGetPromoData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetPromoData(ctx, req.(*TLHelpGetPromoData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpHidePromoData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpHidePromoData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpHidePromoData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpHidePromoData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpHidePromoData(ctx, req.(*TLHelpHidePromoData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpDismissSuggestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpDismissSuggestion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpDismissSuggestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpDismissSuggestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpDismissSuggestion(ctx, req.(*TLHelpDismissSuggestion))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCHelp_HelpGetCountriesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLHelpGetCountriesList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCHelpServer).HelpGetCountriesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCHelp/HelpGetCountriesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCHelpServer).HelpGetCountriesList(ctx, req.(*TLHelpGetCountriesList))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCHelp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCHelp",
	HandlerType: (*RPCHelpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "help_getConfig",
			Handler:    _RPCHelp_HelpGetConfig_Handler,
		},
		{
			MethodName: "help_getNearestDc",
			Handler:    _RPCHelp_HelpGetNearestDc_Handler,
		},
		{
			MethodName: "help_getAppUpdate",
			Handler:    _RPCHelp_HelpGetAppUpdate_Handler,
		},
		{
			MethodName: "help_saveAppLog",
			Handler:    _RPCHelp_HelpSaveAppLog_Handler,
		},
		{
			MethodName: "help_getInviteText",
			Handler:    _RPCHelp_HelpGetInviteText_Handler,
		},
		{
			MethodName: "help_getSupport",
			Handler:    _RPCHelp_HelpGetSupport_Handler,
		},
		{
			MethodName: "help_getAppChangelog",
			Handler:    _RPCHelp_HelpGetAppChangelog_Handler,
		},
		{
			MethodName: "help_getTermsOfService",
			Handler:    _RPCHelp_HelpGetTermsOfService_Handler,
		},
		{
			MethodName: "help_setBotUpdatesStatus",
			Handler:    _RPCHelp_HelpSetBotUpdatesStatus_Handler,
		},
		{
			MethodName: "help_getCdnConfig",
			Handler:    _RPCHelp_HelpGetCdnConfig_Handler,
		},
		{
			MethodName: "help_getWkConfig",
			Handler:    _RPCHelp_HelpGetWkConfig_Handler,
		},
		{
			MethodName: "help_getJsonConfig",
			Handler:    _RPCHelp_HelpGetJsonConfig_Handler,
		},
		{
			MethodName: "help_getScheme",
			Handler:    _RPCHelp_HelpGetScheme_Handler,
		},
		{
			MethodName: "help_getConfig73",
			Handler:    _RPCHelp_HelpGetConfig73_Handler,
		},
		{
			MethodName: "help_getAppUpdate73",
			Handler:    _RPCHelp_HelpGetAppUpdate73_Handler,
		},
		{
			MethodName: "help_getInviteText73",
			Handler:    _RPCHelp_HelpGetInviteText73_Handler,
		},
		{
			MethodName: "help_getRecentMeUrls",
			Handler:    _RPCHelp_HelpGetRecentMeUrls_Handler,
		},
		{
			MethodName: "help_getTermsOfService73",
			Handler:    _RPCHelp_HelpGetTermsOfService73_Handler,
		},
		{
			MethodName: "help_getConfig82",
			Handler:    _RPCHelp_HelpGetConfig82_Handler,
		},
		{
			MethodName: "help_getTermsOfServiceUpdate",
			Handler:    _RPCHelp_HelpGetTermsOfServiceUpdate_Handler,
		},
		{
			MethodName: "help_acceptTermsOfService",
			Handler:    _RPCHelp_HelpAcceptTermsOfService_Handler,
		},
		{
			MethodName: "help_getDeepLinkInfo",
			Handler:    _RPCHelp_HelpGetDeepLinkInfo_Handler,
		},
		{
			MethodName: "help_test",
			Handler:    _RPCHelp_HelpTest_Handler,
		},
		{
			MethodName: "help_getConfig114",
			Handler:    _RPCHelp_HelpGetConfig114_Handler,
		},
		{
			MethodName: "help_getAppUpdate114",
			Handler:    _RPCHelp_HelpGetAppUpdate114_Handler,
		},
		{
			MethodName: "help_getAppConfig",
			Handler:    _RPCHelp_HelpGetAppConfig_Handler,
		},
		{
			MethodName: "help_getPassportConfig",
			Handler:    _RPCHelp_HelpGetPassportConfig_Handler,
		},
		{
			MethodName: "help_getSupportName",
			Handler:    _RPCHelp_HelpGetSupportName_Handler,
		},
		{
			MethodName: "help_getUserInfo",
			Handler:    _RPCHelp_HelpGetUserInfo_Handler,
		},
		{
			MethodName: "help_editUserInfo",
			Handler:    _RPCHelp_HelpEditUserInfo_Handler,
		},
		{
			MethodName: "help_getPromoData",
			Handler:    _RPCHelp_HelpGetPromoData_Handler,
		},
		{
			MethodName: "help_hidePromoData",
			Handler:    _RPCHelp_HelpHidePromoData_Handler,
		},
		{
			MethodName: "help_dismissSuggestion",
			Handler:    _RPCHelp_HelpDismissSuggestion_Handler,
		},
		{
			MethodName: "help_getCountriesList",
			Handler:    _RPCHelp_HelpGetCountriesList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

// RPCChannelsClient is the client API for RPCChannels service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCChannelsClient interface {
	// channels.readHistory#cc104937 channel:InputChannel max_id:int = Bool;
	ChannelsReadHistory(ctx context.Context, in *TLChannelsReadHistory, opts ...grpc.CallOption) (*Bool, error)
	// channels.deleteMessages#84c1fd4e channel:InputChannel id:Vector<int> = messages.AffectedMessages;
	ChannelsDeleteMessages(ctx context.Context, in *TLChannelsDeleteMessages, opts ...grpc.CallOption) (*Messages_AffectedMessages, error)
	// channels.deleteUserHistory#d10dd71b channel:InputChannel user_id:InputUser = messages.AffectedHistory;
	ChannelsDeleteUserHistory(ctx context.Context, in *TLChannelsDeleteUserHistory, opts ...grpc.CallOption) (*Messages_AffectedHistory, error)
	// channels.reportSpam#fe087810 channel:InputChannel user_id:InputUser id:Vector<int> = Bool;
	ChannelsReportSpam(ctx context.Context, in *TLChannelsReportSpam, opts ...grpc.CallOption) (*Bool, error)
	// channels.getMessages#93d7b347 channel:InputChannel id:Vector<int> = messages.Messages;
	ChannelsGetMessages(ctx context.Context, in *TLChannelsGetMessages, opts ...grpc.CallOption) (*Messages_Messages, error)
	// channels.getParticipants#24d98f92 channel:InputChannel filter:ChannelParticipantsFilter offset:int limit:int = channels.ChannelParticipants;
	ChannelsGetParticipants(ctx context.Context, in *TLChannelsGetParticipants, opts ...grpc.CallOption) (*Channels_ChannelParticipants, error)
	// channels.getParticipant#546dd7a6 channel:InputChannel user_id:InputUser = channels.ChannelParticipant;
	ChannelsGetParticipant(ctx context.Context, in *TLChannelsGetParticipant, opts ...grpc.CallOption) (*Channels_ChannelParticipant, error)
	// channels.getChannels#a7f6bbb id:Vector<InputChannel> = messages.Chats;
	ChannelsGetChannels(ctx context.Context, in *TLChannelsGetChannels, opts ...grpc.CallOption) (*Messages_Chats, error)
	// channels.getFullChannel#8736a09 channel:InputChannel = messages.ChatFull;
	ChannelsGetFullChannel(ctx context.Context, in *TLChannelsGetFullChannel, opts ...grpc.CallOption) (*Messages_ChatFull, error)
	// channels.createChannel#f4893d7f flags:# broadcast:flags.0?true megagroup:flags.1?true title:string about:string = Updates;
	ChannelsCreateChannel(ctx context.Context, in *TLChannelsCreateChannel, opts ...grpc.CallOption) (*Updates, error)
	// channels.editAbout#13e27f1e channel:InputChannel about:string = Bool;
	ChannelsEditAbout(ctx context.Context, in *TLChannelsEditAbout, opts ...grpc.CallOption) (*Bool, error)
	// channels.editAdmin#20b88214 channel:InputChannel user_id:InputUser admin_rights:ChannelAdminRights = Updates;
	ChannelsEditAdmin(ctx context.Context, in *TLChannelsEditAdmin, opts ...grpc.CallOption) (*Updates, error)
	// channels.editTitle#566decd0 channel:InputChannel title:string = Updates;
	ChannelsEditTitle(ctx context.Context, in *TLChannelsEditTitle, opts ...grpc.CallOption) (*Updates, error)
	// channels.editPhoto#f12e57c9 channel:InputChannel photo:InputChatPhoto = Updates;
	ChannelsEditPhoto(ctx context.Context, in *TLChannelsEditPhoto, opts ...grpc.CallOption) (*Updates, error)
	// channels.checkUsername#10e6bd2c channel:InputChannel username:string = Bool;
	ChannelsCheckUsername(ctx context.Context, in *TLChannelsCheckUsername, opts ...grpc.CallOption) (*Bool, error)
	// channels.updateUsername#3514b3de channel:InputChannel username:string = Bool;
	ChannelsUpdateUsername(ctx context.Context, in *TLChannelsUpdateUsername, opts ...grpc.CallOption) (*Bool, error)
	// channels.joinChannel#24b524c5 channel:InputChannel = Updates;
	ChannelsJoinChannel(ctx context.Context, in *TLChannelsJoinChannel, opts ...grpc.CallOption) (*Updates, error)
	// channels.leaveChannel#f836aa95 channel:InputChannel = Updates;
	ChannelsLeaveChannel(ctx context.Context, in *TLChannelsLeaveChannel, opts ...grpc.CallOption) (*Updates, error)
	// channels.inviteToChannel#199f3a6c channel:InputChannel users:Vector<InputUser> = Updates;
	ChannelsInviteToChannel(ctx context.Context, in *TLChannelsInviteToChannel, opts ...grpc.CallOption) (*Updates, error)
	// channels.exportInvite#c7560885 channel:InputChannel = ExportedChatInvite;
	ChannelsExportInvite(ctx context.Context, in *TLChannelsExportInvite, opts ...grpc.CallOption) (*ExportedChatInvite, error)
	// channels.deleteChannel#c0111fe3 channel:InputChannel = Updates;
	ChannelsDeleteChannel(ctx context.Context, in *TLChannelsDeleteChannel, opts ...grpc.CallOption) (*Updates, error)
	// channels.toggleInvites#49609307 channel:InputChannel enabled:Bool = Updates;
	ChannelsToggleInvites(ctx context.Context, in *TLChannelsToggleInvites, opts ...grpc.CallOption) (*Updates, error)
	// channels.exportMessageLink#c846d22d channel:InputChannel id:int = ExportedMessageLink;
	ChannelsExportMessageLink(ctx context.Context, in *TLChannelsExportMessageLink, opts ...grpc.CallOption) (*ExportedMessageLink, error)
	// channels.toggleSignatures#1f69b606 channel:InputChannel enabled:Bool = Updates;
	ChannelsToggleSignatures(ctx context.Context, in *TLChannelsToggleSignatures, opts ...grpc.CallOption) (*Updates, error)
	// channels.updatePinnedMessage#a72ded52 flags:# silent:flags.0?true channel:InputChannel id:int = Updates;
	ChannelsUpdatePinnedMessage(ctx context.Context, in *TLChannelsUpdatePinnedMessage, opts ...grpc.CallOption) (*Updates, error)
	// channels.getAdminedPublicChannels#8d8d82d7 = messages.Chats;
	ChannelsGetAdminedPublicChannels(ctx context.Context, in *TLChannelsGetAdminedPublicChannels, opts ...grpc.CallOption) (*Messages_Chats, error)
	// channels.editBanned#bfd915cd channel:InputChannel user_id:InputUser banned_rights:ChannelBannedRights = Updates;
	ChannelsEditBanned(ctx context.Context, in *TLChannelsEditBanned, opts ...grpc.CallOption) (*Updates, error)
	// channels.getAdminLog#33ddf480 flags:# channel:InputChannel q:string events_filter:flags.0?ChannelAdminLogEventsFilter admins:flags.1?Vector<InputUser> max_id:long min_id:long limit:int = channels.AdminLogResults;
	ChannelsGetAdminLog(ctx context.Context, in *TLChannelsGetAdminLog, opts ...grpc.CallOption) (*Channels_AdminLogResults, error)
	// channels.setStickers#ea8ca4f9 channel:InputChannel stickerset:InputStickerSet = Bool;
	ChannelsSetStickers(ctx context.Context, in *TLChannelsSetStickers, opts ...grpc.CallOption) (*Bool, error)
	// channels.readMessageContents#eab5dc38 channel:InputChannel id:Vector<int> = Bool;
	ChannelsReadMessageContents(ctx context.Context, in *TLChannelsReadMessageContents, opts ...grpc.CallOption) (*Bool, error)
	// channels.deleteHistory#af369d42 channel:InputChannel max_id:int = Bool;
	ChannelsDeleteHistory(ctx context.Context, in *TLChannelsDeleteHistory, opts ...grpc.CallOption) (*Bool, error)
	// channels.togglePreHistoryHidden#eabbb94c channel:InputChannel enabled:Bool = Updates;
	ChannelsTogglePreHistoryHidden(ctx context.Context, in *TLChannelsTogglePreHistoryHidden, opts ...grpc.CallOption) (*Updates, error)
	// channels.getParticipants#123e05e9 channel:InputChannel filter:ChannelParticipantsFilter offset:int limit:int hash:int = channels.ChannelParticipants;
	ChannelsGetParticipants73(ctx context.Context, in *TLChannelsGetParticipants73, opts ...grpc.CallOption) (*Channels_ChannelParticipants, error)
	// channels.editBanned2#75e6cdde channel_id:int is_silence:Bool is_text:Bool = Updates;
	ChannelsEditBanned2(ctx context.Context, in *TLChannelsEditBanned2, opts ...grpc.CallOption) (*Updates, error)
	// channels.getBanned2#895eb1c8 channel_id:int = Updates;
	ChannelsGetBanned2(ctx context.Context, in *TLChannelsGetBanned2, opts ...grpc.CallOption) (*Updates, error)
	// channels.getMessages#ad8c9a23 channel:InputChannel id:Vector<InputMessage> = messages.Messages;
	ChannelsGetMessages114(ctx context.Context, in *TLChannelsGetMessages114, opts ...grpc.CallOption) (*Messages_Messages, error)
	// channels.createChannel#3d5fb10f flags:# broadcast:flags.0?true megagroup:flags.1?true title:string about:string geo_point:flags.2?InputGeoPoint address:flags.2?string = Updates;
	ChannelsCreateChannel114(ctx context.Context, in *TLChannelsCreateChannel114, opts ...grpc.CallOption) (*Updates, error)
	// channels.editAdmin#d33c8902 channel:InputChannel user_id:InputUser admin_rights:ChatAdminRights rank:string = Updates;
	ChannelsEditAdmin114(ctx context.Context, in *TLChannelsEditAdmin114, opts ...grpc.CallOption) (*Updates, error)
	// channels.exportMessageLink#ceb77163 channel:InputChannel id:int grouped:Bool = ExportedMessageLink;
	ChannelsExportMessageLink114(ctx context.Context, in *TLChannelsExportMessageLink114, opts ...grpc.CallOption) (*ExportedMessageLink, error)
	// channels.getAdminedPublicChannels#f8b036af flags:# by_location:flags.0?true check_limit:flags.1?true = messages.Chats;
	ChannelsGetAdminedPublicChannels114(ctx context.Context, in *TLChannelsGetAdminedPublicChannels114, opts ...grpc.CallOption) (*Messages_Chats, error)
	// channels.editBanned#72796912 channel:InputChannel user_id:InputUser banned_rights:ChatBannedRights = Updates;
	ChannelsEditBanned114(ctx context.Context, in *TLChannelsEditBanned114, opts ...grpc.CallOption) (*Updates, error)
	// channels.getLeftChannels#8341ecc0 offset:int = messages.Chats;
	ChannelsGetLeftChannels(ctx context.Context, in *TLChannelsGetLeftChannels, opts ...grpc.CallOption) (*Messages_Chats, error)
	// channels.getGroupsForDiscussion#f5dad378 = messages.Chats;
	ChannelsGetGroupsForDiscussion(ctx context.Context, in *TLChannelsGetGroupsForDiscussion, opts ...grpc.CallOption) (*Messages_Chats, error)
	// channels.setDiscussionGroup#40582bb2 broadcast:InputChannel group:InputChannel = Bool;
	ChannelsSetDiscussionGroup(ctx context.Context, in *TLChannelsSetDiscussionGroup, opts ...grpc.CallOption) (*Bool, error)
	// channels.editCreator#8f38cd1f channel:InputChannel user_id:InputUser password:InputCheckPasswordSRP = Updates;
	ChannelsEditCreator(ctx context.Context, in *TLChannelsEditCreator, opts ...grpc.CallOption) (*Updates, error)
	// channels.editLocation#58e63f6d channel:InputChannel geo_point:InputGeoPoint address:string = Bool;
	ChannelsEditLocation(ctx context.Context, in *TLChannelsEditLocation, opts ...grpc.CallOption) (*Bool, error)
	// channels.toggleSlowMode#edd49ef0 channel:InputChannel seconds:int = Updates;
	ChannelsToggleSlowMode(ctx context.Context, in *TLChannelsToggleSlowMode, opts ...grpc.CallOption) (*Updates, error)
	// channels.getInactiveChannels#11e831ee = messages.InactiveChats;
	ChannelsGetInactiveChannels(ctx context.Context, in *TLChannelsGetInactiveChannels, opts ...grpc.CallOption) (*Messages_InactiveChats, error)
}

type rPCChannelsClient struct {
	cc *grpc.ClientConn
}

func NewRPCChannelsClient(cc *grpc.ClientConn) RPCChannelsClient {
	return &rPCChannelsClient{cc}
}

func (c *rPCChannelsClient) ChannelsReadHistory(ctx context.Context, in *TLChannelsReadHistory, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_readHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsDeleteMessages(ctx context.Context, in *TLChannelsDeleteMessages, opts ...grpc.CallOption) (*Messages_AffectedMessages, error) {
	out := new(Messages_AffectedMessages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_deleteMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsDeleteUserHistory(ctx context.Context, in *TLChannelsDeleteUserHistory, opts ...grpc.CallOption) (*Messages_AffectedHistory, error) {
	out := new(Messages_AffectedHistory)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_deleteUserHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsReportSpam(ctx context.Context, in *TLChannelsReportSpam, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_reportSpam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsGetMessages(ctx context.Context, in *TLChannelsGetMessages, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_getMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsGetParticipants(ctx context.Context, in *TLChannelsGetParticipants, opts ...grpc.CallOption) (*Channels_ChannelParticipants, error) {
	out := new(Channels_ChannelParticipants)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_getParticipants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsGetParticipant(ctx context.Context, in *TLChannelsGetParticipant, opts ...grpc.CallOption) (*Channels_ChannelParticipant, error) {
	out := new(Channels_ChannelParticipant)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_getParticipant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsGetChannels(ctx context.Context, in *TLChannelsGetChannels, opts ...grpc.CallOption) (*Messages_Chats, error) {
	out := new(Messages_Chats)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_getChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsGetFullChannel(ctx context.Context, in *TLChannelsGetFullChannel, opts ...grpc.CallOption) (*Messages_ChatFull, error) {
	out := new(Messages_ChatFull)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_getFullChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsCreateChannel(ctx context.Context, in *TLChannelsCreateChannel, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_createChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsEditAbout(ctx context.Context, in *TLChannelsEditAbout, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_editAbout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsEditAdmin(ctx context.Context, in *TLChannelsEditAdmin, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_editAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsEditTitle(ctx context.Context, in *TLChannelsEditTitle, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_editTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsEditPhoto(ctx context.Context, in *TLChannelsEditPhoto, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_editPhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsCheckUsername(ctx context.Context, in *TLChannelsCheckUsername, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_checkUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsUpdateUsername(ctx context.Context, in *TLChannelsUpdateUsername, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_updateUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsJoinChannel(ctx context.Context, in *TLChannelsJoinChannel, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_joinChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsLeaveChannel(ctx context.Context, in *TLChannelsLeaveChannel, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_leaveChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsInviteToChannel(ctx context.Context, in *TLChannelsInviteToChannel, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_inviteToChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsExportInvite(ctx context.Context, in *TLChannelsExportInvite, opts ...grpc.CallOption) (*ExportedChatInvite, error) {
	out := new(ExportedChatInvite)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_exportInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsDeleteChannel(ctx context.Context, in *TLChannelsDeleteChannel, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_deleteChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsToggleInvites(ctx context.Context, in *TLChannelsToggleInvites, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_toggleInvites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsExportMessageLink(ctx context.Context, in *TLChannelsExportMessageLink, opts ...grpc.CallOption) (*ExportedMessageLink, error) {
	out := new(ExportedMessageLink)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_exportMessageLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsToggleSignatures(ctx context.Context, in *TLChannelsToggleSignatures, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_toggleSignatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsUpdatePinnedMessage(ctx context.Context, in *TLChannelsUpdatePinnedMessage, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_updatePinnedMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsGetAdminedPublicChannels(ctx context.Context, in *TLChannelsGetAdminedPublicChannels, opts ...grpc.CallOption) (*Messages_Chats, error) {
	out := new(Messages_Chats)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_getAdminedPublicChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsEditBanned(ctx context.Context, in *TLChannelsEditBanned, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_editBanned", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsGetAdminLog(ctx context.Context, in *TLChannelsGetAdminLog, opts ...grpc.CallOption) (*Channels_AdminLogResults, error) {
	out := new(Channels_AdminLogResults)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_getAdminLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsSetStickers(ctx context.Context, in *TLChannelsSetStickers, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_setStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsReadMessageContents(ctx context.Context, in *TLChannelsReadMessageContents, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_readMessageContents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsDeleteHistory(ctx context.Context, in *TLChannelsDeleteHistory, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_deleteHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsTogglePreHistoryHidden(ctx context.Context, in *TLChannelsTogglePreHistoryHidden, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_togglePreHistoryHidden", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsGetParticipants73(ctx context.Context, in *TLChannelsGetParticipants73, opts ...grpc.CallOption) (*Channels_ChannelParticipants, error) {
	out := new(Channels_ChannelParticipants)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_getParticipants73", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsEditBanned2(ctx context.Context, in *TLChannelsEditBanned2, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_editBanned2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsGetBanned2(ctx context.Context, in *TLChannelsGetBanned2, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_getBanned2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsGetMessages114(ctx context.Context, in *TLChannelsGetMessages114, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_getMessages114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsCreateChannel114(ctx context.Context, in *TLChannelsCreateChannel114, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_createChannel114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsEditAdmin114(ctx context.Context, in *TLChannelsEditAdmin114, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_editAdmin114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsExportMessageLink114(ctx context.Context, in *TLChannelsExportMessageLink114, opts ...grpc.CallOption) (*ExportedMessageLink, error) {
	out := new(ExportedMessageLink)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_exportMessageLink114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsGetAdminedPublicChannels114(ctx context.Context, in *TLChannelsGetAdminedPublicChannels114, opts ...grpc.CallOption) (*Messages_Chats, error) {
	out := new(Messages_Chats)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_getAdminedPublicChannels114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsEditBanned114(ctx context.Context, in *TLChannelsEditBanned114, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_editBanned114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsGetLeftChannels(ctx context.Context, in *TLChannelsGetLeftChannels, opts ...grpc.CallOption) (*Messages_Chats, error) {
	out := new(Messages_Chats)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_getLeftChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsGetGroupsForDiscussion(ctx context.Context, in *TLChannelsGetGroupsForDiscussion, opts ...grpc.CallOption) (*Messages_Chats, error) {
	out := new(Messages_Chats)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_getGroupsForDiscussion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsSetDiscussionGroup(ctx context.Context, in *TLChannelsSetDiscussionGroup, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_setDiscussionGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsEditCreator(ctx context.Context, in *TLChannelsEditCreator, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_editCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsEditLocation(ctx context.Context, in *TLChannelsEditLocation, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_editLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsToggleSlowMode(ctx context.Context, in *TLChannelsToggleSlowMode, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_toggleSlowMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChannelsClient) ChannelsGetInactiveChannels(ctx context.Context, in *TLChannelsGetInactiveChannels, opts ...grpc.CallOption) (*Messages_InactiveChats, error) {
	out := new(Messages_InactiveChats)
	err := c.cc.Invoke(ctx, "/mtproto.RPCChannels/channels_getInactiveChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCChannelsServer is the server API for RPCChannels service.
type RPCChannelsServer interface {
	// channels.readHistory#cc104937 channel:InputChannel max_id:int = Bool;
	ChannelsReadHistory(context.Context, *TLChannelsReadHistory) (*Bool, error)
	// channels.deleteMessages#84c1fd4e channel:InputChannel id:Vector<int> = messages.AffectedMessages;
	ChannelsDeleteMessages(context.Context, *TLChannelsDeleteMessages) (*Messages_AffectedMessages, error)
	// channels.deleteUserHistory#d10dd71b channel:InputChannel user_id:InputUser = messages.AffectedHistory;
	ChannelsDeleteUserHistory(context.Context, *TLChannelsDeleteUserHistory) (*Messages_AffectedHistory, error)
	// channels.reportSpam#fe087810 channel:InputChannel user_id:InputUser id:Vector<int> = Bool;
	ChannelsReportSpam(context.Context, *TLChannelsReportSpam) (*Bool, error)
	// channels.getMessages#93d7b347 channel:InputChannel id:Vector<int> = messages.Messages;
	ChannelsGetMessages(context.Context, *TLChannelsGetMessages) (*Messages_Messages, error)
	// channels.getParticipants#24d98f92 channel:InputChannel filter:ChannelParticipantsFilter offset:int limit:int = channels.ChannelParticipants;
	ChannelsGetParticipants(context.Context, *TLChannelsGetParticipants) (*Channels_ChannelParticipants, error)
	// channels.getParticipant#546dd7a6 channel:InputChannel user_id:InputUser = channels.ChannelParticipant;
	ChannelsGetParticipant(context.Context, *TLChannelsGetParticipant) (*Channels_ChannelParticipant, error)
	// channels.getChannels#a7f6bbb id:Vector<InputChannel> = messages.Chats;
	ChannelsGetChannels(context.Context, *TLChannelsGetChannels) (*Messages_Chats, error)
	// channels.getFullChannel#8736a09 channel:InputChannel = messages.ChatFull;
	ChannelsGetFullChannel(context.Context, *TLChannelsGetFullChannel) (*Messages_ChatFull, error)
	// channels.createChannel#f4893d7f flags:# broadcast:flags.0?true megagroup:flags.1?true title:string about:string = Updates;
	ChannelsCreateChannel(context.Context, *TLChannelsCreateChannel) (*Updates, error)
	// channels.editAbout#13e27f1e channel:InputChannel about:string = Bool;
	ChannelsEditAbout(context.Context, *TLChannelsEditAbout) (*Bool, error)
	// channels.editAdmin#20b88214 channel:InputChannel user_id:InputUser admin_rights:ChannelAdminRights = Updates;
	ChannelsEditAdmin(context.Context, *TLChannelsEditAdmin) (*Updates, error)
	// channels.editTitle#566decd0 channel:InputChannel title:string = Updates;
	ChannelsEditTitle(context.Context, *TLChannelsEditTitle) (*Updates, error)
	// channels.editPhoto#f12e57c9 channel:InputChannel photo:InputChatPhoto = Updates;
	ChannelsEditPhoto(context.Context, *TLChannelsEditPhoto) (*Updates, error)
	// channels.checkUsername#10e6bd2c channel:InputChannel username:string = Bool;
	ChannelsCheckUsername(context.Context, *TLChannelsCheckUsername) (*Bool, error)
	// channels.updateUsername#3514b3de channel:InputChannel username:string = Bool;
	ChannelsUpdateUsername(context.Context, *TLChannelsUpdateUsername) (*Bool, error)
	// channels.joinChannel#24b524c5 channel:InputChannel = Updates;
	ChannelsJoinChannel(context.Context, *TLChannelsJoinChannel) (*Updates, error)
	// channels.leaveChannel#f836aa95 channel:InputChannel = Updates;
	ChannelsLeaveChannel(context.Context, *TLChannelsLeaveChannel) (*Updates, error)
	// channels.inviteToChannel#199f3a6c channel:InputChannel users:Vector<InputUser> = Updates;
	ChannelsInviteToChannel(context.Context, *TLChannelsInviteToChannel) (*Updates, error)
	// channels.exportInvite#c7560885 channel:InputChannel = ExportedChatInvite;
	ChannelsExportInvite(context.Context, *TLChannelsExportInvite) (*ExportedChatInvite, error)
	// channels.deleteChannel#c0111fe3 channel:InputChannel = Updates;
	ChannelsDeleteChannel(context.Context, *TLChannelsDeleteChannel) (*Updates, error)
	// channels.toggleInvites#49609307 channel:InputChannel enabled:Bool = Updates;
	ChannelsToggleInvites(context.Context, *TLChannelsToggleInvites) (*Updates, error)
	// channels.exportMessageLink#c846d22d channel:InputChannel id:int = ExportedMessageLink;
	ChannelsExportMessageLink(context.Context, *TLChannelsExportMessageLink) (*ExportedMessageLink, error)
	// channels.toggleSignatures#1f69b606 channel:InputChannel enabled:Bool = Updates;
	ChannelsToggleSignatures(context.Context, *TLChannelsToggleSignatures) (*Updates, error)
	// channels.updatePinnedMessage#a72ded52 flags:# silent:flags.0?true channel:InputChannel id:int = Updates;
	ChannelsUpdatePinnedMessage(context.Context, *TLChannelsUpdatePinnedMessage) (*Updates, error)
	// channels.getAdminedPublicChannels#8d8d82d7 = messages.Chats;
	ChannelsGetAdminedPublicChannels(context.Context, *TLChannelsGetAdminedPublicChannels) (*Messages_Chats, error)
	// channels.editBanned#bfd915cd channel:InputChannel user_id:InputUser banned_rights:ChannelBannedRights = Updates;
	ChannelsEditBanned(context.Context, *TLChannelsEditBanned) (*Updates, error)
	// channels.getAdminLog#33ddf480 flags:# channel:InputChannel q:string events_filter:flags.0?ChannelAdminLogEventsFilter admins:flags.1?Vector<InputUser> max_id:long min_id:long limit:int = channels.AdminLogResults;
	ChannelsGetAdminLog(context.Context, *TLChannelsGetAdminLog) (*Channels_AdminLogResults, error)
	// channels.setStickers#ea8ca4f9 channel:InputChannel stickerset:InputStickerSet = Bool;
	ChannelsSetStickers(context.Context, *TLChannelsSetStickers) (*Bool, error)
	// channels.readMessageContents#eab5dc38 channel:InputChannel id:Vector<int> = Bool;
	ChannelsReadMessageContents(context.Context, *TLChannelsReadMessageContents) (*Bool, error)
	// channels.deleteHistory#af369d42 channel:InputChannel max_id:int = Bool;
	ChannelsDeleteHistory(context.Context, *TLChannelsDeleteHistory) (*Bool, error)
	// channels.togglePreHistoryHidden#eabbb94c channel:InputChannel enabled:Bool = Updates;
	ChannelsTogglePreHistoryHidden(context.Context, *TLChannelsTogglePreHistoryHidden) (*Updates, error)
	// channels.getParticipants#123e05e9 channel:InputChannel filter:ChannelParticipantsFilter offset:int limit:int hash:int = channels.ChannelParticipants;
	ChannelsGetParticipants73(context.Context, *TLChannelsGetParticipants73) (*Channels_ChannelParticipants, error)
	// channels.editBanned2#75e6cdde channel_id:int is_silence:Bool is_text:Bool = Updates;
	ChannelsEditBanned2(context.Context, *TLChannelsEditBanned2) (*Updates, error)
	// channels.getBanned2#895eb1c8 channel_id:int = Updates;
	ChannelsGetBanned2(context.Context, *TLChannelsGetBanned2) (*Updates, error)
	// channels.getMessages#ad8c9a23 channel:InputChannel id:Vector<InputMessage> = messages.Messages;
	ChannelsGetMessages114(context.Context, *TLChannelsGetMessages114) (*Messages_Messages, error)
	// channels.createChannel#3d5fb10f flags:# broadcast:flags.0?true megagroup:flags.1?true title:string about:string geo_point:flags.2?InputGeoPoint address:flags.2?string = Updates;
	ChannelsCreateChannel114(context.Context, *TLChannelsCreateChannel114) (*Updates, error)
	// channels.editAdmin#d33c8902 channel:InputChannel user_id:InputUser admin_rights:ChatAdminRights rank:string = Updates;
	ChannelsEditAdmin114(context.Context, *TLChannelsEditAdmin114) (*Updates, error)
	// channels.exportMessageLink#ceb77163 channel:InputChannel id:int grouped:Bool = ExportedMessageLink;
	ChannelsExportMessageLink114(context.Context, *TLChannelsExportMessageLink114) (*ExportedMessageLink, error)
	// channels.getAdminedPublicChannels#f8b036af flags:# by_location:flags.0?true check_limit:flags.1?true = messages.Chats;
	ChannelsGetAdminedPublicChannels114(context.Context, *TLChannelsGetAdminedPublicChannels114) (*Messages_Chats, error)
	// channels.editBanned#72796912 channel:InputChannel user_id:InputUser banned_rights:ChatBannedRights = Updates;
	ChannelsEditBanned114(context.Context, *TLChannelsEditBanned114) (*Updates, error)
	// channels.getLeftChannels#8341ecc0 offset:int = messages.Chats;
	ChannelsGetLeftChannels(context.Context, *TLChannelsGetLeftChannels) (*Messages_Chats, error)
	// channels.getGroupsForDiscussion#f5dad378 = messages.Chats;
	ChannelsGetGroupsForDiscussion(context.Context, *TLChannelsGetGroupsForDiscussion) (*Messages_Chats, error)
	// channels.setDiscussionGroup#40582bb2 broadcast:InputChannel group:InputChannel = Bool;
	ChannelsSetDiscussionGroup(context.Context, *TLChannelsSetDiscussionGroup) (*Bool, error)
	// channels.editCreator#8f38cd1f channel:InputChannel user_id:InputUser password:InputCheckPasswordSRP = Updates;
	ChannelsEditCreator(context.Context, *TLChannelsEditCreator) (*Updates, error)
	// channels.editLocation#58e63f6d channel:InputChannel geo_point:InputGeoPoint address:string = Bool;
	ChannelsEditLocation(context.Context, *TLChannelsEditLocation) (*Bool, error)
	// channels.toggleSlowMode#edd49ef0 channel:InputChannel seconds:int = Updates;
	ChannelsToggleSlowMode(context.Context, *TLChannelsToggleSlowMode) (*Updates, error)
	// channels.getInactiveChannels#11e831ee = messages.InactiveChats;
	ChannelsGetInactiveChannels(context.Context, *TLChannelsGetInactiveChannels) (*Messages_InactiveChats, error)
}

// UnimplementedRPCChannelsServer can be embedded to have forward compatible implementations.
type UnimplementedRPCChannelsServer struct {
}

func (*UnimplementedRPCChannelsServer) ChannelsReadHistory(ctx context.Context, req *TLChannelsReadHistory) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsReadHistory not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsDeleteMessages(ctx context.Context, req *TLChannelsDeleteMessages) (*Messages_AffectedMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsDeleteMessages not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsDeleteUserHistory(ctx context.Context, req *TLChannelsDeleteUserHistory) (*Messages_AffectedHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsDeleteUserHistory not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsReportSpam(ctx context.Context, req *TLChannelsReportSpam) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsReportSpam not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsGetMessages(ctx context.Context, req *TLChannelsGetMessages) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetMessages not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsGetParticipants(ctx context.Context, req *TLChannelsGetParticipants) (*Channels_ChannelParticipants, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetParticipants not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsGetParticipant(ctx context.Context, req *TLChannelsGetParticipant) (*Channels_ChannelParticipant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetParticipant not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsGetChannels(ctx context.Context, req *TLChannelsGetChannels) (*Messages_Chats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetChannels not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsGetFullChannel(ctx context.Context, req *TLChannelsGetFullChannel) (*Messages_ChatFull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetFullChannel not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsCreateChannel(ctx context.Context, req *TLChannelsCreateChannel) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsCreateChannel not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsEditAbout(ctx context.Context, req *TLChannelsEditAbout) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsEditAbout not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsEditAdmin(ctx context.Context, req *TLChannelsEditAdmin) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsEditAdmin not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsEditTitle(ctx context.Context, req *TLChannelsEditTitle) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsEditTitle not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsEditPhoto(ctx context.Context, req *TLChannelsEditPhoto) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsEditPhoto not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsCheckUsername(ctx context.Context, req *TLChannelsCheckUsername) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsCheckUsername not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsUpdateUsername(ctx context.Context, req *TLChannelsUpdateUsername) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsUpdateUsername not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsJoinChannel(ctx context.Context, req *TLChannelsJoinChannel) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsJoinChannel not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsLeaveChannel(ctx context.Context, req *TLChannelsLeaveChannel) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsLeaveChannel not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsInviteToChannel(ctx context.Context, req *TLChannelsInviteToChannel) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsInviteToChannel not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsExportInvite(ctx context.Context, req *TLChannelsExportInvite) (*ExportedChatInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsExportInvite not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsDeleteChannel(ctx context.Context, req *TLChannelsDeleteChannel) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsDeleteChannel not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsToggleInvites(ctx context.Context, req *TLChannelsToggleInvites) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsToggleInvites not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsExportMessageLink(ctx context.Context, req *TLChannelsExportMessageLink) (*ExportedMessageLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsExportMessageLink not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsToggleSignatures(ctx context.Context, req *TLChannelsToggleSignatures) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsToggleSignatures not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsUpdatePinnedMessage(ctx context.Context, req *TLChannelsUpdatePinnedMessage) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsUpdatePinnedMessage not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsGetAdminedPublicChannels(ctx context.Context, req *TLChannelsGetAdminedPublicChannels) (*Messages_Chats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetAdminedPublicChannels not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsEditBanned(ctx context.Context, req *TLChannelsEditBanned) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsEditBanned not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsGetAdminLog(ctx context.Context, req *TLChannelsGetAdminLog) (*Channels_AdminLogResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetAdminLog not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsSetStickers(ctx context.Context, req *TLChannelsSetStickers) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsSetStickers not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsReadMessageContents(ctx context.Context, req *TLChannelsReadMessageContents) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsReadMessageContents not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsDeleteHistory(ctx context.Context, req *TLChannelsDeleteHistory) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsDeleteHistory not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsTogglePreHistoryHidden(ctx context.Context, req *TLChannelsTogglePreHistoryHidden) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsTogglePreHistoryHidden not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsGetParticipants73(ctx context.Context, req *TLChannelsGetParticipants73) (*Channels_ChannelParticipants, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetParticipants73 not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsEditBanned2(ctx context.Context, req *TLChannelsEditBanned2) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsEditBanned2 not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsGetBanned2(ctx context.Context, req *TLChannelsGetBanned2) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetBanned2 not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsGetMessages114(ctx context.Context, req *TLChannelsGetMessages114) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetMessages114 not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsCreateChannel114(ctx context.Context, req *TLChannelsCreateChannel114) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsCreateChannel114 not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsEditAdmin114(ctx context.Context, req *TLChannelsEditAdmin114) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsEditAdmin114 not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsExportMessageLink114(ctx context.Context, req *TLChannelsExportMessageLink114) (*ExportedMessageLink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsExportMessageLink114 not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsGetAdminedPublicChannels114(ctx context.Context, req *TLChannelsGetAdminedPublicChannels114) (*Messages_Chats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetAdminedPublicChannels114 not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsEditBanned114(ctx context.Context, req *TLChannelsEditBanned114) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsEditBanned114 not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsGetLeftChannels(ctx context.Context, req *TLChannelsGetLeftChannels) (*Messages_Chats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetLeftChannels not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsGetGroupsForDiscussion(ctx context.Context, req *TLChannelsGetGroupsForDiscussion) (*Messages_Chats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetGroupsForDiscussion not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsSetDiscussionGroup(ctx context.Context, req *TLChannelsSetDiscussionGroup) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsSetDiscussionGroup not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsEditCreator(ctx context.Context, req *TLChannelsEditCreator) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsEditCreator not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsEditLocation(ctx context.Context, req *TLChannelsEditLocation) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsEditLocation not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsToggleSlowMode(ctx context.Context, req *TLChannelsToggleSlowMode) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsToggleSlowMode not implemented")
}
func (*UnimplementedRPCChannelsServer) ChannelsGetInactiveChannels(ctx context.Context, req *TLChannelsGetInactiveChannels) (*Messages_InactiveChats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelsGetInactiveChannels not implemented")
}

func RegisterRPCChannelsServer(s *grpc.Server, srv RPCChannelsServer) {
	s.RegisterService(&_RPCChannels_serviceDesc, srv)
}

func _RPCChannels_ChannelsReadHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsReadHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsReadHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsReadHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsReadHistory(ctx, req.(*TLChannelsReadHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsDeleteMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsDeleteMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsDeleteMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsDeleteMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsDeleteMessages(ctx, req.(*TLChannelsDeleteMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsDeleteUserHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsDeleteUserHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsDeleteUserHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsDeleteUserHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsDeleteUserHistory(ctx, req.(*TLChannelsDeleteUserHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsReportSpam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsReportSpam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsReportSpam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsReportSpam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsReportSpam(ctx, req.(*TLChannelsReportSpam))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsGetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsGetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsGetMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsGetMessages(ctx, req.(*TLChannelsGetMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsGetParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetParticipants)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsGetParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsGetParticipants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsGetParticipants(ctx, req.(*TLChannelsGetParticipants))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsGetParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetParticipant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsGetParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsGetParticipant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsGetParticipant(ctx, req.(*TLChannelsGetParticipant))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsGetChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetChannels)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsGetChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsGetChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsGetChannels(ctx, req.(*TLChannelsGetChannels))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsGetFullChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetFullChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsGetFullChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsGetFullChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsGetFullChannel(ctx, req.(*TLChannelsGetFullChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsCreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsCreateChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsCreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsCreateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsCreateChannel(ctx, req.(*TLChannelsCreateChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsEditAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditAbout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsEditAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsEditAbout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsEditAbout(ctx, req.(*TLChannelsEditAbout))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsEditAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsEditAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsEditAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsEditAdmin(ctx, req.(*TLChannelsEditAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsEditTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsEditTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsEditTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsEditTitle(ctx, req.(*TLChannelsEditTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsEditPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditPhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsEditPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsEditPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsEditPhoto(ctx, req.(*TLChannelsEditPhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsCheckUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsCheckUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsCheckUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsCheckUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsCheckUsername(ctx, req.(*TLChannelsCheckUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsUpdateUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsUpdateUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsUpdateUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsUpdateUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsUpdateUsername(ctx, req.(*TLChannelsUpdateUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsJoinChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsJoinChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsJoinChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsJoinChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsJoinChannel(ctx, req.(*TLChannelsJoinChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsLeaveChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsLeaveChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsLeaveChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsLeaveChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsLeaveChannel(ctx, req.(*TLChannelsLeaveChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsInviteToChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsInviteToChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsInviteToChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsInviteToChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsInviteToChannel(ctx, req.(*TLChannelsInviteToChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsExportInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsExportInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsExportInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsExportInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsExportInvite(ctx, req.(*TLChannelsExportInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsDeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsDeleteChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsDeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsDeleteChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsDeleteChannel(ctx, req.(*TLChannelsDeleteChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsToggleInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsToggleInvites)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsToggleInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsToggleInvites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsToggleInvites(ctx, req.(*TLChannelsToggleInvites))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsExportMessageLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsExportMessageLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsExportMessageLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsExportMessageLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsExportMessageLink(ctx, req.(*TLChannelsExportMessageLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsToggleSignatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsToggleSignatures)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsToggleSignatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsToggleSignatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsToggleSignatures(ctx, req.(*TLChannelsToggleSignatures))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsUpdatePinnedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsUpdatePinnedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsUpdatePinnedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsUpdatePinnedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsUpdatePinnedMessage(ctx, req.(*TLChannelsUpdatePinnedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsGetAdminedPublicChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetAdminedPublicChannels)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsGetAdminedPublicChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsGetAdminedPublicChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsGetAdminedPublicChannels(ctx, req.(*TLChannelsGetAdminedPublicChannels))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsEditBanned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditBanned)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsEditBanned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsEditBanned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsEditBanned(ctx, req.(*TLChannelsEditBanned))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsGetAdminLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetAdminLog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsGetAdminLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsGetAdminLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsGetAdminLog(ctx, req.(*TLChannelsGetAdminLog))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsSetStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsSetStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsSetStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsSetStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsSetStickers(ctx, req.(*TLChannelsSetStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsReadMessageContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsReadMessageContents)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsReadMessageContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsReadMessageContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsReadMessageContents(ctx, req.(*TLChannelsReadMessageContents))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsDeleteHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsDeleteHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsDeleteHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsDeleteHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsDeleteHistory(ctx, req.(*TLChannelsDeleteHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsTogglePreHistoryHidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsTogglePreHistoryHidden)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsTogglePreHistoryHidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsTogglePreHistoryHidden",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsTogglePreHistoryHidden(ctx, req.(*TLChannelsTogglePreHistoryHidden))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsGetParticipants73_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetParticipants73)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsGetParticipants73(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsGetParticipants73",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsGetParticipants73(ctx, req.(*TLChannelsGetParticipants73))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsEditBanned2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditBanned2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsEditBanned2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsEditBanned2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsEditBanned2(ctx, req.(*TLChannelsEditBanned2))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsGetBanned2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetBanned2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsGetBanned2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsGetBanned2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsGetBanned2(ctx, req.(*TLChannelsGetBanned2))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsGetMessages114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetMessages114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsGetMessages114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsGetMessages114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsGetMessages114(ctx, req.(*TLChannelsGetMessages114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsCreateChannel114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsCreateChannel114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsCreateChannel114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsCreateChannel114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsCreateChannel114(ctx, req.(*TLChannelsCreateChannel114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsEditAdmin114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditAdmin114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsEditAdmin114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsEditAdmin114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsEditAdmin114(ctx, req.(*TLChannelsEditAdmin114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsExportMessageLink114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsExportMessageLink114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsExportMessageLink114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsExportMessageLink114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsExportMessageLink114(ctx, req.(*TLChannelsExportMessageLink114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsGetAdminedPublicChannels114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetAdminedPublicChannels114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsGetAdminedPublicChannels114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsGetAdminedPublicChannels114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsGetAdminedPublicChannels114(ctx, req.(*TLChannelsGetAdminedPublicChannels114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsEditBanned114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditBanned114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsEditBanned114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsEditBanned114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsEditBanned114(ctx, req.(*TLChannelsEditBanned114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsGetLeftChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetLeftChannels)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsGetLeftChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsGetLeftChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsGetLeftChannels(ctx, req.(*TLChannelsGetLeftChannels))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsGetGroupsForDiscussion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetGroupsForDiscussion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsGetGroupsForDiscussion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsGetGroupsForDiscussion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsGetGroupsForDiscussion(ctx, req.(*TLChannelsGetGroupsForDiscussion))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsSetDiscussionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsSetDiscussionGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsSetDiscussionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsSetDiscussionGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsSetDiscussionGroup(ctx, req.(*TLChannelsSetDiscussionGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsEditCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditCreator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsEditCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsEditCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsEditCreator(ctx, req.(*TLChannelsEditCreator))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsEditLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsEditLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsEditLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsEditLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsEditLocation(ctx, req.(*TLChannelsEditLocation))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsToggleSlowMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsToggleSlowMode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsToggleSlowMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsToggleSlowMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsToggleSlowMode(ctx, req.(*TLChannelsToggleSlowMode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChannels_ChannelsGetInactiveChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChannelsGetInactiveChannels)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChannelsServer).ChannelsGetInactiveChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCChannels/ChannelsGetInactiveChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChannelsServer).ChannelsGetInactiveChannels(ctx, req.(*TLChannelsGetInactiveChannels))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCChannels_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCChannels",
	HandlerType: (*RPCChannelsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "channels_readHistory",
			Handler:    _RPCChannels_ChannelsReadHistory_Handler,
		},
		{
			MethodName: "channels_deleteMessages",
			Handler:    _RPCChannels_ChannelsDeleteMessages_Handler,
		},
		{
			MethodName: "channels_deleteUserHistory",
			Handler:    _RPCChannels_ChannelsDeleteUserHistory_Handler,
		},
		{
			MethodName: "channels_reportSpam",
			Handler:    _RPCChannels_ChannelsReportSpam_Handler,
		},
		{
			MethodName: "channels_getMessages",
			Handler:    _RPCChannels_ChannelsGetMessages_Handler,
		},
		{
			MethodName: "channels_getParticipants",
			Handler:    _RPCChannels_ChannelsGetParticipants_Handler,
		},
		{
			MethodName: "channels_getParticipant",
			Handler:    _RPCChannels_ChannelsGetParticipant_Handler,
		},
		{
			MethodName: "channels_getChannels",
			Handler:    _RPCChannels_ChannelsGetChannels_Handler,
		},
		{
			MethodName: "channels_getFullChannel",
			Handler:    _RPCChannels_ChannelsGetFullChannel_Handler,
		},
		{
			MethodName: "channels_createChannel",
			Handler:    _RPCChannels_ChannelsCreateChannel_Handler,
		},
		{
			MethodName: "channels_editAbout",
			Handler:    _RPCChannels_ChannelsEditAbout_Handler,
		},
		{
			MethodName: "channels_editAdmin",
			Handler:    _RPCChannels_ChannelsEditAdmin_Handler,
		},
		{
			MethodName: "channels_editTitle",
			Handler:    _RPCChannels_ChannelsEditTitle_Handler,
		},
		{
			MethodName: "channels_editPhoto",
			Handler:    _RPCChannels_ChannelsEditPhoto_Handler,
		},
		{
			MethodName: "channels_checkUsername",
			Handler:    _RPCChannels_ChannelsCheckUsername_Handler,
		},
		{
			MethodName: "channels_updateUsername",
			Handler:    _RPCChannels_ChannelsUpdateUsername_Handler,
		},
		{
			MethodName: "channels_joinChannel",
			Handler:    _RPCChannels_ChannelsJoinChannel_Handler,
		},
		{
			MethodName: "channels_leaveChannel",
			Handler:    _RPCChannels_ChannelsLeaveChannel_Handler,
		},
		{
			MethodName: "channels_inviteToChannel",
			Handler:    _RPCChannels_ChannelsInviteToChannel_Handler,
		},
		{
			MethodName: "channels_exportInvite",
			Handler:    _RPCChannels_ChannelsExportInvite_Handler,
		},
		{
			MethodName: "channels_deleteChannel",
			Handler:    _RPCChannels_ChannelsDeleteChannel_Handler,
		},
		{
			MethodName: "channels_toggleInvites",
			Handler:    _RPCChannels_ChannelsToggleInvites_Handler,
		},
		{
			MethodName: "channels_exportMessageLink",
			Handler:    _RPCChannels_ChannelsExportMessageLink_Handler,
		},
		{
			MethodName: "channels_toggleSignatures",
			Handler:    _RPCChannels_ChannelsToggleSignatures_Handler,
		},
		{
			MethodName: "channels_updatePinnedMessage",
			Handler:    _RPCChannels_ChannelsUpdatePinnedMessage_Handler,
		},
		{
			MethodName: "channels_getAdminedPublicChannels",
			Handler:    _RPCChannels_ChannelsGetAdminedPublicChannels_Handler,
		},
		{
			MethodName: "channels_editBanned",
			Handler:    _RPCChannels_ChannelsEditBanned_Handler,
		},
		{
			MethodName: "channels_getAdminLog",
			Handler:    _RPCChannels_ChannelsGetAdminLog_Handler,
		},
		{
			MethodName: "channels_setStickers",
			Handler:    _RPCChannels_ChannelsSetStickers_Handler,
		},
		{
			MethodName: "channels_readMessageContents",
			Handler:    _RPCChannels_ChannelsReadMessageContents_Handler,
		},
		{
			MethodName: "channels_deleteHistory",
			Handler:    _RPCChannels_ChannelsDeleteHistory_Handler,
		},
		{
			MethodName: "channels_togglePreHistoryHidden",
			Handler:    _RPCChannels_ChannelsTogglePreHistoryHidden_Handler,
		},
		{
			MethodName: "channels_getParticipants73",
			Handler:    _RPCChannels_ChannelsGetParticipants73_Handler,
		},
		{
			MethodName: "channels_editBanned2",
			Handler:    _RPCChannels_ChannelsEditBanned2_Handler,
		},
		{
			MethodName: "channels_getBanned2",
			Handler:    _RPCChannels_ChannelsGetBanned2_Handler,
		},
		{
			MethodName: "channels_getMessages114",
			Handler:    _RPCChannels_ChannelsGetMessages114_Handler,
		},
		{
			MethodName: "channels_createChannel114",
			Handler:    _RPCChannels_ChannelsCreateChannel114_Handler,
		},
		{
			MethodName: "channels_editAdmin114",
			Handler:    _RPCChannels_ChannelsEditAdmin114_Handler,
		},
		{
			MethodName: "channels_exportMessageLink114",
			Handler:    _RPCChannels_ChannelsExportMessageLink114_Handler,
		},
		{
			MethodName: "channels_getAdminedPublicChannels114",
			Handler:    _RPCChannels_ChannelsGetAdminedPublicChannels114_Handler,
		},
		{
			MethodName: "channels_editBanned114",
			Handler:    _RPCChannels_ChannelsEditBanned114_Handler,
		},
		{
			MethodName: "channels_getLeftChannels",
			Handler:    _RPCChannels_ChannelsGetLeftChannels_Handler,
		},
		{
			MethodName: "channels_getGroupsForDiscussion",
			Handler:    _RPCChannels_ChannelsGetGroupsForDiscussion_Handler,
		},
		{
			MethodName: "channels_setDiscussionGroup",
			Handler:    _RPCChannels_ChannelsSetDiscussionGroup_Handler,
		},
		{
			MethodName: "channels_editCreator",
			Handler:    _RPCChannels_ChannelsEditCreator_Handler,
		},
		{
			MethodName: "channels_editLocation",
			Handler:    _RPCChannels_ChannelsEditLocation_Handler,
		},
		{
			MethodName: "channels_toggleSlowMode",
			Handler:    _RPCChannels_ChannelsToggleSlowMode_Handler,
		},
		{
			MethodName: "channels_getInactiveChannels",
			Handler:    _RPCChannels_ChannelsGetInactiveChannels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

// RPCBotsClient is the client API for RPCBots service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCBotsClient interface {
	// bots.sendCustomRequest#aa2769ed custom_method:string params:DataJSON = DataJSON;
	BotsSendCustomRequest(ctx context.Context, in *TLBotsSendCustomRequest, opts ...grpc.CallOption) (*DataJSON, error)
	// bots.answerWebhookJSONQuery#e6213f4d query_id:long data:DataJSON = Bool;
	BotsAnswerWebhookJSONQuery(ctx context.Context, in *TLBotsAnswerWebhookJSONQuery, opts ...grpc.CallOption) (*Bool, error)
	// bots.setBotCommands#805d46f6 commands:Vector<BotCommand> = Bool;
	BotsSetBotCommands(ctx context.Context, in *TLBotsSetBotCommands, opts ...grpc.CallOption) (*Bool, error)
}

type rPCBotsClient struct {
	cc *grpc.ClientConn
}

func NewRPCBotsClient(cc *grpc.ClientConn) RPCBotsClient {
	return &rPCBotsClient{cc}
}

func (c *rPCBotsClient) BotsSendCustomRequest(ctx context.Context, in *TLBotsSendCustomRequest, opts ...grpc.CallOption) (*DataJSON, error) {
	out := new(DataJSON)
	err := c.cc.Invoke(ctx, "/mtproto.RPCBots/bots_sendCustomRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBotsClient) BotsAnswerWebhookJSONQuery(ctx context.Context, in *TLBotsAnswerWebhookJSONQuery, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCBots/bots_answerWebhookJSONQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCBotsClient) BotsSetBotCommands(ctx context.Context, in *TLBotsSetBotCommands, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCBots/bots_setBotCommands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCBotsServer is the server API for RPCBots service.
type RPCBotsServer interface {
	// bots.sendCustomRequest#aa2769ed custom_method:string params:DataJSON = DataJSON;
	BotsSendCustomRequest(context.Context, *TLBotsSendCustomRequest) (*DataJSON, error)
	// bots.answerWebhookJSONQuery#e6213f4d query_id:long data:DataJSON = Bool;
	BotsAnswerWebhookJSONQuery(context.Context, *TLBotsAnswerWebhookJSONQuery) (*Bool, error)
	// bots.setBotCommands#805d46f6 commands:Vector<BotCommand> = Bool;
	BotsSetBotCommands(context.Context, *TLBotsSetBotCommands) (*Bool, error)
}

// UnimplementedRPCBotsServer can be embedded to have forward compatible implementations.
type UnimplementedRPCBotsServer struct {
}

func (*UnimplementedRPCBotsServer) BotsSendCustomRequest(ctx context.Context, req *TLBotsSendCustomRequest) (*DataJSON, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsSendCustomRequest not implemented")
}
func (*UnimplementedRPCBotsServer) BotsAnswerWebhookJSONQuery(ctx context.Context, req *TLBotsAnswerWebhookJSONQuery) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsAnswerWebhookJSONQuery not implemented")
}
func (*UnimplementedRPCBotsServer) BotsSetBotCommands(ctx context.Context, req *TLBotsSetBotCommands) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotsSetBotCommands not implemented")
}

func RegisterRPCBotsServer(s *grpc.Server, srv RPCBotsServer) {
	s.RegisterService(&_RPCBots_serviceDesc, srv)
}

func _RPCBots_BotsSendCustomRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsSendCustomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBotsServer).BotsSendCustomRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCBots/BotsSendCustomRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBotsServer).BotsSendCustomRequest(ctx, req.(*TLBotsSendCustomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBots_BotsAnswerWebhookJSONQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsAnswerWebhookJSONQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBotsServer).BotsAnswerWebhookJSONQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCBots/BotsAnswerWebhookJSONQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBotsServer).BotsAnswerWebhookJSONQuery(ctx, req.(*TLBotsAnswerWebhookJSONQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCBots_BotsSetBotCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLBotsSetBotCommands)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCBotsServer).BotsSetBotCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCBots/BotsSetBotCommands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCBotsServer).BotsSetBotCommands(ctx, req.(*TLBotsSetBotCommands))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCBots_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCBots",
	HandlerType: (*RPCBotsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "bots_sendCustomRequest",
			Handler:    _RPCBots_BotsSendCustomRequest_Handler,
		},
		{
			MethodName: "bots_answerWebhookJSONQuery",
			Handler:    _RPCBots_BotsAnswerWebhookJSONQuery_Handler,
		},
		{
			MethodName: "bots_setBotCommands",
			Handler:    _RPCBots_BotsSetBotCommands_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

// RPCPaymentsClient is the client API for RPCPayments service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCPaymentsClient interface {
	// payments.getPaymentForm#99f09745 msg_id:int = payments.PaymentForm;
	PaymentsGetPaymentForm(ctx context.Context, in *TLPaymentsGetPaymentForm, opts ...grpc.CallOption) (*Payments_PaymentForm, error)
	// payments.getPaymentReceipt#a092a980 msg_id:int = payments.PaymentReceipt;
	PaymentsGetPaymentReceipt(ctx context.Context, in *TLPaymentsGetPaymentReceipt, opts ...grpc.CallOption) (*Payments_PaymentReceipt, error)
	// payments.validateRequestedInfo#770a8e74 flags:# save:flags.0?true msg_id:int info:PaymentRequestedInfo = payments.ValidatedRequestedInfo;
	PaymentsValidateRequestedInfo(ctx context.Context, in *TLPaymentsValidateRequestedInfo, opts ...grpc.CallOption) (*Payments_ValidatedRequestedInfo, error)
	// payments.sendPaymentForm#2b8879b3 flags:# msg_id:int requested_info_id:flags.0?string shipping_option_id:flags.1?string credentials:InputPaymentCredentials = payments.PaymentResult;
	PaymentsSendPaymentForm(ctx context.Context, in *TLPaymentsSendPaymentForm, opts ...grpc.CallOption) (*Payments_PaymentResult, error)
	// payments.getSavedInfo#227d824b = payments.SavedInfo;
	PaymentsGetSavedInfo(ctx context.Context, in *TLPaymentsGetSavedInfo, opts ...grpc.CallOption) (*Payments_SavedInfo, error)
	// payments.clearSavedInfo#d83d70c1 flags:# credentials:flags.0?true info:flags.1?true = Bool;
	PaymentsClearSavedInfo(ctx context.Context, in *TLPaymentsClearSavedInfo, opts ...grpc.CallOption) (*Bool, error)
	// payments.getBankCardData#2e79d779 number:string = payments.BankCardData;
	PaymentsGetBankCardData(ctx context.Context, in *TLPaymentsGetBankCardData, opts ...grpc.CallOption) (*Payments_BankCardData, error)
}

type rPCPaymentsClient struct {
	cc *grpc.ClientConn
}

func NewRPCPaymentsClient(cc *grpc.ClientConn) RPCPaymentsClient {
	return &rPCPaymentsClient{cc}
}

func (c *rPCPaymentsClient) PaymentsGetPaymentForm(ctx context.Context, in *TLPaymentsGetPaymentForm, opts ...grpc.CallOption) (*Payments_PaymentForm, error) {
	out := new(Payments_PaymentForm)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPayments/payments_getPaymentForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPaymentsClient) PaymentsGetPaymentReceipt(ctx context.Context, in *TLPaymentsGetPaymentReceipt, opts ...grpc.CallOption) (*Payments_PaymentReceipt, error) {
	out := new(Payments_PaymentReceipt)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPayments/payments_getPaymentReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPaymentsClient) PaymentsValidateRequestedInfo(ctx context.Context, in *TLPaymentsValidateRequestedInfo, opts ...grpc.CallOption) (*Payments_ValidatedRequestedInfo, error) {
	out := new(Payments_ValidatedRequestedInfo)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPayments/payments_validateRequestedInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPaymentsClient) PaymentsSendPaymentForm(ctx context.Context, in *TLPaymentsSendPaymentForm, opts ...grpc.CallOption) (*Payments_PaymentResult, error) {
	out := new(Payments_PaymentResult)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPayments/payments_sendPaymentForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPaymentsClient) PaymentsGetSavedInfo(ctx context.Context, in *TLPaymentsGetSavedInfo, opts ...grpc.CallOption) (*Payments_SavedInfo, error) {
	out := new(Payments_SavedInfo)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPayments/payments_getSavedInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPaymentsClient) PaymentsClearSavedInfo(ctx context.Context, in *TLPaymentsClearSavedInfo, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPayments/payments_clearSavedInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCPaymentsClient) PaymentsGetBankCardData(ctx context.Context, in *TLPaymentsGetBankCardData, opts ...grpc.CallOption) (*Payments_BankCardData, error) {
	out := new(Payments_BankCardData)
	err := c.cc.Invoke(ctx, "/mtproto.RPCPayments/payments_getBankCardData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCPaymentsServer is the server API for RPCPayments service.
type RPCPaymentsServer interface {
	// payments.getPaymentForm#99f09745 msg_id:int = payments.PaymentForm;
	PaymentsGetPaymentForm(context.Context, *TLPaymentsGetPaymentForm) (*Payments_PaymentForm, error)
	// payments.getPaymentReceipt#a092a980 msg_id:int = payments.PaymentReceipt;
	PaymentsGetPaymentReceipt(context.Context, *TLPaymentsGetPaymentReceipt) (*Payments_PaymentReceipt, error)
	// payments.validateRequestedInfo#770a8e74 flags:# save:flags.0?true msg_id:int info:PaymentRequestedInfo = payments.ValidatedRequestedInfo;
	PaymentsValidateRequestedInfo(context.Context, *TLPaymentsValidateRequestedInfo) (*Payments_ValidatedRequestedInfo, error)
	// payments.sendPaymentForm#2b8879b3 flags:# msg_id:int requested_info_id:flags.0?string shipping_option_id:flags.1?string credentials:InputPaymentCredentials = payments.PaymentResult;
	PaymentsSendPaymentForm(context.Context, *TLPaymentsSendPaymentForm) (*Payments_PaymentResult, error)
	// payments.getSavedInfo#227d824b = payments.SavedInfo;
	PaymentsGetSavedInfo(context.Context, *TLPaymentsGetSavedInfo) (*Payments_SavedInfo, error)
	// payments.clearSavedInfo#d83d70c1 flags:# credentials:flags.0?true info:flags.1?true = Bool;
	PaymentsClearSavedInfo(context.Context, *TLPaymentsClearSavedInfo) (*Bool, error)
	// payments.getBankCardData#2e79d779 number:string = payments.BankCardData;
	PaymentsGetBankCardData(context.Context, *TLPaymentsGetBankCardData) (*Payments_BankCardData, error)
}

// UnimplementedRPCPaymentsServer can be embedded to have forward compatible implementations.
type UnimplementedRPCPaymentsServer struct {
}

func (*UnimplementedRPCPaymentsServer) PaymentsGetPaymentForm(ctx context.Context, req *TLPaymentsGetPaymentForm) (*Payments_PaymentForm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetPaymentForm not implemented")
}
func (*UnimplementedRPCPaymentsServer) PaymentsGetPaymentReceipt(ctx context.Context, req *TLPaymentsGetPaymentReceipt) (*Payments_PaymentReceipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetPaymentReceipt not implemented")
}
func (*UnimplementedRPCPaymentsServer) PaymentsValidateRequestedInfo(ctx context.Context, req *TLPaymentsValidateRequestedInfo) (*Payments_ValidatedRequestedInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsValidateRequestedInfo not implemented")
}
func (*UnimplementedRPCPaymentsServer) PaymentsSendPaymentForm(ctx context.Context, req *TLPaymentsSendPaymentForm) (*Payments_PaymentResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsSendPaymentForm not implemented")
}
func (*UnimplementedRPCPaymentsServer) PaymentsGetSavedInfo(ctx context.Context, req *TLPaymentsGetSavedInfo) (*Payments_SavedInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetSavedInfo not implemented")
}
func (*UnimplementedRPCPaymentsServer) PaymentsClearSavedInfo(ctx context.Context, req *TLPaymentsClearSavedInfo) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsClearSavedInfo not implemented")
}
func (*UnimplementedRPCPaymentsServer) PaymentsGetBankCardData(ctx context.Context, req *TLPaymentsGetBankCardData) (*Payments_BankCardData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentsGetBankCardData not implemented")
}

func RegisterRPCPaymentsServer(s *grpc.Server, srv RPCPaymentsServer) {
	s.RegisterService(&_RPCPayments_serviceDesc, srv)
}

func _RPCPayments_PaymentsGetPaymentForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetPaymentForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaymentsServer).PaymentsGetPaymentForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPayments/PaymentsGetPaymentForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaymentsServer).PaymentsGetPaymentForm(ctx, req.(*TLPaymentsGetPaymentForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPayments_PaymentsGetPaymentReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetPaymentReceipt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaymentsServer).PaymentsGetPaymentReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPayments/PaymentsGetPaymentReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaymentsServer).PaymentsGetPaymentReceipt(ctx, req.(*TLPaymentsGetPaymentReceipt))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPayments_PaymentsValidateRequestedInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsValidateRequestedInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaymentsServer).PaymentsValidateRequestedInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPayments/PaymentsValidateRequestedInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaymentsServer).PaymentsValidateRequestedInfo(ctx, req.(*TLPaymentsValidateRequestedInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPayments_PaymentsSendPaymentForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsSendPaymentForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaymentsServer).PaymentsSendPaymentForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPayments/PaymentsSendPaymentForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaymentsServer).PaymentsSendPaymentForm(ctx, req.(*TLPaymentsSendPaymentForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPayments_PaymentsGetSavedInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetSavedInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaymentsServer).PaymentsGetSavedInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPayments/PaymentsGetSavedInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaymentsServer).PaymentsGetSavedInfo(ctx, req.(*TLPaymentsGetSavedInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPayments_PaymentsClearSavedInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsClearSavedInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaymentsServer).PaymentsClearSavedInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPayments/PaymentsClearSavedInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaymentsServer).PaymentsClearSavedInfo(ctx, req.(*TLPaymentsClearSavedInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCPayments_PaymentsGetBankCardData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLPaymentsGetBankCardData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCPaymentsServer).PaymentsGetBankCardData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCPayments/PaymentsGetBankCardData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCPaymentsServer).PaymentsGetBankCardData(ctx, req.(*TLPaymentsGetBankCardData))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCPayments_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCPayments",
	HandlerType: (*RPCPaymentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "payments_getPaymentForm",
			Handler:    _RPCPayments_PaymentsGetPaymentForm_Handler,
		},
		{
			MethodName: "payments_getPaymentReceipt",
			Handler:    _RPCPayments_PaymentsGetPaymentReceipt_Handler,
		},
		{
			MethodName: "payments_validateRequestedInfo",
			Handler:    _RPCPayments_PaymentsValidateRequestedInfo_Handler,
		},
		{
			MethodName: "payments_sendPaymentForm",
			Handler:    _RPCPayments_PaymentsSendPaymentForm_Handler,
		},
		{
			MethodName: "payments_getSavedInfo",
			Handler:    _RPCPayments_PaymentsGetSavedInfo_Handler,
		},
		{
			MethodName: "payments_clearSavedInfo",
			Handler:    _RPCPayments_PaymentsClearSavedInfo_Handler,
		},
		{
			MethodName: "payments_getBankCardData",
			Handler:    _RPCPayments_PaymentsGetBankCardData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

// RPCUsersClient is the client API for RPCUsers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCUsersClient interface {
	// users.getUsers#d91a548 id:Vector<InputUser> = Vector<User>;
	UsersGetUsers(ctx context.Context, in *TLUsersGetUsers, opts ...grpc.CallOption) (*Vector_User, error)
	// users.getFullUser#ca30a5b1 id:InputUser = UserFull;
	UsersGetFullUser(ctx context.Context, in *TLUsersGetFullUser, opts ...grpc.CallOption) (*UserFull, error)
	// users.getUserInfo#f5d27282 id:InputUser = UserInfo;
	UsersGetUserInfo(ctx context.Context, in *TLUsersGetUserInfo, opts ...grpc.CallOption) (*UserInfo, error)
	// users.getUserInfoList#b0809aa7 type:int offset:int count:int = Vector<UserInfo>;
	UsersGetUserInfoList(ctx context.Context, in *TLUsersGetUserInfoList, opts ...grpc.CallOption) (*Vector_UserInfo, error)
	// users.getEnvelopeState#662f8850 eid:long access_hash:long = EnvelopeState;
	UsersGetEnvelopeState(ctx context.Context, in *TLUsersGetEnvelopeState, opts ...grpc.CallOption) (*EnvelopeState, error)
	// users.getEnvelopeInfo#fa469ec3 eid:long access_hash:long = EnvelopeInfo;
	UsersGetEnvelopeInfo(ctx context.Context, in *TLUsersGetEnvelopeInfo, opts ...grpc.CallOption) (*EnvelopeInfo, error)
	// users.getPointsHistory#7e44b70b type:int offset:int limit:int year:int = PointsHistoryResult;
	UsersGetPointsHistory(ctx context.Context, in *TLUsersGetPointsHistory, opts ...grpc.CallOption) (*PointsHistoryResult, error)
	// users.getPointsRank#538b283a type:int from_rank:int count:int = PointsRankResult;
	UsersGetPointsRank(ctx context.Context, in *TLUsersGetPointsRank, opts ...grpc.CallOption) (*PointsRankResult, error)
	// users.setPasswd#5ec5aa9c type:int phone_code:string old_pass:string passwd:string phone_number:string = IntResult;
	UsersSetPasswd(ctx context.Context, in *TLUsersSetPasswd, opts ...grpc.CallOption) (*IntResult, error)
	// users.checkPasswd#58f01737 type:int passwd:string phone_number:string = IntResult;
	UsersCheckPasswd(ctx context.Context, in *TLUsersCheckPasswd, opts ...grpc.CallOption) (*IntResult, error)
	// users.checkResetPasswdPhoneCode#7c210c23 type:int phone_code:string phone_number:string = IntResult;
	UsersCheckResetPasswdPhoneCode(ctx context.Context, in *TLUsersCheckResetPasswdPhoneCode, opts ...grpc.CallOption) (*IntResult, error)
	// users.sendResetPasswdPhoneCode#de0c351e type:int phone_number:string = IntResult;
	UsersSendResetPasswdPhoneCode(ctx context.Context, in *TLUsersSendResetPasswdPhoneCode, opts ...grpc.CallOption) (*IntResult, error)
	// users.setGender#865907ba json_content:string = IntResult;
	UsersSetGender(ctx context.Context, in *TLUsersSetGender, opts ...grpc.CallOption) (*IntResult, error)
	// users.setUserInfo#d41b94d9 json_content:string = IntResult;
	UsersSetUserInfo(ctx context.Context, in *TLUsersSetUserInfo, opts ...grpc.CallOption) (*IntResult, error)
	// users.setSecureValueErrors#90c894b5 id:InputUser errors:Vector<SecureValueError> = Bool;
	UsersSetSecureValueErrors(ctx context.Context, in *TLUsersSetSecureValueErrors, opts ...grpc.CallOption) (*Bool, error)
}

type rPCUsersClient struct {
	cc *grpc.ClientConn
}

func NewRPCUsersClient(cc *grpc.ClientConn) RPCUsersClient {
	return &rPCUsersClient{cc}
}

func (c *rPCUsersClient) UsersGetUsers(ctx context.Context, in *TLUsersGetUsers, opts ...grpc.CallOption) (*Vector_User, error) {
	out := new(Vector_User)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUsers/users_getUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUsersClient) UsersGetFullUser(ctx context.Context, in *TLUsersGetFullUser, opts ...grpc.CallOption) (*UserFull, error) {
	out := new(UserFull)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUsers/users_getFullUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUsersClient) UsersGetUserInfo(ctx context.Context, in *TLUsersGetUserInfo, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUsers/users_getUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUsersClient) UsersGetUserInfoList(ctx context.Context, in *TLUsersGetUserInfoList, opts ...grpc.CallOption) (*Vector_UserInfo, error) {
	out := new(Vector_UserInfo)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUsers/users_getUserInfoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUsersClient) UsersGetEnvelopeState(ctx context.Context, in *TLUsersGetEnvelopeState, opts ...grpc.CallOption) (*EnvelopeState, error) {
	out := new(EnvelopeState)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUsers/users_getEnvelopeState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUsersClient) UsersGetEnvelopeInfo(ctx context.Context, in *TLUsersGetEnvelopeInfo, opts ...grpc.CallOption) (*EnvelopeInfo, error) {
	out := new(EnvelopeInfo)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUsers/users_getEnvelopeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUsersClient) UsersGetPointsHistory(ctx context.Context, in *TLUsersGetPointsHistory, opts ...grpc.CallOption) (*PointsHistoryResult, error) {
	out := new(PointsHistoryResult)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUsers/users_getPointsHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUsersClient) UsersGetPointsRank(ctx context.Context, in *TLUsersGetPointsRank, opts ...grpc.CallOption) (*PointsRankResult, error) {
	out := new(PointsRankResult)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUsers/users_getPointsRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUsersClient) UsersSetPasswd(ctx context.Context, in *TLUsersSetPasswd, opts ...grpc.CallOption) (*IntResult, error) {
	out := new(IntResult)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUsers/users_setPasswd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUsersClient) UsersCheckPasswd(ctx context.Context, in *TLUsersCheckPasswd, opts ...grpc.CallOption) (*IntResult, error) {
	out := new(IntResult)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUsers/users_checkPasswd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUsersClient) UsersCheckResetPasswdPhoneCode(ctx context.Context, in *TLUsersCheckResetPasswdPhoneCode, opts ...grpc.CallOption) (*IntResult, error) {
	out := new(IntResult)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUsers/users_checkResetPasswdPhoneCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUsersClient) UsersSendResetPasswdPhoneCode(ctx context.Context, in *TLUsersSendResetPasswdPhoneCode, opts ...grpc.CallOption) (*IntResult, error) {
	out := new(IntResult)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUsers/users_sendResetPasswdPhoneCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUsersClient) UsersSetGender(ctx context.Context, in *TLUsersSetGender, opts ...grpc.CallOption) (*IntResult, error) {
	out := new(IntResult)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUsers/users_setGender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUsersClient) UsersSetUserInfo(ctx context.Context, in *TLUsersSetUserInfo, opts ...grpc.CallOption) (*IntResult, error) {
	out := new(IntResult)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUsers/users_setUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUsersClient) UsersSetSecureValueErrors(ctx context.Context, in *TLUsersSetSecureValueErrors, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUsers/users_setSecureValueErrors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCUsersServer is the server API for RPCUsers service.
type RPCUsersServer interface {
	// users.getUsers#d91a548 id:Vector<InputUser> = Vector<User>;
	UsersGetUsers(context.Context, *TLUsersGetUsers) (*Vector_User, error)
	// users.getFullUser#ca30a5b1 id:InputUser = UserFull;
	UsersGetFullUser(context.Context, *TLUsersGetFullUser) (*UserFull, error)
	// users.getUserInfo#f5d27282 id:InputUser = UserInfo;
	UsersGetUserInfo(context.Context, *TLUsersGetUserInfo) (*UserInfo, error)
	// users.getUserInfoList#b0809aa7 type:int offset:int count:int = Vector<UserInfo>;
	UsersGetUserInfoList(context.Context, *TLUsersGetUserInfoList) (*Vector_UserInfo, error)
	// users.getEnvelopeState#662f8850 eid:long access_hash:long = EnvelopeState;
	UsersGetEnvelopeState(context.Context, *TLUsersGetEnvelopeState) (*EnvelopeState, error)
	// users.getEnvelopeInfo#fa469ec3 eid:long access_hash:long = EnvelopeInfo;
	UsersGetEnvelopeInfo(context.Context, *TLUsersGetEnvelopeInfo) (*EnvelopeInfo, error)
	// users.getPointsHistory#7e44b70b type:int offset:int limit:int year:int = PointsHistoryResult;
	UsersGetPointsHistory(context.Context, *TLUsersGetPointsHistory) (*PointsHistoryResult, error)
	// users.getPointsRank#538b283a type:int from_rank:int count:int = PointsRankResult;
	UsersGetPointsRank(context.Context, *TLUsersGetPointsRank) (*PointsRankResult, error)
	// users.setPasswd#5ec5aa9c type:int phone_code:string old_pass:string passwd:string phone_number:string = IntResult;
	UsersSetPasswd(context.Context, *TLUsersSetPasswd) (*IntResult, error)
	// users.checkPasswd#58f01737 type:int passwd:string phone_number:string = IntResult;
	UsersCheckPasswd(context.Context, *TLUsersCheckPasswd) (*IntResult, error)
	// users.checkResetPasswdPhoneCode#7c210c23 type:int phone_code:string phone_number:string = IntResult;
	UsersCheckResetPasswdPhoneCode(context.Context, *TLUsersCheckResetPasswdPhoneCode) (*IntResult, error)
	// users.sendResetPasswdPhoneCode#de0c351e type:int phone_number:string = IntResult;
	UsersSendResetPasswdPhoneCode(context.Context, *TLUsersSendResetPasswdPhoneCode) (*IntResult, error)
	// users.setGender#865907ba json_content:string = IntResult;
	UsersSetGender(context.Context, *TLUsersSetGender) (*IntResult, error)
	// users.setUserInfo#d41b94d9 json_content:string = IntResult;
	UsersSetUserInfo(context.Context, *TLUsersSetUserInfo) (*IntResult, error)
	// users.setSecureValueErrors#90c894b5 id:InputUser errors:Vector<SecureValueError> = Bool;
	UsersSetSecureValueErrors(context.Context, *TLUsersSetSecureValueErrors) (*Bool, error)
}

// UnimplementedRPCUsersServer can be embedded to have forward compatible implementations.
type UnimplementedRPCUsersServer struct {
}

func (*UnimplementedRPCUsersServer) UsersGetUsers(ctx context.Context, req *TLUsersGetUsers) (*Vector_User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersGetUsers not implemented")
}
func (*UnimplementedRPCUsersServer) UsersGetFullUser(ctx context.Context, req *TLUsersGetFullUser) (*UserFull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersGetFullUser not implemented")
}
func (*UnimplementedRPCUsersServer) UsersGetUserInfo(ctx context.Context, req *TLUsersGetUserInfo) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersGetUserInfo not implemented")
}
func (*UnimplementedRPCUsersServer) UsersGetUserInfoList(ctx context.Context, req *TLUsersGetUserInfoList) (*Vector_UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersGetUserInfoList not implemented")
}
func (*UnimplementedRPCUsersServer) UsersGetEnvelopeState(ctx context.Context, req *TLUsersGetEnvelopeState) (*EnvelopeState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersGetEnvelopeState not implemented")
}
func (*UnimplementedRPCUsersServer) UsersGetEnvelopeInfo(ctx context.Context, req *TLUsersGetEnvelopeInfo) (*EnvelopeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersGetEnvelopeInfo not implemented")
}
func (*UnimplementedRPCUsersServer) UsersGetPointsHistory(ctx context.Context, req *TLUsersGetPointsHistory) (*PointsHistoryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersGetPointsHistory not implemented")
}
func (*UnimplementedRPCUsersServer) UsersGetPointsRank(ctx context.Context, req *TLUsersGetPointsRank) (*PointsRankResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersGetPointsRank not implemented")
}
func (*UnimplementedRPCUsersServer) UsersSetPasswd(ctx context.Context, req *TLUsersSetPasswd) (*IntResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersSetPasswd not implemented")
}
func (*UnimplementedRPCUsersServer) UsersCheckPasswd(ctx context.Context, req *TLUsersCheckPasswd) (*IntResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersCheckPasswd not implemented")
}
func (*UnimplementedRPCUsersServer) UsersCheckResetPasswdPhoneCode(ctx context.Context, req *TLUsersCheckResetPasswdPhoneCode) (*IntResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersCheckResetPasswdPhoneCode not implemented")
}
func (*UnimplementedRPCUsersServer) UsersSendResetPasswdPhoneCode(ctx context.Context, req *TLUsersSendResetPasswdPhoneCode) (*IntResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersSendResetPasswdPhoneCode not implemented")
}
func (*UnimplementedRPCUsersServer) UsersSetGender(ctx context.Context, req *TLUsersSetGender) (*IntResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersSetGender not implemented")
}
func (*UnimplementedRPCUsersServer) UsersSetUserInfo(ctx context.Context, req *TLUsersSetUserInfo) (*IntResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersSetUserInfo not implemented")
}
func (*UnimplementedRPCUsersServer) UsersSetSecureValueErrors(ctx context.Context, req *TLUsersSetSecureValueErrors) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsersSetSecureValueErrors not implemented")
}

func RegisterRPCUsersServer(s *grpc.Server, srv RPCUsersServer) {
	s.RegisterService(&_RPCUsers_serviceDesc, srv)
}

func _RPCUsers_UsersGetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUsersGetUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUsersServer).UsersGetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUsers/UsersGetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUsersServer).UsersGetUsers(ctx, req.(*TLUsersGetUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUsers_UsersGetFullUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUsersGetFullUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUsersServer).UsersGetFullUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUsers/UsersGetFullUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUsersServer).UsersGetFullUser(ctx, req.(*TLUsersGetFullUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUsers_UsersGetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUsersGetUserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUsersServer).UsersGetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUsers/UsersGetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUsersServer).UsersGetUserInfo(ctx, req.(*TLUsersGetUserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUsers_UsersGetUserInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUsersGetUserInfoList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUsersServer).UsersGetUserInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUsers/UsersGetUserInfoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUsersServer).UsersGetUserInfoList(ctx, req.(*TLUsersGetUserInfoList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUsers_UsersGetEnvelopeState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUsersGetEnvelopeState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUsersServer).UsersGetEnvelopeState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUsers/UsersGetEnvelopeState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUsersServer).UsersGetEnvelopeState(ctx, req.(*TLUsersGetEnvelopeState))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUsers_UsersGetEnvelopeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUsersGetEnvelopeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUsersServer).UsersGetEnvelopeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUsers/UsersGetEnvelopeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUsersServer).UsersGetEnvelopeInfo(ctx, req.(*TLUsersGetEnvelopeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUsers_UsersGetPointsHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUsersGetPointsHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUsersServer).UsersGetPointsHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUsers/UsersGetPointsHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUsersServer).UsersGetPointsHistory(ctx, req.(*TLUsersGetPointsHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUsers_UsersGetPointsRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUsersGetPointsRank)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUsersServer).UsersGetPointsRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUsers/UsersGetPointsRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUsersServer).UsersGetPointsRank(ctx, req.(*TLUsersGetPointsRank))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUsers_UsersSetPasswd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUsersSetPasswd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUsersServer).UsersSetPasswd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUsers/UsersSetPasswd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUsersServer).UsersSetPasswd(ctx, req.(*TLUsersSetPasswd))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUsers_UsersCheckPasswd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUsersCheckPasswd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUsersServer).UsersCheckPasswd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUsers/UsersCheckPasswd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUsersServer).UsersCheckPasswd(ctx, req.(*TLUsersCheckPasswd))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUsers_UsersCheckResetPasswdPhoneCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUsersCheckResetPasswdPhoneCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUsersServer).UsersCheckResetPasswdPhoneCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUsers/UsersCheckResetPasswdPhoneCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUsersServer).UsersCheckResetPasswdPhoneCode(ctx, req.(*TLUsersCheckResetPasswdPhoneCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUsers_UsersSendResetPasswdPhoneCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUsersSendResetPasswdPhoneCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUsersServer).UsersSendResetPasswdPhoneCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUsers/UsersSendResetPasswdPhoneCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUsersServer).UsersSendResetPasswdPhoneCode(ctx, req.(*TLUsersSendResetPasswdPhoneCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUsers_UsersSetGender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUsersSetGender)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUsersServer).UsersSetGender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUsers/UsersSetGender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUsersServer).UsersSetGender(ctx, req.(*TLUsersSetGender))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUsers_UsersSetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUsersSetUserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUsersServer).UsersSetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUsers/UsersSetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUsersServer).UsersSetUserInfo(ctx, req.(*TLUsersSetUserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUsers_UsersSetSecureValueErrors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUsersSetSecureValueErrors)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUsersServer).UsersSetSecureValueErrors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUsers/UsersSetSecureValueErrors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUsersServer).UsersSetSecureValueErrors(ctx, req.(*TLUsersSetSecureValueErrors))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCUsers_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCUsers",
	HandlerType: (*RPCUsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "users_getUsers",
			Handler:    _RPCUsers_UsersGetUsers_Handler,
		},
		{
			MethodName: "users_getFullUser",
			Handler:    _RPCUsers_UsersGetFullUser_Handler,
		},
		{
			MethodName: "users_getUserInfo",
			Handler:    _RPCUsers_UsersGetUserInfo_Handler,
		},
		{
			MethodName: "users_getUserInfoList",
			Handler:    _RPCUsers_UsersGetUserInfoList_Handler,
		},
		{
			MethodName: "users_getEnvelopeState",
			Handler:    _RPCUsers_UsersGetEnvelopeState_Handler,
		},
		{
			MethodName: "users_getEnvelopeInfo",
			Handler:    _RPCUsers_UsersGetEnvelopeInfo_Handler,
		},
		{
			MethodName: "users_getPointsHistory",
			Handler:    _RPCUsers_UsersGetPointsHistory_Handler,
		},
		{
			MethodName: "users_getPointsRank",
			Handler:    _RPCUsers_UsersGetPointsRank_Handler,
		},
		{
			MethodName: "users_setPasswd",
			Handler:    _RPCUsers_UsersSetPasswd_Handler,
		},
		{
			MethodName: "users_checkPasswd",
			Handler:    _RPCUsers_UsersCheckPasswd_Handler,
		},
		{
			MethodName: "users_checkResetPasswdPhoneCode",
			Handler:    _RPCUsers_UsersCheckResetPasswdPhoneCode_Handler,
		},
		{
			MethodName: "users_sendResetPasswdPhoneCode",
			Handler:    _RPCUsers_UsersSendResetPasswdPhoneCode_Handler,
		},
		{
			MethodName: "users_setGender",
			Handler:    _RPCUsers_UsersSetGender_Handler,
		},
		{
			MethodName: "users_setUserInfo",
			Handler:    _RPCUsers_UsersSetUserInfo_Handler,
		},
		{
			MethodName: "users_setSecureValueErrors",
			Handler:    _RPCUsers_UsersSetSecureValueErrors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

// RPCMessagesClient is the client API for RPCMessages service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCMessagesClient interface {
	// messages.getMessages#4222fa74 id:Vector<int> = messages.Messages;
	MessagesGetMessages(ctx context.Context, in *TLMessagesGetMessages, opts ...grpc.CallOption) (*Messages_Messages, error)
	// messages.getDialogs#191ba9c5 flags:# exclude_pinned:flags.0?true offset_date:int offset_id:int offset_peer:InputPeer limit:int = messages.Dialogs;
	MessagesGetDialogs(ctx context.Context, in *TLMessagesGetDialogs, opts ...grpc.CallOption) (*Messages_Dialogs, error)
	// messages.getHistory#afa92846 peer:InputPeer offset_id:int offset_date:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;
	MessagesGetHistory(ctx context.Context, in *TLMessagesGetHistory, opts ...grpc.CallOption) (*Messages_Messages, error)
	// messages.search#39e9ea0 flags:# peer:InputPeer q:string from_id:flags.0?InputUser filter:MessagesFilter min_date:int max_date:int offset_id:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;
	MessagesSearch(ctx context.Context, in *TLMessagesSearch, opts ...grpc.CallOption) (*Messages_Messages, error)
	// messages.readHistory#e306d3a peer:InputPeer max_id:int = messages.AffectedMessages;
	MessagesReadHistory(ctx context.Context, in *TLMessagesReadHistory, opts ...grpc.CallOption) (*Messages_AffectedMessages, error)
	// messages.deleteHistory#1c015b09 flags:# just_clear:flags.0?true revoke:flags.1?true peer:InputPeer max_id:int = messages.AffectedHistory;
	MessagesDeleteHistory(ctx context.Context, in *TLMessagesDeleteHistory, opts ...grpc.CallOption) (*Messages_AffectedHistory, error)
	// messages.deleteMessages#e58e95d2 flags:# revoke:flags.0?true id:Vector<int> = messages.AffectedMessages;
	MessagesDeleteMessages(ctx context.Context, in *TLMessagesDeleteMessages, opts ...grpc.CallOption) (*Messages_AffectedMessages, error)
	// messages.receivedMessages#5a954c0 max_id:int = Vector<ReceivedNotifyMessage>;
	MessagesReceivedMessages(ctx context.Context, in *TLMessagesReceivedMessages, opts ...grpc.CallOption) (*Vector_ReceivedNotifyMessage, error)
	// messages.setTyping#a3825e50 peer:InputPeer action:SendMessageAction = Bool;
	MessagesSetTyping(ctx context.Context, in *TLMessagesSetTyping, opts ...grpc.CallOption) (*Bool, error)
	// messages.sendMessage#fa88427a flags:# no_webpage:flags.1?true silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Updates;
	MessagesSendMessage(ctx context.Context, in *TLMessagesSendMessage, opts ...grpc.CallOption) (*Updates, error)
	// messages.sendMedia#c8f16791 flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int media:InputMedia random_id:long reply_markup:flags.2?ReplyMarkup = Updates;
	MessagesSendMedia(ctx context.Context, in *TLMessagesSendMedia, opts ...grpc.CallOption) (*Updates, error)
	// messages.forwardMessages#708e0195 flags:# silent:flags.5?true background:flags.6?true with_my_score:flags.8?true from_peer:InputPeer id:Vector<int> random_id:Vector<long> to_peer:InputPeer = Updates;
	MessagesForwardMessages(ctx context.Context, in *TLMessagesForwardMessages, opts ...grpc.CallOption) (*Updates, error)
	// messages.reportSpam#cf1592db peer:InputPeer = Bool;
	MessagesReportSpam(ctx context.Context, in *TLMessagesReportSpam, opts ...grpc.CallOption) (*Bool, error)
	// messages.hideReportSpam#a8f1709b peer:InputPeer = Bool;
	MessagesHideReportSpam(ctx context.Context, in *TLMessagesHideReportSpam, opts ...grpc.CallOption) (*Bool, error)
	// messages.getPeerSettings#3672e09c peer:InputPeer = PeerSettings;
	MessagesGetPeerSettings(ctx context.Context, in *TLMessagesGetPeerSettings, opts ...grpc.CallOption) (*PeerSettings, error)
	// messages.getChats#3c6aa187 id:Vector<int> = messages.Chats;
	MessagesGetChats(ctx context.Context, in *TLMessagesGetChats, opts ...grpc.CallOption) (*Messages_Chats, error)
	// messages.getFullChat#3b831c66 chat_id:int = messages.ChatFull;
	MessagesGetFullChat(ctx context.Context, in *TLMessagesGetFullChat, opts ...grpc.CallOption) (*Messages_ChatFull, error)
	// messages.editChatTitle#dc452855 chat_id:int title:string = Updates;
	MessagesEditChatTitle(ctx context.Context, in *TLMessagesEditChatTitle, opts ...grpc.CallOption) (*Updates, error)
	// messages.editChatPhoto#ca4c79d8 chat_id:int photo:InputChatPhoto = Updates;
	MessagesEditChatPhoto(ctx context.Context, in *TLMessagesEditChatPhoto, opts ...grpc.CallOption) (*Updates, error)
	// messages.addChatUser#f9a0aa09 chat_id:int user_id:InputUser fwd_limit:int = Updates;
	MessagesAddChatUser(ctx context.Context, in *TLMessagesAddChatUser, opts ...grpc.CallOption) (*Updates, error)
	// messages.deleteChatUser#e0611f16 chat_id:int user_id:InputUser = Updates;
	MessagesDeleteChatUser(ctx context.Context, in *TLMessagesDeleteChatUser, opts ...grpc.CallOption) (*Updates, error)
	// messages.createChat#9cb126e users:Vector<InputUser> title:string = Updates;
	MessagesCreateChat(ctx context.Context, in *TLMessagesCreateChat, opts ...grpc.CallOption) (*Updates, error)
	// messages.forwardMessage#33963bf9 peer:InputPeer id:int random_id:long = Updates;
	MessagesForwardMessage(ctx context.Context, in *TLMessagesForwardMessage, opts ...grpc.CallOption) (*Updates, error)
	// messages.getDhConfig#26cf8950 version:int random_length:int = messages.DhConfig;
	MessagesGetDhConfig(ctx context.Context, in *TLMessagesGetDhConfig, opts ...grpc.CallOption) (*Messages_DhConfig, error)
	// messages.requestEncryption#f64daf43 user_id:InputUser random_id:int g_a:bytes = EncryptedChat;
	MessagesRequestEncryption(ctx context.Context, in *TLMessagesRequestEncryption, opts ...grpc.CallOption) (*EncryptedChat, error)
	// messages.acceptEncryption#3dbc0415 peer:InputEncryptedChat g_b:bytes key_fingerprint:long = EncryptedChat;
	MessagesAcceptEncryption(ctx context.Context, in *TLMessagesAcceptEncryption, opts ...grpc.CallOption) (*EncryptedChat, error)
	// messages.discardEncryption#edd923c5 chat_id:int = Bool;
	MessagesDiscardEncryption(ctx context.Context, in *TLMessagesDiscardEncryption, opts ...grpc.CallOption) (*Bool, error)
	// messages.setEncryptedTyping#791451ed peer:InputEncryptedChat typing:Bool = Bool;
	MessagesSetEncryptedTyping(ctx context.Context, in *TLMessagesSetEncryptedTyping, opts ...grpc.CallOption) (*Bool, error)
	// messages.readEncryptedHistory#7f4b690a peer:InputEncryptedChat max_date:int = Bool;
	MessagesReadEncryptedHistory(ctx context.Context, in *TLMessagesReadEncryptedHistory, opts ...grpc.CallOption) (*Bool, error)
	// messages.sendEncrypted#a9776773 peer:InputEncryptedChat random_id:long data:bytes = messages.SentEncryptedMessage;
	MessagesSendEncrypted(ctx context.Context, in *TLMessagesSendEncrypted, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error)
	// messages.sendEncryptedFile#9a901b66 peer:InputEncryptedChat random_id:long data:bytes file:InputEncryptedFile = messages.SentEncryptedMessage;
	MessagesSendEncryptedFile(ctx context.Context, in *TLMessagesSendEncryptedFile, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error)
	// messages.sendEncryptedService#32d439a4 peer:InputEncryptedChat random_id:long data:bytes = messages.SentEncryptedMessage;
	MessagesSendEncryptedService(ctx context.Context, in *TLMessagesSendEncryptedService, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error)
	// messages.receivedQueue#55a5bb66 max_qts:int = Vector<long>;
	MessagesReceivedQueue(ctx context.Context, in *TLMessagesReceivedQueue, opts ...grpc.CallOption) (*VectorLong, error)
	// messages.reportEncryptedSpam#4b0c8c0f peer:InputEncryptedChat = Bool;
	MessagesReportEncryptedSpam(ctx context.Context, in *TLMessagesReportEncryptedSpam, opts ...grpc.CallOption) (*Bool, error)
	// messages.readMessageContents#36a73f77 id:Vector<int> = messages.AffectedMessages;
	MessagesReadMessageContents(ctx context.Context, in *TLMessagesReadMessageContents, opts ...grpc.CallOption) (*Messages_AffectedMessages, error)
	// messages.getAllStickers#1c9618b1 hash:int = messages.AllStickers;
	MessagesGetAllStickers(ctx context.Context, in *TLMessagesGetAllStickers, opts ...grpc.CallOption) (*Messages_AllStickers, error)
	// messages.getWebPagePreview#25223e24 message:string = MessageMedia;
	MessagesGetWebPagePreview(ctx context.Context, in *TLMessagesGetWebPagePreview, opts ...grpc.CallOption) (*MessageMedia, error)
	// messages.exportChatInvite#7d885289 chat_id:int = ExportedChatInvite;
	MessagesExportChatInvite(ctx context.Context, in *TLMessagesExportChatInvite, opts ...grpc.CallOption) (*ExportedChatInvite, error)
	// messages.checkChatInvite#3eadb1bb hash:string = ChatInvite;
	MessagesCheckChatInvite(ctx context.Context, in *TLMessagesCheckChatInvite, opts ...grpc.CallOption) (*ChatInvite, error)
	// messages.importChatInvite#6c50051c hash:string = Updates;
	MessagesImportChatInvite(ctx context.Context, in *TLMessagesImportChatInvite, opts ...grpc.CallOption) (*Updates, error)
	// messages.getStickerSet#2619a90e stickerset:InputStickerSet = messages.StickerSet;
	MessagesGetStickerSet(ctx context.Context, in *TLMessagesGetStickerSet, opts ...grpc.CallOption) (*Messages_StickerSet, error)
	// messages.installStickerSet#c78fe460 stickerset:InputStickerSet archived:Bool = messages.StickerSetInstallResult;
	MessagesInstallStickerSet(ctx context.Context, in *TLMessagesInstallStickerSet, opts ...grpc.CallOption) (*Messages_StickerSetInstallResult, error)
	// messages.uninstallStickerSet#f96e55de stickerset:InputStickerSet = Bool;
	MessagesUninstallStickerSet(ctx context.Context, in *TLMessagesUninstallStickerSet, opts ...grpc.CallOption) (*Bool, error)
	// messages.startBot#e6df7378 bot:InputUser peer:InputPeer random_id:long start_param:string = Updates;
	MessagesStartBot(ctx context.Context, in *TLMessagesStartBot, opts ...grpc.CallOption) (*Updates, error)
	// messages.getMessagesViews#c4c8a55d peer:InputPeer id:Vector<int> increment:Bool = Vector<int>;
	MessagesGetMessagesViews(ctx context.Context, in *TLMessagesGetMessagesViews, opts ...grpc.CallOption) (*VectorInt, error)
	// messages.toggleChatAdmins#ec8bd9e1 chat_id:int enabled:Bool = Updates;
	MessagesToggleChatAdmins(ctx context.Context, in *TLMessagesToggleChatAdmins, opts ...grpc.CallOption) (*Updates, error)
	// messages.editChatAdmin#a9e69f2e chat_id:int user_id:InputUser is_admin:Bool = Bool;
	MessagesEditChatAdmin(ctx context.Context, in *TLMessagesEditChatAdmin, opts ...grpc.CallOption) (*Bool, error)
	// messages.migrateChat#15a3b8e3 chat_id:int = Updates;
	MessagesMigrateChat(ctx context.Context, in *TLMessagesMigrateChat, opts ...grpc.CallOption) (*Updates, error)
	// messages.searchGlobal#9e3cacb0 q:string offset_date:int offset_peer:InputPeer offset_id:int limit:int = messages.Messages;
	MessagesSearchGlobal(ctx context.Context, in *TLMessagesSearchGlobal, opts ...grpc.CallOption) (*Messages_Messages, error)
	// messages.reorderStickerSets#78337739 flags:# masks:flags.0?true order:Vector<long> = Bool;
	MessagesReorderStickerSets(ctx context.Context, in *TLMessagesReorderStickerSets, opts ...grpc.CallOption) (*Bool, error)
	// messages.getDocumentByHash#338e2464 sha256:bytes size:int mime_type:string = Document;
	MessagesGetDocumentByHash(ctx context.Context, in *TLMessagesGetDocumentByHash, opts ...grpc.CallOption) (*Document, error)
	// messages.searchGifs#bf9a776b q:string offset:int = messages.FoundGifs;
	MessagesSearchGifs(ctx context.Context, in *TLMessagesSearchGifs, opts ...grpc.CallOption) (*Messages_FoundGifs, error)
	// messages.getSavedGifs#83bf3d52 hash:int = messages.SavedGifs;
	MessagesGetSavedGifs(ctx context.Context, in *TLMessagesGetSavedGifs, opts ...grpc.CallOption) (*Messages_SavedGifs, error)
	// messages.saveGif#327a30cb id:InputDocument unsave:Bool = Bool;
	MessagesSaveGif(ctx context.Context, in *TLMessagesSaveGif, opts ...grpc.CallOption) (*Bool, error)
	// messages.getInlineBotResults#514e999d flags:# bot:InputUser peer:InputPeer geo_point:flags.0?InputGeoPoint query:string offset:string = messages.BotResults;
	MessagesGetInlineBotResults(ctx context.Context, in *TLMessagesGetInlineBotResults, opts ...grpc.CallOption) (*Messages_BotResults, error)
	// messages.setInlineBotResults#eb5ea206 flags:# gallery:flags.0?true private:flags.1?true query_id:long results:Vector<InputBotInlineResult> cache_time:int next_offset:flags.2?string switch_pm:flags.3?InlineBotSwitchPM = Bool;
	MessagesSetInlineBotResults(ctx context.Context, in *TLMessagesSetInlineBotResults, opts ...grpc.CallOption) (*Bool, error)
	// messages.sendInlineBotResult#b16e06fe flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int random_id:long query_id:long id:string = Updates;
	MessagesSendInlineBotResult(ctx context.Context, in *TLMessagesSendInlineBotResult, opts ...grpc.CallOption) (*Updates, error)
	// messages.getMessageEditData#fda68d36 peer:InputPeer id:int = messages.MessageEditData;
	MessagesGetMessageEditData(ctx context.Context, in *TLMessagesGetMessageEditData, opts ...grpc.CallOption) (*Messages_MessageEditData, error)
	// messages.editMessage#ce91e4ca flags:# no_webpage:flags.1?true peer:InputPeer id:int message:flags.11?string reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Updates;
	MessagesEditMessage(ctx context.Context, in *TLMessagesEditMessage, opts ...grpc.CallOption) (*Updates, error)
	// messages.editInlineBotMessage#130c2c85 flags:# no_webpage:flags.1?true id:InputBotInlineMessageID message:flags.11?string reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Bool;
	MessagesEditInlineBotMessage(ctx context.Context, in *TLMessagesEditInlineBotMessage, opts ...grpc.CallOption) (*Bool, error)
	// messages.getBotCallbackAnswer#810a9fec flags:# game:flags.1?true peer:InputPeer msg_id:int data:flags.0?bytes = messages.BotCallbackAnswer;
	MessagesGetBotCallbackAnswer(ctx context.Context, in *TLMessagesGetBotCallbackAnswer, opts ...grpc.CallOption) (*Messages_BotCallbackAnswer, error)
	// messages.setBotCallbackAnswer#d58f130a flags:# alert:flags.1?true query_id:long message:flags.0?string url:flags.2?string cache_time:int = Bool;
	MessagesSetBotCallbackAnswer(ctx context.Context, in *TLMessagesSetBotCallbackAnswer, opts ...grpc.CallOption) (*Bool, error)
	// messages.getPeerDialogs#2d9776b9 peers:Vector<InputPeer> = messages.PeerDialogs;
	MessagesGetPeerDialogs(ctx context.Context, in *TLMessagesGetPeerDialogs, opts ...grpc.CallOption) (*Messages_PeerDialogs, error)
	// messages.saveDraft#bc39e14b flags:# no_webpage:flags.1?true reply_to_msg_id:flags.0?int peer:InputPeer message:string entities:flags.3?Vector<MessageEntity> = Bool;
	MessagesSaveDraft(ctx context.Context, in *TLMessagesSaveDraft, opts ...grpc.CallOption) (*Bool, error)
	// messages.getAllDrafts#6a3f8d65 = Updates;
	MessagesGetAllDrafts(ctx context.Context, in *TLMessagesGetAllDrafts, opts ...grpc.CallOption) (*Updates, error)
	// messages.getFeaturedStickers#2dacca4f hash:int = messages.FeaturedStickers;
	MessagesGetFeaturedStickers(ctx context.Context, in *TLMessagesGetFeaturedStickers, opts ...grpc.CallOption) (*Messages_FeaturedStickers, error)
	// messages.readFeaturedStickers#5b118126 id:Vector<long> = Bool;
	MessagesReadFeaturedStickers(ctx context.Context, in *TLMessagesReadFeaturedStickers, opts ...grpc.CallOption) (*Bool, error)
	// messages.getRecentStickers#5ea192c9 flags:# attached:flags.0?true hash:int = messages.RecentStickers;
	MessagesGetRecentStickers(ctx context.Context, in *TLMessagesGetRecentStickers, opts ...grpc.CallOption) (*Messages_RecentStickers, error)
	// messages.saveRecentSticker#392718f8 flags:# attached:flags.0?true id:InputDocument unsave:Bool = Bool;
	MessagesSaveRecentSticker(ctx context.Context, in *TLMessagesSaveRecentSticker, opts ...grpc.CallOption) (*Bool, error)
	// messages.clearRecentStickers#8999602d flags:# attached:flags.0?true = Bool;
	MessagesClearRecentStickers(ctx context.Context, in *TLMessagesClearRecentStickers, opts ...grpc.CallOption) (*Bool, error)
	// messages.getArchivedStickers#57f17692 flags:# masks:flags.0?true offset_id:long limit:int = messages.ArchivedStickers;
	MessagesGetArchivedStickers(ctx context.Context, in *TLMessagesGetArchivedStickers, opts ...grpc.CallOption) (*Messages_ArchivedStickers, error)
	// messages.getMaskStickers#65b8c79f hash:int = messages.AllStickers;
	MessagesGetMaskStickers(ctx context.Context, in *TLMessagesGetMaskStickers, opts ...grpc.CallOption) (*Messages_AllStickers, error)
	// messages.getAttachedStickers#cc5b67cc media:InputStickeredMedia = Vector<StickerSetCovered>;
	MessagesGetAttachedStickers(ctx context.Context, in *TLMessagesGetAttachedStickers, opts ...grpc.CallOption) (*Vector_StickerSetCovered, error)
	// messages.setGameScore#8ef8ecc0 flags:# edit_message:flags.0?true force:flags.1?true peer:InputPeer id:int user_id:InputUser score:int = Updates;
	MessagesSetGameScore(ctx context.Context, in *TLMessagesSetGameScore, opts ...grpc.CallOption) (*Updates, error)
	// messages.setInlineGameScore#15ad9f64 flags:# edit_message:flags.0?true force:flags.1?true id:InputBotInlineMessageID user_id:InputUser score:int = Bool;
	MessagesSetInlineGameScore(ctx context.Context, in *TLMessagesSetInlineGameScore, opts ...grpc.CallOption) (*Bool, error)
	// messages.getGameHighScores#e822649d peer:InputPeer id:int user_id:InputUser = messages.HighScores;
	MessagesGetGameHighScores(ctx context.Context, in *TLMessagesGetGameHighScores, opts ...grpc.CallOption) (*Messages_HighScores, error)
	// messages.getInlineGameHighScores#f635e1b id:InputBotInlineMessageID user_id:InputUser = messages.HighScores;
	MessagesGetInlineGameHighScores(ctx context.Context, in *TLMessagesGetInlineGameHighScores, opts ...grpc.CallOption) (*Messages_HighScores, error)
	// messages.getCommonChats#d0a48c4 user_id:InputUser max_id:int limit:int = messages.Chats;
	MessagesGetCommonChats(ctx context.Context, in *TLMessagesGetCommonChats, opts ...grpc.CallOption) (*Messages_Chats, error)
	// messages.getAllChats#eba80ff0 except_ids:Vector<int> = messages.Chats;
	MessagesGetAllChats(ctx context.Context, in *TLMessagesGetAllChats, opts ...grpc.CallOption) (*Messages_Chats, error)
	// messages.getWebPage#32ca8f91 url:string hash:int = WebPage;
	MessagesGetWebPage(ctx context.Context, in *TLMessagesGetWebPage, opts ...grpc.CallOption) (*WebPage, error)
	// messages.toggleDialogPin#3289be6a flags:# pinned:flags.0?true peer:InputPeer = Bool;
	MessagesToggleDialogPin(ctx context.Context, in *TLMessagesToggleDialogPin, opts ...grpc.CallOption) (*Bool, error)
	// messages.reorderPinnedDialogs#959ff644 flags:# force:flags.0?true order:Vector<InputPeer> = Bool;
	MessagesReorderPinnedDialogs(ctx context.Context, in *TLMessagesReorderPinnedDialogs, opts ...grpc.CallOption) (*Bool, error)
	// messages.getPinnedDialogs#e254d64e = messages.PeerDialogs;
	MessagesGetPinnedDialogs(ctx context.Context, in *TLMessagesGetPinnedDialogs, opts ...grpc.CallOption) (*Messages_PeerDialogs, error)
	// messages.setBotShippingResults#e5f672fa flags:# query_id:long error:flags.0?string shipping_options:flags.1?Vector<ShippingOption> = Bool;
	MessagesSetBotShippingResults(ctx context.Context, in *TLMessagesSetBotShippingResults, opts ...grpc.CallOption) (*Bool, error)
	// messages.setBotPrecheckoutResults#9c2dd95 flags:# success:flags.1?true query_id:long error:flags.0?string = Bool;
	MessagesSetBotPrecheckoutResults(ctx context.Context, in *TLMessagesSetBotPrecheckoutResults, opts ...grpc.CallOption) (*Bool, error)
	// messages.uploadMedia#519bc2b1 peer:InputPeer media:InputMedia = MessageMedia;
	MessagesUploadMedia(ctx context.Context, in *TLMessagesUploadMedia, opts ...grpc.CallOption) (*MessageMedia, error)
	// messages.sendScreenshotNotification#c97df020 peer:InputPeer reply_to_msg_id:int random_id:long = Updates;
	MessagesSendScreenshotNotification(ctx context.Context, in *TLMessagesSendScreenshotNotification, opts ...grpc.CallOption) (*Updates, error)
	// messages.getFavedStickers#21ce0b0e hash:int = messages.FavedStickers;
	MessagesGetFavedStickers(ctx context.Context, in *TLMessagesGetFavedStickers, opts ...grpc.CallOption) (*Messages_FavedStickers, error)
	// messages.faveSticker#b9ffc55b id:InputDocument unfave:Bool = Bool;
	MessagesFaveSticker(ctx context.Context, in *TLMessagesFaveSticker, opts ...grpc.CallOption) (*Bool, error)
	// messages.getUnreadMentions#46578472 peer:InputPeer offset_id:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;
	MessagesGetUnreadMentions(ctx context.Context, in *TLMessagesGetUnreadMentions, opts ...grpc.CallOption) (*Messages_Messages, error)
	// messages.readHistory#272c63bf peer:InputPeer max_id:int offset:int = messages.AffectedMessages;
	MessagesReadHistory73(ctx context.Context, in *TLMessagesReadHistory73, opts ...grpc.CallOption) (*Messages_AffectedMessages, error)
	// messages.editMessage#5d1b8dd flags:# no_webpage:flags.1?true stop_geo_live:flags.12?true peer:InputPeer id:int message:flags.11?string reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> geo_point:flags.13?InputGeoPoint = Updates;
	MessagesEditMessage73(ctx context.Context, in *TLMessagesEditMessage73, opts ...grpc.CallOption) (*Updates, error)
	// messages.search#f288a275 flags:# peer:InputPeer q:string from_id:flags.0?InputUser filter:MessagesFilter min_date:int max_date:int offset:int max_id:int limit:int = messages.Messages;
	MessagesSearch73(ctx context.Context, in *TLMessagesSearch73, opts ...grpc.CallOption) (*Messages_Messages, error)
	// messages.readMentions#f0189d3 peer:InputPeer = messages.AffectedHistory;
	MessagesReadMentions(ctx context.Context, in *TLMessagesReadMentions, opts ...grpc.CallOption) (*Messages_AffectedHistory, error)
	// messages.getRecentLocations#249431e2 peer:InputPeer limit:int = messages.Messages;
	MessagesGetRecentLocations(ctx context.Context, in *TLMessagesGetRecentLocations, opts ...grpc.CallOption) (*Messages_Messages, error)
	// messages.sendMultiMedia#2095512f flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int multi_media:Vector<InputSingleMedia> = Updates;
	MessagesSendMultiMedia(ctx context.Context, in *TLMessagesSendMultiMedia, opts ...grpc.CallOption) (*Updates, error)
	// messages.uploadEncryptedFile#5057c497 peer:InputEncryptedChat file:InputEncryptedFile = EncryptedFile;
	MessagesUploadEncryptedFile(ctx context.Context, in *TLMessagesUploadEncryptedFile, opts ...grpc.CallOption) (*EncryptedFile, error)
	// messages.saveRecentSticker#348e39bf id:InputDocument unsave:Bool = Bool;
	MessagesSaveRecentSticker73(ctx context.Context, in *TLMessagesSaveRecentSticker73, opts ...grpc.CallOption) (*Bool, error)
	// messages.getPeerDialogs#e470bcfd peers:Vector<InputDialogPeer> = messages.PeerDialogs;
	MessagesGetPeerDialogs82(ctx context.Context, in *TLMessagesGetPeerDialogs82, opts ...grpc.CallOption) (*Messages_PeerDialogs, error)
	// messages.getMessages#63c66506 id:Vector<InputMessage> = messages.Messages;
	MessagesGetMessages82(ctx context.Context, in *TLMessagesGetMessages82, opts ...grpc.CallOption) (*Messages_Messages, error)
	// messages.getDialogs#b098aee6 flags:# exclude_pinned:flags.0?true offset_date:int offset_id:int offset_peer:InputPeer limit:int hash:int = messages.Dialogs;
	MessagesGetDialogs82(ctx context.Context, in *TLMessagesGetDialogs82, opts ...grpc.CallOption) (*Messages_Dialogs, error)
	// messages.getHistory#dcbb8260 peer:InputPeer offset_id:int offset_date:int add_offset:int limit:int max_id:int min_id:int hash:int = messages.Messages;
	MessagesGetHistory82(ctx context.Context, in *TLMessagesGetHistory82, opts ...grpc.CallOption) (*Messages_Messages, error)
	// messages.search#8614ef68 flags:# peer:InputPeer q:string from_id:flags.0?InputUser filter:MessagesFilter min_date:int max_date:int offset_id:int add_offset:int limit:int max_id:int min_id:int hash:int = messages.Messages;
	MessagesSearch82(ctx context.Context, in *TLMessagesSearch82, opts ...grpc.CallOption) (*Messages_Messages, error)
	// messages.sendMedia#b8d1262b flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int media:InputMedia message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Updates;
	MessagesSendMedia82(ctx context.Context, in *TLMessagesSendMedia82, opts ...grpc.CallOption) (*Updates, error)
	// messages.getDialogs#a0ee3b73 flags:# exclude_pinned:flags.0?true folder_id:flags.1?int offset_date:int offset_id:int offset_peer:InputPeer limit:int hash:int = messages.Dialogs;
	MessagesGetDialogs114(ctx context.Context, in *TLMessagesGetDialogs114, opts ...grpc.CallOption) (*Messages_Dialogs, error)
	// messages.sendMessage#520c3870 flags:# no_webpage:flags.1?true silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int = Updates;
	MessagesSendMessage114(ctx context.Context, in *TLMessagesSendMessage114, opts ...grpc.CallOption) (*Updates, error)
	// messages.sendMedia#3491eba9 flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int media:InputMedia message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int = Updates;
	MessagesSendMedia114(ctx context.Context, in *TLMessagesSendMedia114, opts ...grpc.CallOption) (*Updates, error)
	// messages.forwardMessages#d9fee60e flags:# silent:flags.5?true background:flags.6?true with_my_score:flags.8?true grouped:flags.9?true from_peer:InputPeer id:Vector<int> random_id:Vector<long> to_peer:InputPeer schedule_date:flags.10?int = Updates;
	MessagesForwardMessages114(ctx context.Context, in *TLMessagesForwardMessages114, opts ...grpc.CallOption) (*Updates, error)
	// messages.report#bd82b658 peer:InputPeer id:Vector<int> reason:ReportReason = Bool;
	MessagesReport(ctx context.Context, in *TLMessagesReport, opts ...grpc.CallOption) (*Bool, error)
	// messages.getStickers#43d4f2c emoticon:string hash:int = messages.Stickers;
	MessagesGetStickers(ctx context.Context, in *TLMessagesGetStickers, opts ...grpc.CallOption) (*Messages_Stickers, error)
	// messages.getWebPagePreview#8b68b0cc flags:# message:string entities:flags.3?Vector<MessageEntity> = MessageMedia;
	MessagesGetWebPagePreview114(ctx context.Context, in *TLMessagesGetWebPagePreview114, opts ...grpc.CallOption) (*MessageMedia, error)
	// messages.exportChatInvite#df7534c peer:InputPeer = ExportedChatInvite;
	MessagesExportChatInvite114(ctx context.Context, in *TLMessagesExportChatInvite114, opts ...grpc.CallOption) (*ExportedChatInvite, error)
	// messages.searchGlobal#bf7225a4 flags:# folder_id:flags.0?int q:string offset_rate:int offset_peer:InputPeer offset_id:int limit:int = messages.Messages;
	MessagesSearchGlobal114(ctx context.Context, in *TLMessagesSearchGlobal114, opts ...grpc.CallOption) (*Messages_Messages, error)
	// messages.sendInlineBotResult#220815b0 flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true hide_via:flags.11?true peer:InputPeer reply_to_msg_id:flags.0?int random_id:long query_id:long id:string schedule_date:flags.10?int = Updates;
	MessagesSendInlineBotResult114(ctx context.Context, in *TLMessagesSendInlineBotResult114, opts ...grpc.CallOption) (*Updates, error)
	// messages.editMessage#48f71778 flags:# no_webpage:flags.1?true peer:InputPeer id:int message:flags.11?string media:flags.14?InputMedia reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.15?int = Updates;
	MessagesEditMessage114(ctx context.Context, in *TLMessagesEditMessage114, opts ...grpc.CallOption) (*Updates, error)
	// messages.editInlineBotMessage#83557dba flags:# no_webpage:flags.1?true id:InputBotInlineMessageID message:flags.11?string media:flags.14?InputMedia reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Bool;
	MessagesEditInlineBotMessage114(ctx context.Context, in *TLMessagesEditInlineBotMessage114, opts ...grpc.CallOption) (*Bool, error)
	// messages.toggleDialogPin#a731e257 flags:# pinned:flags.0?true peer:InputDialogPeer = Bool;
	MessagesToggleDialogPin114(ctx context.Context, in *TLMessagesToggleDialogPin114, opts ...grpc.CallOption) (*Bool, error)
	// messages.reorderPinnedDialogs#3b1adf37 flags:# force:flags.0?true folder_id:int order:Vector<InputDialogPeer> = Bool;
	MessagesReorderPinnedDialogs114(ctx context.Context, in *TLMessagesReorderPinnedDialogs114, opts ...grpc.CallOption) (*Bool, error)
	// messages.getPinnedDialogs#d6b94df2 folder_id:int = messages.PeerDialogs;
	MessagesGetPinnedDialogs114(ctx context.Context, in *TLMessagesGetPinnedDialogs114, opts ...grpc.CallOption) (*Messages_PeerDialogs, error)
	// messages.getRecentLocations#bbc45b09 peer:InputPeer limit:int hash:int = messages.Messages;
	MessagesGetRecentLocations114(ctx context.Context, in *TLMessagesGetRecentLocations114, opts ...grpc.CallOption) (*Messages_Messages, error)
	// messages.sendMultiMedia#cc0110cb flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int multi_media:Vector<InputSingleMedia> schedule_date:flags.10?int = Updates;
	MessagesSendMultiMedia114(ctx context.Context, in *TLMessagesSendMultiMedia114, opts ...grpc.CallOption) (*Updates, error)
	// messages.searchStickerSets#c2b7d08b flags:# exclude_featured:flags.0?true q:string hash:int = messages.FoundStickerSets;
	MessagesSearchStickerSets(ctx context.Context, in *TLMessagesSearchStickerSets, opts ...grpc.CallOption) (*Messages_FoundStickerSets, error)
	// messages.getSplitRanges#1cff7e08 = Vector<MessageRange>;
	MessagesGetSplitRanges(ctx context.Context, in *TLMessagesGetSplitRanges, opts ...grpc.CallOption) (*Vector_MessageRange, error)
	// messages.markDialogUnread#c286d98f flags:# unread:flags.0?true peer:InputDialogPeer = Bool;
	MessagesMarkDialogUnread(ctx context.Context, in *TLMessagesMarkDialogUnread, opts ...grpc.CallOption) (*Bool, error)
	// messages.getDialogUnreadMarks#22e24e22 = Vector<DialogPeer>;
	MessagesGetDialogUnreadMarks(ctx context.Context, in *TLMessagesGetDialogUnreadMarks, opts ...grpc.CallOption) (*Vector_DialogPeer, error)
	// messages.clearAllDrafts#7e58ee9c = Bool;
	MessagesClearAllDrafts(ctx context.Context, in *TLMessagesClearAllDrafts, opts ...grpc.CallOption) (*Bool, error)
	// messages.updatePinnedMessage#d2aaf7ec flags:# silent:flags.0?true unpin:flags.1?true pm_oneside:flags.2?true peer:InputPeer id:int = Updates;
	MessagesUpdatePinnedMessage(ctx context.Context, in *TLMessagesUpdatePinnedMessage, opts ...grpc.CallOption) (*Updates, error)
	// messages.sendVote#10ea6184 peer:InputPeer msg_id:int options:Vector<bytes> = Updates;
	MessagesSendVote(ctx context.Context, in *TLMessagesSendVote, opts ...grpc.CallOption) (*Updates, error)
	// messages.getPollResults#73bb643b peer:InputPeer msg_id:int = Updates;
	MessagesGetPollResults(ctx context.Context, in *TLMessagesGetPollResults, opts ...grpc.CallOption) (*Updates, error)
	// messages.getOnlines#6e2be050 peer:InputPeer = ChatOnlines;
	MessagesGetOnlines(ctx context.Context, in *TLMessagesGetOnlines, opts ...grpc.CallOption) (*ChatOnlines, error)
	// messages.getStatsURL#812c2ae6 flags:# dark:flags.0?true peer:InputPeer params:string = StatsURL;
	MessagesGetStatsURL(ctx context.Context, in *TLMessagesGetStatsURL, opts ...grpc.CallOption) (*StatsURL, error)
	// messages.editChatAbout#def60797 peer:InputPeer about:string = Bool;
	MessagesEditChatAbout(ctx context.Context, in *TLMessagesEditChatAbout, opts ...grpc.CallOption) (*Bool, error)
	// messages.editChatDefaultBannedRights#a5866b41 peer:InputPeer banned_rights:ChatBannedRights = Updates;
	MessagesEditChatDefaultBannedRights(ctx context.Context, in *TLMessagesEditChatDefaultBannedRights, opts ...grpc.CallOption) (*Updates, error)
	// messages.getEmojiKeywords#35a0e062 lang_code:string = EmojiKeywordsDifference;
	MessagesGetEmojiKeywords(ctx context.Context, in *TLMessagesGetEmojiKeywords, opts ...grpc.CallOption) (*EmojiKeywordsDifference, error)
	// messages.getEmojiKeywordsDifference#1508b6af lang_code:string from_version:int = EmojiKeywordsDifference;
	MessagesGetEmojiKeywordsDifference(ctx context.Context, in *TLMessagesGetEmojiKeywordsDifference, opts ...grpc.CallOption) (*EmojiKeywordsDifference, error)
	// messages.getEmojiKeywordsLanguages#4e9963b2 lang_codes:Vector<string> = Vector<EmojiLanguage>;
	MessagesGetEmojiKeywordsLanguages(ctx context.Context, in *TLMessagesGetEmojiKeywordsLanguages, opts ...grpc.CallOption) (*Vector_EmojiLanguage, error)
	// messages.getEmojiURL#d5b10c26 lang_code:string = EmojiURL;
	MessagesGetEmojiURL(ctx context.Context, in *TLMessagesGetEmojiURL, opts ...grpc.CallOption) (*EmojiURL, error)
	// messages.getSearchCounters#732eef00 peer:InputPeer filters:Vector<MessagesFilter> = Vector<messages.SearchCounter>;
	MessagesGetSearchCounters(ctx context.Context, in *TLMessagesGetSearchCounters, opts ...grpc.CallOption) (*Vector_Messages_SearchCounter, error)
	// messages.requestUrlAuth#e33f5613 peer:InputPeer msg_id:int button_id:int = UrlAuthResult;
	MessagesRequestUrlAuth(ctx context.Context, in *TLMessagesRequestUrlAuth, opts ...grpc.CallOption) (*UrlAuthResult, error)
	// messages.acceptUrlAuth#f729ea98 flags:# write_allowed:flags.0?true peer:InputPeer msg_id:int button_id:int = UrlAuthResult;
	MessagesAcceptUrlAuth(ctx context.Context, in *TLMessagesAcceptUrlAuth, opts ...grpc.CallOption) (*UrlAuthResult, error)
	// messages.hidePeerSettingsBar#4facb138 peer:InputPeer = Bool;
	MessagesHidePeerSettingsBar(ctx context.Context, in *TLMessagesHidePeerSettingsBar, opts ...grpc.CallOption) (*Bool, error)
	// messages.getScheduledHistory#e2c2685b peer:InputPeer hash:int = messages.Messages;
	MessagesGetScheduledHistory(ctx context.Context, in *TLMessagesGetScheduledHistory, opts ...grpc.CallOption) (*Messages_Messages, error)
	// messages.getScheduledMessages#bdbb0464 peer:InputPeer id:Vector<int> = messages.Messages;
	MessagesGetScheduledMessages(ctx context.Context, in *TLMessagesGetScheduledMessages, opts ...grpc.CallOption) (*Messages_Messages, error)
	// messages.sendScheduledMessages#bd38850a peer:InputPeer id:Vector<int> = Updates;
	MessagesSendScheduledMessages(ctx context.Context, in *TLMessagesSendScheduledMessages, opts ...grpc.CallOption) (*Updates, error)
	// messages.deleteScheduledMessages#59ae2b16 peer:InputPeer id:Vector<int> = Updates;
	MessagesDeleteScheduledMessages(ctx context.Context, in *TLMessagesDeleteScheduledMessages, opts ...grpc.CallOption) (*Updates, error)
	// messages.getPollVotes#b86e380e flags:# peer:InputPeer id:int option:flags.0?bytes offset:flags.1?string limit:int = messages.VotesList;
	MessagesGetPollVotes(ctx context.Context, in *TLMessagesGetPollVotes, opts ...grpc.CallOption) (*Messages_VotesList, error)
	// messages.toggleStickerSets#b5052fea flags:# uninstall:flags.0?true archive:flags.1?true unarchive:flags.2?true stickersets:Vector<InputStickerSet> = Bool;
	MessagesToggleStickerSets(ctx context.Context, in *TLMessagesToggleStickerSets, opts ...grpc.CallOption) (*Bool, error)
	// messages.getDialogFilters#f19ed96d = Vector<DialogFilter>;
	MessagesGetDialogFilters(ctx context.Context, in *TLMessagesGetDialogFilters, opts ...grpc.CallOption) (*Vector_DialogFilter, error)
	// messages.getSuggestedDialogFilters#a29cd42c = Vector<DialogFilterSuggested>;
	MessagesGetSuggestedDialogFilters(ctx context.Context, in *TLMessagesGetSuggestedDialogFilters, opts ...grpc.CallOption) (*Vector_DialogFilterSuggested, error)
	// messages.updateDialogFilter#1ad4a04a flags:# id:int filter:flags.0?DialogFilter = Bool;
	MessagesUpdateDialogFilter(ctx context.Context, in *TLMessagesUpdateDialogFilter, opts ...grpc.CallOption) (*Bool, error)
	// messages.updateDialogFiltersOrder#c563c1e4 order:Vector<int> = Bool;
	MessagesUpdateDialogFiltersOrder(ctx context.Context, in *TLMessagesUpdateDialogFiltersOrder, opts ...grpc.CallOption) (*Bool, error)
	// messages.getOldFeaturedStickers#5fe7025b offset:int limit:int hash:int = messages.FeaturedStickers;
	MessagesGetOldFeaturedStickers(ctx context.Context, in *TLMessagesGetOldFeaturedStickers, opts ...grpc.CallOption) (*Messages_FeaturedStickers, error)
	// messages.sendEncrypted#44fa7a15 flags:# silent:flags.0?true peer:InputEncryptedChat random_id:long data:bytes = messages.SentEncryptedMessage;
	MessagesSendEncrypted118(ctx context.Context, in *TLMessagesSendEncrypted118, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error)
	// messages.getBotCallbackAnswer#9342ca07 flags:# game:flags.1?true peer:InputPeer msg_id:int data:flags.0?bytes password:flags.2?InputCheckPasswordSRP = messages.BotCallbackAnswer;
	MessagesGetBotCallbackAnswer118(ctx context.Context, in *TLMessagesGetBotCallbackAnswer118, opts ...grpc.CallOption) (*Messages_BotCallbackAnswer, error)
	// messages.sendEncryptedFile#5559481d flags:# silent:flags.0?true peer:InputEncryptedChat random_id:long data:bytes file:InputEncryptedFile = messages.SentEncryptedMessage;
	MessagesSendEncryptedFile118(ctx context.Context, in *TLMessagesSendEncryptedFile118, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error)
}

type rPCMessagesClient struct {
	cc *grpc.ClientConn
}

func NewRPCMessagesClient(cc *grpc.ClientConn) RPCMessagesClient {
	return &rPCMessagesClient{cc}
}

func (c *rPCMessagesClient) MessagesGetMessages(ctx context.Context, in *TLMessagesGetMessages, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetDialogs(ctx context.Context, in *TLMessagesGetDialogs, opts ...grpc.CallOption) (*Messages_Dialogs, error) {
	out := new(Messages_Dialogs)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getDialogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetHistory(ctx context.Context, in *TLMessagesGetHistory, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSearch(ctx context.Context, in *TLMessagesSearch, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesReadHistory(ctx context.Context, in *TLMessagesReadHistory, opts ...grpc.CallOption) (*Messages_AffectedMessages, error) {
	out := new(Messages_AffectedMessages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_readHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesDeleteHistory(ctx context.Context, in *TLMessagesDeleteHistory, opts ...grpc.CallOption) (*Messages_AffectedHistory, error) {
	out := new(Messages_AffectedHistory)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_deleteHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesDeleteMessages(ctx context.Context, in *TLMessagesDeleteMessages, opts ...grpc.CallOption) (*Messages_AffectedMessages, error) {
	out := new(Messages_AffectedMessages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_deleteMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesReceivedMessages(ctx context.Context, in *TLMessagesReceivedMessages, opts ...grpc.CallOption) (*Vector_ReceivedNotifyMessage, error) {
	out := new(Vector_ReceivedNotifyMessage)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_receivedMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSetTyping(ctx context.Context, in *TLMessagesSetTyping, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_setTyping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSendMessage(ctx context.Context, in *TLMessagesSendMessage, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_sendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSendMedia(ctx context.Context, in *TLMessagesSendMedia, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_sendMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesForwardMessages(ctx context.Context, in *TLMessagesForwardMessages, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_forwardMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesReportSpam(ctx context.Context, in *TLMessagesReportSpam, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_reportSpam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesHideReportSpam(ctx context.Context, in *TLMessagesHideReportSpam, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_hideReportSpam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetPeerSettings(ctx context.Context, in *TLMessagesGetPeerSettings, opts ...grpc.CallOption) (*PeerSettings, error) {
	out := new(PeerSettings)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getPeerSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetChats(ctx context.Context, in *TLMessagesGetChats, opts ...grpc.CallOption) (*Messages_Chats, error) {
	out := new(Messages_Chats)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getChats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetFullChat(ctx context.Context, in *TLMessagesGetFullChat, opts ...grpc.CallOption) (*Messages_ChatFull, error) {
	out := new(Messages_ChatFull)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getFullChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesEditChatTitle(ctx context.Context, in *TLMessagesEditChatTitle, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_editChatTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesEditChatPhoto(ctx context.Context, in *TLMessagesEditChatPhoto, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_editChatPhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesAddChatUser(ctx context.Context, in *TLMessagesAddChatUser, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_addChatUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesDeleteChatUser(ctx context.Context, in *TLMessagesDeleteChatUser, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_deleteChatUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesCreateChat(ctx context.Context, in *TLMessagesCreateChat, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_createChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesForwardMessage(ctx context.Context, in *TLMessagesForwardMessage, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_forwardMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetDhConfig(ctx context.Context, in *TLMessagesGetDhConfig, opts ...grpc.CallOption) (*Messages_DhConfig, error) {
	out := new(Messages_DhConfig)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getDhConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesRequestEncryption(ctx context.Context, in *TLMessagesRequestEncryption, opts ...grpc.CallOption) (*EncryptedChat, error) {
	out := new(EncryptedChat)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_requestEncryption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesAcceptEncryption(ctx context.Context, in *TLMessagesAcceptEncryption, opts ...grpc.CallOption) (*EncryptedChat, error) {
	out := new(EncryptedChat)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_acceptEncryption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesDiscardEncryption(ctx context.Context, in *TLMessagesDiscardEncryption, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_discardEncryption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSetEncryptedTyping(ctx context.Context, in *TLMessagesSetEncryptedTyping, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_setEncryptedTyping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesReadEncryptedHistory(ctx context.Context, in *TLMessagesReadEncryptedHistory, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_readEncryptedHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSendEncrypted(ctx context.Context, in *TLMessagesSendEncrypted, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error) {
	out := new(Messages_SentEncryptedMessage)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_sendEncrypted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSendEncryptedFile(ctx context.Context, in *TLMessagesSendEncryptedFile, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error) {
	out := new(Messages_SentEncryptedMessage)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_sendEncryptedFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSendEncryptedService(ctx context.Context, in *TLMessagesSendEncryptedService, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error) {
	out := new(Messages_SentEncryptedMessage)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_sendEncryptedService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesReceivedQueue(ctx context.Context, in *TLMessagesReceivedQueue, opts ...grpc.CallOption) (*VectorLong, error) {
	out := new(VectorLong)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_receivedQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesReportEncryptedSpam(ctx context.Context, in *TLMessagesReportEncryptedSpam, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_reportEncryptedSpam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesReadMessageContents(ctx context.Context, in *TLMessagesReadMessageContents, opts ...grpc.CallOption) (*Messages_AffectedMessages, error) {
	out := new(Messages_AffectedMessages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_readMessageContents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetAllStickers(ctx context.Context, in *TLMessagesGetAllStickers, opts ...grpc.CallOption) (*Messages_AllStickers, error) {
	out := new(Messages_AllStickers)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getAllStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetWebPagePreview(ctx context.Context, in *TLMessagesGetWebPagePreview, opts ...grpc.CallOption) (*MessageMedia, error) {
	out := new(MessageMedia)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getWebPagePreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesExportChatInvite(ctx context.Context, in *TLMessagesExportChatInvite, opts ...grpc.CallOption) (*ExportedChatInvite, error) {
	out := new(ExportedChatInvite)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_exportChatInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesCheckChatInvite(ctx context.Context, in *TLMessagesCheckChatInvite, opts ...grpc.CallOption) (*ChatInvite, error) {
	out := new(ChatInvite)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_checkChatInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesImportChatInvite(ctx context.Context, in *TLMessagesImportChatInvite, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_importChatInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetStickerSet(ctx context.Context, in *TLMessagesGetStickerSet, opts ...grpc.CallOption) (*Messages_StickerSet, error) {
	out := new(Messages_StickerSet)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getStickerSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesInstallStickerSet(ctx context.Context, in *TLMessagesInstallStickerSet, opts ...grpc.CallOption) (*Messages_StickerSetInstallResult, error) {
	out := new(Messages_StickerSetInstallResult)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_installStickerSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesUninstallStickerSet(ctx context.Context, in *TLMessagesUninstallStickerSet, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_uninstallStickerSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesStartBot(ctx context.Context, in *TLMessagesStartBot, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_startBot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetMessagesViews(ctx context.Context, in *TLMessagesGetMessagesViews, opts ...grpc.CallOption) (*VectorInt, error) {
	out := new(VectorInt)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getMessagesViews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesToggleChatAdmins(ctx context.Context, in *TLMessagesToggleChatAdmins, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_toggleChatAdmins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesEditChatAdmin(ctx context.Context, in *TLMessagesEditChatAdmin, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_editChatAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesMigrateChat(ctx context.Context, in *TLMessagesMigrateChat, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_migrateChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSearchGlobal(ctx context.Context, in *TLMessagesSearchGlobal, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_searchGlobal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesReorderStickerSets(ctx context.Context, in *TLMessagesReorderStickerSets, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_reorderStickerSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetDocumentByHash(ctx context.Context, in *TLMessagesGetDocumentByHash, opts ...grpc.CallOption) (*Document, error) {
	out := new(Document)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getDocumentByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSearchGifs(ctx context.Context, in *TLMessagesSearchGifs, opts ...grpc.CallOption) (*Messages_FoundGifs, error) {
	out := new(Messages_FoundGifs)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_searchGifs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetSavedGifs(ctx context.Context, in *TLMessagesGetSavedGifs, opts ...grpc.CallOption) (*Messages_SavedGifs, error) {
	out := new(Messages_SavedGifs)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getSavedGifs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSaveGif(ctx context.Context, in *TLMessagesSaveGif, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_saveGif", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetInlineBotResults(ctx context.Context, in *TLMessagesGetInlineBotResults, opts ...grpc.CallOption) (*Messages_BotResults, error) {
	out := new(Messages_BotResults)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getInlineBotResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSetInlineBotResults(ctx context.Context, in *TLMessagesSetInlineBotResults, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_setInlineBotResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSendInlineBotResult(ctx context.Context, in *TLMessagesSendInlineBotResult, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_sendInlineBotResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetMessageEditData(ctx context.Context, in *TLMessagesGetMessageEditData, opts ...grpc.CallOption) (*Messages_MessageEditData, error) {
	out := new(Messages_MessageEditData)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getMessageEditData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesEditMessage(ctx context.Context, in *TLMessagesEditMessage, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_editMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesEditInlineBotMessage(ctx context.Context, in *TLMessagesEditInlineBotMessage, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_editInlineBotMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetBotCallbackAnswer(ctx context.Context, in *TLMessagesGetBotCallbackAnswer, opts ...grpc.CallOption) (*Messages_BotCallbackAnswer, error) {
	out := new(Messages_BotCallbackAnswer)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getBotCallbackAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSetBotCallbackAnswer(ctx context.Context, in *TLMessagesSetBotCallbackAnswer, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_setBotCallbackAnswer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetPeerDialogs(ctx context.Context, in *TLMessagesGetPeerDialogs, opts ...grpc.CallOption) (*Messages_PeerDialogs, error) {
	out := new(Messages_PeerDialogs)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getPeerDialogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSaveDraft(ctx context.Context, in *TLMessagesSaveDraft, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_saveDraft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetAllDrafts(ctx context.Context, in *TLMessagesGetAllDrafts, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getAllDrafts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetFeaturedStickers(ctx context.Context, in *TLMessagesGetFeaturedStickers, opts ...grpc.CallOption) (*Messages_FeaturedStickers, error) {
	out := new(Messages_FeaturedStickers)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getFeaturedStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesReadFeaturedStickers(ctx context.Context, in *TLMessagesReadFeaturedStickers, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_readFeaturedStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetRecentStickers(ctx context.Context, in *TLMessagesGetRecentStickers, opts ...grpc.CallOption) (*Messages_RecentStickers, error) {
	out := new(Messages_RecentStickers)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getRecentStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSaveRecentSticker(ctx context.Context, in *TLMessagesSaveRecentSticker, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_saveRecentSticker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesClearRecentStickers(ctx context.Context, in *TLMessagesClearRecentStickers, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_clearRecentStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetArchivedStickers(ctx context.Context, in *TLMessagesGetArchivedStickers, opts ...grpc.CallOption) (*Messages_ArchivedStickers, error) {
	out := new(Messages_ArchivedStickers)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getArchivedStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetMaskStickers(ctx context.Context, in *TLMessagesGetMaskStickers, opts ...grpc.CallOption) (*Messages_AllStickers, error) {
	out := new(Messages_AllStickers)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getMaskStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetAttachedStickers(ctx context.Context, in *TLMessagesGetAttachedStickers, opts ...grpc.CallOption) (*Vector_StickerSetCovered, error) {
	out := new(Vector_StickerSetCovered)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getAttachedStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSetGameScore(ctx context.Context, in *TLMessagesSetGameScore, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_setGameScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSetInlineGameScore(ctx context.Context, in *TLMessagesSetInlineGameScore, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_setInlineGameScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetGameHighScores(ctx context.Context, in *TLMessagesGetGameHighScores, opts ...grpc.CallOption) (*Messages_HighScores, error) {
	out := new(Messages_HighScores)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getGameHighScores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetInlineGameHighScores(ctx context.Context, in *TLMessagesGetInlineGameHighScores, opts ...grpc.CallOption) (*Messages_HighScores, error) {
	out := new(Messages_HighScores)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getInlineGameHighScores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetCommonChats(ctx context.Context, in *TLMessagesGetCommonChats, opts ...grpc.CallOption) (*Messages_Chats, error) {
	out := new(Messages_Chats)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getCommonChats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetAllChats(ctx context.Context, in *TLMessagesGetAllChats, opts ...grpc.CallOption) (*Messages_Chats, error) {
	out := new(Messages_Chats)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getAllChats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetWebPage(ctx context.Context, in *TLMessagesGetWebPage, opts ...grpc.CallOption) (*WebPage, error) {
	out := new(WebPage)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getWebPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesToggleDialogPin(ctx context.Context, in *TLMessagesToggleDialogPin, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_toggleDialogPin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesReorderPinnedDialogs(ctx context.Context, in *TLMessagesReorderPinnedDialogs, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_reorderPinnedDialogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetPinnedDialogs(ctx context.Context, in *TLMessagesGetPinnedDialogs, opts ...grpc.CallOption) (*Messages_PeerDialogs, error) {
	out := new(Messages_PeerDialogs)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getPinnedDialogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSetBotShippingResults(ctx context.Context, in *TLMessagesSetBotShippingResults, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_setBotShippingResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSetBotPrecheckoutResults(ctx context.Context, in *TLMessagesSetBotPrecheckoutResults, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_setBotPrecheckoutResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesUploadMedia(ctx context.Context, in *TLMessagesUploadMedia, opts ...grpc.CallOption) (*MessageMedia, error) {
	out := new(MessageMedia)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_uploadMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSendScreenshotNotification(ctx context.Context, in *TLMessagesSendScreenshotNotification, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_sendScreenshotNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetFavedStickers(ctx context.Context, in *TLMessagesGetFavedStickers, opts ...grpc.CallOption) (*Messages_FavedStickers, error) {
	out := new(Messages_FavedStickers)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getFavedStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesFaveSticker(ctx context.Context, in *TLMessagesFaveSticker, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_faveSticker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetUnreadMentions(ctx context.Context, in *TLMessagesGetUnreadMentions, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getUnreadMentions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesReadHistory73(ctx context.Context, in *TLMessagesReadHistory73, opts ...grpc.CallOption) (*Messages_AffectedMessages, error) {
	out := new(Messages_AffectedMessages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_readHistory73", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesEditMessage73(ctx context.Context, in *TLMessagesEditMessage73, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_editMessage73", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSearch73(ctx context.Context, in *TLMessagesSearch73, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_search73", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesReadMentions(ctx context.Context, in *TLMessagesReadMentions, opts ...grpc.CallOption) (*Messages_AffectedHistory, error) {
	out := new(Messages_AffectedHistory)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_readMentions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetRecentLocations(ctx context.Context, in *TLMessagesGetRecentLocations, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getRecentLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSendMultiMedia(ctx context.Context, in *TLMessagesSendMultiMedia, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_sendMultiMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesUploadEncryptedFile(ctx context.Context, in *TLMessagesUploadEncryptedFile, opts ...grpc.CallOption) (*EncryptedFile, error) {
	out := new(EncryptedFile)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_uploadEncryptedFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSaveRecentSticker73(ctx context.Context, in *TLMessagesSaveRecentSticker73, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_saveRecentSticker73", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetPeerDialogs82(ctx context.Context, in *TLMessagesGetPeerDialogs82, opts ...grpc.CallOption) (*Messages_PeerDialogs, error) {
	out := new(Messages_PeerDialogs)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getPeerDialogs82", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetMessages82(ctx context.Context, in *TLMessagesGetMessages82, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getMessages82", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetDialogs82(ctx context.Context, in *TLMessagesGetDialogs82, opts ...grpc.CallOption) (*Messages_Dialogs, error) {
	out := new(Messages_Dialogs)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getDialogs82", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetHistory82(ctx context.Context, in *TLMessagesGetHistory82, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getHistory82", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSearch82(ctx context.Context, in *TLMessagesSearch82, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_search82", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSendMedia82(ctx context.Context, in *TLMessagesSendMedia82, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_sendMedia82", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetDialogs114(ctx context.Context, in *TLMessagesGetDialogs114, opts ...grpc.CallOption) (*Messages_Dialogs, error) {
	out := new(Messages_Dialogs)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getDialogs114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSendMessage114(ctx context.Context, in *TLMessagesSendMessage114, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_sendMessage114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSendMedia114(ctx context.Context, in *TLMessagesSendMedia114, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_sendMedia114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesForwardMessages114(ctx context.Context, in *TLMessagesForwardMessages114, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_forwardMessages114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesReport(ctx context.Context, in *TLMessagesReport, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_report", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetStickers(ctx context.Context, in *TLMessagesGetStickers, opts ...grpc.CallOption) (*Messages_Stickers, error) {
	out := new(Messages_Stickers)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetWebPagePreview114(ctx context.Context, in *TLMessagesGetWebPagePreview114, opts ...grpc.CallOption) (*MessageMedia, error) {
	out := new(MessageMedia)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getWebPagePreview114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesExportChatInvite114(ctx context.Context, in *TLMessagesExportChatInvite114, opts ...grpc.CallOption) (*ExportedChatInvite, error) {
	out := new(ExportedChatInvite)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_exportChatInvite114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSearchGlobal114(ctx context.Context, in *TLMessagesSearchGlobal114, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_searchGlobal114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSendInlineBotResult114(ctx context.Context, in *TLMessagesSendInlineBotResult114, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_sendInlineBotResult114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesEditMessage114(ctx context.Context, in *TLMessagesEditMessage114, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_editMessage114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesEditInlineBotMessage114(ctx context.Context, in *TLMessagesEditInlineBotMessage114, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_editInlineBotMessage114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesToggleDialogPin114(ctx context.Context, in *TLMessagesToggleDialogPin114, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_toggleDialogPin114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesReorderPinnedDialogs114(ctx context.Context, in *TLMessagesReorderPinnedDialogs114, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_reorderPinnedDialogs114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetPinnedDialogs114(ctx context.Context, in *TLMessagesGetPinnedDialogs114, opts ...grpc.CallOption) (*Messages_PeerDialogs, error) {
	out := new(Messages_PeerDialogs)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getPinnedDialogs114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetRecentLocations114(ctx context.Context, in *TLMessagesGetRecentLocations114, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getRecentLocations114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSendMultiMedia114(ctx context.Context, in *TLMessagesSendMultiMedia114, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_sendMultiMedia114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSearchStickerSets(ctx context.Context, in *TLMessagesSearchStickerSets, opts ...grpc.CallOption) (*Messages_FoundStickerSets, error) {
	out := new(Messages_FoundStickerSets)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_searchStickerSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetSplitRanges(ctx context.Context, in *TLMessagesGetSplitRanges, opts ...grpc.CallOption) (*Vector_MessageRange, error) {
	out := new(Vector_MessageRange)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getSplitRanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesMarkDialogUnread(ctx context.Context, in *TLMessagesMarkDialogUnread, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_markDialogUnread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetDialogUnreadMarks(ctx context.Context, in *TLMessagesGetDialogUnreadMarks, opts ...grpc.CallOption) (*Vector_DialogPeer, error) {
	out := new(Vector_DialogPeer)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getDialogUnreadMarks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesClearAllDrafts(ctx context.Context, in *TLMessagesClearAllDrafts, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_clearAllDrafts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesUpdatePinnedMessage(ctx context.Context, in *TLMessagesUpdatePinnedMessage, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_updatePinnedMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSendVote(ctx context.Context, in *TLMessagesSendVote, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_sendVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetPollResults(ctx context.Context, in *TLMessagesGetPollResults, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getPollResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetOnlines(ctx context.Context, in *TLMessagesGetOnlines, opts ...grpc.CallOption) (*ChatOnlines, error) {
	out := new(ChatOnlines)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getOnlines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetStatsURL(ctx context.Context, in *TLMessagesGetStatsURL, opts ...grpc.CallOption) (*StatsURL, error) {
	out := new(StatsURL)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getStatsURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesEditChatAbout(ctx context.Context, in *TLMessagesEditChatAbout, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_editChatAbout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesEditChatDefaultBannedRights(ctx context.Context, in *TLMessagesEditChatDefaultBannedRights, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_editChatDefaultBannedRights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetEmojiKeywords(ctx context.Context, in *TLMessagesGetEmojiKeywords, opts ...grpc.CallOption) (*EmojiKeywordsDifference, error) {
	out := new(EmojiKeywordsDifference)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getEmojiKeywords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetEmojiKeywordsDifference(ctx context.Context, in *TLMessagesGetEmojiKeywordsDifference, opts ...grpc.CallOption) (*EmojiKeywordsDifference, error) {
	out := new(EmojiKeywordsDifference)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getEmojiKeywordsDifference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetEmojiKeywordsLanguages(ctx context.Context, in *TLMessagesGetEmojiKeywordsLanguages, opts ...grpc.CallOption) (*Vector_EmojiLanguage, error) {
	out := new(Vector_EmojiLanguage)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getEmojiKeywordsLanguages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetEmojiURL(ctx context.Context, in *TLMessagesGetEmojiURL, opts ...grpc.CallOption) (*EmojiURL, error) {
	out := new(EmojiURL)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getEmojiURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetSearchCounters(ctx context.Context, in *TLMessagesGetSearchCounters, opts ...grpc.CallOption) (*Vector_Messages_SearchCounter, error) {
	out := new(Vector_Messages_SearchCounter)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getSearchCounters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesRequestUrlAuth(ctx context.Context, in *TLMessagesRequestUrlAuth, opts ...grpc.CallOption) (*UrlAuthResult, error) {
	out := new(UrlAuthResult)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_requestUrlAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesAcceptUrlAuth(ctx context.Context, in *TLMessagesAcceptUrlAuth, opts ...grpc.CallOption) (*UrlAuthResult, error) {
	out := new(UrlAuthResult)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_acceptUrlAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesHidePeerSettingsBar(ctx context.Context, in *TLMessagesHidePeerSettingsBar, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_hidePeerSettingsBar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetScheduledHistory(ctx context.Context, in *TLMessagesGetScheduledHistory, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getScheduledHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetScheduledMessages(ctx context.Context, in *TLMessagesGetScheduledMessages, opts ...grpc.CallOption) (*Messages_Messages, error) {
	out := new(Messages_Messages)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getScheduledMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSendScheduledMessages(ctx context.Context, in *TLMessagesSendScheduledMessages, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_sendScheduledMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesDeleteScheduledMessages(ctx context.Context, in *TLMessagesDeleteScheduledMessages, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_deleteScheduledMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetPollVotes(ctx context.Context, in *TLMessagesGetPollVotes, opts ...grpc.CallOption) (*Messages_VotesList, error) {
	out := new(Messages_VotesList)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getPollVotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesToggleStickerSets(ctx context.Context, in *TLMessagesToggleStickerSets, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_toggleStickerSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetDialogFilters(ctx context.Context, in *TLMessagesGetDialogFilters, opts ...grpc.CallOption) (*Vector_DialogFilter, error) {
	out := new(Vector_DialogFilter)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getDialogFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetSuggestedDialogFilters(ctx context.Context, in *TLMessagesGetSuggestedDialogFilters, opts ...grpc.CallOption) (*Vector_DialogFilterSuggested, error) {
	out := new(Vector_DialogFilterSuggested)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getSuggestedDialogFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesUpdateDialogFilter(ctx context.Context, in *TLMessagesUpdateDialogFilter, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_updateDialogFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesUpdateDialogFiltersOrder(ctx context.Context, in *TLMessagesUpdateDialogFiltersOrder, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_updateDialogFiltersOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetOldFeaturedStickers(ctx context.Context, in *TLMessagesGetOldFeaturedStickers, opts ...grpc.CallOption) (*Messages_FeaturedStickers, error) {
	out := new(Messages_FeaturedStickers)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getOldFeaturedStickers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSendEncrypted118(ctx context.Context, in *TLMessagesSendEncrypted118, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error) {
	out := new(Messages_SentEncryptedMessage)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_sendEncrypted118", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesGetBotCallbackAnswer118(ctx context.Context, in *TLMessagesGetBotCallbackAnswer118, opts ...grpc.CallOption) (*Messages_BotCallbackAnswer, error) {
	out := new(Messages_BotCallbackAnswer)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_getBotCallbackAnswer118", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessagesClient) MessagesSendEncryptedFile118(ctx context.Context, in *TLMessagesSendEncryptedFile118, opts ...grpc.CallOption) (*Messages_SentEncryptedMessage, error) {
	out := new(Messages_SentEncryptedMessage)
	err := c.cc.Invoke(ctx, "/mtproto.RPCMessages/messages_sendEncryptedFile118", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCMessagesServer is the server API for RPCMessages service.
type RPCMessagesServer interface {
	// messages.getMessages#4222fa74 id:Vector<int> = messages.Messages;
	MessagesGetMessages(context.Context, *TLMessagesGetMessages) (*Messages_Messages, error)
	// messages.getDialogs#191ba9c5 flags:# exclude_pinned:flags.0?true offset_date:int offset_id:int offset_peer:InputPeer limit:int = messages.Dialogs;
	MessagesGetDialogs(context.Context, *TLMessagesGetDialogs) (*Messages_Dialogs, error)
	// messages.getHistory#afa92846 peer:InputPeer offset_id:int offset_date:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;
	MessagesGetHistory(context.Context, *TLMessagesGetHistory) (*Messages_Messages, error)
	// messages.search#39e9ea0 flags:# peer:InputPeer q:string from_id:flags.0?InputUser filter:MessagesFilter min_date:int max_date:int offset_id:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;
	MessagesSearch(context.Context, *TLMessagesSearch) (*Messages_Messages, error)
	// messages.readHistory#e306d3a peer:InputPeer max_id:int = messages.AffectedMessages;
	MessagesReadHistory(context.Context, *TLMessagesReadHistory) (*Messages_AffectedMessages, error)
	// messages.deleteHistory#1c015b09 flags:# just_clear:flags.0?true revoke:flags.1?true peer:InputPeer max_id:int = messages.AffectedHistory;
	MessagesDeleteHistory(context.Context, *TLMessagesDeleteHistory) (*Messages_AffectedHistory, error)
	// messages.deleteMessages#e58e95d2 flags:# revoke:flags.0?true id:Vector<int> = messages.AffectedMessages;
	MessagesDeleteMessages(context.Context, *TLMessagesDeleteMessages) (*Messages_AffectedMessages, error)
	// messages.receivedMessages#5a954c0 max_id:int = Vector<ReceivedNotifyMessage>;
	MessagesReceivedMessages(context.Context, *TLMessagesReceivedMessages) (*Vector_ReceivedNotifyMessage, error)
	// messages.setTyping#a3825e50 peer:InputPeer action:SendMessageAction = Bool;
	MessagesSetTyping(context.Context, *TLMessagesSetTyping) (*Bool, error)
	// messages.sendMessage#fa88427a flags:# no_webpage:flags.1?true silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Updates;
	MessagesSendMessage(context.Context, *TLMessagesSendMessage) (*Updates, error)
	// messages.sendMedia#c8f16791 flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int media:InputMedia random_id:long reply_markup:flags.2?ReplyMarkup = Updates;
	MessagesSendMedia(context.Context, *TLMessagesSendMedia) (*Updates, error)
	// messages.forwardMessages#708e0195 flags:# silent:flags.5?true background:flags.6?true with_my_score:flags.8?true from_peer:InputPeer id:Vector<int> random_id:Vector<long> to_peer:InputPeer = Updates;
	MessagesForwardMessages(context.Context, *TLMessagesForwardMessages) (*Updates, error)
	// messages.reportSpam#cf1592db peer:InputPeer = Bool;
	MessagesReportSpam(context.Context, *TLMessagesReportSpam) (*Bool, error)
	// messages.hideReportSpam#a8f1709b peer:InputPeer = Bool;
	MessagesHideReportSpam(context.Context, *TLMessagesHideReportSpam) (*Bool, error)
	// messages.getPeerSettings#3672e09c peer:InputPeer = PeerSettings;
	MessagesGetPeerSettings(context.Context, *TLMessagesGetPeerSettings) (*PeerSettings, error)
	// messages.getChats#3c6aa187 id:Vector<int> = messages.Chats;
	MessagesGetChats(context.Context, *TLMessagesGetChats) (*Messages_Chats, error)
	// messages.getFullChat#3b831c66 chat_id:int = messages.ChatFull;
	MessagesGetFullChat(context.Context, *TLMessagesGetFullChat) (*Messages_ChatFull, error)
	// messages.editChatTitle#dc452855 chat_id:int title:string = Updates;
	MessagesEditChatTitle(context.Context, *TLMessagesEditChatTitle) (*Updates, error)
	// messages.editChatPhoto#ca4c79d8 chat_id:int photo:InputChatPhoto = Updates;
	MessagesEditChatPhoto(context.Context, *TLMessagesEditChatPhoto) (*Updates, error)
	// messages.addChatUser#f9a0aa09 chat_id:int user_id:InputUser fwd_limit:int = Updates;
	MessagesAddChatUser(context.Context, *TLMessagesAddChatUser) (*Updates, error)
	// messages.deleteChatUser#e0611f16 chat_id:int user_id:InputUser = Updates;
	MessagesDeleteChatUser(context.Context, *TLMessagesDeleteChatUser) (*Updates, error)
	// messages.createChat#9cb126e users:Vector<InputUser> title:string = Updates;
	MessagesCreateChat(context.Context, *TLMessagesCreateChat) (*Updates, error)
	// messages.forwardMessage#33963bf9 peer:InputPeer id:int random_id:long = Updates;
	MessagesForwardMessage(context.Context, *TLMessagesForwardMessage) (*Updates, error)
	// messages.getDhConfig#26cf8950 version:int random_length:int = messages.DhConfig;
	MessagesGetDhConfig(context.Context, *TLMessagesGetDhConfig) (*Messages_DhConfig, error)
	// messages.requestEncryption#f64daf43 user_id:InputUser random_id:int g_a:bytes = EncryptedChat;
	MessagesRequestEncryption(context.Context, *TLMessagesRequestEncryption) (*EncryptedChat, error)
	// messages.acceptEncryption#3dbc0415 peer:InputEncryptedChat g_b:bytes key_fingerprint:long = EncryptedChat;
	MessagesAcceptEncryption(context.Context, *TLMessagesAcceptEncryption) (*EncryptedChat, error)
	// messages.discardEncryption#edd923c5 chat_id:int = Bool;
	MessagesDiscardEncryption(context.Context, *TLMessagesDiscardEncryption) (*Bool, error)
	// messages.setEncryptedTyping#791451ed peer:InputEncryptedChat typing:Bool = Bool;
	MessagesSetEncryptedTyping(context.Context, *TLMessagesSetEncryptedTyping) (*Bool, error)
	// messages.readEncryptedHistory#7f4b690a peer:InputEncryptedChat max_date:int = Bool;
	MessagesReadEncryptedHistory(context.Context, *TLMessagesReadEncryptedHistory) (*Bool, error)
	// messages.sendEncrypted#a9776773 peer:InputEncryptedChat random_id:long data:bytes = messages.SentEncryptedMessage;
	MessagesSendEncrypted(context.Context, *TLMessagesSendEncrypted) (*Messages_SentEncryptedMessage, error)
	// messages.sendEncryptedFile#9a901b66 peer:InputEncryptedChat random_id:long data:bytes file:InputEncryptedFile = messages.SentEncryptedMessage;
	MessagesSendEncryptedFile(context.Context, *TLMessagesSendEncryptedFile) (*Messages_SentEncryptedMessage, error)
	// messages.sendEncryptedService#32d439a4 peer:InputEncryptedChat random_id:long data:bytes = messages.SentEncryptedMessage;
	MessagesSendEncryptedService(context.Context, *TLMessagesSendEncryptedService) (*Messages_SentEncryptedMessage, error)
	// messages.receivedQueue#55a5bb66 max_qts:int = Vector<long>;
	MessagesReceivedQueue(context.Context, *TLMessagesReceivedQueue) (*VectorLong, error)
	// messages.reportEncryptedSpam#4b0c8c0f peer:InputEncryptedChat = Bool;
	MessagesReportEncryptedSpam(context.Context, *TLMessagesReportEncryptedSpam) (*Bool, error)
	// messages.readMessageContents#36a73f77 id:Vector<int> = messages.AffectedMessages;
	MessagesReadMessageContents(context.Context, *TLMessagesReadMessageContents) (*Messages_AffectedMessages, error)
	// messages.getAllStickers#1c9618b1 hash:int = messages.AllStickers;
	MessagesGetAllStickers(context.Context, *TLMessagesGetAllStickers) (*Messages_AllStickers, error)
	// messages.getWebPagePreview#25223e24 message:string = MessageMedia;
	MessagesGetWebPagePreview(context.Context, *TLMessagesGetWebPagePreview) (*MessageMedia, error)
	// messages.exportChatInvite#7d885289 chat_id:int = ExportedChatInvite;
	MessagesExportChatInvite(context.Context, *TLMessagesExportChatInvite) (*ExportedChatInvite, error)
	// messages.checkChatInvite#3eadb1bb hash:string = ChatInvite;
	MessagesCheckChatInvite(context.Context, *TLMessagesCheckChatInvite) (*ChatInvite, error)
	// messages.importChatInvite#6c50051c hash:string = Updates;
	MessagesImportChatInvite(context.Context, *TLMessagesImportChatInvite) (*Updates, error)
	// messages.getStickerSet#2619a90e stickerset:InputStickerSet = messages.StickerSet;
	MessagesGetStickerSet(context.Context, *TLMessagesGetStickerSet) (*Messages_StickerSet, error)
	// messages.installStickerSet#c78fe460 stickerset:InputStickerSet archived:Bool = messages.StickerSetInstallResult;
	MessagesInstallStickerSet(context.Context, *TLMessagesInstallStickerSet) (*Messages_StickerSetInstallResult, error)
	// messages.uninstallStickerSet#f96e55de stickerset:InputStickerSet = Bool;
	MessagesUninstallStickerSet(context.Context, *TLMessagesUninstallStickerSet) (*Bool, error)
	// messages.startBot#e6df7378 bot:InputUser peer:InputPeer random_id:long start_param:string = Updates;
	MessagesStartBot(context.Context, *TLMessagesStartBot) (*Updates, error)
	// messages.getMessagesViews#c4c8a55d peer:InputPeer id:Vector<int> increment:Bool = Vector<int>;
	MessagesGetMessagesViews(context.Context, *TLMessagesGetMessagesViews) (*VectorInt, error)
	// messages.toggleChatAdmins#ec8bd9e1 chat_id:int enabled:Bool = Updates;
	MessagesToggleChatAdmins(context.Context, *TLMessagesToggleChatAdmins) (*Updates, error)
	// messages.editChatAdmin#a9e69f2e chat_id:int user_id:InputUser is_admin:Bool = Bool;
	MessagesEditChatAdmin(context.Context, *TLMessagesEditChatAdmin) (*Bool, error)
	// messages.migrateChat#15a3b8e3 chat_id:int = Updates;
	MessagesMigrateChat(context.Context, *TLMessagesMigrateChat) (*Updates, error)
	// messages.searchGlobal#9e3cacb0 q:string offset_date:int offset_peer:InputPeer offset_id:int limit:int = messages.Messages;
	MessagesSearchGlobal(context.Context, *TLMessagesSearchGlobal) (*Messages_Messages, error)
	// messages.reorderStickerSets#78337739 flags:# masks:flags.0?true order:Vector<long> = Bool;
	MessagesReorderStickerSets(context.Context, *TLMessagesReorderStickerSets) (*Bool, error)
	// messages.getDocumentByHash#338e2464 sha256:bytes size:int mime_type:string = Document;
	MessagesGetDocumentByHash(context.Context, *TLMessagesGetDocumentByHash) (*Document, error)
	// messages.searchGifs#bf9a776b q:string offset:int = messages.FoundGifs;
	MessagesSearchGifs(context.Context, *TLMessagesSearchGifs) (*Messages_FoundGifs, error)
	// messages.getSavedGifs#83bf3d52 hash:int = messages.SavedGifs;
	MessagesGetSavedGifs(context.Context, *TLMessagesGetSavedGifs) (*Messages_SavedGifs, error)
	// messages.saveGif#327a30cb id:InputDocument unsave:Bool = Bool;
	MessagesSaveGif(context.Context, *TLMessagesSaveGif) (*Bool, error)
	// messages.getInlineBotResults#514e999d flags:# bot:InputUser peer:InputPeer geo_point:flags.0?InputGeoPoint query:string offset:string = messages.BotResults;
	MessagesGetInlineBotResults(context.Context, *TLMessagesGetInlineBotResults) (*Messages_BotResults, error)
	// messages.setInlineBotResults#eb5ea206 flags:# gallery:flags.0?true private:flags.1?true query_id:long results:Vector<InputBotInlineResult> cache_time:int next_offset:flags.2?string switch_pm:flags.3?InlineBotSwitchPM = Bool;
	MessagesSetInlineBotResults(context.Context, *TLMessagesSetInlineBotResults) (*Bool, error)
	// messages.sendInlineBotResult#b16e06fe flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int random_id:long query_id:long id:string = Updates;
	MessagesSendInlineBotResult(context.Context, *TLMessagesSendInlineBotResult) (*Updates, error)
	// messages.getMessageEditData#fda68d36 peer:InputPeer id:int = messages.MessageEditData;
	MessagesGetMessageEditData(context.Context, *TLMessagesGetMessageEditData) (*Messages_MessageEditData, error)
	// messages.editMessage#ce91e4ca flags:# no_webpage:flags.1?true peer:InputPeer id:int message:flags.11?string reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Updates;
	MessagesEditMessage(context.Context, *TLMessagesEditMessage) (*Updates, error)
	// messages.editInlineBotMessage#130c2c85 flags:# no_webpage:flags.1?true id:InputBotInlineMessageID message:flags.11?string reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Bool;
	MessagesEditInlineBotMessage(context.Context, *TLMessagesEditInlineBotMessage) (*Bool, error)
	// messages.getBotCallbackAnswer#810a9fec flags:# game:flags.1?true peer:InputPeer msg_id:int data:flags.0?bytes = messages.BotCallbackAnswer;
	MessagesGetBotCallbackAnswer(context.Context, *TLMessagesGetBotCallbackAnswer) (*Messages_BotCallbackAnswer, error)
	// messages.setBotCallbackAnswer#d58f130a flags:# alert:flags.1?true query_id:long message:flags.0?string url:flags.2?string cache_time:int = Bool;
	MessagesSetBotCallbackAnswer(context.Context, *TLMessagesSetBotCallbackAnswer) (*Bool, error)
	// messages.getPeerDialogs#2d9776b9 peers:Vector<InputPeer> = messages.PeerDialogs;
	MessagesGetPeerDialogs(context.Context, *TLMessagesGetPeerDialogs) (*Messages_PeerDialogs, error)
	// messages.saveDraft#bc39e14b flags:# no_webpage:flags.1?true reply_to_msg_id:flags.0?int peer:InputPeer message:string entities:flags.3?Vector<MessageEntity> = Bool;
	MessagesSaveDraft(context.Context, *TLMessagesSaveDraft) (*Bool, error)
	// messages.getAllDrafts#6a3f8d65 = Updates;
	MessagesGetAllDrafts(context.Context, *TLMessagesGetAllDrafts) (*Updates, error)
	// messages.getFeaturedStickers#2dacca4f hash:int = messages.FeaturedStickers;
	MessagesGetFeaturedStickers(context.Context, *TLMessagesGetFeaturedStickers) (*Messages_FeaturedStickers, error)
	// messages.readFeaturedStickers#5b118126 id:Vector<long> = Bool;
	MessagesReadFeaturedStickers(context.Context, *TLMessagesReadFeaturedStickers) (*Bool, error)
	// messages.getRecentStickers#5ea192c9 flags:# attached:flags.0?true hash:int = messages.RecentStickers;
	MessagesGetRecentStickers(context.Context, *TLMessagesGetRecentStickers) (*Messages_RecentStickers, error)
	// messages.saveRecentSticker#392718f8 flags:# attached:flags.0?true id:InputDocument unsave:Bool = Bool;
	MessagesSaveRecentSticker(context.Context, *TLMessagesSaveRecentSticker) (*Bool, error)
	// messages.clearRecentStickers#8999602d flags:# attached:flags.0?true = Bool;
	MessagesClearRecentStickers(context.Context, *TLMessagesClearRecentStickers) (*Bool, error)
	// messages.getArchivedStickers#57f17692 flags:# masks:flags.0?true offset_id:long limit:int = messages.ArchivedStickers;
	MessagesGetArchivedStickers(context.Context, *TLMessagesGetArchivedStickers) (*Messages_ArchivedStickers, error)
	// messages.getMaskStickers#65b8c79f hash:int = messages.AllStickers;
	MessagesGetMaskStickers(context.Context, *TLMessagesGetMaskStickers) (*Messages_AllStickers, error)
	// messages.getAttachedStickers#cc5b67cc media:InputStickeredMedia = Vector<StickerSetCovered>;
	MessagesGetAttachedStickers(context.Context, *TLMessagesGetAttachedStickers) (*Vector_StickerSetCovered, error)
	// messages.setGameScore#8ef8ecc0 flags:# edit_message:flags.0?true force:flags.1?true peer:InputPeer id:int user_id:InputUser score:int = Updates;
	MessagesSetGameScore(context.Context, *TLMessagesSetGameScore) (*Updates, error)
	// messages.setInlineGameScore#15ad9f64 flags:# edit_message:flags.0?true force:flags.1?true id:InputBotInlineMessageID user_id:InputUser score:int = Bool;
	MessagesSetInlineGameScore(context.Context, *TLMessagesSetInlineGameScore) (*Bool, error)
	// messages.getGameHighScores#e822649d peer:InputPeer id:int user_id:InputUser = messages.HighScores;
	MessagesGetGameHighScores(context.Context, *TLMessagesGetGameHighScores) (*Messages_HighScores, error)
	// messages.getInlineGameHighScores#f635e1b id:InputBotInlineMessageID user_id:InputUser = messages.HighScores;
	MessagesGetInlineGameHighScores(context.Context, *TLMessagesGetInlineGameHighScores) (*Messages_HighScores, error)
	// messages.getCommonChats#d0a48c4 user_id:InputUser max_id:int limit:int = messages.Chats;
	MessagesGetCommonChats(context.Context, *TLMessagesGetCommonChats) (*Messages_Chats, error)
	// messages.getAllChats#eba80ff0 except_ids:Vector<int> = messages.Chats;
	MessagesGetAllChats(context.Context, *TLMessagesGetAllChats) (*Messages_Chats, error)
	// messages.getWebPage#32ca8f91 url:string hash:int = WebPage;
	MessagesGetWebPage(context.Context, *TLMessagesGetWebPage) (*WebPage, error)
	// messages.toggleDialogPin#3289be6a flags:# pinned:flags.0?true peer:InputPeer = Bool;
	MessagesToggleDialogPin(context.Context, *TLMessagesToggleDialogPin) (*Bool, error)
	// messages.reorderPinnedDialogs#959ff644 flags:# force:flags.0?true order:Vector<InputPeer> = Bool;
	MessagesReorderPinnedDialogs(context.Context, *TLMessagesReorderPinnedDialogs) (*Bool, error)
	// messages.getPinnedDialogs#e254d64e = messages.PeerDialogs;
	MessagesGetPinnedDialogs(context.Context, *TLMessagesGetPinnedDialogs) (*Messages_PeerDialogs, error)
	// messages.setBotShippingResults#e5f672fa flags:# query_id:long error:flags.0?string shipping_options:flags.1?Vector<ShippingOption> = Bool;
	MessagesSetBotShippingResults(context.Context, *TLMessagesSetBotShippingResults) (*Bool, error)
	// messages.setBotPrecheckoutResults#9c2dd95 flags:# success:flags.1?true query_id:long error:flags.0?string = Bool;
	MessagesSetBotPrecheckoutResults(context.Context, *TLMessagesSetBotPrecheckoutResults) (*Bool, error)
	// messages.uploadMedia#519bc2b1 peer:InputPeer media:InputMedia = MessageMedia;
	MessagesUploadMedia(context.Context, *TLMessagesUploadMedia) (*MessageMedia, error)
	// messages.sendScreenshotNotification#c97df020 peer:InputPeer reply_to_msg_id:int random_id:long = Updates;
	MessagesSendScreenshotNotification(context.Context, *TLMessagesSendScreenshotNotification) (*Updates, error)
	// messages.getFavedStickers#21ce0b0e hash:int = messages.FavedStickers;
	MessagesGetFavedStickers(context.Context, *TLMessagesGetFavedStickers) (*Messages_FavedStickers, error)
	// messages.faveSticker#b9ffc55b id:InputDocument unfave:Bool = Bool;
	MessagesFaveSticker(context.Context, *TLMessagesFaveSticker) (*Bool, error)
	// messages.getUnreadMentions#46578472 peer:InputPeer offset_id:int add_offset:int limit:int max_id:int min_id:int = messages.Messages;
	MessagesGetUnreadMentions(context.Context, *TLMessagesGetUnreadMentions) (*Messages_Messages, error)
	// messages.readHistory#272c63bf peer:InputPeer max_id:int offset:int = messages.AffectedMessages;
	MessagesReadHistory73(context.Context, *TLMessagesReadHistory73) (*Messages_AffectedMessages, error)
	// messages.editMessage#5d1b8dd flags:# no_webpage:flags.1?true stop_geo_live:flags.12?true peer:InputPeer id:int message:flags.11?string reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> geo_point:flags.13?InputGeoPoint = Updates;
	MessagesEditMessage73(context.Context, *TLMessagesEditMessage73) (*Updates, error)
	// messages.search#f288a275 flags:# peer:InputPeer q:string from_id:flags.0?InputUser filter:MessagesFilter min_date:int max_date:int offset:int max_id:int limit:int = messages.Messages;
	MessagesSearch73(context.Context, *TLMessagesSearch73) (*Messages_Messages, error)
	// messages.readMentions#f0189d3 peer:InputPeer = messages.AffectedHistory;
	MessagesReadMentions(context.Context, *TLMessagesReadMentions) (*Messages_AffectedHistory, error)
	// messages.getRecentLocations#249431e2 peer:InputPeer limit:int = messages.Messages;
	MessagesGetRecentLocations(context.Context, *TLMessagesGetRecentLocations) (*Messages_Messages, error)
	// messages.sendMultiMedia#2095512f flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int multi_media:Vector<InputSingleMedia> = Updates;
	MessagesSendMultiMedia(context.Context, *TLMessagesSendMultiMedia) (*Updates, error)
	// messages.uploadEncryptedFile#5057c497 peer:InputEncryptedChat file:InputEncryptedFile = EncryptedFile;
	MessagesUploadEncryptedFile(context.Context, *TLMessagesUploadEncryptedFile) (*EncryptedFile, error)
	// messages.saveRecentSticker#348e39bf id:InputDocument unsave:Bool = Bool;
	MessagesSaveRecentSticker73(context.Context, *TLMessagesSaveRecentSticker73) (*Bool, error)
	// messages.getPeerDialogs#e470bcfd peers:Vector<InputDialogPeer> = messages.PeerDialogs;
	MessagesGetPeerDialogs82(context.Context, *TLMessagesGetPeerDialogs82) (*Messages_PeerDialogs, error)
	// messages.getMessages#63c66506 id:Vector<InputMessage> = messages.Messages;
	MessagesGetMessages82(context.Context, *TLMessagesGetMessages82) (*Messages_Messages, error)
	// messages.getDialogs#b098aee6 flags:# exclude_pinned:flags.0?true offset_date:int offset_id:int offset_peer:InputPeer limit:int hash:int = messages.Dialogs;
	MessagesGetDialogs82(context.Context, *TLMessagesGetDialogs82) (*Messages_Dialogs, error)
	// messages.getHistory#dcbb8260 peer:InputPeer offset_id:int offset_date:int add_offset:int limit:int max_id:int min_id:int hash:int = messages.Messages;
	MessagesGetHistory82(context.Context, *TLMessagesGetHistory82) (*Messages_Messages, error)
	// messages.search#8614ef68 flags:# peer:InputPeer q:string from_id:flags.0?InputUser filter:MessagesFilter min_date:int max_date:int offset_id:int add_offset:int limit:int max_id:int min_id:int hash:int = messages.Messages;
	MessagesSearch82(context.Context, *TLMessagesSearch82) (*Messages_Messages, error)
	// messages.sendMedia#b8d1262b flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int media:InputMedia message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Updates;
	MessagesSendMedia82(context.Context, *TLMessagesSendMedia82) (*Updates, error)
	// messages.getDialogs#a0ee3b73 flags:# exclude_pinned:flags.0?true folder_id:flags.1?int offset_date:int offset_id:int offset_peer:InputPeer limit:int hash:int = messages.Dialogs;
	MessagesGetDialogs114(context.Context, *TLMessagesGetDialogs114) (*Messages_Dialogs, error)
	// messages.sendMessage#520c3870 flags:# no_webpage:flags.1?true silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int = Updates;
	MessagesSendMessage114(context.Context, *TLMessagesSendMessage114) (*Updates, error)
	// messages.sendMedia#3491eba9 flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int media:InputMedia message:string random_id:long reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.10?int = Updates;
	MessagesSendMedia114(context.Context, *TLMessagesSendMedia114) (*Updates, error)
	// messages.forwardMessages#d9fee60e flags:# silent:flags.5?true background:flags.6?true with_my_score:flags.8?true grouped:flags.9?true from_peer:InputPeer id:Vector<int> random_id:Vector<long> to_peer:InputPeer schedule_date:flags.10?int = Updates;
	MessagesForwardMessages114(context.Context, *TLMessagesForwardMessages114) (*Updates, error)
	// messages.report#bd82b658 peer:InputPeer id:Vector<int> reason:ReportReason = Bool;
	MessagesReport(context.Context, *TLMessagesReport) (*Bool, error)
	// messages.getStickers#43d4f2c emoticon:string hash:int = messages.Stickers;
	MessagesGetStickers(context.Context, *TLMessagesGetStickers) (*Messages_Stickers, error)
	// messages.getWebPagePreview#8b68b0cc flags:# message:string entities:flags.3?Vector<MessageEntity> = MessageMedia;
	MessagesGetWebPagePreview114(context.Context, *TLMessagesGetWebPagePreview114) (*MessageMedia, error)
	// messages.exportChatInvite#df7534c peer:InputPeer = ExportedChatInvite;
	MessagesExportChatInvite114(context.Context, *TLMessagesExportChatInvite114) (*ExportedChatInvite, error)
	// messages.searchGlobal#bf7225a4 flags:# folder_id:flags.0?int q:string offset_rate:int offset_peer:InputPeer offset_id:int limit:int = messages.Messages;
	MessagesSearchGlobal114(context.Context, *TLMessagesSearchGlobal114) (*Messages_Messages, error)
	// messages.sendInlineBotResult#220815b0 flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true hide_via:flags.11?true peer:InputPeer reply_to_msg_id:flags.0?int random_id:long query_id:long id:string schedule_date:flags.10?int = Updates;
	MessagesSendInlineBotResult114(context.Context, *TLMessagesSendInlineBotResult114) (*Updates, error)
	// messages.editMessage#48f71778 flags:# no_webpage:flags.1?true peer:InputPeer id:int message:flags.11?string media:flags.14?InputMedia reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> schedule_date:flags.15?int = Updates;
	MessagesEditMessage114(context.Context, *TLMessagesEditMessage114) (*Updates, error)
	// messages.editInlineBotMessage#83557dba flags:# no_webpage:flags.1?true id:InputBotInlineMessageID message:flags.11?string media:flags.14?InputMedia reply_markup:flags.2?ReplyMarkup entities:flags.3?Vector<MessageEntity> = Bool;
	MessagesEditInlineBotMessage114(context.Context, *TLMessagesEditInlineBotMessage114) (*Bool, error)
	// messages.toggleDialogPin#a731e257 flags:# pinned:flags.0?true peer:InputDialogPeer = Bool;
	MessagesToggleDialogPin114(context.Context, *TLMessagesToggleDialogPin114) (*Bool, error)
	// messages.reorderPinnedDialogs#3b1adf37 flags:# force:flags.0?true folder_id:int order:Vector<InputDialogPeer> = Bool;
	MessagesReorderPinnedDialogs114(context.Context, *TLMessagesReorderPinnedDialogs114) (*Bool, error)
	// messages.getPinnedDialogs#d6b94df2 folder_id:int = messages.PeerDialogs;
	MessagesGetPinnedDialogs114(context.Context, *TLMessagesGetPinnedDialogs114) (*Messages_PeerDialogs, error)
	// messages.getRecentLocations#bbc45b09 peer:InputPeer limit:int hash:int = messages.Messages;
	MessagesGetRecentLocations114(context.Context, *TLMessagesGetRecentLocations114) (*Messages_Messages, error)
	// messages.sendMultiMedia#cc0110cb flags:# silent:flags.5?true background:flags.6?true clear_draft:flags.7?true peer:InputPeer reply_to_msg_id:flags.0?int multi_media:Vector<InputSingleMedia> schedule_date:flags.10?int = Updates;
	MessagesSendMultiMedia114(context.Context, *TLMessagesSendMultiMedia114) (*Updates, error)
	// messages.searchStickerSets#c2b7d08b flags:# exclude_featured:flags.0?true q:string hash:int = messages.FoundStickerSets;
	MessagesSearchStickerSets(context.Context, *TLMessagesSearchStickerSets) (*Messages_FoundStickerSets, error)
	// messages.getSplitRanges#1cff7e08 = Vector<MessageRange>;
	MessagesGetSplitRanges(context.Context, *TLMessagesGetSplitRanges) (*Vector_MessageRange, error)
	// messages.markDialogUnread#c286d98f flags:# unread:flags.0?true peer:InputDialogPeer = Bool;
	MessagesMarkDialogUnread(context.Context, *TLMessagesMarkDialogUnread) (*Bool, error)
	// messages.getDialogUnreadMarks#22e24e22 = Vector<DialogPeer>;
	MessagesGetDialogUnreadMarks(context.Context, *TLMessagesGetDialogUnreadMarks) (*Vector_DialogPeer, error)
	// messages.clearAllDrafts#7e58ee9c = Bool;
	MessagesClearAllDrafts(context.Context, *TLMessagesClearAllDrafts) (*Bool, error)
	// messages.updatePinnedMessage#d2aaf7ec flags:# silent:flags.0?true unpin:flags.1?true pm_oneside:flags.2?true peer:InputPeer id:int = Updates;
	MessagesUpdatePinnedMessage(context.Context, *TLMessagesUpdatePinnedMessage) (*Updates, error)
	// messages.sendVote#10ea6184 peer:InputPeer msg_id:int options:Vector<bytes> = Updates;
	MessagesSendVote(context.Context, *TLMessagesSendVote) (*Updates, error)
	// messages.getPollResults#73bb643b peer:InputPeer msg_id:int = Updates;
	MessagesGetPollResults(context.Context, *TLMessagesGetPollResults) (*Updates, error)
	// messages.getOnlines#6e2be050 peer:InputPeer = ChatOnlines;
	MessagesGetOnlines(context.Context, *TLMessagesGetOnlines) (*ChatOnlines, error)
	// messages.getStatsURL#812c2ae6 flags:# dark:flags.0?true peer:InputPeer params:string = StatsURL;
	MessagesGetStatsURL(context.Context, *TLMessagesGetStatsURL) (*StatsURL, error)
	// messages.editChatAbout#def60797 peer:InputPeer about:string = Bool;
	MessagesEditChatAbout(context.Context, *TLMessagesEditChatAbout) (*Bool, error)
	// messages.editChatDefaultBannedRights#a5866b41 peer:InputPeer banned_rights:ChatBannedRights = Updates;
	MessagesEditChatDefaultBannedRights(context.Context, *TLMessagesEditChatDefaultBannedRights) (*Updates, error)
	// messages.getEmojiKeywords#35a0e062 lang_code:string = EmojiKeywordsDifference;
	MessagesGetEmojiKeywords(context.Context, *TLMessagesGetEmojiKeywords) (*EmojiKeywordsDifference, error)
	// messages.getEmojiKeywordsDifference#1508b6af lang_code:string from_version:int = EmojiKeywordsDifference;
	MessagesGetEmojiKeywordsDifference(context.Context, *TLMessagesGetEmojiKeywordsDifference) (*EmojiKeywordsDifference, error)
	// messages.getEmojiKeywordsLanguages#4e9963b2 lang_codes:Vector<string> = Vector<EmojiLanguage>;
	MessagesGetEmojiKeywordsLanguages(context.Context, *TLMessagesGetEmojiKeywordsLanguages) (*Vector_EmojiLanguage, error)
	// messages.getEmojiURL#d5b10c26 lang_code:string = EmojiURL;
	MessagesGetEmojiURL(context.Context, *TLMessagesGetEmojiURL) (*EmojiURL, error)
	// messages.getSearchCounters#732eef00 peer:InputPeer filters:Vector<MessagesFilter> = Vector<messages.SearchCounter>;
	MessagesGetSearchCounters(context.Context, *TLMessagesGetSearchCounters) (*Vector_Messages_SearchCounter, error)
	// messages.requestUrlAuth#e33f5613 peer:InputPeer msg_id:int button_id:int = UrlAuthResult;
	MessagesRequestUrlAuth(context.Context, *TLMessagesRequestUrlAuth) (*UrlAuthResult, error)
	// messages.acceptUrlAuth#f729ea98 flags:# write_allowed:flags.0?true peer:InputPeer msg_id:int button_id:int = UrlAuthResult;
	MessagesAcceptUrlAuth(context.Context, *TLMessagesAcceptUrlAuth) (*UrlAuthResult, error)
	// messages.hidePeerSettingsBar#4facb138 peer:InputPeer = Bool;
	MessagesHidePeerSettingsBar(context.Context, *TLMessagesHidePeerSettingsBar) (*Bool, error)
	// messages.getScheduledHistory#e2c2685b peer:InputPeer hash:int = messages.Messages;
	MessagesGetScheduledHistory(context.Context, *TLMessagesGetScheduledHistory) (*Messages_Messages, error)
	// messages.getScheduledMessages#bdbb0464 peer:InputPeer id:Vector<int> = messages.Messages;
	MessagesGetScheduledMessages(context.Context, *TLMessagesGetScheduledMessages) (*Messages_Messages, error)
	// messages.sendScheduledMessages#bd38850a peer:InputPeer id:Vector<int> = Updates;
	MessagesSendScheduledMessages(context.Context, *TLMessagesSendScheduledMessages) (*Updates, error)
	// messages.deleteScheduledMessages#59ae2b16 peer:InputPeer id:Vector<int> = Updates;
	MessagesDeleteScheduledMessages(context.Context, *TLMessagesDeleteScheduledMessages) (*Updates, error)
	// messages.getPollVotes#b86e380e flags:# peer:InputPeer id:int option:flags.0?bytes offset:flags.1?string limit:int = messages.VotesList;
	MessagesGetPollVotes(context.Context, *TLMessagesGetPollVotes) (*Messages_VotesList, error)
	// messages.toggleStickerSets#b5052fea flags:# uninstall:flags.0?true archive:flags.1?true unarchive:flags.2?true stickersets:Vector<InputStickerSet> = Bool;
	MessagesToggleStickerSets(context.Context, *TLMessagesToggleStickerSets) (*Bool, error)
	// messages.getDialogFilters#f19ed96d = Vector<DialogFilter>;
	MessagesGetDialogFilters(context.Context, *TLMessagesGetDialogFilters) (*Vector_DialogFilter, error)
	// messages.getSuggestedDialogFilters#a29cd42c = Vector<DialogFilterSuggested>;
	MessagesGetSuggestedDialogFilters(context.Context, *TLMessagesGetSuggestedDialogFilters) (*Vector_DialogFilterSuggested, error)
	// messages.updateDialogFilter#1ad4a04a flags:# id:int filter:flags.0?DialogFilter = Bool;
	MessagesUpdateDialogFilter(context.Context, *TLMessagesUpdateDialogFilter) (*Bool, error)
	// messages.updateDialogFiltersOrder#c563c1e4 order:Vector<int> = Bool;
	MessagesUpdateDialogFiltersOrder(context.Context, *TLMessagesUpdateDialogFiltersOrder) (*Bool, error)
	// messages.getOldFeaturedStickers#5fe7025b offset:int limit:int hash:int = messages.FeaturedStickers;
	MessagesGetOldFeaturedStickers(context.Context, *TLMessagesGetOldFeaturedStickers) (*Messages_FeaturedStickers, error)
	// messages.sendEncrypted#44fa7a15 flags:# silent:flags.0?true peer:InputEncryptedChat random_id:long data:bytes = messages.SentEncryptedMessage;
	MessagesSendEncrypted118(context.Context, *TLMessagesSendEncrypted118) (*Messages_SentEncryptedMessage, error)
	// messages.getBotCallbackAnswer#9342ca07 flags:# game:flags.1?true peer:InputPeer msg_id:int data:flags.0?bytes password:flags.2?InputCheckPasswordSRP = messages.BotCallbackAnswer;
	MessagesGetBotCallbackAnswer118(context.Context, *TLMessagesGetBotCallbackAnswer118) (*Messages_BotCallbackAnswer, error)
	// messages.sendEncryptedFile#5559481d flags:# silent:flags.0?true peer:InputEncryptedChat random_id:long data:bytes file:InputEncryptedFile = messages.SentEncryptedMessage;
	MessagesSendEncryptedFile118(context.Context, *TLMessagesSendEncryptedFile118) (*Messages_SentEncryptedMessage, error)
}

// UnimplementedRPCMessagesServer can be embedded to have forward compatible implementations.
type UnimplementedRPCMessagesServer struct {
}

func (*UnimplementedRPCMessagesServer) MessagesGetMessages(ctx context.Context, req *TLMessagesGetMessages) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetMessages not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetDialogs(ctx context.Context, req *TLMessagesGetDialogs) (*Messages_Dialogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetDialogs not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetHistory(ctx context.Context, req *TLMessagesGetHistory) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetHistory not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSearch(ctx context.Context, req *TLMessagesSearch) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSearch not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesReadHistory(ctx context.Context, req *TLMessagesReadHistory) (*Messages_AffectedMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReadHistory not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesDeleteHistory(ctx context.Context, req *TLMessagesDeleteHistory) (*Messages_AffectedHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesDeleteHistory not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesDeleteMessages(ctx context.Context, req *TLMessagesDeleteMessages) (*Messages_AffectedMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesDeleteMessages not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesReceivedMessages(ctx context.Context, req *TLMessagesReceivedMessages) (*Vector_ReceivedNotifyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReceivedMessages not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSetTyping(ctx context.Context, req *TLMessagesSetTyping) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetTyping not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSendMessage(ctx context.Context, req *TLMessagesSendMessage) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendMessage not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSendMedia(ctx context.Context, req *TLMessagesSendMedia) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendMedia not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesForwardMessages(ctx context.Context, req *TLMessagesForwardMessages) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesForwardMessages not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesReportSpam(ctx context.Context, req *TLMessagesReportSpam) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReportSpam not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesHideReportSpam(ctx context.Context, req *TLMessagesHideReportSpam) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesHideReportSpam not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetPeerSettings(ctx context.Context, req *TLMessagesGetPeerSettings) (*PeerSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetPeerSettings not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetChats(ctx context.Context, req *TLMessagesGetChats) (*Messages_Chats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetChats not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetFullChat(ctx context.Context, req *TLMessagesGetFullChat) (*Messages_ChatFull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetFullChat not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesEditChatTitle(ctx context.Context, req *TLMessagesEditChatTitle) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesEditChatTitle not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesEditChatPhoto(ctx context.Context, req *TLMessagesEditChatPhoto) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesEditChatPhoto not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesAddChatUser(ctx context.Context, req *TLMessagesAddChatUser) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesAddChatUser not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesDeleteChatUser(ctx context.Context, req *TLMessagesDeleteChatUser) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesDeleteChatUser not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesCreateChat(ctx context.Context, req *TLMessagesCreateChat) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesCreateChat not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesForwardMessage(ctx context.Context, req *TLMessagesForwardMessage) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesForwardMessage not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetDhConfig(ctx context.Context, req *TLMessagesGetDhConfig) (*Messages_DhConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetDhConfig not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesRequestEncryption(ctx context.Context, req *TLMessagesRequestEncryption) (*EncryptedChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesRequestEncryption not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesAcceptEncryption(ctx context.Context, req *TLMessagesAcceptEncryption) (*EncryptedChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesAcceptEncryption not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesDiscardEncryption(ctx context.Context, req *TLMessagesDiscardEncryption) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesDiscardEncryption not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSetEncryptedTyping(ctx context.Context, req *TLMessagesSetEncryptedTyping) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetEncryptedTyping not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesReadEncryptedHistory(ctx context.Context, req *TLMessagesReadEncryptedHistory) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReadEncryptedHistory not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSendEncrypted(ctx context.Context, req *TLMessagesSendEncrypted) (*Messages_SentEncryptedMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendEncrypted not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSendEncryptedFile(ctx context.Context, req *TLMessagesSendEncryptedFile) (*Messages_SentEncryptedMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendEncryptedFile not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSendEncryptedService(ctx context.Context, req *TLMessagesSendEncryptedService) (*Messages_SentEncryptedMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendEncryptedService not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesReceivedQueue(ctx context.Context, req *TLMessagesReceivedQueue) (*VectorLong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReceivedQueue not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesReportEncryptedSpam(ctx context.Context, req *TLMessagesReportEncryptedSpam) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReportEncryptedSpam not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesReadMessageContents(ctx context.Context, req *TLMessagesReadMessageContents) (*Messages_AffectedMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReadMessageContents not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetAllStickers(ctx context.Context, req *TLMessagesGetAllStickers) (*Messages_AllStickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetAllStickers not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetWebPagePreview(ctx context.Context, req *TLMessagesGetWebPagePreview) (*MessageMedia, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetWebPagePreview not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesExportChatInvite(ctx context.Context, req *TLMessagesExportChatInvite) (*ExportedChatInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesExportChatInvite not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesCheckChatInvite(ctx context.Context, req *TLMessagesCheckChatInvite) (*ChatInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesCheckChatInvite not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesImportChatInvite(ctx context.Context, req *TLMessagesImportChatInvite) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesImportChatInvite not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetStickerSet(ctx context.Context, req *TLMessagesGetStickerSet) (*Messages_StickerSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetStickerSet not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesInstallStickerSet(ctx context.Context, req *TLMessagesInstallStickerSet) (*Messages_StickerSetInstallResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesInstallStickerSet not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesUninstallStickerSet(ctx context.Context, req *TLMessagesUninstallStickerSet) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesUninstallStickerSet not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesStartBot(ctx context.Context, req *TLMessagesStartBot) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesStartBot not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetMessagesViews(ctx context.Context, req *TLMessagesGetMessagesViews) (*VectorInt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetMessagesViews not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesToggleChatAdmins(ctx context.Context, req *TLMessagesToggleChatAdmins) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesToggleChatAdmins not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesEditChatAdmin(ctx context.Context, req *TLMessagesEditChatAdmin) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesEditChatAdmin not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesMigrateChat(ctx context.Context, req *TLMessagesMigrateChat) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesMigrateChat not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSearchGlobal(ctx context.Context, req *TLMessagesSearchGlobal) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSearchGlobal not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesReorderStickerSets(ctx context.Context, req *TLMessagesReorderStickerSets) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReorderStickerSets not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetDocumentByHash(ctx context.Context, req *TLMessagesGetDocumentByHash) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetDocumentByHash not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSearchGifs(ctx context.Context, req *TLMessagesSearchGifs) (*Messages_FoundGifs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSearchGifs not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetSavedGifs(ctx context.Context, req *TLMessagesGetSavedGifs) (*Messages_SavedGifs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetSavedGifs not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSaveGif(ctx context.Context, req *TLMessagesSaveGif) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSaveGif not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetInlineBotResults(ctx context.Context, req *TLMessagesGetInlineBotResults) (*Messages_BotResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetInlineBotResults not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSetInlineBotResults(ctx context.Context, req *TLMessagesSetInlineBotResults) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetInlineBotResults not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSendInlineBotResult(ctx context.Context, req *TLMessagesSendInlineBotResult) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendInlineBotResult not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetMessageEditData(ctx context.Context, req *TLMessagesGetMessageEditData) (*Messages_MessageEditData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetMessageEditData not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesEditMessage(ctx context.Context, req *TLMessagesEditMessage) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesEditMessage not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesEditInlineBotMessage(ctx context.Context, req *TLMessagesEditInlineBotMessage) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesEditInlineBotMessage not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetBotCallbackAnswer(ctx context.Context, req *TLMessagesGetBotCallbackAnswer) (*Messages_BotCallbackAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetBotCallbackAnswer not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSetBotCallbackAnswer(ctx context.Context, req *TLMessagesSetBotCallbackAnswer) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetBotCallbackAnswer not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetPeerDialogs(ctx context.Context, req *TLMessagesGetPeerDialogs) (*Messages_PeerDialogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetPeerDialogs not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSaveDraft(ctx context.Context, req *TLMessagesSaveDraft) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSaveDraft not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetAllDrafts(ctx context.Context, req *TLMessagesGetAllDrafts) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetAllDrafts not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetFeaturedStickers(ctx context.Context, req *TLMessagesGetFeaturedStickers) (*Messages_FeaturedStickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetFeaturedStickers not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesReadFeaturedStickers(ctx context.Context, req *TLMessagesReadFeaturedStickers) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReadFeaturedStickers not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetRecentStickers(ctx context.Context, req *TLMessagesGetRecentStickers) (*Messages_RecentStickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetRecentStickers not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSaveRecentSticker(ctx context.Context, req *TLMessagesSaveRecentSticker) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSaveRecentSticker not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesClearRecentStickers(ctx context.Context, req *TLMessagesClearRecentStickers) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesClearRecentStickers not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetArchivedStickers(ctx context.Context, req *TLMessagesGetArchivedStickers) (*Messages_ArchivedStickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetArchivedStickers not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetMaskStickers(ctx context.Context, req *TLMessagesGetMaskStickers) (*Messages_AllStickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetMaskStickers not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetAttachedStickers(ctx context.Context, req *TLMessagesGetAttachedStickers) (*Vector_StickerSetCovered, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetAttachedStickers not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSetGameScore(ctx context.Context, req *TLMessagesSetGameScore) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetGameScore not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSetInlineGameScore(ctx context.Context, req *TLMessagesSetInlineGameScore) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetInlineGameScore not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetGameHighScores(ctx context.Context, req *TLMessagesGetGameHighScores) (*Messages_HighScores, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetGameHighScores not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetInlineGameHighScores(ctx context.Context, req *TLMessagesGetInlineGameHighScores) (*Messages_HighScores, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetInlineGameHighScores not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetCommonChats(ctx context.Context, req *TLMessagesGetCommonChats) (*Messages_Chats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetCommonChats not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetAllChats(ctx context.Context, req *TLMessagesGetAllChats) (*Messages_Chats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetAllChats not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetWebPage(ctx context.Context, req *TLMessagesGetWebPage) (*WebPage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetWebPage not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesToggleDialogPin(ctx context.Context, req *TLMessagesToggleDialogPin) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesToggleDialogPin not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesReorderPinnedDialogs(ctx context.Context, req *TLMessagesReorderPinnedDialogs) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReorderPinnedDialogs not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetPinnedDialogs(ctx context.Context, req *TLMessagesGetPinnedDialogs) (*Messages_PeerDialogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetPinnedDialogs not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSetBotShippingResults(ctx context.Context, req *TLMessagesSetBotShippingResults) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetBotShippingResults not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSetBotPrecheckoutResults(ctx context.Context, req *TLMessagesSetBotPrecheckoutResults) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSetBotPrecheckoutResults not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesUploadMedia(ctx context.Context, req *TLMessagesUploadMedia) (*MessageMedia, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesUploadMedia not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSendScreenshotNotification(ctx context.Context, req *TLMessagesSendScreenshotNotification) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendScreenshotNotification not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetFavedStickers(ctx context.Context, req *TLMessagesGetFavedStickers) (*Messages_FavedStickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetFavedStickers not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesFaveSticker(ctx context.Context, req *TLMessagesFaveSticker) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesFaveSticker not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetUnreadMentions(ctx context.Context, req *TLMessagesGetUnreadMentions) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetUnreadMentions not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesReadHistory73(ctx context.Context, req *TLMessagesReadHistory73) (*Messages_AffectedMessages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReadHistory73 not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesEditMessage73(ctx context.Context, req *TLMessagesEditMessage73) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesEditMessage73 not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSearch73(ctx context.Context, req *TLMessagesSearch73) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSearch73 not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesReadMentions(ctx context.Context, req *TLMessagesReadMentions) (*Messages_AffectedHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReadMentions not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetRecentLocations(ctx context.Context, req *TLMessagesGetRecentLocations) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetRecentLocations not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSendMultiMedia(ctx context.Context, req *TLMessagesSendMultiMedia) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendMultiMedia not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesUploadEncryptedFile(ctx context.Context, req *TLMessagesUploadEncryptedFile) (*EncryptedFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesUploadEncryptedFile not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSaveRecentSticker73(ctx context.Context, req *TLMessagesSaveRecentSticker73) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSaveRecentSticker73 not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetPeerDialogs82(ctx context.Context, req *TLMessagesGetPeerDialogs82) (*Messages_PeerDialogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetPeerDialogs82 not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetMessages82(ctx context.Context, req *TLMessagesGetMessages82) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetMessages82 not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetDialogs82(ctx context.Context, req *TLMessagesGetDialogs82) (*Messages_Dialogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetDialogs82 not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetHistory82(ctx context.Context, req *TLMessagesGetHistory82) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetHistory82 not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSearch82(ctx context.Context, req *TLMessagesSearch82) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSearch82 not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSendMedia82(ctx context.Context, req *TLMessagesSendMedia82) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendMedia82 not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetDialogs114(ctx context.Context, req *TLMessagesGetDialogs114) (*Messages_Dialogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetDialogs114 not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSendMessage114(ctx context.Context, req *TLMessagesSendMessage114) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendMessage114 not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSendMedia114(ctx context.Context, req *TLMessagesSendMedia114) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendMedia114 not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesForwardMessages114(ctx context.Context, req *TLMessagesForwardMessages114) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesForwardMessages114 not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesReport(ctx context.Context, req *TLMessagesReport) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReport not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetStickers(ctx context.Context, req *TLMessagesGetStickers) (*Messages_Stickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetStickers not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetWebPagePreview114(ctx context.Context, req *TLMessagesGetWebPagePreview114) (*MessageMedia, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetWebPagePreview114 not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesExportChatInvite114(ctx context.Context, req *TLMessagesExportChatInvite114) (*ExportedChatInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesExportChatInvite114 not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSearchGlobal114(ctx context.Context, req *TLMessagesSearchGlobal114) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSearchGlobal114 not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSendInlineBotResult114(ctx context.Context, req *TLMessagesSendInlineBotResult114) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendInlineBotResult114 not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesEditMessage114(ctx context.Context, req *TLMessagesEditMessage114) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesEditMessage114 not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesEditInlineBotMessage114(ctx context.Context, req *TLMessagesEditInlineBotMessage114) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesEditInlineBotMessage114 not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesToggleDialogPin114(ctx context.Context, req *TLMessagesToggleDialogPin114) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesToggleDialogPin114 not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesReorderPinnedDialogs114(ctx context.Context, req *TLMessagesReorderPinnedDialogs114) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesReorderPinnedDialogs114 not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetPinnedDialogs114(ctx context.Context, req *TLMessagesGetPinnedDialogs114) (*Messages_PeerDialogs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetPinnedDialogs114 not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetRecentLocations114(ctx context.Context, req *TLMessagesGetRecentLocations114) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetRecentLocations114 not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSendMultiMedia114(ctx context.Context, req *TLMessagesSendMultiMedia114) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendMultiMedia114 not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSearchStickerSets(ctx context.Context, req *TLMessagesSearchStickerSets) (*Messages_FoundStickerSets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSearchStickerSets not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetSplitRanges(ctx context.Context, req *TLMessagesGetSplitRanges) (*Vector_MessageRange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetSplitRanges not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesMarkDialogUnread(ctx context.Context, req *TLMessagesMarkDialogUnread) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesMarkDialogUnread not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetDialogUnreadMarks(ctx context.Context, req *TLMessagesGetDialogUnreadMarks) (*Vector_DialogPeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetDialogUnreadMarks not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesClearAllDrafts(ctx context.Context, req *TLMessagesClearAllDrafts) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesClearAllDrafts not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesUpdatePinnedMessage(ctx context.Context, req *TLMessagesUpdatePinnedMessage) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesUpdatePinnedMessage not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSendVote(ctx context.Context, req *TLMessagesSendVote) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendVote not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetPollResults(ctx context.Context, req *TLMessagesGetPollResults) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetPollResults not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetOnlines(ctx context.Context, req *TLMessagesGetOnlines) (*ChatOnlines, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetOnlines not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetStatsURL(ctx context.Context, req *TLMessagesGetStatsURL) (*StatsURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetStatsURL not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesEditChatAbout(ctx context.Context, req *TLMessagesEditChatAbout) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesEditChatAbout not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesEditChatDefaultBannedRights(ctx context.Context, req *TLMessagesEditChatDefaultBannedRights) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesEditChatDefaultBannedRights not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetEmojiKeywords(ctx context.Context, req *TLMessagesGetEmojiKeywords) (*EmojiKeywordsDifference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetEmojiKeywords not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetEmojiKeywordsDifference(ctx context.Context, req *TLMessagesGetEmojiKeywordsDifference) (*EmojiKeywordsDifference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetEmojiKeywordsDifference not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetEmojiKeywordsLanguages(ctx context.Context, req *TLMessagesGetEmojiKeywordsLanguages) (*Vector_EmojiLanguage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetEmojiKeywordsLanguages not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetEmojiURL(ctx context.Context, req *TLMessagesGetEmojiURL) (*EmojiURL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetEmojiURL not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetSearchCounters(ctx context.Context, req *TLMessagesGetSearchCounters) (*Vector_Messages_SearchCounter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetSearchCounters not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesRequestUrlAuth(ctx context.Context, req *TLMessagesRequestUrlAuth) (*UrlAuthResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesRequestUrlAuth not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesAcceptUrlAuth(ctx context.Context, req *TLMessagesAcceptUrlAuth) (*UrlAuthResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesAcceptUrlAuth not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesHidePeerSettingsBar(ctx context.Context, req *TLMessagesHidePeerSettingsBar) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesHidePeerSettingsBar not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetScheduledHistory(ctx context.Context, req *TLMessagesGetScheduledHistory) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetScheduledHistory not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetScheduledMessages(ctx context.Context, req *TLMessagesGetScheduledMessages) (*Messages_Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetScheduledMessages not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSendScheduledMessages(ctx context.Context, req *TLMessagesSendScheduledMessages) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendScheduledMessages not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesDeleteScheduledMessages(ctx context.Context, req *TLMessagesDeleteScheduledMessages) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesDeleteScheduledMessages not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetPollVotes(ctx context.Context, req *TLMessagesGetPollVotes) (*Messages_VotesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetPollVotes not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesToggleStickerSets(ctx context.Context, req *TLMessagesToggleStickerSets) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesToggleStickerSets not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetDialogFilters(ctx context.Context, req *TLMessagesGetDialogFilters) (*Vector_DialogFilter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetDialogFilters not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetSuggestedDialogFilters(ctx context.Context, req *TLMessagesGetSuggestedDialogFilters) (*Vector_DialogFilterSuggested, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetSuggestedDialogFilters not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesUpdateDialogFilter(ctx context.Context, req *TLMessagesUpdateDialogFilter) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesUpdateDialogFilter not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesUpdateDialogFiltersOrder(ctx context.Context, req *TLMessagesUpdateDialogFiltersOrder) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesUpdateDialogFiltersOrder not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetOldFeaturedStickers(ctx context.Context, req *TLMessagesGetOldFeaturedStickers) (*Messages_FeaturedStickers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetOldFeaturedStickers not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSendEncrypted118(ctx context.Context, req *TLMessagesSendEncrypted118) (*Messages_SentEncryptedMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendEncrypted118 not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesGetBotCallbackAnswer118(ctx context.Context, req *TLMessagesGetBotCallbackAnswer118) (*Messages_BotCallbackAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesGetBotCallbackAnswer118 not implemented")
}
func (*UnimplementedRPCMessagesServer) MessagesSendEncryptedFile118(ctx context.Context, req *TLMessagesSendEncryptedFile118) (*Messages_SentEncryptedMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessagesSendEncryptedFile118 not implemented")
}

func RegisterRPCMessagesServer(s *grpc.Server, srv RPCMessagesServer) {
	s.RegisterService(&_RPCMessages_serviceDesc, srv)
}

func _RPCMessages_MessagesGetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetMessages(ctx, req.(*TLMessagesGetMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetDialogs(ctx, req.(*TLMessagesGetDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetHistory(ctx, req.(*TLMessagesGetHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSearch(ctx, req.(*TLMessagesSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesReadHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReadHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesReadHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesReadHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesReadHistory(ctx, req.(*TLMessagesReadHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesDeleteHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesDeleteHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesDeleteHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesDeleteHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesDeleteHistory(ctx, req.(*TLMessagesDeleteHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesDeleteMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesDeleteMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesDeleteMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesDeleteMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesDeleteMessages(ctx, req.(*TLMessagesDeleteMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesReceivedMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReceivedMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesReceivedMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesReceivedMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesReceivedMessages(ctx, req.(*TLMessagesReceivedMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSetTyping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetTyping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSetTyping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSetTyping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSetTyping(ctx, req.(*TLMessagesSetTyping))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSendMessage(ctx, req.(*TLMessagesSendMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSendMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSendMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSendMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSendMedia(ctx, req.(*TLMessagesSendMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesForwardMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesForwardMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesForwardMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesForwardMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesForwardMessages(ctx, req.(*TLMessagesForwardMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesReportSpam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReportSpam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesReportSpam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesReportSpam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesReportSpam(ctx, req.(*TLMessagesReportSpam))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesHideReportSpam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesHideReportSpam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesHideReportSpam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesHideReportSpam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesHideReportSpam(ctx, req.(*TLMessagesHideReportSpam))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetPeerSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetPeerSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetPeerSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetPeerSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetPeerSettings(ctx, req.(*TLMessagesGetPeerSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetChats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetChats(ctx, req.(*TLMessagesGetChats))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetFullChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetFullChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetFullChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetFullChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetFullChat(ctx, req.(*TLMessagesGetFullChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesEditChatTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditChatTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesEditChatTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesEditChatTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesEditChatTitle(ctx, req.(*TLMessagesEditChatTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesEditChatPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditChatPhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesEditChatPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesEditChatPhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesEditChatPhoto(ctx, req.(*TLMessagesEditChatPhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesAddChatUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesAddChatUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesAddChatUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesAddChatUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesAddChatUser(ctx, req.(*TLMessagesAddChatUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesDeleteChatUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesDeleteChatUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesDeleteChatUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesDeleteChatUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesDeleteChatUser(ctx, req.(*TLMessagesDeleteChatUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesCreateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesCreateChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesCreateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesCreateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesCreateChat(ctx, req.(*TLMessagesCreateChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesForwardMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesForwardMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesForwardMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesForwardMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesForwardMessage(ctx, req.(*TLMessagesForwardMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetDhConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetDhConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetDhConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetDhConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetDhConfig(ctx, req.(*TLMessagesGetDhConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesRequestEncryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesRequestEncryption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesRequestEncryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesRequestEncryption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesRequestEncryption(ctx, req.(*TLMessagesRequestEncryption))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesAcceptEncryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesAcceptEncryption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesAcceptEncryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesAcceptEncryption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesAcceptEncryption(ctx, req.(*TLMessagesAcceptEncryption))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesDiscardEncryption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesDiscardEncryption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesDiscardEncryption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesDiscardEncryption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesDiscardEncryption(ctx, req.(*TLMessagesDiscardEncryption))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSetEncryptedTyping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetEncryptedTyping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSetEncryptedTyping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSetEncryptedTyping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSetEncryptedTyping(ctx, req.(*TLMessagesSetEncryptedTyping))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesReadEncryptedHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReadEncryptedHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesReadEncryptedHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesReadEncryptedHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesReadEncryptedHistory(ctx, req.(*TLMessagesReadEncryptedHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSendEncrypted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendEncrypted)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSendEncrypted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSendEncrypted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSendEncrypted(ctx, req.(*TLMessagesSendEncrypted))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSendEncryptedFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendEncryptedFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSendEncryptedFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSendEncryptedFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSendEncryptedFile(ctx, req.(*TLMessagesSendEncryptedFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSendEncryptedService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendEncryptedService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSendEncryptedService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSendEncryptedService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSendEncryptedService(ctx, req.(*TLMessagesSendEncryptedService))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesReceivedQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReceivedQueue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesReceivedQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesReceivedQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesReceivedQueue(ctx, req.(*TLMessagesReceivedQueue))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesReportEncryptedSpam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReportEncryptedSpam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesReportEncryptedSpam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesReportEncryptedSpam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesReportEncryptedSpam(ctx, req.(*TLMessagesReportEncryptedSpam))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesReadMessageContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReadMessageContents)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesReadMessageContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesReadMessageContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesReadMessageContents(ctx, req.(*TLMessagesReadMessageContents))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetAllStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetAllStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetAllStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetAllStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetAllStickers(ctx, req.(*TLMessagesGetAllStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetWebPagePreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetWebPagePreview)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetWebPagePreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetWebPagePreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetWebPagePreview(ctx, req.(*TLMessagesGetWebPagePreview))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesExportChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesExportChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesExportChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesExportChatInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesExportChatInvite(ctx, req.(*TLMessagesExportChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesCheckChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesCheckChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesCheckChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesCheckChatInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesCheckChatInvite(ctx, req.(*TLMessagesCheckChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesImportChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesImportChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesImportChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesImportChatInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesImportChatInvite(ctx, req.(*TLMessagesImportChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetStickerSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetStickerSet(ctx, req.(*TLMessagesGetStickerSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesInstallStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesInstallStickerSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesInstallStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesInstallStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesInstallStickerSet(ctx, req.(*TLMessagesInstallStickerSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesUninstallStickerSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesUninstallStickerSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesUninstallStickerSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesUninstallStickerSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesUninstallStickerSet(ctx, req.(*TLMessagesUninstallStickerSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesStartBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesStartBot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesStartBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesStartBot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesStartBot(ctx, req.(*TLMessagesStartBot))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetMessagesViews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetMessagesViews)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetMessagesViews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetMessagesViews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetMessagesViews(ctx, req.(*TLMessagesGetMessagesViews))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesToggleChatAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesToggleChatAdmins)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesToggleChatAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesToggleChatAdmins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesToggleChatAdmins(ctx, req.(*TLMessagesToggleChatAdmins))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesEditChatAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditChatAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesEditChatAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesEditChatAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesEditChatAdmin(ctx, req.(*TLMessagesEditChatAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesMigrateChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesMigrateChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesMigrateChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesMigrateChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesMigrateChat(ctx, req.(*TLMessagesMigrateChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSearchGlobal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSearchGlobal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSearchGlobal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSearchGlobal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSearchGlobal(ctx, req.(*TLMessagesSearchGlobal))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesReorderStickerSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReorderStickerSets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesReorderStickerSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesReorderStickerSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesReorderStickerSets(ctx, req.(*TLMessagesReorderStickerSets))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetDocumentByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetDocumentByHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetDocumentByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetDocumentByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetDocumentByHash(ctx, req.(*TLMessagesGetDocumentByHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSearchGifs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSearchGifs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSearchGifs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSearchGifs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSearchGifs(ctx, req.(*TLMessagesSearchGifs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetSavedGifs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetSavedGifs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetSavedGifs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetSavedGifs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetSavedGifs(ctx, req.(*TLMessagesGetSavedGifs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSaveGif_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSaveGif)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSaveGif(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSaveGif",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSaveGif(ctx, req.(*TLMessagesSaveGif))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetInlineBotResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetInlineBotResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetInlineBotResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetInlineBotResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetInlineBotResults(ctx, req.(*TLMessagesGetInlineBotResults))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSetInlineBotResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetInlineBotResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSetInlineBotResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSetInlineBotResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSetInlineBotResults(ctx, req.(*TLMessagesSetInlineBotResults))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSendInlineBotResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendInlineBotResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSendInlineBotResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSendInlineBotResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSendInlineBotResult(ctx, req.(*TLMessagesSendInlineBotResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetMessageEditData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetMessageEditData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetMessageEditData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetMessageEditData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetMessageEditData(ctx, req.(*TLMessagesGetMessageEditData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesEditMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesEditMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesEditMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesEditMessage(ctx, req.(*TLMessagesEditMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesEditInlineBotMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditInlineBotMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesEditInlineBotMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesEditInlineBotMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesEditInlineBotMessage(ctx, req.(*TLMessagesEditInlineBotMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetBotCallbackAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetBotCallbackAnswer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetBotCallbackAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetBotCallbackAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetBotCallbackAnswer(ctx, req.(*TLMessagesGetBotCallbackAnswer))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSetBotCallbackAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetBotCallbackAnswer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSetBotCallbackAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSetBotCallbackAnswer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSetBotCallbackAnswer(ctx, req.(*TLMessagesSetBotCallbackAnswer))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetPeerDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetPeerDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetPeerDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetPeerDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetPeerDialogs(ctx, req.(*TLMessagesGetPeerDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSaveDraft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSaveDraft)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSaveDraft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSaveDraft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSaveDraft(ctx, req.(*TLMessagesSaveDraft))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetAllDrafts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetAllDrafts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetAllDrafts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetAllDrafts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetAllDrafts(ctx, req.(*TLMessagesGetAllDrafts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetFeaturedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetFeaturedStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetFeaturedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetFeaturedStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetFeaturedStickers(ctx, req.(*TLMessagesGetFeaturedStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesReadFeaturedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReadFeaturedStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesReadFeaturedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesReadFeaturedStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesReadFeaturedStickers(ctx, req.(*TLMessagesReadFeaturedStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetRecentStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetRecentStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetRecentStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetRecentStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetRecentStickers(ctx, req.(*TLMessagesGetRecentStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSaveRecentSticker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSaveRecentSticker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSaveRecentSticker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSaveRecentSticker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSaveRecentSticker(ctx, req.(*TLMessagesSaveRecentSticker))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesClearRecentStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesClearRecentStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesClearRecentStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesClearRecentStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesClearRecentStickers(ctx, req.(*TLMessagesClearRecentStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetArchivedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetArchivedStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetArchivedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetArchivedStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetArchivedStickers(ctx, req.(*TLMessagesGetArchivedStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetMaskStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetMaskStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetMaskStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetMaskStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetMaskStickers(ctx, req.(*TLMessagesGetMaskStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetAttachedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetAttachedStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetAttachedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetAttachedStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetAttachedStickers(ctx, req.(*TLMessagesGetAttachedStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSetGameScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetGameScore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSetGameScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSetGameScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSetGameScore(ctx, req.(*TLMessagesSetGameScore))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSetInlineGameScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetInlineGameScore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSetInlineGameScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSetInlineGameScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSetInlineGameScore(ctx, req.(*TLMessagesSetInlineGameScore))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetGameHighScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetGameHighScores)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetGameHighScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetGameHighScores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetGameHighScores(ctx, req.(*TLMessagesGetGameHighScores))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetInlineGameHighScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetInlineGameHighScores)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetInlineGameHighScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetInlineGameHighScores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetInlineGameHighScores(ctx, req.(*TLMessagesGetInlineGameHighScores))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetCommonChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetCommonChats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetCommonChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetCommonChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetCommonChats(ctx, req.(*TLMessagesGetCommonChats))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetAllChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetAllChats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetAllChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetAllChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetAllChats(ctx, req.(*TLMessagesGetAllChats))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetWebPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetWebPage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetWebPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetWebPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetWebPage(ctx, req.(*TLMessagesGetWebPage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesToggleDialogPin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesToggleDialogPin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesToggleDialogPin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesToggleDialogPin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesToggleDialogPin(ctx, req.(*TLMessagesToggleDialogPin))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesReorderPinnedDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReorderPinnedDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesReorderPinnedDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesReorderPinnedDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesReorderPinnedDialogs(ctx, req.(*TLMessagesReorderPinnedDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetPinnedDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetPinnedDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetPinnedDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetPinnedDialogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetPinnedDialogs(ctx, req.(*TLMessagesGetPinnedDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSetBotShippingResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetBotShippingResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSetBotShippingResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSetBotShippingResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSetBotShippingResults(ctx, req.(*TLMessagesSetBotShippingResults))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSetBotPrecheckoutResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSetBotPrecheckoutResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSetBotPrecheckoutResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSetBotPrecheckoutResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSetBotPrecheckoutResults(ctx, req.(*TLMessagesSetBotPrecheckoutResults))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesUploadMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesUploadMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesUploadMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesUploadMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesUploadMedia(ctx, req.(*TLMessagesUploadMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSendScreenshotNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendScreenshotNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSendScreenshotNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSendScreenshotNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSendScreenshotNotification(ctx, req.(*TLMessagesSendScreenshotNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetFavedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetFavedStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetFavedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetFavedStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetFavedStickers(ctx, req.(*TLMessagesGetFavedStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesFaveSticker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesFaveSticker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesFaveSticker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesFaveSticker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesFaveSticker(ctx, req.(*TLMessagesFaveSticker))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetUnreadMentions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetUnreadMentions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetUnreadMentions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetUnreadMentions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetUnreadMentions(ctx, req.(*TLMessagesGetUnreadMentions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesReadHistory73_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReadHistory73)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesReadHistory73(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesReadHistory73",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesReadHistory73(ctx, req.(*TLMessagesReadHistory73))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesEditMessage73_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditMessage73)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesEditMessage73(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesEditMessage73",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesEditMessage73(ctx, req.(*TLMessagesEditMessage73))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSearch73_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSearch73)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSearch73(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSearch73",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSearch73(ctx, req.(*TLMessagesSearch73))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesReadMentions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReadMentions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesReadMentions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesReadMentions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesReadMentions(ctx, req.(*TLMessagesReadMentions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetRecentLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetRecentLocations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetRecentLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetRecentLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetRecentLocations(ctx, req.(*TLMessagesGetRecentLocations))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSendMultiMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendMultiMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSendMultiMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSendMultiMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSendMultiMedia(ctx, req.(*TLMessagesSendMultiMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesUploadEncryptedFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesUploadEncryptedFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesUploadEncryptedFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesUploadEncryptedFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesUploadEncryptedFile(ctx, req.(*TLMessagesUploadEncryptedFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSaveRecentSticker73_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSaveRecentSticker73)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSaveRecentSticker73(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSaveRecentSticker73",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSaveRecentSticker73(ctx, req.(*TLMessagesSaveRecentSticker73))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetPeerDialogs82_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetPeerDialogs82)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetPeerDialogs82(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetPeerDialogs82",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetPeerDialogs82(ctx, req.(*TLMessagesGetPeerDialogs82))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetMessages82_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetMessages82)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetMessages82(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetMessages82",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetMessages82(ctx, req.(*TLMessagesGetMessages82))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetDialogs82_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetDialogs82)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetDialogs82(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetDialogs82",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetDialogs82(ctx, req.(*TLMessagesGetDialogs82))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetHistory82_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetHistory82)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetHistory82(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetHistory82",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetHistory82(ctx, req.(*TLMessagesGetHistory82))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSearch82_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSearch82)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSearch82(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSearch82",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSearch82(ctx, req.(*TLMessagesSearch82))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSendMedia82_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendMedia82)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSendMedia82(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSendMedia82",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSendMedia82(ctx, req.(*TLMessagesSendMedia82))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetDialogs114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetDialogs114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetDialogs114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetDialogs114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetDialogs114(ctx, req.(*TLMessagesGetDialogs114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSendMessage114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendMessage114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSendMessage114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSendMessage114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSendMessage114(ctx, req.(*TLMessagesSendMessage114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSendMedia114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendMedia114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSendMedia114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSendMedia114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSendMedia114(ctx, req.(*TLMessagesSendMedia114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesForwardMessages114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesForwardMessages114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesForwardMessages114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesForwardMessages114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesForwardMessages114(ctx, req.(*TLMessagesForwardMessages114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesReport(ctx, req.(*TLMessagesReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetStickers(ctx, req.(*TLMessagesGetStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetWebPagePreview114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetWebPagePreview114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetWebPagePreview114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetWebPagePreview114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetWebPagePreview114(ctx, req.(*TLMessagesGetWebPagePreview114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesExportChatInvite114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesExportChatInvite114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesExportChatInvite114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesExportChatInvite114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesExportChatInvite114(ctx, req.(*TLMessagesExportChatInvite114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSearchGlobal114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSearchGlobal114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSearchGlobal114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSearchGlobal114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSearchGlobal114(ctx, req.(*TLMessagesSearchGlobal114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSendInlineBotResult114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendInlineBotResult114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSendInlineBotResult114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSendInlineBotResult114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSendInlineBotResult114(ctx, req.(*TLMessagesSendInlineBotResult114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesEditMessage114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditMessage114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesEditMessage114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesEditMessage114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesEditMessage114(ctx, req.(*TLMessagesEditMessage114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesEditInlineBotMessage114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditInlineBotMessage114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesEditInlineBotMessage114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesEditInlineBotMessage114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesEditInlineBotMessage114(ctx, req.(*TLMessagesEditInlineBotMessage114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesToggleDialogPin114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesToggleDialogPin114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesToggleDialogPin114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesToggleDialogPin114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesToggleDialogPin114(ctx, req.(*TLMessagesToggleDialogPin114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesReorderPinnedDialogs114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesReorderPinnedDialogs114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesReorderPinnedDialogs114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesReorderPinnedDialogs114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesReorderPinnedDialogs114(ctx, req.(*TLMessagesReorderPinnedDialogs114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetPinnedDialogs114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetPinnedDialogs114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetPinnedDialogs114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetPinnedDialogs114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetPinnedDialogs114(ctx, req.(*TLMessagesGetPinnedDialogs114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetRecentLocations114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetRecentLocations114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetRecentLocations114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetRecentLocations114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetRecentLocations114(ctx, req.(*TLMessagesGetRecentLocations114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSendMultiMedia114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendMultiMedia114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSendMultiMedia114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSendMultiMedia114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSendMultiMedia114(ctx, req.(*TLMessagesSendMultiMedia114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSearchStickerSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSearchStickerSets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSearchStickerSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSearchStickerSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSearchStickerSets(ctx, req.(*TLMessagesSearchStickerSets))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetSplitRanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetSplitRanges)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetSplitRanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetSplitRanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetSplitRanges(ctx, req.(*TLMessagesGetSplitRanges))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesMarkDialogUnread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesMarkDialogUnread)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesMarkDialogUnread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesMarkDialogUnread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesMarkDialogUnread(ctx, req.(*TLMessagesMarkDialogUnread))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetDialogUnreadMarks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetDialogUnreadMarks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetDialogUnreadMarks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetDialogUnreadMarks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetDialogUnreadMarks(ctx, req.(*TLMessagesGetDialogUnreadMarks))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesClearAllDrafts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesClearAllDrafts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesClearAllDrafts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesClearAllDrafts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesClearAllDrafts(ctx, req.(*TLMessagesClearAllDrafts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesUpdatePinnedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesUpdatePinnedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesUpdatePinnedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesUpdatePinnedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesUpdatePinnedMessage(ctx, req.(*TLMessagesUpdatePinnedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSendVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSendVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSendVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSendVote(ctx, req.(*TLMessagesSendVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetPollResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetPollResults)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetPollResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetPollResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetPollResults(ctx, req.(*TLMessagesGetPollResults))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetOnlines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetOnlines)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetOnlines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetOnlines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetOnlines(ctx, req.(*TLMessagesGetOnlines))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetStatsURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetStatsURL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetStatsURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetStatsURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetStatsURL(ctx, req.(*TLMessagesGetStatsURL))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesEditChatAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditChatAbout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesEditChatAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesEditChatAbout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesEditChatAbout(ctx, req.(*TLMessagesEditChatAbout))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesEditChatDefaultBannedRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesEditChatDefaultBannedRights)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesEditChatDefaultBannedRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesEditChatDefaultBannedRights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesEditChatDefaultBannedRights(ctx, req.(*TLMessagesEditChatDefaultBannedRights))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetEmojiKeywords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetEmojiKeywords)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetEmojiKeywords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetEmojiKeywords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetEmojiKeywords(ctx, req.(*TLMessagesGetEmojiKeywords))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetEmojiKeywordsDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetEmojiKeywordsDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetEmojiKeywordsDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetEmojiKeywordsDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetEmojiKeywordsDifference(ctx, req.(*TLMessagesGetEmojiKeywordsDifference))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetEmojiKeywordsLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetEmojiKeywordsLanguages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetEmojiKeywordsLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetEmojiKeywordsLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetEmojiKeywordsLanguages(ctx, req.(*TLMessagesGetEmojiKeywordsLanguages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetEmojiURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetEmojiURL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetEmojiURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetEmojiURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetEmojiURL(ctx, req.(*TLMessagesGetEmojiURL))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetSearchCounters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetSearchCounters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetSearchCounters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetSearchCounters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetSearchCounters(ctx, req.(*TLMessagesGetSearchCounters))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesRequestUrlAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesRequestUrlAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesRequestUrlAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesRequestUrlAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesRequestUrlAuth(ctx, req.(*TLMessagesRequestUrlAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesAcceptUrlAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesAcceptUrlAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesAcceptUrlAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesAcceptUrlAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesAcceptUrlAuth(ctx, req.(*TLMessagesAcceptUrlAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesHidePeerSettingsBar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesHidePeerSettingsBar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesHidePeerSettingsBar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesHidePeerSettingsBar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesHidePeerSettingsBar(ctx, req.(*TLMessagesHidePeerSettingsBar))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetScheduledHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetScheduledHistory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetScheduledHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetScheduledHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetScheduledHistory(ctx, req.(*TLMessagesGetScheduledHistory))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetScheduledMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetScheduledMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetScheduledMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetScheduledMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetScheduledMessages(ctx, req.(*TLMessagesGetScheduledMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSendScheduledMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendScheduledMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSendScheduledMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSendScheduledMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSendScheduledMessages(ctx, req.(*TLMessagesSendScheduledMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesDeleteScheduledMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesDeleteScheduledMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesDeleteScheduledMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesDeleteScheduledMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesDeleteScheduledMessages(ctx, req.(*TLMessagesDeleteScheduledMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetPollVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetPollVotes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetPollVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetPollVotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetPollVotes(ctx, req.(*TLMessagesGetPollVotes))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesToggleStickerSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesToggleStickerSets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesToggleStickerSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesToggleStickerSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesToggleStickerSets(ctx, req.(*TLMessagesToggleStickerSets))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetDialogFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetDialogFilters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetDialogFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetDialogFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetDialogFilters(ctx, req.(*TLMessagesGetDialogFilters))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetSuggestedDialogFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetSuggestedDialogFilters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetSuggestedDialogFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetSuggestedDialogFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetSuggestedDialogFilters(ctx, req.(*TLMessagesGetSuggestedDialogFilters))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesUpdateDialogFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesUpdateDialogFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesUpdateDialogFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesUpdateDialogFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesUpdateDialogFilter(ctx, req.(*TLMessagesUpdateDialogFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesUpdateDialogFiltersOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesUpdateDialogFiltersOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesUpdateDialogFiltersOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesUpdateDialogFiltersOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesUpdateDialogFiltersOrder(ctx, req.(*TLMessagesUpdateDialogFiltersOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetOldFeaturedStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetOldFeaturedStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetOldFeaturedStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetOldFeaturedStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetOldFeaturedStickers(ctx, req.(*TLMessagesGetOldFeaturedStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSendEncrypted118_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendEncrypted118)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSendEncrypted118(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSendEncrypted118",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSendEncrypted118(ctx, req.(*TLMessagesSendEncrypted118))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesGetBotCallbackAnswer118_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesGetBotCallbackAnswer118)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesGetBotCallbackAnswer118(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesGetBotCallbackAnswer118",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesGetBotCallbackAnswer118(ctx, req.(*TLMessagesGetBotCallbackAnswer118))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessages_MessagesSendEncryptedFile118_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessagesSendEncryptedFile118)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessagesServer).MessagesSendEncryptedFile118(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCMessages/MessagesSendEncryptedFile118",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessagesServer).MessagesSendEncryptedFile118(ctx, req.(*TLMessagesSendEncryptedFile118))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCMessages_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCMessages",
	HandlerType: (*RPCMessagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "messages_getMessages",
			Handler:    _RPCMessages_MessagesGetMessages_Handler,
		},
		{
			MethodName: "messages_getDialogs",
			Handler:    _RPCMessages_MessagesGetDialogs_Handler,
		},
		{
			MethodName: "messages_getHistory",
			Handler:    _RPCMessages_MessagesGetHistory_Handler,
		},
		{
			MethodName: "messages_search",
			Handler:    _RPCMessages_MessagesSearch_Handler,
		},
		{
			MethodName: "messages_readHistory",
			Handler:    _RPCMessages_MessagesReadHistory_Handler,
		},
		{
			MethodName: "messages_deleteHistory",
			Handler:    _RPCMessages_MessagesDeleteHistory_Handler,
		},
		{
			MethodName: "messages_deleteMessages",
			Handler:    _RPCMessages_MessagesDeleteMessages_Handler,
		},
		{
			MethodName: "messages_receivedMessages",
			Handler:    _RPCMessages_MessagesReceivedMessages_Handler,
		},
		{
			MethodName: "messages_setTyping",
			Handler:    _RPCMessages_MessagesSetTyping_Handler,
		},
		{
			MethodName: "messages_sendMessage",
			Handler:    _RPCMessages_MessagesSendMessage_Handler,
		},
		{
			MethodName: "messages_sendMedia",
			Handler:    _RPCMessages_MessagesSendMedia_Handler,
		},
		{
			MethodName: "messages_forwardMessages",
			Handler:    _RPCMessages_MessagesForwardMessages_Handler,
		},
		{
			MethodName: "messages_reportSpam",
			Handler:    _RPCMessages_MessagesReportSpam_Handler,
		},
		{
			MethodName: "messages_hideReportSpam",
			Handler:    _RPCMessages_MessagesHideReportSpam_Handler,
		},
		{
			MethodName: "messages_getPeerSettings",
			Handler:    _RPCMessages_MessagesGetPeerSettings_Handler,
		},
		{
			MethodName: "messages_getChats",
			Handler:    _RPCMessages_MessagesGetChats_Handler,
		},
		{
			MethodName: "messages_getFullChat",
			Handler:    _RPCMessages_MessagesGetFullChat_Handler,
		},
		{
			MethodName: "messages_editChatTitle",
			Handler:    _RPCMessages_MessagesEditChatTitle_Handler,
		},
		{
			MethodName: "messages_editChatPhoto",
			Handler:    _RPCMessages_MessagesEditChatPhoto_Handler,
		},
		{
			MethodName: "messages_addChatUser",
			Handler:    _RPCMessages_MessagesAddChatUser_Handler,
		},
		{
			MethodName: "messages_deleteChatUser",
			Handler:    _RPCMessages_MessagesDeleteChatUser_Handler,
		},
		{
			MethodName: "messages_createChat",
			Handler:    _RPCMessages_MessagesCreateChat_Handler,
		},
		{
			MethodName: "messages_forwardMessage",
			Handler:    _RPCMessages_MessagesForwardMessage_Handler,
		},
		{
			MethodName: "messages_getDhConfig",
			Handler:    _RPCMessages_MessagesGetDhConfig_Handler,
		},
		{
			MethodName: "messages_requestEncryption",
			Handler:    _RPCMessages_MessagesRequestEncryption_Handler,
		},
		{
			MethodName: "messages_acceptEncryption",
			Handler:    _RPCMessages_MessagesAcceptEncryption_Handler,
		},
		{
			MethodName: "messages_discardEncryption",
			Handler:    _RPCMessages_MessagesDiscardEncryption_Handler,
		},
		{
			MethodName: "messages_setEncryptedTyping",
			Handler:    _RPCMessages_MessagesSetEncryptedTyping_Handler,
		},
		{
			MethodName: "messages_readEncryptedHistory",
			Handler:    _RPCMessages_MessagesReadEncryptedHistory_Handler,
		},
		{
			MethodName: "messages_sendEncrypted",
			Handler:    _RPCMessages_MessagesSendEncrypted_Handler,
		},
		{
			MethodName: "messages_sendEncryptedFile",
			Handler:    _RPCMessages_MessagesSendEncryptedFile_Handler,
		},
		{
			MethodName: "messages_sendEncryptedService",
			Handler:    _RPCMessages_MessagesSendEncryptedService_Handler,
		},
		{
			MethodName: "messages_receivedQueue",
			Handler:    _RPCMessages_MessagesReceivedQueue_Handler,
		},
		{
			MethodName: "messages_reportEncryptedSpam",
			Handler:    _RPCMessages_MessagesReportEncryptedSpam_Handler,
		},
		{
			MethodName: "messages_readMessageContents",
			Handler:    _RPCMessages_MessagesReadMessageContents_Handler,
		},
		{
			MethodName: "messages_getAllStickers",
			Handler:    _RPCMessages_MessagesGetAllStickers_Handler,
		},
		{
			MethodName: "messages_getWebPagePreview",
			Handler:    _RPCMessages_MessagesGetWebPagePreview_Handler,
		},
		{
			MethodName: "messages_exportChatInvite",
			Handler:    _RPCMessages_MessagesExportChatInvite_Handler,
		},
		{
			MethodName: "messages_checkChatInvite",
			Handler:    _RPCMessages_MessagesCheckChatInvite_Handler,
		},
		{
			MethodName: "messages_importChatInvite",
			Handler:    _RPCMessages_MessagesImportChatInvite_Handler,
		},
		{
			MethodName: "messages_getStickerSet",
			Handler:    _RPCMessages_MessagesGetStickerSet_Handler,
		},
		{
			MethodName: "messages_installStickerSet",
			Handler:    _RPCMessages_MessagesInstallStickerSet_Handler,
		},
		{
			MethodName: "messages_uninstallStickerSet",
			Handler:    _RPCMessages_MessagesUninstallStickerSet_Handler,
		},
		{
			MethodName: "messages_startBot",
			Handler:    _RPCMessages_MessagesStartBot_Handler,
		},
		{
			MethodName: "messages_getMessagesViews",
			Handler:    _RPCMessages_MessagesGetMessagesViews_Handler,
		},
		{
			MethodName: "messages_toggleChatAdmins",
			Handler:    _RPCMessages_MessagesToggleChatAdmins_Handler,
		},
		{
			MethodName: "messages_editChatAdmin",
			Handler:    _RPCMessages_MessagesEditChatAdmin_Handler,
		},
		{
			MethodName: "messages_migrateChat",
			Handler:    _RPCMessages_MessagesMigrateChat_Handler,
		},
		{
			MethodName: "messages_searchGlobal",
			Handler:    _RPCMessages_MessagesSearchGlobal_Handler,
		},
		{
			MethodName: "messages_reorderStickerSets",
			Handler:    _RPCMessages_MessagesReorderStickerSets_Handler,
		},
		{
			MethodName: "messages_getDocumentByHash",
			Handler:    _RPCMessages_MessagesGetDocumentByHash_Handler,
		},
		{
			MethodName: "messages_searchGifs",
			Handler:    _RPCMessages_MessagesSearchGifs_Handler,
		},
		{
			MethodName: "messages_getSavedGifs",
			Handler:    _RPCMessages_MessagesGetSavedGifs_Handler,
		},
		{
			MethodName: "messages_saveGif",
			Handler:    _RPCMessages_MessagesSaveGif_Handler,
		},
		{
			MethodName: "messages_getInlineBotResults",
			Handler:    _RPCMessages_MessagesGetInlineBotResults_Handler,
		},
		{
			MethodName: "messages_setInlineBotResults",
			Handler:    _RPCMessages_MessagesSetInlineBotResults_Handler,
		},
		{
			MethodName: "messages_sendInlineBotResult",
			Handler:    _RPCMessages_MessagesSendInlineBotResult_Handler,
		},
		{
			MethodName: "messages_getMessageEditData",
			Handler:    _RPCMessages_MessagesGetMessageEditData_Handler,
		},
		{
			MethodName: "messages_editMessage",
			Handler:    _RPCMessages_MessagesEditMessage_Handler,
		},
		{
			MethodName: "messages_editInlineBotMessage",
			Handler:    _RPCMessages_MessagesEditInlineBotMessage_Handler,
		},
		{
			MethodName: "messages_getBotCallbackAnswer",
			Handler:    _RPCMessages_MessagesGetBotCallbackAnswer_Handler,
		},
		{
			MethodName: "messages_setBotCallbackAnswer",
			Handler:    _RPCMessages_MessagesSetBotCallbackAnswer_Handler,
		},
		{
			MethodName: "messages_getPeerDialogs",
			Handler:    _RPCMessages_MessagesGetPeerDialogs_Handler,
		},
		{
			MethodName: "messages_saveDraft",
			Handler:    _RPCMessages_MessagesSaveDraft_Handler,
		},
		{
			MethodName: "messages_getAllDrafts",
			Handler:    _RPCMessages_MessagesGetAllDrafts_Handler,
		},
		{
			MethodName: "messages_getFeaturedStickers",
			Handler:    _RPCMessages_MessagesGetFeaturedStickers_Handler,
		},
		{
			MethodName: "messages_readFeaturedStickers",
			Handler:    _RPCMessages_MessagesReadFeaturedStickers_Handler,
		},
		{
			MethodName: "messages_getRecentStickers",
			Handler:    _RPCMessages_MessagesGetRecentStickers_Handler,
		},
		{
			MethodName: "messages_saveRecentSticker",
			Handler:    _RPCMessages_MessagesSaveRecentSticker_Handler,
		},
		{
			MethodName: "messages_clearRecentStickers",
			Handler:    _RPCMessages_MessagesClearRecentStickers_Handler,
		},
		{
			MethodName: "messages_getArchivedStickers",
			Handler:    _RPCMessages_MessagesGetArchivedStickers_Handler,
		},
		{
			MethodName: "messages_getMaskStickers",
			Handler:    _RPCMessages_MessagesGetMaskStickers_Handler,
		},
		{
			MethodName: "messages_getAttachedStickers",
			Handler:    _RPCMessages_MessagesGetAttachedStickers_Handler,
		},
		{
			MethodName: "messages_setGameScore",
			Handler:    _RPCMessages_MessagesSetGameScore_Handler,
		},
		{
			MethodName: "messages_setInlineGameScore",
			Handler:    _RPCMessages_MessagesSetInlineGameScore_Handler,
		},
		{
			MethodName: "messages_getGameHighScores",
			Handler:    _RPCMessages_MessagesGetGameHighScores_Handler,
		},
		{
			MethodName: "messages_getInlineGameHighScores",
			Handler:    _RPCMessages_MessagesGetInlineGameHighScores_Handler,
		},
		{
			MethodName: "messages_getCommonChats",
			Handler:    _RPCMessages_MessagesGetCommonChats_Handler,
		},
		{
			MethodName: "messages_getAllChats",
			Handler:    _RPCMessages_MessagesGetAllChats_Handler,
		},
		{
			MethodName: "messages_getWebPage",
			Handler:    _RPCMessages_MessagesGetWebPage_Handler,
		},
		{
			MethodName: "messages_toggleDialogPin",
			Handler:    _RPCMessages_MessagesToggleDialogPin_Handler,
		},
		{
			MethodName: "messages_reorderPinnedDialogs",
			Handler:    _RPCMessages_MessagesReorderPinnedDialogs_Handler,
		},
		{
			MethodName: "messages_getPinnedDialogs",
			Handler:    _RPCMessages_MessagesGetPinnedDialogs_Handler,
		},
		{
			MethodName: "messages_setBotShippingResults",
			Handler:    _RPCMessages_MessagesSetBotShippingResults_Handler,
		},
		{
			MethodName: "messages_setBotPrecheckoutResults",
			Handler:    _RPCMessages_MessagesSetBotPrecheckoutResults_Handler,
		},
		{
			MethodName: "messages_uploadMedia",
			Handler:    _RPCMessages_MessagesUploadMedia_Handler,
		},
		{
			MethodName: "messages_sendScreenshotNotification",
			Handler:    _RPCMessages_MessagesSendScreenshotNotification_Handler,
		},
		{
			MethodName: "messages_getFavedStickers",
			Handler:    _RPCMessages_MessagesGetFavedStickers_Handler,
		},
		{
			MethodName: "messages_faveSticker",
			Handler:    _RPCMessages_MessagesFaveSticker_Handler,
		},
		{
			MethodName: "messages_getUnreadMentions",
			Handler:    _RPCMessages_MessagesGetUnreadMentions_Handler,
		},
		{
			MethodName: "messages_readHistory73",
			Handler:    _RPCMessages_MessagesReadHistory73_Handler,
		},
		{
			MethodName: "messages_editMessage73",
			Handler:    _RPCMessages_MessagesEditMessage73_Handler,
		},
		{
			MethodName: "messages_search73",
			Handler:    _RPCMessages_MessagesSearch73_Handler,
		},
		{
			MethodName: "messages_readMentions",
			Handler:    _RPCMessages_MessagesReadMentions_Handler,
		},
		{
			MethodName: "messages_getRecentLocations",
			Handler:    _RPCMessages_MessagesGetRecentLocations_Handler,
		},
		{
			MethodName: "messages_sendMultiMedia",
			Handler:    _RPCMessages_MessagesSendMultiMedia_Handler,
		},
		{
			MethodName: "messages_uploadEncryptedFile",
			Handler:    _RPCMessages_MessagesUploadEncryptedFile_Handler,
		},
		{
			MethodName: "messages_saveRecentSticker73",
			Handler:    _RPCMessages_MessagesSaveRecentSticker73_Handler,
		},
		{
			MethodName: "messages_getPeerDialogs82",
			Handler:    _RPCMessages_MessagesGetPeerDialogs82_Handler,
		},
		{
			MethodName: "messages_getMessages82",
			Handler:    _RPCMessages_MessagesGetMessages82_Handler,
		},
		{
			MethodName: "messages_getDialogs82",
			Handler:    _RPCMessages_MessagesGetDialogs82_Handler,
		},
		{
			MethodName: "messages_getHistory82",
			Handler:    _RPCMessages_MessagesGetHistory82_Handler,
		},
		{
			MethodName: "messages_search82",
			Handler:    _RPCMessages_MessagesSearch82_Handler,
		},
		{
			MethodName: "messages_sendMedia82",
			Handler:    _RPCMessages_MessagesSendMedia82_Handler,
		},
		{
			MethodName: "messages_getDialogs114",
			Handler:    _RPCMessages_MessagesGetDialogs114_Handler,
		},
		{
			MethodName: "messages_sendMessage114",
			Handler:    _RPCMessages_MessagesSendMessage114_Handler,
		},
		{
			MethodName: "messages_sendMedia114",
			Handler:    _RPCMessages_MessagesSendMedia114_Handler,
		},
		{
			MethodName: "messages_forwardMessages114",
			Handler:    _RPCMessages_MessagesForwardMessages114_Handler,
		},
		{
			MethodName: "messages_report",
			Handler:    _RPCMessages_MessagesReport_Handler,
		},
		{
			MethodName: "messages_getStickers",
			Handler:    _RPCMessages_MessagesGetStickers_Handler,
		},
		{
			MethodName: "messages_getWebPagePreview114",
			Handler:    _RPCMessages_MessagesGetWebPagePreview114_Handler,
		},
		{
			MethodName: "messages_exportChatInvite114",
			Handler:    _RPCMessages_MessagesExportChatInvite114_Handler,
		},
		{
			MethodName: "messages_searchGlobal114",
			Handler:    _RPCMessages_MessagesSearchGlobal114_Handler,
		},
		{
			MethodName: "messages_sendInlineBotResult114",
			Handler:    _RPCMessages_MessagesSendInlineBotResult114_Handler,
		},
		{
			MethodName: "messages_editMessage114",
			Handler:    _RPCMessages_MessagesEditMessage114_Handler,
		},
		{
			MethodName: "messages_editInlineBotMessage114",
			Handler:    _RPCMessages_MessagesEditInlineBotMessage114_Handler,
		},
		{
			MethodName: "messages_toggleDialogPin114",
			Handler:    _RPCMessages_MessagesToggleDialogPin114_Handler,
		},
		{
			MethodName: "messages_reorderPinnedDialogs114",
			Handler:    _RPCMessages_MessagesReorderPinnedDialogs114_Handler,
		},
		{
			MethodName: "messages_getPinnedDialogs114",
			Handler:    _RPCMessages_MessagesGetPinnedDialogs114_Handler,
		},
		{
			MethodName: "messages_getRecentLocations114",
			Handler:    _RPCMessages_MessagesGetRecentLocations114_Handler,
		},
		{
			MethodName: "messages_sendMultiMedia114",
			Handler:    _RPCMessages_MessagesSendMultiMedia114_Handler,
		},
		{
			MethodName: "messages_searchStickerSets",
			Handler:    _RPCMessages_MessagesSearchStickerSets_Handler,
		},
		{
			MethodName: "messages_getSplitRanges",
			Handler:    _RPCMessages_MessagesGetSplitRanges_Handler,
		},
		{
			MethodName: "messages_markDialogUnread",
			Handler:    _RPCMessages_MessagesMarkDialogUnread_Handler,
		},
		{
			MethodName: "messages_getDialogUnreadMarks",
			Handler:    _RPCMessages_MessagesGetDialogUnreadMarks_Handler,
		},
		{
			MethodName: "messages_clearAllDrafts",
			Handler:    _RPCMessages_MessagesClearAllDrafts_Handler,
		},
		{
			MethodName: "messages_updatePinnedMessage",
			Handler:    _RPCMessages_MessagesUpdatePinnedMessage_Handler,
		},
		{
			MethodName: "messages_sendVote",
			Handler:    _RPCMessages_MessagesSendVote_Handler,
		},
		{
			MethodName: "messages_getPollResults",
			Handler:    _RPCMessages_MessagesGetPollResults_Handler,
		},
		{
			MethodName: "messages_getOnlines",
			Handler:    _RPCMessages_MessagesGetOnlines_Handler,
		},
		{
			MethodName: "messages_getStatsURL",
			Handler:    _RPCMessages_MessagesGetStatsURL_Handler,
		},
		{
			MethodName: "messages_editChatAbout",
			Handler:    _RPCMessages_MessagesEditChatAbout_Handler,
		},
		{
			MethodName: "messages_editChatDefaultBannedRights",
			Handler:    _RPCMessages_MessagesEditChatDefaultBannedRights_Handler,
		},
		{
			MethodName: "messages_getEmojiKeywords",
			Handler:    _RPCMessages_MessagesGetEmojiKeywords_Handler,
		},
		{
			MethodName: "messages_getEmojiKeywordsDifference",
			Handler:    _RPCMessages_MessagesGetEmojiKeywordsDifference_Handler,
		},
		{
			MethodName: "messages_getEmojiKeywordsLanguages",
			Handler:    _RPCMessages_MessagesGetEmojiKeywordsLanguages_Handler,
		},
		{
			MethodName: "messages_getEmojiURL",
			Handler:    _RPCMessages_MessagesGetEmojiURL_Handler,
		},
		{
			MethodName: "messages_getSearchCounters",
			Handler:    _RPCMessages_MessagesGetSearchCounters_Handler,
		},
		{
			MethodName: "messages_requestUrlAuth",
			Handler:    _RPCMessages_MessagesRequestUrlAuth_Handler,
		},
		{
			MethodName: "messages_acceptUrlAuth",
			Handler:    _RPCMessages_MessagesAcceptUrlAuth_Handler,
		},
		{
			MethodName: "messages_hidePeerSettingsBar",
			Handler:    _RPCMessages_MessagesHidePeerSettingsBar_Handler,
		},
		{
			MethodName: "messages_getScheduledHistory",
			Handler:    _RPCMessages_MessagesGetScheduledHistory_Handler,
		},
		{
			MethodName: "messages_getScheduledMessages",
			Handler:    _RPCMessages_MessagesGetScheduledMessages_Handler,
		},
		{
			MethodName: "messages_sendScheduledMessages",
			Handler:    _RPCMessages_MessagesSendScheduledMessages_Handler,
		},
		{
			MethodName: "messages_deleteScheduledMessages",
			Handler:    _RPCMessages_MessagesDeleteScheduledMessages_Handler,
		},
		{
			MethodName: "messages_getPollVotes",
			Handler:    _RPCMessages_MessagesGetPollVotes_Handler,
		},
		{
			MethodName: "messages_toggleStickerSets",
			Handler:    _RPCMessages_MessagesToggleStickerSets_Handler,
		},
		{
			MethodName: "messages_getDialogFilters",
			Handler:    _RPCMessages_MessagesGetDialogFilters_Handler,
		},
		{
			MethodName: "messages_getSuggestedDialogFilters",
			Handler:    _RPCMessages_MessagesGetSuggestedDialogFilters_Handler,
		},
		{
			MethodName: "messages_updateDialogFilter",
			Handler:    _RPCMessages_MessagesUpdateDialogFilter_Handler,
		},
		{
			MethodName: "messages_updateDialogFiltersOrder",
			Handler:    _RPCMessages_MessagesUpdateDialogFiltersOrder_Handler,
		},
		{
			MethodName: "messages_getOldFeaturedStickers",
			Handler:    _RPCMessages_MessagesGetOldFeaturedStickers_Handler,
		},
		{
			MethodName: "messages_sendEncrypted118",
			Handler:    _RPCMessages_MessagesSendEncrypted118_Handler,
		},
		{
			MethodName: "messages_getBotCallbackAnswer118",
			Handler:    _RPCMessages_MessagesGetBotCallbackAnswer118_Handler,
		},
		{
			MethodName: "messages_sendEncryptedFile118",
			Handler:    _RPCMessages_MessagesSendEncryptedFile118_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

// RPCAuthClient is the client API for RPCAuth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCAuthClient interface {
	// auth.checkPhone#6fe51dfb phone_number:string = auth.CheckedPhone;
	AuthCheckPhone(ctx context.Context, in *TLAuthCheckPhone, opts ...grpc.CallOption) (*Auth_CheckedPhone, error)
	// auth.sendCode#86aef0ec flags:# allow_flashcall:flags.0?true phone_number:string current_number:flags.0?Bool api_id:int api_hash:string = auth.SentCode;
	AuthSendCode(ctx context.Context, in *TLAuthSendCode, opts ...grpc.CallOption) (*Auth_SentCode, error)
	// auth.signUp#1b067634 phone_number:string phone_code_hash:string phone_code:string first_name:string last_name:string = auth.Authorization;
	AuthSignUp(ctx context.Context, in *TLAuthSignUp, opts ...grpc.CallOption) (*Auth_Authorization, error)
	// auth.signIn#bcd51581 phone_number:string phone_code_hash:string phone_code:string = auth.Authorization;
	AuthSignIn(ctx context.Context, in *TLAuthSignIn, opts ...grpc.CallOption) (*Auth_Authorization, error)
	// auth.logOut#5717da40 = Bool;
	AuthLogOut(ctx context.Context, in *TLAuthLogOut, opts ...grpc.CallOption) (*Bool, error)
	// auth.resetAuthorizations#9fab0d1a = Bool;
	AuthResetAuthorizations(ctx context.Context, in *TLAuthResetAuthorizations, opts ...grpc.CallOption) (*Bool, error)
	// auth.sendInvites#771c1d97 phone_numbers:Vector<string> message:string = Bool;
	AuthSendInvites(ctx context.Context, in *TLAuthSendInvites, opts ...grpc.CallOption) (*Bool, error)
	// auth.exportAuthorization#e5bfffcd dc_id:int = auth.ExportedAuthorization;
	AuthExportAuthorization(ctx context.Context, in *TLAuthExportAuthorization, opts ...grpc.CallOption) (*Auth_ExportedAuthorization, error)
	// auth.importAuthorization#e3ef9613 id:int bytes:bytes = auth.Authorization;
	AuthImportAuthorization(ctx context.Context, in *TLAuthImportAuthorization, opts ...grpc.CallOption) (*Auth_Authorization, error)
	// auth.bindTempAuthKey#cdd42a05 perm_auth_key_id:long nonce:long expires_at:int encrypted_message:bytes = Bool;
	AuthBindTempAuthKey(ctx context.Context, in *TLAuthBindTempAuthKey, opts ...grpc.CallOption) (*Bool, error)
	// auth.importBotAuthorization#67a3ff2c flags:int api_id:int api_hash:string bot_auth_token:string = auth.Authorization;
	AuthImportBotAuthorization(ctx context.Context, in *TLAuthImportBotAuthorization, opts ...grpc.CallOption) (*Auth_Authorization, error)
	// auth.checkPassword#a63011e password_hash:bytes = auth.Authorization;
	AuthCheckPassword(ctx context.Context, in *TLAuthCheckPassword, opts ...grpc.CallOption) (*Auth_Authorization, error)
	// auth.requestPasswordRecovery#d897bc66 = auth.PasswordRecovery;
	AuthRequestPasswordRecovery(ctx context.Context, in *TLAuthRequestPasswordRecovery, opts ...grpc.CallOption) (*Auth_PasswordRecovery, error)
	// auth.recoverPassword#4ea56e92 code:string = auth.Authorization;
	AuthRecoverPassword(ctx context.Context, in *TLAuthRecoverPassword, opts ...grpc.CallOption) (*Auth_Authorization, error)
	// auth.resendCode#3ef1a9bf phone_number:string phone_code_hash:string = auth.SentCode;
	AuthResendCode(ctx context.Context, in *TLAuthResendCode, opts ...grpc.CallOption) (*Auth_SentCode, error)
	// auth.cancelCode#1f040578 phone_number:string phone_code_hash:string = Bool;
	AuthCancelCode(ctx context.Context, in *TLAuthCancelCode, opts ...grpc.CallOption) (*Bool, error)
	// auth.dropTempAuthKeys#8e48a188 except_auth_keys:Vector<long> = Bool;
	AuthDropTempAuthKeys(ctx context.Context, in *TLAuthDropTempAuthKeys, opts ...grpc.CallOption) (*Bool, error)
	// auth.checkInviteCode#ed2a16b4 code:string = Error;
	AuthCheckInviteCode(ctx context.Context, in *TLAuthCheckInviteCode, opts ...grpc.CallOption) (*Error, error)
	// auth.sendCode#ccfd70cf flags:# allow_flashcall:flags.0?true phone_number:string current_number:flags.0?Bool api_id:int api_hash:string lang_code:string = auth.SentCode;
	AuthSendCode73(ctx context.Context, in *TLAuthSendCode73, opts ...grpc.CallOption) (*Auth_SentCode, error)
	// auth.sendCode#86aef0ec flags:# allow_flashcall:flags.0?true phone_number:string current_number:flags.0?Bool api_id:int api_hash:string = auth.SentCode;
	AuthSendCode82(ctx context.Context, in *TLAuthSendCode73, opts ...grpc.CallOption) (*Auth_SentCode82, error)
	// auth.sendCode#a677244f phone_number:string api_id:int api_hash:string settings:CodeSettings = auth.SentCode;
	AuthSendCode114(ctx context.Context, in *TLAuthSendCode114, opts ...grpc.CallOption) (*Auth_SentCode, error)
	// auth.signUp#80eee427 phone_number:string phone_code_hash:string first_name:string last_name:string = auth.Authorization;
	AuthSignUp114(ctx context.Context, in *TLAuthSignUp114, opts ...grpc.CallOption) (*Auth_Authorization, error)
	// auth.checkPassword#d18b4d16 password:InputCheckPasswordSRP = auth.Authorization;
	AuthCheckPassword114(ctx context.Context, in *TLAuthCheckPassword114, opts ...grpc.CallOption) (*Auth_Authorization, error)
	// auth.exportLoginToken#b1b41517 api_id:int api_hash:string except_ids:Vector<int> = auth.LoginToken;
	AuthExportLoginToken(ctx context.Context, in *TLAuthExportLoginToken, opts ...grpc.CallOption) (*Auth_LoginToken, error)
	// auth.importLoginToken#95ac5ce4 token:bytes = auth.LoginToken;
	AuthImportLoginToken(ctx context.Context, in *TLAuthImportLoginToken, opts ...grpc.CallOption) (*Auth_LoginToken, error)
	// auth.acceptLoginToken#e894ad4d token:bytes = Authorization;
	AuthAcceptLoginToken(ctx context.Context, in *TLAuthAcceptLoginToken, opts ...grpc.CallOption) (*Authorization, error)
}

type rPCAuthClient struct {
	cc *grpc.ClientConn
}

func NewRPCAuthClient(cc *grpc.ClientConn) RPCAuthClient {
	return &rPCAuthClient{cc}
}

func (c *rPCAuthClient) AuthCheckPhone(ctx context.Context, in *TLAuthCheckPhone, opts ...grpc.CallOption) (*Auth_CheckedPhone, error) {
	out := new(Auth_CheckedPhone)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuth/auth_checkPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthSendCode(ctx context.Context, in *TLAuthSendCode, opts ...grpc.CallOption) (*Auth_SentCode, error) {
	out := new(Auth_SentCode)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuth/auth_sendCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthSignUp(ctx context.Context, in *TLAuthSignUp, opts ...grpc.CallOption) (*Auth_Authorization, error) {
	out := new(Auth_Authorization)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuth/auth_signUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthSignIn(ctx context.Context, in *TLAuthSignIn, opts ...grpc.CallOption) (*Auth_Authorization, error) {
	out := new(Auth_Authorization)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuth/auth_signIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthLogOut(ctx context.Context, in *TLAuthLogOut, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuth/auth_logOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthResetAuthorizations(ctx context.Context, in *TLAuthResetAuthorizations, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuth/auth_resetAuthorizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthSendInvites(ctx context.Context, in *TLAuthSendInvites, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuth/auth_sendInvites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthExportAuthorization(ctx context.Context, in *TLAuthExportAuthorization, opts ...grpc.CallOption) (*Auth_ExportedAuthorization, error) {
	out := new(Auth_ExportedAuthorization)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuth/auth_exportAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthImportAuthorization(ctx context.Context, in *TLAuthImportAuthorization, opts ...grpc.CallOption) (*Auth_Authorization, error) {
	out := new(Auth_Authorization)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuth/auth_importAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthBindTempAuthKey(ctx context.Context, in *TLAuthBindTempAuthKey, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuth/auth_bindTempAuthKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthImportBotAuthorization(ctx context.Context, in *TLAuthImportBotAuthorization, opts ...grpc.CallOption) (*Auth_Authorization, error) {
	out := new(Auth_Authorization)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuth/auth_importBotAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthCheckPassword(ctx context.Context, in *TLAuthCheckPassword, opts ...grpc.CallOption) (*Auth_Authorization, error) {
	out := new(Auth_Authorization)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuth/auth_checkPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthRequestPasswordRecovery(ctx context.Context, in *TLAuthRequestPasswordRecovery, opts ...grpc.CallOption) (*Auth_PasswordRecovery, error) {
	out := new(Auth_PasswordRecovery)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuth/auth_requestPasswordRecovery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthRecoverPassword(ctx context.Context, in *TLAuthRecoverPassword, opts ...grpc.CallOption) (*Auth_Authorization, error) {
	out := new(Auth_Authorization)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuth/auth_recoverPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthResendCode(ctx context.Context, in *TLAuthResendCode, opts ...grpc.CallOption) (*Auth_SentCode, error) {
	out := new(Auth_SentCode)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuth/auth_resendCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthCancelCode(ctx context.Context, in *TLAuthCancelCode, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuth/auth_cancelCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthDropTempAuthKeys(ctx context.Context, in *TLAuthDropTempAuthKeys, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuth/auth_dropTempAuthKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthCheckInviteCode(ctx context.Context, in *TLAuthCheckInviteCode, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuth/auth_checkInviteCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthSendCode73(ctx context.Context, in *TLAuthSendCode73, opts ...grpc.CallOption) (*Auth_SentCode, error) {
	out := new(Auth_SentCode)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuth/auth_sendCode73", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthSendCode82(ctx context.Context, in *TLAuthSendCode73, opts ...grpc.CallOption) (*Auth_SentCode82, error) {
	out := new(Auth_SentCode82)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuth/auth_sendCode82", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthSendCode114(ctx context.Context, in *TLAuthSendCode114, opts ...grpc.CallOption) (*Auth_SentCode, error) {
	out := new(Auth_SentCode)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuth/auth_sendCode114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthSignUp114(ctx context.Context, in *TLAuthSignUp114, opts ...grpc.CallOption) (*Auth_Authorization, error) {
	out := new(Auth_Authorization)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuth/auth_signUp114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthCheckPassword114(ctx context.Context, in *TLAuthCheckPassword114, opts ...grpc.CallOption) (*Auth_Authorization, error) {
	out := new(Auth_Authorization)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuth/auth_checkPassword114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthExportLoginToken(ctx context.Context, in *TLAuthExportLoginToken, opts ...grpc.CallOption) (*Auth_LoginToken, error) {
	out := new(Auth_LoginToken)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuth/auth_exportLoginToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthImportLoginToken(ctx context.Context, in *TLAuthImportLoginToken, opts ...grpc.CallOption) (*Auth_LoginToken, error) {
	out := new(Auth_LoginToken)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuth/auth_importLoginToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAuthClient) AuthAcceptLoginToken(ctx context.Context, in *TLAuthAcceptLoginToken, opts ...grpc.CallOption) (*Authorization, error) {
	out := new(Authorization)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAuth/auth_acceptLoginToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCAuthServer is the server API for RPCAuth service.
type RPCAuthServer interface {
	// auth.checkPhone#6fe51dfb phone_number:string = auth.CheckedPhone;
	AuthCheckPhone(context.Context, *TLAuthCheckPhone) (*Auth_CheckedPhone, error)
	// auth.sendCode#86aef0ec flags:# allow_flashcall:flags.0?true phone_number:string current_number:flags.0?Bool api_id:int api_hash:string = auth.SentCode;
	AuthSendCode(context.Context, *TLAuthSendCode) (*Auth_SentCode, error)
	// auth.signUp#1b067634 phone_number:string phone_code_hash:string phone_code:string first_name:string last_name:string = auth.Authorization;
	AuthSignUp(context.Context, *TLAuthSignUp) (*Auth_Authorization, error)
	// auth.signIn#bcd51581 phone_number:string phone_code_hash:string phone_code:string = auth.Authorization;
	AuthSignIn(context.Context, *TLAuthSignIn) (*Auth_Authorization, error)
	// auth.logOut#5717da40 = Bool;
	AuthLogOut(context.Context, *TLAuthLogOut) (*Bool, error)
	// auth.resetAuthorizations#9fab0d1a = Bool;
	AuthResetAuthorizations(context.Context, *TLAuthResetAuthorizations) (*Bool, error)
	// auth.sendInvites#771c1d97 phone_numbers:Vector<string> message:string = Bool;
	AuthSendInvites(context.Context, *TLAuthSendInvites) (*Bool, error)
	// auth.exportAuthorization#e5bfffcd dc_id:int = auth.ExportedAuthorization;
	AuthExportAuthorization(context.Context, *TLAuthExportAuthorization) (*Auth_ExportedAuthorization, error)
	// auth.importAuthorization#e3ef9613 id:int bytes:bytes = auth.Authorization;
	AuthImportAuthorization(context.Context, *TLAuthImportAuthorization) (*Auth_Authorization, error)
	// auth.bindTempAuthKey#cdd42a05 perm_auth_key_id:long nonce:long expires_at:int encrypted_message:bytes = Bool;
	AuthBindTempAuthKey(context.Context, *TLAuthBindTempAuthKey) (*Bool, error)
	// auth.importBotAuthorization#67a3ff2c flags:int api_id:int api_hash:string bot_auth_token:string = auth.Authorization;
	AuthImportBotAuthorization(context.Context, *TLAuthImportBotAuthorization) (*Auth_Authorization, error)
	// auth.checkPassword#a63011e password_hash:bytes = auth.Authorization;
	AuthCheckPassword(context.Context, *TLAuthCheckPassword) (*Auth_Authorization, error)
	// auth.requestPasswordRecovery#d897bc66 = auth.PasswordRecovery;
	AuthRequestPasswordRecovery(context.Context, *TLAuthRequestPasswordRecovery) (*Auth_PasswordRecovery, error)
	// auth.recoverPassword#4ea56e92 code:string = auth.Authorization;
	AuthRecoverPassword(context.Context, *TLAuthRecoverPassword) (*Auth_Authorization, error)
	// auth.resendCode#3ef1a9bf phone_number:string phone_code_hash:string = auth.SentCode;
	AuthResendCode(context.Context, *TLAuthResendCode) (*Auth_SentCode, error)
	// auth.cancelCode#1f040578 phone_number:string phone_code_hash:string = Bool;
	AuthCancelCode(context.Context, *TLAuthCancelCode) (*Bool, error)
	// auth.dropTempAuthKeys#8e48a188 except_auth_keys:Vector<long> = Bool;
	AuthDropTempAuthKeys(context.Context, *TLAuthDropTempAuthKeys) (*Bool, error)
	// auth.checkInviteCode#ed2a16b4 code:string = Error;
	AuthCheckInviteCode(context.Context, *TLAuthCheckInviteCode) (*Error, error)
	// auth.sendCode#ccfd70cf flags:# allow_flashcall:flags.0?true phone_number:string current_number:flags.0?Bool api_id:int api_hash:string lang_code:string = auth.SentCode;
	AuthSendCode73(context.Context, *TLAuthSendCode73) (*Auth_SentCode, error)
	// auth.sendCode#86aef0ec flags:# allow_flashcall:flags.0?true phone_number:string current_number:flags.0?Bool api_id:int api_hash:string = auth.SentCode;
	AuthSendCode82(context.Context, *TLAuthSendCode73) (*Auth_SentCode82, error)
	// auth.sendCode#a677244f phone_number:string api_id:int api_hash:string settings:CodeSettings = auth.SentCode;
	AuthSendCode114(context.Context, *TLAuthSendCode114) (*Auth_SentCode, error)
	// auth.signUp#80eee427 phone_number:string phone_code_hash:string first_name:string last_name:string = auth.Authorization;
	AuthSignUp114(context.Context, *TLAuthSignUp114) (*Auth_Authorization, error)
	// auth.checkPassword#d18b4d16 password:InputCheckPasswordSRP = auth.Authorization;
	AuthCheckPassword114(context.Context, *TLAuthCheckPassword114) (*Auth_Authorization, error)
	// auth.exportLoginToken#b1b41517 api_id:int api_hash:string except_ids:Vector<int> = auth.LoginToken;
	AuthExportLoginToken(context.Context, *TLAuthExportLoginToken) (*Auth_LoginToken, error)
	// auth.importLoginToken#95ac5ce4 token:bytes = auth.LoginToken;
	AuthImportLoginToken(context.Context, *TLAuthImportLoginToken) (*Auth_LoginToken, error)
	// auth.acceptLoginToken#e894ad4d token:bytes = Authorization;
	AuthAcceptLoginToken(context.Context, *TLAuthAcceptLoginToken) (*Authorization, error)
}

// UnimplementedRPCAuthServer can be embedded to have forward compatible implementations.
type UnimplementedRPCAuthServer struct {
}

func (*UnimplementedRPCAuthServer) AuthCheckPhone(ctx context.Context, req *TLAuthCheckPhone) (*Auth_CheckedPhone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthCheckPhone not implemented")
}
func (*UnimplementedRPCAuthServer) AuthSendCode(ctx context.Context, req *TLAuthSendCode) (*Auth_SentCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthSendCode not implemented")
}
func (*UnimplementedRPCAuthServer) AuthSignUp(ctx context.Context, req *TLAuthSignUp) (*Auth_Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthSignUp not implemented")
}
func (*UnimplementedRPCAuthServer) AuthSignIn(ctx context.Context, req *TLAuthSignIn) (*Auth_Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthSignIn not implemented")
}
func (*UnimplementedRPCAuthServer) AuthLogOut(ctx context.Context, req *TLAuthLogOut) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthLogOut not implemented")
}
func (*UnimplementedRPCAuthServer) AuthResetAuthorizations(ctx context.Context, req *TLAuthResetAuthorizations) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthResetAuthorizations not implemented")
}
func (*UnimplementedRPCAuthServer) AuthSendInvites(ctx context.Context, req *TLAuthSendInvites) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthSendInvites not implemented")
}
func (*UnimplementedRPCAuthServer) AuthExportAuthorization(ctx context.Context, req *TLAuthExportAuthorization) (*Auth_ExportedAuthorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthExportAuthorization not implemented")
}
func (*UnimplementedRPCAuthServer) AuthImportAuthorization(ctx context.Context, req *TLAuthImportAuthorization) (*Auth_Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthImportAuthorization not implemented")
}
func (*UnimplementedRPCAuthServer) AuthBindTempAuthKey(ctx context.Context, req *TLAuthBindTempAuthKey) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthBindTempAuthKey not implemented")
}
func (*UnimplementedRPCAuthServer) AuthImportBotAuthorization(ctx context.Context, req *TLAuthImportBotAuthorization) (*Auth_Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthImportBotAuthorization not implemented")
}
func (*UnimplementedRPCAuthServer) AuthCheckPassword(ctx context.Context, req *TLAuthCheckPassword) (*Auth_Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthCheckPassword not implemented")
}
func (*UnimplementedRPCAuthServer) AuthRequestPasswordRecovery(ctx context.Context, req *TLAuthRequestPasswordRecovery) (*Auth_PasswordRecovery, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthRequestPasswordRecovery not implemented")
}
func (*UnimplementedRPCAuthServer) AuthRecoverPassword(ctx context.Context, req *TLAuthRecoverPassword) (*Auth_Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthRecoverPassword not implemented")
}
func (*UnimplementedRPCAuthServer) AuthResendCode(ctx context.Context, req *TLAuthResendCode) (*Auth_SentCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthResendCode not implemented")
}
func (*UnimplementedRPCAuthServer) AuthCancelCode(ctx context.Context, req *TLAuthCancelCode) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthCancelCode not implemented")
}
func (*UnimplementedRPCAuthServer) AuthDropTempAuthKeys(ctx context.Context, req *TLAuthDropTempAuthKeys) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthDropTempAuthKeys not implemented")
}
func (*UnimplementedRPCAuthServer) AuthCheckInviteCode(ctx context.Context, req *TLAuthCheckInviteCode) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthCheckInviteCode not implemented")
}
func (*UnimplementedRPCAuthServer) AuthSendCode73(ctx context.Context, req *TLAuthSendCode73) (*Auth_SentCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthSendCode73 not implemented")
}
func (*UnimplementedRPCAuthServer) AuthSendCode82(ctx context.Context, req *TLAuthSendCode73) (*Auth_SentCode82, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthSendCode82 not implemented")
}
func (*UnimplementedRPCAuthServer) AuthSendCode114(ctx context.Context, req *TLAuthSendCode114) (*Auth_SentCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthSendCode114 not implemented")
}
func (*UnimplementedRPCAuthServer) AuthSignUp114(ctx context.Context, req *TLAuthSignUp114) (*Auth_Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthSignUp114 not implemented")
}
func (*UnimplementedRPCAuthServer) AuthCheckPassword114(ctx context.Context, req *TLAuthCheckPassword114) (*Auth_Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthCheckPassword114 not implemented")
}
func (*UnimplementedRPCAuthServer) AuthExportLoginToken(ctx context.Context, req *TLAuthExportLoginToken) (*Auth_LoginToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthExportLoginToken not implemented")
}
func (*UnimplementedRPCAuthServer) AuthImportLoginToken(ctx context.Context, req *TLAuthImportLoginToken) (*Auth_LoginToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthImportLoginToken not implemented")
}
func (*UnimplementedRPCAuthServer) AuthAcceptLoginToken(ctx context.Context, req *TLAuthAcceptLoginToken) (*Authorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthAcceptLoginToken not implemented")
}

func RegisterRPCAuthServer(s *grpc.Server, srv RPCAuthServer) {
	s.RegisterService(&_RPCAuth_serviceDesc, srv)
}

func _RPCAuth_AuthCheckPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthCheckPhone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthCheckPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuth/AuthCheckPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthCheckPhone(ctx, req.(*TLAuthCheckPhone))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthSendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthSendCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthSendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuth/AuthSendCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthSendCode(ctx, req.(*TLAuthSendCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthSignUp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuth/AuthSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthSignUp(ctx, req.(*TLAuthSignUp))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthSignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthSignIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthSignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuth/AuthSignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthSignIn(ctx, req.(*TLAuthSignIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthLogOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthLogOut)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthLogOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuth/AuthLogOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthLogOut(ctx, req.(*TLAuthLogOut))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthResetAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthResetAuthorizations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthResetAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuth/AuthResetAuthorizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthResetAuthorizations(ctx, req.(*TLAuthResetAuthorizations))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthSendInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthSendInvites)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthSendInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuth/AuthSendInvites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthSendInvites(ctx, req.(*TLAuthSendInvites))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthExportAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthExportAuthorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthExportAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuth/AuthExportAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthExportAuthorization(ctx, req.(*TLAuthExportAuthorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthImportAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthImportAuthorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthImportAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuth/AuthImportAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthImportAuthorization(ctx, req.(*TLAuthImportAuthorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthBindTempAuthKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthBindTempAuthKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthBindTempAuthKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuth/AuthBindTempAuthKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthBindTempAuthKey(ctx, req.(*TLAuthBindTempAuthKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthImportBotAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthImportBotAuthorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthImportBotAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuth/AuthImportBotAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthImportBotAuthorization(ctx, req.(*TLAuthImportBotAuthorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthCheckPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthCheckPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthCheckPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuth/AuthCheckPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthCheckPassword(ctx, req.(*TLAuthCheckPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthRequestPasswordRecovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthRequestPasswordRecovery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthRequestPasswordRecovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuth/AuthRequestPasswordRecovery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthRequestPasswordRecovery(ctx, req.(*TLAuthRequestPasswordRecovery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthRecoverPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthRecoverPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthRecoverPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuth/AuthRecoverPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthRecoverPassword(ctx, req.(*TLAuthRecoverPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthResendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthResendCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthResendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuth/AuthResendCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthResendCode(ctx, req.(*TLAuthResendCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthCancelCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthCancelCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthCancelCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuth/AuthCancelCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthCancelCode(ctx, req.(*TLAuthCancelCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthDropTempAuthKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthDropTempAuthKeys)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthDropTempAuthKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuth/AuthDropTempAuthKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthDropTempAuthKeys(ctx, req.(*TLAuthDropTempAuthKeys))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthCheckInviteCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthCheckInviteCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthCheckInviteCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuth/AuthCheckInviteCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthCheckInviteCode(ctx, req.(*TLAuthCheckInviteCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthSendCode73_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthSendCode73)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthSendCode73(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuth/AuthSendCode73",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthSendCode73(ctx, req.(*TLAuthSendCode73))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthSendCode82_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthSendCode73)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthSendCode82(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuth/AuthSendCode82",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthSendCode82(ctx, req.(*TLAuthSendCode73))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthSendCode114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthSendCode114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthSendCode114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuth/AuthSendCode114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthSendCode114(ctx, req.(*TLAuthSendCode114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthSignUp114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthSignUp114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthSignUp114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuth/AuthSignUp114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthSignUp114(ctx, req.(*TLAuthSignUp114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthCheckPassword114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthCheckPassword114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthCheckPassword114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuth/AuthCheckPassword114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthCheckPassword114(ctx, req.(*TLAuthCheckPassword114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthExportLoginToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthExportLoginToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthExportLoginToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuth/AuthExportLoginToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthExportLoginToken(ctx, req.(*TLAuthExportLoginToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthImportLoginToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthImportLoginToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthImportLoginToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuth/AuthImportLoginToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthImportLoginToken(ctx, req.(*TLAuthImportLoginToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAuth_AuthAcceptLoginToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAuthAcceptLoginToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAuthServer).AuthAcceptLoginToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAuth/AuthAcceptLoginToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAuthServer).AuthAcceptLoginToken(ctx, req.(*TLAuthAcceptLoginToken))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCAuth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCAuth",
	HandlerType: (*RPCAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "auth_checkPhone",
			Handler:    _RPCAuth_AuthCheckPhone_Handler,
		},
		{
			MethodName: "auth_sendCode",
			Handler:    _RPCAuth_AuthSendCode_Handler,
		},
		{
			MethodName: "auth_signUp",
			Handler:    _RPCAuth_AuthSignUp_Handler,
		},
		{
			MethodName: "auth_signIn",
			Handler:    _RPCAuth_AuthSignIn_Handler,
		},
		{
			MethodName: "auth_logOut",
			Handler:    _RPCAuth_AuthLogOut_Handler,
		},
		{
			MethodName: "auth_resetAuthorizations",
			Handler:    _RPCAuth_AuthResetAuthorizations_Handler,
		},
		{
			MethodName: "auth_sendInvites",
			Handler:    _RPCAuth_AuthSendInvites_Handler,
		},
		{
			MethodName: "auth_exportAuthorization",
			Handler:    _RPCAuth_AuthExportAuthorization_Handler,
		},
		{
			MethodName: "auth_importAuthorization",
			Handler:    _RPCAuth_AuthImportAuthorization_Handler,
		},
		{
			MethodName: "auth_bindTempAuthKey",
			Handler:    _RPCAuth_AuthBindTempAuthKey_Handler,
		},
		{
			MethodName: "auth_importBotAuthorization",
			Handler:    _RPCAuth_AuthImportBotAuthorization_Handler,
		},
		{
			MethodName: "auth_checkPassword",
			Handler:    _RPCAuth_AuthCheckPassword_Handler,
		},
		{
			MethodName: "auth_requestPasswordRecovery",
			Handler:    _RPCAuth_AuthRequestPasswordRecovery_Handler,
		},
		{
			MethodName: "auth_recoverPassword",
			Handler:    _RPCAuth_AuthRecoverPassword_Handler,
		},
		{
			MethodName: "auth_resendCode",
			Handler:    _RPCAuth_AuthResendCode_Handler,
		},
		{
			MethodName: "auth_cancelCode",
			Handler:    _RPCAuth_AuthCancelCode_Handler,
		},
		{
			MethodName: "auth_dropTempAuthKeys",
			Handler:    _RPCAuth_AuthDropTempAuthKeys_Handler,
		},
		{
			MethodName: "auth_checkInviteCode",
			Handler:    _RPCAuth_AuthCheckInviteCode_Handler,
		},
		{
			MethodName: "auth_sendCode73",
			Handler:    _RPCAuth_AuthSendCode73_Handler,
		},
		{
			MethodName: "auth_sendCode82",
			Handler:    _RPCAuth_AuthSendCode82_Handler,
		},
		{
			MethodName: "auth_sendCode114",
			Handler:    _RPCAuth_AuthSendCode114_Handler,
		},
		{
			MethodName: "auth_signUp114",
			Handler:    _RPCAuth_AuthSignUp114_Handler,
		},
		{
			MethodName: "auth_checkPassword114",
			Handler:    _RPCAuth_AuthCheckPassword114_Handler,
		},
		{
			MethodName: "auth_exportLoginToken",
			Handler:    _RPCAuth_AuthExportLoginToken_Handler,
		},
		{
			MethodName: "auth_importLoginToken",
			Handler:    _RPCAuth_AuthImportLoginToken_Handler,
		},
		{
			MethodName: "auth_acceptLoginToken",
			Handler:    _RPCAuth_AuthAcceptLoginToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

// RPCAccountClient is the client API for RPCAccount service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCAccountClient interface {
	// account.registerDevice#637ea878 token_type:int token:string = Bool;
	AccountRegisterDevice(ctx context.Context, in *TLAccountRegisterDevice, opts ...grpc.CallOption) (*Bool, error)
	// account.unregisterDevice#65c55b40 token_type:int token:string = Bool;
	AccountUnregisterDevice(ctx context.Context, in *TLAccountUnregisterDevice, opts ...grpc.CallOption) (*Bool, error)
	// account.updateNotifySettings#84be5b93 peer:InputNotifyPeer settings:InputPeerNotifySettings = Bool;
	AccountUpdateNotifySettings(ctx context.Context, in *TLAccountUpdateNotifySettings, opts ...grpc.CallOption) (*Bool, error)
	// account.getNotifySettings#12b3ad31 peer:InputNotifyPeer = PeerNotifySettings;
	AccountGetNotifySettings(ctx context.Context, in *TLAccountGetNotifySettings, opts ...grpc.CallOption) (*PeerNotifySettings, error)
	// account.resetNotifySettings#db7e1747 = Bool;
	AccountResetNotifySettings(ctx context.Context, in *TLAccountResetNotifySettings, opts ...grpc.CallOption) (*Bool, error)
	// account.updateProfile#78515775 flags:# first_name:flags.0?string last_name:flags.1?string about:flags.2?string = User;
	AccountUpdateProfile(ctx context.Context, in *TLAccountUpdateProfile, opts ...grpc.CallOption) (*User, error)
	// account.updateStatus#6628562c offline:Bool = Bool;
	AccountUpdateStatus(ctx context.Context, in *TLAccountUpdateStatus, opts ...grpc.CallOption) (*Bool, error)
	// account.getWallPapers#c04cfac2 = Vector<WallPaper>;
	AccountGetWallPapers(ctx context.Context, in *TLAccountGetWallPapers, opts ...grpc.CallOption) (*Vector_WallPaper, error)
	// account.reportPeer#ae189d5f peer:InputPeer reason:ReportReason = Bool;
	AccountReportPeer(ctx context.Context, in *TLAccountReportPeer, opts ...grpc.CallOption) (*Bool, error)
	// account.checkUsername#2714d86c username:string = Bool;
	AccountCheckUsername(ctx context.Context, in *TLAccountCheckUsername, opts ...grpc.CallOption) (*Bool, error)
	// account.updateUsername#3e0bdd7c username:string = User;
	AccountUpdateUsername(ctx context.Context, in *TLAccountUpdateUsername, opts ...grpc.CallOption) (*User, error)
	// account.getPrivacy#dadbc950 key:InputPrivacyKey = account.PrivacyRules;
	AccountGetPrivacy(ctx context.Context, in *TLAccountGetPrivacy, opts ...grpc.CallOption) (*Account_PrivacyRules, error)
	// account.setPrivacy#c9f81ce8 key:InputPrivacyKey rules:Vector<InputPrivacyRule> = account.PrivacyRules;
	AccountSetPrivacy(ctx context.Context, in *TLAccountSetPrivacy, opts ...grpc.CallOption) (*Account_PrivacyRules, error)
	// account.deleteAccount#418d4e0b reason:string = Bool;
	AccountDeleteAccount(ctx context.Context, in *TLAccountDeleteAccount, opts ...grpc.CallOption) (*Bool, error)
	// account.getAccountTTL#8fc711d = AccountDaysTTL;
	AccountGetAccountTTL(ctx context.Context, in *TLAccountGetAccountTTL, opts ...grpc.CallOption) (*AccountDaysTTL, error)
	// account.setAccountTTL#2442485e ttl:AccountDaysTTL = Bool;
	AccountSetAccountTTL(ctx context.Context, in *TLAccountSetAccountTTL, opts ...grpc.CallOption) (*Bool, error)
	// account.sendChangePhoneCode#8e57deb flags:# allow_flashcall:flags.0?true phone_number:string current_number:flags.0?Bool = auth.SentCode;
	AccountSendChangePhoneCode(ctx context.Context, in *TLAccountSendChangePhoneCode, opts ...grpc.CallOption) (*Auth_SentCode, error)
	// account.changePhone#70c32edb phone_number:string phone_code_hash:string phone_code:string = User;
	AccountChangePhone(ctx context.Context, in *TLAccountChangePhone, opts ...grpc.CallOption) (*User, error)
	// account.updateDeviceLocked#38df3532 period:int = Bool;
	AccountUpdateDeviceLocked(ctx context.Context, in *TLAccountUpdateDeviceLocked, opts ...grpc.CallOption) (*Bool, error)
	// account.getAuthorizations#e320c158 = account.Authorizations;
	AccountGetAuthorizations(ctx context.Context, in *TLAccountGetAuthorizations, opts ...grpc.CallOption) (*Account_Authorizations, error)
	// account.resetAuthorization#df77f3bc hash:long = Bool;
	AccountResetAuthorization(ctx context.Context, in *TLAccountResetAuthorization, opts ...grpc.CallOption) (*Bool, error)
	// account.getPassword#548a30f5 = account.Password;
	AccountGetPassword(ctx context.Context, in *TLAccountGetPassword, opts ...grpc.CallOption) (*Account_Password, error)
	// account.getPasswordSettings#bc8d11bb current_password_hash:bytes = account.PasswordSettings;
	AccountGetPasswordSettings(ctx context.Context, in *TLAccountGetPasswordSettings, opts ...grpc.CallOption) (*Account_PasswordSettings, error)
	// account.updatePasswordSettings#fa7c4b86 current_password_hash:bytes new_settings:account.PasswordInputSettings = Bool;
	AccountUpdatePasswordSettings(ctx context.Context, in *TLAccountUpdatePasswordSettings, opts ...grpc.CallOption) (*Bool, error)
	// account.sendConfirmPhoneCode#1516d7bd flags:# allow_flashcall:flags.0?true hash:string current_number:flags.0?Bool = auth.SentCode;
	AccountSendConfirmPhoneCode(ctx context.Context, in *TLAccountSendConfirmPhoneCode, opts ...grpc.CallOption) (*Auth_SentCode, error)
	// account.confirmPhone#5f2178c3 phone_code_hash:string phone_code:string = Bool;
	AccountConfirmPhone(ctx context.Context, in *TLAccountConfirmPhone, opts ...grpc.CallOption) (*Bool, error)
	// account.getTmpPassword#4a82327e password_hash:bytes period:int = account.TmpPassword;
	AccountGetTmpPassword(ctx context.Context, in *TLAccountGetTmpPassword, opts ...grpc.CallOption) (*Account_TmpPassword, error)
	// account.registerDevice#446c712c token_type:int token:string device_model:string system_version:string app_version:string app_sandbox:Bool lang_code:string = Bool;
	AccountRegisterDevice73(ctx context.Context, in *TLAccountRegisterDevice73, opts ...grpc.CallOption) (*Bool, error)
	// account.registerDevice#68976c6f flags:# no_muted:flags.0?true token_type:int token:string app_sandbox:Bool secret:bytes other_uids:Vector<int> = Bool;
	AccountRegisterDevice114(ctx context.Context, in *TLAccountRegisterDevice114, opts ...grpc.CallOption) (*Bool, error)
	// account.unregisterDevice#3076c4bf token_type:int token:string other_uids:Vector<int> = Bool;
	AccountUnregisterDevice114(ctx context.Context, in *TLAccountUnregisterDevice114, opts ...grpc.CallOption) (*Bool, error)
	// account.getWallPapers#aabb1763 hash:int = account.WallPapers;
	AccountGetWallPapers114(ctx context.Context, in *TLAccountGetWallPapers114, opts ...grpc.CallOption) (*Account_WallPapers, error)
	// account.sendChangePhoneCode#82574ae5 phone_number:string settings:CodeSettings = auth.SentCode;
	AccountSendChangePhoneCode114(ctx context.Context, in *TLAccountSendChangePhoneCode114, opts ...grpc.CallOption) (*Auth_SentCode, error)
	// account.getPasswordSettings#9cd4eaf9 password:InputCheckPasswordSRP = account.PasswordSettings;
	AccountGetPasswordSettings114(ctx context.Context, in *TLAccountGetPasswordSettings114, opts ...grpc.CallOption) (*Account_PasswordSettings, error)
	// account.updatePasswordSettings#a59b102f password:InputCheckPasswordSRP new_settings:account.PasswordInputSettings = Bool;
	AccountUpdatePasswordSettings114(ctx context.Context, in *TLAccountUpdatePasswordSettings114, opts ...grpc.CallOption) (*Bool, error)
	// account.sendConfirmPhoneCode#1b3faa88 hash:string settings:CodeSettings = auth.SentCode;
	AccountSendConfirmPhoneCode114(ctx context.Context, in *TLAccountSendConfirmPhoneCode114, opts ...grpc.CallOption) (*Auth_SentCode, error)
	// account.getTmpPassword#449e0b51 password:InputCheckPasswordSRP period:int = account.TmpPassword;
	AccountGetTmpPassword114(ctx context.Context, in *TLAccountGetTmpPassword114, opts ...grpc.CallOption) (*Account_TmpPassword, error)
	// account.getWebAuthorizations#182e6d6f = account.WebAuthorizations;
	AccountGetWebAuthorizations(ctx context.Context, in *TLAccountGetWebAuthorizations, opts ...grpc.CallOption) (*Account_WebAuthorizations, error)
	// account.resetWebAuthorization#2d01b9ef hash:long = Bool;
	AccountResetWebAuthorization(ctx context.Context, in *TLAccountResetWebAuthorization, opts ...grpc.CallOption) (*Bool, error)
	// account.resetWebAuthorizations#682d2594 = Bool;
	AccountResetWebAuthorizations(ctx context.Context, in *TLAccountResetWebAuthorizations, opts ...grpc.CallOption) (*Bool, error)
	// account.getAllSecureValues#b288bc7d = Vector<SecureValue>;
	AccountGetAllSecureValues(ctx context.Context, in *TLAccountGetAllSecureValues, opts ...grpc.CallOption) (*Vector_SecureValue, error)
	// account.getSecureValue#73665bc2 types:Vector<SecureValueType> = Vector<SecureValue>;
	AccountGetSecureValue(ctx context.Context, in *TLAccountGetSecureValue, opts ...grpc.CallOption) (*Vector_SecureValue, error)
	// account.saveSecureValue#899fe31d value:InputSecureValue secure_secret_id:long = SecureValue;
	AccountSaveSecureValue(ctx context.Context, in *TLAccountSaveSecureValue, opts ...grpc.CallOption) (*SecureValue, error)
	// account.deleteSecureValue#b880bc4b types:Vector<SecureValueType> = Bool;
	AccountDeleteSecureValue(ctx context.Context, in *TLAccountDeleteSecureValue, opts ...grpc.CallOption) (*Bool, error)
	// account.getAuthorizationForm#b86ba8e1 bot_id:int scope:string public_key:string = account.AuthorizationForm;
	AccountGetAuthorizationForm(ctx context.Context, in *TLAccountGetAuthorizationForm, opts ...grpc.CallOption) (*Account_AuthorizationForm, error)
	// account.acceptAuthorization#e7027c94 bot_id:int scope:string public_key:string value_hashes:Vector<SecureValueHash> credentials:SecureCredentialsEncrypted = Bool;
	AccountAcceptAuthorization(ctx context.Context, in *TLAccountAcceptAuthorization, opts ...grpc.CallOption) (*Bool, error)
	// account.sendVerifyPhoneCode#a5a356f9 phone_number:string settings:CodeSettings = auth.SentCode;
	AccountSendVerifyPhoneCode(ctx context.Context, in *TLAccountSendVerifyPhoneCode, opts ...grpc.CallOption) (*Auth_SentCode, error)
	// account.verifyPhone#4dd3a7f6 phone_number:string phone_code_hash:string phone_code:string = Bool;
	AccountVerifyPhone(ctx context.Context, in *TLAccountVerifyPhone, opts ...grpc.CallOption) (*Bool, error)
	// account.sendVerifyEmailCode#7011509f email:string = account.SentEmailCode;
	AccountSendVerifyEmailCode(ctx context.Context, in *TLAccountSendVerifyEmailCode, opts ...grpc.CallOption) (*Account_SentEmailCode, error)
	// account.verifyEmail#ecba39db email:string code:string = Bool;
	AccountVerifyEmail(ctx context.Context, in *TLAccountVerifyEmail, opts ...grpc.CallOption) (*Bool, error)
	// account.initTakeoutSession#f05b4804 flags:# contacts:flags.0?true message_users:flags.1?true message_chats:flags.2?true message_megagroups:flags.3?true message_channels:flags.4?true files:flags.5?true file_max_size:flags.5?int = account.Takeout;
	AccountInitTakeoutSession(ctx context.Context, in *TLAccountInitTakeoutSession, opts ...grpc.CallOption) (*Account_Takeout, error)
	// account.finishTakeoutSession#1d2652ee flags:# success:flags.0?true = Bool;
	AccountFinishTakeoutSession(ctx context.Context, in *TLAccountFinishTakeoutSession, opts ...grpc.CallOption) (*Bool, error)
	// account.confirmPasswordEmail#8fdf1920 code:string = Bool;
	AccountConfirmPasswordEmail(ctx context.Context, in *TLAccountConfirmPasswordEmail, opts ...grpc.CallOption) (*Bool, error)
	// account.resendPasswordEmail#7a7f2a15 = Bool;
	AccountResendPasswordEmail(ctx context.Context, in *TLAccountResendPasswordEmail, opts ...grpc.CallOption) (*Bool, error)
	// account.cancelPasswordEmail#c1cbd5b6 = Bool;
	AccountCancelPasswordEmail(ctx context.Context, in *TLAccountCancelPasswordEmail, opts ...grpc.CallOption) (*Bool, error)
	// account.getContactSignUpNotification#9f07c728 = Bool;
	AccountGetContactSignUpNotification(ctx context.Context, in *TLAccountGetContactSignUpNotification, opts ...grpc.CallOption) (*Bool, error)
	// account.setContactSignUpNotification#cff43f61 silent:Bool = Bool;
	AccountSetContactSignUpNotification(ctx context.Context, in *TLAccountSetContactSignUpNotification, opts ...grpc.CallOption) (*Bool, error)
	// account.getNotifyExceptions#53577479 flags:# compare_sound:flags.1?true peer:flags.0?InputNotifyPeer = Updates;
	AccountGetNotifyExceptions(ctx context.Context, in *TLAccountGetNotifyExceptions, opts ...grpc.CallOption) (*Updates, error)
	// account.getWallPaper#fc8ddbea wallpaper:InputWallPaper = WallPaper;
	AccountGetWallPaper(ctx context.Context, in *TLAccountGetWallPaper, opts ...grpc.CallOption) (*WallPaper, error)
	// account.uploadWallPaper#dd853661 file:InputFile mime_type:string settings:WallPaperSettings = WallPaper;
	AccountUploadWallPaper(ctx context.Context, in *TLAccountUploadWallPaper, opts ...grpc.CallOption) (*WallPaper, error)
	// account.saveWallPaper#6c5a5b37 wallpaper:InputWallPaper unsave:Bool settings:WallPaperSettings = Bool;
	AccountSaveWallPaper(ctx context.Context, in *TLAccountSaveWallPaper, opts ...grpc.CallOption) (*Bool, error)
	// account.installWallPaper#feed5769 wallpaper:InputWallPaper settings:WallPaperSettings = Bool;
	AccountInstallWallPaper(ctx context.Context, in *TLAccountInstallWallPaper, opts ...grpc.CallOption) (*Bool, error)
	// account.resetWallPapers#bb3b9804 = Bool;
	AccountResetWallPapers(ctx context.Context, in *TLAccountResetWallPapers, opts ...grpc.CallOption) (*Bool, error)
	// account.getAutoDownloadSettings#56da0b3f = account.AutoDownloadSettings;
	AccountGetAutoDownloadSettings(ctx context.Context, in *TLAccountGetAutoDownloadSettings, opts ...grpc.CallOption) (*Account_AutoDownloadSettings, error)
	// account.saveAutoDownloadSettings#76f36233 flags:# low:flags.0?true high:flags.1?true settings:AutoDownloadSettings = Bool;
	AccountSaveAutoDownloadSettings(ctx context.Context, in *TLAccountSaveAutoDownloadSettings, opts ...grpc.CallOption) (*Bool, error)
	// account.uploadTheme#1c3db333 flags:# file:InputFile thumb:flags.0?InputFile file_name:string mime_type:string = Document;
	AccountUploadTheme(ctx context.Context, in *TLAccountUploadTheme, opts ...grpc.CallOption) (*Document, error)
	// account.createTheme#8432c21f flags:# slug:string title:string document:flags.2?InputDocument settings:flags.3?InputThemeSettings = Theme;
	AccountCreateTheme(ctx context.Context, in *TLAccountCreateTheme, opts ...grpc.CallOption) (*Theme, error)
	// account.updateTheme#5cb367d5 flags:# format:string theme:InputTheme slug:flags.0?string title:flags.1?string document:flags.2?InputDocument settings:flags.3?InputThemeSettings = Theme;
	AccountUpdateTheme(ctx context.Context, in *TLAccountUpdateTheme, opts ...grpc.CallOption) (*Theme, error)
	// account.saveTheme#f257106c theme:InputTheme unsave:Bool = Bool;
	AccountSaveTheme(ctx context.Context, in *TLAccountSaveTheme, opts ...grpc.CallOption) (*Bool, error)
	// account.installTheme#7ae43737 flags:# dark:flags.0?true format:flags.1?string theme:flags.1?InputTheme = Bool;
	AccountInstallTheme(ctx context.Context, in *TLAccountInstallTheme, opts ...grpc.CallOption) (*Bool, error)
	// account.getTheme#8d9d742b format:string theme:InputTheme document_id:long = Theme;
	AccountGetTheme(ctx context.Context, in *TLAccountGetTheme, opts ...grpc.CallOption) (*Theme, error)
	// account.getThemes#285946f8 format:string hash:int = account.Themes;
	AccountGetThemes(ctx context.Context, in *TLAccountGetThemes, opts ...grpc.CallOption) (*Account_Themes, error)
	// account.setContentSettings#b574b16b flags:# sensitive_enabled:flags.0?true = Bool;
	AccountSetContentSettings(ctx context.Context, in *TLAccountSetContentSettings, opts ...grpc.CallOption) (*Bool, error)
	// account.getContentSettings#8b9b4dae = account.ContentSettings;
	AccountGetContentSettings(ctx context.Context, in *TLAccountGetContentSettings, opts ...grpc.CallOption) (*Account_ContentSettings, error)
	// account.getMultiWallPapers#65ad71dc wallpapers:Vector<InputWallPaper> = Vector<WallPaper>;
	AccountGetMultiWallPapers(ctx context.Context, in *TLAccountGetMultiWallPapers, opts ...grpc.CallOption) (*Vector_WallPaper, error)
	// account.getGlobalPrivacySettings#eb2b4cf6 = GlobalPrivacySettings;
	AccountGetGlobalPrivacySettings(ctx context.Context, in *TLAccountGetGlobalPrivacySettings, opts ...grpc.CallOption) (*GlobalPrivacySettings, error)
	// account.setGlobalPrivacySettings#1edaaac2 settings:GlobalPrivacySettings = GlobalPrivacySettings;
	AccountSetGlobalPrivacySettings(ctx context.Context, in *TLAccountSetGlobalPrivacySettings, opts ...grpc.CallOption) (*GlobalPrivacySettings, error)
}

type rPCAccountClient struct {
	cc *grpc.ClientConn
}

func NewRPCAccountClient(cc *grpc.ClientConn) RPCAccountClient {
	return &rPCAccountClient{cc}
}

func (c *rPCAccountClient) AccountRegisterDevice(ctx context.Context, in *TLAccountRegisterDevice, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_registerDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountUnregisterDevice(ctx context.Context, in *TLAccountUnregisterDevice, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_unregisterDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountUpdateNotifySettings(ctx context.Context, in *TLAccountUpdateNotifySettings, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_updateNotifySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountGetNotifySettings(ctx context.Context, in *TLAccountGetNotifySettings, opts ...grpc.CallOption) (*PeerNotifySettings, error) {
	out := new(PeerNotifySettings)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_getNotifySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountResetNotifySettings(ctx context.Context, in *TLAccountResetNotifySettings, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_resetNotifySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountUpdateProfile(ctx context.Context, in *TLAccountUpdateProfile, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_updateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountUpdateStatus(ctx context.Context, in *TLAccountUpdateStatus, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_updateStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountGetWallPapers(ctx context.Context, in *TLAccountGetWallPapers, opts ...grpc.CallOption) (*Vector_WallPaper, error) {
	out := new(Vector_WallPaper)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_getWallPapers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountReportPeer(ctx context.Context, in *TLAccountReportPeer, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_reportPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountCheckUsername(ctx context.Context, in *TLAccountCheckUsername, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_checkUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountUpdateUsername(ctx context.Context, in *TLAccountUpdateUsername, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_updateUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountGetPrivacy(ctx context.Context, in *TLAccountGetPrivacy, opts ...grpc.CallOption) (*Account_PrivacyRules, error) {
	out := new(Account_PrivacyRules)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_getPrivacy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountSetPrivacy(ctx context.Context, in *TLAccountSetPrivacy, opts ...grpc.CallOption) (*Account_PrivacyRules, error) {
	out := new(Account_PrivacyRules)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_setPrivacy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountDeleteAccount(ctx context.Context, in *TLAccountDeleteAccount, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_deleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountGetAccountTTL(ctx context.Context, in *TLAccountGetAccountTTL, opts ...grpc.CallOption) (*AccountDaysTTL, error) {
	out := new(AccountDaysTTL)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_getAccountTTL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountSetAccountTTL(ctx context.Context, in *TLAccountSetAccountTTL, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_setAccountTTL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountSendChangePhoneCode(ctx context.Context, in *TLAccountSendChangePhoneCode, opts ...grpc.CallOption) (*Auth_SentCode, error) {
	out := new(Auth_SentCode)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_sendChangePhoneCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountChangePhone(ctx context.Context, in *TLAccountChangePhone, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_changePhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountUpdateDeviceLocked(ctx context.Context, in *TLAccountUpdateDeviceLocked, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_updateDeviceLocked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountGetAuthorizations(ctx context.Context, in *TLAccountGetAuthorizations, opts ...grpc.CallOption) (*Account_Authorizations, error) {
	out := new(Account_Authorizations)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_getAuthorizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountResetAuthorization(ctx context.Context, in *TLAccountResetAuthorization, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_resetAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountGetPassword(ctx context.Context, in *TLAccountGetPassword, opts ...grpc.CallOption) (*Account_Password, error) {
	out := new(Account_Password)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_getPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountGetPasswordSettings(ctx context.Context, in *TLAccountGetPasswordSettings, opts ...grpc.CallOption) (*Account_PasswordSettings, error) {
	out := new(Account_PasswordSettings)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_getPasswordSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountUpdatePasswordSettings(ctx context.Context, in *TLAccountUpdatePasswordSettings, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_updatePasswordSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountSendConfirmPhoneCode(ctx context.Context, in *TLAccountSendConfirmPhoneCode, opts ...grpc.CallOption) (*Auth_SentCode, error) {
	out := new(Auth_SentCode)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_sendConfirmPhoneCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountConfirmPhone(ctx context.Context, in *TLAccountConfirmPhone, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_confirmPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountGetTmpPassword(ctx context.Context, in *TLAccountGetTmpPassword, opts ...grpc.CallOption) (*Account_TmpPassword, error) {
	out := new(Account_TmpPassword)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_getTmpPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountRegisterDevice73(ctx context.Context, in *TLAccountRegisterDevice73, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_registerDevice73", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountRegisterDevice114(ctx context.Context, in *TLAccountRegisterDevice114, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_registerDevice114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountUnregisterDevice114(ctx context.Context, in *TLAccountUnregisterDevice114, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_unregisterDevice114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountGetWallPapers114(ctx context.Context, in *TLAccountGetWallPapers114, opts ...grpc.CallOption) (*Account_WallPapers, error) {
	out := new(Account_WallPapers)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_getWallPapers114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountSendChangePhoneCode114(ctx context.Context, in *TLAccountSendChangePhoneCode114, opts ...grpc.CallOption) (*Auth_SentCode, error) {
	out := new(Auth_SentCode)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_sendChangePhoneCode114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountGetPasswordSettings114(ctx context.Context, in *TLAccountGetPasswordSettings114, opts ...grpc.CallOption) (*Account_PasswordSettings, error) {
	out := new(Account_PasswordSettings)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_getPasswordSettings114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountUpdatePasswordSettings114(ctx context.Context, in *TLAccountUpdatePasswordSettings114, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_updatePasswordSettings114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountSendConfirmPhoneCode114(ctx context.Context, in *TLAccountSendConfirmPhoneCode114, opts ...grpc.CallOption) (*Auth_SentCode, error) {
	out := new(Auth_SentCode)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_sendConfirmPhoneCode114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountGetTmpPassword114(ctx context.Context, in *TLAccountGetTmpPassword114, opts ...grpc.CallOption) (*Account_TmpPassword, error) {
	out := new(Account_TmpPassword)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_getTmpPassword114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountGetWebAuthorizations(ctx context.Context, in *TLAccountGetWebAuthorizations, opts ...grpc.CallOption) (*Account_WebAuthorizations, error) {
	out := new(Account_WebAuthorizations)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_getWebAuthorizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountResetWebAuthorization(ctx context.Context, in *TLAccountResetWebAuthorization, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_resetWebAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountResetWebAuthorizations(ctx context.Context, in *TLAccountResetWebAuthorizations, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_resetWebAuthorizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountGetAllSecureValues(ctx context.Context, in *TLAccountGetAllSecureValues, opts ...grpc.CallOption) (*Vector_SecureValue, error) {
	out := new(Vector_SecureValue)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_getAllSecureValues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountGetSecureValue(ctx context.Context, in *TLAccountGetSecureValue, opts ...grpc.CallOption) (*Vector_SecureValue, error) {
	out := new(Vector_SecureValue)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_getSecureValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountSaveSecureValue(ctx context.Context, in *TLAccountSaveSecureValue, opts ...grpc.CallOption) (*SecureValue, error) {
	out := new(SecureValue)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_saveSecureValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountDeleteSecureValue(ctx context.Context, in *TLAccountDeleteSecureValue, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_deleteSecureValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountGetAuthorizationForm(ctx context.Context, in *TLAccountGetAuthorizationForm, opts ...grpc.CallOption) (*Account_AuthorizationForm, error) {
	out := new(Account_AuthorizationForm)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_getAuthorizationForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountAcceptAuthorization(ctx context.Context, in *TLAccountAcceptAuthorization, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_acceptAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountSendVerifyPhoneCode(ctx context.Context, in *TLAccountSendVerifyPhoneCode, opts ...grpc.CallOption) (*Auth_SentCode, error) {
	out := new(Auth_SentCode)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_sendVerifyPhoneCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountVerifyPhone(ctx context.Context, in *TLAccountVerifyPhone, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_verifyPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountSendVerifyEmailCode(ctx context.Context, in *TLAccountSendVerifyEmailCode, opts ...grpc.CallOption) (*Account_SentEmailCode, error) {
	out := new(Account_SentEmailCode)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_sendVerifyEmailCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountVerifyEmail(ctx context.Context, in *TLAccountVerifyEmail, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_verifyEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountInitTakeoutSession(ctx context.Context, in *TLAccountInitTakeoutSession, opts ...grpc.CallOption) (*Account_Takeout, error) {
	out := new(Account_Takeout)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_initTakeoutSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountFinishTakeoutSession(ctx context.Context, in *TLAccountFinishTakeoutSession, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_finishTakeoutSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountConfirmPasswordEmail(ctx context.Context, in *TLAccountConfirmPasswordEmail, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_confirmPasswordEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountResendPasswordEmail(ctx context.Context, in *TLAccountResendPasswordEmail, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_resendPasswordEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountCancelPasswordEmail(ctx context.Context, in *TLAccountCancelPasswordEmail, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_cancelPasswordEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountGetContactSignUpNotification(ctx context.Context, in *TLAccountGetContactSignUpNotification, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_getContactSignUpNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountSetContactSignUpNotification(ctx context.Context, in *TLAccountSetContactSignUpNotification, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_setContactSignUpNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountGetNotifyExceptions(ctx context.Context, in *TLAccountGetNotifyExceptions, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_getNotifyExceptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountGetWallPaper(ctx context.Context, in *TLAccountGetWallPaper, opts ...grpc.CallOption) (*WallPaper, error) {
	out := new(WallPaper)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_getWallPaper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountUploadWallPaper(ctx context.Context, in *TLAccountUploadWallPaper, opts ...grpc.CallOption) (*WallPaper, error) {
	out := new(WallPaper)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_uploadWallPaper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountSaveWallPaper(ctx context.Context, in *TLAccountSaveWallPaper, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_saveWallPaper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountInstallWallPaper(ctx context.Context, in *TLAccountInstallWallPaper, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_installWallPaper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountResetWallPapers(ctx context.Context, in *TLAccountResetWallPapers, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_resetWallPapers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountGetAutoDownloadSettings(ctx context.Context, in *TLAccountGetAutoDownloadSettings, opts ...grpc.CallOption) (*Account_AutoDownloadSettings, error) {
	out := new(Account_AutoDownloadSettings)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_getAutoDownloadSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountSaveAutoDownloadSettings(ctx context.Context, in *TLAccountSaveAutoDownloadSettings, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_saveAutoDownloadSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountUploadTheme(ctx context.Context, in *TLAccountUploadTheme, opts ...grpc.CallOption) (*Document, error) {
	out := new(Document)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_uploadTheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountCreateTheme(ctx context.Context, in *TLAccountCreateTheme, opts ...grpc.CallOption) (*Theme, error) {
	out := new(Theme)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_createTheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountUpdateTheme(ctx context.Context, in *TLAccountUpdateTheme, opts ...grpc.CallOption) (*Theme, error) {
	out := new(Theme)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_updateTheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountSaveTheme(ctx context.Context, in *TLAccountSaveTheme, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_saveTheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountInstallTheme(ctx context.Context, in *TLAccountInstallTheme, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_installTheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountGetTheme(ctx context.Context, in *TLAccountGetTheme, opts ...grpc.CallOption) (*Theme, error) {
	out := new(Theme)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_getTheme", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountGetThemes(ctx context.Context, in *TLAccountGetThemes, opts ...grpc.CallOption) (*Account_Themes, error) {
	out := new(Account_Themes)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_getThemes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountSetContentSettings(ctx context.Context, in *TLAccountSetContentSettings, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_setContentSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountGetContentSettings(ctx context.Context, in *TLAccountGetContentSettings, opts ...grpc.CallOption) (*Account_ContentSettings, error) {
	out := new(Account_ContentSettings)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_getContentSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountGetMultiWallPapers(ctx context.Context, in *TLAccountGetMultiWallPapers, opts ...grpc.CallOption) (*Vector_WallPaper, error) {
	out := new(Vector_WallPaper)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_getMultiWallPapers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountGetGlobalPrivacySettings(ctx context.Context, in *TLAccountGetGlobalPrivacySettings, opts ...grpc.CallOption) (*GlobalPrivacySettings, error) {
	out := new(GlobalPrivacySettings)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_getGlobalPrivacySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCAccountClient) AccountSetGlobalPrivacySettings(ctx context.Context, in *TLAccountSetGlobalPrivacySettings, opts ...grpc.CallOption) (*GlobalPrivacySettings, error) {
	out := new(GlobalPrivacySettings)
	err := c.cc.Invoke(ctx, "/mtproto.RPCAccount/account_setGlobalPrivacySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCAccountServer is the server API for RPCAccount service.
type RPCAccountServer interface {
	// account.registerDevice#637ea878 token_type:int token:string = Bool;
	AccountRegisterDevice(context.Context, *TLAccountRegisterDevice) (*Bool, error)
	// account.unregisterDevice#65c55b40 token_type:int token:string = Bool;
	AccountUnregisterDevice(context.Context, *TLAccountUnregisterDevice) (*Bool, error)
	// account.updateNotifySettings#84be5b93 peer:InputNotifyPeer settings:InputPeerNotifySettings = Bool;
	AccountUpdateNotifySettings(context.Context, *TLAccountUpdateNotifySettings) (*Bool, error)
	// account.getNotifySettings#12b3ad31 peer:InputNotifyPeer = PeerNotifySettings;
	AccountGetNotifySettings(context.Context, *TLAccountGetNotifySettings) (*PeerNotifySettings, error)
	// account.resetNotifySettings#db7e1747 = Bool;
	AccountResetNotifySettings(context.Context, *TLAccountResetNotifySettings) (*Bool, error)
	// account.updateProfile#78515775 flags:# first_name:flags.0?string last_name:flags.1?string about:flags.2?string = User;
	AccountUpdateProfile(context.Context, *TLAccountUpdateProfile) (*User, error)
	// account.updateStatus#6628562c offline:Bool = Bool;
	AccountUpdateStatus(context.Context, *TLAccountUpdateStatus) (*Bool, error)
	// account.getWallPapers#c04cfac2 = Vector<WallPaper>;
	AccountGetWallPapers(context.Context, *TLAccountGetWallPapers) (*Vector_WallPaper, error)
	// account.reportPeer#ae189d5f peer:InputPeer reason:ReportReason = Bool;
	AccountReportPeer(context.Context, *TLAccountReportPeer) (*Bool, error)
	// account.checkUsername#2714d86c username:string = Bool;
	AccountCheckUsername(context.Context, *TLAccountCheckUsername) (*Bool, error)
	// account.updateUsername#3e0bdd7c username:string = User;
	AccountUpdateUsername(context.Context, *TLAccountUpdateUsername) (*User, error)
	// account.getPrivacy#dadbc950 key:InputPrivacyKey = account.PrivacyRules;
	AccountGetPrivacy(context.Context, *TLAccountGetPrivacy) (*Account_PrivacyRules, error)
	// account.setPrivacy#c9f81ce8 key:InputPrivacyKey rules:Vector<InputPrivacyRule> = account.PrivacyRules;
	AccountSetPrivacy(context.Context, *TLAccountSetPrivacy) (*Account_PrivacyRules, error)
	// account.deleteAccount#418d4e0b reason:string = Bool;
	AccountDeleteAccount(context.Context, *TLAccountDeleteAccount) (*Bool, error)
	// account.getAccountTTL#8fc711d = AccountDaysTTL;
	AccountGetAccountTTL(context.Context, *TLAccountGetAccountTTL) (*AccountDaysTTL, error)
	// account.setAccountTTL#2442485e ttl:AccountDaysTTL = Bool;
	AccountSetAccountTTL(context.Context, *TLAccountSetAccountTTL) (*Bool, error)
	// account.sendChangePhoneCode#8e57deb flags:# allow_flashcall:flags.0?true phone_number:string current_number:flags.0?Bool = auth.SentCode;
	AccountSendChangePhoneCode(context.Context, *TLAccountSendChangePhoneCode) (*Auth_SentCode, error)
	// account.changePhone#70c32edb phone_number:string phone_code_hash:string phone_code:string = User;
	AccountChangePhone(context.Context, *TLAccountChangePhone) (*User, error)
	// account.updateDeviceLocked#38df3532 period:int = Bool;
	AccountUpdateDeviceLocked(context.Context, *TLAccountUpdateDeviceLocked) (*Bool, error)
	// account.getAuthorizations#e320c158 = account.Authorizations;
	AccountGetAuthorizations(context.Context, *TLAccountGetAuthorizations) (*Account_Authorizations, error)
	// account.resetAuthorization#df77f3bc hash:long = Bool;
	AccountResetAuthorization(context.Context, *TLAccountResetAuthorization) (*Bool, error)
	// account.getPassword#548a30f5 = account.Password;
	AccountGetPassword(context.Context, *TLAccountGetPassword) (*Account_Password, error)
	// account.getPasswordSettings#bc8d11bb current_password_hash:bytes = account.PasswordSettings;
	AccountGetPasswordSettings(context.Context, *TLAccountGetPasswordSettings) (*Account_PasswordSettings, error)
	// account.updatePasswordSettings#fa7c4b86 current_password_hash:bytes new_settings:account.PasswordInputSettings = Bool;
	AccountUpdatePasswordSettings(context.Context, *TLAccountUpdatePasswordSettings) (*Bool, error)
	// account.sendConfirmPhoneCode#1516d7bd flags:# allow_flashcall:flags.0?true hash:string current_number:flags.0?Bool = auth.SentCode;
	AccountSendConfirmPhoneCode(context.Context, *TLAccountSendConfirmPhoneCode) (*Auth_SentCode, error)
	// account.confirmPhone#5f2178c3 phone_code_hash:string phone_code:string = Bool;
	AccountConfirmPhone(context.Context, *TLAccountConfirmPhone) (*Bool, error)
	// account.getTmpPassword#4a82327e password_hash:bytes period:int = account.TmpPassword;
	AccountGetTmpPassword(context.Context, *TLAccountGetTmpPassword) (*Account_TmpPassword, error)
	// account.registerDevice#446c712c token_type:int token:string device_model:string system_version:string app_version:string app_sandbox:Bool lang_code:string = Bool;
	AccountRegisterDevice73(context.Context, *TLAccountRegisterDevice73) (*Bool, error)
	// account.registerDevice#68976c6f flags:# no_muted:flags.0?true token_type:int token:string app_sandbox:Bool secret:bytes other_uids:Vector<int> = Bool;
	AccountRegisterDevice114(context.Context, *TLAccountRegisterDevice114) (*Bool, error)
	// account.unregisterDevice#3076c4bf token_type:int token:string other_uids:Vector<int> = Bool;
	AccountUnregisterDevice114(context.Context, *TLAccountUnregisterDevice114) (*Bool, error)
	// account.getWallPapers#aabb1763 hash:int = account.WallPapers;
	AccountGetWallPapers114(context.Context, *TLAccountGetWallPapers114) (*Account_WallPapers, error)
	// account.sendChangePhoneCode#82574ae5 phone_number:string settings:CodeSettings = auth.SentCode;
	AccountSendChangePhoneCode114(context.Context, *TLAccountSendChangePhoneCode114) (*Auth_SentCode, error)
	// account.getPasswordSettings#9cd4eaf9 password:InputCheckPasswordSRP = account.PasswordSettings;
	AccountGetPasswordSettings114(context.Context, *TLAccountGetPasswordSettings114) (*Account_PasswordSettings, error)
	// account.updatePasswordSettings#a59b102f password:InputCheckPasswordSRP new_settings:account.PasswordInputSettings = Bool;
	AccountUpdatePasswordSettings114(context.Context, *TLAccountUpdatePasswordSettings114) (*Bool, error)
	// account.sendConfirmPhoneCode#1b3faa88 hash:string settings:CodeSettings = auth.SentCode;
	AccountSendConfirmPhoneCode114(context.Context, *TLAccountSendConfirmPhoneCode114) (*Auth_SentCode, error)
	// account.getTmpPassword#449e0b51 password:InputCheckPasswordSRP period:int = account.TmpPassword;
	AccountGetTmpPassword114(context.Context, *TLAccountGetTmpPassword114) (*Account_TmpPassword, error)
	// account.getWebAuthorizations#182e6d6f = account.WebAuthorizations;
	AccountGetWebAuthorizations(context.Context, *TLAccountGetWebAuthorizations) (*Account_WebAuthorizations, error)
	// account.resetWebAuthorization#2d01b9ef hash:long = Bool;
	AccountResetWebAuthorization(context.Context, *TLAccountResetWebAuthorization) (*Bool, error)
	// account.resetWebAuthorizations#682d2594 = Bool;
	AccountResetWebAuthorizations(context.Context, *TLAccountResetWebAuthorizations) (*Bool, error)
	// account.getAllSecureValues#b288bc7d = Vector<SecureValue>;
	AccountGetAllSecureValues(context.Context, *TLAccountGetAllSecureValues) (*Vector_SecureValue, error)
	// account.getSecureValue#73665bc2 types:Vector<SecureValueType> = Vector<SecureValue>;
	AccountGetSecureValue(context.Context, *TLAccountGetSecureValue) (*Vector_SecureValue, error)
	// account.saveSecureValue#899fe31d value:InputSecureValue secure_secret_id:long = SecureValue;
	AccountSaveSecureValue(context.Context, *TLAccountSaveSecureValue) (*SecureValue, error)
	// account.deleteSecureValue#b880bc4b types:Vector<SecureValueType> = Bool;
	AccountDeleteSecureValue(context.Context, *TLAccountDeleteSecureValue) (*Bool, error)
	// account.getAuthorizationForm#b86ba8e1 bot_id:int scope:string public_key:string = account.AuthorizationForm;
	AccountGetAuthorizationForm(context.Context, *TLAccountGetAuthorizationForm) (*Account_AuthorizationForm, error)
	// account.acceptAuthorization#e7027c94 bot_id:int scope:string public_key:string value_hashes:Vector<SecureValueHash> credentials:SecureCredentialsEncrypted = Bool;
	AccountAcceptAuthorization(context.Context, *TLAccountAcceptAuthorization) (*Bool, error)
	// account.sendVerifyPhoneCode#a5a356f9 phone_number:string settings:CodeSettings = auth.SentCode;
	AccountSendVerifyPhoneCode(context.Context, *TLAccountSendVerifyPhoneCode) (*Auth_SentCode, error)
	// account.verifyPhone#4dd3a7f6 phone_number:string phone_code_hash:string phone_code:string = Bool;
	AccountVerifyPhone(context.Context, *TLAccountVerifyPhone) (*Bool, error)
	// account.sendVerifyEmailCode#7011509f email:string = account.SentEmailCode;
	AccountSendVerifyEmailCode(context.Context, *TLAccountSendVerifyEmailCode) (*Account_SentEmailCode, error)
	// account.verifyEmail#ecba39db email:string code:string = Bool;
	AccountVerifyEmail(context.Context, *TLAccountVerifyEmail) (*Bool, error)
	// account.initTakeoutSession#f05b4804 flags:# contacts:flags.0?true message_users:flags.1?true message_chats:flags.2?true message_megagroups:flags.3?true message_channels:flags.4?true files:flags.5?true file_max_size:flags.5?int = account.Takeout;
	AccountInitTakeoutSession(context.Context, *TLAccountInitTakeoutSession) (*Account_Takeout, error)
	// account.finishTakeoutSession#1d2652ee flags:# success:flags.0?true = Bool;
	AccountFinishTakeoutSession(context.Context, *TLAccountFinishTakeoutSession) (*Bool, error)
	// account.confirmPasswordEmail#8fdf1920 code:string = Bool;
	AccountConfirmPasswordEmail(context.Context, *TLAccountConfirmPasswordEmail) (*Bool, error)
	// account.resendPasswordEmail#7a7f2a15 = Bool;
	AccountResendPasswordEmail(context.Context, *TLAccountResendPasswordEmail) (*Bool, error)
	// account.cancelPasswordEmail#c1cbd5b6 = Bool;
	AccountCancelPasswordEmail(context.Context, *TLAccountCancelPasswordEmail) (*Bool, error)
	// account.getContactSignUpNotification#9f07c728 = Bool;
	AccountGetContactSignUpNotification(context.Context, *TLAccountGetContactSignUpNotification) (*Bool, error)
	// account.setContactSignUpNotification#cff43f61 silent:Bool = Bool;
	AccountSetContactSignUpNotification(context.Context, *TLAccountSetContactSignUpNotification) (*Bool, error)
	// account.getNotifyExceptions#53577479 flags:# compare_sound:flags.1?true peer:flags.0?InputNotifyPeer = Updates;
	AccountGetNotifyExceptions(context.Context, *TLAccountGetNotifyExceptions) (*Updates, error)
	// account.getWallPaper#fc8ddbea wallpaper:InputWallPaper = WallPaper;
	AccountGetWallPaper(context.Context, *TLAccountGetWallPaper) (*WallPaper, error)
	// account.uploadWallPaper#dd853661 file:InputFile mime_type:string settings:WallPaperSettings = WallPaper;
	AccountUploadWallPaper(context.Context, *TLAccountUploadWallPaper) (*WallPaper, error)
	// account.saveWallPaper#6c5a5b37 wallpaper:InputWallPaper unsave:Bool settings:WallPaperSettings = Bool;
	AccountSaveWallPaper(context.Context, *TLAccountSaveWallPaper) (*Bool, error)
	// account.installWallPaper#feed5769 wallpaper:InputWallPaper settings:WallPaperSettings = Bool;
	AccountInstallWallPaper(context.Context, *TLAccountInstallWallPaper) (*Bool, error)
	// account.resetWallPapers#bb3b9804 = Bool;
	AccountResetWallPapers(context.Context, *TLAccountResetWallPapers) (*Bool, error)
	// account.getAutoDownloadSettings#56da0b3f = account.AutoDownloadSettings;
	AccountGetAutoDownloadSettings(context.Context, *TLAccountGetAutoDownloadSettings) (*Account_AutoDownloadSettings, error)
	// account.saveAutoDownloadSettings#76f36233 flags:# low:flags.0?true high:flags.1?true settings:AutoDownloadSettings = Bool;
	AccountSaveAutoDownloadSettings(context.Context, *TLAccountSaveAutoDownloadSettings) (*Bool, error)
	// account.uploadTheme#1c3db333 flags:# file:InputFile thumb:flags.0?InputFile file_name:string mime_type:string = Document;
	AccountUploadTheme(context.Context, *TLAccountUploadTheme) (*Document, error)
	// account.createTheme#8432c21f flags:# slug:string title:string document:flags.2?InputDocument settings:flags.3?InputThemeSettings = Theme;
	AccountCreateTheme(context.Context, *TLAccountCreateTheme) (*Theme, error)
	// account.updateTheme#5cb367d5 flags:# format:string theme:InputTheme slug:flags.0?string title:flags.1?string document:flags.2?InputDocument settings:flags.3?InputThemeSettings = Theme;
	AccountUpdateTheme(context.Context, *TLAccountUpdateTheme) (*Theme, error)
	// account.saveTheme#f257106c theme:InputTheme unsave:Bool = Bool;
	AccountSaveTheme(context.Context, *TLAccountSaveTheme) (*Bool, error)
	// account.installTheme#7ae43737 flags:# dark:flags.0?true format:flags.1?string theme:flags.1?InputTheme = Bool;
	AccountInstallTheme(context.Context, *TLAccountInstallTheme) (*Bool, error)
	// account.getTheme#8d9d742b format:string theme:InputTheme document_id:long = Theme;
	AccountGetTheme(context.Context, *TLAccountGetTheme) (*Theme, error)
	// account.getThemes#285946f8 format:string hash:int = account.Themes;
	AccountGetThemes(context.Context, *TLAccountGetThemes) (*Account_Themes, error)
	// account.setContentSettings#b574b16b flags:# sensitive_enabled:flags.0?true = Bool;
	AccountSetContentSettings(context.Context, *TLAccountSetContentSettings) (*Bool, error)
	// account.getContentSettings#8b9b4dae = account.ContentSettings;
	AccountGetContentSettings(context.Context, *TLAccountGetContentSettings) (*Account_ContentSettings, error)
	// account.getMultiWallPapers#65ad71dc wallpapers:Vector<InputWallPaper> = Vector<WallPaper>;
	AccountGetMultiWallPapers(context.Context, *TLAccountGetMultiWallPapers) (*Vector_WallPaper, error)
	// account.getGlobalPrivacySettings#eb2b4cf6 = GlobalPrivacySettings;
	AccountGetGlobalPrivacySettings(context.Context, *TLAccountGetGlobalPrivacySettings) (*GlobalPrivacySettings, error)
	// account.setGlobalPrivacySettings#1edaaac2 settings:GlobalPrivacySettings = GlobalPrivacySettings;
	AccountSetGlobalPrivacySettings(context.Context, *TLAccountSetGlobalPrivacySettings) (*GlobalPrivacySettings, error)
}

// UnimplementedRPCAccountServer can be embedded to have forward compatible implementations.
type UnimplementedRPCAccountServer struct {
}

func (*UnimplementedRPCAccountServer) AccountRegisterDevice(ctx context.Context, req *TLAccountRegisterDevice) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountRegisterDevice not implemented")
}
func (*UnimplementedRPCAccountServer) AccountUnregisterDevice(ctx context.Context, req *TLAccountUnregisterDevice) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUnregisterDevice not implemented")
}
func (*UnimplementedRPCAccountServer) AccountUpdateNotifySettings(ctx context.Context, req *TLAccountUpdateNotifySettings) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdateNotifySettings not implemented")
}
func (*UnimplementedRPCAccountServer) AccountGetNotifySettings(ctx context.Context, req *TLAccountGetNotifySettings) (*PeerNotifySettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetNotifySettings not implemented")
}
func (*UnimplementedRPCAccountServer) AccountResetNotifySettings(ctx context.Context, req *TLAccountResetNotifySettings) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountResetNotifySettings not implemented")
}
func (*UnimplementedRPCAccountServer) AccountUpdateProfile(ctx context.Context, req *TLAccountUpdateProfile) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdateProfile not implemented")
}
func (*UnimplementedRPCAccountServer) AccountUpdateStatus(ctx context.Context, req *TLAccountUpdateStatus) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdateStatus not implemented")
}
func (*UnimplementedRPCAccountServer) AccountGetWallPapers(ctx context.Context, req *TLAccountGetWallPapers) (*Vector_WallPaper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetWallPapers not implemented")
}
func (*UnimplementedRPCAccountServer) AccountReportPeer(ctx context.Context, req *TLAccountReportPeer) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountReportPeer not implemented")
}
func (*UnimplementedRPCAccountServer) AccountCheckUsername(ctx context.Context, req *TLAccountCheckUsername) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountCheckUsername not implemented")
}
func (*UnimplementedRPCAccountServer) AccountUpdateUsername(ctx context.Context, req *TLAccountUpdateUsername) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdateUsername not implemented")
}
func (*UnimplementedRPCAccountServer) AccountGetPrivacy(ctx context.Context, req *TLAccountGetPrivacy) (*Account_PrivacyRules, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetPrivacy not implemented")
}
func (*UnimplementedRPCAccountServer) AccountSetPrivacy(ctx context.Context, req *TLAccountSetPrivacy) (*Account_PrivacyRules, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSetPrivacy not implemented")
}
func (*UnimplementedRPCAccountServer) AccountDeleteAccount(ctx context.Context, req *TLAccountDeleteAccount) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDeleteAccount not implemented")
}
func (*UnimplementedRPCAccountServer) AccountGetAccountTTL(ctx context.Context, req *TLAccountGetAccountTTL) (*AccountDaysTTL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetAccountTTL not implemented")
}
func (*UnimplementedRPCAccountServer) AccountSetAccountTTL(ctx context.Context, req *TLAccountSetAccountTTL) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSetAccountTTL not implemented")
}
func (*UnimplementedRPCAccountServer) AccountSendChangePhoneCode(ctx context.Context, req *TLAccountSendChangePhoneCode) (*Auth_SentCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSendChangePhoneCode not implemented")
}
func (*UnimplementedRPCAccountServer) AccountChangePhone(ctx context.Context, req *TLAccountChangePhone) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountChangePhone not implemented")
}
func (*UnimplementedRPCAccountServer) AccountUpdateDeviceLocked(ctx context.Context, req *TLAccountUpdateDeviceLocked) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdateDeviceLocked not implemented")
}
func (*UnimplementedRPCAccountServer) AccountGetAuthorizations(ctx context.Context, req *TLAccountGetAuthorizations) (*Account_Authorizations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetAuthorizations not implemented")
}
func (*UnimplementedRPCAccountServer) AccountResetAuthorization(ctx context.Context, req *TLAccountResetAuthorization) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountResetAuthorization not implemented")
}
func (*UnimplementedRPCAccountServer) AccountGetPassword(ctx context.Context, req *TLAccountGetPassword) (*Account_Password, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetPassword not implemented")
}
func (*UnimplementedRPCAccountServer) AccountGetPasswordSettings(ctx context.Context, req *TLAccountGetPasswordSettings) (*Account_PasswordSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetPasswordSettings not implemented")
}
func (*UnimplementedRPCAccountServer) AccountUpdatePasswordSettings(ctx context.Context, req *TLAccountUpdatePasswordSettings) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdatePasswordSettings not implemented")
}
func (*UnimplementedRPCAccountServer) AccountSendConfirmPhoneCode(ctx context.Context, req *TLAccountSendConfirmPhoneCode) (*Auth_SentCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSendConfirmPhoneCode not implemented")
}
func (*UnimplementedRPCAccountServer) AccountConfirmPhone(ctx context.Context, req *TLAccountConfirmPhone) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountConfirmPhone not implemented")
}
func (*UnimplementedRPCAccountServer) AccountGetTmpPassword(ctx context.Context, req *TLAccountGetTmpPassword) (*Account_TmpPassword, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetTmpPassword not implemented")
}
func (*UnimplementedRPCAccountServer) AccountRegisterDevice73(ctx context.Context, req *TLAccountRegisterDevice73) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountRegisterDevice73 not implemented")
}
func (*UnimplementedRPCAccountServer) AccountRegisterDevice114(ctx context.Context, req *TLAccountRegisterDevice114) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountRegisterDevice114 not implemented")
}
func (*UnimplementedRPCAccountServer) AccountUnregisterDevice114(ctx context.Context, req *TLAccountUnregisterDevice114) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUnregisterDevice114 not implemented")
}
func (*UnimplementedRPCAccountServer) AccountGetWallPapers114(ctx context.Context, req *TLAccountGetWallPapers114) (*Account_WallPapers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetWallPapers114 not implemented")
}
func (*UnimplementedRPCAccountServer) AccountSendChangePhoneCode114(ctx context.Context, req *TLAccountSendChangePhoneCode114) (*Auth_SentCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSendChangePhoneCode114 not implemented")
}
func (*UnimplementedRPCAccountServer) AccountGetPasswordSettings114(ctx context.Context, req *TLAccountGetPasswordSettings114) (*Account_PasswordSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetPasswordSettings114 not implemented")
}
func (*UnimplementedRPCAccountServer) AccountUpdatePasswordSettings114(ctx context.Context, req *TLAccountUpdatePasswordSettings114) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdatePasswordSettings114 not implemented")
}
func (*UnimplementedRPCAccountServer) AccountSendConfirmPhoneCode114(ctx context.Context, req *TLAccountSendConfirmPhoneCode114) (*Auth_SentCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSendConfirmPhoneCode114 not implemented")
}
func (*UnimplementedRPCAccountServer) AccountGetTmpPassword114(ctx context.Context, req *TLAccountGetTmpPassword114) (*Account_TmpPassword, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetTmpPassword114 not implemented")
}
func (*UnimplementedRPCAccountServer) AccountGetWebAuthorizations(ctx context.Context, req *TLAccountGetWebAuthorizations) (*Account_WebAuthorizations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetWebAuthorizations not implemented")
}
func (*UnimplementedRPCAccountServer) AccountResetWebAuthorization(ctx context.Context, req *TLAccountResetWebAuthorization) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountResetWebAuthorization not implemented")
}
func (*UnimplementedRPCAccountServer) AccountResetWebAuthorizations(ctx context.Context, req *TLAccountResetWebAuthorizations) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountResetWebAuthorizations not implemented")
}
func (*UnimplementedRPCAccountServer) AccountGetAllSecureValues(ctx context.Context, req *TLAccountGetAllSecureValues) (*Vector_SecureValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetAllSecureValues not implemented")
}
func (*UnimplementedRPCAccountServer) AccountGetSecureValue(ctx context.Context, req *TLAccountGetSecureValue) (*Vector_SecureValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetSecureValue not implemented")
}
func (*UnimplementedRPCAccountServer) AccountSaveSecureValue(ctx context.Context, req *TLAccountSaveSecureValue) (*SecureValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSaveSecureValue not implemented")
}
func (*UnimplementedRPCAccountServer) AccountDeleteSecureValue(ctx context.Context, req *TLAccountDeleteSecureValue) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDeleteSecureValue not implemented")
}
func (*UnimplementedRPCAccountServer) AccountGetAuthorizationForm(ctx context.Context, req *TLAccountGetAuthorizationForm) (*Account_AuthorizationForm, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetAuthorizationForm not implemented")
}
func (*UnimplementedRPCAccountServer) AccountAcceptAuthorization(ctx context.Context, req *TLAccountAcceptAuthorization) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountAcceptAuthorization not implemented")
}
func (*UnimplementedRPCAccountServer) AccountSendVerifyPhoneCode(ctx context.Context, req *TLAccountSendVerifyPhoneCode) (*Auth_SentCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSendVerifyPhoneCode not implemented")
}
func (*UnimplementedRPCAccountServer) AccountVerifyPhone(ctx context.Context, req *TLAccountVerifyPhone) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountVerifyPhone not implemented")
}
func (*UnimplementedRPCAccountServer) AccountSendVerifyEmailCode(ctx context.Context, req *TLAccountSendVerifyEmailCode) (*Account_SentEmailCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSendVerifyEmailCode not implemented")
}
func (*UnimplementedRPCAccountServer) AccountVerifyEmail(ctx context.Context, req *TLAccountVerifyEmail) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountVerifyEmail not implemented")
}
func (*UnimplementedRPCAccountServer) AccountInitTakeoutSession(ctx context.Context, req *TLAccountInitTakeoutSession) (*Account_Takeout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountInitTakeoutSession not implemented")
}
func (*UnimplementedRPCAccountServer) AccountFinishTakeoutSession(ctx context.Context, req *TLAccountFinishTakeoutSession) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountFinishTakeoutSession not implemented")
}
func (*UnimplementedRPCAccountServer) AccountConfirmPasswordEmail(ctx context.Context, req *TLAccountConfirmPasswordEmail) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountConfirmPasswordEmail not implemented")
}
func (*UnimplementedRPCAccountServer) AccountResendPasswordEmail(ctx context.Context, req *TLAccountResendPasswordEmail) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountResendPasswordEmail not implemented")
}
func (*UnimplementedRPCAccountServer) AccountCancelPasswordEmail(ctx context.Context, req *TLAccountCancelPasswordEmail) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountCancelPasswordEmail not implemented")
}
func (*UnimplementedRPCAccountServer) AccountGetContactSignUpNotification(ctx context.Context, req *TLAccountGetContactSignUpNotification) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetContactSignUpNotification not implemented")
}
func (*UnimplementedRPCAccountServer) AccountSetContactSignUpNotification(ctx context.Context, req *TLAccountSetContactSignUpNotification) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSetContactSignUpNotification not implemented")
}
func (*UnimplementedRPCAccountServer) AccountGetNotifyExceptions(ctx context.Context, req *TLAccountGetNotifyExceptions) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetNotifyExceptions not implemented")
}
func (*UnimplementedRPCAccountServer) AccountGetWallPaper(ctx context.Context, req *TLAccountGetWallPaper) (*WallPaper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetWallPaper not implemented")
}
func (*UnimplementedRPCAccountServer) AccountUploadWallPaper(ctx context.Context, req *TLAccountUploadWallPaper) (*WallPaper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUploadWallPaper not implemented")
}
func (*UnimplementedRPCAccountServer) AccountSaveWallPaper(ctx context.Context, req *TLAccountSaveWallPaper) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSaveWallPaper not implemented")
}
func (*UnimplementedRPCAccountServer) AccountInstallWallPaper(ctx context.Context, req *TLAccountInstallWallPaper) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountInstallWallPaper not implemented")
}
func (*UnimplementedRPCAccountServer) AccountResetWallPapers(ctx context.Context, req *TLAccountResetWallPapers) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountResetWallPapers not implemented")
}
func (*UnimplementedRPCAccountServer) AccountGetAutoDownloadSettings(ctx context.Context, req *TLAccountGetAutoDownloadSettings) (*Account_AutoDownloadSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetAutoDownloadSettings not implemented")
}
func (*UnimplementedRPCAccountServer) AccountSaveAutoDownloadSettings(ctx context.Context, req *TLAccountSaveAutoDownloadSettings) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSaveAutoDownloadSettings not implemented")
}
func (*UnimplementedRPCAccountServer) AccountUploadTheme(ctx context.Context, req *TLAccountUploadTheme) (*Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUploadTheme not implemented")
}
func (*UnimplementedRPCAccountServer) AccountCreateTheme(ctx context.Context, req *TLAccountCreateTheme) (*Theme, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountCreateTheme not implemented")
}
func (*UnimplementedRPCAccountServer) AccountUpdateTheme(ctx context.Context, req *TLAccountUpdateTheme) (*Theme, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUpdateTheme not implemented")
}
func (*UnimplementedRPCAccountServer) AccountSaveTheme(ctx context.Context, req *TLAccountSaveTheme) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSaveTheme not implemented")
}
func (*UnimplementedRPCAccountServer) AccountInstallTheme(ctx context.Context, req *TLAccountInstallTheme) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountInstallTheme not implemented")
}
func (*UnimplementedRPCAccountServer) AccountGetTheme(ctx context.Context, req *TLAccountGetTheme) (*Theme, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetTheme not implemented")
}
func (*UnimplementedRPCAccountServer) AccountGetThemes(ctx context.Context, req *TLAccountGetThemes) (*Account_Themes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetThemes not implemented")
}
func (*UnimplementedRPCAccountServer) AccountSetContentSettings(ctx context.Context, req *TLAccountSetContentSettings) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSetContentSettings not implemented")
}
func (*UnimplementedRPCAccountServer) AccountGetContentSettings(ctx context.Context, req *TLAccountGetContentSettings) (*Account_ContentSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetContentSettings not implemented")
}
func (*UnimplementedRPCAccountServer) AccountGetMultiWallPapers(ctx context.Context, req *TLAccountGetMultiWallPapers) (*Vector_WallPaper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetMultiWallPapers not implemented")
}
func (*UnimplementedRPCAccountServer) AccountGetGlobalPrivacySettings(ctx context.Context, req *TLAccountGetGlobalPrivacySettings) (*GlobalPrivacySettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountGetGlobalPrivacySettings not implemented")
}
func (*UnimplementedRPCAccountServer) AccountSetGlobalPrivacySettings(ctx context.Context, req *TLAccountSetGlobalPrivacySettings) (*GlobalPrivacySettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountSetGlobalPrivacySettings not implemented")
}

func RegisterRPCAccountServer(s *grpc.Server, srv RPCAccountServer) {
	s.RegisterService(&_RPCAccount_serviceDesc, srv)
}

func _RPCAccount_AccountRegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountRegisterDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountRegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountRegisterDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountRegisterDevice(ctx, req.(*TLAccountRegisterDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountUnregisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUnregisterDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountUnregisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountUnregisterDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountUnregisterDevice(ctx, req.(*TLAccountUnregisterDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountUpdateNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateNotifySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountUpdateNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountUpdateNotifySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountUpdateNotifySettings(ctx, req.(*TLAccountUpdateNotifySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountGetNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetNotifySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountGetNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountGetNotifySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountGetNotifySettings(ctx, req.(*TLAccountGetNotifySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountResetNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountResetNotifySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountResetNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountResetNotifySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountResetNotifySettings(ctx, req.(*TLAccountResetNotifySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountUpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountUpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountUpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountUpdateProfile(ctx, req.(*TLAccountUpdateProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountUpdateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountUpdateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountUpdateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountUpdateStatus(ctx, req.(*TLAccountUpdateStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountGetWallPapers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetWallPapers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountGetWallPapers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountGetWallPapers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountGetWallPapers(ctx, req.(*TLAccountGetWallPapers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountReportPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountReportPeer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountReportPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountReportPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountReportPeer(ctx, req.(*TLAccountReportPeer))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountCheckUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountCheckUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountCheckUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountCheckUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountCheckUsername(ctx, req.(*TLAccountCheckUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountUpdateUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountUpdateUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountUpdateUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountUpdateUsername(ctx, req.(*TLAccountUpdateUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountGetPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetPrivacy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountGetPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountGetPrivacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountGetPrivacy(ctx, req.(*TLAccountGetPrivacy))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountSetPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSetPrivacy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountSetPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountSetPrivacy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountSetPrivacy(ctx, req.(*TLAccountSetPrivacy))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountDeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountDeleteAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountDeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountDeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountDeleteAccount(ctx, req.(*TLAccountDeleteAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountGetAccountTTL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetAccountTTL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountGetAccountTTL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountGetAccountTTL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountGetAccountTTL(ctx, req.(*TLAccountGetAccountTTL))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountSetAccountTTL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSetAccountTTL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountSetAccountTTL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountSetAccountTTL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountSetAccountTTL(ctx, req.(*TLAccountSetAccountTTL))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountSendChangePhoneCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSendChangePhoneCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountSendChangePhoneCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountSendChangePhoneCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountSendChangePhoneCode(ctx, req.(*TLAccountSendChangePhoneCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountChangePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountChangePhone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountChangePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountChangePhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountChangePhone(ctx, req.(*TLAccountChangePhone))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountUpdateDeviceLocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateDeviceLocked)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountUpdateDeviceLocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountUpdateDeviceLocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountUpdateDeviceLocked(ctx, req.(*TLAccountUpdateDeviceLocked))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountGetAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetAuthorizations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountGetAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountGetAuthorizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountGetAuthorizations(ctx, req.(*TLAccountGetAuthorizations))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountResetAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountResetAuthorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountResetAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountResetAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountResetAuthorization(ctx, req.(*TLAccountResetAuthorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountGetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountGetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountGetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountGetPassword(ctx, req.(*TLAccountGetPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountGetPasswordSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetPasswordSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountGetPasswordSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountGetPasswordSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountGetPasswordSettings(ctx, req.(*TLAccountGetPasswordSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountUpdatePasswordSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdatePasswordSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountUpdatePasswordSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountUpdatePasswordSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountUpdatePasswordSettings(ctx, req.(*TLAccountUpdatePasswordSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountSendConfirmPhoneCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSendConfirmPhoneCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountSendConfirmPhoneCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountSendConfirmPhoneCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountSendConfirmPhoneCode(ctx, req.(*TLAccountSendConfirmPhoneCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountConfirmPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountConfirmPhone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountConfirmPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountConfirmPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountConfirmPhone(ctx, req.(*TLAccountConfirmPhone))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountGetTmpPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetTmpPassword)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountGetTmpPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountGetTmpPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountGetTmpPassword(ctx, req.(*TLAccountGetTmpPassword))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountRegisterDevice73_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountRegisterDevice73)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountRegisterDevice73(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountRegisterDevice73",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountRegisterDevice73(ctx, req.(*TLAccountRegisterDevice73))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountRegisterDevice114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountRegisterDevice114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountRegisterDevice114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountRegisterDevice114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountRegisterDevice114(ctx, req.(*TLAccountRegisterDevice114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountUnregisterDevice114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUnregisterDevice114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountUnregisterDevice114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountUnregisterDevice114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountUnregisterDevice114(ctx, req.(*TLAccountUnregisterDevice114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountGetWallPapers114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetWallPapers114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountGetWallPapers114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountGetWallPapers114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountGetWallPapers114(ctx, req.(*TLAccountGetWallPapers114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountSendChangePhoneCode114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSendChangePhoneCode114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountSendChangePhoneCode114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountSendChangePhoneCode114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountSendChangePhoneCode114(ctx, req.(*TLAccountSendChangePhoneCode114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountGetPasswordSettings114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetPasswordSettings114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountGetPasswordSettings114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountGetPasswordSettings114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountGetPasswordSettings114(ctx, req.(*TLAccountGetPasswordSettings114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountUpdatePasswordSettings114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdatePasswordSettings114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountUpdatePasswordSettings114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountUpdatePasswordSettings114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountUpdatePasswordSettings114(ctx, req.(*TLAccountUpdatePasswordSettings114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountSendConfirmPhoneCode114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSendConfirmPhoneCode114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountSendConfirmPhoneCode114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountSendConfirmPhoneCode114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountSendConfirmPhoneCode114(ctx, req.(*TLAccountSendConfirmPhoneCode114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountGetTmpPassword114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetTmpPassword114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountGetTmpPassword114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountGetTmpPassword114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountGetTmpPassword114(ctx, req.(*TLAccountGetTmpPassword114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountGetWebAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetWebAuthorizations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountGetWebAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountGetWebAuthorizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountGetWebAuthorizations(ctx, req.(*TLAccountGetWebAuthorizations))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountResetWebAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountResetWebAuthorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountResetWebAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountResetWebAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountResetWebAuthorization(ctx, req.(*TLAccountResetWebAuthorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountResetWebAuthorizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountResetWebAuthorizations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountResetWebAuthorizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountResetWebAuthorizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountResetWebAuthorizations(ctx, req.(*TLAccountResetWebAuthorizations))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountGetAllSecureValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetAllSecureValues)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountGetAllSecureValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountGetAllSecureValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountGetAllSecureValues(ctx, req.(*TLAccountGetAllSecureValues))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountGetSecureValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetSecureValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountGetSecureValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountGetSecureValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountGetSecureValue(ctx, req.(*TLAccountGetSecureValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountSaveSecureValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSaveSecureValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountSaveSecureValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountSaveSecureValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountSaveSecureValue(ctx, req.(*TLAccountSaveSecureValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountDeleteSecureValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountDeleteSecureValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountDeleteSecureValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountDeleteSecureValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountDeleteSecureValue(ctx, req.(*TLAccountDeleteSecureValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountGetAuthorizationForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetAuthorizationForm)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountGetAuthorizationForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountGetAuthorizationForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountGetAuthorizationForm(ctx, req.(*TLAccountGetAuthorizationForm))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountAcceptAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountAcceptAuthorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountAcceptAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountAcceptAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountAcceptAuthorization(ctx, req.(*TLAccountAcceptAuthorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountSendVerifyPhoneCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSendVerifyPhoneCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountSendVerifyPhoneCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountSendVerifyPhoneCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountSendVerifyPhoneCode(ctx, req.(*TLAccountSendVerifyPhoneCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountVerifyPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountVerifyPhone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountVerifyPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountVerifyPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountVerifyPhone(ctx, req.(*TLAccountVerifyPhone))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountSendVerifyEmailCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSendVerifyEmailCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountSendVerifyEmailCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountSendVerifyEmailCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountSendVerifyEmailCode(ctx, req.(*TLAccountSendVerifyEmailCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountVerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountVerifyEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountVerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountVerifyEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountVerifyEmail(ctx, req.(*TLAccountVerifyEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountInitTakeoutSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountInitTakeoutSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountInitTakeoutSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountInitTakeoutSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountInitTakeoutSession(ctx, req.(*TLAccountInitTakeoutSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountFinishTakeoutSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountFinishTakeoutSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountFinishTakeoutSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountFinishTakeoutSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountFinishTakeoutSession(ctx, req.(*TLAccountFinishTakeoutSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountConfirmPasswordEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountConfirmPasswordEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountConfirmPasswordEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountConfirmPasswordEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountConfirmPasswordEmail(ctx, req.(*TLAccountConfirmPasswordEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountResendPasswordEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountResendPasswordEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountResendPasswordEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountResendPasswordEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountResendPasswordEmail(ctx, req.(*TLAccountResendPasswordEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountCancelPasswordEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountCancelPasswordEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountCancelPasswordEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountCancelPasswordEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountCancelPasswordEmail(ctx, req.(*TLAccountCancelPasswordEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountGetContactSignUpNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetContactSignUpNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountGetContactSignUpNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountGetContactSignUpNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountGetContactSignUpNotification(ctx, req.(*TLAccountGetContactSignUpNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountSetContactSignUpNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSetContactSignUpNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountSetContactSignUpNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountSetContactSignUpNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountSetContactSignUpNotification(ctx, req.(*TLAccountSetContactSignUpNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountGetNotifyExceptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetNotifyExceptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountGetNotifyExceptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountGetNotifyExceptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountGetNotifyExceptions(ctx, req.(*TLAccountGetNotifyExceptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountGetWallPaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetWallPaper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountGetWallPaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountGetWallPaper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountGetWallPaper(ctx, req.(*TLAccountGetWallPaper))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountUploadWallPaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUploadWallPaper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountUploadWallPaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountUploadWallPaper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountUploadWallPaper(ctx, req.(*TLAccountUploadWallPaper))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountSaveWallPaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSaveWallPaper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountSaveWallPaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountSaveWallPaper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountSaveWallPaper(ctx, req.(*TLAccountSaveWallPaper))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountInstallWallPaper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountInstallWallPaper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountInstallWallPaper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountInstallWallPaper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountInstallWallPaper(ctx, req.(*TLAccountInstallWallPaper))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountResetWallPapers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountResetWallPapers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountResetWallPapers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountResetWallPapers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountResetWallPapers(ctx, req.(*TLAccountResetWallPapers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountGetAutoDownloadSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetAutoDownloadSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountGetAutoDownloadSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountGetAutoDownloadSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountGetAutoDownloadSettings(ctx, req.(*TLAccountGetAutoDownloadSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountSaveAutoDownloadSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSaveAutoDownloadSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountSaveAutoDownloadSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountSaveAutoDownloadSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountSaveAutoDownloadSettings(ctx, req.(*TLAccountSaveAutoDownloadSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountUploadTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUploadTheme)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountUploadTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountUploadTheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountUploadTheme(ctx, req.(*TLAccountUploadTheme))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountCreateTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountCreateTheme)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountCreateTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountCreateTheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountCreateTheme(ctx, req.(*TLAccountCreateTheme))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountUpdateTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountUpdateTheme)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountUpdateTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountUpdateTheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountUpdateTheme(ctx, req.(*TLAccountUpdateTheme))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountSaveTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSaveTheme)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountSaveTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountSaveTheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountSaveTheme(ctx, req.(*TLAccountSaveTheme))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountInstallTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountInstallTheme)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountInstallTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountInstallTheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountInstallTheme(ctx, req.(*TLAccountInstallTheme))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountGetTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetTheme)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountGetTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountGetTheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountGetTheme(ctx, req.(*TLAccountGetTheme))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountGetThemes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetThemes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountGetThemes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountGetThemes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountGetThemes(ctx, req.(*TLAccountGetThemes))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountSetContentSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSetContentSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountSetContentSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountSetContentSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountSetContentSettings(ctx, req.(*TLAccountSetContentSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountGetContentSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetContentSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountGetContentSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountGetContentSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountGetContentSettings(ctx, req.(*TLAccountGetContentSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountGetMultiWallPapers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetMultiWallPapers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountGetMultiWallPapers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountGetMultiWallPapers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountGetMultiWallPapers(ctx, req.(*TLAccountGetMultiWallPapers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountGetGlobalPrivacySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountGetGlobalPrivacySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountGetGlobalPrivacySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountGetGlobalPrivacySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountGetGlobalPrivacySettings(ctx, req.(*TLAccountGetGlobalPrivacySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCAccount_AccountSetGlobalPrivacySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLAccountSetGlobalPrivacySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCAccountServer).AccountSetGlobalPrivacySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCAccount/AccountSetGlobalPrivacySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCAccountServer).AccountSetGlobalPrivacySettings(ctx, req.(*TLAccountSetGlobalPrivacySettings))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCAccount_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCAccount",
	HandlerType: (*RPCAccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account_registerDevice",
			Handler:    _RPCAccount_AccountRegisterDevice_Handler,
		},
		{
			MethodName: "account_unregisterDevice",
			Handler:    _RPCAccount_AccountUnregisterDevice_Handler,
		},
		{
			MethodName: "account_updateNotifySettings",
			Handler:    _RPCAccount_AccountUpdateNotifySettings_Handler,
		},
		{
			MethodName: "account_getNotifySettings",
			Handler:    _RPCAccount_AccountGetNotifySettings_Handler,
		},
		{
			MethodName: "account_resetNotifySettings",
			Handler:    _RPCAccount_AccountResetNotifySettings_Handler,
		},
		{
			MethodName: "account_updateProfile",
			Handler:    _RPCAccount_AccountUpdateProfile_Handler,
		},
		{
			MethodName: "account_updateStatus",
			Handler:    _RPCAccount_AccountUpdateStatus_Handler,
		},
		{
			MethodName: "account_getWallPapers",
			Handler:    _RPCAccount_AccountGetWallPapers_Handler,
		},
		{
			MethodName: "account_reportPeer",
			Handler:    _RPCAccount_AccountReportPeer_Handler,
		},
		{
			MethodName: "account_checkUsername",
			Handler:    _RPCAccount_AccountCheckUsername_Handler,
		},
		{
			MethodName: "account_updateUsername",
			Handler:    _RPCAccount_AccountUpdateUsername_Handler,
		},
		{
			MethodName: "account_getPrivacy",
			Handler:    _RPCAccount_AccountGetPrivacy_Handler,
		},
		{
			MethodName: "account_setPrivacy",
			Handler:    _RPCAccount_AccountSetPrivacy_Handler,
		},
		{
			MethodName: "account_deleteAccount",
			Handler:    _RPCAccount_AccountDeleteAccount_Handler,
		},
		{
			MethodName: "account_getAccountTTL",
			Handler:    _RPCAccount_AccountGetAccountTTL_Handler,
		},
		{
			MethodName: "account_setAccountTTL",
			Handler:    _RPCAccount_AccountSetAccountTTL_Handler,
		},
		{
			MethodName: "account_sendChangePhoneCode",
			Handler:    _RPCAccount_AccountSendChangePhoneCode_Handler,
		},
		{
			MethodName: "account_changePhone",
			Handler:    _RPCAccount_AccountChangePhone_Handler,
		},
		{
			MethodName: "account_updateDeviceLocked",
			Handler:    _RPCAccount_AccountUpdateDeviceLocked_Handler,
		},
		{
			MethodName: "account_getAuthorizations",
			Handler:    _RPCAccount_AccountGetAuthorizations_Handler,
		},
		{
			MethodName: "account_resetAuthorization",
			Handler:    _RPCAccount_AccountResetAuthorization_Handler,
		},
		{
			MethodName: "account_getPassword",
			Handler:    _RPCAccount_AccountGetPassword_Handler,
		},
		{
			MethodName: "account_getPasswordSettings",
			Handler:    _RPCAccount_AccountGetPasswordSettings_Handler,
		},
		{
			MethodName: "account_updatePasswordSettings",
			Handler:    _RPCAccount_AccountUpdatePasswordSettings_Handler,
		},
		{
			MethodName: "account_sendConfirmPhoneCode",
			Handler:    _RPCAccount_AccountSendConfirmPhoneCode_Handler,
		},
		{
			MethodName: "account_confirmPhone",
			Handler:    _RPCAccount_AccountConfirmPhone_Handler,
		},
		{
			MethodName: "account_getTmpPassword",
			Handler:    _RPCAccount_AccountGetTmpPassword_Handler,
		},
		{
			MethodName: "account_registerDevice73",
			Handler:    _RPCAccount_AccountRegisterDevice73_Handler,
		},
		{
			MethodName: "account_registerDevice114",
			Handler:    _RPCAccount_AccountRegisterDevice114_Handler,
		},
		{
			MethodName: "account_unregisterDevice114",
			Handler:    _RPCAccount_AccountUnregisterDevice114_Handler,
		},
		{
			MethodName: "account_getWallPapers114",
			Handler:    _RPCAccount_AccountGetWallPapers114_Handler,
		},
		{
			MethodName: "account_sendChangePhoneCode114",
			Handler:    _RPCAccount_AccountSendChangePhoneCode114_Handler,
		},
		{
			MethodName: "account_getPasswordSettings114",
			Handler:    _RPCAccount_AccountGetPasswordSettings114_Handler,
		},
		{
			MethodName: "account_updatePasswordSettings114",
			Handler:    _RPCAccount_AccountUpdatePasswordSettings114_Handler,
		},
		{
			MethodName: "account_sendConfirmPhoneCode114",
			Handler:    _RPCAccount_AccountSendConfirmPhoneCode114_Handler,
		},
		{
			MethodName: "account_getTmpPassword114",
			Handler:    _RPCAccount_AccountGetTmpPassword114_Handler,
		},
		{
			MethodName: "account_getWebAuthorizations",
			Handler:    _RPCAccount_AccountGetWebAuthorizations_Handler,
		},
		{
			MethodName: "account_resetWebAuthorization",
			Handler:    _RPCAccount_AccountResetWebAuthorization_Handler,
		},
		{
			MethodName: "account_resetWebAuthorizations",
			Handler:    _RPCAccount_AccountResetWebAuthorizations_Handler,
		},
		{
			MethodName: "account_getAllSecureValues",
			Handler:    _RPCAccount_AccountGetAllSecureValues_Handler,
		},
		{
			MethodName: "account_getSecureValue",
			Handler:    _RPCAccount_AccountGetSecureValue_Handler,
		},
		{
			MethodName: "account_saveSecureValue",
			Handler:    _RPCAccount_AccountSaveSecureValue_Handler,
		},
		{
			MethodName: "account_deleteSecureValue",
			Handler:    _RPCAccount_AccountDeleteSecureValue_Handler,
		},
		{
			MethodName: "account_getAuthorizationForm",
			Handler:    _RPCAccount_AccountGetAuthorizationForm_Handler,
		},
		{
			MethodName: "account_acceptAuthorization",
			Handler:    _RPCAccount_AccountAcceptAuthorization_Handler,
		},
		{
			MethodName: "account_sendVerifyPhoneCode",
			Handler:    _RPCAccount_AccountSendVerifyPhoneCode_Handler,
		},
		{
			MethodName: "account_verifyPhone",
			Handler:    _RPCAccount_AccountVerifyPhone_Handler,
		},
		{
			MethodName: "account_sendVerifyEmailCode",
			Handler:    _RPCAccount_AccountSendVerifyEmailCode_Handler,
		},
		{
			MethodName: "account_verifyEmail",
			Handler:    _RPCAccount_AccountVerifyEmail_Handler,
		},
		{
			MethodName: "account_initTakeoutSession",
			Handler:    _RPCAccount_AccountInitTakeoutSession_Handler,
		},
		{
			MethodName: "account_finishTakeoutSession",
			Handler:    _RPCAccount_AccountFinishTakeoutSession_Handler,
		},
		{
			MethodName: "account_confirmPasswordEmail",
			Handler:    _RPCAccount_AccountConfirmPasswordEmail_Handler,
		},
		{
			MethodName: "account_resendPasswordEmail",
			Handler:    _RPCAccount_AccountResendPasswordEmail_Handler,
		},
		{
			MethodName: "account_cancelPasswordEmail",
			Handler:    _RPCAccount_AccountCancelPasswordEmail_Handler,
		},
		{
			MethodName: "account_getContactSignUpNotification",
			Handler:    _RPCAccount_AccountGetContactSignUpNotification_Handler,
		},
		{
			MethodName: "account_setContactSignUpNotification",
			Handler:    _RPCAccount_AccountSetContactSignUpNotification_Handler,
		},
		{
			MethodName: "account_getNotifyExceptions",
			Handler:    _RPCAccount_AccountGetNotifyExceptions_Handler,
		},
		{
			MethodName: "account_getWallPaper",
			Handler:    _RPCAccount_AccountGetWallPaper_Handler,
		},
		{
			MethodName: "account_uploadWallPaper",
			Handler:    _RPCAccount_AccountUploadWallPaper_Handler,
		},
		{
			MethodName: "account_saveWallPaper",
			Handler:    _RPCAccount_AccountSaveWallPaper_Handler,
		},
		{
			MethodName: "account_installWallPaper",
			Handler:    _RPCAccount_AccountInstallWallPaper_Handler,
		},
		{
			MethodName: "account_resetWallPapers",
			Handler:    _RPCAccount_AccountResetWallPapers_Handler,
		},
		{
			MethodName: "account_getAutoDownloadSettings",
			Handler:    _RPCAccount_AccountGetAutoDownloadSettings_Handler,
		},
		{
			MethodName: "account_saveAutoDownloadSettings",
			Handler:    _RPCAccount_AccountSaveAutoDownloadSettings_Handler,
		},
		{
			MethodName: "account_uploadTheme",
			Handler:    _RPCAccount_AccountUploadTheme_Handler,
		},
		{
			MethodName: "account_createTheme",
			Handler:    _RPCAccount_AccountCreateTheme_Handler,
		},
		{
			MethodName: "account_updateTheme",
			Handler:    _RPCAccount_AccountUpdateTheme_Handler,
		},
		{
			MethodName: "account_saveTheme",
			Handler:    _RPCAccount_AccountSaveTheme_Handler,
		},
		{
			MethodName: "account_installTheme",
			Handler:    _RPCAccount_AccountInstallTheme_Handler,
		},
		{
			MethodName: "account_getTheme",
			Handler:    _RPCAccount_AccountGetTheme_Handler,
		},
		{
			MethodName: "account_getThemes",
			Handler:    _RPCAccount_AccountGetThemes_Handler,
		},
		{
			MethodName: "account_setContentSettings",
			Handler:    _RPCAccount_AccountSetContentSettings_Handler,
		},
		{
			MethodName: "account_getContentSettings",
			Handler:    _RPCAccount_AccountGetContentSettings_Handler,
		},
		{
			MethodName: "account_getMultiWallPapers",
			Handler:    _RPCAccount_AccountGetMultiWallPapers_Handler,
		},
		{
			MethodName: "account_getGlobalPrivacySettings",
			Handler:    _RPCAccount_AccountGetGlobalPrivacySettings_Handler,
		},
		{
			MethodName: "account_setGlobalPrivacySettings",
			Handler:    _RPCAccount_AccountSetGlobalPrivacySettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

// RPCContactsClient is the client API for RPCContacts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCContactsClient interface {
	// contacts.applyFriend#408c0d8a json_content:string = IntResult;
	ContactsApplyFriend(ctx context.Context, in *TLContactsApplyFriend, opts ...grpc.CallOption) (*IntResult, error)
	// contacts.auditApply#8d22f1fb json_content:string = IntResult;
	ContactsAuditApply(ctx context.Context, in *TLContactsAuditApply, opts ...grpc.CallOption) (*IntResult, error)
	// contacts.getApplyList#3e392bb json_content:string = DataJSON;
	ContactsGetApplyList(ctx context.Context, in *TLContactsGetApplyList, opts ...grpc.CallOption) (*DataJSON, error)
	// contacts.searchUser#b4670944 json_content:string = DataJSON;
	ContactsSearchUser(ctx context.Context, in *TLContactsSearchUser, opts ...grpc.CallOption) (*DataJSON, error)
	// contacts.searchSource#f51b186d json_content:string = DataJSON;
	ContactsSearchSource(ctx context.Context, in *TLContactsSearchSource, opts ...grpc.CallOption) (*DataJSON, error)
	// contacts.getStatuses#c4a353ee = Vector<ContactStatus>;
	ContactsGetStatuses(ctx context.Context, in *TLContactsGetStatuses, opts ...grpc.CallOption) (*Vector_ContactStatus, error)
	// contacts.getContacts#c023849f hash:int = contacts.Contacts;
	ContactsGetContacts(ctx context.Context, in *TLContactsGetContacts, opts ...grpc.CallOption) (*Contacts_Contacts, error)
	// contacts.importContacts#2c800be5 contacts:Vector<InputContact> = contacts.ImportedContacts;
	ContactsImportContacts(ctx context.Context, in *TLContactsImportContacts, opts ...grpc.CallOption) (*Contacts_ImportedContacts, error)
	// contacts.deleteContact#8e953744 id:InputUser = contacts.Link;
	ContactsDeleteContact(ctx context.Context, in *TLContactsDeleteContact, opts ...grpc.CallOption) (*Contacts_Link, error)
	// contacts.deleteContacts#59ab389e id:Vector<InputUser> = Bool;
	ContactsDeleteContacts(ctx context.Context, in *TLContactsDeleteContacts, opts ...grpc.CallOption) (*Bool, error)
	// contacts.block#332b49fc id:InputUser = Bool;
	ContactsBlock(ctx context.Context, in *TLContactsBlock, opts ...grpc.CallOption) (*Bool, error)
	// contacts.unblock#e54100bd id:InputUser = Bool;
	ContactsUnblock(ctx context.Context, in *TLContactsUnblock, opts ...grpc.CallOption) (*Bool, error)
	// contacts.getBlocked#f57c350f offset:int limit:int = contacts.Blocked;
	ContactsGetBlocked(ctx context.Context, in *TLContactsGetBlocked, opts ...grpc.CallOption) (*Contacts_Blocked, error)
	// contacts.exportCard#84e53737 = Vector<int>;
	ContactsExportCard(ctx context.Context, in *TLContactsExportCard, opts ...grpc.CallOption) (*VectorInt, error)
	// contacts.importCard#4fe196fe export_card:Vector<int> = User;
	ContactsImportCard(ctx context.Context, in *TLContactsImportCard, opts ...grpc.CallOption) (*User, error)
	// contacts.search#11f812d8 q:string limit:int = contacts.Found;
	ContactsSearch(ctx context.Context, in *TLContactsSearch, opts ...grpc.CallOption) (*Contacts_Found, error)
	// contacts.resolveUsername#f93ccba3 username:string = contacts.ResolvedPeer;
	ContactsResolveUsername(ctx context.Context, in *TLContactsResolveUsername, opts ...grpc.CallOption) (*Contacts_ResolvedPeer, error)
	// contacts.getTopPeers#d4982db5 flags:# correspondents:flags.0?true bots_pm:flags.1?true bots_inline:flags.2?true phone_calls:flags.3?true groups:flags.10?true channels:flags.15?true offset:int limit:int hash:int = contacts.TopPeers;
	ContactsGetTopPeers(ctx context.Context, in *TLContactsGetTopPeers, opts ...grpc.CallOption) (*Contacts_TopPeers, error)
	// contacts.resetTopPeerRating#1ae373ac category:TopPeerCategory peer:InputPeer = Bool;
	ContactsResetTopPeerRating(ctx context.Context, in *TLContactsResetTopPeerRating, opts ...grpc.CallOption) (*Bool, error)
	// contacts.resetSaved#879537f1 = Bool;
	ContactsResetSaved(ctx context.Context, in *TLContactsResetSaved, opts ...grpc.CallOption) (*Bool, error)
	// contacts.getContactIDs#2caa4a42 hash:int = Vector<int>;
	ContactsGetContactIDs(ctx context.Context, in *TLContactsGetContactIDs, opts ...grpc.CallOption) (*VectorInt, error)
	// contacts.deleteContacts#96a0e00 id:Vector<InputUser> = Updates;
	ContactsDeleteContacts114(ctx context.Context, in *TLContactsDeleteContacts114, opts ...grpc.CallOption) (*Updates, error)
	// contacts.deleteByPhones#1013fd9e phones:Vector<string> = Bool;
	ContactsDeleteByPhones(ctx context.Context, in *TLContactsDeleteByPhones, opts ...grpc.CallOption) (*Bool, error)
	// contacts.getSaved#82f1e39f = Vector<SavedContact>;
	ContactsGetSaved(ctx context.Context, in *TLContactsGetSaved, opts ...grpc.CallOption) (*Vector_SavedContact, error)
	// contacts.toggleTopPeers#8514bdda enabled:Bool = Bool;
	ContactsToggleTopPeers(ctx context.Context, in *TLContactsToggleTopPeers, opts ...grpc.CallOption) (*Bool, error)
	// contacts.addContact#e8f463d0 flags:# add_phone_privacy_exception:flags.0?true id:InputUser first_name:string last_name:string phone:string = Updates;
	ContactsAddContact(ctx context.Context, in *TLContactsAddContact, opts ...grpc.CallOption) (*Updates, error)
	// contacts.acceptContact#f831a20f id:InputUser = Updates;
	ContactsAcceptContact(ctx context.Context, in *TLContactsAcceptContact, opts ...grpc.CallOption) (*Updates, error)
	// contacts.getLocated#d348bc44 flags:# background:flags.1?true geo_point:InputGeoPoint self_expires:flags.0?int = Updates;
	ContactsGetLocated(ctx context.Context, in *TLContactsGetLocated, opts ...grpc.CallOption) (*Updates, error)
}

type rPCContactsClient struct {
	cc *grpc.ClientConn
}

func NewRPCContactsClient(cc *grpc.ClientConn) RPCContactsClient {
	return &rPCContactsClient{cc}
}

func (c *rPCContactsClient) ContactsApplyFriend(ctx context.Context, in *TLContactsApplyFriend, opts ...grpc.CallOption) (*IntResult, error) {
	out := new(IntResult)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContacts/contacts_applyFriend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsAuditApply(ctx context.Context, in *TLContactsAuditApply, opts ...grpc.CallOption) (*IntResult, error) {
	out := new(IntResult)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContacts/contacts_auditApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsGetApplyList(ctx context.Context, in *TLContactsGetApplyList, opts ...grpc.CallOption) (*DataJSON, error) {
	out := new(DataJSON)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContacts/contacts_getApplyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsSearchUser(ctx context.Context, in *TLContactsSearchUser, opts ...grpc.CallOption) (*DataJSON, error) {
	out := new(DataJSON)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContacts/contacts_searchUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsSearchSource(ctx context.Context, in *TLContactsSearchSource, opts ...grpc.CallOption) (*DataJSON, error) {
	out := new(DataJSON)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContacts/contacts_searchSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsGetStatuses(ctx context.Context, in *TLContactsGetStatuses, opts ...grpc.CallOption) (*Vector_ContactStatus, error) {
	out := new(Vector_ContactStatus)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContacts/contacts_getStatuses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsGetContacts(ctx context.Context, in *TLContactsGetContacts, opts ...grpc.CallOption) (*Contacts_Contacts, error) {
	out := new(Contacts_Contacts)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContacts/contacts_getContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsImportContacts(ctx context.Context, in *TLContactsImportContacts, opts ...grpc.CallOption) (*Contacts_ImportedContacts, error) {
	out := new(Contacts_ImportedContacts)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContacts/contacts_importContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsDeleteContact(ctx context.Context, in *TLContactsDeleteContact, opts ...grpc.CallOption) (*Contacts_Link, error) {
	out := new(Contacts_Link)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContacts/contacts_deleteContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsDeleteContacts(ctx context.Context, in *TLContactsDeleteContacts, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContacts/contacts_deleteContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsBlock(ctx context.Context, in *TLContactsBlock, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContacts/contacts_block", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsUnblock(ctx context.Context, in *TLContactsUnblock, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContacts/contacts_unblock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsGetBlocked(ctx context.Context, in *TLContactsGetBlocked, opts ...grpc.CallOption) (*Contacts_Blocked, error) {
	out := new(Contacts_Blocked)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContacts/contacts_getBlocked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsExportCard(ctx context.Context, in *TLContactsExportCard, opts ...grpc.CallOption) (*VectorInt, error) {
	out := new(VectorInt)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContacts/contacts_exportCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsImportCard(ctx context.Context, in *TLContactsImportCard, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContacts/contacts_importCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsSearch(ctx context.Context, in *TLContactsSearch, opts ...grpc.CallOption) (*Contacts_Found, error) {
	out := new(Contacts_Found)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContacts/contacts_search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsResolveUsername(ctx context.Context, in *TLContactsResolveUsername, opts ...grpc.CallOption) (*Contacts_ResolvedPeer, error) {
	out := new(Contacts_ResolvedPeer)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContacts/contacts_resolveUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsGetTopPeers(ctx context.Context, in *TLContactsGetTopPeers, opts ...grpc.CallOption) (*Contacts_TopPeers, error) {
	out := new(Contacts_TopPeers)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContacts/contacts_getTopPeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsResetTopPeerRating(ctx context.Context, in *TLContactsResetTopPeerRating, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContacts/contacts_resetTopPeerRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsResetSaved(ctx context.Context, in *TLContactsResetSaved, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContacts/contacts_resetSaved", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsGetContactIDs(ctx context.Context, in *TLContactsGetContactIDs, opts ...grpc.CallOption) (*VectorInt, error) {
	out := new(VectorInt)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContacts/contacts_getContactIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsDeleteContacts114(ctx context.Context, in *TLContactsDeleteContacts114, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContacts/contacts_deleteContacts114", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsDeleteByPhones(ctx context.Context, in *TLContactsDeleteByPhones, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContacts/contacts_deleteByPhones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsGetSaved(ctx context.Context, in *TLContactsGetSaved, opts ...grpc.CallOption) (*Vector_SavedContact, error) {
	out := new(Vector_SavedContact)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContacts/contacts_getSaved", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsToggleTopPeers(ctx context.Context, in *TLContactsToggleTopPeers, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContacts/contacts_toggleTopPeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsAddContact(ctx context.Context, in *TLContactsAddContact, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContacts/contacts_addContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsAcceptContact(ctx context.Context, in *TLContactsAcceptContact, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContacts/contacts_acceptContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCContactsClient) ContactsGetLocated(ctx context.Context, in *TLContactsGetLocated, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCContacts/contacts_getLocated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCContactsServer is the server API for RPCContacts service.
type RPCContactsServer interface {
	// contacts.applyFriend#408c0d8a json_content:string = IntResult;
	ContactsApplyFriend(context.Context, *TLContactsApplyFriend) (*IntResult, error)
	// contacts.auditApply#8d22f1fb json_content:string = IntResult;
	ContactsAuditApply(context.Context, *TLContactsAuditApply) (*IntResult, error)
	// contacts.getApplyList#3e392bb json_content:string = DataJSON;
	ContactsGetApplyList(context.Context, *TLContactsGetApplyList) (*DataJSON, error)
	// contacts.searchUser#b4670944 json_content:string = DataJSON;
	ContactsSearchUser(context.Context, *TLContactsSearchUser) (*DataJSON, error)
	// contacts.searchSource#f51b186d json_content:string = DataJSON;
	ContactsSearchSource(context.Context, *TLContactsSearchSource) (*DataJSON, error)
	// contacts.getStatuses#c4a353ee = Vector<ContactStatus>;
	ContactsGetStatuses(context.Context, *TLContactsGetStatuses) (*Vector_ContactStatus, error)
	// contacts.getContacts#c023849f hash:int = contacts.Contacts;
	ContactsGetContacts(context.Context, *TLContactsGetContacts) (*Contacts_Contacts, error)
	// contacts.importContacts#2c800be5 contacts:Vector<InputContact> = contacts.ImportedContacts;
	ContactsImportContacts(context.Context, *TLContactsImportContacts) (*Contacts_ImportedContacts, error)
	// contacts.deleteContact#8e953744 id:InputUser = contacts.Link;
	ContactsDeleteContact(context.Context, *TLContactsDeleteContact) (*Contacts_Link, error)
	// contacts.deleteContacts#59ab389e id:Vector<InputUser> = Bool;
	ContactsDeleteContacts(context.Context, *TLContactsDeleteContacts) (*Bool, error)
	// contacts.block#332b49fc id:InputUser = Bool;
	ContactsBlock(context.Context, *TLContactsBlock) (*Bool, error)
	// contacts.unblock#e54100bd id:InputUser = Bool;
	ContactsUnblock(context.Context, *TLContactsUnblock) (*Bool, error)
	// contacts.getBlocked#f57c350f offset:int limit:int = contacts.Blocked;
	ContactsGetBlocked(context.Context, *TLContactsGetBlocked) (*Contacts_Blocked, error)
	// contacts.exportCard#84e53737 = Vector<int>;
	ContactsExportCard(context.Context, *TLContactsExportCard) (*VectorInt, error)
	// contacts.importCard#4fe196fe export_card:Vector<int> = User;
	ContactsImportCard(context.Context, *TLContactsImportCard) (*User, error)
	// contacts.search#11f812d8 q:string limit:int = contacts.Found;
	ContactsSearch(context.Context, *TLContactsSearch) (*Contacts_Found, error)
	// contacts.resolveUsername#f93ccba3 username:string = contacts.ResolvedPeer;
	ContactsResolveUsername(context.Context, *TLContactsResolveUsername) (*Contacts_ResolvedPeer, error)
	// contacts.getTopPeers#d4982db5 flags:# correspondents:flags.0?true bots_pm:flags.1?true bots_inline:flags.2?true phone_calls:flags.3?true groups:flags.10?true channels:flags.15?true offset:int limit:int hash:int = contacts.TopPeers;
	ContactsGetTopPeers(context.Context, *TLContactsGetTopPeers) (*Contacts_TopPeers, error)
	// contacts.resetTopPeerRating#1ae373ac category:TopPeerCategory peer:InputPeer = Bool;
	ContactsResetTopPeerRating(context.Context, *TLContactsResetTopPeerRating) (*Bool, error)
	// contacts.resetSaved#879537f1 = Bool;
	ContactsResetSaved(context.Context, *TLContactsResetSaved) (*Bool, error)
	// contacts.getContactIDs#2caa4a42 hash:int = Vector<int>;
	ContactsGetContactIDs(context.Context, *TLContactsGetContactIDs) (*VectorInt, error)
	// contacts.deleteContacts#96a0e00 id:Vector<InputUser> = Updates;
	ContactsDeleteContacts114(context.Context, *TLContactsDeleteContacts114) (*Updates, error)
	// contacts.deleteByPhones#1013fd9e phones:Vector<string> = Bool;
	ContactsDeleteByPhones(context.Context, *TLContactsDeleteByPhones) (*Bool, error)
	// contacts.getSaved#82f1e39f = Vector<SavedContact>;
	ContactsGetSaved(context.Context, *TLContactsGetSaved) (*Vector_SavedContact, error)
	// contacts.toggleTopPeers#8514bdda enabled:Bool = Bool;
	ContactsToggleTopPeers(context.Context, *TLContactsToggleTopPeers) (*Bool, error)
	// contacts.addContact#e8f463d0 flags:# add_phone_privacy_exception:flags.0?true id:InputUser first_name:string last_name:string phone:string = Updates;
	ContactsAddContact(context.Context, *TLContactsAddContact) (*Updates, error)
	// contacts.acceptContact#f831a20f id:InputUser = Updates;
	ContactsAcceptContact(context.Context, *TLContactsAcceptContact) (*Updates, error)
	// contacts.getLocated#d348bc44 flags:# background:flags.1?true geo_point:InputGeoPoint self_expires:flags.0?int = Updates;
	ContactsGetLocated(context.Context, *TLContactsGetLocated) (*Updates, error)
}

// UnimplementedRPCContactsServer can be embedded to have forward compatible implementations.
type UnimplementedRPCContactsServer struct {
}

func (*UnimplementedRPCContactsServer) ContactsApplyFriend(ctx context.Context, req *TLContactsApplyFriend) (*IntResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsApplyFriend not implemented")
}
func (*UnimplementedRPCContactsServer) ContactsAuditApply(ctx context.Context, req *TLContactsAuditApply) (*IntResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsAuditApply not implemented")
}
func (*UnimplementedRPCContactsServer) ContactsGetApplyList(ctx context.Context, req *TLContactsGetApplyList) (*DataJSON, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetApplyList not implemented")
}
func (*UnimplementedRPCContactsServer) ContactsSearchUser(ctx context.Context, req *TLContactsSearchUser) (*DataJSON, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsSearchUser not implemented")
}
func (*UnimplementedRPCContactsServer) ContactsSearchSource(ctx context.Context, req *TLContactsSearchSource) (*DataJSON, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsSearchSource not implemented")
}
func (*UnimplementedRPCContactsServer) ContactsGetStatuses(ctx context.Context, req *TLContactsGetStatuses) (*Vector_ContactStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetStatuses not implemented")
}
func (*UnimplementedRPCContactsServer) ContactsGetContacts(ctx context.Context, req *TLContactsGetContacts) (*Contacts_Contacts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetContacts not implemented")
}
func (*UnimplementedRPCContactsServer) ContactsImportContacts(ctx context.Context, req *TLContactsImportContacts) (*Contacts_ImportedContacts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsImportContacts not implemented")
}
func (*UnimplementedRPCContactsServer) ContactsDeleteContact(ctx context.Context, req *TLContactsDeleteContact) (*Contacts_Link, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsDeleteContact not implemented")
}
func (*UnimplementedRPCContactsServer) ContactsDeleteContacts(ctx context.Context, req *TLContactsDeleteContacts) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsDeleteContacts not implemented")
}
func (*UnimplementedRPCContactsServer) ContactsBlock(ctx context.Context, req *TLContactsBlock) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsBlock not implemented")
}
func (*UnimplementedRPCContactsServer) ContactsUnblock(ctx context.Context, req *TLContactsUnblock) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsUnblock not implemented")
}
func (*UnimplementedRPCContactsServer) ContactsGetBlocked(ctx context.Context, req *TLContactsGetBlocked) (*Contacts_Blocked, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetBlocked not implemented")
}
func (*UnimplementedRPCContactsServer) ContactsExportCard(ctx context.Context, req *TLContactsExportCard) (*VectorInt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsExportCard not implemented")
}
func (*UnimplementedRPCContactsServer) ContactsImportCard(ctx context.Context, req *TLContactsImportCard) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsImportCard not implemented")
}
func (*UnimplementedRPCContactsServer) ContactsSearch(ctx context.Context, req *TLContactsSearch) (*Contacts_Found, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsSearch not implemented")
}
func (*UnimplementedRPCContactsServer) ContactsResolveUsername(ctx context.Context, req *TLContactsResolveUsername) (*Contacts_ResolvedPeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsResolveUsername not implemented")
}
func (*UnimplementedRPCContactsServer) ContactsGetTopPeers(ctx context.Context, req *TLContactsGetTopPeers) (*Contacts_TopPeers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetTopPeers not implemented")
}
func (*UnimplementedRPCContactsServer) ContactsResetTopPeerRating(ctx context.Context, req *TLContactsResetTopPeerRating) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsResetTopPeerRating not implemented")
}
func (*UnimplementedRPCContactsServer) ContactsResetSaved(ctx context.Context, req *TLContactsResetSaved) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsResetSaved not implemented")
}
func (*UnimplementedRPCContactsServer) ContactsGetContactIDs(ctx context.Context, req *TLContactsGetContactIDs) (*VectorInt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetContactIDs not implemented")
}
func (*UnimplementedRPCContactsServer) ContactsDeleteContacts114(ctx context.Context, req *TLContactsDeleteContacts114) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsDeleteContacts114 not implemented")
}
func (*UnimplementedRPCContactsServer) ContactsDeleteByPhones(ctx context.Context, req *TLContactsDeleteByPhones) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsDeleteByPhones not implemented")
}
func (*UnimplementedRPCContactsServer) ContactsGetSaved(ctx context.Context, req *TLContactsGetSaved) (*Vector_SavedContact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetSaved not implemented")
}
func (*UnimplementedRPCContactsServer) ContactsToggleTopPeers(ctx context.Context, req *TLContactsToggleTopPeers) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsToggleTopPeers not implemented")
}
func (*UnimplementedRPCContactsServer) ContactsAddContact(ctx context.Context, req *TLContactsAddContact) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsAddContact not implemented")
}
func (*UnimplementedRPCContactsServer) ContactsAcceptContact(ctx context.Context, req *TLContactsAcceptContact) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsAcceptContact not implemented")
}
func (*UnimplementedRPCContactsServer) ContactsGetLocated(ctx context.Context, req *TLContactsGetLocated) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactsGetLocated not implemented")
}

func RegisterRPCContactsServer(s *grpc.Server, srv RPCContactsServer) {
	s.RegisterService(&_RPCContacts_serviceDesc, srv)
}

func _RPCContacts_ContactsApplyFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsApplyFriend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsApplyFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContacts/ContactsApplyFriend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsApplyFriend(ctx, req.(*TLContactsApplyFriend))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsAuditApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsAuditApply)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsAuditApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContacts/ContactsAuditApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsAuditApply(ctx, req.(*TLContactsAuditApply))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsGetApplyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsGetApplyList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsGetApplyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContacts/ContactsGetApplyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsGetApplyList(ctx, req.(*TLContactsGetApplyList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsSearchUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsSearchUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsSearchUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContacts/ContactsSearchUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsSearchUser(ctx, req.(*TLContactsSearchUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsSearchSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsSearchSource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsSearchSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContacts/ContactsSearchSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsSearchSource(ctx, req.(*TLContactsSearchSource))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsGetStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsGetStatuses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsGetStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContacts/ContactsGetStatuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsGetStatuses(ctx, req.(*TLContactsGetStatuses))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsGetContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsGetContacts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsGetContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContacts/ContactsGetContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsGetContacts(ctx, req.(*TLContactsGetContacts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsImportContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsImportContacts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsImportContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContacts/ContactsImportContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsImportContacts(ctx, req.(*TLContactsImportContacts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsDeleteContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsDeleteContact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsDeleteContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContacts/ContactsDeleteContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsDeleteContact(ctx, req.(*TLContactsDeleteContact))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsDeleteContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsDeleteContacts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsDeleteContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContacts/ContactsDeleteContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsDeleteContacts(ctx, req.(*TLContactsDeleteContacts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContacts/ContactsBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsBlock(ctx, req.(*TLContactsBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsUnblock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsUnblock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsUnblock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContacts/ContactsUnblock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsUnblock(ctx, req.(*TLContactsUnblock))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsGetBlocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsGetBlocked)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsGetBlocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContacts/ContactsGetBlocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsGetBlocked(ctx, req.(*TLContactsGetBlocked))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsExportCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsExportCard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsExportCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContacts/ContactsExportCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsExportCard(ctx, req.(*TLContactsExportCard))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsImportCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsImportCard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsImportCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContacts/ContactsImportCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsImportCard(ctx, req.(*TLContactsImportCard))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContacts/ContactsSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsSearch(ctx, req.(*TLContactsSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsResolveUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsResolveUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsResolveUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContacts/ContactsResolveUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsResolveUsername(ctx, req.(*TLContactsResolveUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsGetTopPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsGetTopPeers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsGetTopPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContacts/ContactsGetTopPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsGetTopPeers(ctx, req.(*TLContactsGetTopPeers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsResetTopPeerRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsResetTopPeerRating)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsResetTopPeerRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContacts/ContactsResetTopPeerRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsResetTopPeerRating(ctx, req.(*TLContactsResetTopPeerRating))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsResetSaved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsResetSaved)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsResetSaved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContacts/ContactsResetSaved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsResetSaved(ctx, req.(*TLContactsResetSaved))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsGetContactIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsGetContactIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsGetContactIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContacts/ContactsGetContactIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsGetContactIDs(ctx, req.(*TLContactsGetContactIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsDeleteContacts114_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsDeleteContacts114)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsDeleteContacts114(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContacts/ContactsDeleteContacts114",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsDeleteContacts114(ctx, req.(*TLContactsDeleteContacts114))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsDeleteByPhones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsDeleteByPhones)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsDeleteByPhones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContacts/ContactsDeleteByPhones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsDeleteByPhones(ctx, req.(*TLContactsDeleteByPhones))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsGetSaved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsGetSaved)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsGetSaved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContacts/ContactsGetSaved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsGetSaved(ctx, req.(*TLContactsGetSaved))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsToggleTopPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsToggleTopPeers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsToggleTopPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContacts/ContactsToggleTopPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsToggleTopPeers(ctx, req.(*TLContactsToggleTopPeers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsAddContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsAddContact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsAddContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContacts/ContactsAddContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsAddContact(ctx, req.(*TLContactsAddContact))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsAcceptContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsAcceptContact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsAcceptContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContacts/ContactsAcceptContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsAcceptContact(ctx, req.(*TLContactsAcceptContact))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCContacts_ContactsGetLocated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLContactsGetLocated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCContactsServer).ContactsGetLocated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCContacts/ContactsGetLocated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCContactsServer).ContactsGetLocated(ctx, req.(*TLContactsGetLocated))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCContacts_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCContacts",
	HandlerType: (*RPCContactsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "contacts_applyFriend",
			Handler:    _RPCContacts_ContactsApplyFriend_Handler,
		},
		{
			MethodName: "contacts_auditApply",
			Handler:    _RPCContacts_ContactsAuditApply_Handler,
		},
		{
			MethodName: "contacts_getApplyList",
			Handler:    _RPCContacts_ContactsGetApplyList_Handler,
		},
		{
			MethodName: "contacts_searchUser",
			Handler:    _RPCContacts_ContactsSearchUser_Handler,
		},
		{
			MethodName: "contacts_searchSource",
			Handler:    _RPCContacts_ContactsSearchSource_Handler,
		},
		{
			MethodName: "contacts_getStatuses",
			Handler:    _RPCContacts_ContactsGetStatuses_Handler,
		},
		{
			MethodName: "contacts_getContacts",
			Handler:    _RPCContacts_ContactsGetContacts_Handler,
		},
		{
			MethodName: "contacts_importContacts",
			Handler:    _RPCContacts_ContactsImportContacts_Handler,
		},
		{
			MethodName: "contacts_deleteContact",
			Handler:    _RPCContacts_ContactsDeleteContact_Handler,
		},
		{
			MethodName: "contacts_deleteContacts",
			Handler:    _RPCContacts_ContactsDeleteContacts_Handler,
		},
		{
			MethodName: "contacts_block",
			Handler:    _RPCContacts_ContactsBlock_Handler,
		},
		{
			MethodName: "contacts_unblock",
			Handler:    _RPCContacts_ContactsUnblock_Handler,
		},
		{
			MethodName: "contacts_getBlocked",
			Handler:    _RPCContacts_ContactsGetBlocked_Handler,
		},
		{
			MethodName: "contacts_exportCard",
			Handler:    _RPCContacts_ContactsExportCard_Handler,
		},
		{
			MethodName: "contacts_importCard",
			Handler:    _RPCContacts_ContactsImportCard_Handler,
		},
		{
			MethodName: "contacts_search",
			Handler:    _RPCContacts_ContactsSearch_Handler,
		},
		{
			MethodName: "contacts_resolveUsername",
			Handler:    _RPCContacts_ContactsResolveUsername_Handler,
		},
		{
			MethodName: "contacts_getTopPeers",
			Handler:    _RPCContacts_ContactsGetTopPeers_Handler,
		},
		{
			MethodName: "contacts_resetTopPeerRating",
			Handler:    _RPCContacts_ContactsResetTopPeerRating_Handler,
		},
		{
			MethodName: "contacts_resetSaved",
			Handler:    _RPCContacts_ContactsResetSaved_Handler,
		},
		{
			MethodName: "contacts_getContactIDs",
			Handler:    _RPCContacts_ContactsGetContactIDs_Handler,
		},
		{
			MethodName: "contacts_deleteContacts114",
			Handler:    _RPCContacts_ContactsDeleteContacts114_Handler,
		},
		{
			MethodName: "contacts_deleteByPhones",
			Handler:    _RPCContacts_ContactsDeleteByPhones_Handler,
		},
		{
			MethodName: "contacts_getSaved",
			Handler:    _RPCContacts_ContactsGetSaved_Handler,
		},
		{
			MethodName: "contacts_toggleTopPeers",
			Handler:    _RPCContacts_ContactsToggleTopPeers_Handler,
		},
		{
			MethodName: "contacts_addContact",
			Handler:    _RPCContacts_ContactsAddContact_Handler,
		},
		{
			MethodName: "contacts_acceptContact",
			Handler:    _RPCContacts_ContactsAcceptContact_Handler,
		},
		{
			MethodName: "contacts_getLocated",
			Handler:    _RPCContacts_ContactsGetLocated_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

// RPCUpdatesClient is the client API for RPCUpdates service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCUpdatesClient interface {
	// updates.getState#edd4882a = updates.State;
	UpdatesGetState(ctx context.Context, in *TLUpdatesGetState, opts ...grpc.CallOption) (*Updates_State, error)
	// updates.getDifference#25939651 flags:# pts:int pts_total_limit:flags.0?int date:int qts:int = updates.Difference;
	UpdatesGetDifference(ctx context.Context, in *TLUpdatesGetDifference, opts ...grpc.CallOption) (*Updates_Difference, error)
	// updates.getChannelDifference#3173d78 flags:# force:flags.0?true channel:InputChannel filter:ChannelMessagesFilter pts:int limit:int = updates.ChannelDifference;
	UpdatesGetChannelDifference(ctx context.Context, in *TLUpdatesGetChannelDifference, opts ...grpc.CallOption) (*Updates_ChannelDifference, error)
	// updates.getChannelDifference#bb32d7c0 channel:InputChannel filter:ChannelMessagesFilter pts:int limit:int = updates.ChannelDifference;
	UpdatesGetChannelDifference57(ctx context.Context, in *TLUpdatesGetChannelDifference57, opts ...grpc.CallOption) (*Updates_ChannelDifference, error)
}

type rPCUpdatesClient struct {
	cc *grpc.ClientConn
}

func NewRPCUpdatesClient(cc *grpc.ClientConn) RPCUpdatesClient {
	return &rPCUpdatesClient{cc}
}

func (c *rPCUpdatesClient) UpdatesGetState(ctx context.Context, in *TLUpdatesGetState, opts ...grpc.CallOption) (*Updates_State, error) {
	out := new(Updates_State)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUpdates/updates_getState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUpdatesClient) UpdatesGetDifference(ctx context.Context, in *TLUpdatesGetDifference, opts ...grpc.CallOption) (*Updates_Difference, error) {
	out := new(Updates_Difference)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUpdates/updates_getDifference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUpdatesClient) UpdatesGetChannelDifference(ctx context.Context, in *TLUpdatesGetChannelDifference, opts ...grpc.CallOption) (*Updates_ChannelDifference, error) {
	out := new(Updates_ChannelDifference)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUpdates/updates_getChannelDifference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUpdatesClient) UpdatesGetChannelDifference57(ctx context.Context, in *TLUpdatesGetChannelDifference57, opts ...grpc.CallOption) (*Updates_ChannelDifference, error) {
	out := new(Updates_ChannelDifference)
	err := c.cc.Invoke(ctx, "/mtproto.RPCUpdates/updates_getChannelDifference57", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCUpdatesServer is the server API for RPCUpdates service.
type RPCUpdatesServer interface {
	// updates.getState#edd4882a = updates.State;
	UpdatesGetState(context.Context, *TLUpdatesGetState) (*Updates_State, error)
	// updates.getDifference#25939651 flags:# pts:int pts_total_limit:flags.0?int date:int qts:int = updates.Difference;
	UpdatesGetDifference(context.Context, *TLUpdatesGetDifference) (*Updates_Difference, error)
	// updates.getChannelDifference#3173d78 flags:# force:flags.0?true channel:InputChannel filter:ChannelMessagesFilter pts:int limit:int = updates.ChannelDifference;
	UpdatesGetChannelDifference(context.Context, *TLUpdatesGetChannelDifference) (*Updates_ChannelDifference, error)
	// updates.getChannelDifference#bb32d7c0 channel:InputChannel filter:ChannelMessagesFilter pts:int limit:int = updates.ChannelDifference;
	UpdatesGetChannelDifference57(context.Context, *TLUpdatesGetChannelDifference57) (*Updates_ChannelDifference, error)
}

// UnimplementedRPCUpdatesServer can be embedded to have forward compatible implementations.
type UnimplementedRPCUpdatesServer struct {
}

func (*UnimplementedRPCUpdatesServer) UpdatesGetState(ctx context.Context, req *TLUpdatesGetState) (*Updates_State, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatesGetState not implemented")
}
func (*UnimplementedRPCUpdatesServer) UpdatesGetDifference(ctx context.Context, req *TLUpdatesGetDifference) (*Updates_Difference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatesGetDifference not implemented")
}
func (*UnimplementedRPCUpdatesServer) UpdatesGetChannelDifference(ctx context.Context, req *TLUpdatesGetChannelDifference) (*Updates_ChannelDifference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatesGetChannelDifference not implemented")
}
func (*UnimplementedRPCUpdatesServer) UpdatesGetChannelDifference57(ctx context.Context, req *TLUpdatesGetChannelDifference57) (*Updates_ChannelDifference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatesGetChannelDifference57 not implemented")
}

func RegisterRPCUpdatesServer(s *grpc.Server, srv RPCUpdatesServer) {
	s.RegisterService(&_RPCUpdates_serviceDesc, srv)
}

func _RPCUpdates_UpdatesGetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUpdatesGetState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUpdatesServer).UpdatesGetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUpdates/UpdatesGetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUpdatesServer).UpdatesGetState(ctx, req.(*TLUpdatesGetState))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUpdates_UpdatesGetDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUpdatesGetDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUpdatesServer).UpdatesGetDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUpdates/UpdatesGetDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUpdatesServer).UpdatesGetDifference(ctx, req.(*TLUpdatesGetDifference))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUpdates_UpdatesGetChannelDifference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUpdatesGetChannelDifference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUpdatesServer).UpdatesGetChannelDifference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUpdates/UpdatesGetChannelDifference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUpdatesServer).UpdatesGetChannelDifference(ctx, req.(*TLUpdatesGetChannelDifference))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUpdates_UpdatesGetChannelDifference57_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUpdatesGetChannelDifference57)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUpdatesServer).UpdatesGetChannelDifference57(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCUpdates/UpdatesGetChannelDifference57",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUpdatesServer).UpdatesGetChannelDifference57(ctx, req.(*TLUpdatesGetChannelDifference57))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCUpdates_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCUpdates",
	HandlerType: (*RPCUpdatesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "updates_getState",
			Handler:    _RPCUpdates_UpdatesGetState_Handler,
		},
		{
			MethodName: "updates_getDifference",
			Handler:    _RPCUpdates_UpdatesGetDifference_Handler,
		},
		{
			MethodName: "updates_getChannelDifference",
			Handler:    _RPCUpdates_UpdatesGetChannelDifference_Handler,
		},
		{
			MethodName: "updates_getChannelDifference57",
			Handler:    _RPCUpdates_UpdatesGetChannelDifference57_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

// RPCFoldersClient is the client API for RPCFolders service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RPCFoldersClient interface {
	// folders.editPeerFolders#6847d0ab folder_peers:Vector<InputFolderPeer> = Updates;
	FoldersEditPeerFolders(ctx context.Context, in *TLFoldersEditPeerFolders, opts ...grpc.CallOption) (*Updates, error)
	// folders.deleteFolder#1c295881 folder_id:int = Updates;
	FoldersDeleteFolder(ctx context.Context, in *TLFoldersDeleteFolder, opts ...grpc.CallOption) (*Updates, error)
}

type rPCFoldersClient struct {
	cc *grpc.ClientConn
}

func NewRPCFoldersClient(cc *grpc.ClientConn) RPCFoldersClient {
	return &rPCFoldersClient{cc}
}

func (c *rPCFoldersClient) FoldersEditPeerFolders(ctx context.Context, in *TLFoldersEditPeerFolders, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCFolders/folders_editPeerFolders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCFoldersClient) FoldersDeleteFolder(ctx context.Context, in *TLFoldersDeleteFolder, opts ...grpc.CallOption) (*Updates, error) {
	out := new(Updates)
	err := c.cc.Invoke(ctx, "/mtproto.RPCFolders/folders_deleteFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCFoldersServer is the server API for RPCFolders service.
type RPCFoldersServer interface {
	// folders.editPeerFolders#6847d0ab folder_peers:Vector<InputFolderPeer> = Updates;
	FoldersEditPeerFolders(context.Context, *TLFoldersEditPeerFolders) (*Updates, error)
	// folders.deleteFolder#1c295881 folder_id:int = Updates;
	FoldersDeleteFolder(context.Context, *TLFoldersDeleteFolder) (*Updates, error)
}

// UnimplementedRPCFoldersServer can be embedded to have forward compatible implementations.
type UnimplementedRPCFoldersServer struct {
}

func (*UnimplementedRPCFoldersServer) FoldersEditPeerFolders(ctx context.Context, req *TLFoldersEditPeerFolders) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FoldersEditPeerFolders not implemented")
}
func (*UnimplementedRPCFoldersServer) FoldersDeleteFolder(ctx context.Context, req *TLFoldersDeleteFolder) (*Updates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FoldersDeleteFolder not implemented")
}

func RegisterRPCFoldersServer(s *grpc.Server, srv RPCFoldersServer) {
	s.RegisterService(&_RPCFolders_serviceDesc, srv)
}

func _RPCFolders_FoldersEditPeerFolders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLFoldersEditPeerFolders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFoldersServer).FoldersEditPeerFolders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCFolders/FoldersEditPeerFolders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFoldersServer).FoldersEditPeerFolders(ctx, req.(*TLFoldersEditPeerFolders))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCFolders_FoldersDeleteFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLFoldersDeleteFolder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCFoldersServer).FoldersDeleteFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mtproto.RPCFolders/FoldersDeleteFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCFoldersServer).FoldersDeleteFolder(ctx, req.(*TLFoldersDeleteFolder))
	}
	return interceptor(ctx, in, info, handler)
}

var _RPCFolders_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mtproto.RPCFolders",
	HandlerType: (*RPCFoldersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "folders_editPeerFolders",
			Handler:    _RPCFolders_FoldersEditPeerFolders_Handler,
		},
		{
			MethodName: "folders_deleteFolder",
			Handler:    _RPCFolders_FoldersDeleteFolder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.tl.sync_service.proto",
}

func (m *TLInvokeAfterMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLInvokeAfterMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLInvokeAfterMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0x12
	}
	if m.MsgId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLInvokeAfterMsgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLInvokeAfterMsgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLInvokeAfterMsgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MsgIds) > 0 {
		dAtA2 := make([]byte, len(m.MsgIds)*10)
		var j1 int
		for _, num1 := range m.MsgIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLInitConnection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLInitConnection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLInitConnection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.LangCode) > 0 {
		i -= len(m.LangCode)
		copy(dAtA[i:], m.LangCode)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.LangCode)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.LangPack) > 0 {
		i -= len(m.LangPack)
		copy(dAtA[i:], m.LangPack)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.LangPack)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SystemLangCode) > 0 {
		i -= len(m.SystemLangCode)
		copy(dAtA[i:], m.SystemLangCode)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.SystemLangCode)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AppVersion) > 0 {
		i -= len(m.AppVersion)
		copy(dAtA[i:], m.AppVersion)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.AppVersion)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SystemVersion) > 0 {
		i -= len(m.SystemVersion)
		copy(dAtA[i:], m.SystemVersion)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.SystemVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DeviceModel) > 0 {
		i -= len(m.DeviceModel)
		copy(dAtA[i:], m.DeviceModel)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.DeviceModel)))
		i--
		dAtA[i] = 0x12
	}
	if m.ApiId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ApiId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLInvokeWithLayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLInvokeWithLayer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLInvokeWithLayer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0x12
	}
	if m.Layer != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Layer))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLInvokeWithoutUpdates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLInvokeWithoutUpdates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLInvokeWithoutUpdates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAuthCheckPhone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAuthCheckPhone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAuthCheckPhone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAuthSendCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAuthSendCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAuthSendCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApiHash) > 0 {
		i -= len(m.ApiHash)
		copy(dAtA[i:], m.ApiHash)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.ApiHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.ApiId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ApiId))
		i--
		dAtA[i] = 0x28
	}
	if m.CurrentNumber != nil {
		{
			size, err := m.CurrentNumber.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AllowFlashcall {
		i--
		if m.AllowFlashcall {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLAuthSignUp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAuthSignUp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAuthSignUp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PhoneCode) > 0 {
		i -= len(m.PhoneCode)
		copy(dAtA[i:], m.PhoneCode)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PhoneCodeHash) > 0 {
		i -= len(m.PhoneCodeHash)
		copy(dAtA[i:], m.PhoneCodeHash)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneCodeHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAuthSignIn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAuthSignIn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAuthSignIn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PhoneCode) > 0 {
		i -= len(m.PhoneCode)
		copy(dAtA[i:], m.PhoneCode)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PhoneCodeHash) > 0 {
		i -= len(m.PhoneCodeHash)
		copy(dAtA[i:], m.PhoneCodeHash)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneCodeHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAuthLogOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAuthLogOut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAuthLogOut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLAuthResetAuthorizations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAuthResetAuthorizations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAuthResetAuthorizations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLAuthSendInvites) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAuthSendInvites) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAuthSendInvites) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PhoneNumbers) > 0 {
		for iNdEx := len(m.PhoneNumbers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PhoneNumbers[iNdEx])
			copy(dAtA[i:], m.PhoneNumbers[iNdEx])
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneNumbers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TLAuthExportAuthorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAuthExportAuthorization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAuthExportAuthorization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DcId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.DcId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLAuthImportAuthorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAuthImportAuthorization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAuthImportAuthorization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bytes) > 0 {
		i -= len(m.Bytes)
		copy(dAtA[i:], m.Bytes)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Bytes)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLAuthBindTempAuthKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAuthBindTempAuthKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAuthBindTempAuthKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EncryptedMessage) > 0 {
		i -= len(m.EncryptedMessage)
		copy(dAtA[i:], m.EncryptedMessage)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.EncryptedMessage)))
		i--
		dAtA[i] = 0x22
	}
	if m.ExpiresAt != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ExpiresAt))
		i--
		dAtA[i] = 0x18
	}
	if m.Nonce != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if m.PermAuthKeyId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.PermAuthKeyId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLAuthImportBotAuthorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAuthImportBotAuthorization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAuthImportBotAuthorization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BotAuthToken) > 0 {
		i -= len(m.BotAuthToken)
		copy(dAtA[i:], m.BotAuthToken)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.BotAuthToken)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ApiHash) > 0 {
		i -= len(m.ApiHash)
		copy(dAtA[i:], m.ApiHash)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.ApiHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ApiId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ApiId))
		i--
		dAtA[i] = 0x10
	}
	if m.Flags != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Flags))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLAuthCheckPassword) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAuthCheckPassword) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAuthCheckPassword) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PasswordHash) > 0 {
		i -= len(m.PasswordHash)
		copy(dAtA[i:], m.PasswordHash)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PasswordHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAuthRequestPasswordRecovery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAuthRequestPasswordRecovery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAuthRequestPasswordRecovery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLAuthRecoverPassword) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAuthRecoverPassword) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAuthRecoverPassword) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAuthResendCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAuthResendCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAuthResendCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PhoneCodeHash) > 0 {
		i -= len(m.PhoneCodeHash)
		copy(dAtA[i:], m.PhoneCodeHash)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneCodeHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAuthCancelCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAuthCancelCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAuthCancelCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PhoneCodeHash) > 0 {
		i -= len(m.PhoneCodeHash)
		copy(dAtA[i:], m.PhoneCodeHash)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneCodeHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAuthDropTempAuthKeys) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAuthDropTempAuthKeys) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAuthDropTempAuthKeys) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExceptAuthKeys) > 0 {
		dAtA5 := make([]byte, len(m.ExceptAuthKeys)*10)
		var j4 int
		for _, num1 := range m.ExceptAuthKeys {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAuthCheckInviteCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAuthCheckInviteCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAuthCheckInviteCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountRegisterDevice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountRegisterDevice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountRegisterDevice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if m.TokenType != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.TokenType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountUnregisterDevice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountUnregisterDevice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountUnregisterDevice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if m.TokenType != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.TokenType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountUpdateNotifySettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountUpdateNotifySettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountUpdateNotifySettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Settings != nil {
		{
			size, err := m.Settings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountGetNotifySettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountGetNotifySettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountGetNotifySettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountResetNotifySettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountResetNotifySettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountResetNotifySettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLAccountUpdateProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountUpdateProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountUpdateProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.About) > 0 {
		i -= len(m.About)
		copy(dAtA[i:], m.About)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.About)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountUpdateStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountUpdateStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountUpdateStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offline != nil {
		{
			size, err := m.Offline.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountGetWallPapers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountGetWallPapers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountGetWallPapers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLAccountReportPeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountReportPeer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountReportPeer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Reason != nil {
		{
			size, err := m.Reason.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountCheckUsername) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountCheckUsername) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountCheckUsername) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountUpdateUsername) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountUpdateUsername) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountUpdateUsername) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountGetPrivacy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountGetPrivacy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountGetPrivacy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountSetPrivacy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountSetPrivacy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountSetPrivacy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountDeleteAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountDeleteAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountDeleteAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountGetAccountTTL) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountGetAccountTTL) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountGetAccountTTL) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLAccountSetAccountTTL) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountSetAccountTTL) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountSetAccountTTL) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ttl != nil {
		{
			size, err := m.Ttl.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountSendChangePhoneCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountSendChangePhoneCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountSendChangePhoneCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentNumber != nil {
		{
			size, err := m.CurrentNumber.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AllowFlashcall {
		i--
		if m.AllowFlashcall {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountChangePhone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountChangePhone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountChangePhone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PhoneCode) > 0 {
		i -= len(m.PhoneCode)
		copy(dAtA[i:], m.PhoneCode)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PhoneCodeHash) > 0 {
		i -= len(m.PhoneCodeHash)
		copy(dAtA[i:], m.PhoneCodeHash)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneCodeHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountUpdateDeviceLocked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountUpdateDeviceLocked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountUpdateDeviceLocked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Period != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountGetAuthorizations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountGetAuthorizations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountGetAuthorizations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLAccountResetAuthorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountResetAuthorization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountResetAuthorization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hash != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountGetPassword) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountGetPassword) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountGetPassword) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLAccountGetPasswordSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountGetPasswordSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountGetPasswordSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CurrentPasswordHash) > 0 {
		i -= len(m.CurrentPasswordHash)
		copy(dAtA[i:], m.CurrentPasswordHash)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.CurrentPasswordHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountUpdatePasswordSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountUpdatePasswordSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountUpdatePasswordSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewSettings != nil {
		{
			size, err := m.NewSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CurrentPasswordHash) > 0 {
		i -= len(m.CurrentPasswordHash)
		copy(dAtA[i:], m.CurrentPasswordHash)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.CurrentPasswordHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountSendConfirmPhoneCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountSendConfirmPhoneCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountSendConfirmPhoneCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentNumber != nil {
		{
			size, err := m.CurrentNumber.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AllowFlashcall {
		i--
		if m.AllowFlashcall {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountConfirmPhone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountConfirmPhone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountConfirmPhone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PhoneCode) > 0 {
		i -= len(m.PhoneCode)
		copy(dAtA[i:], m.PhoneCode)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PhoneCodeHash) > 0 {
		i -= len(m.PhoneCodeHash)
		copy(dAtA[i:], m.PhoneCodeHash)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneCodeHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountGetTmpPassword) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountGetTmpPassword) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountGetTmpPassword) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Period != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PasswordHash) > 0 {
		i -= len(m.PasswordHash)
		copy(dAtA[i:], m.PasswordHash)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PasswordHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLUsersGetUsers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUsersGetUsers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUsersGetUsers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		for iNdEx := len(m.Id) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Id[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TLUsersGetFullUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUsersGetFullUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUsersGetFullUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLUsersGetUserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUsersGetUserInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUsersGetUserInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLUsersGetUserInfoList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUsersGetUserInfoList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUsersGetUserInfoList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x18
	}
	if m.Offset != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUsersGetEnvelopeState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUsersGetEnvelopeState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUsersGetEnvelopeState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccessHash != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x10
	}
	if m.Eid != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Eid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUsersGetEnvelopeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUsersGetEnvelopeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUsersGetEnvelopeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccessHash != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.AccessHash))
		i--
		dAtA[i] = 0x10
	}
	if m.Eid != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Eid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUsersGetPointsHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUsersGetPointsHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUsersGetPointsHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Year != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Year))
		i--
		dAtA[i] = 0x20
	}
	if m.Limit != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.Offset != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUsersGetPointsRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUsersGetPointsRank) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUsersGetPointsRank) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x18
	}
	if m.FromRank != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.FromRank))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUsersSetPasswd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUsersSetPasswd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUsersSetPasswd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Passwd) > 0 {
		i -= len(m.Passwd)
		copy(dAtA[i:], m.Passwd)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Passwd)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OldPass) > 0 {
		i -= len(m.OldPass)
		copy(dAtA[i:], m.OldPass)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.OldPass)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PhoneCode) > 0 {
		i -= len(m.PhoneCode)
		copy(dAtA[i:], m.PhoneCode)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneCode)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUsersCheckPasswd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUsersCheckPasswd) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUsersCheckPasswd) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Passwd) > 0 {
		i -= len(m.Passwd)
		copy(dAtA[i:], m.Passwd)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Passwd)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUsersCheckResetPasswdPhoneCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUsersCheckResetPasswdPhoneCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUsersCheckResetPasswdPhoneCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PhoneCode) > 0 {
		i -= len(m.PhoneCode)
		copy(dAtA[i:], m.PhoneCode)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneCode)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUsersSendResetPasswdPhoneCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUsersSendResetPasswdPhoneCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUsersSendResetPasswdPhoneCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUsersSetGender) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUsersSetGender) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUsersSetGender) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JsonContent) > 0 {
		i -= len(m.JsonContent)
		copy(dAtA[i:], m.JsonContent)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.JsonContent)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLUsersSetUserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUsersSetUserInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUsersSetUserInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JsonContent) > 0 {
		i -= len(m.JsonContent)
		copy(dAtA[i:], m.JsonContent)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.JsonContent)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLContactsApplyFriend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLContactsApplyFriend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLContactsApplyFriend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JsonContent) > 0 {
		i -= len(m.JsonContent)
		copy(dAtA[i:], m.JsonContent)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.JsonContent)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLContactsAuditApply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLContactsAuditApply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLContactsAuditApply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JsonContent) > 0 {
		i -= len(m.JsonContent)
		copy(dAtA[i:], m.JsonContent)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.JsonContent)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLContactsGetApplyList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLContactsGetApplyList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLContactsGetApplyList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JsonContent) > 0 {
		i -= len(m.JsonContent)
		copy(dAtA[i:], m.JsonContent)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.JsonContent)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLContactsSearchUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLContactsSearchUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLContactsSearchUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JsonContent) > 0 {
		i -= len(m.JsonContent)
		copy(dAtA[i:], m.JsonContent)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.JsonContent)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLContactsSearchSource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLContactsSearchSource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLContactsSearchSource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JsonContent) > 0 {
		i -= len(m.JsonContent)
		copy(dAtA[i:], m.JsonContent)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.JsonContent)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLContactsGetStatuses) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLContactsGetStatuses) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLContactsGetStatuses) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLContactsGetContacts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLContactsGetContacts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLContactsGetContacts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hash != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLContactsImportContacts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLContactsImportContacts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLContactsImportContacts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Contacts) > 0 {
		for iNdEx := len(m.Contacts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contacts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TLContactsDeleteContact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLContactsDeleteContact) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLContactsDeleteContact) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLContactsDeleteContacts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLContactsDeleteContacts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLContactsDeleteContacts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		for iNdEx := len(m.Id) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Id[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TLContactsBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLContactsBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLContactsBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLContactsUnblock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLContactsUnblock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLContactsUnblock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLContactsGetBlocked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLContactsGetBlocked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLContactsGetBlocked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Offset != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLContactsExportCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLContactsExportCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLContactsExportCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLContactsImportCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLContactsImportCard) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLContactsImportCard) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExportCard) > 0 {
		dAtA24 := make([]byte, len(m.ExportCard)*10)
		var j23 int
		for _, num1 := range m.ExportCard {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA24[j23] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j23++
			}
			dAtA24[j23] = uint8(num)
			j23++
		}
		i -= j23
		copy(dAtA[i:], dAtA24[:j23])
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(j23))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLContactsSearch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLContactsSearch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLContactsSearch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Q) > 0 {
		i -= len(m.Q)
		copy(dAtA[i:], m.Q)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Q)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLContactsResolveUsername) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLContactsResolveUsername) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLContactsResolveUsername) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLContactsGetTopPeers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLContactsGetTopPeers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLContactsGetTopPeers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hash != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x50
	}
	if m.Limit != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x48
	}
	if m.Offset != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x40
	}
	if m.Channels {
		i--
		if m.Channels {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Groups {
		i--
		if m.Groups {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.PhoneCalls {
		i--
		if m.PhoneCalls {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.BotsInline {
		i--
		if m.BotsInline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.BotsPm {
		i--
		if m.BotsPm {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Correspondents {
		i--
		if m.Correspondents {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLContactsResetTopPeerRating) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLContactsResetTopPeerRating) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLContactsResetTopPeerRating) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Category != nil {
		{
			size, err := m.Category.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLContactsResetSaved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLContactsResetSaved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLContactsResetSaved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetMessages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetMessages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA28 := make([]byte, len(m.Id)*10)
		var j27 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA28[j27] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j27++
			}
			dAtA28[j27] = uint8(num)
			j27++
		}
		i -= j27
		copy(dAtA[i:], dAtA28[:j27])
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(j27))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetDialogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetDialogs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetDialogs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x30
	}
	if m.OffsetPeer != nil {
		{
			size, err := m.OffsetPeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.OffsetId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.OffsetId))
		i--
		dAtA[i] = 0x20
	}
	if m.OffsetDate != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.OffsetDate))
		i--
		dAtA[i] = 0x18
	}
	if m.ExcludePinned {
		i--
		if m.ExcludePinned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MinId))
		i--
		dAtA[i] = 0x38
	}
	if m.MaxId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MaxId))
		i--
		dAtA[i] = 0x30
	}
	if m.Limit != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x28
	}
	if m.AddOffset != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.AddOffset))
		i--
		dAtA[i] = 0x20
	}
	if m.OffsetDate != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.OffsetDate))
		i--
		dAtA[i] = 0x18
	}
	if m.OffsetId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.OffsetId))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSearch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSearch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSearch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MinId))
		i--
		dAtA[i] = 0x60
	}
	if m.MaxId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MaxId))
		i--
		dAtA[i] = 0x58
	}
	if m.Limit != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x50
	}
	if m.AddOffset != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.AddOffset))
		i--
		dAtA[i] = 0x48
	}
	if m.OffsetId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.OffsetId))
		i--
		dAtA[i] = 0x40
	}
	if m.MaxDate != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MaxDate))
		i--
		dAtA[i] = 0x38
	}
	if m.MinDate != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MinDate))
		i--
		dAtA[i] = 0x30
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.FromId != nil {
		{
			size, err := m.FromId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Q) > 0 {
		i -= len(m.Q)
		copy(dAtA[i:], m.Q)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Q)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesReadHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesReadHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesReadHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MaxId))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesDeleteHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesDeleteHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesDeleteHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MaxId))
		i--
		dAtA[i] = 0x28
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Revoke {
		i--
		if m.Revoke {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.JustClear {
		i--
		if m.JustClear {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesDeleteMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesDeleteMessages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesDeleteMessages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA37 := make([]byte, len(m.Id)*10)
		var j36 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA37[j36] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j36++
			}
			dAtA37[j36] = uint8(num)
			j36++
		}
		i -= j36
		copy(dAtA[i:], dAtA37[:j36])
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(j36))
		i--
		dAtA[i] = 0x1a
	}
	if m.Revoke {
		i--
		if m.Revoke {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesReceivedMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesReceivedMessages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesReceivedMessages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MaxId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSetTyping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSetTyping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSetTyping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Action != nil {
		{
			size, err := m.Action.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSendMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSendMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSendMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entities) > 0 {
		for iNdEx := len(m.Entities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.ReplyMarkup != nil {
		{
			size, err := m.ReplyMarkup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.RandomId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.RandomId))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x42
	}
	if m.ReplyToMsgId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ReplyToMsgId))
		i--
		dAtA[i] = 0x38
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.ClearDraft {
		i--
		if m.ClearDraft {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Background {
		i--
		if m.Background {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Silent {
		i--
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.NoWebpage {
		i--
		if m.NoWebpage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSendMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSendMedia) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSendMedia) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReplyMarkup != nil {
		{
			size, err := m.ReplyMarkup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.RandomId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.RandomId))
		i--
		dAtA[i] = 0x40
	}
	if m.Media != nil {
		{
			size, err := m.Media.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.ReplyToMsgId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ReplyToMsgId))
		i--
		dAtA[i] = 0x30
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ClearDraft {
		i--
		if m.ClearDraft {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Background {
		i--
		if m.Background {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Silent {
		i--
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesForwardMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesForwardMessages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesForwardMessages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ToPeer != nil {
		{
			size, err := m.ToPeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.RandomId) > 0 {
		dAtA47 := make([]byte, len(m.RandomId)*10)
		var j46 int
		for _, num1 := range m.RandomId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA47[j46] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j46++
			}
			dAtA47[j46] = uint8(num)
			j46++
		}
		i -= j46
		copy(dAtA[i:], dAtA47[:j46])
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(j46))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Id) > 0 {
		dAtA49 := make([]byte, len(m.Id)*10)
		var j48 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA49[j48] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j48++
			}
			dAtA49[j48] = uint8(num)
			j48++
		}
		i -= j48
		copy(dAtA[i:], dAtA49[:j48])
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(j48))
		i--
		dAtA[i] = 0x32
	}
	if m.FromPeer != nil {
		{
			size, err := m.FromPeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.WithMyScore {
		i--
		if m.WithMyScore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Background {
		i--
		if m.Background {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Silent {
		i--
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesReportSpam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesReportSpam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesReportSpam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesHideReportSpam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesHideReportSpam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesHideReportSpam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetPeerSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetPeerSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetPeerSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetChats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetChats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetChats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA55 := make([]byte, len(m.Id)*10)
		var j54 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA55[j54] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j54++
			}
			dAtA55[j54] = uint8(num)
			j54++
		}
		i -= j54
		copy(dAtA[i:], dAtA55[:j54])
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(j54))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetFullChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetFullChat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetFullChat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesEditChatTitle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesEditChatTitle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesEditChatTitle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChatId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesEditChatPhoto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesEditChatPhoto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesEditChatPhoto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Photo != nil {
		{
			size, err := m.Photo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ChatId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesAddChatUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesAddChatUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesAddChatUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FwdLimit != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.FwdLimit))
		i--
		dAtA[i] = 0x18
	}
	if m.UserId != nil {
		{
			size, err := m.UserId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ChatId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesDeleteChatUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesDeleteChatUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesDeleteChatUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserId != nil {
		{
			size, err := m.UserId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ChatId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesCreateChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesCreateChat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesCreateChat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesForwardMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesForwardMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesForwardMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RandomId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.RandomId))
		i--
		dAtA[i] = 0x18
	}
	if m.Id != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetDhConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetDhConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetDhConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RandomLength != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.RandomLength))
		i--
		dAtA[i] = 0x10
	}
	if m.Version != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesRequestEncryption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesRequestEncryption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesRequestEncryption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GA) > 0 {
		i -= len(m.GA)
		copy(dAtA[i:], m.GA)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.GA)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RandomId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.RandomId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != nil {
		{
			size, err := m.UserId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesAcceptEncryption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesAcceptEncryption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesAcceptEncryption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KeyFingerprint != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.KeyFingerprint))
		i--
		dAtA[i] = 0x18
	}
	if len(m.GB) > 0 {
		i -= len(m.GB)
		copy(dAtA[i:], m.GB)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.GB)))
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesDiscardEncryption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesDiscardEncryption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesDiscardEncryption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSetEncryptedTyping) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSetEncryptedTyping) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSetEncryptedTyping) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Typing != nil {
		{
			size, err := m.Typing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesReadEncryptedHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesReadEncryptedHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesReadEncryptedHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxDate != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MaxDate))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSendEncrypted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSendEncrypted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSendEncrypted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RandomId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.RandomId))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSendEncryptedFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSendEncryptedFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSendEncryptedFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.File != nil {
		{
			size, err := m.File.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RandomId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.RandomId))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSendEncryptedService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSendEncryptedService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSendEncryptedService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RandomId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.RandomId))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesReceivedQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesReceivedQueue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesReceivedQueue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxQts != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MaxQts))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesReportEncryptedSpam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesReportEncryptedSpam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesReportEncryptedSpam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesReadMessageContents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesReadMessageContents) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesReadMessageContents) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA71 := make([]byte, len(m.Id)*10)
		var j70 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA71[j70] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j70++
			}
			dAtA71[j70] = uint8(num)
			j70++
		}
		i -= j70
		copy(dAtA[i:], dAtA71[:j70])
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(j70))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetAllStickers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetAllStickers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetAllStickers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hash != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetWebPagePreview) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetWebPagePreview) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetWebPagePreview) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesExportChatInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesExportChatInvite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesExportChatInvite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesCheckChatInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesCheckChatInvite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesCheckChatInvite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesImportChatInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesImportChatInvite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesImportChatInvite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetStickerSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetStickerSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetStickerSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Stickerset != nil {
		{
			size, err := m.Stickerset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesInstallStickerSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesInstallStickerSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesInstallStickerSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Archived != nil {
		{
			size, err := m.Archived.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Stickerset != nil {
		{
			size, err := m.Stickerset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesUninstallStickerSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesUninstallStickerSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesUninstallStickerSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Stickerset != nil {
		{
			size, err := m.Stickerset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesStartBot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesStartBot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesStartBot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StartParam) > 0 {
		i -= len(m.StartParam)
		copy(dAtA[i:], m.StartParam)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.StartParam)))
		i--
		dAtA[i] = 0x22
	}
	if m.RandomId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.RandomId))
		i--
		dAtA[i] = 0x18
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Bot != nil {
		{
			size, err := m.Bot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetMessagesViews) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetMessagesViews) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetMessagesViews) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Increment != nil {
		{
			size, err := m.Increment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		dAtA80 := make([]byte, len(m.Id)*10)
		var j79 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA80[j79] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j79++
			}
			dAtA80[j79] = uint8(num)
			j79++
		}
		i -= j79
		copy(dAtA[i:], dAtA80[:j79])
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(j79))
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesToggleChatAdmins) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesToggleChatAdmins) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesToggleChatAdmins) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ChatId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesEditChatAdmin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesEditChatAdmin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesEditChatAdmin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsAdmin != nil {
		{
			size, err := m.IsAdmin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.UserId != nil {
		{
			size, err := m.UserId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ChatId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesMigrateChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesMigrateChat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesMigrateChat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChatId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ChatId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSearchGlobal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSearchGlobal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSearchGlobal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x28
	}
	if m.OffsetId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.OffsetId))
		i--
		dAtA[i] = 0x20
	}
	if m.OffsetPeer != nil {
		{
			size, err := m.OffsetPeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.OffsetDate != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.OffsetDate))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Q) > 0 {
		i -= len(m.Q)
		copy(dAtA[i:], m.Q)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Q)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesReorderStickerSets) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesReorderStickerSets) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesReorderStickerSets) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Order) > 0 {
		dAtA87 := make([]byte, len(m.Order)*10)
		var j86 int
		for _, num1 := range m.Order {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA87[j86] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j86++
			}
			dAtA87[j86] = uint8(num)
			j86++
		}
		i -= j86
		copy(dAtA[i:], dAtA87[:j86])
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(j86))
		i--
		dAtA[i] = 0x1a
	}
	if m.Masks {
		i--
		if m.Masks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetDocumentByHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetDocumentByHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetDocumentByHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MimeType) > 0 {
		i -= len(m.MimeType)
		copy(dAtA[i:], m.MimeType)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.MimeType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Size_ != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sha256) > 0 {
		i -= len(m.Sha256)
		copy(dAtA[i:], m.Sha256)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Sha256)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSearchGifs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSearchGifs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSearchGifs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Q) > 0 {
		i -= len(m.Q)
		copy(dAtA[i:], m.Q)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Q)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetSavedGifs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetSavedGifs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetSavedGifs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hash != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSaveGif) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSaveGif) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSaveGif) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Unsave != nil {
		{
			size, err := m.Unsave.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetInlineBotResults) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetInlineBotResults) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetInlineBotResults) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Offset) > 0 {
		i -= len(m.Offset)
		copy(dAtA[i:], m.Offset)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Offset)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0x2a
	}
	if m.GeoPoint != nil {
		{
			size, err := m.GeoPoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Bot != nil {
		{
			size, err := m.Bot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSetInlineBotResults) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSetInlineBotResults) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSetInlineBotResults) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SwitchPm != nil {
		{
			size, err := m.SwitchPm.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.NextOffset) > 0 {
		i -= len(m.NextOffset)
		copy(dAtA[i:], m.NextOffset)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.NextOffset)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CacheTime != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.CacheTime))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Results[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.QueryId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.QueryId))
		i--
		dAtA[i] = 0x20
	}
	if m.Private {
		i--
		if m.Private {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Gallery {
		i--
		if m.Gallery {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSendInlineBotResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSendInlineBotResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSendInlineBotResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x4a
	}
	if m.QueryId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.QueryId))
		i--
		dAtA[i] = 0x40
	}
	if m.RandomId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.RandomId))
		i--
		dAtA[i] = 0x38
	}
	if m.ReplyToMsgId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ReplyToMsgId))
		i--
		dAtA[i] = 0x30
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ClearDraft {
		i--
		if m.ClearDraft {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Background {
		i--
		if m.Background {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Silent {
		i--
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetMessageEditData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetMessageEditData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetMessageEditData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesEditMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesEditMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesEditMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entities) > 0 {
		for iNdEx := len(m.Entities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.ReplyMarkup != nil {
		{
			size, err := m.ReplyMarkup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Id != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x20
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.NoWebpage {
		i--
		if m.NoWebpage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesEditInlineBotMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesEditInlineBotMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesEditInlineBotMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entities) > 0 {
		for iNdEx := len(m.Entities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.ReplyMarkup != nil {
		{
			size, err := m.ReplyMarkup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x22
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.NoWebpage {
		i--
		if m.NoWebpage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetBotCallbackAnswer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetBotCallbackAnswer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetBotCallbackAnswer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x2a
	}
	if m.MsgId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x20
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Game {
		i--
		if m.Game {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSetBotCallbackAnswer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSetBotCallbackAnswer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSetBotCallbackAnswer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CacheTime != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.CacheTime))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x22
	}
	if m.QueryId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.QueryId))
		i--
		dAtA[i] = 0x18
	}
	if m.Alert {
		i--
		if m.Alert {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetPeerDialogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetPeerDialogs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetPeerDialogs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Peers) > 0 {
		for iNdEx := len(m.Peers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Peers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSaveDraft) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSaveDraft) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSaveDraft) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entities) > 0 {
		for iNdEx := len(m.Entities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ReplyToMsgId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ReplyToMsgId))
		i--
		dAtA[i] = 0x18
	}
	if m.NoWebpage {
		i--
		if m.NoWebpage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetAllDrafts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetAllDrafts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetAllDrafts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetFeaturedStickers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetFeaturedStickers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetFeaturedStickers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hash != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesReadFeaturedStickers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesReadFeaturedStickers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesReadFeaturedStickers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA103 := make([]byte, len(m.Id)*10)
		var j102 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA103[j102] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j102++
			}
			dAtA103[j102] = uint8(num)
			j102++
		}
		i -= j102
		copy(dAtA[i:], dAtA103[:j102])
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(j102))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetRecentStickers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetRecentStickers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetRecentStickers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hash != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x18
	}
	if m.Attached {
		i--
		if m.Attached {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSaveRecentSticker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSaveRecentSticker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSaveRecentSticker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Unsave != nil {
		{
			size, err := m.Unsave.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Attached {
		i--
		if m.Attached {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesClearRecentStickers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesClearRecentStickers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesClearRecentStickers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Attached {
		i--
		if m.Attached {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetArchivedStickers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetArchivedStickers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetArchivedStickers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.OffsetId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.OffsetId))
		i--
		dAtA[i] = 0x18
	}
	if m.Masks {
		i--
		if m.Masks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetMaskStickers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetMaskStickers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetMaskStickers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hash != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetAttachedStickers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetAttachedStickers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetAttachedStickers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Media != nil {
		{
			size, err := m.Media.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSetGameScore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSetGameScore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSetGameScore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Score != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x38
	}
	if m.UserId != nil {
		{
			size, err := m.UserId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Id != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x28
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Force {
		i--
		if m.Force {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.EditMessage {
		i--
		if m.EditMessage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSetInlineGameScore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSetInlineGameScore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSetInlineGameScore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Score != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x30
	}
	if m.UserId != nil {
		{
			size, err := m.UserId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Force {
		i--
		if m.Force {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.EditMessage {
		i--
		if m.EditMessage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetGameHighScores) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetGameHighScores) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetGameHighScores) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserId != nil {
		{
			size, err := m.UserId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetInlineGameHighScores) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetInlineGameHighScores) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetInlineGameHighScores) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserId != nil {
		{
			size, err := m.UserId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetCommonChats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetCommonChats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetCommonChats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MaxId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != nil {
		{
			size, err := m.UserId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetAllChats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetAllChats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetAllChats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExceptIds) > 0 {
		dAtA117 := make([]byte, len(m.ExceptIds)*10)
		var j116 int
		for _, num1 := range m.ExceptIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA117[j116] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j116++
			}
			dAtA117[j116] = uint8(num)
			j116++
		}
		i -= j116
		copy(dAtA[i:], dAtA117[:j116])
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(j116))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetWebPage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetWebPage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetWebPage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hash != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesToggleDialogPin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesToggleDialogPin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesToggleDialogPin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pinned {
		i--
		if m.Pinned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesReorderPinnedDialogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesReorderPinnedDialogs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesReorderPinnedDialogs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Order) > 0 {
		for iNdEx := len(m.Order) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Order[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Force {
		i--
		if m.Force {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetPinnedDialogs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetPinnedDialogs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetPinnedDialogs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLMessagesSetBotShippingResults) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSetBotShippingResults) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSetBotShippingResults) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ShippingOptions) > 0 {
		for iNdEx := len(m.ShippingOptions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ShippingOptions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x1a
	}
	if m.QueryId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.QueryId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSetBotPrecheckoutResults) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSetBotPrecheckoutResults) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSetBotPrecheckoutResults) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x22
	}
	if m.QueryId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.QueryId))
		i--
		dAtA[i] = 0x18
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesUploadMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesUploadMedia) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesUploadMedia) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Media != nil {
		{
			size, err := m.Media.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSendScreenshotNotification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSendScreenshotNotification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSendScreenshotNotification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RandomId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.RandomId))
		i--
		dAtA[i] = 0x18
	}
	if m.ReplyToMsgId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ReplyToMsgId))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetFavedStickers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetFavedStickers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetFavedStickers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hash != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesFaveSticker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesFaveSticker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesFaveSticker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Unfave != nil {
		{
			size, err := m.Unfave.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetUnreadMentions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetUnreadMentions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetUnreadMentions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MinId))
		i--
		dAtA[i] = 0x30
	}
	if m.MaxId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MaxId))
		i--
		dAtA[i] = 0x28
	}
	if m.Limit != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.AddOffset != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.AddOffset))
		i--
		dAtA[i] = 0x18
	}
	if m.OffsetId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.OffsetId))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLUpdatesGetState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUpdatesGetState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUpdatesGetState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLUpdatesGetDifference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUpdatesGetDifference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUpdatesGetDifference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Qts != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Qts))
		i--
		dAtA[i] = 0x28
	}
	if m.Date != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Date))
		i--
		dAtA[i] = 0x20
	}
	if m.PtsTotalLimit != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.PtsTotalLimit))
		i--
		dAtA[i] = 0x18
	}
	if m.Pts != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Pts))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLUpdatesGetChannelDifference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUpdatesGetChannelDifference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUpdatesGetChannelDifference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x30
	}
	if m.Pts != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Pts))
		i--
		dAtA[i] = 0x28
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Force {
		i--
		if m.Force {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLPhotosUpdateProfilePhoto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPhotosUpdateProfilePhoto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLPhotosUpdateProfilePhoto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLPhotosUploadProfilePhoto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPhotosUploadProfilePhoto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLPhotosUploadProfilePhoto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.File != nil {
		{
			size, err := m.File.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLPhotosDeletePhotos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPhotosDeletePhotos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLPhotosDeletePhotos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		for iNdEx := len(m.Id) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Id[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TLPhotosGetUserPhotos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPhotosGetUserPhotos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLPhotosGetUserPhotos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MaxId))
		i--
		dAtA[i] = 0x18
	}
	if m.Offset != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != nil {
		{
			size, err := m.UserId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLUploadSaveFilePart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUploadSaveFilePart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUploadSaveFilePart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bytes) > 0 {
		i -= len(m.Bytes)
		copy(dAtA[i:], m.Bytes)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Bytes)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FilePart != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.FilePart))
		i--
		dAtA[i] = 0x10
	}
	if m.FileId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.FileId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUploadGetFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUploadGetFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUploadGetFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.Offset != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLUploadSaveBigFilePart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUploadSaveBigFilePart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUploadSaveBigFilePart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bytes) > 0 {
		i -= len(m.Bytes)
		copy(dAtA[i:], m.Bytes)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Bytes)))
		i--
		dAtA[i] = 0x22
	}
	if m.FileTotalParts != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.FileTotalParts))
		i--
		dAtA[i] = 0x18
	}
	if m.FilePart != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.FilePart))
		i--
		dAtA[i] = 0x10
	}
	if m.FileId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.FileId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUploadGetWebFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUploadGetWebFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUploadGetWebFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.Offset != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLUploadGetCdnFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUploadGetCdnFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUploadGetCdnFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.Offset != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FileToken) > 0 {
		i -= len(m.FileToken)
		copy(dAtA[i:], m.FileToken)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.FileToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLUploadReuploadCdnFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUploadReuploadCdnFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUploadReuploadCdnFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestToken) > 0 {
		i -= len(m.RequestToken)
		copy(dAtA[i:], m.RequestToken)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.RequestToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FileToken) > 0 {
		i -= len(m.FileToken)
		copy(dAtA[i:], m.FileToken)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.FileToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLUploadGetCdnFileHashes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUploadGetCdnFileHashes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUploadGetCdnFileHashes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FileToken) > 0 {
		i -= len(m.FileToken)
		copy(dAtA[i:], m.FileToken)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.FileToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLHelpGetConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpGetConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpGetConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLHelpGetNearestDc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpGetNearestDc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpGetNearestDc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLHelpGetAppUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpGetAppUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpGetAppUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLHelpSaveAppLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpSaveAppLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpSaveAppLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TLHelpGetInviteText) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpGetInviteText) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpGetInviteText) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLHelpGetSupport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpGetSupport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpGetSupport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLHelpGetAppChangelog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpGetAppChangelog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpGetAppChangelog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PrevAppVersion) > 0 {
		i -= len(m.PrevAppVersion)
		copy(dAtA[i:], m.PrevAppVersion)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PrevAppVersion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLHelpGetTermsOfService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpGetTermsOfService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpGetTermsOfService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLHelpSetBotUpdatesStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpSetBotUpdatesStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpSetBotUpdatesStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.PendingUpdatesCount != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.PendingUpdatesCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLHelpGetCdnConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpGetCdnConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpGetCdnConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLChannelsReadHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsReadHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsReadHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MaxId))
		i--
		dAtA[i] = 0x10
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsDeleteMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsDeleteMessages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsDeleteMessages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA134 := make([]byte, len(m.Id)*10)
		var j133 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA134[j133] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j133++
			}
			dAtA134[j133] = uint8(num)
			j133++
		}
		i -= j133
		copy(dAtA[i:], dAtA134[:j133])
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(j133))
		i--
		dAtA[i] = 0x12
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsDeleteUserHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsDeleteUserHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsDeleteUserHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserId != nil {
		{
			size, err := m.UserId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsReportSpam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsReportSpam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsReportSpam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA139 := make([]byte, len(m.Id)*10)
		var j138 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA139[j138] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j138++
			}
			dAtA139[j138] = uint8(num)
			j138++
		}
		i -= j138
		copy(dAtA[i:], dAtA139[:j138])
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(j138))
		i--
		dAtA[i] = 0x1a
	}
	if m.UserId != nil {
		{
			size, err := m.UserId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsGetMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsGetMessages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsGetMessages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA143 := make([]byte, len(m.Id)*10)
		var j142 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA143[j142] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j142++
			}
			dAtA143[j142] = uint8(num)
			j142++
		}
		i -= j142
		copy(dAtA[i:], dAtA143[:j142])
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(j142))
		i--
		dAtA[i] = 0x12
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsGetParticipants) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsGetParticipants) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsGetParticipants) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.Offset != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsGetParticipant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsGetParticipant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsGetParticipant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserId != nil {
		{
			size, err := m.UserId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsGetChannels) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsGetChannels) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsGetChannels) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		for iNdEx := len(m.Id) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Id[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsGetFullChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsGetFullChannel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsGetFullChannel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsCreateChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsCreateChannel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsCreateChannel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.About) > 0 {
		i -= len(m.About)
		copy(dAtA[i:], m.About)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.About)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x22
	}
	if m.Megagroup {
		i--
		if m.Megagroup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Broadcast {
		i--
		if m.Broadcast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsEditAbout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsEditAbout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsEditAbout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.About) > 0 {
		i -= len(m.About)
		copy(dAtA[i:], m.About)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.About)))
		i--
		dAtA[i] = 0x12
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsEditAdmin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsEditAdmin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsEditAdmin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AdminRights != nil {
		{
			size, err := m.AdminRights.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.UserId != nil {
		{
			size, err := m.UserId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsEditTitle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsEditTitle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsEditTitle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsEditPhoto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsEditPhoto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsEditPhoto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Photo != nil {
		{
			size, err := m.Photo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsCheckUsername) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsCheckUsername) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsCheckUsername) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x12
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsUpdateUsername) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsUpdateUsername) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsUpdateUsername) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x12
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsJoinChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsJoinChannel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsJoinChannel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsLeaveChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsLeaveChannel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsLeaveChannel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsInviteToChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsInviteToChannel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsInviteToChannel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsExportInvite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsExportInvite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsExportInvite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsDeleteChannel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsDeleteChannel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsDeleteChannel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsToggleInvites) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsToggleInvites) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsToggleInvites) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsExportMessageLink) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsExportMessageLink) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsExportMessageLink) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsToggleSignatures) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsToggleSignatures) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsToggleSignatures) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsUpdatePinnedMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsUpdatePinnedMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsUpdatePinnedMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x20
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Silent {
		i--
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsGetAdminedPublicChannels) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsGetAdminedPublicChannels) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsGetAdminedPublicChannels) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLChannelsEditBanned) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsEditBanned) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsEditBanned) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BannedRights != nil {
		{
			size, err := m.BannedRights.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.UserId != nil {
		{
			size, err := m.UserId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsGetAdminLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsGetAdminLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsGetAdminLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x40
	}
	if m.MinId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MinId))
		i--
		dAtA[i] = 0x38
	}
	if m.MaxId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MaxId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Admins) > 0 {
		for iNdEx := len(m.Admins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Admins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.EventsFilter != nil {
		{
			size, err := m.EventsFilter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Q) > 0 {
		i -= len(m.Q)
		copy(dAtA[i:], m.Q)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Q)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsSetStickers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsSetStickers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsSetStickers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Stickerset != nil {
		{
			size, err := m.Stickerset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsReadMessageContents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsReadMessageContents) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsReadMessageContents) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA178 := make([]byte, len(m.Id)*10)
		var j177 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA178[j177] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j177++
			}
			dAtA178[j177] = uint8(num)
			j177++
		}
		i -= j177
		copy(dAtA[i:], dAtA178[:j177])
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(j177))
		i--
		dAtA[i] = 0x12
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLBotsSendCustomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLBotsSendCustomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLBotsSendCustomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CustomMethod) > 0 {
		i -= len(m.CustomMethod)
		copy(dAtA[i:], m.CustomMethod)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.CustomMethod)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLBotsAnswerWebhookJSONQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLBotsAnswerWebhookJSONQuery) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLBotsAnswerWebhookJSONQuery) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.QueryId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.QueryId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLPaymentsGetPaymentForm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPaymentsGetPaymentForm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLPaymentsGetPaymentForm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MsgId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLPaymentsGetPaymentReceipt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPaymentsGetPaymentReceipt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLPaymentsGetPaymentReceipt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MsgId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLPaymentsValidateRequestedInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPaymentsValidateRequestedInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLPaymentsValidateRequestedInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.MsgId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x18
	}
	if m.Save {
		i--
		if m.Save {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLPaymentsSendPaymentForm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPaymentsSendPaymentForm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLPaymentsSendPaymentForm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Credentials != nil {
		{
			size, err := m.Credentials.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ShippingOptionId) > 0 {
		i -= len(m.ShippingOptionId)
		copy(dAtA[i:], m.ShippingOptionId)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.ShippingOptionId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RequestedInfoId) > 0 {
		i -= len(m.RequestedInfoId)
		copy(dAtA[i:], m.RequestedInfoId)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.RequestedInfoId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MsgId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLPaymentsGetSavedInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPaymentsGetSavedInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLPaymentsGetSavedInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLPaymentsClearSavedInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPaymentsClearSavedInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLPaymentsClearSavedInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info {
		i--
		if m.Info {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Credentials {
		i--
		if m.Credentials {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLStickersCreateStickerSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLStickersCreateStickerSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLStickersCreateStickerSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stickers) > 0 {
		for iNdEx := len(m.Stickers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stickers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ShortName) > 0 {
		i -= len(m.ShortName)
		copy(dAtA[i:], m.ShortName)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.ShortName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x22
	}
	if m.UserId != nil {
		{
			size, err := m.UserId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Masks {
		i--
		if m.Masks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLStickersRemoveStickerFromSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLStickersRemoveStickerFromSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLStickersRemoveStickerFromSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sticker != nil {
		{
			size, err := m.Sticker.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLStickersChangeStickerPosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLStickersChangeStickerPosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLStickersChangeStickerPosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Position != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x10
	}
	if m.Sticker != nil {
		{
			size, err := m.Sticker.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLStickersAddStickerToSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLStickersAddStickerToSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLStickersAddStickerToSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sticker != nil {
		{
			size, err := m.Sticker.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Stickerset != nil {
		{
			size, err := m.Stickerset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLPhoneGetCallConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPhoneGetCallConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLPhoneGetCallConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLPhoneRequestCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPhoneRequestCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLPhoneRequestCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Protocol != nil {
		{
			size, err := m.Protocol.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.GAHash) > 0 {
		i -= len(m.GAHash)
		copy(dAtA[i:], m.GAHash)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.GAHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RandomId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.RandomId))
		i--
		dAtA[i] = 0x10
	}
	if m.UserId != nil {
		{
			size, err := m.UserId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLPhoneAcceptCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPhoneAcceptCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLPhoneAcceptCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Protocol != nil {
		{
			size, err := m.Protocol.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GB) > 0 {
		i -= len(m.GB)
		copy(dAtA[i:], m.GB)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.GB)))
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLPhoneConfirmCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPhoneConfirmCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLPhoneConfirmCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Protocol != nil {
		{
			size, err := m.Protocol.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.KeyFingerprint != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.KeyFingerprint))
		i--
		dAtA[i] = 0x18
	}
	if len(m.GA) > 0 {
		i -= len(m.GA)
		copy(dAtA[i:], m.GA)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.GA)))
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLPhoneReceivedCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPhoneReceivedCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLPhoneReceivedCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLPhoneDiscardCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPhoneDiscardCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLPhoneDiscardCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConnectionId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ConnectionId))
		i--
		dAtA[i] = 0x20
	}
	if m.Reason != nil {
		{
			size, err := m.Reason.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Duration != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLPhoneSetCallRating) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPhoneSetCallRating) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLPhoneSetCallRating) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Rating != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Rating))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLPhoneSaveCallDebug) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPhoneSaveCallDebug) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLPhoneSaveCallDebug) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Debug != nil {
		{
			size, err := m.Debug.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLLangpackGetLangPack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLLangpackGetLangPack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLLangpackGetLangPack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LangCode) > 0 {
		i -= len(m.LangCode)
		copy(dAtA[i:], m.LangCode)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.LangCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLLangpackGetStrings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLLangpackGetStrings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLLangpackGetStrings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Keys[iNdEx])
			copy(dAtA[i:], m.Keys[iNdEx])
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Keys[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.LangCode) > 0 {
		i -= len(m.LangCode)
		copy(dAtA[i:], m.LangCode)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.LangCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLLangpackGetDifference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLLangpackGetDifference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLLangpackGetDifference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FromVersion != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.FromVersion))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLLangpackGetLanguages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLLangpackGetLanguages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLLangpackGetLanguages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLUpdatesGetChannelDifference57) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUpdatesGetChannelDifference57) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUpdatesGetChannelDifference57) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.Pts != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Pts))
		i--
		dAtA[i] = 0x18
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAuthSendCode73) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAuthSendCode73) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAuthSendCode73) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LangCode) > 0 {
		i -= len(m.LangCode)
		copy(dAtA[i:], m.LangCode)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.LangCode)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ApiHash) > 0 {
		i -= len(m.ApiHash)
		copy(dAtA[i:], m.ApiHash)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.ApiHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.ApiId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ApiId))
		i--
		dAtA[i] = 0x28
	}
	if m.CurrentNumber != nil {
		{
			size, err := m.CurrentNumber.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AllowFlashcall {
		i--
		if m.AllowFlashcall {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountRegisterDevice73) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountRegisterDevice73) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountRegisterDevice73) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LangCode) > 0 {
		i -= len(m.LangCode)
		copy(dAtA[i:], m.LangCode)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.LangCode)))
		i--
		dAtA[i] = 0x3a
	}
	if m.AppSandbox != nil {
		{
			size, err := m.AppSandbox.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.AppVersion) > 0 {
		i -= len(m.AppVersion)
		copy(dAtA[i:], m.AppVersion)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.AppVersion)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SystemVersion) > 0 {
		i -= len(m.SystemVersion)
		copy(dAtA[i:], m.SystemVersion)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.SystemVersion)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DeviceModel) > 0 {
		i -= len(m.DeviceModel)
		copy(dAtA[i:], m.DeviceModel)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.DeviceModel)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if m.TokenType != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.TokenType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLPhotosUpdateProfilePhoto73) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPhotosUpdateProfilePhoto73) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLPhotosUpdateProfilePhoto73) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Crop != nil {
		{
			size, err := m.Crop.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLPhotosUploadProfilePhoto73) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPhotosUploadProfilePhoto73) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLPhotosUploadProfilePhoto73) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Crop != nil {
		{
			size, err := m.Crop.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.GeoPoint != nil {
		{
			size, err := m.GeoPoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Caption) > 0 {
		i -= len(m.Caption)
		copy(dAtA[i:], m.Caption)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Caption)))
		i--
		dAtA[i] = 0x12
	}
	if m.File != nil {
		{
			size, err := m.File.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLHelpGetWkConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpGetWkConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpGetWkConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLHelpGetJsonConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpGetJsonConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpGetJsonConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLHelpGetScheme) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpGetScheme) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpGetScheme) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLHelpGetConfig73) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpGetConfig73) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpGetConfig73) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLHelpGetAppUpdate73) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpGetAppUpdate73) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpGetAppUpdate73) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LangCode) > 0 {
		i -= len(m.LangCode)
		copy(dAtA[i:], m.LangCode)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.LangCode)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AppVersion) > 0 {
		i -= len(m.AppVersion)
		copy(dAtA[i:], m.AppVersion)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.AppVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SystemVersion) > 0 {
		i -= len(m.SystemVersion)
		copy(dAtA[i:], m.SystemVersion)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.SystemVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DeviceModel) > 0 {
		i -= len(m.DeviceModel)
		copy(dAtA[i:], m.DeviceModel)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.DeviceModel)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLHelpGetInviteText73) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpGetInviteText73) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpGetInviteText73) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LangCode) > 0 {
		i -= len(m.LangCode)
		copy(dAtA[i:], m.LangCode)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.LangCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLHelpGetRecentMeUrls) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpGetRecentMeUrls) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpGetRecentMeUrls) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Referer) > 0 {
		i -= len(m.Referer)
		copy(dAtA[i:], m.Referer)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Referer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLHelpGetTermsOfService73) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpGetTermsOfService73) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpGetTermsOfService73) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LangCode) > 0 {
		i -= len(m.LangCode)
		copy(dAtA[i:], m.LangCode)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.LangCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesReadHistory73) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesReadHistory73) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesReadHistory73) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MaxId))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesEditMessage73) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesEditMessage73) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesEditMessage73) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GeoPoint != nil {
		{
			size, err := m.GeoPoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Entities) > 0 {
		for iNdEx := len(m.Entities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.ReplyMarkup != nil {
		{
			size, err := m.ReplyMarkup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x32
	}
	if m.Id != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x28
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.StopGeoLive {
		i--
		if m.StopGeoLive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.NoWebpage {
		i--
		if m.NoWebpage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSearch73) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSearch73) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSearch73) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x50
	}
	if m.MaxId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MaxId))
		i--
		dAtA[i] = 0x48
	}
	if m.Offset != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x40
	}
	if m.MaxDate != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MaxDate))
		i--
		dAtA[i] = 0x38
	}
	if m.MinDate != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MinDate))
		i--
		dAtA[i] = 0x30
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.FromId != nil {
		{
			size, err := m.FromId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Q) > 0 {
		i -= len(m.Q)
		copy(dAtA[i:], m.Q)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Q)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesReadMentions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesReadMentions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesReadMentions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetRecentLocations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetRecentLocations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetRecentLocations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSendMultiMedia) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSendMultiMedia) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSendMultiMedia) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MultiMedia) > 0 {
		for iNdEx := len(m.MultiMedia) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MultiMedia[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.ReplyToMsgId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ReplyToMsgId))
		i--
		dAtA[i] = 0x30
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ClearDraft {
		i--
		if m.ClearDraft {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Background {
		i--
		if m.Background {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Silent {
		i--
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesUploadEncryptedFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesUploadEncryptedFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesUploadEncryptedFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.File != nil {
		{
			size, err := m.File.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSaveRecentSticker73) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSaveRecentSticker73) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSaveRecentSticker73) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Unsave != nil {
		{
			size, err := m.Unsave.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsDeleteHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsDeleteHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsDeleteHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MaxId))
		i--
		dAtA[i] = 0x10
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsTogglePreHistoryHidden) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsTogglePreHistoryHidden) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsTogglePreHistoryHidden) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsGetParticipants73) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsGetParticipants73) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsGetParticipants73) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hash != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x28
	}
	if m.Limit != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.Offset != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x18
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsEditBanned2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsEditBanned2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsEditBanned2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsText != nil {
		{
			size, err := m.IsText.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.IsSilence != nil {
		{
			size, err := m.IsSilence.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ChannelId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsGetBanned2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsGetBanned2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsGetBanned2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChannelId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ChannelId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLPhone_WebrtcCreateOffer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPhone_WebrtcCreateOffer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLPhone_WebrtcCreateOffer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sdp) > 0 {
		i -= len(m.Sdp)
		copy(dAtA[i:], m.Sdp)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Sdp)))
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLPhone_WebrtcCreateAnswer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPhone_WebrtcCreateAnswer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLPhone_WebrtcCreateAnswer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sdp) > 0 {
		i -= len(m.Sdp)
		copy(dAtA[i:], m.Sdp)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Sdp)))
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLPhone_WebrtcAddCandidate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPhone_WebrtcAddCandidate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLPhone_WebrtcAddCandidate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sdp) > 0 {
		i -= len(m.Sdp)
		copy(dAtA[i:], m.Sdp)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Sdp)))
		i--
		dAtA[i] = 0x22
	}
	if m.SdpIndex != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.SdpIndex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SdpId) > 0 {
		i -= len(m.SdpId)
		copy(dAtA[i:], m.SdpId)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.SdpId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLInitConnection82) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLInitConnection82) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLInitConnection82) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0x52
	}
	if m.Proxy != nil {
		{
			size, err := m.Proxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.LangCode) > 0 {
		i -= len(m.LangCode)
		copy(dAtA[i:], m.LangCode)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.LangCode)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.LangPack) > 0 {
		i -= len(m.LangPack)
		copy(dAtA[i:], m.LangPack)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.LangPack)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SystemLangCode) > 0 {
		i -= len(m.SystemLangCode)
		copy(dAtA[i:], m.SystemLangCode)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.SystemLangCode)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AppVersion) > 0 {
		i -= len(m.AppVersion)
		copy(dAtA[i:], m.AppVersion)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.AppVersion)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SystemVersion) > 0 {
		i -= len(m.SystemVersion)
		copy(dAtA[i:], m.SystemVersion)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.SystemVersion)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DeviceModel) > 0 {
		i -= len(m.DeviceModel)
		copy(dAtA[i:], m.DeviceModel)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.DeviceModel)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ApiId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ApiId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLAuthSendCode82) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAuthSendCode82) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAuthSendCode82) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApiHash) > 0 {
		i -= len(m.ApiHash)
		copy(dAtA[i:], m.ApiHash)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.ApiHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.ApiId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ApiId))
		i--
		dAtA[i] = 0x28
	}
	if m.CurrentNumber != nil {
		{
			size, err := m.CurrentNumber.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x1a
	}
	if m.AllowFlashcall {
		i--
		if m.AllowFlashcall {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLHelpGetConfig82) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpGetConfig82) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpGetConfig82) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLHelpGetTermsOfServiceUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpGetTermsOfServiceUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpGetTermsOfServiceUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLHelpAcceptTermsOfService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpAcceptTermsOfService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpAcceptTermsOfService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLHelpGetDeepLinkInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpGetDeepLinkInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpGetDeepLinkInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLHelpTest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpTest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpTest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetPeerDialogs82) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetPeerDialogs82) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetPeerDialogs82) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Peers) > 0 {
		for iNdEx := len(m.Peers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Peers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetMessages82) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetMessages82) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetMessages82) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		for iNdEx := len(m.Id) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Id[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetDialogs82) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetDialogs82) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetDialogs82) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hash != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x38
	}
	if m.Limit != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x30
	}
	if m.OffsetPeer != nil {
		{
			size, err := m.OffsetPeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.OffsetId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.OffsetId))
		i--
		dAtA[i] = 0x20
	}
	if m.OffsetDate != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.OffsetDate))
		i--
		dAtA[i] = 0x18
	}
	if m.ExcludePinned {
		i--
		if m.ExcludePinned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetHistory82) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetHistory82) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetHistory82) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hash != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x40
	}
	if m.MinId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MinId))
		i--
		dAtA[i] = 0x38
	}
	if m.MaxId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MaxId))
		i--
		dAtA[i] = 0x30
	}
	if m.Limit != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x28
	}
	if m.AddOffset != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.AddOffset))
		i--
		dAtA[i] = 0x20
	}
	if m.OffsetDate != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.OffsetDate))
		i--
		dAtA[i] = 0x18
	}
	if m.OffsetId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.OffsetId))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSearch82) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSearch82) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSearch82) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hash != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x68
	}
	if m.MinId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MinId))
		i--
		dAtA[i] = 0x60
	}
	if m.MaxId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MaxId))
		i--
		dAtA[i] = 0x58
	}
	if m.Limit != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x50
	}
	if m.AddOffset != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.AddOffset))
		i--
		dAtA[i] = 0x48
	}
	if m.OffsetId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.OffsetId))
		i--
		dAtA[i] = 0x40
	}
	if m.MaxDate != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MaxDate))
		i--
		dAtA[i] = 0x38
	}
	if m.MinDate != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MinDate))
		i--
		dAtA[i] = 0x30
	}
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.FromId != nil {
		{
			size, err := m.FromId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Q) > 0 {
		i -= len(m.Q)
		copy(dAtA[i:], m.Q)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Q)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSendMedia82) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSendMedia82) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSendMedia82) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entities) > 0 {
		for iNdEx := len(m.Entities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.ReplyMarkup != nil {
		{
			size, err := m.ReplyMarkup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.RandomId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.RandomId))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x42
	}
	if m.Media != nil {
		{
			size, err := m.Media.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.ReplyToMsgId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ReplyToMsgId))
		i--
		dAtA[i] = 0x30
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ClearDraft {
		i--
		if m.ClearDraft {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Background {
		i--
		if m.Background {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Silent {
		i--
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLInitConnection114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLInitConnection114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLInitConnection114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Proxy != nil {
		{
			size, err := m.Proxy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.LangCode) > 0 {
		i -= len(m.LangCode)
		copy(dAtA[i:], m.LangCode)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.LangCode)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.LangPack) > 0 {
		i -= len(m.LangPack)
		copy(dAtA[i:], m.LangPack)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.LangPack)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SystemLangCode) > 0 {
		i -= len(m.SystemLangCode)
		copy(dAtA[i:], m.SystemLangCode)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.SystemLangCode)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.AppVersion) > 0 {
		i -= len(m.AppVersion)
		copy(dAtA[i:], m.AppVersion)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.AppVersion)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SystemVersion) > 0 {
		i -= len(m.SystemVersion)
		copy(dAtA[i:], m.SystemVersion)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.SystemVersion)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DeviceModel) > 0 {
		i -= len(m.DeviceModel)
		copy(dAtA[i:], m.DeviceModel)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.DeviceModel)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ApiId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ApiId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLInvokeWithMessagesRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLInvokeWithMessagesRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLInvokeWithMessagesRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0x12
	}
	if m.Range != nil {
		{
			size, err := m.Range.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLInvokeWithTakeout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLInvokeWithTakeout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLInvokeWithTakeout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0x12
	}
	if m.TakeoutId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.TakeoutId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLAuthSendCode114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAuthSendCode114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAuthSendCode114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Settings != nil {
		{
			size, err := m.Settings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ApiHash) > 0 {
		i -= len(m.ApiHash)
		copy(dAtA[i:], m.ApiHash)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.ApiHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ApiId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ApiId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAuthSignUp114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAuthSignUp114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAuthSignUp114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PhoneCodeHash) > 0 {
		i -= len(m.PhoneCodeHash)
		copy(dAtA[i:], m.PhoneCodeHash)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneCodeHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAuthCheckPassword114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAuthCheckPassword114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAuthCheckPassword114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Password != nil {
		{
			size, err := m.Password.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAuthExportLoginToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAuthExportLoginToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAuthExportLoginToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExceptIds) > 0 {
		dAtA251 := make([]byte, len(m.ExceptIds)*10)
		var j250 int
		for _, num1 := range m.ExceptIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA251[j250] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j250++
			}
			dAtA251[j250] = uint8(num)
			j250++
		}
		i -= j250
		copy(dAtA[i:], dAtA251[:j250])
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(j250))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ApiHash) > 0 {
		i -= len(m.ApiHash)
		copy(dAtA[i:], m.ApiHash)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.ApiHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.ApiId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ApiId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLAuthImportLoginToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAuthImportLoginToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAuthImportLoginToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAuthAcceptLoginToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAuthAcceptLoginToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAuthAcceptLoginToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountRegisterDevice114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountRegisterDevice114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountRegisterDevice114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OtherUids) > 0 {
		dAtA253 := make([]byte, len(m.OtherUids)*10)
		var j252 int
		for _, num1 := range m.OtherUids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA253[j252] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j252++
			}
			dAtA253[j252] = uint8(num)
			j252++
		}
		i -= j252
		copy(dAtA[i:], dAtA253[:j252])
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(j252))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Secret) > 0 {
		i -= len(m.Secret)
		copy(dAtA[i:], m.Secret)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Secret)))
		i--
		dAtA[i] = 0x32
	}
	if m.AppSandbox != nil {
		{
			size, err := m.AppSandbox.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x22
	}
	if m.TokenType != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.TokenType))
		i--
		dAtA[i] = 0x18
	}
	if m.NoMuted {
		i--
		if m.NoMuted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountUnregisterDevice114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountUnregisterDevice114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountUnregisterDevice114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OtherUids) > 0 {
		dAtA256 := make([]byte, len(m.OtherUids)*10)
		var j255 int
		for _, num1 := range m.OtherUids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA256[j255] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j255++
			}
			dAtA256[j255] = uint8(num)
			j255++
		}
		i -= j255
		copy(dAtA[i:], dAtA256[:j255])
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(j255))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	if m.TokenType != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.TokenType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountGetWallPapers114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountGetWallPapers114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountGetWallPapers114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hash != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountSendChangePhoneCode114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountSendChangePhoneCode114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountSendChangePhoneCode114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Settings != nil {
		{
			size, err := m.Settings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountGetPasswordSettings114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountGetPasswordSettings114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountGetPasswordSettings114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Password != nil {
		{
			size, err := m.Password.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountUpdatePasswordSettings114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountUpdatePasswordSettings114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountUpdatePasswordSettings114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewSettings != nil {
		{
			size, err := m.NewSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Password != nil {
		{
			size, err := m.Password.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountSendConfirmPhoneCode114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountSendConfirmPhoneCode114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountSendConfirmPhoneCode114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Settings != nil {
		{
			size, err := m.Settings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountGetTmpPassword114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountGetTmpPassword114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountGetTmpPassword114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Period != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x10
	}
	if m.Password != nil {
		{
			size, err := m.Password.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountGetWebAuthorizations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountGetWebAuthorizations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountGetWebAuthorizations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLAccountResetWebAuthorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountResetWebAuthorization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountResetWebAuthorization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hash != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountResetWebAuthorizations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountResetWebAuthorizations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountResetWebAuthorizations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLAccountGetAllSecureValues) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountGetAllSecureValues) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountGetAllSecureValues) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLAccountGetSecureValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountGetSecureValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountGetSecureValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Types) > 0 {
		for iNdEx := len(m.Types) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Types[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountSaveSecureValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountSaveSecureValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountSaveSecureValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SecureSecretId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.SecureSecretId))
		i--
		dAtA[i] = 0x10
	}
	if m.Value != nil {
		{
			size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountDeleteSecureValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountDeleteSecureValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountDeleteSecureValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Types) > 0 {
		for iNdEx := len(m.Types) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Types[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountGetAuthorizationForm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountGetAuthorizationForm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountGetAuthorizationForm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Scope) > 0 {
		i -= len(m.Scope)
		copy(dAtA[i:], m.Scope)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Scope)))
		i--
		dAtA[i] = 0x12
	}
	if m.BotId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.BotId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountAcceptAuthorization) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountAcceptAuthorization) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountAcceptAuthorization) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Credentials != nil {
		{
			size, err := m.Credentials.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ValueHashes) > 0 {
		for iNdEx := len(m.ValueHashes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ValueHashes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Scope) > 0 {
		i -= len(m.Scope)
		copy(dAtA[i:], m.Scope)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Scope)))
		i--
		dAtA[i] = 0x12
	}
	if m.BotId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.BotId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountSendVerifyPhoneCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountSendVerifyPhoneCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountSendVerifyPhoneCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Settings != nil {
		{
			size, err := m.Settings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountVerifyPhone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountVerifyPhone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountVerifyPhone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PhoneCode) > 0 {
		i -= len(m.PhoneCode)
		copy(dAtA[i:], m.PhoneCode)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PhoneCodeHash) > 0 {
		i -= len(m.PhoneCodeHash)
		copy(dAtA[i:], m.PhoneCodeHash)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneCodeHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountSendVerifyEmailCode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountSendVerifyEmailCode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountSendVerifyEmailCode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountVerifyEmail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountVerifyEmail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountVerifyEmail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountInitTakeoutSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountInitTakeoutSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountInitTakeoutSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FileMaxSize != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.FileMaxSize))
		i--
		dAtA[i] = 0x40
	}
	if m.Files {
		i--
		if m.Files {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.MessageChannels {
		i--
		if m.MessageChannels {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.MessageMegagroups {
		i--
		if m.MessageMegagroups {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.MessageChats {
		i--
		if m.MessageChats {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.MessageUsers {
		i--
		if m.MessageUsers {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Contacts {
		i--
		if m.Contacts {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountFinishTakeoutSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountFinishTakeoutSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountFinishTakeoutSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountConfirmPasswordEmail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountConfirmPasswordEmail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountConfirmPasswordEmail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountResendPasswordEmail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountResendPasswordEmail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountResendPasswordEmail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLAccountCancelPasswordEmail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountCancelPasswordEmail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountCancelPasswordEmail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLAccountGetContactSignUpNotification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountGetContactSignUpNotification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountGetContactSignUpNotification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLAccountSetContactSignUpNotification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountSetContactSignUpNotification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountSetContactSignUpNotification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Silent != nil {
		{
			size, err := m.Silent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountGetNotifyExceptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountGetNotifyExceptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountGetNotifyExceptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.CompareSound {
		i--
		if m.CompareSound {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountGetWallPaper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountGetWallPaper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountGetWallPaper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Wallpaper != nil {
		{
			size, err := m.Wallpaper.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountUploadWallPaper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountUploadWallPaper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountUploadWallPaper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Settings != nil {
		{
			size, err := m.Settings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MimeType) > 0 {
		i -= len(m.MimeType)
		copy(dAtA[i:], m.MimeType)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.MimeType)))
		i--
		dAtA[i] = 0x12
	}
	if m.File != nil {
		{
			size, err := m.File.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountSaveWallPaper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountSaveWallPaper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountSaveWallPaper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Settings != nil {
		{
			size, err := m.Settings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Unsave != nil {
		{
			size, err := m.Unsave.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Wallpaper != nil {
		{
			size, err := m.Wallpaper.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountInstallWallPaper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountInstallWallPaper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountInstallWallPaper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Settings != nil {
		{
			size, err := m.Settings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Wallpaper != nil {
		{
			size, err := m.Wallpaper.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountResetWallPapers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountResetWallPapers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountResetWallPapers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLAccountGetAutoDownloadSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountGetAutoDownloadSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountGetAutoDownloadSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLAccountSaveAutoDownloadSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountSaveAutoDownloadSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountSaveAutoDownloadSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Settings != nil {
		{
			size, err := m.Settings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.High {
		i--
		if m.High {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Low {
		i--
		if m.Low {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountUploadTheme) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountUploadTheme) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountUploadTheme) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MimeType) > 0 {
		i -= len(m.MimeType)
		copy(dAtA[i:], m.MimeType)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.MimeType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0x22
	}
	if m.Thumb != nil {
		{
			size, err := m.Thumb.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.File != nil {
		{
			size, err := m.File.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountCreateTheme) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountCreateTheme) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountCreateTheme) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Settings != nil {
		{
			size, err := m.Settings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Document != nil {
		{
			size, err := m.Document.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Slug) > 0 {
		i -= len(m.Slug)
		copy(dAtA[i:], m.Slug)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Slug)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountUpdateTheme) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountUpdateTheme) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountUpdateTheme) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Settings != nil {
		{
			size, err := m.Settings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Document != nil {
		{
			size, err := m.Document.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Slug) > 0 {
		i -= len(m.Slug)
		copy(dAtA[i:], m.Slug)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Slug)))
		i--
		dAtA[i] = 0x22
	}
	if m.Theme != nil {
		{
			size, err := m.Theme.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Format) > 0 {
		i -= len(m.Format)
		copy(dAtA[i:], m.Format)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Format)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountSaveTheme) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountSaveTheme) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountSaveTheme) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Unsave != nil {
		{
			size, err := m.Unsave.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Theme != nil {
		{
			size, err := m.Theme.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountInstallTheme) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountInstallTheme) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountInstallTheme) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Theme != nil {
		{
			size, err := m.Theme.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Format) > 0 {
		i -= len(m.Format)
		copy(dAtA[i:], m.Format)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Format)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Dark {
		i--
		if m.Dark {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountGetTheme) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountGetTheme) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountGetTheme) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DocumentId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.DocumentId))
		i--
		dAtA[i] = 0x18
	}
	if m.Theme != nil {
		{
			size, err := m.Theme.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Format) > 0 {
		i -= len(m.Format)
		copy(dAtA[i:], m.Format)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Format)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountGetThemes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountGetThemes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountGetThemes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hash != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Format) > 0 {
		i -= len(m.Format)
		copy(dAtA[i:], m.Format)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Format)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountSetContentSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountSetContentSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountSetContentSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SensitiveEnabled {
		i--
		if m.SensitiveEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountGetContentSettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountGetContentSettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountGetContentSettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLAccountGetMultiWallPapers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountGetMultiWallPapers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountGetMultiWallPapers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Wallpapers) > 0 {
		for iNdEx := len(m.Wallpapers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Wallpapers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TLUsersSetSecureValueErrors) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUsersSetSecureValueErrors) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUsersSetSecureValueErrors) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Errors) > 0 {
		for iNdEx := len(m.Errors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Errors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLContactsGetContactIDs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLContactsGetContactIDs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLContactsGetContactIDs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hash != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLContactsDeleteContacts114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLContactsDeleteContacts114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLContactsDeleteContacts114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		for iNdEx := len(m.Id) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Id[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TLContactsDeleteByPhones) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLContactsDeleteByPhones) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLContactsDeleteByPhones) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Phones) > 0 {
		for iNdEx := len(m.Phones) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Phones[iNdEx])
			copy(dAtA[i:], m.Phones[iNdEx])
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Phones[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TLContactsGetSaved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLContactsGetSaved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLContactsGetSaved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLContactsToggleTopPeers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLContactsToggleTopPeers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLContactsToggleTopPeers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enabled != nil {
		{
			size, err := m.Enabled.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLContactsAddContact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLContactsAddContact) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLContactsAddContact) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LastName) > 0 {
		i -= len(m.LastName)
		copy(dAtA[i:], m.LastName)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.LastName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x22
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.AddPhonePrivacyException {
		i--
		if m.AddPhonePrivacyException {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLContactsAcceptContact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLContactsAcceptContact) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLContactsAcceptContact) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLContactsGetLocated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLContactsGetLocated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLContactsGetLocated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SelfExpires != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.SelfExpires))
		i--
		dAtA[i] = 0x20
	}
	if m.GeoPoint != nil {
		{
			size, err := m.GeoPoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Background {
		i--
		if m.Background {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetDialogs114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetDialogs114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetDialogs114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hash != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x40
	}
	if m.Limit != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x38
	}
	if m.OffsetPeer != nil {
		{
			size, err := m.OffsetPeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.OffsetId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.OffsetId))
		i--
		dAtA[i] = 0x28
	}
	if m.OffsetDate != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.OffsetDate))
		i--
		dAtA[i] = 0x20
	}
	if m.FolderId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.FolderId))
		i--
		dAtA[i] = 0x18
	}
	if m.ExcludePinned {
		i--
		if m.ExcludePinned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSendMessage114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSendMessage114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSendMessage114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScheduleDate != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ScheduleDate))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Entities) > 0 {
		for iNdEx := len(m.Entities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.ReplyMarkup != nil {
		{
			size, err := m.ReplyMarkup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.RandomId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.RandomId))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x42
	}
	if m.ReplyToMsgId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ReplyToMsgId))
		i--
		dAtA[i] = 0x38
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.ClearDraft {
		i--
		if m.ClearDraft {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Background {
		i--
		if m.Background {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Silent {
		i--
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.NoWebpage {
		i--
		if m.NoWebpage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSendMedia114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSendMedia114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSendMedia114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScheduleDate != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ScheduleDate))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Entities) > 0 {
		for iNdEx := len(m.Entities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.ReplyMarkup != nil {
		{
			size, err := m.ReplyMarkup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.RandomId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.RandomId))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x42
	}
	if m.Media != nil {
		{
			size, err := m.Media.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.ReplyToMsgId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ReplyToMsgId))
		i--
		dAtA[i] = 0x30
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ClearDraft {
		i--
		if m.ClearDraft {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Background {
		i--
		if m.Background {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Silent {
		i--
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesForwardMessages114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesForwardMessages114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesForwardMessages114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScheduleDate != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ScheduleDate))
		i--
		dAtA[i] = 0x50
	}
	if m.ToPeer != nil {
		{
			size, err := m.ToPeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.RandomId) > 0 {
		dAtA301 := make([]byte, len(m.RandomId)*10)
		var j300 int
		for _, num1 := range m.RandomId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA301[j300] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j300++
			}
			dAtA301[j300] = uint8(num)
			j300++
		}
		i -= j300
		copy(dAtA[i:], dAtA301[:j300])
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(j300))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Id) > 0 {
		dAtA303 := make([]byte, len(m.Id)*10)
		var j302 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA303[j302] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j302++
			}
			dAtA303[j302] = uint8(num)
			j302++
		}
		i -= j302
		copy(dAtA[i:], dAtA303[:j302])
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(j302))
		i--
		dAtA[i] = 0x3a
	}
	if m.FromPeer != nil {
		{
			size, err := m.FromPeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Grouped {
		i--
		if m.Grouped {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.WithMyScore {
		i--
		if m.WithMyScore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Background {
		i--
		if m.Background {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Silent {
		i--
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Reason != nil {
		{
			size, err := m.Reason.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Id) > 0 {
		dAtA307 := make([]byte, len(m.Id)*10)
		var j306 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA307[j306] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j306++
			}
			dAtA307[j306] = uint8(num)
			j306++
		}
		i -= j306
		copy(dAtA[i:], dAtA307[:j306])
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(j306))
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetStickers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetStickers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetStickers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hash != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Emoticon) > 0 {
		i -= len(m.Emoticon)
		copy(dAtA[i:], m.Emoticon)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Emoticon)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetWebPagePreview114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetWebPagePreview114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetWebPagePreview114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entities) > 0 {
		for iNdEx := len(m.Entities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesExportChatInvite114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesExportChatInvite114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesExportChatInvite114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSearchGlobal114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSearchGlobal114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSearchGlobal114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x38
	}
	if m.OffsetId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.OffsetId))
		i--
		dAtA[i] = 0x30
	}
	if m.OffsetPeer != nil {
		{
			size, err := m.OffsetPeer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.OffsetRate != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.OffsetRate))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Q) > 0 {
		i -= len(m.Q)
		copy(dAtA[i:], m.Q)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Q)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FolderId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.FolderId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSendInlineBotResult114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSendInlineBotResult114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSendInlineBotResult114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScheduleDate != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ScheduleDate))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x52
	}
	if m.QueryId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.QueryId))
		i--
		dAtA[i] = 0x48
	}
	if m.RandomId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.RandomId))
		i--
		dAtA[i] = 0x40
	}
	if m.ReplyToMsgId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ReplyToMsgId))
		i--
		dAtA[i] = 0x38
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.HideVia {
		i--
		if m.HideVia {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.ClearDraft {
		i--
		if m.ClearDraft {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Background {
		i--
		if m.Background {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Silent {
		i--
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesEditMessage114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesEditMessage114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesEditMessage114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScheduleDate != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ScheduleDate))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Entities) > 0 {
		for iNdEx := len(m.Entities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.ReplyMarkup != nil {
		{
			size, err := m.ReplyMarkup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Media != nil {
		{
			size, err := m.Media.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Id != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x20
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.NoWebpage {
		i--
		if m.NoWebpage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesEditInlineBotMessage114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesEditInlineBotMessage114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesEditInlineBotMessage114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entities) > 0 {
		for iNdEx := len(m.Entities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.ReplyMarkup != nil {
		{
			size, err := m.ReplyMarkup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Media != nil {
		{
			size, err := m.Media.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x22
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.NoWebpage {
		i--
		if m.NoWebpage {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesToggleDialogPin114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesToggleDialogPin114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesToggleDialogPin114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pinned {
		i--
		if m.Pinned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesReorderPinnedDialogs114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesReorderPinnedDialogs114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesReorderPinnedDialogs114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Order) > 0 {
		for iNdEx := len(m.Order) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Order[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.FolderId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.FolderId))
		i--
		dAtA[i] = 0x18
	}
	if m.Force {
		i--
		if m.Force {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetPinnedDialogs114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetPinnedDialogs114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetPinnedDialogs114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FolderId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.FolderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetRecentLocations114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetRecentLocations114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetRecentLocations114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hash != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSendMultiMedia114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSendMultiMedia114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSendMultiMedia114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScheduleDate != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ScheduleDate))
		i--
		dAtA[i] = 0x40
	}
	if len(m.MultiMedia) > 0 {
		for iNdEx := len(m.MultiMedia) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MultiMedia[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.ReplyToMsgId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ReplyToMsgId))
		i--
		dAtA[i] = 0x30
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ClearDraft {
		i--
		if m.ClearDraft {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Background {
		i--
		if m.Background {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Silent {
		i--
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSearchStickerSets) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSearchStickerSets) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSearchStickerSets) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hash != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Q) > 0 {
		i -= len(m.Q)
		copy(dAtA[i:], m.Q)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Q)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ExcludeFeatured {
		i--
		if m.ExcludeFeatured {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetSplitRanges) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetSplitRanges) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetSplitRanges) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLMessagesMarkDialogUnread) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesMarkDialogUnread) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesMarkDialogUnread) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Unread {
		i--
		if m.Unread {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetDialogUnreadMarks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetDialogUnreadMarks) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetDialogUnreadMarks) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLMessagesClearAllDrafts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesClearAllDrafts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesClearAllDrafts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLMessagesUpdatePinnedMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesUpdatePinnedMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesUpdatePinnedMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x30
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.PmOneside {
		i--
		if m.PmOneside {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Unpin {
		i--
		if m.Unpin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Silent {
		i--
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSendVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSendVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSendVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Options) > 0 {
		for iNdEx := len(m.Options) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Options[iNdEx])
			copy(dAtA[i:], m.Options[iNdEx])
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Options[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MsgId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetPollResults) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetPollResults) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetPollResults) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MsgId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetOnlines) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetOnlines) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetOnlines) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetStatsURL) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetStatsURL) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetStatsURL) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Params) > 0 {
		i -= len(m.Params)
		copy(dAtA[i:], m.Params)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Params)))
		i--
		dAtA[i] = 0x22
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Dark {
		i--
		if m.Dark {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesEditChatAbout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesEditChatAbout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesEditChatAbout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.About) > 0 {
		i -= len(m.About)
		copy(dAtA[i:], m.About)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.About)))
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesEditChatDefaultBannedRights) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesEditChatDefaultBannedRights) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesEditChatDefaultBannedRights) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BannedRights != nil {
		{
			size, err := m.BannedRights.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetEmojiKeywords) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetEmojiKeywords) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetEmojiKeywords) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LangCode) > 0 {
		i -= len(m.LangCode)
		copy(dAtA[i:], m.LangCode)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.LangCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetEmojiKeywordsDifference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetEmojiKeywordsDifference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetEmojiKeywordsDifference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FromVersion != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.FromVersion))
		i--
		dAtA[i] = 0x10
	}
	if len(m.LangCode) > 0 {
		i -= len(m.LangCode)
		copy(dAtA[i:], m.LangCode)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.LangCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetEmojiKeywordsLanguages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetEmojiKeywordsLanguages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetEmojiKeywordsLanguages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LangCodes) > 0 {
		for iNdEx := len(m.LangCodes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LangCodes[iNdEx])
			copy(dAtA[i:], m.LangCodes[iNdEx])
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.LangCodes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetEmojiURL) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetEmojiURL) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetEmojiURL) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LangCode) > 0 {
		i -= len(m.LangCode)
		copy(dAtA[i:], m.LangCode)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.LangCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetSearchCounters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetSearchCounters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetSearchCounters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Filters) > 0 {
		for iNdEx := len(m.Filters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Filters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesRequestUrlAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesRequestUrlAuth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesRequestUrlAuth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ButtonId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ButtonId))
		i--
		dAtA[i] = 0x18
	}
	if m.MsgId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesAcceptUrlAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesAcceptUrlAuth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesAcceptUrlAuth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ButtonId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ButtonId))
		i--
		dAtA[i] = 0x28
	}
	if m.MsgId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x20
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.WriteAllowed {
		i--
		if m.WriteAllowed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesHidePeerSettingsBar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesHidePeerSettingsBar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesHidePeerSettingsBar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetScheduledHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetScheduledHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetScheduledHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hash != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x10
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetScheduledMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetScheduledMessages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetScheduledMessages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA336 := make([]byte, len(m.Id)*10)
		var j335 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA336[j335] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j335++
			}
			dAtA336[j335] = uint8(num)
			j335++
		}
		i -= j335
		copy(dAtA[i:], dAtA336[:j335])
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(j335))
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSendScheduledMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSendScheduledMessages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSendScheduledMessages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA339 := make([]byte, len(m.Id)*10)
		var j338 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA339[j338] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j338++
			}
			dAtA339[j338] = uint8(num)
			j338++
		}
		i -= j338
		copy(dAtA[i:], dAtA339[:j338])
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(j338))
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesDeleteScheduledMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesDeleteScheduledMessages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesDeleteScheduledMessages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA342 := make([]byte, len(m.Id)*10)
		var j341 int
		for _, num1 := range m.Id {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA342[j341] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j341++
			}
			dAtA342[j341] = uint8(num)
			j341++
		}
		i -= j341
		copy(dAtA[i:], dAtA342[:j341])
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(j341))
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetPollVotes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetPollVotes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetPollVotes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Offset) > 0 {
		i -= len(m.Offset)
		copy(dAtA[i:], m.Offset)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Offset)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Option) > 0 {
		i -= len(m.Option)
		copy(dAtA[i:], m.Option)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Option)))
		i--
		dAtA[i] = 0x22
	}
	if m.Id != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x18
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesToggleStickerSets) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesToggleStickerSets) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesToggleStickerSets) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stickersets) > 0 {
		for iNdEx := len(m.Stickersets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stickersets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Unarchive {
		i--
		if m.Unarchive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Archive {
		i--
		if m.Archive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Uninstall {
		i--
		if m.Uninstall {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetDialogFilters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetDialogFilters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetDialogFilters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetSuggestedDialogFilters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetSuggestedDialogFilters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetSuggestedDialogFilters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLMessagesUpdateDialogFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesUpdateDialogFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesUpdateDialogFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Filter != nil {
		{
			size, err := m.Filter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesUpdateDialogFiltersOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesUpdateDialogFiltersOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesUpdateDialogFiltersOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Order) > 0 {
		dAtA347 := make([]byte, len(m.Order)*10)
		var j346 int
		for _, num1 := range m.Order {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA347[j346] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j346++
			}
			dAtA347[j346] = uint8(num)
			j346++
		}
		i -= j346
		copy(dAtA[i:], dAtA347[:j346])
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(j346))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetOldFeaturedStickers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetOldFeaturedStickers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetOldFeaturedStickers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hash != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Offset != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLUploadGetFile114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUploadGetFile114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUploadGetFile114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x30
	}
	if m.Offset != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x28
	}
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CdnSupported {
		i--
		if m.CdnSupported {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Precise {
		i--
		if m.Precise {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLUploadReuploadCdnFile114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUploadReuploadCdnFile114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUploadReuploadCdnFile114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestToken) > 0 {
		i -= len(m.RequestToken)
		copy(dAtA[i:], m.RequestToken)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.RequestToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FileToken) > 0 {
		i -= len(m.FileToken)
		copy(dAtA[i:], m.FileToken)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.FileToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLUploadGetCdnFileHashes114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUploadGetCdnFileHashes114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUploadGetCdnFileHashes114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FileToken) > 0 {
		i -= len(m.FileToken)
		copy(dAtA[i:], m.FileToken)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.FileToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLUploadGetFileHashes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLUploadGetFileHashes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLUploadGetFileHashes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLHelpGetConfig114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpGetConfig114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpGetConfig114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLHelpGetAppUpdate114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpGetAppUpdate114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpGetAppUpdate114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLHelpGetAppConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpGetAppConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpGetAppConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLHelpGetPassportConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpGetPassportConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpGetPassportConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hash != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLHelpGetSupportName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpGetSupportName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpGetSupportName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLHelpGetUserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpGetUserInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpGetUserInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserId != nil {
		{
			size, err := m.UserId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLHelpEditUserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpEditUserInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpEditUserInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entities) > 0 {
		for iNdEx := len(m.Entities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != nil {
		{
			size, err := m.UserId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLHelpGetPromoData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpGetPromoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpGetPromoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLHelpHidePromoData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpHidePromoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpHidePromoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsGetMessages114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsGetMessages114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsGetMessages114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		for iNdEx := len(m.Id) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Id[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsCreateChannel114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsCreateChannel114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsCreateChannel114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x3a
	}
	if m.GeoPoint != nil {
		{
			size, err := m.GeoPoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.About) > 0 {
		i -= len(m.About)
		copy(dAtA[i:], m.About)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.About)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x22
	}
	if m.Megagroup {
		i--
		if m.Megagroup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Broadcast {
		i--
		if m.Broadcast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsEditAdmin114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsEditAdmin114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsEditAdmin114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rank) > 0 {
		i -= len(m.Rank)
		copy(dAtA[i:], m.Rank)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Rank)))
		i--
		dAtA[i] = 0x22
	}
	if m.AdminRights != nil {
		{
			size, err := m.AdminRights.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.UserId != nil {
		{
			size, err := m.UserId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsExportMessageLink114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsExportMessageLink114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsExportMessageLink114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Grouped != nil {
		{
			size, err := m.Grouped.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsGetAdminedPublicChannels114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsGetAdminedPublicChannels114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsGetAdminedPublicChannels114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CheckLimit {
		i--
		if m.CheckLimit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.ByLocation {
		i--
		if m.ByLocation {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsEditBanned114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsEditBanned114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsEditBanned114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BannedRights != nil {
		{
			size, err := m.BannedRights.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.UserId != nil {
		{
			size, err := m.UserId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsGetLeftChannels) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsGetLeftChannels) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsGetLeftChannels) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsGetGroupsForDiscussion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsGetGroupsForDiscussion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsGetGroupsForDiscussion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLChannelsSetDiscussionGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsSetDiscussionGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsSetDiscussionGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Group != nil {
		{
			size, err := m.Group.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Broadcast != nil {
		{
			size, err := m.Broadcast.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsEditCreator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsEditCreator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsEditCreator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Password != nil {
		{
			size, err := m.Password.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.UserId != nil {
		{
			size, err := m.UserId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsEditLocation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsEditLocation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsEditLocation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if m.GeoPoint != nil {
		{
			size, err := m.GeoPoint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsToggleSlowMode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsToggleSlowMode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsToggleSlowMode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Seconds != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Seconds))
		i--
		dAtA[i] = 0x10
	}
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLChannelsGetInactiveChannels) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLChannelsGetInactiveChannels) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLChannelsGetInactiveChannels) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLBotsSetBotCommands) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLBotsSetBotCommands) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLBotsSetBotCommands) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Commands) > 0 {
		for iNdEx := len(m.Commands) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Commands[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TLPaymentsGetBankCardData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPaymentsGetBankCardData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLPaymentsGetBankCardData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Number) > 0 {
		i -= len(m.Number)
		copy(dAtA[i:], m.Number)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Number)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLStickersCreateStickerSet114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLStickersCreateStickerSet114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLStickersCreateStickerSet114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stickers) > 0 {
		for iNdEx := len(m.Stickers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stickers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Thumb != nil {
		{
			size, err := m.Thumb.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ShortName) > 0 {
		i -= len(m.ShortName)
		copy(dAtA[i:], m.ShortName)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.ShortName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x2a
	}
	if m.UserId != nil {
		{
			size, err := m.UserId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Animated {
		i--
		if m.Animated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Masks {
		i--
		if m.Masks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLStickersSetStickerSetThumb) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLStickersSetStickerSetThumb) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLStickersSetStickerSetThumb) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Thumb != nil {
		{
			size, err := m.Thumb.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Stickerset != nil {
		{
			size, err := m.Stickerset.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLPhoneRequestCall114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPhoneRequestCall114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLPhoneRequestCall114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Protocol != nil {
		{
			size, err := m.Protocol.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.GAHash) > 0 {
		i -= len(m.GAHash)
		copy(dAtA[i:], m.GAHash)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.GAHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.RandomId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.RandomId))
		i--
		dAtA[i] = 0x20
	}
	if m.UserId != nil {
		{
			size, err := m.UserId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Video {
		i--
		if m.Video {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLPhoneDiscardCall114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPhoneDiscardCall114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLPhoneDiscardCall114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConnectionId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.ConnectionId))
		i--
		dAtA[i] = 0x30
	}
	if m.Reason != nil {
		{
			size, err := m.Reason.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Duration != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x20
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Video {
		i--
		if m.Video {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLPhoneSetCallRating114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPhoneSetCallRating114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLPhoneSetCallRating114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Rating != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Rating))
		i--
		dAtA[i] = 0x20
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.UserInitiative {
		i--
		if m.UserInitiative {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLPhoneSendSignalingData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPhoneSendSignalingData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLPhoneSendSignalingData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLLangpackGetLangPack114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLLangpackGetLangPack114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLLangpackGetLangPack114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LangCode) > 0 {
		i -= len(m.LangCode)
		copy(dAtA[i:], m.LangCode)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.LangCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LangPack) > 0 {
		i -= len(m.LangPack)
		copy(dAtA[i:], m.LangPack)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.LangPack)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLLangpackGetStrings114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLLangpackGetStrings114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLLangpackGetStrings114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Keys[iNdEx])
			copy(dAtA[i:], m.Keys[iNdEx])
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Keys[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.LangCode) > 0 {
		i -= len(m.LangCode)
		copy(dAtA[i:], m.LangCode)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.LangCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LangPack) > 0 {
		i -= len(m.LangPack)
		copy(dAtA[i:], m.LangPack)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.LangPack)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLLangpackGetDifference114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLLangpackGetDifference114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLLangpackGetDifference114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FromVersion != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.FromVersion))
		i--
		dAtA[i] = 0x18
	}
	if len(m.LangCode) > 0 {
		i -= len(m.LangCode)
		copy(dAtA[i:], m.LangCode)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.LangCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LangPack) > 0 {
		i -= len(m.LangPack)
		copy(dAtA[i:], m.LangPack)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.LangPack)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLLangpackGetLanguages114) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLLangpackGetLanguages114) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLLangpackGetLanguages114) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LangPack) > 0 {
		i -= len(m.LangPack)
		copy(dAtA[i:], m.LangPack)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.LangPack)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLLangpackGetLanguage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLLangpackGetLanguage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLLangpackGetLanguage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LangCode) > 0 {
		i -= len(m.LangCode)
		copy(dAtA[i:], m.LangCode)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.LangCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LangPack) > 0 {
		i -= len(m.LangPack)
		copy(dAtA[i:], m.LangPack)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.LangPack)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLFoldersEditPeerFolders) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLFoldersEditPeerFolders) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLFoldersEditPeerFolders) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FolderPeers) > 0 {
		for iNdEx := len(m.FolderPeers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FolderPeers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TLFoldersDeleteFolder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLFoldersDeleteFolder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLFoldersDeleteFolder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FolderId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.FolderId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TLStatsGetBroadcastStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLStatsGetBroadcastStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLStatsGetBroadcastStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Dark {
		i--
		if m.Dark {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLStatsLoadAsyncGraph) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLStatsLoadAsyncGraph) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLStatsLoadAsyncGraph) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.X != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *TLAccountGetGlobalPrivacySettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountGetGlobalPrivacySettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountGetGlobalPrivacySettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TLAccountSetGlobalPrivacySettings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLAccountSetGlobalPrivacySettings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLAccountSetGlobalPrivacySettings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Settings != nil {
		{
			size, err := m.Settings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLStatsGetMegagroupStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLStatsGetMegagroupStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLStatsGetMegagroupStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Channel != nil {
		{
			size, err := m.Channel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Dark {
		i--
		if m.Dark {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLPhotosUploadProfilePhoto117) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPhotosUploadProfilePhoto117) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLPhotosUploadProfilePhoto117) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VideoStartTs != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.VideoStartTs))))
		i--
		dAtA[i] = 0x21
	}
	if m.Video != nil {
		{
			size, err := m.Video.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.File != nil {
		{
			size, err := m.File.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *TLHelpDismissSuggestion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpDismissSuggestion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpDismissSuggestion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Suggestion) > 0 {
		i -= len(m.Suggestion)
		copy(dAtA[i:], m.Suggestion)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Suggestion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLPhotosUpdateProfilePhoto117) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLPhotosUpdateProfilePhoto117) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLPhotosUpdateProfilePhoto117) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLHelpGetCountriesList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLHelpGetCountriesList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLHelpGetCountriesList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hash != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.Hash))
		i--
		dAtA[i] = 0x10
	}
	if len(m.LangCode) > 0 {
		i -= len(m.LangCode)
		copy(dAtA[i:], m.LangCode)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.LangCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSendEncrypted118) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSendEncrypted118) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSendEncrypted118) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x2a
	}
	if m.RandomId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.RandomId))
		i--
		dAtA[i] = 0x20
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Silent {
		i--
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesGetBotCallbackAnswer118) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesGetBotCallbackAnswer118) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesGetBotCallbackAnswer118) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Password != nil {
		{
			size, err := m.Password.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x2a
	}
	if m.MsgId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.MsgId))
		i--
		dAtA[i] = 0x20
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Game {
		i--
		if m.Game {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLMessagesSendEncryptedFile118) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLMessagesSendEncryptedFile118) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLMessagesSendEncryptedFile118) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.File != nil {
		{
			size, err := m.File.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x2a
	}
	if m.RandomId != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.RandomId))
		i--
		dAtA[i] = 0x20
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Silent {
		i--
		if m.Silent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *TLLangpackGetDifference118) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TLLangpackGetDifference118) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TLLangpackGetDifference118) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FromVersion != 0 {
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(m.FromVersion))
		i--
		dAtA[i] = 0x10
	}
	if len(m.LangCode) > 0 {
		i -= len(m.LangCode)
		copy(dAtA[i:], m.LangCode)
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(len(m.LangCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Vector_WallPaper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_WallPaper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_WallPaper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vector_User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vector_UserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_UserInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_UserInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vector_ContactStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_ContactStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_ContactStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VectorInt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VectorInt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VectorInt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		dAtA393 := make([]byte, len(m.Datas)*10)
		var j392 int
		for _, num1 := range m.Datas {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA393[j392] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j392++
			}
			dAtA393[j392] = uint8(num)
			j392++
		}
		i -= j392
		copy(dAtA[i:], dAtA393[:j392])
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(j392))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Vector_ReceivedNotifyMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_ReceivedNotifyMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_ReceivedNotifyMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VectorLong) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VectorLong) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VectorLong) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		dAtA395 := make([]byte, len(m.Datas)*10)
		var j394 int
		for _, num1 := range m.Datas {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA395[j394] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j394++
			}
			dAtA395[j394] = uint8(num)
			j394++
		}
		i -= j394
		copy(dAtA[i:], dAtA395[:j394])
		i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(j394))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Vector_StickerSetCovered) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_StickerSetCovered) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_StickerSetCovered) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vector_CdnFileHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_CdnFileHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_CdnFileHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vector_LangPackString) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_LangPackString) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_LangPackString) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vector_LangPackLanguage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_LangPackLanguage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_LangPackLanguage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vector_SecureValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_SecureValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_SecureValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vector_SavedContact) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_SavedContact) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_SavedContact) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vector_MessageRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_MessageRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_MessageRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vector_DialogPeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_DialogPeer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_DialogPeer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vector_EmojiLanguage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_EmojiLanguage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_EmojiLanguage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vector_Messages_SearchCounter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_Messages_SearchCounter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_Messages_SearchCounter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vector_DialogFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_DialogFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_DialogFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vector_DialogFilterSuggested) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_DialogFilterSuggested) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_DialogFilterSuggested) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vector_FileHash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vector_FileHash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vector_FileHash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSchemaTlSyncService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintSchemaTlSyncService(dAtA []byte, offset int, v uint64) int {
	offset -= sovSchemaTlSyncService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TLInvokeAfterMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MsgId))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLInvokeAfterMsgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MsgIds) > 0 {
		l = 0
		for _, e := range m.MsgIds {
			l += sovSchemaTlSyncService(uint64(e))
		}
		n += 1 + sovSchemaTlSyncService(uint64(l)) + l
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLInitConnection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ApiId))
	}
	l = len(m.DeviceModel)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.SystemVersion)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.AppVersion)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.SystemLangCode)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.LangPack)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.LangCode)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLInvokeWithLayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Layer != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Layer))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLInvokeWithoutUpdates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAuthCheckPhone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAuthSendCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowFlashcall {
		n += 2
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.CurrentNumber != nil {
		l = m.CurrentNumber.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.ApiId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ApiId))
	}
	l = len(m.ApiHash)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAuthSignUp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.PhoneCodeHash)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.PhoneCode)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAuthSignIn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.PhoneCodeHash)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.PhoneCode)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAuthLogOut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLAuthResetAuthorizations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLAuthSendInvites) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PhoneNumbers) > 0 {
		for _, s := range m.PhoneNumbers {
			l = len(s)
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAuthExportAuthorization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DcId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.DcId))
	}
	return n
}

func (m *TLAuthImportAuthorization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Id))
	}
	l = len(m.Bytes)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAuthBindTempAuthKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PermAuthKeyId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.PermAuthKeyId))
	}
	if m.Nonce != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Nonce))
	}
	if m.ExpiresAt != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ExpiresAt))
	}
	l = len(m.EncryptedMessage)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAuthImportBotAuthorization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Flags != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Flags))
	}
	if m.ApiId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ApiId))
	}
	l = len(m.ApiHash)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.BotAuthToken)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAuthCheckPassword) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PasswordHash)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAuthRequestPasswordRecovery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLAuthRecoverPassword) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAuthResendCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.PhoneCodeHash)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAuthCancelCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.PhoneCodeHash)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAuthDropTempAuthKeys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExceptAuthKeys) > 0 {
		l = 0
		for _, e := range m.ExceptAuthKeys {
			l += sovSchemaTlSyncService(uint64(e))
		}
		n += 1 + sovSchemaTlSyncService(uint64(l)) + l
	}
	return n
}

func (m *TLAuthCheckInviteCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountRegisterDevice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TokenType != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.TokenType))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountUnregisterDevice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TokenType != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.TokenType))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountUpdateNotifySettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountGetNotifySettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountResetNotifySettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLAccountUpdateProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountUpdateStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offline != nil {
		l = m.Offline.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountGetWallPapers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLAccountReportPeer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Reason != nil {
		l = m.Reason.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountCheckUsername) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountUpdateUsername) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountGetPrivacy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountSetPrivacy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLAccountDeleteAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountGetAccountTTL) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLAccountSetAccountTTL) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ttl != nil {
		l = m.Ttl.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountSendChangePhoneCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowFlashcall {
		n += 2
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.CurrentNumber != nil {
		l = m.CurrentNumber.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountChangePhone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.PhoneCodeHash)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.PhoneCode)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountUpdateDeviceLocked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Period != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Period))
	}
	return n
}

func (m *TLAccountGetAuthorizations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLAccountResetAuthorization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hash != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Hash))
	}
	return n
}

func (m *TLAccountGetPassword) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLAccountGetPasswordSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CurrentPasswordHash)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountUpdatePasswordSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CurrentPasswordHash)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.NewSettings != nil {
		l = m.NewSettings.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountSendConfirmPhoneCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowFlashcall {
		n += 2
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.CurrentNumber != nil {
		l = m.CurrentNumber.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountConfirmPhone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PhoneCodeHash)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.PhoneCode)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountGetTmpPassword) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PasswordHash)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Period != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Period))
	}
	return n
}

func (m *TLUsersGetUsers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, e := range m.Id {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLUsersGetFullUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLUsersGetUserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLUsersGetUserInfoList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Type))
	}
	if m.Offset != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Offset))
	}
	if m.Count != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Count))
	}
	return n
}

func (m *TLUsersGetEnvelopeState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Eid != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Eid))
	}
	if m.AccessHash != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.AccessHash))
	}
	return n
}

func (m *TLUsersGetEnvelopeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Eid != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Eid))
	}
	if m.AccessHash != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.AccessHash))
	}
	return n
}

func (m *TLUsersGetPointsHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Type))
	}
	if m.Offset != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Limit))
	}
	if m.Year != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Year))
	}
	return n
}

func (m *TLUsersGetPointsRank) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Type))
	}
	if m.FromRank != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.FromRank))
	}
	if m.Count != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Count))
	}
	return n
}

func (m *TLUsersSetPasswd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Type))
	}
	l = len(m.PhoneCode)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.OldPass)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Passwd)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLUsersCheckPasswd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Type))
	}
	l = len(m.Passwd)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLUsersCheckResetPasswdPhoneCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Type))
	}
	l = len(m.PhoneCode)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLUsersSendResetPasswdPhoneCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Type))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLUsersSetGender) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JsonContent)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLUsersSetUserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JsonContent)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLContactsApplyFriend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JsonContent)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLContactsAuditApply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JsonContent)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLContactsGetApplyList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JsonContent)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLContactsSearchUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JsonContent)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLContactsSearchSource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JsonContent)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLContactsGetStatuses) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLContactsGetContacts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hash != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Hash))
	}
	return n
}

func (m *TLContactsImportContacts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Contacts) > 0 {
		for _, e := range m.Contacts {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLContactsDeleteContact) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLContactsDeleteContacts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, e := range m.Id {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLContactsBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLContactsUnblock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLContactsGetBlocked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Limit))
	}
	return n
}

func (m *TLContactsExportCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLContactsImportCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExportCard) > 0 {
		l = 0
		for _, e := range m.ExportCard {
			l += sovSchemaTlSyncService(uint64(e))
		}
		n += 1 + sovSchemaTlSyncService(uint64(l)) + l
	}
	return n
}

func (m *TLContactsSearch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Q)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Limit))
	}
	return n
}

func (m *TLContactsResolveUsername) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLContactsGetTopPeers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Correspondents {
		n += 2
	}
	if m.BotsPm {
		n += 2
	}
	if m.BotsInline {
		n += 2
	}
	if m.PhoneCalls {
		n += 2
	}
	if m.Groups {
		n += 2
	}
	if m.Channels {
		n += 2
	}
	if m.Offset != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Limit))
	}
	if m.Hash != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Hash))
	}
	return n
}

func (m *TLContactsResetTopPeerRating) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Category != nil {
		l = m.Category.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLContactsResetSaved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLMessagesGetMessages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovSchemaTlSyncService(uint64(e))
		}
		n += 1 + sovSchemaTlSyncService(uint64(l)) + l
	}
	return n
}

func (m *TLMessagesGetDialogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExcludePinned {
		n += 2
	}
	if m.OffsetDate != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.OffsetDate))
	}
	if m.OffsetId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.OffsetId))
	}
	if m.OffsetPeer != nil {
		l = m.OffsetPeer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Limit))
	}
	return n
}

func (m *TLMessagesGetHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.OffsetId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.OffsetId))
	}
	if m.OffsetDate != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.OffsetDate))
	}
	if m.AddOffset != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.AddOffset))
	}
	if m.Limit != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Limit))
	}
	if m.MaxId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MaxId))
	}
	if m.MinId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MinId))
	}
	return n
}

func (m *TLMessagesSearch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Q)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.FromId != nil {
		l = m.FromId.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.MinDate != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MinDate))
	}
	if m.MaxDate != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MaxDate))
	}
	if m.OffsetId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.OffsetId))
	}
	if m.AddOffset != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.AddOffset))
	}
	if m.Limit != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Limit))
	}
	if m.MaxId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MaxId))
	}
	if m.MinId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MinId))
	}
	return n
}

func (m *TLMessagesReadHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.MaxId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MaxId))
	}
	return n
}

func (m *TLMessagesDeleteHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JustClear {
		n += 2
	}
	if m.Revoke {
		n += 2
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.MaxId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MaxId))
	}
	return n
}

func (m *TLMessagesDeleteMessages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Revoke {
		n += 2
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovSchemaTlSyncService(uint64(e))
		}
		n += 1 + sovSchemaTlSyncService(uint64(l)) + l
	}
	return n
}

func (m *TLMessagesReceivedMessages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MaxId))
	}
	return n
}

func (m *TLMessagesSetTyping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Action != nil {
		l = m.Action.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesSendMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoWebpage {
		n += 2
	}
	if m.Silent {
		n += 2
	}
	if m.Background {
		n += 2
	}
	if m.ClearDraft {
		n += 2
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.ReplyToMsgId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ReplyToMsgId))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.RandomId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.RandomId))
	}
	if m.ReplyMarkup != nil {
		l = m.ReplyMarkup.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLMessagesSendMedia) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Silent {
		n += 2
	}
	if m.Background {
		n += 2
	}
	if m.ClearDraft {
		n += 2
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.ReplyToMsgId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ReplyToMsgId))
	}
	if m.Media != nil {
		l = m.Media.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.RandomId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.RandomId))
	}
	if m.ReplyMarkup != nil {
		l = m.ReplyMarkup.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesForwardMessages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Silent {
		n += 2
	}
	if m.Background {
		n += 2
	}
	if m.WithMyScore {
		n += 2
	}
	if m.FromPeer != nil {
		l = m.FromPeer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovSchemaTlSyncService(uint64(e))
		}
		n += 1 + sovSchemaTlSyncService(uint64(l)) + l
	}
	if len(m.RandomId) > 0 {
		l = 0
		for _, e := range m.RandomId {
			l += sovSchemaTlSyncService(uint64(e))
		}
		n += 1 + sovSchemaTlSyncService(uint64(l)) + l
	}
	if m.ToPeer != nil {
		l = m.ToPeer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesReportSpam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesHideReportSpam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesGetPeerSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesGetChats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovSchemaTlSyncService(uint64(e))
		}
		n += 1 + sovSchemaTlSyncService(uint64(l)) + l
	}
	return n
}

func (m *TLMessagesGetFullChat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ChatId))
	}
	return n
}

func (m *TLMessagesEditChatTitle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ChatId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesEditChatPhoto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ChatId))
	}
	if m.Photo != nil {
		l = m.Photo.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesAddChatUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ChatId))
	}
	if m.UserId != nil {
		l = m.UserId.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.FwdLimit != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.FwdLimit))
	}
	return n
}

func (m *TLMessagesDeleteChatUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ChatId))
	}
	if m.UserId != nil {
		l = m.UserId.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesCreateChat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesForwardMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Id))
	}
	if m.RandomId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.RandomId))
	}
	return n
}

func (m *TLMessagesGetDhConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Version))
	}
	if m.RandomLength != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.RandomLength))
	}
	return n
}

func (m *TLMessagesRequestEncryption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != nil {
		l = m.UserId.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.RandomId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.RandomId))
	}
	l = len(m.GA)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesAcceptEncryption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.GB)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.KeyFingerprint != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.KeyFingerprint))
	}
	return n
}

func (m *TLMessagesDiscardEncryption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ChatId))
	}
	return n
}

func (m *TLMessagesSetEncryptedTyping) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Typing != nil {
		l = m.Typing.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesReadEncryptedHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.MaxDate != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MaxDate))
	}
	return n
}

func (m *TLMessagesSendEncrypted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.RandomId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.RandomId))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesSendEncryptedFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.RandomId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.RandomId))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.File != nil {
		l = m.File.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesSendEncryptedService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.RandomId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.RandomId))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesReceivedQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxQts != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MaxQts))
	}
	return n
}

func (m *TLMessagesReportEncryptedSpam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesReadMessageContents) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovSchemaTlSyncService(uint64(e))
		}
		n += 1 + sovSchemaTlSyncService(uint64(l)) + l
	}
	return n
}

func (m *TLMessagesGetAllStickers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hash != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Hash))
	}
	return n
}

func (m *TLMessagesGetWebPagePreview) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesExportChatInvite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ChatId))
	}
	return n
}

func (m *TLMessagesCheckChatInvite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesImportChatInvite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesGetStickerSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stickerset != nil {
		l = m.Stickerset.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesInstallStickerSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stickerset != nil {
		l = m.Stickerset.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Archived != nil {
		l = m.Archived.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesUninstallStickerSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stickerset != nil {
		l = m.Stickerset.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesStartBot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bot != nil {
		l = m.Bot.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.RandomId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.RandomId))
	}
	l = len(m.StartParam)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesGetMessagesViews) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovSchemaTlSyncService(uint64(e))
		}
		n += 1 + sovSchemaTlSyncService(uint64(l)) + l
	}
	if m.Increment != nil {
		l = m.Increment.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesToggleChatAdmins) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ChatId))
	}
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesEditChatAdmin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ChatId))
	}
	if m.UserId != nil {
		l = m.UserId.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.IsAdmin != nil {
		l = m.IsAdmin.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesMigrateChat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChatId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ChatId))
	}
	return n
}

func (m *TLMessagesSearchGlobal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Q)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.OffsetDate != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.OffsetDate))
	}
	if m.OffsetPeer != nil {
		l = m.OffsetPeer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.OffsetId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.OffsetId))
	}
	if m.Limit != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Limit))
	}
	return n
}

func (m *TLMessagesReorderStickerSets) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Masks {
		n += 2
	}
	if len(m.Order) > 0 {
		l = 0
		for _, e := range m.Order {
			l += sovSchemaTlSyncService(uint64(e))
		}
		n += 1 + sovSchemaTlSyncService(uint64(l)) + l
	}
	return n
}

func (m *TLMessagesGetDocumentByHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sha256)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Size_))
	}
	l = len(m.MimeType)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesSearchGifs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Q)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Offset))
	}
	return n
}

func (m *TLMessagesGetSavedGifs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hash != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Hash))
	}
	return n
}

func (m *TLMessagesSaveGif) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Unsave != nil {
		l = m.Unsave.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesGetInlineBotResults) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bot != nil {
		l = m.Bot.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.GeoPoint != nil {
		l = m.GeoPoint.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Offset)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesSetInlineBotResults) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Gallery {
		n += 2
	}
	if m.Private {
		n += 2
	}
	if m.QueryId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.QueryId))
	}
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	if m.CacheTime != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.CacheTime))
	}
	l = len(m.NextOffset)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.SwitchPm != nil {
		l = m.SwitchPm.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesSendInlineBotResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Silent {
		n += 2
	}
	if m.Background {
		n += 2
	}
	if m.ClearDraft {
		n += 2
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.ReplyToMsgId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ReplyToMsgId))
	}
	if m.RandomId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.RandomId))
	}
	if m.QueryId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.QueryId))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesGetMessageEditData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Id))
	}
	return n
}

func (m *TLMessagesEditMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoWebpage {
		n += 2
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Id))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.ReplyMarkup != nil {
		l = m.ReplyMarkup.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLMessagesEditInlineBotMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoWebpage {
		n += 2
	}
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.ReplyMarkup != nil {
		l = m.ReplyMarkup.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLMessagesGetBotCallbackAnswer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Game {
		n += 2
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.MsgId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MsgId))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesSetBotCallbackAnswer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Alert {
		n += 2
	}
	if m.QueryId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.QueryId))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.CacheTime != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.CacheTime))
	}
	return n
}

func (m *TLMessagesGetPeerDialogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Peers) > 0 {
		for _, e := range m.Peers {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLMessagesSaveDraft) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoWebpage {
		n += 2
	}
	if m.ReplyToMsgId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ReplyToMsgId))
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLMessagesGetAllDrafts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLMessagesGetFeaturedStickers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hash != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Hash))
	}
	return n
}

func (m *TLMessagesReadFeaturedStickers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovSchemaTlSyncService(uint64(e))
		}
		n += 1 + sovSchemaTlSyncService(uint64(l)) + l
	}
	return n
}

func (m *TLMessagesGetRecentStickers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Attached {
		n += 2
	}
	if m.Hash != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Hash))
	}
	return n
}

func (m *TLMessagesSaveRecentSticker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Attached {
		n += 2
	}
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Unsave != nil {
		l = m.Unsave.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesClearRecentStickers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Attached {
		n += 2
	}
	return n
}

func (m *TLMessagesGetArchivedStickers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Masks {
		n += 2
	}
	if m.OffsetId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.OffsetId))
	}
	if m.Limit != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Limit))
	}
	return n
}

func (m *TLMessagesGetMaskStickers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hash != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Hash))
	}
	return n
}

func (m *TLMessagesGetAttachedStickers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Media != nil {
		l = m.Media.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesSetGameScore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EditMessage {
		n += 2
	}
	if m.Force {
		n += 2
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Id))
	}
	if m.UserId != nil {
		l = m.UserId.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Score != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Score))
	}
	return n
}

func (m *TLMessagesSetInlineGameScore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EditMessage {
		n += 2
	}
	if m.Force {
		n += 2
	}
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.UserId != nil {
		l = m.UserId.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Score != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Score))
	}
	return n
}

func (m *TLMessagesGetGameHighScores) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Id))
	}
	if m.UserId != nil {
		l = m.UserId.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesGetInlineGameHighScores) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.UserId != nil {
		l = m.UserId.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesGetCommonChats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != nil {
		l = m.UserId.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.MaxId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MaxId))
	}
	if m.Limit != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Limit))
	}
	return n
}

func (m *TLMessagesGetAllChats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExceptIds) > 0 {
		l = 0
		for _, e := range m.ExceptIds {
			l += sovSchemaTlSyncService(uint64(e))
		}
		n += 1 + sovSchemaTlSyncService(uint64(l)) + l
	}
	return n
}

func (m *TLMessagesGetWebPage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Hash != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Hash))
	}
	return n
}

func (m *TLMessagesToggleDialogPin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pinned {
		n += 2
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesReorderPinnedDialogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Force {
		n += 2
	}
	if len(m.Order) > 0 {
		for _, e := range m.Order {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLMessagesGetPinnedDialogs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLMessagesSetBotShippingResults) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueryId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.QueryId))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.ShippingOptions) > 0 {
		for _, e := range m.ShippingOptions {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLMessagesSetBotPrecheckoutResults) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.QueryId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.QueryId))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesUploadMedia) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Media != nil {
		l = m.Media.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesSendScreenshotNotification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.ReplyToMsgId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ReplyToMsgId))
	}
	if m.RandomId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.RandomId))
	}
	return n
}

func (m *TLMessagesGetFavedStickers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hash != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Hash))
	}
	return n
}

func (m *TLMessagesFaveSticker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Unfave != nil {
		l = m.Unfave.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesGetUnreadMentions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.OffsetId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.OffsetId))
	}
	if m.AddOffset != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.AddOffset))
	}
	if m.Limit != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Limit))
	}
	if m.MaxId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MaxId))
	}
	if m.MinId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MinId))
	}
	return n
}

func (m *TLUpdatesGetState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLUpdatesGetDifference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pts != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Pts))
	}
	if m.PtsTotalLimit != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.PtsTotalLimit))
	}
	if m.Date != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Date))
	}
	if m.Qts != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Qts))
	}
	return n
}

func (m *TLUpdatesGetChannelDifference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Force {
		n += 2
	}
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Pts != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Pts))
	}
	if m.Limit != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Limit))
	}
	return n
}

func (m *TLPhotosUpdateProfilePhoto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLPhotosUploadProfilePhoto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.File != nil {
		l = m.File.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLPhotosDeletePhotos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, e := range m.Id {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLPhotosGetUserPhotos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != nil {
		l = m.UserId.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Offset))
	}
	if m.MaxId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MaxId))
	}
	if m.Limit != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Limit))
	}
	return n
}

func (m *TLUploadSaveFilePart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FileId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.FileId))
	}
	if m.FilePart != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.FilePart))
	}
	l = len(m.Bytes)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLUploadGetFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Limit))
	}
	return n
}

func (m *TLUploadSaveBigFilePart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FileId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.FileId))
	}
	if m.FilePart != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.FilePart))
	}
	if m.FileTotalParts != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.FileTotalParts))
	}
	l = len(m.Bytes)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLUploadGetWebFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Limit))
	}
	return n
}

func (m *TLUploadGetCdnFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileToken)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Limit))
	}
	return n
}

func (m *TLUploadReuploadCdnFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileToken)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.RequestToken)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLUploadGetCdnFileHashes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileToken)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Offset))
	}
	return n
}

func (m *TLHelpGetConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLHelpGetNearestDc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLHelpGetAppUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLHelpSaveAppLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLHelpGetInviteText) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLHelpGetSupport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLHelpGetAppChangelog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PrevAppVersion)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLHelpGetTermsOfService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLHelpSetBotUpdatesStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PendingUpdatesCount != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.PendingUpdatesCount))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLHelpGetCdnConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLChannelsReadHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.MaxId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MaxId))
	}
	return n
}

func (m *TLChannelsDeleteMessages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovSchemaTlSyncService(uint64(e))
		}
		n += 1 + sovSchemaTlSyncService(uint64(l)) + l
	}
	return n
}

func (m *TLChannelsDeleteUserHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.UserId != nil {
		l = m.UserId.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLChannelsReportSpam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.UserId != nil {
		l = m.UserId.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovSchemaTlSyncService(uint64(e))
		}
		n += 1 + sovSchemaTlSyncService(uint64(l)) + l
	}
	return n
}

func (m *TLChannelsGetMessages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovSchemaTlSyncService(uint64(e))
		}
		n += 1 + sovSchemaTlSyncService(uint64(l)) + l
	}
	return n
}

func (m *TLChannelsGetParticipants) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Limit))
	}
	return n
}

func (m *TLChannelsGetParticipant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.UserId != nil {
		l = m.UserId.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLChannelsGetChannels) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, e := range m.Id {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLChannelsGetFullChannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLChannelsCreateChannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Broadcast {
		n += 2
	}
	if m.Megagroup {
		n += 2
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLChannelsEditAbout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLChannelsEditAdmin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.UserId != nil {
		l = m.UserId.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.AdminRights != nil {
		l = m.AdminRights.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLChannelsEditTitle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLChannelsEditPhoto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Photo != nil {
		l = m.Photo.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLChannelsCheckUsername) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLChannelsUpdateUsername) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLChannelsJoinChannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLChannelsLeaveChannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLChannelsInviteToChannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLChannelsExportInvite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLChannelsDeleteChannel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLChannelsToggleInvites) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLChannelsExportMessageLink) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Id))
	}
	return n
}

func (m *TLChannelsToggleSignatures) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLChannelsUpdatePinnedMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Silent {
		n += 2
	}
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Id))
	}
	return n
}

func (m *TLChannelsGetAdminedPublicChannels) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLChannelsEditBanned) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.UserId != nil {
		l = m.UserId.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.BannedRights != nil {
		l = m.BannedRights.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLChannelsGetAdminLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Q)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.EventsFilter != nil {
		l = m.EventsFilter.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.Admins) > 0 {
		for _, e := range m.Admins {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	if m.MaxId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MaxId))
	}
	if m.MinId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MinId))
	}
	if m.Limit != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Limit))
	}
	return n
}

func (m *TLChannelsSetStickers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Stickerset != nil {
		l = m.Stickerset.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLChannelsReadMessageContents) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovSchemaTlSyncService(uint64(e))
		}
		n += 1 + sovSchemaTlSyncService(uint64(l)) + l
	}
	return n
}

func (m *TLBotsSendCustomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CustomMethod)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLBotsAnswerWebhookJSONQuery) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueryId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.QueryId))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLPaymentsGetPaymentForm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MsgId))
	}
	return n
}

func (m *TLPaymentsGetPaymentReceipt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MsgId))
	}
	return n
}

func (m *TLPaymentsValidateRequestedInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Save {
		n += 2
	}
	if m.MsgId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MsgId))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLPaymentsSendPaymentForm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MsgId))
	}
	l = len(m.RequestedInfoId)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.ShippingOptionId)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Credentials != nil {
		l = m.Credentials.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLPaymentsGetSavedInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLPaymentsClearSavedInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Credentials {
		n += 2
	}
	if m.Info {
		n += 2
	}
	return n
}

func (m *TLStickersCreateStickerSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Masks {
		n += 2
	}
	if m.UserId != nil {
		l = m.UserId.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.Stickers) > 0 {
		for _, e := range m.Stickers {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLStickersRemoveStickerFromSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sticker != nil {
		l = m.Sticker.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLStickersChangeStickerPosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sticker != nil {
		l = m.Sticker.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Position))
	}
	return n
}

func (m *TLStickersAddStickerToSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stickerset != nil {
		l = m.Stickerset.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Sticker != nil {
		l = m.Sticker.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLPhoneGetCallConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLPhoneRequestCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != nil {
		l = m.UserId.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.RandomId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.RandomId))
	}
	l = len(m.GAHash)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Protocol != nil {
		l = m.Protocol.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLPhoneAcceptCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.GB)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Protocol != nil {
		l = m.Protocol.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLPhoneConfirmCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.GA)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.KeyFingerprint != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.KeyFingerprint))
	}
	if m.Protocol != nil {
		l = m.Protocol.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLPhoneReceivedCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLPhoneDiscardCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Duration))
	}
	if m.Reason != nil {
		l = m.Reason.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.ConnectionId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ConnectionId))
	}
	return n
}

func (m *TLPhoneSetCallRating) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Rating != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Rating))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLPhoneSaveCallDebug) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Debug != nil {
		l = m.Debug.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLLangpackGetLangPack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LangCode)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLLangpackGetStrings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LangCode)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.Keys) > 0 {
		for _, s := range m.Keys {
			l = len(s)
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLLangpackGetDifference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromVersion != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.FromVersion))
	}
	return n
}

func (m *TLLangpackGetLanguages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLUpdatesGetChannelDifference57) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Pts != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Pts))
	}
	if m.Limit != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Limit))
	}
	return n
}

func (m *TLAuthSendCode73) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowFlashcall {
		n += 2
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.CurrentNumber != nil {
		l = m.CurrentNumber.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.ApiId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ApiId))
	}
	l = len(m.ApiHash)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.LangCode)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountRegisterDevice73) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TokenType != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.TokenType))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.DeviceModel)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.SystemVersion)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.AppVersion)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.AppSandbox != nil {
		l = m.AppSandbox.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.LangCode)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLPhotosUpdateProfilePhoto73) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Crop != nil {
		l = m.Crop.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLPhotosUploadProfilePhoto73) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.File != nil {
		l = m.File.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Caption)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.GeoPoint != nil {
		l = m.GeoPoint.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Crop != nil {
		l = m.Crop.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLHelpGetWkConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLHelpGetJsonConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLHelpGetScheme) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Version))
	}
	return n
}

func (m *TLHelpGetConfig73) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLHelpGetAppUpdate73) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceModel)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.SystemVersion)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.AppVersion)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.LangCode)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLHelpGetInviteText73) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LangCode)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLHelpGetRecentMeUrls) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Referer)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLHelpGetTermsOfService73) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LangCode)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesReadHistory73) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.MaxId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MaxId))
	}
	if m.Offset != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Offset))
	}
	return n
}

func (m *TLMessagesEditMessage73) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoWebpage {
		n += 2
	}
	if m.StopGeoLive {
		n += 2
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Id))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.ReplyMarkup != nil {
		l = m.ReplyMarkup.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	if m.GeoPoint != nil {
		l = m.GeoPoint.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesSearch73) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Q)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.FromId != nil {
		l = m.FromId.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.MinDate != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MinDate))
	}
	if m.MaxDate != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MaxDate))
	}
	if m.Offset != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Offset))
	}
	if m.MaxId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MaxId))
	}
	if m.Limit != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Limit))
	}
	return n
}

func (m *TLMessagesReadMentions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesGetRecentLocations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Limit))
	}
	return n
}

func (m *TLMessagesSendMultiMedia) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Silent {
		n += 2
	}
	if m.Background {
		n += 2
	}
	if m.ClearDraft {
		n += 2
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.ReplyToMsgId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ReplyToMsgId))
	}
	if len(m.MultiMedia) > 0 {
		for _, e := range m.MultiMedia {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLMessagesUploadEncryptedFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.File != nil {
		l = m.File.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesSaveRecentSticker73) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Unsave != nil {
		l = m.Unsave.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLChannelsDeleteHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.MaxId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MaxId))
	}
	return n
}

func (m *TLChannelsTogglePreHistoryHidden) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLChannelsGetParticipants73) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Limit))
	}
	if m.Hash != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Hash))
	}
	return n
}

func (m *TLChannelsEditBanned2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ChannelId))
	}
	if m.IsSilence != nil {
		l = m.IsSilence.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.IsText != nil {
		l = m.IsText.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLChannelsGetBanned2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChannelId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ChannelId))
	}
	return n
}

func (m *TLPhone_WebrtcCreateOffer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Sdp)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLPhone_WebrtcCreateAnswer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Sdp)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLPhone_WebrtcAddCandidate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.SdpId)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.SdpIndex != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.SdpIndex))
	}
	l = len(m.Sdp)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLInitConnection82) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ApiId))
	}
	l = len(m.DeviceModel)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.SystemVersion)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.AppVersion)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.SystemLangCode)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.LangPack)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.LangCode)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Proxy != nil {
		l = m.Proxy.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAuthSendCode82) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowFlashcall {
		n += 2
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.CurrentNumber != nil {
		l = m.CurrentNumber.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.ApiId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ApiId))
	}
	l = len(m.ApiHash)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLHelpGetConfig82) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLHelpGetTermsOfServiceUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLHelpAcceptTermsOfService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLHelpGetDeepLinkInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLHelpTest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLMessagesGetPeerDialogs82) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Peers) > 0 {
		for _, e := range m.Peers {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLMessagesGetMessages82) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, e := range m.Id {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLMessagesGetDialogs82) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExcludePinned {
		n += 2
	}
	if m.OffsetDate != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.OffsetDate))
	}
	if m.OffsetId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.OffsetId))
	}
	if m.OffsetPeer != nil {
		l = m.OffsetPeer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Limit))
	}
	if m.Hash != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Hash))
	}
	return n
}

func (m *TLMessagesGetHistory82) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.OffsetId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.OffsetId))
	}
	if m.OffsetDate != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.OffsetDate))
	}
	if m.AddOffset != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.AddOffset))
	}
	if m.Limit != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Limit))
	}
	if m.MaxId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MaxId))
	}
	if m.MinId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MinId))
	}
	if m.Hash != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Hash))
	}
	return n
}

func (m *TLMessagesSearch82) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Q)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.FromId != nil {
		l = m.FromId.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.MinDate != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MinDate))
	}
	if m.MaxDate != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MaxDate))
	}
	if m.OffsetId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.OffsetId))
	}
	if m.AddOffset != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.AddOffset))
	}
	if m.Limit != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Limit))
	}
	if m.MaxId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MaxId))
	}
	if m.MinId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MinId))
	}
	if m.Hash != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Hash))
	}
	return n
}

func (m *TLMessagesSendMedia82) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Silent {
		n += 2
	}
	if m.Background {
		n += 2
	}
	if m.ClearDraft {
		n += 2
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.ReplyToMsgId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ReplyToMsgId))
	}
	if m.Media != nil {
		l = m.Media.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.RandomId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.RandomId))
	}
	if m.ReplyMarkup != nil {
		l = m.ReplyMarkup.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLInitConnection114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ApiId))
	}
	l = len(m.DeviceModel)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.SystemVersion)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.AppVersion)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.SystemLangCode)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.LangPack)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.LangCode)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Proxy != nil {
		l = m.Proxy.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLInvokeWithMessagesRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Range != nil {
		l = m.Range.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLInvokeWithTakeout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TakeoutId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.TakeoutId))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAuthSendCode114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.ApiId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ApiId))
	}
	l = len(m.ApiHash)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAuthSignUp114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.PhoneCodeHash)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAuthCheckPassword114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Password != nil {
		l = m.Password.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAuthExportLoginToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ApiId))
	}
	l = len(m.ApiHash)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.ExceptIds) > 0 {
		l = 0
		for _, e := range m.ExceptIds {
			l += sovSchemaTlSyncService(uint64(e))
		}
		n += 1 + sovSchemaTlSyncService(uint64(l)) + l
	}
	return n
}

func (m *TLAuthImportLoginToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAuthAcceptLoginToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountRegisterDevice114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoMuted {
		n += 2
	}
	if m.TokenType != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.TokenType))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.AppSandbox != nil {
		l = m.AppSandbox.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.OtherUids) > 0 {
		l = 0
		for _, e := range m.OtherUids {
			l += sovSchemaTlSyncService(uint64(e))
		}
		n += 1 + sovSchemaTlSyncService(uint64(l)) + l
	}
	return n
}

func (m *TLAccountUnregisterDevice114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TokenType != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.TokenType))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.OtherUids) > 0 {
		l = 0
		for _, e := range m.OtherUids {
			l += sovSchemaTlSyncService(uint64(e))
		}
		n += 1 + sovSchemaTlSyncService(uint64(l)) + l
	}
	return n
}

func (m *TLAccountGetWallPapers114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hash != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Hash))
	}
	return n
}

func (m *TLAccountSendChangePhoneCode114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountGetPasswordSettings114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Password != nil {
		l = m.Password.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountUpdatePasswordSettings114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Password != nil {
		l = m.Password.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.NewSettings != nil {
		l = m.NewSettings.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountSendConfirmPhoneCode114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountGetTmpPassword114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Password != nil {
		l = m.Password.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Period != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Period))
	}
	return n
}

func (m *TLAccountGetWebAuthorizations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLAccountResetWebAuthorization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hash != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Hash))
	}
	return n
}

func (m *TLAccountResetWebAuthorizations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLAccountGetAllSecureValues) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLAccountGetSecureValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Types) > 0 {
		for _, e := range m.Types {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLAccountSaveSecureValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.SecureSecretId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.SecureSecretId))
	}
	return n
}

func (m *TLAccountDeleteSecureValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Types) > 0 {
		for _, e := range m.Types {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLAccountGetAuthorizationForm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.BotId))
	}
	l = len(m.Scope)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountAcceptAuthorization) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BotId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.BotId))
	}
	l = len(m.Scope)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.ValueHashes) > 0 {
		for _, e := range m.ValueHashes {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	if m.Credentials != nil {
		l = m.Credentials.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountSendVerifyPhoneCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountVerifyPhone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.PhoneCodeHash)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.PhoneCode)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountSendVerifyEmailCode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountVerifyEmail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountInitTakeoutSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Contacts {
		n += 2
	}
	if m.MessageUsers {
		n += 2
	}
	if m.MessageChats {
		n += 2
	}
	if m.MessageMegagroups {
		n += 2
	}
	if m.MessageChannels {
		n += 2
	}
	if m.Files {
		n += 2
	}
	if m.FileMaxSize != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.FileMaxSize))
	}
	return n
}

func (m *TLAccountFinishTakeoutSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func (m *TLAccountConfirmPasswordEmail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountResendPasswordEmail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLAccountCancelPasswordEmail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLAccountGetContactSignUpNotification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLAccountSetContactSignUpNotification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Silent != nil {
		l = m.Silent.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountGetNotifyExceptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CompareSound {
		n += 2
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountGetWallPaper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wallpaper != nil {
		l = m.Wallpaper.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountUploadWallPaper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.File != nil {
		l = m.File.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.MimeType)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountSaveWallPaper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wallpaper != nil {
		l = m.Wallpaper.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Unsave != nil {
		l = m.Unsave.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountInstallWallPaper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wallpaper != nil {
		l = m.Wallpaper.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountResetWallPapers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLAccountGetAutoDownloadSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLAccountSaveAutoDownloadSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Low {
		n += 2
	}
	if m.High {
		n += 2
	}
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountUploadTheme) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.File != nil {
		l = m.File.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Thumb != nil {
		l = m.Thumb.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.MimeType)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountCreateTheme) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Slug)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Document != nil {
		l = m.Document.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountUpdateTheme) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Theme != nil {
		l = m.Theme.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Slug)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Document != nil {
		l = m.Document.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountSaveTheme) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Theme != nil {
		l = m.Theme.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Unsave != nil {
		l = m.Unsave.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountInstallTheme) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dark {
		n += 2
	}
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Theme != nil {
		l = m.Theme.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLAccountGetTheme) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Theme != nil {
		l = m.Theme.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.DocumentId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.DocumentId))
	}
	return n
}

func (m *TLAccountGetThemes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Format)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Hash != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Hash))
	}
	return n
}

func (m *TLAccountSetContentSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SensitiveEnabled {
		n += 2
	}
	return n
}

func (m *TLAccountGetContentSettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLAccountGetMultiWallPapers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Wallpapers) > 0 {
		for _, e := range m.Wallpapers {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLUsersSetSecureValueErrors) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.Errors) > 0 {
		for _, e := range m.Errors {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLContactsGetContactIDs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hash != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Hash))
	}
	return n
}

func (m *TLContactsDeleteContacts114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Id) > 0 {
		for _, e := range m.Id {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLContactsDeleteByPhones) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Phones) > 0 {
		for _, s := range m.Phones {
			l = len(s)
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLContactsGetSaved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLContactsToggleTopPeers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled != nil {
		l = m.Enabled.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLContactsAddContact) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddPhonePrivacyException {
		n += 2
	}
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLContactsAcceptContact) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLContactsGetLocated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Background {
		n += 2
	}
	if m.GeoPoint != nil {
		l = m.GeoPoint.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.SelfExpires != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.SelfExpires))
	}
	return n
}

func (m *TLMessagesGetDialogs114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExcludePinned {
		n += 2
	}
	if m.FolderId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.FolderId))
	}
	if m.OffsetDate != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.OffsetDate))
	}
	if m.OffsetId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.OffsetId))
	}
	if m.OffsetPeer != nil {
		l = m.OffsetPeer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Limit))
	}
	if m.Hash != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Hash))
	}
	return n
}

func (m *TLMessagesSendMessage114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoWebpage {
		n += 2
	}
	if m.Silent {
		n += 2
	}
	if m.Background {
		n += 2
	}
	if m.ClearDraft {
		n += 2
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.ReplyToMsgId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ReplyToMsgId))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.RandomId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.RandomId))
	}
	if m.ReplyMarkup != nil {
		l = m.ReplyMarkup.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	if m.ScheduleDate != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ScheduleDate))
	}
	return n
}

func (m *TLMessagesSendMedia114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Silent {
		n += 2
	}
	if m.Background {
		n += 2
	}
	if m.ClearDraft {
		n += 2
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.ReplyToMsgId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ReplyToMsgId))
	}
	if m.Media != nil {
		l = m.Media.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.RandomId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.RandomId))
	}
	if m.ReplyMarkup != nil {
		l = m.ReplyMarkup.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	if m.ScheduleDate != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ScheduleDate))
	}
	return n
}

func (m *TLMessagesForwardMessages114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Silent {
		n += 2
	}
	if m.Background {
		n += 2
	}
	if m.WithMyScore {
		n += 2
	}
	if m.Grouped {
		n += 2
	}
	if m.FromPeer != nil {
		l = m.FromPeer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovSchemaTlSyncService(uint64(e))
		}
		n += 1 + sovSchemaTlSyncService(uint64(l)) + l
	}
	if len(m.RandomId) > 0 {
		l = 0
		for _, e := range m.RandomId {
			l += sovSchemaTlSyncService(uint64(e))
		}
		n += 1 + sovSchemaTlSyncService(uint64(l)) + l
	}
	if m.ToPeer != nil {
		l = m.ToPeer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.ScheduleDate != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ScheduleDate))
	}
	return n
}

func (m *TLMessagesReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovSchemaTlSyncService(uint64(e))
		}
		n += 1 + sovSchemaTlSyncService(uint64(l)) + l
	}
	if m.Reason != nil {
		l = m.Reason.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesGetStickers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Emoticon)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Hash != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Hash))
	}
	return n
}

func (m *TLMessagesGetWebPagePreview114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLMessagesExportChatInvite114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesSearchGlobal114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FolderId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.FolderId))
	}
	l = len(m.Q)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.OffsetRate != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.OffsetRate))
	}
	if m.OffsetPeer != nil {
		l = m.OffsetPeer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.OffsetId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.OffsetId))
	}
	if m.Limit != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Limit))
	}
	return n
}

func (m *TLMessagesSendInlineBotResult114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Silent {
		n += 2
	}
	if m.Background {
		n += 2
	}
	if m.ClearDraft {
		n += 2
	}
	if m.HideVia {
		n += 2
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.ReplyToMsgId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ReplyToMsgId))
	}
	if m.RandomId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.RandomId))
	}
	if m.QueryId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.QueryId))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.ScheduleDate != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ScheduleDate))
	}
	return n
}

func (m *TLMessagesEditMessage114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoWebpage {
		n += 2
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Id))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Media != nil {
		l = m.Media.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.ReplyMarkup != nil {
		l = m.ReplyMarkup.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	if m.ScheduleDate != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ScheduleDate))
	}
	return n
}

func (m *TLMessagesEditInlineBotMessage114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NoWebpage {
		n += 2
	}
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Media != nil {
		l = m.Media.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.ReplyMarkup != nil {
		l = m.ReplyMarkup.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLMessagesToggleDialogPin114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pinned {
		n += 2
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesReorderPinnedDialogs114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Force {
		n += 2
	}
	if m.FolderId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.FolderId))
	}
	if len(m.Order) > 0 {
		for _, e := range m.Order {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLMessagesGetPinnedDialogs114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FolderId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.FolderId))
	}
	return n
}

func (m *TLMessagesGetRecentLocations114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Limit))
	}
	if m.Hash != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Hash))
	}
	return n
}

func (m *TLMessagesSendMultiMedia114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Silent {
		n += 2
	}
	if m.Background {
		n += 2
	}
	if m.ClearDraft {
		n += 2
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.ReplyToMsgId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ReplyToMsgId))
	}
	if len(m.MultiMedia) > 0 {
		for _, e := range m.MultiMedia {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	if m.ScheduleDate != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ScheduleDate))
	}
	return n
}

func (m *TLMessagesSearchStickerSets) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExcludeFeatured {
		n += 2
	}
	l = len(m.Q)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Hash != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Hash))
	}
	return n
}

func (m *TLMessagesGetSplitRanges) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLMessagesMarkDialogUnread) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Unread {
		n += 2
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesGetDialogUnreadMarks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLMessagesClearAllDrafts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLMessagesUpdatePinnedMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Silent {
		n += 2
	}
	if m.Unpin {
		n += 2
	}
	if m.PmOneside {
		n += 2
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Id))
	}
	return n
}

func (m *TLMessagesSendVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.MsgId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MsgId))
	}
	if len(m.Options) > 0 {
		for _, b := range m.Options {
			l = len(b)
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLMessagesGetPollResults) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.MsgId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MsgId))
	}
	return n
}

func (m *TLMessagesGetOnlines) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesGetStatsURL) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dark {
		n += 2
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Params)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesEditChatAbout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesEditChatDefaultBannedRights) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.BannedRights != nil {
		l = m.BannedRights.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesGetEmojiKeywords) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LangCode)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesGetEmojiKeywordsDifference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LangCode)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.FromVersion != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.FromVersion))
	}
	return n
}

func (m *TLMessagesGetEmojiKeywordsLanguages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LangCodes) > 0 {
		for _, s := range m.LangCodes {
			l = len(s)
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLMessagesGetEmojiURL) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LangCode)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesGetSearchCounters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.Filters) > 0 {
		for _, e := range m.Filters {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLMessagesRequestUrlAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.MsgId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MsgId))
	}
	if m.ButtonId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ButtonId))
	}
	return n
}

func (m *TLMessagesAcceptUrlAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WriteAllowed {
		n += 2
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.MsgId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MsgId))
	}
	if m.ButtonId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ButtonId))
	}
	return n
}

func (m *TLMessagesHidePeerSettingsBar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesGetScheduledHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Hash != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Hash))
	}
	return n
}

func (m *TLMessagesGetScheduledMessages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovSchemaTlSyncService(uint64(e))
		}
		n += 1 + sovSchemaTlSyncService(uint64(l)) + l
	}
	return n
}

func (m *TLMessagesSendScheduledMessages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovSchemaTlSyncService(uint64(e))
		}
		n += 1 + sovSchemaTlSyncService(uint64(l)) + l
	}
	return n
}

func (m *TLMessagesDeleteScheduledMessages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovSchemaTlSyncService(uint64(e))
		}
		n += 1 + sovSchemaTlSyncService(uint64(l)) + l
	}
	return n
}

func (m *TLMessagesGetPollVotes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Id))
	}
	l = len(m.Option)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Offset)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Limit))
	}
	return n
}

func (m *TLMessagesToggleStickerSets) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uninstall {
		n += 2
	}
	if m.Archive {
		n += 2
	}
	if m.Unarchive {
		n += 2
	}
	if len(m.Stickersets) > 0 {
		for _, e := range m.Stickersets {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLMessagesGetDialogFilters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLMessagesGetSuggestedDialogFilters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLMessagesUpdateDialogFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Id))
	}
	if m.Filter != nil {
		l = m.Filter.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesUpdateDialogFiltersOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Order) > 0 {
		l = 0
		for _, e := range m.Order {
			l += sovSchemaTlSyncService(uint64(e))
		}
		n += 1 + sovSchemaTlSyncService(uint64(l)) + l
	}
	return n
}

func (m *TLMessagesGetOldFeaturedStickers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Limit))
	}
	if m.Hash != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Hash))
	}
	return n
}

func (m *TLUploadGetFile114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Precise {
		n += 2
	}
	if m.CdnSupported {
		n += 2
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Limit))
	}
	return n
}

func (m *TLUploadReuploadCdnFile114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileToken)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.RequestToken)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLUploadGetCdnFileHashes114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileToken)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Offset))
	}
	return n
}

func (m *TLUploadGetFileHashes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Offset))
	}
	return n
}

func (m *TLHelpGetConfig114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLHelpGetAppUpdate114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLHelpGetAppConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLHelpGetPassportConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hash != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Hash))
	}
	return n
}

func (m *TLHelpGetSupportName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLHelpGetUserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != nil {
		l = m.UserId.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLHelpEditUserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != nil {
		l = m.UserId.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.Entities) > 0 {
		for _, e := range m.Entities {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLHelpGetPromoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLHelpHidePromoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLChannelsGetMessages114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.Id) > 0 {
		for _, e := range m.Id {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLChannelsCreateChannel114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Broadcast {
		n += 2
	}
	if m.Megagroup {
		n += 2
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.About)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.GeoPoint != nil {
		l = m.GeoPoint.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLChannelsEditAdmin114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.UserId != nil {
		l = m.UserId.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.AdminRights != nil {
		l = m.AdminRights.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Rank)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLChannelsExportMessageLink114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Id))
	}
	if m.Grouped != nil {
		l = m.Grouped.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLChannelsGetAdminedPublicChannels114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ByLocation {
		n += 2
	}
	if m.CheckLimit {
		n += 2
	}
	return n
}

func (m *TLChannelsEditBanned114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.UserId != nil {
		l = m.UserId.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.BannedRights != nil {
		l = m.BannedRights.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLChannelsGetLeftChannels) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Offset))
	}
	return n
}

func (m *TLChannelsGetGroupsForDiscussion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLChannelsSetDiscussionGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Broadcast != nil {
		l = m.Broadcast.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Group != nil {
		l = m.Group.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLChannelsEditCreator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.UserId != nil {
		l = m.UserId.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Password != nil {
		l = m.Password.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLChannelsEditLocation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.GeoPoint != nil {
		l = m.GeoPoint.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLChannelsToggleSlowMode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Seconds != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Seconds))
	}
	return n
}

func (m *TLChannelsGetInactiveChannels) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLBotsSetBotCommands) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Commands) > 0 {
		for _, e := range m.Commands {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLPaymentsGetBankCardData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Number)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLStickersCreateStickerSet114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Masks {
		n += 2
	}
	if m.Animated {
		n += 2
	}
	if m.UserId != nil {
		l = m.UserId.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.ShortName)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Thumb != nil {
		l = m.Thumb.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.Stickers) > 0 {
		for _, e := range m.Stickers {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLStickersSetStickerSetThumb) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stickerset != nil {
		l = m.Stickerset.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Thumb != nil {
		l = m.Thumb.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLPhoneRequestCall114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Video {
		n += 2
	}
	if m.UserId != nil {
		l = m.UserId.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.RandomId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.RandomId))
	}
	l = len(m.GAHash)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Protocol != nil {
		l = m.Protocol.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLPhoneDiscardCall114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Video {
		n += 2
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Duration))
	}
	if m.Reason != nil {
		l = m.Reason.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.ConnectionId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.ConnectionId))
	}
	return n
}

func (m *TLPhoneSetCallRating114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserInitiative {
		n += 2
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Rating != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Rating))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLPhoneSendSignalingData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLLangpackGetLangPack114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LangPack)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.LangCode)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLLangpackGetStrings114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LangPack)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.LangCode)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if len(m.Keys) > 0 {
		for _, s := range m.Keys {
			l = len(s)
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLLangpackGetDifference114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LangPack)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.LangCode)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.FromVersion != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.FromVersion))
	}
	return n
}

func (m *TLLangpackGetLanguages114) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LangPack)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLLangpackGetLanguage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LangPack)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	l = len(m.LangCode)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLFoldersEditPeerFolders) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FolderPeers) > 0 {
		for _, e := range m.FolderPeers {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *TLFoldersDeleteFolder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FolderId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.FolderId))
	}
	return n
}

func (m *TLStatsGetBroadcastStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dark {
		n += 2
	}
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLStatsLoadAsyncGraph) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.X != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.X))
	}
	return n
}

func (m *TLAccountGetGlobalPrivacySettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TLAccountSetGlobalPrivacySettings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Settings != nil {
		l = m.Settings.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLStatsGetMegagroupStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dark {
		n += 2
	}
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLPhotosUploadProfilePhoto117) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.File != nil {
		l = m.File.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Video != nil {
		l = m.Video.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.VideoStartTs != 0 {
		n += 9
	}
	return n
}

func (m *TLHelpDismissSuggestion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Suggestion)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLPhotosUpdateProfilePhoto117) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLHelpGetCountriesList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LangCode)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Hash != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.Hash))
	}
	return n
}

func (m *TLMessagesSendEncrypted118) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Silent {
		n += 2
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.RandomId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.RandomId))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesGetBotCallbackAnswer118) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Game {
		n += 2
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.MsgId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.MsgId))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.Password != nil {
		l = m.Password.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLMessagesSendEncryptedFile118) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Silent {
		n += 2
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.RandomId != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.RandomId))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.File != nil {
		l = m.File.Size()
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	return n
}

func (m *TLLangpackGetDifference118) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LangCode)
	if l > 0 {
		n += 1 + l + sovSchemaTlSyncService(uint64(l))
	}
	if m.FromVersion != 0 {
		n += 1 + sovSchemaTlSyncService(uint64(m.FromVersion))
	}
	return n
}

func (m *Vector_WallPaper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *Vector_User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *Vector_UserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *Vector_ContactStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *VectorInt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		l = 0
		for _, e := range m.Datas {
			l += sovSchemaTlSyncService(uint64(e))
		}
		n += 1 + sovSchemaTlSyncService(uint64(l)) + l
	}
	return n
}

func (m *Vector_ReceivedNotifyMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *VectorLong) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		l = 0
		for _, e := range m.Datas {
			l += sovSchemaTlSyncService(uint64(e))
		}
		n += 1 + sovSchemaTlSyncService(uint64(l)) + l
	}
	return n
}

func (m *Vector_StickerSetCovered) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *Vector_CdnFileHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *Vector_LangPackString) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *Vector_LangPackLanguage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *Vector_SecureValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *Vector_SavedContact) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *Vector_MessageRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *Vector_DialogPeer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *Vector_EmojiLanguage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *Vector_Messages_SearchCounter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *Vector_DialogFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *Vector_DialogFilterSuggested) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func (m *Vector_FileHash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovSchemaTlSyncService(uint64(l))
		}
	}
	return n
}

func sovSchemaTlSyncService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSchemaTlSyncService(x uint64) (n int) {
	return sovSchemaTlSyncService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TLInvokeAfterMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_invokeAfterMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_invokeAfterMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = append(m.Query[:0], dAtA[iNdEx:postIndex]...)
			if m.Query == nil {
				m.Query = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLInvokeAfterMsgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_invokeAfterMsgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_invokeAfterMsgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MsgIds = append(m.MsgIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MsgIds) == 0 {
					m.MsgIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchemaTlSyncService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MsgIds = append(m.MsgIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgIds", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = append(m.Query[:0], dAtA[iNdEx:postIndex]...)
			if m.Query == nil {
				m.Query = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLInitConnection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_initConnection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_initConnection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiId", wireType)
			}
			m.ApiId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceModel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceModel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemLangCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemLangCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangPack", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangPack = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = append(m.Query[:0], dAtA[iNdEx:postIndex]...)
			if m.Query == nil {
				m.Query = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLInvokeWithLayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_invokeWithLayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_invokeWithLayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Layer", wireType)
			}
			m.Layer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Layer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = append(m.Query[:0], dAtA[iNdEx:postIndex]...)
			if m.Query == nil {
				m.Query = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLInvokeWithoutUpdates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_invokeWithoutUpdates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_invokeWithoutUpdates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = append(m.Query[:0], dAtA[iNdEx:postIndex]...)
			if m.Query == nil {
				m.Query = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAuthCheckPhone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_auth_checkPhone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_auth_checkPhone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAuthSendCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_auth_sendCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_auth_sendCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowFlashcall", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowFlashcall = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentNumber", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrentNumber == nil {
				m.CurrentNumber = &Bool{}
			}
			if err := m.CurrentNumber.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiId", wireType)
			}
			m.ApiId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAuthSignUp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_auth_signUp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_auth_signUp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCodeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCodeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAuthSignIn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_auth_signIn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_auth_signIn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCodeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCodeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAuthLogOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_auth_logOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_auth_logOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAuthResetAuthorizations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_auth_resetAuthorizations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_auth_resetAuthorizations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAuthSendInvites) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_auth_sendInvites: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_auth_sendInvites: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumbers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumbers = append(m.PhoneNumbers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAuthExportAuthorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_auth_exportAuthorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_auth_exportAuthorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcId", wireType)
			}
			m.DcId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DcId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAuthImportAuthorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_auth_importAuthorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_auth_importAuthorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytes = append(m.Bytes[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytes == nil {
				m.Bytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAuthBindTempAuthKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_auth_bindTempAuthKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_auth_bindTempAuthKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermAuthKeyId", wireType)
			}
			m.PermAuthKeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PermAuthKeyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			m.ExpiresAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiresAt |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptedMessage", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncryptedMessage = append(m.EncryptedMessage[:0], dAtA[iNdEx:postIndex]...)
			if m.EncryptedMessage == nil {
				m.EncryptedMessage = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAuthImportBotAuthorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_auth_importBotAuthorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_auth_importBotAuthorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiId", wireType)
			}
			m.ApiId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotAuthToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BotAuthToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAuthCheckPassword) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_auth_checkPassword: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_auth_checkPassword: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PasswordHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PasswordHash = append(m.PasswordHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PasswordHash == nil {
				m.PasswordHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAuthRequestPasswordRecovery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_auth_requestPasswordRecovery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_auth_requestPasswordRecovery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAuthRecoverPassword) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_auth_recoverPassword: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_auth_recoverPassword: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAuthResendCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_auth_resendCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_auth_resendCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCodeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCodeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAuthCancelCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_auth_cancelCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_auth_cancelCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCodeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCodeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAuthDropTempAuthKeys) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_auth_dropTempAuthKeys: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_auth_dropTempAuthKeys: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ExceptAuthKeys = append(m.ExceptAuthKeys, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ExceptAuthKeys) == 0 {
					m.ExceptAuthKeys = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchemaTlSyncService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ExceptAuthKeys = append(m.ExceptAuthKeys, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ExceptAuthKeys", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAuthCheckInviteCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_auth_checkInviteCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_auth_checkInviteCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountRegisterDevice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_registerDevice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_registerDevice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenType", wireType)
			}
			m.TokenType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountUnregisterDevice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_unregisterDevice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_unregisterDevice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenType", wireType)
			}
			m.TokenType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountUpdateNotifySettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_updateNotifySettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_updateNotifySettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputNotifyPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &InputPeerNotifySettings{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountGetNotifySettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_getNotifySettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_getNotifySettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputNotifyPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountResetNotifySettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_resetNotifySettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_resetNotifySettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountUpdateProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_updateProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_updateProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountUpdateStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_updateStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_updateStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Offline == nil {
				m.Offline = &Bool{}
			}
			if err := m.Offline.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountGetWallPapers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_getWallPapers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_getWallPapers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountReportPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_reportPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_reportPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reason == nil {
				m.Reason = &ReportReason{}
			}
			if err := m.Reason.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountCheckUsername) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_checkUsername: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_checkUsername: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountUpdateUsername) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_updateUsername: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_updateUsername: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountGetPrivacy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_getPrivacy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_getPrivacy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &InputPrivacyKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountSetPrivacy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_setPrivacy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_setPrivacy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &InputPrivacyKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &InputPrivacyRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountDeleteAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_deleteAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_deleteAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountGetAccountTTL) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_getAccountTTL: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_getAccountTTL: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountSetAccountTTL) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_setAccountTTL: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_setAccountTTL: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ttl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ttl == nil {
				m.Ttl = &AccountDaysTTL{}
			}
			if err := m.Ttl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountSendChangePhoneCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_sendChangePhoneCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_sendChangePhoneCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowFlashcall", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowFlashcall = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentNumber", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrentNumber == nil {
				m.CurrentNumber = &Bool{}
			}
			if err := m.CurrentNumber.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountChangePhone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_changePhone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_changePhone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCodeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCodeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountUpdateDeviceLocked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_updateDeviceLocked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_updateDeviceLocked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountGetAuthorizations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_getAuthorizations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_getAuthorizations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountResetAuthorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_resetAuthorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_resetAuthorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountGetPassword) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_getPassword: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_getPassword: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountGetPasswordSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_getPasswordSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_getPasswordSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPasswordHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentPasswordHash = append(m.CurrentPasswordHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CurrentPasswordHash == nil {
				m.CurrentPasswordHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountUpdatePasswordSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_updatePasswordSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_updatePasswordSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPasswordHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentPasswordHash = append(m.CurrentPasswordHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CurrentPasswordHash == nil {
				m.CurrentPasswordHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewSettings == nil {
				m.NewSettings = &Account_PasswordInputSettings{}
			}
			if err := m.NewSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountSendConfirmPhoneCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_sendConfirmPhoneCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_sendConfirmPhoneCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowFlashcall", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowFlashcall = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentNumber", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrentNumber == nil {
				m.CurrentNumber = &Bool{}
			}
			if err := m.CurrentNumber.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountConfirmPhone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_confirmPhone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_confirmPhone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCodeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCodeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountGetTmpPassword) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_getTmpPassword: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_getTmpPassword: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PasswordHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PasswordHash = append(m.PasswordHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PasswordHash == nil {
				m.PasswordHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUsersGetUsers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_users_getUsers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_users_getUsers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, &InputUser{})
			if err := m.Id[len(m.Id)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUsersGetFullUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_users_getFullUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_users_getFullUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &InputUser{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUsersGetUserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_users_getUserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_users_getUserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &InputUser{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUsersGetUserInfoList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_users_getUserInfoList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_users_getUserInfoList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUsersGetEnvelopeState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_users_getEnvelopeState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_users_getEnvelopeState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eid", wireType)
			}
			m.Eid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Eid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUsersGetEnvelopeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_users_getEnvelopeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_users_getEnvelopeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eid", wireType)
			}
			m.Eid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Eid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessHash", wireType)
			}
			m.AccessHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccessHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUsersGetPointsHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_users_getPointsHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_users_getPointsHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Year", wireType)
			}
			m.Year = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Year |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUsersGetPointsRank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_users_getPointsRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_users_getPointsRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromRank", wireType)
			}
			m.FromRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromRank |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUsersSetPasswd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_users_setPasswd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_users_setPasswd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldPass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldPass = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passwd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Passwd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUsersCheckPasswd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_users_checkPasswd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_users_checkPasswd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passwd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Passwd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUsersCheckResetPasswdPhoneCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_users_checkResetPasswdPhoneCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_users_checkResetPasswdPhoneCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUsersSendResetPasswdPhoneCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_users_sendResetPasswdPhoneCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_users_sendResetPasswdPhoneCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUsersSetGender) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_users_setGender: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_users_setGender: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsonContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUsersSetUserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_users_setUserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_users_setUserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsonContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLContactsApplyFriend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_contacts_applyFriend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_contacts_applyFriend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsonContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLContactsAuditApply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_contacts_auditApply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_contacts_auditApply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsonContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLContactsGetApplyList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_contacts_getApplyList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_contacts_getApplyList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsonContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLContactsSearchUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_contacts_searchUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_contacts_searchUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsonContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLContactsSearchSource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_contacts_searchSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_contacts_searchSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsonContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLContactsGetStatuses) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_contacts_getStatuses: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_contacts_getStatuses: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLContactsGetContacts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_contacts_getContacts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_contacts_getContacts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLContactsImportContacts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_contacts_importContacts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_contacts_importContacts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contacts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contacts = append(m.Contacts, &InputContact{})
			if err := m.Contacts[len(m.Contacts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLContactsDeleteContact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_contacts_deleteContact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_contacts_deleteContact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &InputUser{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLContactsDeleteContacts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_contacts_deleteContacts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_contacts_deleteContacts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, &InputUser{})
			if err := m.Id[len(m.Id)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLContactsBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_contacts_block: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_contacts_block: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &InputUser{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLContactsUnblock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_contacts_unblock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_contacts_unblock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &InputUser{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLContactsGetBlocked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_contacts_getBlocked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_contacts_getBlocked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLContactsExportCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_contacts_exportCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_contacts_exportCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLContactsImportCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_contacts_importCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_contacts_importCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ExportCard = append(m.ExportCard, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ExportCard) == 0 {
					m.ExportCard = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchemaTlSyncService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ExportCard = append(m.ExportCard, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportCard", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLContactsSearch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_contacts_search: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_contacts_search: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLContactsResolveUsername) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_contacts_resolveUsername: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_contacts_resolveUsername: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLContactsGetTopPeers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_contacts_getTopPeers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_contacts_getTopPeers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Correspondents", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Correspondents = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotsPm", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotsPm = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotsInline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BotsInline = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCalls", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PhoneCalls = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Groups = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Channels = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLContactsResetTopPeerRating) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_contacts_resetTopPeerRating: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_contacts_resetTopPeerRating: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Category == nil {
				m.Category = &TopPeerCategory{}
			}
			if err := m.Category.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLContactsResetSaved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_contacts_resetSaved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_contacts_resetSaved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchemaTlSyncService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetDialogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getDialogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getDialogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludePinned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExcludePinned = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetDate", wireType)
			}
			m.OffsetDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetId", wireType)
			}
			m.OffsetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OffsetPeer == nil {
				m.OffsetPeer = &InputPeer{}
			}
			if err := m.OffsetPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetId", wireType)
			}
			m.OffsetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetDate", wireType)
			}
			m.OffsetDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddOffset", wireType)
			}
			m.AddOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddOffset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinId", wireType)
			}
			m.MinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSearch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_search: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_search: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FromId == nil {
				m.FromId = &InputUser{}
			}
			if err := m.FromId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &MessagesFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDate", wireType)
			}
			m.MinDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDate", wireType)
			}
			m.MaxDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetId", wireType)
			}
			m.OffsetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddOffset", wireType)
			}
			m.AddOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddOffset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinId", wireType)
			}
			m.MinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesReadHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_readHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_readHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesDeleteHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_deleteHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_deleteHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JustClear", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.JustClear = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revoke", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Revoke = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesDeleteMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_deleteMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_deleteMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revoke", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Revoke = bool(v != 0)
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchemaTlSyncService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesReceivedMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_receivedMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_receivedMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSetTyping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_setTyping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_setTyping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Action == nil {
				m.Action = &SendMessageAction{}
			}
			if err := m.Action.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSendMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_sendMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_sendMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWebpage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoWebpage = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Background", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Background = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearDraft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClearDraft = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyToMsgId", wireType)
			}
			m.ReplyToMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyToMsgId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyMarkup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyMarkup == nil {
				m.ReplyMarkup = &ReplyMarkup{}
			}
			if err := m.ReplyMarkup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &MessageEntity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSendMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_sendMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_sendMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Background", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Background = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearDraft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClearDraft = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyToMsgId", wireType)
			}
			m.ReplyToMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyToMsgId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Media == nil {
				m.Media = &InputMedia{}
			}
			if err := m.Media.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyMarkup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyMarkup == nil {
				m.ReplyMarkup = &ReplyMarkup{}
			}
			if err := m.ReplyMarkup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesForwardMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_forwardMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_forwardMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Background", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Background = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithMyScore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithMyScore = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FromPeer == nil {
				m.FromPeer = &InputPeer{}
			}
			if err := m.FromPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchemaTlSyncService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		case 7:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RandomId = append(m.RandomId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RandomId) == 0 {
					m.RandomId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchemaTlSyncService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RandomId = append(m.RandomId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ToPeer == nil {
				m.ToPeer = &InputPeer{}
			}
			if err := m.ToPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesReportSpam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_reportSpam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_reportSpam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesHideReportSpam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_hideReportSpam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_hideReportSpam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetPeerSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getPeerSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getPeerSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetChats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getChats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getChats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchemaTlSyncService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetFullChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getFullChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getFullChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesEditChatTitle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_editChatTitle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_editChatTitle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesEditChatPhoto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_editChatPhoto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_editChatPhoto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Photo == nil {
				m.Photo = &InputChatPhoto{}
			}
			if err := m.Photo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesAddChatUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_addChatUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_addChatUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserId == nil {
				m.UserId = &InputUser{}
			}
			if err := m.UserId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FwdLimit", wireType)
			}
			m.FwdLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FwdLimit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesDeleteChatUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_deleteChatUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_deleteChatUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserId == nil {
				m.UserId = &InputUser{}
			}
			if err := m.UserId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesCreateChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_createChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_createChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &InputUser{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesForwardMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_forwardMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_forwardMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetDhConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getDhConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getDhConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomLength", wireType)
			}
			m.RandomLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomLength |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesRequestEncryption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_requestEncryption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_requestEncryption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserId == nil {
				m.UserId = &InputUser{}
			}
			if err := m.UserId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GA", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GA = append(m.GA[:0], dAtA[iNdEx:postIndex]...)
			if m.GA == nil {
				m.GA = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesAcceptEncryption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_acceptEncryption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_acceptEncryption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputEncryptedChat{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GB", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GB = append(m.GB[:0], dAtA[iNdEx:postIndex]...)
			if m.GB == nil {
				m.GB = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyFingerprint", wireType)
			}
			m.KeyFingerprint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyFingerprint |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesDiscardEncryption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_discardEncryption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_discardEncryption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSetEncryptedTyping) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_setEncryptedTyping: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_setEncryptedTyping: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputEncryptedChat{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Typing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Typing == nil {
				m.Typing = &Bool{}
			}
			if err := m.Typing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesReadEncryptedHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_readEncryptedHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_readEncryptedHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputEncryptedChat{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDate", wireType)
			}
			m.MaxDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSendEncrypted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_sendEncrypted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_sendEncrypted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputEncryptedChat{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSendEncryptedFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_sendEncryptedFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_sendEncryptedFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputEncryptedChat{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.File == nil {
				m.File = &InputEncryptedFile{}
			}
			if err := m.File.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSendEncryptedService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_sendEncryptedService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_sendEncryptedService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputEncryptedChat{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesReceivedQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_receivedQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_receivedQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxQts", wireType)
			}
			m.MaxQts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxQts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesReportEncryptedSpam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_reportEncryptedSpam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_reportEncryptedSpam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputEncryptedChat{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesReadMessageContents) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_readMessageContents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_readMessageContents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchemaTlSyncService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetAllStickers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getAllStickers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getAllStickers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetWebPagePreview) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getWebPagePreview: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getWebPagePreview: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesExportChatInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_exportChatInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_exportChatInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesCheckChatInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_checkChatInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_checkChatInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesImportChatInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_importChatInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_importChatInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetStickerSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getStickerSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getStickerSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stickerset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stickerset == nil {
				m.Stickerset = &InputStickerSet{}
			}
			if err := m.Stickerset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesInstallStickerSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_installStickerSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_installStickerSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stickerset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stickerset == nil {
				m.Stickerset = &InputStickerSet{}
			}
			if err := m.Stickerset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archived", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Archived == nil {
				m.Archived = &Bool{}
			}
			if err := m.Archived.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesUninstallStickerSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_uninstallStickerSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_uninstallStickerSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stickerset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stickerset == nil {
				m.Stickerset = &InputStickerSet{}
			}
			if err := m.Stickerset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesStartBot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_startBot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_startBot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bot == nil {
				m.Bot = &InputUser{}
			}
			if err := m.Bot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartParam", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartParam = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetMessagesViews) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getMessagesViews: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getMessagesViews: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchemaTlSyncService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Increment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Increment == nil {
				m.Increment = &Bool{}
			}
			if err := m.Increment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesToggleChatAdmins) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_toggleChatAdmins: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_toggleChatAdmins: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &Bool{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesEditChatAdmin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_editChatAdmin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_editChatAdmin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserId == nil {
				m.UserId = &InputUser{}
			}
			if err := m.UserId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdmin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsAdmin == nil {
				m.IsAdmin = &Bool{}
			}
			if err := m.IsAdmin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesMigrateChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_migrateChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_migrateChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChatId", wireType)
			}
			m.ChatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChatId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSearchGlobal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_searchGlobal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_searchGlobal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetDate", wireType)
			}
			m.OffsetDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OffsetPeer == nil {
				m.OffsetPeer = &InputPeer{}
			}
			if err := m.OffsetPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetId", wireType)
			}
			m.OffsetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesReorderStickerSets) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_reorderStickerSets: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_reorderStickerSets: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Masks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Masks = bool(v != 0)
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Order = append(m.Order, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Order) == 0 {
					m.Order = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchemaTlSyncService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Order = append(m.Order, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetDocumentByHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getDocumentByHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getDocumentByHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sha256", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sha256 = append(m.Sha256[:0], dAtA[iNdEx:postIndex]...)
			if m.Sha256 == nil {
				m.Sha256 = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MimeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MimeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSearchGifs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_searchGifs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_searchGifs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetSavedGifs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getSavedGifs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getSavedGifs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSaveGif) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_saveGif: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_saveGif: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &InputDocument{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unsave", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Unsave == nil {
				m.Unsave = &Bool{}
			}
			if err := m.Unsave.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetInlineBotResults) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getInlineBotResults: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getInlineBotResults: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bot == nil {
				m.Bot = &InputUser{}
			}
			if err := m.Bot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeoPoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GeoPoint == nil {
				m.GeoPoint = &InputGeoPoint{}
			}
			if err := m.GeoPoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSetInlineBotResults) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_setInlineBotResults: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_setInlineBotResults: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gallery", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Gallery = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Private", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Private = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			m.QueryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &InputBotInlineResult{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheTime", wireType)
			}
			m.CacheTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CacheTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextOffset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextOffset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchPm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SwitchPm == nil {
				m.SwitchPm = &InlineBotSwitchPM{}
			}
			if err := m.SwitchPm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSendInlineBotResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_sendInlineBotResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_sendInlineBotResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Background", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Background = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearDraft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClearDraft = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyToMsgId", wireType)
			}
			m.ReplyToMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyToMsgId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			m.QueryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetMessageEditData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getMessageEditData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getMessageEditData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesEditMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_editMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_editMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWebpage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoWebpage = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyMarkup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyMarkup == nil {
				m.ReplyMarkup = &ReplyMarkup{}
			}
			if err := m.ReplyMarkup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &MessageEntity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesEditInlineBotMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_editInlineBotMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_editInlineBotMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWebpage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoWebpage = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &InputBotInlineMessageID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyMarkup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyMarkup == nil {
				m.ReplyMarkup = &ReplyMarkup{}
			}
			if err := m.ReplyMarkup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &MessageEntity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetBotCallbackAnswer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getBotCallbackAnswer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getBotCallbackAnswer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Game", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Game = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSetBotCallbackAnswer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_setBotCallbackAnswer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_setBotCallbackAnswer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alert", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Alert = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			m.QueryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheTime", wireType)
			}
			m.CacheTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CacheTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetPeerDialogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getPeerDialogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getPeerDialogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peers = append(m.Peers, &InputPeer{})
			if err := m.Peers[len(m.Peers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSaveDraft) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_saveDraft: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_saveDraft: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWebpage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoWebpage = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyToMsgId", wireType)
			}
			m.ReplyToMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyToMsgId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &MessageEntity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetAllDrafts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getAllDrafts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getAllDrafts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetFeaturedStickers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getFeaturedStickers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getFeaturedStickers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesReadFeaturedStickers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_readFeaturedStickers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_readFeaturedStickers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchemaTlSyncService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetRecentStickers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getRecentStickers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getRecentStickers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attached", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Attached = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSaveRecentSticker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_saveRecentSticker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_saveRecentSticker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attached", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Attached = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &InputDocument{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unsave", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Unsave == nil {
				m.Unsave = &Bool{}
			}
			if err := m.Unsave.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesClearRecentStickers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_clearRecentStickers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_clearRecentStickers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attached", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Attached = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetArchivedStickers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getArchivedStickers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getArchivedStickers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Masks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Masks = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetId", wireType)
			}
			m.OffsetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetMaskStickers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getMaskStickers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getMaskStickers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetAttachedStickers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getAttachedStickers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getAttachedStickers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Media == nil {
				m.Media = &InputStickeredMedia{}
			}
			if err := m.Media.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSetGameScore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_setGameScore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_setGameScore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditMessage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EditMessage = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Force = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserId == nil {
				m.UserId = &InputUser{}
			}
			if err := m.UserId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSetInlineGameScore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_setInlineGameScore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_setInlineGameScore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditMessage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EditMessage = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Force = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &InputBotInlineMessageID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserId == nil {
				m.UserId = &InputUser{}
			}
			if err := m.UserId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetGameHighScores) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getGameHighScores: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getGameHighScores: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserId == nil {
				m.UserId = &InputUser{}
			}
			if err := m.UserId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetInlineGameHighScores) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getInlineGameHighScores: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getInlineGameHighScores: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &InputBotInlineMessageID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserId == nil {
				m.UserId = &InputUser{}
			}
			if err := m.UserId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetCommonChats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getCommonChats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getCommonChats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserId == nil {
				m.UserId = &InputUser{}
			}
			if err := m.UserId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetAllChats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getAllChats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getAllChats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ExceptIds = append(m.ExceptIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ExceptIds) == 0 {
					m.ExceptIds = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchemaTlSyncService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ExceptIds = append(m.ExceptIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ExceptIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetWebPage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getWebPage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getWebPage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesToggleDialogPin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_toggleDialogPin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_toggleDialogPin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pinned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pinned = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesReorderPinnedDialogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_reorderPinnedDialogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_reorderPinnedDialogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Force = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = append(m.Order, &InputPeer{})
			if err := m.Order[len(m.Order)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetPinnedDialogs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getPinnedDialogs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getPinnedDialogs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSetBotShippingResults) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_setBotShippingResults: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_setBotShippingResults: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			m.QueryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShippingOptions = append(m.ShippingOptions, &ShippingOption{})
			if err := m.ShippingOptions[len(m.ShippingOptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSetBotPrecheckoutResults) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_setBotPrecheckoutResults: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_setBotPrecheckoutResults: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			m.QueryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesUploadMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_uploadMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_uploadMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Media == nil {
				m.Media = &InputMedia{}
			}
			if err := m.Media.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSendScreenshotNotification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_sendScreenshotNotification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_sendScreenshotNotification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyToMsgId", wireType)
			}
			m.ReplyToMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyToMsgId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetFavedStickers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getFavedStickers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getFavedStickers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesFaveSticker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_faveSticker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_faveSticker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &InputDocument{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unfave", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Unfave == nil {
				m.Unfave = &Bool{}
			}
			if err := m.Unfave.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetUnreadMentions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getUnreadMentions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getUnreadMentions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetId", wireType)
			}
			m.OffsetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddOffset", wireType)
			}
			m.AddOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddOffset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinId", wireType)
			}
			m.MinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUpdatesGetState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_updates_getState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_updates_getState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUpdatesGetDifference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_updates_getDifference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_updates_getDifference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PtsTotalLimit", wireType)
			}
			m.PtsTotalLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PtsTotalLimit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qts", wireType)
			}
			m.Qts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUpdatesGetChannelDifference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_updates_getChannelDifference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_updates_getChannelDifference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Force = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &ChannelMessagesFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPhotosUpdateProfilePhoto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_photos_updateProfilePhoto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_photos_updateProfilePhoto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &InputPhoto{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPhotosUploadProfilePhoto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_photos_uploadProfilePhoto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_photos_uploadProfilePhoto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.File == nil {
				m.File = &InputFile{}
			}
			if err := m.File.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPhotosDeletePhotos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_photos_deletePhotos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_photos_deletePhotos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, &InputPhoto{})
			if err := m.Id[len(m.Id)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPhotosGetUserPhotos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_photos_getUserPhotos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_photos_getUserPhotos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserId == nil {
				m.UserId = &InputUser{}
			}
			if err := m.UserId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUploadSaveFilePart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_upload_saveFilePart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_upload_saveFilePart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileId", wireType)
			}
			m.FileId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePart", wireType)
			}
			m.FilePart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FilePart |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytes = append(m.Bytes[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytes == nil {
				m.Bytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUploadGetFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_upload_getFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_upload_getFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &InputFileLocation{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUploadSaveBigFilePart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_upload_saveBigFilePart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_upload_saveBigFilePart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileId", wireType)
			}
			m.FileId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePart", wireType)
			}
			m.FilePart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FilePart |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileTotalParts", wireType)
			}
			m.FileTotalParts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileTotalParts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytes = append(m.Bytes[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytes == nil {
				m.Bytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUploadGetWebFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_upload_getWebFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_upload_getWebFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &InputWebFileLocation{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUploadGetCdnFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_upload_getCdnFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_upload_getCdnFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileToken = append(m.FileToken[:0], dAtA[iNdEx:postIndex]...)
			if m.FileToken == nil {
				m.FileToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUploadReuploadCdnFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_upload_reuploadCdnFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_upload_reuploadCdnFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileToken = append(m.FileToken[:0], dAtA[iNdEx:postIndex]...)
			if m.FileToken == nil {
				m.FileToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestToken = append(m.RequestToken[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestToken == nil {
				m.RequestToken = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUploadGetCdnFileHashes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_upload_getCdnFileHashes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_upload_getCdnFileHashes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileToken = append(m.FileToken[:0], dAtA[iNdEx:postIndex]...)
			if m.FileToken == nil {
				m.FileToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpGetConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_getConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_getConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpGetNearestDc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_getNearestDc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_getNearestDc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpGetAppUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_getAppUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_getAppUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpSaveAppLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_saveAppLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_saveAppLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &InputAppEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpGetInviteText) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_getInviteText: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_getInviteText: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpGetSupport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_getSupport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_getSupport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpGetAppChangelog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_getAppChangelog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_getAppChangelog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevAppVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevAppVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpGetTermsOfService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_getTermsOfService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_getTermsOfService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpSetBotUpdatesStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_setBotUpdatesStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_setBotUpdatesStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingUpdatesCount", wireType)
			}
			m.PendingUpdatesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PendingUpdatesCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpGetCdnConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_getCdnConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_getCdnConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsReadHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_readHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_readHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsDeleteMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_deleteMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_deleteMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchemaTlSyncService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsDeleteUserHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_deleteUserHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_deleteUserHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserId == nil {
				m.UserId = &InputUser{}
			}
			if err := m.UserId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsReportSpam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_reportSpam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_reportSpam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserId == nil {
				m.UserId = &InputUser{}
			}
			if err := m.UserId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchemaTlSyncService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsGetMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_getMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_getMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchemaTlSyncService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsGetParticipants) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_getParticipants: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_getParticipants: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &ChannelParticipantsFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsGetParticipant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_getParticipant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_getParticipant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserId == nil {
				m.UserId = &InputUser{}
			}
			if err := m.UserId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsGetChannels) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_getChannels: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_getChannels: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, &InputChannel{})
			if err := m.Id[len(m.Id)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsGetFullChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_getFullChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_getFullChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsCreateChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_createChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_createChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Broadcast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Broadcast = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Megagroup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Megagroup = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsEditAbout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_editAbout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_editAbout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsEditAdmin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_editAdmin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_editAdmin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserId == nil {
				m.UserId = &InputUser{}
			}
			if err := m.UserId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminRights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdminRights == nil {
				m.AdminRights = &ChannelAdminRights{}
			}
			if err := m.AdminRights.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsEditTitle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_editTitle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_editTitle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsEditPhoto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_editPhoto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_editPhoto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Photo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Photo == nil {
				m.Photo = &InputChatPhoto{}
			}
			if err := m.Photo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsCheckUsername) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_checkUsername: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_checkUsername: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsUpdateUsername) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_updateUsername: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_updateUsername: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsJoinChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_joinChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_joinChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsLeaveChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_leaveChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_leaveChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsInviteToChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_inviteToChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_inviteToChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &InputUser{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsExportInvite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_exportInvite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_exportInvite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsDeleteChannel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_deleteChannel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_deleteChannel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsToggleInvites) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_toggleInvites: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_toggleInvites: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &Bool{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsExportMessageLink) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_exportMessageLink: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_exportMessageLink: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsToggleSignatures) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_toggleSignatures: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_toggleSignatures: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &Bool{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsUpdatePinnedMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_updatePinnedMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_updatePinnedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsGetAdminedPublicChannels) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_getAdminedPublicChannels: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_getAdminedPublicChannels: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsEditBanned) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_editBanned: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_editBanned: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserId == nil {
				m.UserId = &InputUser{}
			}
			if err := m.UserId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BannedRights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BannedRights == nil {
				m.BannedRights = &ChannelBannedRights{}
			}
			if err := m.BannedRights.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsGetAdminLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_getAdminLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_getAdminLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventsFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EventsFilter == nil {
				m.EventsFilter = &ChannelAdminLogEventsFilter{}
			}
			if err := m.EventsFilter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admins = append(m.Admins, &InputUser{})
			if err := m.Admins[len(m.Admins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinId", wireType)
			}
			m.MinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsSetStickers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_setStickers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_setStickers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stickerset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stickerset == nil {
				m.Stickerset = &InputStickerSet{}
			}
			if err := m.Stickerset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsReadMessageContents) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_readMessageContents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_readMessageContents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchemaTlSyncService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLBotsSendCustomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_bots_sendCustomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_bots_sendCustomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &DataJSON{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLBotsAnswerWebhookJSONQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_bots_answerWebhookJSONQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_bots_answerWebhookJSONQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			m.QueryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DataJSON{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPaymentsGetPaymentForm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_payments_getPaymentForm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_payments_getPaymentForm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPaymentsGetPaymentReceipt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_payments_getPaymentReceipt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_payments_getPaymentReceipt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPaymentsValidateRequestedInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_payments_validateRequestedInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_payments_validateRequestedInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Save", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Save = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &PaymentRequestedInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPaymentsSendPaymentForm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_payments_sendPaymentForm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_payments_sendPaymentForm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedInfoId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestedInfoId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShippingOptionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShippingOptionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credentials", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Credentials == nil {
				m.Credentials = &InputPaymentCredentials{}
			}
			if err := m.Credentials.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPaymentsGetSavedInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_payments_getSavedInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_payments_getSavedInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPaymentsClearSavedInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_payments_clearSavedInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_payments_clearSavedInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credentials", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Credentials = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Info = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLStickersCreateStickerSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_stickers_createStickerSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_stickers_createStickerSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Masks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Masks = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserId == nil {
				m.UserId = &InputUser{}
			}
			if err := m.UserId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stickers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stickers = append(m.Stickers, &InputStickerSetItem{})
			if err := m.Stickers[len(m.Stickers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLStickersRemoveStickerFromSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_stickers_removeStickerFromSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_stickers_removeStickerFromSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sticker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sticker == nil {
				m.Sticker = &InputDocument{}
			}
			if err := m.Sticker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLStickersChangeStickerPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_stickers_changeStickerPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_stickers_changeStickerPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sticker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sticker == nil {
				m.Sticker = &InputDocument{}
			}
			if err := m.Sticker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLStickersAddStickerToSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_stickers_addStickerToSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_stickers_addStickerToSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stickerset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stickerset == nil {
				m.Stickerset = &InputStickerSet{}
			}
			if err := m.Stickerset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sticker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sticker == nil {
				m.Sticker = &InputStickerSetItem{}
			}
			if err := m.Sticker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPhoneGetCallConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_phone_getCallConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_phone_getCallConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPhoneRequestCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_phone_requestCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_phone_requestCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserId == nil {
				m.UserId = &InputUser{}
			}
			if err := m.UserId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GAHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GAHash = append(m.GAHash[:0], dAtA[iNdEx:postIndex]...)
			if m.GAHash == nil {
				m.GAHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Protocol == nil {
				m.Protocol = &PhoneCallProtocol{}
			}
			if err := m.Protocol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPhoneAcceptCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_phone_acceptCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_phone_acceptCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPhoneCall{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GB", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GB = append(m.GB[:0], dAtA[iNdEx:postIndex]...)
			if m.GB == nil {
				m.GB = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Protocol == nil {
				m.Protocol = &PhoneCallProtocol{}
			}
			if err := m.Protocol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPhoneConfirmCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_phone_confirmCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_phone_confirmCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPhoneCall{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GA", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GA = append(m.GA[:0], dAtA[iNdEx:postIndex]...)
			if m.GA == nil {
				m.GA = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyFingerprint", wireType)
			}
			m.KeyFingerprint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyFingerprint |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Protocol == nil {
				m.Protocol = &PhoneCallProtocol{}
			}
			if err := m.Protocol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPhoneReceivedCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_phone_receivedCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_phone_receivedCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPhoneCall{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPhoneDiscardCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_phone_discardCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_phone_discardCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPhoneCall{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reason == nil {
				m.Reason = &PhoneCallDiscardReason{}
			}
			if err := m.Reason.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			m.ConnectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPhoneSetCallRating) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_phone_setCallRating: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_phone_setCallRating: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPhoneCall{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rating", wireType)
			}
			m.Rating = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rating |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPhoneSaveCallDebug) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_phone_saveCallDebug: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_phone_saveCallDebug: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPhoneCall{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Debug == nil {
				m.Debug = &DataJSON{}
			}
			if err := m.Debug.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLLangpackGetLangPack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_langpack_getLangPack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_langpack_getLangPack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLLangpackGetStrings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_langpack_getStrings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_langpack_getStrings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLLangpackGetDifference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_langpack_getDifference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_langpack_getDifference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromVersion", wireType)
			}
			m.FromVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromVersion |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLLangpackGetLanguages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_langpack_getLanguages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_langpack_getLanguages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUpdatesGetChannelDifference57) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_updates_getChannelDifference57: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_updates_getChannelDifference57: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &ChannelMessagesFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pts", wireType)
			}
			m.Pts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pts |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAuthSendCode73) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_auth_sendCode73: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_auth_sendCode73: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowFlashcall", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowFlashcall = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentNumber", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrentNumber == nil {
				m.CurrentNumber = &Bool{}
			}
			if err := m.CurrentNumber.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiId", wireType)
			}
			m.ApiId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountRegisterDevice73) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_registerDevice73: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_registerDevice73: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenType", wireType)
			}
			m.TokenType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceModel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceModel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppSandbox", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppSandbox == nil {
				m.AppSandbox = &Bool{}
			}
			if err := m.AppSandbox.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPhotosUpdateProfilePhoto73) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_photos_updateProfilePhoto73: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_photos_updateProfilePhoto73: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &InputPhoto{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Crop == nil {
				m.Crop = &InputPhotoCrop{}
			}
			if err := m.Crop.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPhotosUploadProfilePhoto73) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_photos_uploadProfilePhoto73: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_photos_uploadProfilePhoto73: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.File == nil {
				m.File = &InputFile{}
			}
			if err := m.File.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Caption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Caption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeoPoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GeoPoint == nil {
				m.GeoPoint = &InputGeoPoint{}
			}
			if err := m.GeoPoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Crop == nil {
				m.Crop = &InputPhotoCrop{}
			}
			if err := m.Crop.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpGetWkConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_getWkConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_getWkConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpGetJsonConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_getJsonConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_getJsonConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpGetScheme) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_getScheme: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_getScheme: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpGetConfig73) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_getConfig73: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_getConfig73: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpGetAppUpdate73) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_getAppUpdate73: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_getAppUpdate73: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceModel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceModel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpGetInviteText73) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_getInviteText73: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_getInviteText73: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpGetRecentMeUrls) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_getRecentMeUrls: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_getRecentMeUrls: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Referer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Referer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpGetTermsOfService73) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_getTermsOfService73: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_getTermsOfService73: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesReadHistory73) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_readHistory73: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_readHistory73: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesEditMessage73) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_editMessage73: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_editMessage73: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWebpage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoWebpage = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopGeoLive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StopGeoLive = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyMarkup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyMarkup == nil {
				m.ReplyMarkup = &ReplyMarkup{}
			}
			if err := m.ReplyMarkup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &MessageEntity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeoPoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GeoPoint == nil {
				m.GeoPoint = &InputGeoPoint{}
			}
			if err := m.GeoPoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSearch73) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_search73: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_search73: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FromId == nil {
				m.FromId = &InputUser{}
			}
			if err := m.FromId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &MessagesFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDate", wireType)
			}
			m.MinDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDate", wireType)
			}
			m.MaxDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesReadMentions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_readMentions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_readMentions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetRecentLocations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getRecentLocations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getRecentLocations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSendMultiMedia) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_sendMultiMedia: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_sendMultiMedia: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Background", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Background = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearDraft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClearDraft = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyToMsgId", wireType)
			}
			m.ReplyToMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyToMsgId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiMedia", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultiMedia = append(m.MultiMedia, &InputSingleMedia{})
			if err := m.MultiMedia[len(m.MultiMedia)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesUploadEncryptedFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_uploadEncryptedFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_uploadEncryptedFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputEncryptedChat{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.File == nil {
				m.File = &InputEncryptedFile{}
			}
			if err := m.File.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSaveRecentSticker73) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_saveRecentSticker73: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_saveRecentSticker73: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &InputDocument{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unsave", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Unsave == nil {
				m.Unsave = &Bool{}
			}
			if err := m.Unsave.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsDeleteHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_deleteHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_deleteHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsTogglePreHistoryHidden) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_togglePreHistoryHidden: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_togglePreHistoryHidden: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &Bool{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsGetParticipants73) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_getParticipants73: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_getParticipants73: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &ChannelParticipantsFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsEditBanned2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_editBanned2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_editBanned2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSilence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsSilence == nil {
				m.IsSilence = &Bool{}
			}
			if err := m.IsSilence.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsText", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IsText == nil {
				m.IsText = &Bool{}
			}
			if err := m.IsText.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsGetBanned2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_getBanned2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_getBanned2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			m.ChannelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPhone_WebrtcCreateOffer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_phone_WebrtcCreateOffer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_phone_WebrtcCreateOffer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPhoneCall{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sdp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sdp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPhone_WebrtcCreateAnswer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_phone_WebrtcCreateAnswer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_phone_WebrtcCreateAnswer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPhoneCall{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sdp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sdp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPhone_WebrtcAddCandidate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_phone_WebrtcAddCandidate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_phone_WebrtcAddCandidate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPhoneCall{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SdpId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SdpId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SdpIndex", wireType)
			}
			m.SdpIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SdpIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sdp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sdp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLInitConnection82) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_initConnection82: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_initConnection82: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiId", wireType)
			}
			m.ApiId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceModel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceModel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemLangCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemLangCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangPack", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangPack = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proxy == nil {
				m.Proxy = &InputClientProxy{}
			}
			if err := m.Proxy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = append(m.Query[:0], dAtA[iNdEx:postIndex]...)
			if m.Query == nil {
				m.Query = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAuthSendCode82) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_auth_sendCode82: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_auth_sendCode82: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowFlashcall", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowFlashcall = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentNumber", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrentNumber == nil {
				m.CurrentNumber = &Bool{}
			}
			if err := m.CurrentNumber.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiId", wireType)
			}
			m.ApiId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpGetConfig82) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_getConfig82: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_getConfig82: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpGetTermsOfServiceUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_getTermsOfServiceUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_getTermsOfServiceUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpAcceptTermsOfService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_acceptTermsOfService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_acceptTermsOfService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &DataJSON{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpGetDeepLinkInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_getDeepLinkInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_getDeepLinkInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpTest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_test: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_test: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetPeerDialogs82) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getPeerDialogs82: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getPeerDialogs82: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peers = append(m.Peers, &InputDialogPeer{})
			if err := m.Peers[len(m.Peers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetMessages82) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getMessages82: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getMessages82: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, &InputMessage{})
			if err := m.Id[len(m.Id)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetDialogs82) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getDialogs82: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getDialogs82: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludePinned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExcludePinned = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetDate", wireType)
			}
			m.OffsetDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetId", wireType)
			}
			m.OffsetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OffsetPeer == nil {
				m.OffsetPeer = &InputPeer{}
			}
			if err := m.OffsetPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetHistory82) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getHistory82: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getHistory82: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetId", wireType)
			}
			m.OffsetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetDate", wireType)
			}
			m.OffsetDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddOffset", wireType)
			}
			m.AddOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddOffset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinId", wireType)
			}
			m.MinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSearch82) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_search82: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_search82: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FromId == nil {
				m.FromId = &InputUser{}
			}
			if err := m.FromId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &MessagesFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDate", wireType)
			}
			m.MinDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDate", wireType)
			}
			m.MaxDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetId", wireType)
			}
			m.OffsetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddOffset", wireType)
			}
			m.AddOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddOffset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxId", wireType)
			}
			m.MaxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinId", wireType)
			}
			m.MinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSendMedia82) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_sendMedia82: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_sendMedia82: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Background", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Background = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearDraft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClearDraft = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyToMsgId", wireType)
			}
			m.ReplyToMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyToMsgId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Media == nil {
				m.Media = &InputMedia{}
			}
			if err := m.Media.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyMarkup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyMarkup == nil {
				m.ReplyMarkup = &ReplyMarkup{}
			}
			if err := m.ReplyMarkup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &MessageEntity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLInitConnection114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_initConnection114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_initConnection114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiId", wireType)
			}
			m.ApiId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceModel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceModel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemLangCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemLangCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangPack", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangPack = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proxy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proxy == nil {
				m.Proxy = &InputClientProxy{}
			}
			if err := m.Proxy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &JSONValue{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = append(m.Query[:0], dAtA[iNdEx:postIndex]...)
			if m.Query == nil {
				m.Query = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLInvokeWithMessagesRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_invokeWithMessagesRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_invokeWithMessagesRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Range == nil {
				m.Range = &MessageRange{}
			}
			if err := m.Range.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = append(m.Query[:0], dAtA[iNdEx:postIndex]...)
			if m.Query == nil {
				m.Query = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLInvokeWithTakeout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_invokeWithTakeout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_invokeWithTakeout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakeoutId", wireType)
			}
			m.TakeoutId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TakeoutId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = append(m.Query[:0], dAtA[iNdEx:postIndex]...)
			if m.Query == nil {
				m.Query = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAuthSendCode114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_auth_sendCode114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_auth_sendCode114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiId", wireType)
			}
			m.ApiId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &CodeSettings{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAuthSignUp114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_auth_signUp114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_auth_signUp114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCodeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCodeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAuthCheckPassword114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_auth_checkPassword114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_auth_checkPassword114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Password == nil {
				m.Password = &InputCheckPasswordSRP{}
			}
			if err := m.Password.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAuthExportLoginToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_auth_exportLoginToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_auth_exportLoginToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiId", wireType)
			}
			m.ApiId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ExceptIds = append(m.ExceptIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ExceptIds) == 0 {
					m.ExceptIds = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchemaTlSyncService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ExceptIds = append(m.ExceptIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ExceptIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAuthImportLoginToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_auth_importLoginToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_auth_importLoginToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = append(m.Token[:0], dAtA[iNdEx:postIndex]...)
			if m.Token == nil {
				m.Token = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAuthAcceptLoginToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_auth_acceptLoginToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_auth_acceptLoginToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = append(m.Token[:0], dAtA[iNdEx:postIndex]...)
			if m.Token == nil {
				m.Token = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountRegisterDevice114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_registerDevice114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_registerDevice114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoMuted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoMuted = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenType", wireType)
			}
			m.TokenType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppSandbox", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppSandbox == nil {
				m.AppSandbox = &Bool{}
			}
			if err := m.AppSandbox.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = append(m.Secret[:0], dAtA[iNdEx:postIndex]...)
			if m.Secret == nil {
				m.Secret = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OtherUids = append(m.OtherUids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OtherUids) == 0 {
					m.OtherUids = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchemaTlSyncService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OtherUids = append(m.OtherUids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherUids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountUnregisterDevice114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_unregisterDevice114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_unregisterDevice114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenType", wireType)
			}
			m.TokenType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OtherUids = append(m.OtherUids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OtherUids) == 0 {
					m.OtherUids = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchemaTlSyncService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OtherUids = append(m.OtherUids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherUids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountGetWallPapers114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_getWallPapers114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_getWallPapers114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountSendChangePhoneCode114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_sendChangePhoneCode114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_sendChangePhoneCode114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &CodeSettings{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountGetPasswordSettings114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_getPasswordSettings114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_getPasswordSettings114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Password == nil {
				m.Password = &InputCheckPasswordSRP{}
			}
			if err := m.Password.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountUpdatePasswordSettings114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_updatePasswordSettings114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_updatePasswordSettings114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Password == nil {
				m.Password = &InputCheckPasswordSRP{}
			}
			if err := m.Password.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewSettings == nil {
				m.NewSettings = &Account_PasswordInputSettings{}
			}
			if err := m.NewSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountSendConfirmPhoneCode114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_sendConfirmPhoneCode114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_sendConfirmPhoneCode114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &CodeSettings{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountGetTmpPassword114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_getTmpPassword114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_getTmpPassword114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Password == nil {
				m.Password = &InputCheckPasswordSRP{}
			}
			if err := m.Password.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountGetWebAuthorizations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_getWebAuthorizations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_getWebAuthorizations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountResetWebAuthorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_resetWebAuthorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_resetWebAuthorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountResetWebAuthorizations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_resetWebAuthorizations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_resetWebAuthorizations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountGetAllSecureValues) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_getAllSecureValues: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_getAllSecureValues: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountGetSecureValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_getSecureValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_getSecureValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Types = append(m.Types, &SecureValueType{})
			if err := m.Types[len(m.Types)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountSaveSecureValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_saveSecureValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_saveSecureValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &InputSecureValue{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecureSecretId", wireType)
			}
			m.SecureSecretId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecureSecretId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountDeleteSecureValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_deleteSecureValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_deleteSecureValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Types = append(m.Types, &SecureValueType{})
			if err := m.Types[len(m.Types)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountGetAuthorizationForm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_getAuthorizationForm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_getAuthorizationForm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scope = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountAcceptAuthorization) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_acceptAuthorization: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_acceptAuthorization: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BotId", wireType)
			}
			m.BotId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BotId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scope", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scope = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueHashes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueHashes = append(m.ValueHashes, &SecureValueHash{})
			if err := m.ValueHashes[len(m.ValueHashes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credentials", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Credentials == nil {
				m.Credentials = &SecureCredentialsEncrypted{}
			}
			if err := m.Credentials.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountSendVerifyPhoneCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_sendVerifyPhoneCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_sendVerifyPhoneCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &CodeSettings{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountVerifyPhone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_verifyPhone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_verifyPhone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCodeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCodeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountSendVerifyEmailCode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_sendVerifyEmailCode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_sendVerifyEmailCode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountVerifyEmail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_verifyEmail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_verifyEmail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountInitTakeoutSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_initTakeoutSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_initTakeoutSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contacts", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Contacts = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageUsers", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MessageUsers = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageChats", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MessageChats = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageMegagroups", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MessageMegagroups = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageChannels", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MessageChannels = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Files = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileMaxSize", wireType)
			}
			m.FileMaxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileMaxSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountFinishTakeoutSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_finishTakeoutSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_finishTakeoutSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountConfirmPasswordEmail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_confirmPasswordEmail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_confirmPasswordEmail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountResendPasswordEmail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_resendPasswordEmail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_resendPasswordEmail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountCancelPasswordEmail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_cancelPasswordEmail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_cancelPasswordEmail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountGetContactSignUpNotification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_getContactSignUpNotification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_getContactSignUpNotification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountSetContactSignUpNotification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_setContactSignUpNotification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_setContactSignUpNotification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Silent == nil {
				m.Silent = &Bool{}
			}
			if err := m.Silent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountGetNotifyExceptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_getNotifyExceptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_getNotifyExceptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompareSound", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CompareSound = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputNotifyPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountGetWallPaper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_getWallPaper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_getWallPaper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wallpaper", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Wallpaper == nil {
				m.Wallpaper = &InputWallPaper{}
			}
			if err := m.Wallpaper.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountUploadWallPaper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_uploadWallPaper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_uploadWallPaper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.File == nil {
				m.File = &InputFile{}
			}
			if err := m.File.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MimeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MimeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &WallPaperSettings{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountSaveWallPaper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_saveWallPaper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_saveWallPaper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wallpaper", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Wallpaper == nil {
				m.Wallpaper = &InputWallPaper{}
			}
			if err := m.Wallpaper.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unsave", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Unsave == nil {
				m.Unsave = &Bool{}
			}
			if err := m.Unsave.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &WallPaperSettings{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountInstallWallPaper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_installWallPaper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_installWallPaper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wallpaper", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Wallpaper == nil {
				m.Wallpaper = &InputWallPaper{}
			}
			if err := m.Wallpaper.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &WallPaperSettings{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountResetWallPapers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_resetWallPapers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_resetWallPapers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountGetAutoDownloadSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_getAutoDownloadSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_getAutoDownloadSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountSaveAutoDownloadSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_saveAutoDownloadSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_saveAutoDownloadSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Low", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Low = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field High", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.High = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &AutoDownloadSettings{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountUploadTheme) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_uploadTheme: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_uploadTheme: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.File == nil {
				m.File = &InputFile{}
			}
			if err := m.File.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thumb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thumb == nil {
				m.Thumb = &InputFile{}
			}
			if err := m.Thumb.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MimeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MimeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountCreateTheme) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_createTheme: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_createTheme: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Document", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Document == nil {
				m.Document = &InputDocument{}
			}
			if err := m.Document.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &InputThemeSettings{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountUpdateTheme) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_updateTheme: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_updateTheme: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Theme", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Theme == nil {
				m.Theme = &InputTheme{}
			}
			if err := m.Theme.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Document", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Document == nil {
				m.Document = &InputDocument{}
			}
			if err := m.Document.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &InputThemeSettings{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountSaveTheme) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_saveTheme: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_saveTheme: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Theme", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Theme == nil {
				m.Theme = &InputTheme{}
			}
			if err := m.Theme.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unsave", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Unsave == nil {
				m.Unsave = &Bool{}
			}
			if err := m.Unsave.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountInstallTheme) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_installTheme: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_installTheme: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dark", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Dark = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Theme", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Theme == nil {
				m.Theme = &InputTheme{}
			}
			if err := m.Theme.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountGetTheme) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_getTheme: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_getTheme: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Theme", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Theme == nil {
				m.Theme = &InputTheme{}
			}
			if err := m.Theme.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentId", wireType)
			}
			m.DocumentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DocumentId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountGetThemes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_getThemes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_getThemes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Format", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Format = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountSetContentSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_setContentSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_setContentSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensitiveEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SensitiveEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountGetContentSettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_getContentSettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_getContentSettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountGetMultiWallPapers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_getMultiWallPapers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_getMultiWallPapers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wallpapers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wallpapers = append(m.Wallpapers, &InputWallPaper{})
			if err := m.Wallpapers[len(m.Wallpapers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUsersSetSecureValueErrors) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_users_setSecureValueErrors: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_users_setSecureValueErrors: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &InputUser{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Errors = append(m.Errors, &SecureValueError{})
			if err := m.Errors[len(m.Errors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLContactsGetContactIDs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_contacts_getContactIDs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_contacts_getContactIDs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLContactsDeleteContacts114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_contacts_deleteContacts114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_contacts_deleteContacts114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, &InputUser{})
			if err := m.Id[len(m.Id)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLContactsDeleteByPhones) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_contacts_deleteByPhones: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_contacts_deleteByPhones: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phones", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phones = append(m.Phones, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLContactsGetSaved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_contacts_getSaved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_contacts_getSaved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLContactsToggleTopPeers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_contacts_toggleTopPeers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_contacts_toggleTopPeers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Enabled == nil {
				m.Enabled = &Bool{}
			}
			if err := m.Enabled.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLContactsAddContact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_contacts_addContact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_contacts_addContact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddPhonePrivacyException", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddPhonePrivacyException = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &InputUser{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLContactsAcceptContact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_contacts_acceptContact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_contacts_acceptContact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &InputUser{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLContactsGetLocated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_contacts_getLocated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_contacts_getLocated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Background", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Background = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeoPoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GeoPoint == nil {
				m.GeoPoint = &InputGeoPoint{}
			}
			if err := m.GeoPoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfExpires", wireType)
			}
			m.SelfExpires = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfExpires |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetDialogs114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getDialogs114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getDialogs114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludePinned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExcludePinned = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderId", wireType)
			}
			m.FolderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FolderId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetDate", wireType)
			}
			m.OffsetDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetId", wireType)
			}
			m.OffsetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OffsetPeer == nil {
				m.OffsetPeer = &InputPeer{}
			}
			if err := m.OffsetPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSendMessage114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_sendMessage114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_sendMessage114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWebpage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoWebpage = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Background", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Background = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearDraft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClearDraft = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyToMsgId", wireType)
			}
			m.ReplyToMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyToMsgId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyMarkup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyMarkup == nil {
				m.ReplyMarkup = &ReplyMarkup{}
			}
			if err := m.ReplyMarkup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &MessageEntity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleDate", wireType)
			}
			m.ScheduleDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduleDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSendMedia114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_sendMedia114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_sendMedia114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Background", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Background = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearDraft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClearDraft = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyToMsgId", wireType)
			}
			m.ReplyToMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyToMsgId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Media == nil {
				m.Media = &InputMedia{}
			}
			if err := m.Media.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyMarkup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyMarkup == nil {
				m.ReplyMarkup = &ReplyMarkup{}
			}
			if err := m.ReplyMarkup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &MessageEntity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleDate", wireType)
			}
			m.ScheduleDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduleDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesForwardMessages114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_forwardMessages114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_forwardMessages114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Background", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Background = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithMyScore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithMyScore = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grouped", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Grouped = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FromPeer == nil {
				m.FromPeer = &InputPeer{}
			}
			if err := m.FromPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchemaTlSyncService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		case 8:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RandomId = append(m.RandomId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RandomId) == 0 {
					m.RandomId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchemaTlSyncService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RandomId = append(m.RandomId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ToPeer == nil {
				m.ToPeer = &InputPeer{}
			}
			if err := m.ToPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleDate", wireType)
			}
			m.ScheduleDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduleDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_report: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_report: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchemaTlSyncService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reason == nil {
				m.Reason = &ReportReason{}
			}
			if err := m.Reason.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetStickers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getStickers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getStickers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emoticon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Emoticon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetWebPagePreview114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getWebPagePreview114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getWebPagePreview114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &MessageEntity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesExportChatInvite114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_exportChatInvite114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_exportChatInvite114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSearchGlobal114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_searchGlobal114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_searchGlobal114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderId", wireType)
			}
			m.FolderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FolderId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetRate", wireType)
			}
			m.OffsetRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetRate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OffsetPeer == nil {
				m.OffsetPeer = &InputPeer{}
			}
			if err := m.OffsetPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetId", wireType)
			}
			m.OffsetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSendInlineBotResult114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_sendInlineBotResult114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_sendInlineBotResult114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Background", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Background = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearDraft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClearDraft = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HideVia", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HideVia = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyToMsgId", wireType)
			}
			m.ReplyToMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyToMsgId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			m.QueryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueryId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleDate", wireType)
			}
			m.ScheduleDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduleDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesEditMessage114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_editMessage114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_editMessage114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWebpage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoWebpage = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Media == nil {
				m.Media = &InputMedia{}
			}
			if err := m.Media.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyMarkup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyMarkup == nil {
				m.ReplyMarkup = &ReplyMarkup{}
			}
			if err := m.ReplyMarkup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &MessageEntity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleDate", wireType)
			}
			m.ScheduleDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduleDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesEditInlineBotMessage114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_editInlineBotMessage114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_editInlineBotMessage114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoWebpage", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NoWebpage = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &InputBotInlineMessageID{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Media == nil {
				m.Media = &InputMedia{}
			}
			if err := m.Media.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyMarkup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplyMarkup == nil {
				m.ReplyMarkup = &ReplyMarkup{}
			}
			if err := m.ReplyMarkup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &MessageEntity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesToggleDialogPin114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_toggleDialogPin114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_toggleDialogPin114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pinned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Pinned = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputDialogPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesReorderPinnedDialogs114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_reorderPinnedDialogs114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_reorderPinnedDialogs114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Force", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Force = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderId", wireType)
			}
			m.FolderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FolderId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = append(m.Order, &InputDialogPeer{})
			if err := m.Order[len(m.Order)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetPinnedDialogs114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getPinnedDialogs114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getPinnedDialogs114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderId", wireType)
			}
			m.FolderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FolderId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetRecentLocations114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getRecentLocations114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getRecentLocations114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSendMultiMedia114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_sendMultiMedia114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_sendMultiMedia114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Background", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Background = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClearDraft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClearDraft = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyToMsgId", wireType)
			}
			m.ReplyToMsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyToMsgId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiMedia", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultiMedia = append(m.MultiMedia, &InputSingleMedia{})
			if err := m.MultiMedia[len(m.MultiMedia)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleDate", wireType)
			}
			m.ScheduleDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScheduleDate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSearchStickerSets) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_searchStickerSets: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_searchStickerSets: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExcludeFeatured", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ExcludeFeatured = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Q", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Q = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetSplitRanges) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getSplitRanges: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getSplitRanges: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesMarkDialogUnread) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_markDialogUnread: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_markDialogUnread: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unread", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unread = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputDialogPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetDialogUnreadMarks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getDialogUnreadMarks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getDialogUnreadMarks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesClearAllDrafts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_clearAllDrafts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_clearAllDrafts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesUpdatePinnedMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_updatePinnedMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_updatePinnedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unpin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unpin = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PmOneside", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PmOneside = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSendVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_sendVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_sendVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = append(m.Options, make([]byte, postIndex-iNdEx))
			copy(m.Options[len(m.Options)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetPollResults) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getPollResults: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getPollResults: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetOnlines) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getOnlines: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getOnlines: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetStatsURL) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getStatsURL: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getStatsURL: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dark", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Dark = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Params = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesEditChatAbout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_editChatAbout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_editChatAbout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesEditChatDefaultBannedRights) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_editChatDefaultBannedRights: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_editChatDefaultBannedRights: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BannedRights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BannedRights == nil {
				m.BannedRights = &ChatBannedRights{}
			}
			if err := m.BannedRights.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetEmojiKeywords) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getEmojiKeywords: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getEmojiKeywords: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetEmojiKeywordsDifference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getEmojiKeywordsDifference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getEmojiKeywordsDifference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromVersion", wireType)
			}
			m.FromVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromVersion |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetEmojiKeywordsLanguages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getEmojiKeywordsLanguages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getEmojiKeywordsLanguages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangCodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangCodes = append(m.LangCodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetEmojiURL) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getEmojiURL: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getEmojiURL: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetSearchCounters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getSearchCounters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getSearchCounters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filters = append(m.Filters, &MessagesFilter{})
			if err := m.Filters[len(m.Filters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesRequestUrlAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_requestUrlAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_requestUrlAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ButtonId", wireType)
			}
			m.ButtonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ButtonId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesAcceptUrlAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_acceptUrlAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_acceptUrlAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteAllowed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WriteAllowed = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ButtonId", wireType)
			}
			m.ButtonId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ButtonId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesHidePeerSettingsBar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_hidePeerSettingsBar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_hidePeerSettingsBar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetScheduledHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getScheduledHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getScheduledHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetScheduledMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getScheduledMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getScheduledMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchemaTlSyncService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSendScheduledMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_sendScheduledMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_sendScheduledMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchemaTlSyncService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesDeleteScheduledMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_deleteScheduledMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_deleteScheduledMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchemaTlSyncService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetPollVotes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getPollVotes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getPollVotes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Option = append(m.Option[:0], dAtA[iNdEx:postIndex]...)
			if m.Option == nil {
				m.Option = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesToggleStickerSets) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_toggleStickerSets: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_toggleStickerSets: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uninstall", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Uninstall = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Archive = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unarchive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unarchive = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stickersets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stickersets = append(m.Stickersets, &InputStickerSet{})
			if err := m.Stickersets[len(m.Stickersets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetDialogFilters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getDialogFilters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getDialogFilters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetSuggestedDialogFilters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getSuggestedDialogFilters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getSuggestedDialogFilters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesUpdateDialogFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_updateDialogFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_updateDialogFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &DialogFilter{}
			}
			if err := m.Filter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesUpdateDialogFiltersOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_updateDialogFiltersOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_updateDialogFiltersOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Order = append(m.Order, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Order) == 0 {
					m.Order = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchemaTlSyncService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Order = append(m.Order, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetOldFeaturedStickers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getOldFeaturedStickers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getOldFeaturedStickers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUploadGetFile114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_upload_getFile114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_upload_getFile114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Precise", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Precise = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdnSupported", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CdnSupported = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &InputFileLocation{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUploadReuploadCdnFile114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_upload_reuploadCdnFile114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_upload_reuploadCdnFile114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileToken = append(m.FileToken[:0], dAtA[iNdEx:postIndex]...)
			if m.FileToken == nil {
				m.FileToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestToken = append(m.RequestToken[:0], dAtA[iNdEx:postIndex]...)
			if m.RequestToken == nil {
				m.RequestToken = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUploadGetCdnFileHashes114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_upload_getCdnFileHashes114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_upload_getCdnFileHashes114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileToken = append(m.FileToken[:0], dAtA[iNdEx:postIndex]...)
			if m.FileToken == nil {
				m.FileToken = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLUploadGetFileHashes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_upload_getFileHashes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_upload_getFileHashes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &InputFileLocation{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpGetConfig114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_getConfig114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_getConfig114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpGetAppUpdate114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_getAppUpdate114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_getAppUpdate114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpGetAppConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_getAppConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_getAppConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpGetPassportConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_getPassportConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_getPassportConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpGetSupportName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_getSupportName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_getSupportName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpGetUserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_getUserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_getUserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserId == nil {
				m.UserId = &InputUser{}
			}
			if err := m.UserId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpEditUserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_editUserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_editUserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserId == nil {
				m.UserId = &InputUser{}
			}
			if err := m.UserId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entities = append(m.Entities, &MessageEntity{})
			if err := m.Entities[len(m.Entities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpGetPromoData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_getPromoData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_getPromoData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpHidePromoData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_hidePromoData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_hidePromoData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsGetMessages114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_getMessages114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_getMessages114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id, &InputMessage{})
			if err := m.Id[len(m.Id)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsCreateChannel114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_createChannel114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_createChannel114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Broadcast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Broadcast = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Megagroup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Megagroup = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field About", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.About = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeoPoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GeoPoint == nil {
				m.GeoPoint = &InputGeoPoint{}
			}
			if err := m.GeoPoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsEditAdmin114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_editAdmin114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_editAdmin114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserId == nil {
				m.UserId = &InputUser{}
			}
			if err := m.UserId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminRights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdminRights == nil {
				m.AdminRights = &ChatAdminRights{}
			}
			if err := m.AdminRights.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rank = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsExportMessageLink114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_exportMessageLink114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_exportMessageLink114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grouped", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Grouped == nil {
				m.Grouped = &Bool{}
			}
			if err := m.Grouped.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsGetAdminedPublicChannels114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_getAdminedPublicChannels114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_getAdminedPublicChannels114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByLocation", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ByLocation = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckLimit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CheckLimit = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsEditBanned114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_editBanned114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_editBanned114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserId == nil {
				m.UserId = &InputUser{}
			}
			if err := m.UserId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BannedRights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BannedRights == nil {
				m.BannedRights = &ChatBannedRights{}
			}
			if err := m.BannedRights.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsGetLeftChannels) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_getLeftChannels: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_getLeftChannels: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsGetGroupsForDiscussion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_getGroupsForDiscussion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_getGroupsForDiscussion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsSetDiscussionGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_setDiscussionGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_setDiscussionGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Broadcast", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Broadcast == nil {
				m.Broadcast = &InputChannel{}
			}
			if err := m.Broadcast.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Group == nil {
				m.Group = &InputChannel{}
			}
			if err := m.Group.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsEditCreator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_editCreator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_editCreator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserId == nil {
				m.UserId = &InputUser{}
			}
			if err := m.UserId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Password == nil {
				m.Password = &InputCheckPasswordSRP{}
			}
			if err := m.Password.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsEditLocation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_editLocation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_editLocation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeoPoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GeoPoint == nil {
				m.GeoPoint = &InputGeoPoint{}
			}
			if err := m.GeoPoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsToggleSlowMode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_toggleSlowMode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_toggleSlowMode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seconds", wireType)
			}
			m.Seconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLChannelsGetInactiveChannels) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_channels_getInactiveChannels: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_channels_getInactiveChannels: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLBotsSetBotCommands) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_bots_setBotCommands: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_bots_setBotCommands: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commands", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commands = append(m.Commands, &BotCommand{})
			if err := m.Commands[len(m.Commands)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPaymentsGetBankCardData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_payments_getBankCardData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_payments_getBankCardData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLStickersCreateStickerSet114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_stickers_createStickerSet114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_stickers_createStickerSet114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Masks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Masks = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Animated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Animated = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserId == nil {
				m.UserId = &InputUser{}
			}
			if err := m.UserId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thumb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thumb == nil {
				m.Thumb = &InputDocument{}
			}
			if err := m.Thumb.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stickers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stickers = append(m.Stickers, &InputStickerSetItem{})
			if err := m.Stickers[len(m.Stickers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLStickersSetStickerSetThumb) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_stickers_setStickerSetThumb: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_stickers_setStickerSetThumb: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stickerset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stickerset == nil {
				m.Stickerset = &InputStickerSet{}
			}
			if err := m.Stickerset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thumb", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Thumb == nil {
				m.Thumb = &InputDocument{}
			}
			if err := m.Thumb.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPhoneRequestCall114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_phone_requestCall114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_phone_requestCall114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Video", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Video = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserId == nil {
				m.UserId = &InputUser{}
			}
			if err := m.UserId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GAHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GAHash = append(m.GAHash[:0], dAtA[iNdEx:postIndex]...)
			if m.GAHash == nil {
				m.GAHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Protocol == nil {
				m.Protocol = &PhoneCallProtocol{}
			}
			if err := m.Protocol.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPhoneDiscardCall114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_phone_discardCall114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_phone_discardCall114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Video", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Video = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPhoneCall{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reason == nil {
				m.Reason = &PhoneCallDiscardReason{}
			}
			if err := m.Reason.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			m.ConnectionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnectionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPhoneSetCallRating114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_phone_setCallRating114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_phone_setCallRating114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserInitiative", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UserInitiative = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPhoneCall{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rating", wireType)
			}
			m.Rating = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rating |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPhoneSendSignalingData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_phone_sendSignalingData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_phone_sendSignalingData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPhoneCall{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLLangpackGetLangPack114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_langpack_getLangPack114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_langpack_getLangPack114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangPack", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangPack = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLLangpackGetStrings114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_langpack_getStrings114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_langpack_getStrings114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangPack", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangPack = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLLangpackGetDifference114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_langpack_getDifference114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_langpack_getDifference114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangPack", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangPack = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromVersion", wireType)
			}
			m.FromVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromVersion |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLLangpackGetLanguages114) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_langpack_getLanguages114: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_langpack_getLanguages114: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangPack", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangPack = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLLangpackGetLanguage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_langpack_getLanguage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_langpack_getLanguage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangPack", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangPack = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLFoldersEditPeerFolders) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_folders_editPeerFolders: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_folders_editPeerFolders: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FolderPeers = append(m.FolderPeers, &InputFolderPeer{})
			if err := m.FolderPeers[len(m.FolderPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLFoldersDeleteFolder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_folders_deleteFolder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_folders_deleteFolder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FolderId", wireType)
			}
			m.FolderId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FolderId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLStatsGetBroadcastStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_stats_getBroadcastStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_stats_getBroadcastStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dark", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Dark = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLStatsLoadAsyncGraph) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_stats_loadAsyncGraph: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_stats_loadAsyncGraph: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountGetGlobalPrivacySettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_getGlobalPrivacySettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_getGlobalPrivacySettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLAccountSetGlobalPrivacySettings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_account_setGlobalPrivacySettings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_account_setGlobalPrivacySettings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Settings == nil {
				m.Settings = &GlobalPrivacySettings{}
			}
			if err := m.Settings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLStatsGetMegagroupStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_stats_getMegagroupStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_stats_getMegagroupStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dark", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Dark = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &InputChannel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPhotosUploadProfilePhoto117) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_photos_uploadProfilePhoto117: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_photos_uploadProfilePhoto117: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.File == nil {
				m.File = &InputFile{}
			}
			if err := m.File.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Video", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Video == nil {
				m.Video = &InputFile{}
			}
			if err := m.Video.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoStartTs", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.VideoStartTs = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpDismissSuggestion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_dismissSuggestion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_dismissSuggestion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suggestion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suggestion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLPhotosUpdateProfilePhoto117) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_photos_updateProfilePhoto117: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_photos_updateProfilePhoto117: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &InputPhoto{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLHelpGetCountriesList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_help_getCountriesList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_help_getCountriesList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			m.Hash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hash |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSendEncrypted118) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_sendEncrypted118: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_sendEncrypted118: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputEncryptedChat{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesGetBotCallbackAnswer118) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_getBotCallbackAnswer118: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_getBotCallbackAnswer118: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Game", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Game = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputPeer{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			m.MsgId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Password == nil {
				m.Password = &InputCheckPasswordSRP{}
			}
			if err := m.Password.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLMessagesSendEncryptedFile118) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_messages_sendEncryptedFile118: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_messages_sendEncryptedFile118: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Silent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Silent = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &InputEncryptedChat{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomId", wireType)
			}
			m.RandomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.File == nil {
				m.File = &InputEncryptedFile{}
			}
			if err := m.File.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TLLangpackGetDifference118) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TL_langpack_getDifference118: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TL_langpack_getDifference118: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromVersion", wireType)
			}
			m.FromVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromVersion |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_WallPaper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_WallPaper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_WallPaper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &WallPaper{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &User{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_UserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_UserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_UserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &UserInfo{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_ContactStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_ContactStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_ContactStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &ContactStatus{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VectorInt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_int: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_int: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Datas = append(m.Datas, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Datas) == 0 {
					m.Datas = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchemaTlSyncService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Datas = append(m.Datas, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_ReceivedNotifyMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_ReceivedNotifyMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_ReceivedNotifyMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &ReceivedNotifyMessage{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VectorLong) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_long: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_long: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Datas = append(m.Datas, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSchemaTlSyncService
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSchemaTlSyncService
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Datas) == 0 {
					m.Datas = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSchemaTlSyncService
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Datas = append(m.Datas, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_StickerSetCovered) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_StickerSetCovered: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_StickerSetCovered: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &StickerSetCovered{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_CdnFileHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_CdnFileHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_CdnFileHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &CdnFileHash{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_LangPackString) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_LangPackString: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_LangPackString: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &LangPackString{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_LangPackLanguage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_LangPackLanguage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_LangPackLanguage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &LangPackLanguage{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_SecureValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_SecureValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_SecureValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &SecureValue{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_SavedContact) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_SavedContact: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_SavedContact: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &SavedContact{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_MessageRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_MessageRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_MessageRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &MessageRange{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_DialogPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_DialogPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_DialogPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &DialogPeer{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_EmojiLanguage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_EmojiLanguage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_EmojiLanguage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &EmojiLanguage{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_Messages_SearchCounter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_Messages_SearchCounter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_Messages_SearchCounter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &Messages_SearchCounter{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_DialogFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_DialogFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_DialogFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &DialogFilter{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_DialogFilterSuggested) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_DialogFilterSuggested: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_DialogFilterSuggested: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &DialogFilterSuggested{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vector_FileHash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vector_FileHash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vector_FileHash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &FileHash{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchemaTlSyncService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSchemaTlSyncService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSchemaTlSyncService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSchemaTlSyncService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchemaTlSyncService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSchemaTlSyncService
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSchemaTlSyncService
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSchemaTlSyncService
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSchemaTlSyncService        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSchemaTlSyncService          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSchemaTlSyncService = fmt.Errorf("proto: unexpected end of group")
)
